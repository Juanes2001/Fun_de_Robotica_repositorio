
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08010130  08010130  00020130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cf0  08010cf0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08010cf0  08010cf0  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010cf0  08010cf0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cf0  08010cf0  00020cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cf4  08010cf4  00020cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010cf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012098  200001e8  08010edc  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012280  08010edc  00032280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088e5  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187e  00000000  00000000  00038af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0003a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0003aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011372  00000000  00000000  0003b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a12  00000000  00000000  0004c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000593ce  00000000  00000000  00055edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  000af2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010118 	.word	0x08010118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08010118 	.word	0x08010118

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder


int main(void){
 8000cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbc:	ed2d 8b02 	vpush	{d8}
 8000cc0:	b08d      	sub	sp, #52	; 0x34
 8000cc2:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc4:	4b66      	ldr	r3, [pc, #408]	; (8000e60 <main+0x1a8>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a65      	ldr	r2, [pc, #404]	; (8000e60 <main+0x1a8>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cd4:	2008      	movs	r0, #8
 8000cd6:	f007 ff0d 	bl	8008af4 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cda:	f000 fb43 	bl	8001364 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <main+0x1ac>)
 8000ce0:	4a61      	ldr	r2, [pc, #388]	; (8000e68 <main+0x1b0>)
 8000ce2:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4861      	ldr	r0, [pc, #388]	; (8000e6c <main+0x1b4>)
 8000ce8:	f001 f80c 	bl	8001d04 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	495d      	ldr	r1, [pc, #372]	; (8000e70 <main+0x1b8>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]

	double angleToGo_Relative = 0;
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double angle_start = 0;
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2300 	strd	r2, r3, [r7]

    /* Loop forever */
	while(1){

		if (!flag_Astar){
 8000d18:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <main+0x1bc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <main+0x6c>
			fillComand(); // Se puede leer cualquier comando excepto cuando se esta lleyendo el grid de Astar
 8000d20:	f002 fbc8 	bl	80034b4 <fillComand>
		}

		if (flag_NOP){
 8000d24:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <main+0x1c0>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d01b      	beq.n	8000d64 <main+0xac>

			 NOP(handler_Motor_Array,
 8000d2c:	4b50      	ldr	r3, [pc, #320]	; (8000e70 <main+0x1b8>)
 8000d2e:	ed93 7b00 	vldr	d7, [r3]
 8000d32:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <main+0x1c4>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <main+0x1c8>)
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <main+0x1cc>)
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <main+0x1d0>)
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	4b51      	ldr	r3, [pc, #324]	; (8000e8c <main+0x1d4>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4e:	eef0 0a67 	vmov.f32	s1, s15
 8000d52:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <main+0x1d8>)
 8000d54:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <main+0x1dc>)
 8000d56:	4945      	ldr	r1, [pc, #276]	; (8000e6c <main+0x1b4>)
 8000d58:	484f      	ldr	r0, [pc, #316]	; (8000e98 <main+0x1e0>)
 8000d5a:	f002 fb81 	bl	8003460 <NOP>
				 &flag_measurements,
				 &flag_control,
				 data,
				 Mode_dir);

			 flag_NOP = RESET;
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <main+0x1c0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
		}

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <main+0x1e4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d01a      	beq.n	8000da2 <main+0xea>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <main+0x1b8>)
 8000d6e:	ed93 7b00 	vldr	d7, [r3]
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <main+0x1c4>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <main+0x1c8>)
 8000d7c:	9304      	str	r3, [sp, #16]
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <main+0x1cc>)
 8000d80:	9303      	str	r3, [sp, #12]
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <main+0x1d0>)
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <main+0x1d4>)
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <main+0x1e8>)
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d92:	eef0 0a67 	vmov.f32	s1, s15
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <main+0x1d8>)
 8000d98:	4a3e      	ldr	r2, [pc, #248]	; (8000e94 <main+0x1dc>)
 8000d9a:	4934      	ldr	r1, [pc, #208]	; (8000e6c <main+0x1b4>)
 8000d9c:	483e      	ldr	r0, [pc, #248]	; (8000e98 <main+0x1e0>)
 8000d9e:	f002 fab5 	bl	800330c <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <main+0x1ec>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d02e      	beq.n	8000e08 <main+0x150>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			Done = goTo(handler_Motor_Array,
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <main+0x1b8>)
 8000dac:	ed93 8b00 	vldr	d8, [r3]
					    cal_Gyro,
					    &flag_angulo,
					    &flag_measurements,
					    &flag_control,
					    data,
					    parameters_Path_Robot.line_Distance,
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <main+0x1d8>)
 8000db2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
			Done = goTo(handler_Motor_Array,
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f7ff ff0d 	bl	8000bd8 <__aeabi_d2uiz>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <main+0x1c4>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8000dc8:	9205      	str	r2, [sp, #20]
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <main+0x1c8>)
 8000dcc:	9304      	str	r3, [sp, #16]
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <main+0x1cc>)
 8000dd0:	9303      	str	r3, [sp, #12]
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <main+0x1d0>)
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <main+0x1d4>)
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <main+0x1e8>)
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	eeb0 0a48 	vmov.f32	s0, s16
 8000de2:	eef0 0a68 	vmov.f32	s1, s17
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <main+0x1d8>)
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <main+0x1dc>)
 8000dea:	4920      	ldr	r1, [pc, #128]	; (8000e6c <main+0x1b4>)
 8000dec:	482a      	ldr	r0, [pc, #168]	; (8000e98 <main+0x1e0>)
 8000dee:	f002 f873 	bl	8002ed8 <goTo>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <main+0x1f0>)
 8000df8:	701a      	strb	r2, [r3, #0]
					    Mode_dir);

			if (Done){parseCommands("stop");}
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <main+0x1f0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <main+0x150>
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <main+0x1f4>)
 8000e04:	f000 fd0e 	bl	8001824 <parseCommands>

		}

		if (flag_Roll){
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0x1f8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d018      	beq.n	8000e42 <main+0x18a>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			NOP(handler_Motor_Array,
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <main+0x1b8>)
 8000e12:	ed93 7b00 	vldr	d7, [r3]
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <main+0x1c4>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <main+0x1c8>)
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <main+0x1cc>)
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <main+0x1d0>)
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <main+0x1d4>)
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e32:	eef0 0a67 	vmov.f32	s1, s15
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <main+0x1d8>)
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <main+0x1dc>)
 8000e3a:	490c      	ldr	r1, [pc, #48]	; (8000e6c <main+0x1b4>)
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <main+0x1e0>)
 8000e3e:	f002 fb0f 	bl	8003460 <NOP>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <main+0x1fc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 809d 	beq.w	8000f86 <main+0x2ce>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <main+0x1f0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <main+0x1dc>)
 8000e54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e58:	e9c7 2300 	strd	r2, r3, [r7]

			while (!Done){
 8000e5c:	e07f      	b.n	8000f5e <main+0x2a6>
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	20001628 	.word	0x20001628
 8000e68:	3ddfaebc 	.word	0x3ddfaebc
 8000e6c:	200003d0 	.word	0x200003d0
 8000e70:	20001618 	.word	0x20001618
 8000e74:	20001022 	.word	0x20001022
 8000e78:	20001025 	.word	0x20001025
 8000e7c:	20001018 	.word	0x20001018
 8000e80:	20000504 	.word	0x20000504
 8000e84:	2000101e 	.word	0x2000101e
 8000e88:	2000101b 	.word	0x2000101b
 8000e8c:	2000101a 	.word	0x2000101a
 8000e90:	20001050 	.word	0x20001050
 8000e94:	20001570 	.word	0x20001570
 8000e98:	200003e0 	.word	0x200003e0
 8000e9c:	2000101c 	.word	0x2000101c
 8000ea0:	20001030 	.word	0x20001030
 8000ea4:	2000101d 	.word	0x2000101d
 8000ea8:	20001021 	.word	0x20001021
 8000eac:	08010198 	.word	0x08010198
 8000eb0:	2000101f 	.word	0x2000101f
 8000eb4:	20001020 	.word	0x20001020

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000eb8:	4b94      	ldr	r3, [pc, #592]	; (800110c <main+0x454>)
 8000eba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ec2:	f7ff f9f9 	bl	80002b8 <__aeabi_dsub>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fe5b 	bl	8000b88 <__aeabi_d2iz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bfb8      	it	lt
 8000ed8:	425b      	neglt	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb3a 	bl	8000554 <__aeabi_i2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8000ee8:	4b89      	ldr	r3, [pc, #548]	; (8001110 <main+0x458>)
 8000eea:	ed93 7b00 	vldr	d7, [r3]
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <main+0x45c>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <main+0x460>)
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	4b88      	ldr	r3, [pc, #544]	; (800111c <main+0x464>)
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <main+0x468>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <main+0x46c>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	4b86      	ldr	r3, [pc, #536]	; (8001128 <main+0x470>)
 8000f10:	4a7e      	ldr	r2, [pc, #504]	; (800110c <main+0x454>)
 8000f12:	4986      	ldr	r1, [pc, #536]	; (800112c <main+0x474>)
 8000f14:	4886      	ldr	r0, [pc, #536]	; (8001130 <main+0x478>)
 8000f16:	f002 faa3 	bl	8003460 <NOP>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8000f1a:	4b83      	ldr	r3, [pc, #524]	; (8001128 <main+0x470>)
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb18 	bl	8000554 <__aeabi_i2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	460e      	mov	r6, r1
 8000f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f30:	f7ff fdec 	bl	8000b0c <__aeabi_dcmplt>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <main+0x286>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	461e      	mov	r6, r3
 8000f3e:	b2f3      	uxtb	r3, r6
 8000f40:	f083 0301 	eor.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d009      	beq.n	8000f5e <main+0x2a6>
 8000f4a:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <main+0x47c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b76      	ldr	r3, [pc, #472]	; (8001134 <main+0x47c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8000f5e:	4b75      	ldr	r3, [pc, #468]	; (8001134 <main+0x47c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0a8      	beq.n	8000eb8 <main+0x200>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8000f66:	4b73      	ldr	r3, [pc, #460]	; (8001134 <main+0x47c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <main+0x2bc>
 8000f6e:	4872      	ldr	r0, [pc, #456]	; (8001138 <main+0x480>)
 8000f70:	f000 fc58 	bl	8001824 <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Done = RESET; // Reseteamos la bandera
 8000f80:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <main+0x47c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		}

		if (flag_Astar){
 8000f86:	4b6d      	ldr	r3, [pc, #436]	; (800113c <main+0x484>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8097 	beq.w	80010be <main+0x406>

			if (rxData != '\0'){
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <main+0x488>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d059      	beq.n	800104c <main+0x394>

				if (rxData != '\r'){
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <main+0x488>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b0d      	cmp	r3, #13
 8000f9e:	d016      	beq.n	8000fce <main+0x316>
					stringMatrix[stringRow][stringColumn] = rxData;
 8000fa0:	4b68      	ldr	r3, [pc, #416]	; (8001144 <main+0x48c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461e      	mov	r6, r3
 8000fa6:	4b68      	ldr	r3, [pc, #416]	; (8001148 <main+0x490>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <main+0x488>)
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	4a66      	ldr	r2, [pc, #408]	; (800114c <main+0x494>)
 8000fb2:	2334      	movs	r3, #52	; 0x34
 8000fb4:	fb06 f303 	mul.w	r3, r6, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	4403      	add	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
					stringColumn++;
 8000fc0:	4b61      	ldr	r3, [pc, #388]	; (8001148 <main+0x490>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <main+0x490>)
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e008      	b.n	8000fe0 <main+0x328>
				}else{
					stringRow++;
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <main+0x48c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <main+0x48c>)
 8000fd8:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000fda:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <main+0x490>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
				}

				if (rxData == '@'){
 8000fe0:	4b57      	ldr	r3, [pc, #348]	; (8001140 <main+0x488>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b40      	cmp	r3, #64	; 0x40
 8000fe6:	d114      	bne.n	8001012 <main+0x35a>
					doneTransaction = SET;
 8000fe8:	4b59      	ldr	r3, [pc, #356]	; (8001150 <main+0x498>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <main+0x48c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	4b54      	ldr	r3, [pc, #336]	; (8001148 <main+0x490>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4954      	ldr	r1, [pc, #336]	; (800114c <main+0x494>)
 8000ffc:	2234      	movs	r2, #52	; 0x34
 8000ffe:	fb00 f202 	mul.w	r2, r0, r2
 8001002:	440a      	add	r2, r1
 8001004:	4413      	add	r3, r2
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <main+0x490>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e019      	b.n	8001046 <main+0x38e>

				}else if (rxData == 'z'){
 8001012:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <main+0x488>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b7a      	cmp	r3, #122	; 0x7a
 8001018:	d115      	bne.n	8001046 <main+0x38e>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 800101a:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 800101e:	2100      	movs	r1, #0
 8001020:	484a      	ldr	r0, [pc, #296]	; (800114c <main+0x494>)
 8001022:	f009 f81d 	bl	800a060 <memset>
					stringRow    = 0;
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <main+0x48c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 800102c:	4b46      	ldr	r3, [pc, #280]	; (8001148 <main+0x490>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8001032:	4948      	ldr	r1, [pc, #288]	; (8001154 <main+0x49c>)
 8001034:	4848      	ldr	r0, [pc, #288]	; (8001158 <main+0x4a0>)
 8001036:	f008 fcc9 	bl	80099cc <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 800103a:	4b48      	ldr	r3, [pc, #288]	; (800115c <main+0x4a4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4845      	ldr	r0, [pc, #276]	; (8001158 <main+0x4a0>)
 8001042:	f008 fcc3 	bl	80099cc <writeMsg>
				}

				rxData = '\0';
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <main+0x488>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

			}

			// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
			if (doneTransaction){
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <main+0x498>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d034      	beq.n	80010be <main+0x406>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <main+0x4a8>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <main+0x4ac>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <main+0x4b0>)
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <main+0x4b4>)
 8001060:	4943      	ldr	r1, [pc, #268]	; (8001170 <main+0x4b8>)
 8001062:	483a      	ldr	r0, [pc, #232]	; (800114c <main+0x494>)
 8001064:	f002 fb54 	bl	8003710 <findShorterWay>
 8001068:	4603      	mov	r3, r0
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <main+0x4bc>)
 800106e:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <main+0x4bc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <main+0x3cc>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <main+0x4c0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4836      	ldr	r0, [pc, #216]	; (8001158 <main+0x4a0>)
 8001080:	f008 fca4 	bl	80099cc <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8001084:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8001088:	2100      	movs	r1, #0
 800108a:	4830      	ldr	r0, [pc, #192]	; (800114c <main+0x494>)
 800108c:	f008 ffe8 	bl	800a060 <memset>
				stringRow    = 0;
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <main+0x48c>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <main+0x490>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 800109c:	492d      	ldr	r1, [pc, #180]	; (8001154 <main+0x49c>)
 800109e:	482e      	ldr	r0, [pc, #184]	; (8001158 <main+0x4a0>)
 80010a0:	f008 fc94 	bl	80099cc <writeMsg>

				flagAstar = RESET;
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <main+0x4c4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <main+0x498>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
				Do_the_track = SET;
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <main+0x4c8>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]

				parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE ASTAR
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <main+0x4cc>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}


		if (Do_the_track){
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <main+0x4c8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8133 	beq.w	800132e <main+0x676>

			// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
			switch (parameters_op_Robot.op_Mode) {
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <main+0x4cc>)
 80010ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d062      	beq.n	8001198 <main+0x4e0>
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	f300 812d 	bgt.w	8001332 <main+0x67a>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 812c 	beq.w	8001336 <main+0x67e>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d000      	beq.n	80010e4 <main+0x42c>
						// Ya en este punto la bandera de Astar esta bajada por loq ue no tenemos que bajarla nuevamente, y ya
					}

					break;
				}
				default:{break;}
 80010e2:	e126      	b.n	8001332 <main+0x67a>
					create_operations(&handlerAstarParameters,
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <main+0x470>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <main+0x4d0>)
 80010ea:	4a28      	ldr	r2, [pc, #160]	; (800118c <main+0x4d4>)
 80010ec:	491c      	ldr	r1, [pc, #112]	; (8001160 <main+0x4a8>)
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <main+0x4b0>)
 80010f0:	f004 fa56 	bl	80055a0 <create_operations>
					counter_operation = 0;
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <main+0x4d8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 2;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <main+0x4cc>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
					parseCommands("reinit"); //reiniciamos todos los parametros
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <main+0x4dc>)
 8001104:	f000 fb8e 	bl	8001824 <parseCommands>
					break;
 8001108:	e116      	b.n	8001338 <main+0x680>
 800110a:	bf00      	nop
 800110c:	20001570 	.word	0x20001570
 8001110:	20001618 	.word	0x20001618
 8001114:	20001018 	.word	0x20001018
 8001118:	20000504 	.word	0x20000504
 800111c:	2000101e 	.word	0x2000101e
 8001120:	2000101b 	.word	0x2000101b
 8001124:	2000101a 	.word	0x2000101a
 8001128:	20001050 	.word	0x20001050
 800112c:	200003d0 	.word	0x200003d0
 8001130:	200003e0 	.word	0x200003e0
 8001134:	20001021 	.word	0x20001021
 8001138:	08010198 	.word	0x08010198
 800113c:	20001022 	.word	0x20001022
 8001140:	200004d6 	.word	0x200004d6
 8001144:	20001015 	.word	0x20001015
 8001148:	20001014 	.word	0x20001014
 800114c:	20000584 	.word	0x20000584
 8001150:	200004d5 	.word	0x200004d5
 8001154:	080101a0 	.word	0x080101a0
 8001158:	20000330 	.word	0x20000330
 800115c:	20000004 	.word	0x20000004
 8001160:	20011f34 	.word	0x20011f34
 8001164:	2000044c 	.word	0x2000044c
 8001168:	20000440 	.word	0x20000440
 800116c:	20001724 	.word	0x20001724
 8001170:	200114a4 	.word	0x200114a4
 8001174:	20001017 	.word	0x20001017
 8001178:	20000000 	.word	0x20000000
 800117c:	20001016 	.word	0x20001016
 8001180:	20001023 	.word	0x20001023
 8001184:	200015f0 	.word	0x200015f0
 8001188:	200015c0 	.word	0x200015c0
 800118c:	200010c0 	.word	0x200010c0
 8001190:	2000162c 	.word	0x2000162c
 8001194:	080101c0 	.word	0x080101c0
					if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <main+0x690>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	4a6b      	ldr	r2, [pc, #428]	; (800134c <main+0x694>)
 80011a0:	460b      	mov	r3, r1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	3370      	adds	r3, #112	; 0x70
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d166      	bne.n	8001280 <main+0x5c8>
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination - parameters_Pos_Robot.xg_position),2)+
 80011b2:	4b65      	ldr	r3, [pc, #404]	; (8001348 <main+0x690>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4a64      	ldr	r2, [pc, #400]	; (800134c <main+0x694>)
 80011ba:	460b      	mov	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	3378      	adds	r3, #120	; 0x78
 80011c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ca:	4b61      	ldr	r3, [pc, #388]	; (8001350 <main+0x698>)
 80011cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80011d0:	f7ff f872 	bl	80002b8 <__aeabi_dsub>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	ec43 2b17 	vmov	d7, r2, r3
 80011dc:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001340 <main+0x688>
 80011e0:	eeb0 0a47 	vmov.f32	s0, s14
 80011e4:	eef0 0a67 	vmov.f32	s1, s15
 80011e8:	f00c fc04 	bl	800d9f4 <pow>
 80011ec:	ec59 8b10 	vmov	r8, r9, d0
								     pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination - parameters_Pos_Robot.yg_position),2));
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <main+0x690>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4a55      	ldr	r2, [pc, #340]	; (800134c <main+0x694>)
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	3380      	adds	r3, #128	; 0x80
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	4b51      	ldr	r3, [pc, #324]	; (8001350 <main+0x698>)
 800120a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800120e:	f7ff f853 	bl	80002b8 <__aeabi_dsub>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b17 	vmov	d7, r2, r3
 800121a:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8001340 <main+0x688>
 800121e:	eeb0 0a47 	vmov.f32	s0, s14
 8001222:	eef0 0a67 	vmov.f32	s1, s15
 8001226:	f00c fbe5 	bl	800d9f4 <pow>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination - parameters_Pos_Robot.xg_position),2)+
 800122e:	4640      	mov	r0, r8
 8001230:	4649      	mov	r1, r9
 8001232:	f7ff f843 	bl	80002bc <__adddf3>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	ec43 2b17 	vmov	d7, r2, r3
 800123e:	eeb0 0a47 	vmov.f32	s0, s14
 8001242:	eef0 0a67 	vmov.f32	s1, s15
 8001246:	f00c fc45 	bl	800dad4 <sqrt>
 800124a:	eeb0 7a40 	vmov.f32	s14, s0
 800124e:	eef0 7a60 	vmov.f32	s15, s1
						parameters_Path_Robot.line_Distance =
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <main+0x694>)
 8001254:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
						sprintf(bufferReception, "goto %u %.2f" , 1 , parameters_Path_Robot.line_Distance); // Mandamos una direccion hacia adelante
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <main+0x694>)
 800125a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800125e:	e9cd 2300 	strd	r2, r3, [sp]
 8001262:	2201      	movs	r2, #1
 8001264:	493b      	ldr	r1, [pc, #236]	; (8001354 <main+0x69c>)
 8001266:	483c      	ldr	r0, [pc, #240]	; (8001358 <main+0x6a0>)
 8001268:	f009 fc5c 	bl	800ab24 <siprintf>
						parseCommands(bufferReception); // Mandamos el comando
 800126c:	483a      	ldr	r0, [pc, #232]	; (8001358 <main+0x6a0>)
 800126e:	f000 fad9 	bl	8001824 <parseCommands>
						counter_operation++;
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <main+0x690>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b33      	ldr	r3, [pc, #204]	; (8001348 <main+0x690>)
 800127c:	701a      	strb	r2, [r3, #0]
					break;
 800127e:	e05b      	b.n	8001338 <main+0x680>
					}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <main+0x690>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <main+0x694>)
 8001288:	460b      	mov	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	3370      	adds	r3, #112	; 0x70
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d145      	bne.n	8001326 <main+0x66e>
						if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <main+0x690>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	4a2a      	ldr	r2, [pc, #168]	; (800134c <main+0x694>)
 80012a2:	460b      	mov	r3, r1
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	3388      	adds	r3, #136	; 0x88
 80012ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	f7ff fc27 	bl	8000b0c <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d016      	beq.n	80012f2 <main+0x63a>
									-parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative);
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <main+0x690>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <main+0x694>)
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	3388      	adds	r3, #136	; 0x88
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
							sprintf(bufferReception,
 80012dc:	4614      	mov	r4, r2
 80012de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012e2:	e9cd 4500 	strd	r4, r5, [sp]
 80012e6:	2200      	movs	r2, #0
 80012e8:	491c      	ldr	r1, [pc, #112]	; (800135c <main+0x6a4>)
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <main+0x6a0>)
 80012ec:	f009 fc1a 	bl	800ab24 <siprintf>
 80012f0:	e012      	b.n	8001318 <main+0x660>
							sprintf(bufferReception,
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <main+0x690>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <main+0x694>)
 80012fa:	460b      	mov	r3, r1
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	3388      	adds	r3, #136	; 0x88
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	e9cd 2300 	strd	r2, r3, [sp]
 800130e:	2201      	movs	r2, #1
 8001310:	4912      	ldr	r1, [pc, #72]	; (800135c <main+0x6a4>)
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <main+0x6a0>)
 8001314:	f009 fc06 	bl	800ab24 <siprintf>
						counter_operation++;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <main+0x690>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <main+0x690>)
 8001322:	701a      	strb	r2, [r3, #0]
					break;
 8001324:	e008      	b.n	8001338 <main+0x680>
						Do_the_track = RESET; // Bajamos la bandera de Do_the_track para dejar de hacer operaciones
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <main+0x6a8>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					break;
 800132c:	e004      	b.n	8001338 <main+0x680>
				}// Fin del switch case
			}
 800132e:	bf00      	nop
 8001330:	e4f2      	b.n	8000d18 <main+0x60>
				default:{break;}
 8001332:	bf00      	nop
 8001334:	e4f0      	b.n	8000d18 <main+0x60>
					break;
 8001336:	bf00      	nop
		if (!flag_Astar){
 8001338:	e4ee      	b.n	8000d18 <main+0x60>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	00000000 	.word	0x00000000
 8001344:	40000000 	.word	0x40000000
 8001348:	2000162c 	.word	0x2000162c
 800134c:	20001050 	.word	0x20001050
 8001350:	20001570 	.word	0x20001570
 8001354:	080101c8 	.word	0x080101c8
 8001358:	20000494 	.word	0x20000494
 800135c:	080101d8 	.word	0x080101d8
 8001360:	20001023 	.word	0x20001023

08001364 <inSystem>:
}




void inSystem (void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOC;
 800136a:	4baf      	ldr	r3, [pc, #700]	; (8001628 <inSystem+0x2c4>)
 800136c:	4aaf      	ldr	r2, [pc, #700]	; (800162c <inSystem+0x2c8>)
 800136e:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8001370:	4bad      	ldr	r3, [pc, #692]	; (8001628 <inSystem+0x2c4>)
 8001372:	2200      	movs	r2, #0
 8001374:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001376:	4bac      	ldr	r3, [pc, #688]	; (8001628 <inSystem+0x2c4>)
 8001378:	2201      	movs	r2, #1
 800137a:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800137c:	4baa      	ldr	r3, [pc, #680]	; (8001628 <inSystem+0x2c4>)
 800137e:	2200      	movs	r2, #0
 8001380:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001382:	4ba9      	ldr	r3, [pc, #676]	; (8001628 <inSystem+0x2c4>)
 8001384:	2205      	movs	r2, #5
 8001386:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001388:	4ba7      	ldr	r3, [pc, #668]	; (8001628 <inSystem+0x2c4>)
 800138a:	2200      	movs	r2, #0
 800138c:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 800138e:	4ba6      	ldr	r3, [pc, #664]	; (8001628 <inSystem+0x2c4>)
 8001390:	2202      	movs	r2, #2
 8001392:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8001394:	48a4      	ldr	r0, [pc, #656]	; (8001628 <inSystem+0x2c4>)
 8001396:	f005 fe69 	bl	800706c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 800139a:	2101      	movs	r1, #1
 800139c:	48a2      	ldr	r0, [pc, #648]	; (8001628 <inSystem+0x2c4>)
 800139e:	f005 ff8f 	bl	80072c0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 80013a2:	4ba3      	ldr	r3, [pc, #652]	; (8001630 <inSystem+0x2cc>)
 80013a4:	4aa3      	ldr	r2, [pc, #652]	; (8001634 <inSystem+0x2d0>)
 80013a6:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80013a8:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <inSystem+0x2cc>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80013ae:	4ba0      	ldr	r3, [pc, #640]	; (8001630 <inSystem+0x2cc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80013b4:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <inSystem+0x2cc>)
 80013b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80013ba:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <inSystem+0x2cc>)
 80013be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013c2:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 80013c4:	489a      	ldr	r0, [pc, #616]	; (8001630 <inSystem+0x2cc>)
 80013c6:	f004 f9e5 	bl	8005794 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 80013ca:	4899      	ldr	r0, [pc, #612]	; (8001630 <inSystem+0x2cc>)
 80013cc:	f004 fdde 	bl	8005f8c <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80013d0:	f004 f9c4 	bl	800575c <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 80013d4:	4b98      	ldr	r3, [pc, #608]	; (8001638 <inSystem+0x2d4>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4b98      	ldr	r3, [pc, #608]	; (800163c <inSystem+0x2d8>)
 80013da:	4a99      	ldr	r2, [pc, #612]	; (8001640 <inSystem+0x2dc>)
 80013dc:	4999      	ldr	r1, [pc, #612]	; (8001644 <inSystem+0x2e0>)
 80013de:	489a      	ldr	r0, [pc, #616]	; (8001648 <inSystem+0x2e4>)
 80013e0:	f001 fc4c 	bl	8002c7c <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 80013e4:	4b99      	ldr	r3, [pc, #612]	; (800164c <inSystem+0x2e8>)
 80013e6:	4a9a      	ldr	r2, [pc, #616]	; (8001650 <inSystem+0x2ec>)
 80013e8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80013ea:	4b98      	ldr	r3, [pc, #608]	; (800164c <inSystem+0x2e8>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013f0:	4b96      	ldr	r3, [pc, #600]	; (800164c <inSystem+0x2e8>)
 80013f2:	2202      	movs	r2, #2
 80013f4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <inSystem+0x2e8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 80013fc:	4b93      	ldr	r3, [pc, #588]	; (800164c <inSystem+0x2e8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001402:	4b92      	ldr	r3, [pc, #584]	; (800164c <inSystem+0x2e8>)
 8001404:	2200      	movs	r2, #0
 8001406:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001408:	4b90      	ldr	r3, [pc, #576]	; (800164c <inSystem+0x2e8>)
 800140a:	2202      	movs	r2, #2
 800140c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 800140e:	488f      	ldr	r0, [pc, #572]	; (800164c <inSystem+0x2e8>)
 8001410:	f005 fe2c 	bl	800706c <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001414:	4b8f      	ldr	r3, [pc, #572]	; (8001654 <inSystem+0x2f0>)
 8001416:	4a90      	ldr	r2, [pc, #576]	; (8001658 <inSystem+0x2f4>)
 8001418:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800141a:	4b8e      	ldr	r3, [pc, #568]	; (8001654 <inSystem+0x2f0>)
 800141c:	2200      	movs	r2, #0
 800141e:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001420:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <inSystem+0x2f0>)
 8001422:	4a8e      	ldr	r2, [pc, #568]	; (800165c <inSystem+0x2f8>)
 8001424:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001426:	498b      	ldr	r1, [pc, #556]	; (8001654 <inSystem+0x2f0>)
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <inSystem+0x2fc>)
 800142e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001432:	4b88      	ldr	r3, [pc, #544]	; (8001654 <inSystem+0x2f0>)
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001438:	4b86      	ldr	r3, [pc, #536]	; (8001654 <inSystem+0x2f0>)
 800143a:	2201      	movs	r2, #1
 800143c:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800143e:	4b85      	ldr	r3, [pc, #532]	; (8001654 <inSystem+0x2f0>)
 8001440:	2201      	movs	r2, #1
 8001442:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001444:	4883      	ldr	r0, [pc, #524]	; (8001654 <inSystem+0x2f0>)
 8001446:	f006 fe59 	bl	80080fc <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 800144a:	4882      	ldr	r0, [pc, #520]	; (8001654 <inSystem+0x2f0>)
 800144c:	f006 ff40 	bl	80082d0 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <inSystem+0x300>)
 8001452:	4a7f      	ldr	r2, [pc, #508]	; (8001650 <inSystem+0x2ec>)
 8001454:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001456:	4b83      	ldr	r3, [pc, #524]	; (8001664 <inSystem+0x300>)
 8001458:	2202      	movs	r2, #2
 800145a:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800145c:	4b81      	ldr	r3, [pc, #516]	; (8001664 <inSystem+0x300>)
 800145e:	2202      	movs	r2, #2
 8001460:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001462:	4b80      	ldr	r3, [pc, #512]	; (8001664 <inSystem+0x300>)
 8001464:	2200      	movs	r2, #0
 8001466:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <inSystem+0x300>)
 800146a:	2201      	movs	r2, #1
 800146c:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <inSystem+0x300>)
 8001470:	2200      	movs	r2, #0
 8001472:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <inSystem+0x300>)
 8001476:	2202      	movs	r2, #2
 8001478:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800147a:	487a      	ldr	r0, [pc, #488]	; (8001664 <inSystem+0x300>)
 800147c:	f005 fdf6 	bl	800706c <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001480:	4b79      	ldr	r3, [pc, #484]	; (8001668 <inSystem+0x304>)
 8001482:	4a75      	ldr	r2, [pc, #468]	; (8001658 <inSystem+0x2f4>)
 8001484:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <inSystem+0x304>)
 8001488:	2201      	movs	r2, #1
 800148a:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <inSystem+0x304>)
 800148e:	4a73      	ldr	r2, [pc, #460]	; (800165c <inSystem+0x2f8>)
 8001490:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001492:	4975      	ldr	r1, [pc, #468]	; (8001668 <inSystem+0x304>)
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b71      	ldr	r3, [pc, #452]	; (8001660 <inSystem+0x2fc>)
 800149a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <inSystem+0x304>)
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80014a4:	4b70      	ldr	r3, [pc, #448]	; (8001668 <inSystem+0x304>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <inSystem+0x304>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80014b0:	486d      	ldr	r0, [pc, #436]	; (8001668 <inSystem+0x304>)
 80014b2:	f006 fe23 	bl	80080fc <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80014b6:	486c      	ldr	r0, [pc, #432]	; (8001668 <inSystem+0x304>)
 80014b8:	f006 ff0a 	bl	80082d0 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <inSystem+0x308>)
 80014be:	4a5b      	ldr	r2, [pc, #364]	; (800162c <inSystem+0x2c8>)
 80014c0:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80014c2:	4b6a      	ldr	r3, [pc, #424]	; (800166c <inSystem+0x308>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <inSystem+0x308>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <inSystem+0x308>)
 80014d0:	220a      	movs	r2, #10
 80014d2:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <inSystem+0x308>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <inSystem+0x308>)
 80014dc:	2200      	movs	r2, #0
 80014de:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <inSystem+0x308>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 80014e6:	4861      	ldr	r0, [pc, #388]	; (800166c <inSystem+0x308>)
 80014e8:	f005 fdc0 	bl	800706c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 80014ec:	2100      	movs	r1, #0
 80014ee:	485f      	ldr	r0, [pc, #380]	; (800166c <inSystem+0x308>)
 80014f0:	f005 ff11 	bl	8007316 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <inSystem+0x30c>)
 80014f6:	4a4d      	ldr	r2, [pc, #308]	; (800162c <inSystem+0x2c8>)
 80014f8:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <inSystem+0x30c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001500:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <inSystem+0x30c>)
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001506:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <inSystem+0x30c>)
 8001508:	220b      	movs	r2, #11
 800150a:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <inSystem+0x30c>)
 800150e:	2200      	movs	r2, #0
 8001510:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001512:	4b57      	ldr	r3, [pc, #348]	; (8001670 <inSystem+0x30c>)
 8001514:	2200      	movs	r2, #0
 8001516:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <inSystem+0x30c>)
 800151a:	2202      	movs	r2, #2
 800151c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 800151e:	4854      	ldr	r0, [pc, #336]	; (8001670 <inSystem+0x30c>)
 8001520:	f005 fda4 	bl	800706c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001524:	2100      	movs	r1, #0
 8001526:	4852      	ldr	r0, [pc, #328]	; (8001670 <inSystem+0x30c>)
 8001528:	f005 fef5 	bl	8007316 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <inSystem+0x310>)
 800152e:	4a3f      	ldr	r2, [pc, #252]	; (800162c <inSystem+0x2c8>)
 8001530:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001532:	4b50      	ldr	r3, [pc, #320]	; (8001674 <inSystem+0x310>)
 8001534:	2200      	movs	r2, #0
 8001536:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001538:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <inSystem+0x310>)
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <inSystem+0x310>)
 8001540:	220c      	movs	r2, #12
 8001542:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001544:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <inSystem+0x310>)
 8001546:	2200      	movs	r2, #0
 8001548:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <inSystem+0x310>)
 800154c:	2200      	movs	r2, #0
 800154e:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <inSystem+0x310>)
 8001552:	2202      	movs	r2, #2
 8001554:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001556:	4847      	ldr	r0, [pc, #284]	; (8001674 <inSystem+0x310>)
 8001558:	f005 fd88 	bl	800706c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800155c:	2100      	movs	r1, #0
 800155e:	4845      	ldr	r0, [pc, #276]	; (8001674 <inSystem+0x310>)
 8001560:	f005 fed9 	bl	8007316 <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <inSystem+0x2e4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <inSystem+0x314>)
 800156e:	4a43      	ldr	r2, [pc, #268]	; (800167c <inSystem+0x318>)
 8001570:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <inSystem+0x314>)
 8001574:	2200      	movs	r2, #0
 8001576:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <inSystem+0x314>)
 800157a:	2201      	movs	r2, #1
 800157c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <inSystem+0x314>)
 8001580:	2202      	movs	r2, #2
 8001582:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001584:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <inSystem+0x314>)
 8001586:	2200      	movs	r2, #0
 8001588:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <inSystem+0x314>)
 800158c:	2200      	movs	r2, #0
 800158e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <inSystem+0x314>)
 8001592:	2202      	movs	r2, #2
 8001594:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001596:	4838      	ldr	r0, [pc, #224]	; (8001678 <inSystem+0x314>)
 8001598:	f005 fd68 	bl	800706c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800159c:	2100      	movs	r1, #0
 800159e:	4836      	ldr	r0, [pc, #216]	; (8001678 <inSystem+0x314>)
 80015a0:	f005 feb9 	bl	8007316 <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <inSystem+0x2e4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <inSystem+0x31c>)
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <inSystem+0x2c8>)
 80015b0:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <inSystem+0x31c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <inSystem+0x31c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <inSystem+0x31c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <inSystem+0x31c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <inSystem+0x31c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <inSystem+0x31c>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <inSystem+0x320>)
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <inSystem+0x31c>)
 80015da:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <inSystem+0x320>)
 80015de:	2202      	movs	r2, #2
 80015e0:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80015e2:	4828      	ldr	r0, [pc, #160]	; (8001684 <inSystem+0x320>)
 80015e4:	f004 fd14 	bl	8006010 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <inSystem+0x324>)
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <inSystem+0x2c8>)
 80015ec:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <inSystem+0x324>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <inSystem+0x324>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <inSystem+0x324>)
 80015fc:	2203      	movs	r2, #3
 80015fe:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <inSystem+0x324>)
 8001602:	2200      	movs	r2, #0
 8001604:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <inSystem+0x324>)
 8001608:	2200      	movs	r2, #0
 800160a:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <inSystem+0x324>)
 800160e:	2202      	movs	r2, #2
 8001610:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <inSystem+0x328>)
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <inSystem+0x324>)
 8001616:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <inSystem+0x328>)
 800161a:	2202      	movs	r2, #2
 800161c:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 800161e:	481b      	ldr	r0, [pc, #108]	; (800168c <inSystem+0x328>)
 8001620:	f004 fcf6 	bl	8006010 <extInt_Config>
 8001624:	e034      	b.n	8001690 <inSystem+0x32c>
 8001626:	bf00      	nop
 8001628:	20000204 	.word	0x20000204
 800162c:	40020800 	.word	0x40020800
 8001630:	200002b0 	.word	0x200002b0
 8001634:	40000400 	.word	0x40000400
 8001638:	20001018 	.word	0x20001018
 800163c:	20001030 	.word	0x20001030
 8001640:	20001050 	.word	0x20001050
 8001644:	20001570 	.word	0x20001570
 8001648:	200003e0 	.word	0x200003e0
 800164c:	20000210 	.word	0x20000210
 8001650:	40020000 	.word	0x40020000
 8001654:	200002f0 	.word	0x200002f0
 8001658:	40000c00 	.word	0x40000c00
 800165c:	41e00000 	.word	0x41e00000
 8001660:	40408000 	.word	0x40408000
 8001664:	2000021c 	.word	0x2000021c
 8001668:	20000310 	.word	0x20000310
 800166c:	2000024c 	.word	0x2000024c
 8001670:	20000240 	.word	0x20000240
 8001674:	20000264 	.word	0x20000264
 8001678:	20000258 	.word	0x20000258
 800167c:	40020c00 	.word	0x40020c00
 8001680:	20000270 	.word	0x20000270
 8001684:	200002a0 	.word	0x200002a0
 8001688:	2000027c 	.word	0x2000027c
 800168c:	200002a8 	.word	0x200002a8
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <inSystem+0x48c>)
 8001692:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <inSystem+0x490>)
 8001694:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <inSystem+0x48c>)
 8001698:	2207      	movs	r2, #7
 800169a:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <inSystem+0x48c>)
 800169e:	2202      	movs	r2, #2
 80016a0:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <inSystem+0x48c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <inSystem+0x48c>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80016ae:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <inSystem+0x48c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80016b4:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <inSystem+0x48c>)
 80016b6:	2203      	movs	r2, #3
 80016b8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80016ba:	484d      	ldr	r0, [pc, #308]	; (80017f0 <inSystem+0x48c>)
 80016bc:	f005 fcd6 	bl	800706c <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <inSystem+0x494>)
 80016c2:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <inSystem+0x490>)
 80016c4:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <inSystem+0x494>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <inSystem+0x494>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <inSystem+0x494>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <inSystem+0x494>)
 80016da:	2203      	movs	r2, #3
 80016dc:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <inSystem+0x494>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <inSystem+0x494>)
 80016e6:	2203      	movs	r2, #3
 80016e8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80016ea:	4843      	ldr	r0, [pc, #268]	; (80017f8 <inSystem+0x494>)
 80016ec:	f005 fcbe 	bl	800706c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <inSystem+0x498>)
 80016f2:	4a43      	ldr	r2, [pc, #268]	; (8001800 <inSystem+0x49c>)
 80016f4:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <inSystem+0x498>)
 80016f8:	4a42      	ldr	r2, [pc, #264]	; (8001804 <inSystem+0x4a0>)
 80016fa:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <inSystem+0x498>)
 80016fe:	2201      	movs	r2, #1
 8001700:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <inSystem+0x498>)
 8001704:	2201      	movs	r2, #1
 8001706:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001708:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <inSystem+0x498>)
 800170a:	2200      	movs	r2, #0
 800170c:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <inSystem+0x498>)
 8001710:	2202      	movs	r2, #2
 8001712:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <inSystem+0x498>)
 8001716:	2200      	movs	r2, #0
 8001718:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <inSystem+0x498>)
 800171c:	2200      	movs	r2, #0
 800171e:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <inSystem+0x498>)
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <inSystem+0x498>)
 8001728:	f007 fd62 	bl	80091f0 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <inSystem+0x4a4>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <inSystem+0x4a4>)
 8001736:	2201      	movs	r2, #1
 8001738:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <inSystem+0x4a4>)
 800173c:	2200      	movs	r2, #0
 800173e:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <inSystem+0x4a4>)
 8001742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001746:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <inSystem+0x4a4>)
 800174a:	2210      	movs	r2, #16
 800174c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800174e:	482e      	ldr	r0, [pc, #184]	; (8001808 <inSystem+0x4a4>)
 8001750:	f004 f820 	bl	8005794 <BasicTimer_Config>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001754:	482c      	ldr	r0, [pc, #176]	; (8001808 <inSystem+0x4a4>)
 8001756:	f004 fc19 	bl	8005f8c <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <inSystem+0x4a8>)
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <inSystem+0x4ac>)
 800175e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <inSystem+0x4a8>)
 8001762:	2204      	movs	r2, #4
 8001764:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <inSystem+0x4a8>)
 8001768:	2202      	movs	r2, #2
 800176a:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <inSystem+0x4a8>)
 800176e:	2208      	movs	r2, #8
 8001770:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <inSystem+0x4a8>)
 8001774:	2201      	movs	r2, #1
 8001776:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <inSystem+0x4a8>)
 800177a:	2200      	movs	r2, #0
 800177c:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <inSystem+0x4a8>)
 8001780:	2202      	movs	r2, #2
 8001782:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <inSystem+0x4b0>)
 8001786:	4a22      	ldr	r2, [pc, #136]	; (8001810 <inSystem+0x4ac>)
 8001788:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <inSystem+0x4b0>)
 800178c:	2204      	movs	r2, #4
 800178e:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <inSystem+0x4b0>)
 8001792:	2202      	movs	r2, #2
 8001794:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <inSystem+0x4b0>)
 8001798:	2209      	movs	r2, #9
 800179a:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <inSystem+0x4b0>)
 800179e:	2201      	movs	r2, #1
 80017a0:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <inSystem+0x4b0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <inSystem+0x4b0>)
 80017aa:	2202      	movs	r2, #2
 80017ac:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <inSystem+0x4b4>)
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <inSystem+0x4b8>)
 80017b2:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <inSystem+0x4b4>)
 80017b6:	2232      	movs	r2, #50	; 0x32
 80017b8:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <inSystem+0x4b4>)
 80017bc:	2268      	movs	r2, #104	; 0x68
 80017be:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <inSystem+0x4b4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <inSystem+0x4bc>)
 80017c8:	4a10      	ldr	r2, [pc, #64]	; (800180c <inSystem+0x4a8>)
 80017ca:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <inSystem+0x4bc>)
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <inSystem+0x4b0>)
 80017d0:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <inSystem+0x4bc>)
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <inSystem+0x4b4>)
 80017d6:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <inSystem+0x4bc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <inSystem+0x4bc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80017e4:	480e      	ldr	r0, [pc, #56]	; (8001820 <inSystem+0x4bc>)
 80017e6:	f005 fdf9 	bl	80073dc <configMPUAccel>

}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000234 	.word	0x20000234
 80017f4:	40020000 	.word	0x40020000
 80017f8:	20000228 	.word	0x20000228
 80017fc:	20000330 	.word	0x20000330
 8001800:	40004400 	.word	0x40004400
 8001804:	02faf080 	.word	0x02faf080
 8001808:	200002c4 	.word	0x200002c4
 800180c:	20000288 	.word	0x20000288
 8001810:	40020400 	.word	0x40020400
 8001814:	20000294 	.word	0x20000294
 8001818:	200003c4 	.word	0x200003c4
 800181c:	40005400 	.word	0x40005400
 8001820:	200003d0 	.word	0x200003d0

08001824 <parseCommands>:


void parseCommands(char *stringVector){
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 800182c:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <parseCommands+0x230>)
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	4b89      	ldr	r3, [pc, #548]	; (8001a58 <parseCommands+0x234>)
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <parseCommands+0x238>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <parseCommands+0x23c>)
 800183a:	4a8a      	ldr	r2, [pc, #552]	; (8001a64 <parseCommands+0x240>)
 800183c:	498a      	ldr	r1, [pc, #552]	; (8001a68 <parseCommands+0x244>)
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f009 f990 	bl	800ab64 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8001844:	4989      	ldr	r1, [pc, #548]	; (8001a6c <parseCommands+0x248>)
 8001846:	4887      	ldr	r0, [pc, #540]	; (8001a64 <parseCommands+0x240>)
 8001848:	f7fe fcca 	bl	80001e0 <strcmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d128      	bne.n	80018a4 <parseCommands+0x80>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8001852:	4987      	ldr	r1, [pc, #540]	; (8001a70 <parseCommands+0x24c>)
 8001854:	4887      	ldr	r0, [pc, #540]	; (8001a74 <parseCommands+0x250>)
 8001856:	f008 f8b9 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 800185a:	4987      	ldr	r1, [pc, #540]	; (8001a78 <parseCommands+0x254>)
 800185c:	4885      	ldr	r0, [pc, #532]	; (8001a74 <parseCommands+0x250>)
 800185e:	f008 f8b5 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 8001862:	4986      	ldr	r1, [pc, #536]	; (8001a7c <parseCommands+0x258>)
 8001864:	4883      	ldr	r0, [pc, #524]	; (8001a74 <parseCommands+0x250>)
 8001866:	f008 f8b1 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 800186a:	4985      	ldr	r1, [pc, #532]	; (8001a80 <parseCommands+0x25c>)
 800186c:	4881      	ldr	r0, [pc, #516]	; (8001a74 <parseCommands+0x250>)
 800186e:	f008 f8ad 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 8001872:	4984      	ldr	r1, [pc, #528]	; (8001a84 <parseCommands+0x260>)
 8001874:	487f      	ldr	r0, [pc, #508]	; (8001a74 <parseCommands+0x250>)
 8001876:	f008 f8a9 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 800187a:	4983      	ldr	r1, [pc, #524]	; (8001a88 <parseCommands+0x264>)
 800187c:	487d      	ldr	r0, [pc, #500]	; (8001a74 <parseCommands+0x250>)
 800187e:	f008 f8a5 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "6)  square #dir_roll #side_distance  \n");
 8001882:	4982      	ldr	r1, [pc, #520]	; (8001a8c <parseCommands+0x268>)
 8001884:	487b      	ldr	r0, [pc, #492]	; (8001a74 <parseCommands+0x250>)
 8001886:	f008 f8a1 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "7)  Astar  #Parallel-distance #Diagonal-distance \n");
 800188a:	4981      	ldr	r1, [pc, #516]	; (8001a90 <parseCommands+0x26c>)
 800188c:	4879      	ldr	r0, [pc, #484]	; (8001a74 <parseCommands+0x250>)
 800188e:	f008 f89d 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "8)  reinit  \n");
 8001892:	4980      	ldr	r1, [pc, #512]	; (8001a94 <parseCommands+0x270>)
 8001894:	4877      	ldr	r0, [pc, #476]	; (8001a74 <parseCommands+0x250>)
 8001896:	f008 f899 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, " \n");
 800189a:	497f      	ldr	r1, [pc, #508]	; (8001a98 <parseCommands+0x274>)
 800189c:	4875      	ldr	r0, [pc, #468]	; (8001a74 <parseCommands+0x250>)
 800189e:	f008 f895 	bl	80099cc <writeMsg>
	else {
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
	}


}
 80018a2:	e18a      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "go") == 0){
 80018a4:	497d      	ldr	r1, [pc, #500]	; (8001a9c <parseCommands+0x278>)
 80018a6:	486f      	ldr	r0, [pc, #444]	; (8001a64 <parseCommands+0x240>)
 80018a8:	f7fe fc9a 	bl	80001e0 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <parseCommands+0xc0>
		Mode_dir.Mode = Mode = sLine;
 80018b2:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <parseCommands+0x27c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <parseCommands+0x27c>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <parseCommands+0x280>)
 80018be:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80018c0:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <parseCommands+0x23c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <parseCommands+0x280>)
 80018c8:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <parseCommands+0x280>)
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	4876      	ldr	r0, [pc, #472]	; (8001aa8 <parseCommands+0x284>)
 80018d0:	f000 ffee 	bl	80028b0 <On_motor_Straigh_Roll>
		flag_Go_Straigh = SET;
 80018d4:	4b75      	ldr	r3, [pc, #468]	; (8001aac <parseCommands+0x288>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 80018da:	4975      	ldr	r1, [pc, #468]	; (8001ab0 <parseCommands+0x28c>)
 80018dc:	4865      	ldr	r0, [pc, #404]	; (8001a74 <parseCommands+0x250>)
 80018de:	f008 f875 	bl	80099cc <writeMsg>
}
 80018e2:	e16a      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "goto") == 0){
 80018e4:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <parseCommands+0x290>)
 80018e6:	485f      	ldr	r0, [pc, #380]	; (8001a64 <parseCommands+0x240>)
 80018e8:	f7fe fc7a 	bl	80001e0 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d122      	bne.n	8001938 <parseCommands+0x114>
		Mode_dir.Mode = Mode = sLine ;
 80018f2:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <parseCommands+0x27c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <parseCommands+0x27c>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <parseCommands+0x280>)
 80018fe:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001900:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <parseCommands+0x23c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <parseCommands+0x280>)
 8001908:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <parseCommands+0x280>)
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	4866      	ldr	r0, [pc, #408]	; (8001aa8 <parseCommands+0x284>)
 8001910:	f000 ffce 	bl	80028b0 <On_motor_Straigh_Roll>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 8001914:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <parseCommands+0x238>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe0b 	bl	8000534 <__aeabi_ui2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <parseCommands+0x294>)
 8001924:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <parseCommands+0x298>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 800192e:	4964      	ldr	r1, [pc, #400]	; (8001ac0 <parseCommands+0x29c>)
 8001930:	4850      	ldr	r0, [pc, #320]	; (8001a74 <parseCommands+0x250>)
 8001932:	f008 f84b 	bl	80099cc <writeMsg>
}
 8001936:	e140      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "roll") == 0){
 8001938:	4962      	ldr	r1, [pc, #392]	; (8001ac4 <parseCommands+0x2a0>)
 800193a:	484a      	ldr	r0, [pc, #296]	; (8001a64 <parseCommands+0x240>)
 800193c:	f7fe fc50 	bl	80001e0 <strcmp>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <parseCommands+0x154>
		Mode_dir.Mode = Mode = sRoll;
 8001946:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <parseCommands+0x27c>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <parseCommands+0x27c>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	4b54      	ldr	r3, [pc, #336]	; (8001aa4 <parseCommands+0x280>)
 8001952:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <parseCommands+0x23c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <parseCommands+0x280>)
 800195c:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800195e:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <parseCommands+0x280>)
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	4851      	ldr	r0, [pc, #324]	; (8001aa8 <parseCommands+0x284>)
 8001964:	f000 ffa4 	bl	80028b0 <On_motor_Straigh_Roll>
		flag_Roll = SET;
 8001968:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <parseCommands+0x2a4>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 800196e:	4957      	ldr	r1, [pc, #348]	; (8001acc <parseCommands+0x2a8>)
 8001970:	4840      	ldr	r0, [pc, #256]	; (8001a74 <parseCommands+0x250>)
 8001972:	f008 f82b 	bl	80099cc <writeMsg>
}
 8001976:	e120      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "rollto") == 0){
 8001978:	4955      	ldr	r1, [pc, #340]	; (8001ad0 <parseCommands+0x2ac>)
 800197a:	483a      	ldr	r0, [pc, #232]	; (8001a64 <parseCommands+0x240>)
 800197c:	f7fe fc30 	bl	80001e0 <strcmp>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11d      	bne.n	80019c2 <parseCommands+0x19e>
		Mode_dir.Mode = Mode = sRoll;
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <parseCommands+0x27c>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <parseCommands+0x27c>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <parseCommands+0x280>)
 8001992:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <parseCommands+0x23c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <parseCommands+0x280>)
 800199c:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <parseCommands+0x280>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	4841      	ldr	r0, [pc, #260]	; (8001aa8 <parseCommands+0x284>)
 80019a4:	f000 ff84 	bl	80028b0 <On_motor_Straigh_Roll>
		parameters_Path_Robot.angle = secondParameter;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <parseCommands+0x238>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <parseCommands+0x294>)
 80019b0:	649a      	str	r2, [r3, #72]	; 0x48
		flag_RollTo = SET;
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <parseCommands+0x2b0>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 80019b8:	4947      	ldr	r1, [pc, #284]	; (8001ad8 <parseCommands+0x2b4>)
 80019ba:	482e      	ldr	r0, [pc, #184]	; (8001a74 <parseCommands+0x250>)
 80019bc:	f008 f806 	bl	80099cc <writeMsg>
}
 80019c0:	e0fb      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "reinit") == 0){
 80019c2:	4946      	ldr	r1, [pc, #280]	; (8001adc <parseCommands+0x2b8>)
 80019c4:	4827      	ldr	r0, [pc, #156]	; (8001a64 <parseCommands+0x240>)
 80019c6:	f7fe fc0b 	bl	80001e0 <strcmp>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <parseCommands+0x1c6>
		int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace, &Mode_dir);
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <parseCommands+0x280>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <parseCommands+0x2bc>)
 80019d6:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <parseCommands+0x294>)
 80019d8:	4942      	ldr	r1, [pc, #264]	; (8001ae4 <parseCommands+0x2c0>)
 80019da:	4833      	ldr	r0, [pc, #204]	; (8001aa8 <parseCommands+0x284>)
 80019dc:	f001 f94e 	bl	8002c7c <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 80019e0:	4941      	ldr	r1, [pc, #260]	; (8001ae8 <parseCommands+0x2c4>)
 80019e2:	4824      	ldr	r0, [pc, #144]	; (8001a74 <parseCommands+0x250>)
 80019e4:	f007 fff2 	bl	80099cc <writeMsg>
}
 80019e8:	e0e7      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "change") == 0){
 80019ea:	4940      	ldr	r1, [pc, #256]	; (8001aec <parseCommands+0x2c8>)
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <parseCommands+0x240>)
 80019ee:	f7fe fbf7 	bl	80001e0 <strcmp>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d121      	bne.n	8001a3c <parseCommands+0x218>
		if (Mode == sLine ){
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <parseCommands+0x27c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <parseCommands+0x1f2>
			Mode_dir.direction_s_r = firstParameter;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <parseCommands+0x23c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <parseCommands+0x280>)
 8001a08:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <parseCommands+0x280>)
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	4826      	ldr	r0, [pc, #152]	; (8001aa8 <parseCommands+0x284>)
 8001a10:	f001 f839 	bl	8002a86 <change_dir_straigh_Roll>
 8001a14:	e00d      	b.n	8001a32 <parseCommands+0x20e>
		}else if (Mode == sRoll ){
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <parseCommands+0x27c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d109      	bne.n	8001a32 <parseCommands+0x20e>
			Mode_dir.direction_s_r = firstParameter;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <parseCommands+0x23c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <parseCommands+0x280>)
 8001a26:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <parseCommands+0x280>)
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <parseCommands+0x284>)
 8001a2e:	f001 f82a 	bl	8002a86 <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001a32:	492d      	ldr	r1, [pc, #180]	; (8001ae8 <parseCommands+0x2c4>)
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <parseCommands+0x250>)
 8001a36:	f007 ffc9 	bl	80099cc <writeMsg>
}
 8001a3a:	e0be      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "square") == 0){
 8001a3c:	492c      	ldr	r1, [pc, #176]	; (8001af0 <parseCommands+0x2cc>)
 8001a3e:	4809      	ldr	r0, [pc, #36]	; (8001a64 <parseCommands+0x240>)
 8001a40:	f7fe fbce 	bl	80001e0 <strcmp>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d156      	bne.n	8001af8 <parseCommands+0x2d4>
		flag_square = SET; // Levantamos la bandera para Square
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <parseCommands+0x2d0>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
}
 8001a50:	e0b3      	b.n	8001bba <parseCommands+0x396>
 8001a52:	bf00      	nop
 8001a54:	20000544 	.word	0x20000544
 8001a58:	20000500 	.word	0x20000500
 8001a5c:	200004fc 	.word	0x200004fc
 8001a60:	200004f8 	.word	0x200004f8
 8001a64:	200004d8 	.word	0x200004d8
 8001a68:	080101e8 	.word	0x080101e8
 8001a6c:	080101f8 	.word	0x080101f8
 8001a70:	08010200 	.word	0x08010200
 8001a74:	20000330 	.word	0x20000330
 8001a78:	08010214 	.word	0x08010214
 8001a7c:	0801023c 	.word	0x0801023c
 8001a80:	08010258 	.word	0x08010258
 8001a84:	08010280 	.word	0x08010280
 8001a88:	080102a0 	.word	0x080102a0
 8001a8c:	080102d4 	.word	0x080102d4
 8001a90:	080102fc 	.word	0x080102fc
 8001a94:	08010330 	.word	0x08010330
 8001a98:	08010340 	.word	0x08010340
 8001a9c:	08010344 	.word	0x08010344
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20001018 	.word	0x20001018
 8001aa8:	200003e0 	.word	0x200003e0
 8001aac:	2000101c 	.word	0x2000101c
 8001ab0:	08010348 	.word	0x08010348
 8001ab4:	08010368 	.word	0x08010368
 8001ab8:	20001050 	.word	0x20001050
 8001abc:	2000101d 	.word	0x2000101d
 8001ac0:	08010370 	.word	0x08010370
 8001ac4:	08010394 	.word	0x08010394
 8001ac8:	2000101f 	.word	0x2000101f
 8001acc:	0801039c 	.word	0x0801039c
 8001ad0:	080103c0 	.word	0x080103c0
 8001ad4:	20001020 	.word	0x20001020
 8001ad8:	080103c8 	.word	0x080103c8
 8001adc:	080101c0 	.word	0x080101c0
 8001ae0:	20001030 	.word	0x20001030
 8001ae4:	20001570 	.word	0x20001570
 8001ae8:	080103ec 	.word	0x080103ec
 8001aec:	08010410 	.word	0x08010410
 8001af0:	08010418 	.word	0x08010418
 8001af4:	20001024 	.word	0x20001024
	}else if (strcmp(cmd, "Astar") == 0){
 8001af8:	4932      	ldr	r1, [pc, #200]	; (8001bc4 <parseCommands+0x3a0>)
 8001afa:	4833      	ldr	r0, [pc, #204]	; (8001bc8 <parseCommands+0x3a4>)
 8001afc:	f7fe fb70 	bl	80001e0 <strcmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d130      	bne.n	8001b68 <parseCommands+0x344>
		handlerAstarParameters.parallelDistance  = firstParameter;
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <parseCommands+0x3a8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <parseCommands+0x3ac>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <parseCommands+0x3b0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <parseCommands+0x3ac>)
 8001b26:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <parseCommands+0x3b4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482a      	ldr	r0, [pc, #168]	; (8001bdc <parseCommands+0x3b8>)
 8001b32:	f007 ff4b 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8001b36:	492a      	ldr	r1, [pc, #168]	; (8001be0 <parseCommands+0x3bc>)
 8001b38:	4828      	ldr	r0, [pc, #160]	; (8001bdc <parseCommands+0x3b8>)
 8001b3a:	f007 ff47 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001b3e:	4929      	ldr	r1, [pc, #164]	; (8001be4 <parseCommands+0x3c0>)
 8001b40:	4826      	ldr	r0, [pc, #152]	; (8001bdc <parseCommands+0x3b8>)
 8001b42:	f007 ff43 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8001b46:	4928      	ldr	r1, [pc, #160]	; (8001be8 <parseCommands+0x3c4>)
 8001b48:	4824      	ldr	r0, [pc, #144]	; (8001bdc <parseCommands+0x3b8>)
 8001b4a:	f007 ff3f 	bl	80099cc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8001b4e:	4927      	ldr	r1, [pc, #156]	; (8001bec <parseCommands+0x3c8>)
 8001b50:	4822      	ldr	r0, [pc, #136]	; (8001bdc <parseCommands+0x3b8>)
 8001b52:	f007 ff3b 	bl	80099cc <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001b56:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <parseCommands+0x3cc>)
 8001b58:	4926      	ldr	r1, [pc, #152]	; (8001bf4 <parseCommands+0x3d0>)
 8001b5a:	4820      	ldr	r0, [pc, #128]	; (8001bdc <parseCommands+0x3b8>)
 8001b5c:	f003 fcb6 	bl	80054cc <initSerialComunication>
		flagAstar = SET;
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <parseCommands+0x3d4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
}
 8001b66:	e028      	b.n	8001bba <parseCommands+0x396>
	else if (strcmp(cmd, "stop") == 0){
 8001b68:	4924      	ldr	r1, [pc, #144]	; (8001bfc <parseCommands+0x3d8>)
 8001b6a:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <parseCommands+0x3a4>)
 8001b6c:	f7fe fb38 	bl	80001e0 <strcmp>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d112      	bne.n	8001b9c <parseCommands+0x378>
		stop(handler_Motor_Array); // Apagamos los motores
 8001b76:	4822      	ldr	r0, [pc, #136]	; (8001c00 <parseCommands+0x3dc>)
 8001b78:	f001 f85c 	bl	8002c34 <stop>
		flag_Go_Straigh   = RESET;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <parseCommands+0x3e0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <parseCommands+0x3e4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <parseCommands+0x3e8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <parseCommands+0x3ec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
		Mode_dir.Mode     = sNone;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <parseCommands+0x3f0>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
}
 8001b9a:	e00e      	b.n	8001bba <parseCommands+0x396>
	}else if (strcmp(cmd, "stoptimer") == 0){
 8001b9c:	491e      	ldr	r1, [pc, #120]	; (8001c18 <parseCommands+0x3f4>)
 8001b9e:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <parseCommands+0x3a4>)
 8001ba0:	f7fe fb1e 	bl	80001e0 <strcmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <parseCommands+0x38e>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Paramos de medir
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <parseCommands+0x3f8>)
 8001bac:	f004 fa00 	bl	8005fb0 <stopTimer>
}
 8001bb0:	e003      	b.n	8001bba <parseCommands+0x396>
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
 8001bb2:	491b      	ldr	r1, [pc, #108]	; (8001c20 <parseCommands+0x3fc>)
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <parseCommands+0x3b8>)
 8001bb6:	f007 ff09 	bl	80099cc <writeMsg>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08010420 	.word	0x08010420
 8001bc8:	200004d8 	.word	0x200004d8
 8001bcc:	200004f8 	.word	0x200004f8
 8001bd0:	20000440 	.word	0x20000440
 8001bd4:	200004fc 	.word	0x200004fc
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20000330 	.word	0x20000330
 8001be0:	08010428 	.word	0x08010428
 8001be4:	08010460 	.word	0x08010460
 8001be8:	08010498 	.word	0x08010498
 8001bec:	080104d0 	.word	0x080104d0
 8001bf0:	20000234 	.word	0x20000234
 8001bf4:	20000228 	.word	0x20000228
 8001bf8:	20001016 	.word	0x20001016
 8001bfc:	08010198 	.word	0x08010198
 8001c00:	200003e0 	.word	0x200003e0
 8001c04:	2000101c 	.word	0x2000101c
 8001c08:	2000101d 	.word	0x2000101d
 8001c0c:	2000101f 	.word	0x2000101f
 8001c10:	20001020 	.word	0x20001020
 8001c14:	20001018 	.word	0x20001018
 8001c18:	08010508 	.word	0x08010508
 8001c1c:	200002c4 	.word	0x200002c4
 8001c20:	08010514 	.word	0x08010514

08001c24 <usart2Rx_Callback>:


// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001c28:	f007 fef8 	bl	8009a1c <getRxData>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <usart2Rx_Callback+0x14>)
 8001c32:	701a      	strb	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200004d6 	.word	0x200004d6

08001c3c <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <BasicTimer3_Callback+0x10>)
 8001c42:	f005 fbb4 	bl	80073ae <GPIOxTooglePin>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000204 	.word	0x20000204

08001c50 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <BasicTimer2_Callback+0x44>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <BasicTimer2_Callback+0x48>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <BasicTimer2_Callback+0x4c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d803      	bhi.n	8001c70 <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <BasicTimer2_Callback+0x50>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e005      	b.n	8001c7c <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <BasicTimer2_Callback+0x4c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <BasicTimer2_Callback+0x4c>)
 8001c7a:	801a      	strh	r2, [r3, #0]

	if (Mode_dir.Mode == sNone){
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <BasicTimer2_Callback+0x54>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d102      	bne.n	8001c8a <BasicTimer2_Callback+0x3a>
		flag_NOP = SET;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <BasicTimer2_Callback+0x58>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
	}

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	2000101a 	.word	0x2000101a
 8001c98:	20000009 	.word	0x20000009
 8001c9c:	20001028 	.word	0x20001028
 8001ca0:	2000101b 	.word	0x2000101b
 8001ca4:	20001018 	.word	0x20001018
 8001ca8:	20001025 	.word	0x20001025

08001cac <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <callback_extInt1+0x24>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d005      	beq.n	8001cc4 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <callback_extInt1+0x28>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	791a      	ldrb	r2, [r3, #4]
 8001cbe:	3201      	adds	r2, #1
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	711a      	strb	r2, [r3, #4]
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20001018 	.word	0x20001018
 8001cd4:	200003e0 	.word	0x200003e0

08001cd8 <callback_extInt3>:

void callback_extInt3(void){
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <callback_extInt3+0x24>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d005      	beq.n	8001cf0 <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <callback_extInt3+0x28>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	791a      	ldrb	r2, [r3, #4]
 8001cea:	3201      	adds	r2, #1
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	711a      	strb	r2, [r3, #4]
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20001018 	.word	0x20001018
 8001d00:	200003e0 	.word	0x200003e0

08001d04 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001d10:	23c8      	movs	r3, #200	; 0xc8
 8001d12:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d061      	beq.n	8001df4 <calibracionGyros+0xf0>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	dc70      	bgt.n	8001e16 <calibracionGyros+0x112>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <calibracionGyros+0x60>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d037      	beq.n	8001dac <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001d3c:	e06b      	b.n	8001e16 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f005 fcd6 	bl	80076f0 <readGyro_X>
 8001d44:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001d48:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001d58:	7efb      	ldrb	r3, [r7, #27]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f003 fe9e 	bl	8005aa0 <delay_ms>
			while (contador < numMedidas){
 8001d64:	7efb      	ldrb	r3, [r7, #27]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8a7a      	ldrh	r2, [r7, #18]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d8e7      	bhi.n	8001d3e <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001d84:	e048      	b.n	8001e18 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f005 fd3a 	bl	8007800 <readGyro_Y>
 8001d8c:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001d90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001da0:	7efb      	ldrb	r3, [r7, #27]
 8001da2:	3301      	adds	r3, #1
 8001da4:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001da6:	2001      	movs	r0, #1
 8001da8:	f003 fe7a 	bl	8005aa0 <delay_ms>
			while (contador < numMedidas){
 8001dac:	7efb      	ldrb	r3, [r7, #27]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	8a7a      	ldrh	r2, [r7, #18]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8e7      	bhi.n	8001d86 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001dcc:	e024      	b.n	8001e18 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f005 fd9e 	bl	8007910 <readGyro_Z>
 8001dd4:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001dd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001de8:	7efb      	ldrb	r3, [r7, #27]
 8001dea:	3301      	adds	r3, #1
 8001dec:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001dee:	2001      	movs	r0, #1
 8001df0:	f003 fe56 	bl	8005aa0 <delay_ms>
			while (contador < numMedidas){
 8001df4:	7efb      	ldrb	r3, [r7, #27]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	8a7a      	ldrh	r2, [r7, #18]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d8e7      	bhi.n	8001dce <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001e14:	e000      	b.n	8001e18 <calibracionGyros+0x114>
			break;
 8001e16:	bf00      	nop
		}
	}


	return promedio;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	ee07 3a90 	vmov	s15, r3
}
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6178      	str	r0, [r7, #20]
 8001e30:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e34:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e38:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f005 fd68 	bl	8007910 <readGyro_Z>
 8001e40:	ee10 3a10 	vmov	r3, s0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb97 	bl	8000578 <__aeabi_f2d>
 8001e4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e4e:	f7fe fa33 	bl	80002b8 <__aeabi_dsub>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fedd 	bl	8000c18 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001e62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e66:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001e6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e6e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001ed4 <getAngle+0xac>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001e82:	69b8      	ldr	r0, [r7, #24]
 8001e84:	f7fe fb78 	bl	8000578 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <getAngle+0xb0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb6e 	bl	8000578 <__aeabi_f2d>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fa0b 	bl	80002bc <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe feb3 	bl	8000c18 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <getAngle+0xb0>)
 8001eb6:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <getAngle+0xb4>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <getAngle+0xb8>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <getAngle+0xb8>)
 8001ec8:	801a      	strh	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	447a0000 	.word	0x447a0000
 8001ed8:	20001620 	.word	0x20001620
 8001edc:	200002c4 	.word	0x200002c4
 8001ee0:	20001026 	.word	0x20001026
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	ed2d 8b02 	vpush	{d8}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001ef8:	793b      	ldrb	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 81d4 	bne.w	80022a8 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001f00:	4bab      	ldr	r3, [pc, #684]	; (80021b0 <get_measuremets_parameters+0x2c8>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4bab      	ldr	r3, [pc, #684]	; (80021b4 <get_measuremets_parameters+0x2cc>)
 8001f08:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001f0a:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <get_measuremets_parameters+0x2d0>)
 8001f0c:	edd3 6a00 	vldr	s13, [r3]
 8001f10:	4baa      	ldr	r3, [pc, #680]	; (80021bc <get_measuremets_parameters+0x2d4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	4ba7      	ldr	r3, [pc, #668]	; (80021c0 <get_measuremets_parameters+0x2d8>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001f26:	4ba6      	ldr	r3, [pc, #664]	; (80021c0 <get_measuremets_parameters+0x2d8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb24 	bl	8000578 <__aeabi_f2d>
 8001f30:	a39b      	add	r3, pc, #620	; (adr r3, 80021a0 <get_measuremets_parameters+0x2b8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb77 	bl	8000628 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b9f      	ldr	r3, [pc, #636]	; (80021c4 <get_measuremets_parameters+0x2dc>)
 8001f48:	f7fe fc98 	bl	800087c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f56:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <get_measuremets_parameters+0x2d0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fb0c 	bl	8000578 <__aeabi_f2d>
 8001f60:	a38f      	add	r3, pc, #572	; (adr r3, 80021a0 <get_measuremets_parameters+0x2b8>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fb5f 	bl	8000628 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <get_measuremets_parameters+0x2dc>)
 8001f78:	f7fe fc80 	bl	800087c <__aeabi_ddiv>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	ec43 2b17 	vmov	d7, r2, r3
 8001f84:	eeb0 0a47 	vmov.f32	s0, s14
 8001f88:	eef0 0a67 	vmov.f32	s1, s15
 8001f8c:	f00b fca4 	bl	800d8d8 <sin>
 8001f90:	eeb0 8a40 	vmov.f32	s16, s0
 8001f94:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f98:	4b87      	ldr	r3, [pc, #540]	; (80021b8 <get_measuremets_parameters+0x2d0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe faeb 	bl	8000578 <__aeabi_f2d>
 8001fa2:	a37f      	add	r3, pc, #508	; (adr r3, 80021a0 <get_measuremets_parameters+0x2b8>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fb3e 	bl	8000628 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b82      	ldr	r3, [pc, #520]	; (80021c4 <get_measuremets_parameters+0x2dc>)
 8001fba:	f7fe fc5f 	bl	800087c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	ec43 2b17 	vmov	d7, r2, r3
 8001fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fca:	eef0 0a67 	vmov.f32	s1, s15
 8001fce:	f00b fbe7 	bl	800d7a0 <cos>
 8001fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd6:	eef0 7a60 	vmov.f32	s15, s1
 8001fda:	eeb0 1a47 	vmov.f32	s2, s14
 8001fde:	eef0 1a67 	vmov.f32	s3, s15
 8001fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8001fe6:	eef0 0a68 	vmov.f32	s1, s17
 8001fea:	f00b fd01 	bl	800d9f0 <atan2>
 8001fee:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ff2:	a36d      	add	r3, pc, #436	; (adr r3, 80021a8 <get_measuremets_parameters+0x2c0>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fb16 	bl	8000628 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800200a:	f7fe f957 	bl	80002bc <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800201e:	a360      	add	r3, pc, #384	; (adr r3, 80021a0 <get_measuremets_parameters+0x2b8>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fb00 	bl	8000628 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <get_measuremets_parameters+0x2dc>)
 8002036:	f7fe fc21 	bl	800087c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	ec43 2b17 	vmov	d7, r2, r3
 8002042:	eeb0 0a47 	vmov.f32	s0, s14
 8002046:	eef0 0a67 	vmov.f32	s1, s15
 800204a:	f00b fc45 	bl	800d8d8 <sin>
 800204e:	eeb0 8a40 	vmov.f32	s16, s0
 8002052:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800205c:	a350      	add	r3, pc, #320	; (adr r3, 80021a0 <get_measuremets_parameters+0x2b8>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe fae1 	bl	8000628 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <get_measuremets_parameters+0x2dc>)
 8002074:	f7fe fc02 	bl	800087c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	ec43 2b17 	vmov	d7, r2, r3
 8002080:	eeb0 0a47 	vmov.f32	s0, s14
 8002084:	eef0 0a67 	vmov.f32	s1, s15
 8002088:	f00b fb8a 	bl	800d7a0 <cos>
 800208c:	eeb0 7a40 	vmov.f32	s14, s0
 8002090:	eef0 7a60 	vmov.f32	s15, s1
 8002094:	eeb0 1a47 	vmov.f32	s2, s14
 8002098:	eef0 1a67 	vmov.f32	s3, s15
 800209c:	eeb0 0a48 	vmov.f32	s0, s16
 80020a0:	eef0 0a68 	vmov.f32	s1, s17
 80020a4:	f00b fca4 	bl	800d9f0 <atan2>
 80020a8:	eeb0 7a40 	vmov.f32	s14, s0
 80020ac:	eef0 7a60 	vmov.f32	s15, s1
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80020bc:	eeb0 0a47 	vmov.f32	s0, s14
 80020c0:	eef0 0a67 	vmov.f32	s1, s15
 80020c4:	f00b fc08 	bl	800d8d8 <sin>
 80020c8:	eeb0 8a40 	vmov.f32	s16, s0
 80020cc:	eef0 8a60 	vmov.f32	s17, s1
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80020d6:	eeb0 0a47 	vmov.f32	s0, s14
 80020da:	eef0 0a67 	vmov.f32	s1, s15
 80020de:	f00b fb5f 	bl	800d7a0 <cos>
 80020e2:	eeb0 7a40 	vmov.f32	s14, s0
 80020e6:	eef0 7a60 	vmov.f32	s15, s1
 80020ea:	eeb0 1a47 	vmov.f32	s2, s14
 80020ee:	eef0 1a67 	vmov.f32	s3, s15
 80020f2:	eeb0 0a48 	vmov.f32	s0, s16
 80020f6:	eef0 0a68 	vmov.f32	s1, s17
 80020fa:	f00b fc79 	bl	800d9f0 <atan2>
 80020fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002102:	eef0 7a60 	vmov.f32	s15, s1
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 800210c:	797b      	ldrb	r3, [r7, #5]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d15e      	bne.n	80021d0 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <get_measuremets_parameters+0x2e0>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <get_measuremets_parameters+0x2e4>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	edd3 6a03 	vldr	s13, [r3, #12]
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <get_measuremets_parameters+0x2cc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002172:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3304      	adds	r3, #4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <get_measuremets_parameters+0x2cc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3304      	adds	r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002196:	edc3 7a02 	vstr	s15, [r3, #8]
 800219a:	e065      	b.n	8002268 <get_measuremets_parameters+0x380>
 800219c:	f3af 8000 	nop.w
 80021a0:	54442d18 	.word	0x54442d18
 80021a4:	400921fb 	.word	0x400921fb
 80021a8:	1a63c1f8 	.word	0x1a63c1f8
 80021ac:	404ca5dc 	.word	0x404ca5dc
 80021b0:	20001026 	.word	0x20001026
 80021b4:	2000102c 	.word	0x2000102c
 80021b8:	20001620 	.word	0x20001620
 80021bc:	20001028 	.word	0x20001028
 80021c0:	20001624 	.word	0x20001624
 80021c4:	40668000 	.word	0x40668000
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20000010 	.word	0x20000010

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <get_measuremets_parameters+0x3a8>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	eef1 7a67 	vneg.f32	s15, s15
 80021f0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <get_measuremets_parameters+0x3ac>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3304      	adds	r3, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	eef1 7a67 	vneg.f32	s15, s15
 8002218:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	edd3 7a03 	vldr	s15, [r3, #12]
 8002224:	eef1 6a67 	vneg.f32	s13, s15
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <get_measuremets_parameters+0x3b0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3304      	adds	r3, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	edd3 7a03 	vldr	s15, [r3, #12]
 800224a:	eef1 6a67 	vneg.f32	s13, s15
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <get_measuremets_parameters+0x3b0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002264:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3304      	adds	r3, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <get_measuremets_parameters+0x3b4>)
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <get_measuremets_parameters+0x3b8>)
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <get_measuremets_parameters+0x3bc>)
 800228a:	2200      	movs	r2, #0
 800228c:	801a      	strh	r2, [r3, #0]
		//Reiniciamos el contador de acción
		counting_action  = 0;

	}

}
 800228e:	e2f0      	b.n	8002872 <get_measuremets_parameters+0x98a>
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000010 	.word	0x20000010
 8002298:	2000102c 	.word	0x2000102c
 800229c:	20001620 	.word	0x20001620
 80022a0:	20001026 	.word	0x20001026
 80022a4:	20001028 	.word	0x20001028
	else if(operation_mode_dir.Mode == sRoll)
 80022a8:	793b      	ldrb	r3, [r7, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f040 81c8 	bne.w	8002640 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 80022b0:	4bad      	ldr	r3, [pc, #692]	; (8002568 <get_measuremets_parameters+0x680>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4bad      	ldr	r3, [pc, #692]	; (800256c <get_measuremets_parameters+0x684>)
 80022b8:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 80022ba:	4bad      	ldr	r3, [pc, #692]	; (8002570 <get_measuremets_parameters+0x688>)
 80022bc:	edd3 6a00 	vldr	s13, [r3]
 80022c0:	4bac      	ldr	r3, [pc, #688]	; (8002574 <get_measuremets_parameters+0x68c>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d0:	4ba9      	ldr	r3, [pc, #676]	; (8002578 <get_measuremets_parameters+0x690>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80022d6:	4ba8      	ldr	r3, [pc, #672]	; (8002578 <get_measuremets_parameters+0x690>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f94c 	bl	8000578 <__aeabi_f2d>
 80022e0:	a39d      	add	r3, pc, #628	; (adr r3, 8002558 <get_measuremets_parameters+0x670>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe f99f 	bl	8000628 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	4ba1      	ldr	r3, [pc, #644]	; (800257c <get_measuremets_parameters+0x694>)
 80022f8:	f7fe fac0 	bl	800087c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002306:	4b9a      	ldr	r3, [pc, #616]	; (8002570 <get_measuremets_parameters+0x688>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f934 	bl	8000578 <__aeabi_f2d>
 8002310:	a391      	add	r3, pc, #580	; (adr r3, 8002558 <get_measuremets_parameters+0x670>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe f987 	bl	8000628 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <get_measuremets_parameters+0x694>)
 8002328:	f7fe faa8 	bl	800087c <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	ec43 2b17 	vmov	d7, r2, r3
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	f00b facc 	bl	800d8d8 <sin>
 8002340:	eeb0 8a40 	vmov.f32	s16, s0
 8002344:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002348:	4b89      	ldr	r3, [pc, #548]	; (8002570 <get_measuremets_parameters+0x688>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f913 	bl	8000578 <__aeabi_f2d>
 8002352:	a381      	add	r3, pc, #516	; (adr r3, 8002558 <get_measuremets_parameters+0x670>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f966 	bl	8000628 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b84      	ldr	r3, [pc, #528]	; (800257c <get_measuremets_parameters+0x694>)
 800236a:	f7fe fa87 	bl	800087c <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	ec43 2b17 	vmov	d7, r2, r3
 8002376:	eeb0 0a47 	vmov.f32	s0, s14
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	f00b fa0f 	bl	800d7a0 <cos>
 8002382:	eeb0 7a40 	vmov.f32	s14, s0
 8002386:	eef0 7a60 	vmov.f32	s15, s1
 800238a:	eeb0 1a47 	vmov.f32	s2, s14
 800238e:	eef0 1a67 	vmov.f32	s3, s15
 8002392:	eeb0 0a48 	vmov.f32	s0, s16
 8002396:	eef0 0a68 	vmov.f32	s1, s17
 800239a:	f00b fb29 	bl	800d9f0 <atan2>
 800239e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80023a2:	a36f      	add	r3, pc, #444	; (adr r3, 8002560 <get_measuremets_parameters+0x678>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f93e 	bl	8000628 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ba:	f7fd ff7f 	bl	80002bc <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023ce:	a362      	add	r3, pc, #392	; (adr r3, 8002558 <get_measuremets_parameters+0x670>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f928 	bl	8000628 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b65      	ldr	r3, [pc, #404]	; (800257c <get_measuremets_parameters+0x694>)
 80023e6:	f7fe fa49 	bl	800087c <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ec43 2b17 	vmov	d7, r2, r3
 80023f2:	eeb0 0a47 	vmov.f32	s0, s14
 80023f6:	eef0 0a67 	vmov.f32	s1, s15
 80023fa:	f00b fa6d 	bl	800d8d8 <sin>
 80023fe:	eeb0 8a40 	vmov.f32	s16, s0
 8002402:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800240c:	a352      	add	r3, pc, #328	; (adr r3, 8002558 <get_measuremets_parameters+0x670>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f909 	bl	8000628 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <get_measuremets_parameters+0x694>)
 8002424:	f7fe fa2a 	bl	800087c <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	ec43 2b17 	vmov	d7, r2, r3
 8002430:	eeb0 0a47 	vmov.f32	s0, s14
 8002434:	eef0 0a67 	vmov.f32	s1, s15
 8002438:	f00b f9b2 	bl	800d7a0 <cos>
 800243c:	eeb0 7a40 	vmov.f32	s14, s0
 8002440:	eef0 7a60 	vmov.f32	s15, s1
 8002444:	eeb0 1a47 	vmov.f32	s2, s14
 8002448:	eef0 1a67 	vmov.f32	s3, s15
 800244c:	eeb0 0a48 	vmov.f32	s0, s16
 8002450:	eef0 0a68 	vmov.f32	s1, s17
 8002454:	f00b facc 	bl	800d9f0 <atan2>
 8002458:	eeb0 7a40 	vmov.f32	s14, s0
 800245c:	eef0 7a60 	vmov.f32	s15, s1
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	ed93 7b02 	vldr	d7, [r3, #8]
 800246c:	eeb0 0a47 	vmov.f32	s0, s14
 8002470:	eef0 0a67 	vmov.f32	s1, s15
 8002474:	f00b fa30 	bl	800d8d8 <sin>
 8002478:	eeb0 8a40 	vmov.f32	s16, s0
 800247c:	eef0 8a60 	vmov.f32	s17, s1
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	ed93 7b02 	vldr	d7, [r3, #8]
 8002486:	eeb0 0a47 	vmov.f32	s0, s14
 800248a:	eef0 0a67 	vmov.f32	s1, s15
 800248e:	f00b f987 	bl	800d7a0 <cos>
 8002492:	eeb0 7a40 	vmov.f32	s14, s0
 8002496:	eef0 7a60 	vmov.f32	s15, s1
 800249a:	eeb0 1a47 	vmov.f32	s2, s14
 800249e:	eef0 1a67 	vmov.f32	s3, s15
 80024a2:	eeb0 0a48 	vmov.f32	s0, s16
 80024a6:	eef0 0a68 	vmov.f32	s1, s17
 80024aa:	f00b faa1 	bl	800d9f0 <atan2>
 80024ae:	eeb0 7a40 	vmov.f32	s14, s0
 80024b2:	eef0 7a60 	vmov.f32	s15, s1
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 80024bc:	797b      	ldrb	r3, [r7, #5]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d162      	bne.n	8002588 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	791b      	ldrb	r3, [r3, #4]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <get_measuremets_parameters+0x698>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <get_measuremets_parameters+0x69c>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3304      	adds	r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	eef1 7a67 	vneg.f32	s15, s15
 8002506:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <get_measuremets_parameters+0x684>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002526:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3304      	adds	r3, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	edd3 7a03 	vldr	s15, [r3, #12]
 8002534:	eef1 6a67 	vneg.f32	s13, s15
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <get_measuremets_parameters+0x684>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002552:	e061      	b.n	8002618 <get_measuremets_parameters+0x730>
 8002554:	f3af 8000 	nop.w
 8002558:	54442d18 	.word	0x54442d18
 800255c:	400921fb 	.word	0x400921fb
 8002560:	1a63c1f8 	.word	0x1a63c1f8
 8002564:	404ca5dc 	.word	0x404ca5dc
 8002568:	20001026 	.word	0x20001026
 800256c:	2000102c 	.word	0x2000102c
 8002570:	20001620 	.word	0x20001620
 8002574:	20001028 	.word	0x20001028
 8002578:	20001624 	.word	0x20001624
 800257c:	40668000 	.word	0x40668000
 8002580:	2000000c 	.word	0x2000000c
 8002584:	20000010 	.word	0x20000010
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002596:	4bbe      	ldr	r3, [pc, #760]	; (8002890 <get_measuremets_parameters+0x9a8>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	eef1 7a67 	vneg.f32	s15, s15
 80025a8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3304      	adds	r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025bc:	4bb5      	ldr	r3, [pc, #724]	; (8002894 <get_measuremets_parameters+0x9ac>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d8:	eef1 6a67 	vneg.f32	s13, s15
 80025dc:	4bae      	ldr	r3, [pc, #696]	; (8002898 <get_measuremets_parameters+0x9b0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f0:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3304      	adds	r3, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80025fe:	4ba6      	ldr	r3, [pc, #664]	; (8002898 <get_measuremets_parameters+0x9b0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002614:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3304      	adds	r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800262a:	4b9c      	ldr	r3, [pc, #624]	; (800289c <get_measuremets_parameters+0x9b4>)
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8002632:	4b9b      	ldr	r3, [pc, #620]	; (80028a0 <get_measuremets_parameters+0x9b8>)
 8002634:	2200      	movs	r2, #0
 8002636:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002638:	4b9a      	ldr	r3, [pc, #616]	; (80028a4 <get_measuremets_parameters+0x9bc>)
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]
}
 800263e:	e118      	b.n	8002872 <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 8002640:	4b97      	ldr	r3, [pc, #604]	; (80028a0 <get_measuremets_parameters+0x9b8>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b94      	ldr	r3, [pc, #592]	; (8002898 <get_measuremets_parameters+0x9b0>)
 8002648:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 800264a:	4b94      	ldr	r3, [pc, #592]	; (800289c <get_measuremets_parameters+0x9b4>)
 800264c:	edd3 6a00 	vldr	s13, [r3]
 8002650:	4b94      	ldr	r3, [pc, #592]	; (80028a4 <get_measuremets_parameters+0x9bc>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800265c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002660:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <get_measuremets_parameters+0x9c0>)
 8002662:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002666:	4b90      	ldr	r3, [pc, #576]	; (80028a8 <get_measuremets_parameters+0x9c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff84 	bl	8000578 <__aeabi_f2d>
 8002670:	a383      	add	r3, pc, #524	; (adr r3, 8002880 <get_measuremets_parameters+0x998>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ffd7 	bl	8000628 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <get_measuremets_parameters+0x9c4>)
 8002688:	f7fe f8f8 	bl	800087c <__aeabi_ddiv>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002696:	4b81      	ldr	r3, [pc, #516]	; (800289c <get_measuremets_parameters+0x9b4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff6c 	bl	8000578 <__aeabi_f2d>
 80026a0:	a377      	add	r3, pc, #476	; (adr r3, 8002880 <get_measuremets_parameters+0x998>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffbf 	bl	8000628 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <get_measuremets_parameters+0x9c4>)
 80026b8:	f7fe f8e0 	bl	800087c <__aeabi_ddiv>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	ec43 2b17 	vmov	d7, r2, r3
 80026c4:	eeb0 0a47 	vmov.f32	s0, s14
 80026c8:	eef0 0a67 	vmov.f32	s1, s15
 80026cc:	f00b f904 	bl	800d8d8 <sin>
 80026d0:	eeb0 8a40 	vmov.f32	s16, s0
 80026d4:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80026d8:	4b70      	ldr	r3, [pc, #448]	; (800289c <get_measuremets_parameters+0x9b4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff4b 	bl	8000578 <__aeabi_f2d>
 80026e2:	a367      	add	r3, pc, #412	; (adr r3, 8002880 <get_measuremets_parameters+0x998>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd ff9e 	bl	8000628 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <get_measuremets_parameters+0x9c4>)
 80026fa:	f7fe f8bf 	bl	800087c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	ec43 2b17 	vmov	d7, r2, r3
 8002706:	eeb0 0a47 	vmov.f32	s0, s14
 800270a:	eef0 0a67 	vmov.f32	s1, s15
 800270e:	f00b f847 	bl	800d7a0 <cos>
 8002712:	eeb0 7a40 	vmov.f32	s14, s0
 8002716:	eef0 7a60 	vmov.f32	s15, s1
 800271a:	eeb0 1a47 	vmov.f32	s2, s14
 800271e:	eef0 1a67 	vmov.f32	s3, s15
 8002722:	eeb0 0a48 	vmov.f32	s0, s16
 8002726:	eef0 0a68 	vmov.f32	s1, s17
 800272a:	f00b f961 	bl	800d9f0 <atan2>
 800272e:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002732:	a355      	add	r3, pc, #340	; (adr r3, 8002888 <get_measuremets_parameters+0x9a0>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd ff76 	bl	8000628 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800274a:	f7fd fdb7 	bl	80002bc <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800275e:	a348      	add	r3, pc, #288	; (adr r3, 8002880 <get_measuremets_parameters+0x998>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd ff60 	bl	8000628 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <get_measuremets_parameters+0x9c4>)
 8002776:	f7fe f881 	bl	800087c <__aeabi_ddiv>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	ec43 2b17 	vmov	d7, r2, r3
 8002782:	eeb0 0a47 	vmov.f32	s0, s14
 8002786:	eef0 0a67 	vmov.f32	s1, s15
 800278a:	f00b f8a5 	bl	800d8d8 <sin>
 800278e:	eeb0 8a40 	vmov.f32	s16, s0
 8002792:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800279c:	a338      	add	r3, pc, #224	; (adr r3, 8002880 <get_measuremets_parameters+0x998>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fd ff41 	bl	8000628 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <get_measuremets_parameters+0x9c4>)
 80027b4:	f7fe f862 	bl	800087c <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b17 	vmov	d7, r2, r3
 80027c0:	eeb0 0a47 	vmov.f32	s0, s14
 80027c4:	eef0 0a67 	vmov.f32	s1, s15
 80027c8:	f00a ffea 	bl	800d7a0 <cos>
 80027cc:	eeb0 7a40 	vmov.f32	s14, s0
 80027d0:	eef0 7a60 	vmov.f32	s15, s1
 80027d4:	eeb0 1a47 	vmov.f32	s2, s14
 80027d8:	eef0 1a67 	vmov.f32	s3, s15
 80027dc:	eeb0 0a48 	vmov.f32	s0, s16
 80027e0:	eef0 0a68 	vmov.f32	s1, s17
 80027e4:	f00b f904 	bl	800d9f0 <atan2>
 80027e8:	eeb0 7a40 	vmov.f32	s14, s0
 80027ec:	eef0 7a60 	vmov.f32	s15, s1
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	eef0 0a67 	vmov.f32	s1, s15
 8002804:	f00b f868 	bl	800d8d8 <sin>
 8002808:	eeb0 8a40 	vmov.f32	s16, s0
 800280c:	eef0 8a60 	vmov.f32	s17, s1
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	ed93 7b02 	vldr	d7, [r3, #8]
 8002816:	eeb0 0a47 	vmov.f32	s0, s14
 800281a:	eef0 0a67 	vmov.f32	s1, s15
 800281e:	f00a ffbf 	bl	800d7a0 <cos>
 8002822:	eeb0 7a40 	vmov.f32	s14, s0
 8002826:	eef0 7a60 	vmov.f32	s15, s1
 800282a:	eeb0 1a47 	vmov.f32	s2, s14
 800282e:	eef0 1a67 	vmov.f32	s3, s15
 8002832:	eeb0 0a48 	vmov.f32	s0, s16
 8002836:	eef0 0a68 	vmov.f32	s1, s17
 800283a:	f00b f8d9 	bl	800d9f0 <atan2>
 800283e:	eeb0 7a40 	vmov.f32	s14, s0
 8002842:	eef0 7a60 	vmov.f32	s15, s1
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <get_measuremets_parameters+0x9b4>)
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <get_measuremets_parameters+0x9b8>)
 8002868:	2200      	movs	r2, #0
 800286a:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <get_measuremets_parameters+0x9bc>)
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	ecbd 8b02 	vpop	{d8}
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	54442d18 	.word	0x54442d18
 8002884:	400921fb 	.word	0x400921fb
 8002888:	1a63c1f8 	.word	0x1a63c1f8
 800288c:	404ca5dc 	.word	0x404ca5dc
 8002890:	2000000c 	.word	0x2000000c
 8002894:	20000010 	.word	0x20000010
 8002898:	2000102c 	.word	0x2000102c
 800289c:	20001620 	.word	0x20001620
 80028a0:	20001026 	.word	0x20001026
 80028a4:	20001028 	.word	0x20001028
 80028a8:	20001624 	.word	0x20001624
 80028ac:	40668000 	.word	0x40668000

080028b0 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 80028ba:	783b      	ldrb	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d120      	bne.n	8002902 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f844 	bl	8002950 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 fd10 	bl	80082f4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fd1a 	bl	8007316 <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	4618      	mov	r0, r3
 80028ec:	f005 fd02 	bl	80082f4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fd0b 	bl	8007316 <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002900:	e022      	b.n	8002948 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 8002902:	783b      	ldrb	r3, [r7, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d11f      	bne.n	8002948 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f820 	bl	8002950 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	4618      	mov	r0, r3
 8002918:	f005 fcec 	bl	80082f4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fcf6 	bl	8007316 <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fcde 	bl	80082f4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fce7 	bl	8007316 <GPIO_WritePin_Afopt>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 800295a:	783b      	ldrb	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d143      	bne.n	80029e8 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	7f1a      	ldrb	r2, [r3, #28]
 8002966:	787b      	ldrb	r3, [r7, #1]
 8002968:	429a      	cmp	r2, r3
 800296a:	d018      	beq.n	800299e <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	787a      	ldrb	r2, [r7, #1]
 8002972:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	7f1b      	ldrb	r3, [r3, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f004 fcc2 	bl	8007316 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	4618      	mov	r0, r3
 800299a:	f006 f86b 	bl	8008a74 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	7f1a      	ldrb	r2, [r3, #28]
 80029a6:	787b      	ldrb	r3, [r7, #1]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d068      	beq.n	8002a7e <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	787a      	ldrb	r2, [r7, #1]
 80029b4:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	7f1b      	ldrb	r3, [r3, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f004 fc9f 	bl	8007316 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	4618      	mov	r0, r3
 80029e2:	f006 f847 	bl	8008a74 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80029e6:	e04a      	b.n	8002a7e <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 80029e8:	783b      	ldrb	r3, [r7, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d147      	bne.n	8002a7e <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	7f1a      	ldrb	r2, [r3, #28]
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11d      	bne.n	8002a36 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 80029fa:	787b      	ldrb	r3, [r7, #1]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	7f1b      	ldrb	r3, [r3, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f004 fc76 	bl	8007316 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	4618      	mov	r0, r3
 8002a32:	f006 f81f 	bl	8008a74 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	7f1a      	ldrb	r2, [r3, #28]
 8002a3e:	787b      	ldrb	r3, [r7, #1]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d01c      	beq.n	8002a7e <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	787a      	ldrb	r2, [r7, #1]
 8002a4c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	7f1b      	ldrb	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f004 fc53 	bl	8007316 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fffb 	bl	8008a74 <PWMx_Toggle>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002a90:	783b      	ldrb	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d161      	bne.n	8002b5a <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fc39 	bl	8007316 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fc31 	bl	8007316 <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	7f1a      	ldrb	r2, [r3, #28]
 8002aba:	787b      	ldrb	r3, [r7, #1]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d018      	beq.n	8002af2 <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	787a      	ldrb	r2, [r7, #1]
 8002ac6:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	7f1b      	ldrb	r3, [r3, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f004 fc18 	bl	8007316 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 ffc1 	bl	8008a74 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	7f1a      	ldrb	r2, [r3, #28]
 8002afa:	787b      	ldrb	r3, [r7, #1]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d01c      	beq.n	8002b3a <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	787a      	ldrb	r2, [r7, #1]
 8002b08:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	7f1b      	ldrb	r3, [r3, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f004 fbf5 	bl	8007316 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 ff9d 	bl	8008a74 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fbe7 	bl	8007316 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fbdf 	bl	8007316 <GPIO_WritePin_Afopt>
			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);

	}
}
 8002b58:	e068      	b.n	8002c2c <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 8002b5a:	783b      	ldrb	r3, [r7, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d165      	bne.n	8002c2c <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fbd4 	bl	8007316 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fbcc 	bl	8007316 <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	7f1a      	ldrb	r2, [r3, #28]
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11d      	bne.n	8002bc6 <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f004 fbae 	bl	8007316 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f005 ff57 	bl	8008a74 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	7f1a      	ldrb	r2, [r3, #28]
 8002bce:	787b      	ldrb	r3, [r7, #1]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d01c      	beq.n	8002c0e <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	787a      	ldrb	r2, [r7, #1]
 8002bdc:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	7f1b      	ldrb	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f004 fb8b 	bl	8007316 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f005 ff33 	bl	8008a74 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fb7d 	bl	8007316 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 fb75 	bl	8007316 <GPIO_WritePin_Afopt>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	4618      	mov	r0, r3
 8002c44:	f005 fed6 	bl	80089f4 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fb60 	bl	8007316 <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f005 fec8 	bl	80089f4 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fb51 	bl	8007316 <GPIO_WritePin_Afopt>


}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a85      	ldr	r2, [pc, #532]	; (8002ea4 <int_Config_Motor+0x228>)
 8002c8e:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a84      	ldr	r2, [pc, #528]	; (8002ea8 <int_Config_Motor+0x22c>)
 8002c96:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a83      	ldr	r2, [pc, #524]	; (8002eac <int_Config_Motor+0x230>)
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a82      	ldr	r2, [pc, #520]	; (8002eb0 <int_Config_Motor+0x234>)
 8002ca6:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM    = &handlerPWM_1;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <int_Config_Motor+0x238>)
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <int_Config_Motor+0x23c>)
 8002ce8:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <int_Config_Motor+0x240>)
 8002cfe:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <int_Config_Motor+0x244>)
 8002d06:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a66      	ldr	r2, [pc, #408]	; (8002ea8 <int_Config_Motor+0x22c>)
 8002d10:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3304      	adds	r3, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <int_Config_Motor+0x248>)
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <int_Config_Motor+0x24c>)
 8002d24:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <int_Config_Motor+0x250>)
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3304      	adds	r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3304      	adds	r3, #4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <int_Config_Motor+0x23c>)
 8002d72:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3304      	adds	r3, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <int_Config_Motor+0x240>)
 8002d8c:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002db4:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	4a45      	ldr	r2, [pc, #276]	; (8002ed0 <int_Config_Motor+0x254>)
 8002dba:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4a45      	ldr	r2, [pc, #276]	; (8002ed4 <int_Config_Motor+0x258>)
 8002dc0:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// Colocamos el punto delta


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = sNone;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	200003e8 	.word	0x200003e8
 8002ea8:	41e00000 	.word	0x41e00000
 8002eac:	2000024c 	.word	0x2000024c
 8002eb0:	20000264 	.word	0x20000264
 8002eb4:	200002f0 	.word	0x200002f0
 8002eb8:	437a0000 	.word	0x437a0000
 8002ebc:	42c80000 	.word	0x42c80000
 8002ec0:	20000414 	.word	0x20000414
 8002ec4:	20000240 	.word	0x20000240
 8002ec8:	20000258 	.word	0x20000258
 8002ecc:	20000310 	.word	0x20000310
 8002ed0:	3dcccccd 	.word	0x3dcccccd
 8002ed4:	3f4ccccd 	.word	0x3f4ccccd

08002ed8 <goTo>:
		 uint8_t *fAnglulo,
		 uint8_t *fMeasurements,
		 uint8_t *fcontrol,
		 char buff[64],
		 uint32_t distance_mm ,
		 state_dir_t operation_mode_dir){
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b090      	sub	sp, #64	; 0x40
 8002edc:	af06      	add	r7, sp, #24
 8002ede:	6178      	str	r0, [r7, #20]
 8002ee0:	6139      	str	r1, [r7, #16]
 8002ee2:	60fa      	str	r2, [r7, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t done = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8002f14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f16:	f7fd fb0d 	bl	8000534 <__aeabi_ui2d>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	460d      	mov	r5, r1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f24:	eeb0 0a47 	vmov.f32	s0, s14
 8002f28:	eef0 0a67 	vmov.f32	s1, s15
 8002f2c:	f00a fc38 	bl	800d7a0 <cos>
 8002f30:	ec53 2b10 	vmov	r2, r3, d0
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	f7fd fb76 	bl	8000628 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002f4a:	f7fd f9b7 	bl	80002bc <__adddf3>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8002f58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f5a:	f7fd faeb 	bl	8000534 <__aeabi_ui2d>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	460d      	mov	r5, r1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f68:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6c:	eef0 0a67 	vmov.f32	s1, s15
 8002f70:	f00a fcb2 	bl	800d8d8 <sin>
 8002f74:	ec53 2b10 	vmov	r2, r3, d0
 8002f78:	4620      	mov	r0, r4
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	f7fd fb54 	bl	8000628 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002f8e:	f7fd f995 	bl	80002bc <__adddf3>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 8002f9c:	68b8      	ldr	r0, [r7, #8]
 8002f9e:	f004 fe8b 	bl	8007cb8 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 8002fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fa4:	6978      	ldr	r0, [r7, #20]
 8002fa6:	f7ff fc83 	bl	80028b0 <On_motor_Straigh_Roll>

	while(!done){
 8002faa:	e049      	b.n	8003040 <goTo+0x168>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002fb8:	eeb0 1a46 	vmov.f32	s2, s12
 8002fbc:	eef0 1a66 	vmov.f32	s3, s13
 8002fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fc4:	eef0 0a67 	vmov.f32	s1, s15
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f004 ff61 	bl	8007e90 <distance_traveled>
 8002fce:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 8002fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002fd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe0:	9303      	str	r3, [sp, #12]
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	ed97 0b00 	vldr	d0, [r7]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	6939      	ldr	r1, [r7, #16]
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f000 f987 	bl	800330c <go>
		   fMeasurements,
		   fcontrol,
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

		if (!(distance_to_go < distance_mm)){
 8002ffe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003000:	f7fd fa98 	bl	8000534 <__aeabi_ui2d>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	2101      	movs	r1, #1
 800300a:	460c      	mov	r4, r1
 800300c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003010:	f7fd fd7c 	bl	8000b0c <__aeabi_dcmplt>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <goTo+0x146>
 800301a:	2300      	movs	r3, #0
 800301c:	461c      	mov	r4, r3
 800301e:	b2e3      	uxtb	r3, r4
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <goTo+0x164>
			// Paramos el proceso
			done = !done;
 800302a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Observamos si hay algun comando en espera
		fillComand();
 800303c:	f000 fa3a 	bl	80034b4 <fillComand>
	while(!done){
 8003040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0b1      	beq.n	8002fac <goTo+0xd4>

	}


	return done;
 8003048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bdb0      	pop	{r4, r5, r7, pc}

08003054 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8003062:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <PID_control+0x1cc>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <PID_control+0x1d0>)
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003076:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003228 <PID_control+0x1d4>
 800307a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800307e:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800308e:	eeb0 1a46 	vmov.f32	s2, s12
 8003092:	eef0 1a66 	vmov.f32	s3, s13
 8003096:	eeb0 0a47 	vmov.f32	s0, s14
 800309a:	eef0 0a67 	vmov.f32	s1, s15
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f004 feb2 	bl	8007e08 <distance_to_straight_line>
 80030a4:	ec51 0b10 	vmov	r0, r1, d0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <PID_control+0x1d8>)
 80030ae:	f7fd fbe5 	bl	800087c <__aeabi_ddiv>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7fd fdad 	bl	8000c18 <__aeabi_d2f>
 80030be:	4603      	mov	r3, r0
 80030c0:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 80030c2:	ed97 1a04 	vldr	s2, [r7, #16]
 80030c6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003230 <PID_control+0x1dc>
 80030ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f000 f8bc 	bl	800324c <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 80030d4:	4b57      	ldr	r3, [pc, #348]	; (8003234 <PID_control+0x1e0>)
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e4:	4b54      	ldr	r3, [pc, #336]	; (8003238 <PID_control+0x1e4>)
 80030e6:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	ed93 7a00 	vldr	s14, [r3]
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <PID_control+0x1e0>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	4b50      	ldr	r3, [pc, #320]	; (800323c <PID_control+0x1e8>)
 80030fc:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <PID_control+0x1e4>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	ed93 7a02 	vldr	s14, [r3, #8]
 8003114:	eeb0 1a47 	vmov.f32	s2, s14
 8003118:	eef0 0a67 	vmov.f32	s1, s15
 800311c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003120:	4610      	mov	r0, r2
 8003122:	f000 f893 	bl	800324c <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <PID_control+0x1e8>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3304      	adds	r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	ed93 7a02 	vldr	s14, [r3, #8]
 800313e:	eeb0 1a47 	vmov.f32	s2, s14
 8003142:	eef0 0a67 	vmov.f32	s1, s15
 8003146:	ed97 0a05 	vldr	s0, [r7, #20]
 800314a:	4610      	mov	r0, r2
 800314c:	f000 f87e 	bl	800324c <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	ed93 7a05 	vldr	s14, [r3, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316a:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3304      	adds	r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	ed93 7a05 	vldr	s14, [r3, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3304      	adds	r3, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	edd3 7a05 	vldr	s15, [r3, #20]
 800319a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003240 <PID_control+0x1ec>
 800319e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	db04      	blt.n	80031b2 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a25      	ldr	r2, [pc, #148]	; (8003244 <PID_control+0x1f0>)
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	e00e      	b.n	80031d0 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031ba:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d803      	bhi.n	80031d0 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <PID_control+0x1f4>)
 80031ce:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3304      	adds	r3, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003240 <PID_control+0x1ec>
 80031de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	db05      	blt.n	80031f4 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3304      	adds	r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <PID_control+0x1f0>)
 80031f0:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 80031f2:	e011      	b.n	8003218 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3304      	adds	r3, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80031fe:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	d900      	bls.n	800320e <PID_control+0x1ba>
}
 800320c:	e004      	b.n	8003218 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3304      	adds	r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <PID_control+0x1f4>)
 8003216:	615a      	str	r2, [r3, #20]
}
 8003218:	bf00      	nop
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	200002c4 	.word	0x200002c4
 8003224:	20000009 	.word	0x20000009
 8003228:	447a0000 	.word	0x447a0000
 800322c:	408f4000 	.word	0x408f4000
 8003230:	00000000 	.word	0x00000000
 8003234:	20001628 	.word	0x20001628
 8003238:	20001630 	.word	0x20001630
 800323c:	20001634 	.word	0x20001634
 8003240:	42700000 	.word	0x42700000
 8003244:	42700000 	.word	0x42700000
 8003248:	41b80000 	.word	0x41b80000

0800324c <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	ed87 0a02 	vstr	s0, [r7, #8]
 8003258:	edc7 0a01 	vstr	s1, [r7, #4]
 800325c:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003260:	ed97 7a01 	vldr	s14, [r7, #4]
 8003264:	edd7 7a00 	vldr	s15, [r7]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	ed93 7a04 	vldr	s14, [r3, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	edd3 7a01 	vldr	s15, [r3, #4]
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	ed93 7a02 	vldr	s14, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003292:	edd7 7a02 	vldr	s15, [r7, #8]
 8003296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800329a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80032b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b4:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032da:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 80032de:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3724      	adds	r7, #36	; 0x24
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af02      	add	r7, sp, #8
 8003312:	6178      	str	r0, [r7, #20]
 8003314:	6139      	str	r1, [r7, #16]
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	ed97 1b00 	vldr	d1, [r7]
 800332c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003454 <go+0x148>
 8003330:	6938      	ldr	r0, [r7, #16]
 8003332:	f7fe fd79 	bl	8001e28 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler,operation_mode_dir );
 8003344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003346:	68f9      	ldr	r1, [r7, #12]
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7fe fdcd 	bl	8001ee8 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d073      	beq.n	800344a <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3304      	adds	r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	ed93 7a03 	vldr	s14, [r3, #12]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	edd3 7a03 	vldr	s15, [r3, #12]
 8003374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003378:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800337c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003380:	ee16 0a90 	vmov	r0, s13
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	ed93 7b04 	vldr	d7, [r3, #16]
 8003396:	eeb0 0a47 	vmov.f32	s0, s14
 800339a:	eef0 0a67 	vmov.f32	s1, s15
 800339e:	f00a f9ff 	bl	800d7a0 <cos>
 80033a2:	ec51 0b10 	vmov	r0, r1, d0
 80033a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033aa:	f7fd f93d 	bl	8000628 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	ed93 7b04 	vldr	d7, [r3, #16]
 80033be:	eeb0 0a47 	vmov.f32	s0, s14
 80033c2:	eef0 0a67 	vmov.f32	s1, s15
 80033c6:	f00a fa87 	bl	800d8d8 <sin>
 80033ca:	ec51 0b10 	vmov	r0, r1, d0
 80033ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d2:	f7fd f929 	bl	8000628 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033ec:	f7fc ff66 	bl	80002bc <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003406:	f7fc ff59 	bl	80002bc <__adddf3>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003420:	e9cd 2300 	strd	r2, r3, [sp]
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	490b      	ldr	r1, [pc, #44]	; (8003458 <go+0x14c>)
 800342a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800342c:	f007 fb7a 	bl	800ab24 <siprintf>

		writeMsg(&handlerUSART, buff);
 8003430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003432:	480a      	ldr	r0, [pc, #40]	; (800345c <go+0x150>)
 8003434:	f006 faca 	bl	80099cc <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7ff fe08 	bl	8003054 <PID_control>

		*fcontrol = RESET;
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
	}
}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	00000000 	.word	0x00000000
 8003458:	0801054c 	.word	0x0801054c
 800345c:	20000330 	.word	0x20000330

08003460 <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6178      	str	r0, [r7, #20]
 8003468:	6139      	str	r1, [r7, #16]
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	ed97 1b00 	vldr	d1, [r7]
 8003480:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80034b0 <NOP+0x50>
 8003484:	6938      	ldr	r0, [r7, #16]
 8003486:	f7fe fccf 	bl	8001e28 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7fe fd23 	bl	8001ee8 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
	}

}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00000000 	.word	0x00000000

080034b4 <fillComand>:



void fillComand(void){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <fillComand+0x80>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d036      	beq.n	800352e <fillComand+0x7a>
//		writeChar(&handlerUSART, rxData);
		bufferReception[counterReception] = rxData;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <fillComand+0x84>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <fillComand+0x80>)
 80034c8:	7819      	ldrb	r1, [r3, #0]
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <fillComand+0x88>)
 80034cc:	5499      	strb	r1, [r3, r2]
		counterReception++;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <fillComand+0x84>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <fillComand+0x84>)
 80034d8:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <fillComand+0x80>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d10f      	bne.n	8003502 <fillComand+0x4e>
			doneTransaction = SET;
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <fillComand+0x8c>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <fillComand+0x84>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <fillComand+0x88>)
 80034f0:	2100      	movs	r1, #0
 80034f2:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <fillComand+0x84>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 80034fa:	4810      	ldr	r0, [pc, #64]	; (800353c <fillComand+0x88>)
 80034fc:	f7fe f992 	bl	8001824 <parseCommands>
 8003500:	e012      	b.n	8003528 <fillComand+0x74>

		}else if (rxData == 'z'){
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <fillComand+0x80>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b7a      	cmp	r3, #122	; 0x7a
 8003508:	d10e      	bne.n	8003528 <fillComand+0x74>

			memset(bufferReception, 0, sizeof(bufferReception));
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	2100      	movs	r1, #0
 800350e:	480b      	ldr	r0, [pc, #44]	; (800353c <fillComand+0x88>)
 8003510:	f006 fda6 	bl	800a060 <memset>
			counterReception = 0;
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <fillComand+0x84>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <fillComand+0x90>)
 800351c:	480a      	ldr	r0, [pc, #40]	; (8003548 <fillComand+0x94>)
 800351e:	f006 fa55 	bl	80099cc <writeMsg>
			rxData = '\0';
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <fillComand+0x80>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <fillComand+0x80>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
	}

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200004d6 	.word	0x200004d6
 8003538:	200004d4 	.word	0x200004d4
 800353c:	20000494 	.word	0x20000494
 8003540:	200004d5 	.word	0x200004d5
 8003544:	0801055c 	.word	0x0801055c
 8003548:	20000330 	.word	0x20000330

0800354c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <ITM_SendChar+0x48>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <ITM_SendChar+0x48>)
 800355c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003560:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <ITM_SendChar+0x4c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <ITM_SendChar+0x4c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800356e:	bf00      	nop
 8003570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f8      	beq.n	8003570 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800357e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	6013      	str	r3, [r2, #0]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000edfc 	.word	0xe000edfc
 8003598:	e0000e00 	.word	0xe0000e00

0800359c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
	return 1;
 80035a0:	2301      	movs	r3, #1
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_kill>:

int _kill(int pid, int sig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035b6:	f006 fd21 	bl	8009ffc <__errno>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2216      	movs	r2, #22
 80035be:	601a      	str	r2, [r3, #0]
	return -1;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_exit>:

void _exit (int status)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ffe7 	bl	80035ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80035de:	e7fe      	b.n	80035de <_exit+0x12>

080035e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e00a      	b.n	8003608 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035f2:	f3af 8000 	nop.w
 80035f6:	4601      	mov	r1, r0
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	60ba      	str	r2, [r7, #8]
 80035fe:	b2ca      	uxtb	r2, r1
 8003600:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3301      	adds	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	dbf0      	blt.n	80035f2 <_read+0x12>
	}

return len;
 8003610:	687b      	ldr	r3, [r7, #4]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e009      	b.n	8003640 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff89 	bl	800354c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	dbf1      	blt.n	800362c <_write+0x12>
	}
	return len;
 8003648:	687b      	ldr	r3, [r7, #4]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <_close>:

int _close(int file)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
	return -1;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800367a:	605a      	str	r2, [r3, #4]
	return 0;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_isatty>:

int _isatty(int file)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	return 1;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
	return 0;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036bc:	480d      	ldr	r0, [pc, #52]	; (80036f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80036c6:	490d      	ldr	r1, [pc, #52]	; (80036fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <LoopForever+0xe>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036dc:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <LoopForever+0x16>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036ea:	f006 fc8d 	bl	800a008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ee:	f7fd fae3 	bl	8000cb8 <main>

080036f2 <LoopForever>:

LoopForever:
    b LoopForever
 80036f2:	e7fe      	b.n	80036f2 <LoopForever>
  ldr   r0, =_estack
 80036f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003700:	08010cf8 	.word	0x08010cf8
  ldr r2, =_sbss
 8003704:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003708:	20012280 	.word	0x20012280

0800370c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800370c:	e7fe      	b.n	800370c <ADC_IRQHandler>
	...

08003710 <findShorterWay>:
int findShorterWay(char terminalGrid[52][52],
				   char Gridcopy[52][52],
				   float matrixCosts[52][52][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[100][2]){
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 800371e:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 8003722:	6020      	str	r0, [r4, #0]
 8003724:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 8003728:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 800372c:	6001      	str	r1, [r0, #0]
 800372e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003732:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003736:	600a      	str	r2, [r1, #0]
 8003738:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800373c:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003740:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8003742:	49b5      	ldr	r1, [pc, #724]	; (8003a18 <findShorterWay+0x308>)
 8003744:	48b5      	ldr	r0, [pc, #724]	; (8003a1c <findShorterWay+0x30c>)
 8003746:	f006 f941 	bl	80099cc <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 800374a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800374e:	f103 0318 	add.w	r3, r3, #24
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003760:	f102 020f 	add.w	r2, r2, #15
 8003764:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800376c:	f102 020e 	add.w	r2, r2, #14
 8003770:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003778:	f102 020d 	add.w	r2, r2, #13
 800377c:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003784:	f102 020c 	add.w	r2, r2, #12
 8003788:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003790:	f102 020b 	add.w	r2, r2, #11
 8003794:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800379c:	f102 020a 	add.w	r2, r2, #10
 80037a0:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 80037a2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037a6:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 80037aa:	4618      	mov	r0, r3
 80037ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80037b0:	461a      	mov	r2, r3
 80037b2:	2100      	movs	r1, #0
 80037b4:	f006 fc54 	bl	800a060 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80037b8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037bc:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f001 fd63 	bl	800528c <getRows>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037ce:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80037d6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037da:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	f001 fd78 	bl	80052d4 <getColums>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037ec:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80037f4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80037f8:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 80037fc:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003800:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 8003804:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003808:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f001 fce8 	bl	80051e6 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8003816:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800381a:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 800381e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003822:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003826:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800382a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003836:	6809      	ldr	r1, [r1, #0]
 8003838:	6800      	ldr	r0, [r0, #0]
 800383a:	f001 fa4b 	bl	8004cd4 <setHeuristic>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8003844:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8003846:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800384a:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 800384e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003852:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003856:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	6809      	ldr	r1, [r1, #0]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	f001 fc55 	bl	800510e <findStart>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d026      	beq.n	80038b8 <findShorterWay+0x1a8>
 800386a:	e002      	b.n	8003872 <findShorterWay+0x162>
    	return 0;
 800386c:	2300      	movs	r3, #0
 800386e:	f001 b96e 	b.w	8004b4e <findShorterWay+0x143e>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8003872:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8003874:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8003884:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8003894:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 80038a4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ac:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 80038b4:	f001 b801 	b.w	80048ba <findShorterWay+0x11aa>
    	return 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f001 b948 	b.w	8004b4e <findShorterWay+0x143e>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 80038be:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80038ce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80038de:	2300      	movs	r3, #0
 80038e0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80038e4:	f102 020e 	add.w	r2, r2, #14
 80038e8:	7013      	strb	r3, [r2, #0]
 80038ea:	e0ee      	b.n	8003aca <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 80038ec:	2300      	movs	r3, #0
 80038ee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80038f2:	f102 020d 	add.w	r2, r2, #13
 80038f6:	7013      	strb	r3, [r2, #0]
 80038f8:	e0d4      	b.n	8003aa4 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80038fa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003906:	f103 030e 	add.w	r3, r3, #14
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4413      	add	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	dd0b      	ble.n	800392a <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8003912:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800391e:	f103 030d 	add.w	r3, r3, #13
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	4413      	add	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	dc16      	bgt.n	8003958 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 800392a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800392e:	f103 030e 	add.w	r3, r3, #14
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003938:	f103 030d 	add.w	r3, r3, #13
 800393c:	7819      	ldrb	r1, [r3, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003948:	f103 0310 	add.w	r3, r3, #16
 800394c:	443b      	add	r3, r7
 800394e:	440b      	add	r3, r1
 8003950:	3b18      	subs	r3, #24
 8003952:	2230      	movs	r2, #48	; 0x30
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09a      	b.n	8003a8e <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8003958:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003964:	f103 030e 	add.w	r3, r3, #14
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4413      	add	r3, r2
 800396c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003970:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	7a12      	ldrb	r2, [r2, #8]
 8003978:	4293      	cmp	r3, r2
 800397a:	dc11      	bgt.n	80039a0 <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 800397c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003988:	f103 030d 	add.w	r3, r3, #13
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4413      	add	r3, r2
 8003990:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003994:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	7a52      	ldrb	r2, [r2, #9]
 800399c:	4293      	cmp	r3, r2
 800399e:	dd16      	ble.n	80039ce <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 80039a0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039a4:	f103 030e 	add.w	r3, r3, #14
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039ae:	f103 030d 	add.w	r3, r3, #13
 80039b2:	7819      	ldrb	r1, [r3, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80039be:	f103 0310 	add.w	r3, r3, #16
 80039c2:	443b      	add	r3, r7
 80039c4:	440b      	add	r3, r1
 80039c6:	3b18      	subs	r3, #24
 80039c8:	2230      	movs	r2, #48	; 0x30
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e05f      	b.n	8003a8e <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 80039ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039d2:	f103 030e 	add.w	r3, r3, #14
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d121      	bne.n	8003a20 <findShorterWay+0x310>
 80039dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039e0:	f103 030d 	add.w	r3, r3, #13
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11a      	bne.n	8003a20 <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 80039ea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039ee:	f103 030e 	add.w	r3, r3, #14
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039f8:	f103 030d 	add.w	r3, r3, #13
 80039fc:	7819      	ldrb	r1, [r3, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003a08:	f103 0310 	add.w	r3, r3, #16
 8003a0c:	443b      	add	r3, r7
 8003a0e:	440b      	add	r3, r1
 8003a10:	3b18      	subs	r3, #24
 8003a12:	2250      	movs	r2, #80	; 0x50
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e03a      	b.n	8003a8e <findShorterWay+0x37e>
 8003a18:	08010578 	.word	0x08010578
 8003a1c:	20001638 	.word	0x20001638
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8003a20:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a2c:	f103 030e 	add.w	r3, r3, #14
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4413      	add	r3, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	2334      	movs	r3, #52	; 0x34
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	3b34      	subs	r3, #52	; 0x34
 8003a3e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003a42:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	18d0      	adds	r0, r2, r3
 8003a4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a56:	f103 030d 	add.w	r3, r3, #13
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a64:	f102 020e 	add.w	r2, r2, #14
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 8003a6e:	f101 010d 	add.w	r1, r1, #13
 8003a72:	7809      	ldrb	r1, [r1, #0]
 8003a74:	5cc0      	ldrb	r0, [r0, r3]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003a80:	f103 0310 	add.w	r3, r3, #16
 8003a84:	443b      	add	r3, r7
 8003a86:	440b      	add	r3, r1
 8003a88:	3b18      	subs	r3, #24
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8003a8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a92:	f103 030d 	add.w	r3, r3, #13
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a9e:	f102 020d 	add.w	r2, r2, #13
 8003aa2:	7013      	strb	r3, [r2, #0]
 8003aa4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003aa8:	f103 030d 	add.w	r3, r3, #13
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	f67f af23 	bls.w	80038fa <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 8003ab4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ab8:	f103 030e 	add.w	r3, r3, #14
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ac4:	f102 020e 	add.w	r2, r2, #14
 8003ac8:	7013      	strb	r3, [r2, #0]
 8003aca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ace:	f103 030e 	add.w	r3, r3, #14
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	f67f af09 	bls.w	80038ec <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8003ada:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ade:	f103 030a 	add.w	r3, r3, #10
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	49c9      	ldr	r1, [pc, #804]	; (8003e0c <findShorterWay+0x6fc>)
 8003ae8:	48c9      	ldr	r0, [pc, #804]	; (8003e10 <findShorterWay+0x700>)
 8003aea:	f007 f81b 	bl	800ab24 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 8003aee:	49c8      	ldr	r1, [pc, #800]	; (8003e10 <findShorterWay+0x700>)
 8003af0:	48c8      	ldr	r0, [pc, #800]	; (8003e14 <findShorterWay+0x704>)
 8003af2:	f005 ff6b 	bl	80099cc <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 8003af6:	2300      	movs	r3, #0
 8003af8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003afc:	f102 020e 	add.w	r2, r2, #14
 8003b00:	7013      	strb	r3, [r2, #0]
 8003b02:	e040      	b.n	8003b86 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 8003b04:	2300      	movs	r3, #0
 8003b06:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b0a:	f102 020d 	add.w	r2, r2, #13
 8003b0e:	7013      	strb	r3, [r2, #0]
 8003b10:	e023      	b.n	8003b5a <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 8003b12:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b16:	f103 030e 	add.w	r3, r3, #14
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b20:	f103 030d 	add.w	r3, r3, #13
 8003b24:	7819      	ldrb	r1, [r3, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003b30:	f103 0310 	add.w	r3, r3, #16
 8003b34:	443b      	add	r3, r7
 8003b36:	440b      	add	r3, r1
 8003b38:	3b18      	subs	r3, #24
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	48b5      	ldr	r0, [pc, #724]	; (8003e14 <findShorterWay+0x704>)
 8003b40:	f005 ff2c 	bl	800999c <writeChar>
			for (j = 0; j < 3; j++){
 8003b44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b48:	f103 030d 	add.w	r3, r3, #13
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b54:	f102 020d 	add.w	r2, r2, #13
 8003b58:	7013      	strb	r3, [r2, #0]
 8003b5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b5e:	f103 030d 	add.w	r3, r3, #13
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d9d4      	bls.n	8003b12 <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 8003b68:	210d      	movs	r1, #13
 8003b6a:	48aa      	ldr	r0, [pc, #680]	; (8003e14 <findShorterWay+0x704>)
 8003b6c:	f005 ff16 	bl	800999c <writeChar>
    	for(i = 0; i < 3; i++){
 8003b70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b74:	f103 030e 	add.w	r3, r3, #14
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b80:	f102 020e 	add.w	r2, r2, #14
 8003b84:	7013      	strb	r3, [r2, #0]
 8003b86:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b8a:	f103 030e 	add.w	r3, r3, #14
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d9b7      	bls.n	8003b04 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8003b94:	210d      	movs	r1, #13
 8003b96:	489f      	ldr	r0, [pc, #636]	; (8003e14 <findShorterWay+0x704>)
 8003b98:	f005 ff00 	bl	800999c <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ba2:	f102 0209 	add.w	r2, r2, #9
 8003ba6:	7013      	strb	r3, [r2, #0]
 8003ba8:	e01c      	b.n	8003be4 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8003baa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003bae:	f103 0309 	add.w	r3, r3, #9
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2234      	movs	r2, #52	; 0x34
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003bbe:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4892      	ldr	r0, [pc, #584]	; (8003e14 <findShorterWay+0x704>)
 8003bca:	f005 feff 	bl	80099cc <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003bce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003bd2:	f103 0309 	add.w	r3, r3, #9
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003bde:	f102 0209 	add.w	r2, r2, #9
 8003be2:	7013      	strb	r3, [r2, #0]
 8003be4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003be8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	7a1b      	ldrb	r3, [r3, #8]
 8003bf0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003bf4:	f102 0209 	add.w	r2, r2, #9
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3d5      	bcc.n	8003baa <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 8003bfe:	210d      	movs	r1, #13
 8003c00:	4884      	ldr	r0, [pc, #528]	; (8003e14 <findShorterWay+0x704>)
 8003c02:	f005 fecb 	bl	800999c <writeChar>


    	for(i = 0; i < 3; i++){
 8003c06:	2300      	movs	r3, #0
 8003c08:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003c0c:	f102 020e 	add.w	r2, r2, #14
 8003c10:	7013      	strb	r3, [r2, #0]
 8003c12:	e33c      	b.n	800428e <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8003c14:	2300      	movs	r3, #0
 8003c16:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003c1a:	f102 020d 	add.w	r2, r2, #13
 8003c1e:	7013      	strb	r3, [r2, #0]
 8003c20:	e319      	b.n	8004256 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 8003c22:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c26:	f103 030e 	add.w	r3, r3, #14
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c30:	f103 030d 	add.w	r3, r3, #13
 8003c34:	7819      	ldrb	r1, [r3, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003c40:	f103 0310 	add.w	r3, r3, #16
 8003c44:	443b      	add	r3, r7
 8003c46:	440b      	add	r3, r1
 8003c48:	3b18      	subs	r3, #24
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b73      	cmp	r3, #115	; 0x73
 8003c4e:	d075      	beq.n	8003d3c <findShorterWay+0x62c>
 8003c50:	2b73      	cmp	r3, #115	; 0x73
 8003c52:	f300 82eb 	bgt.w	800422c <findShorterWay+0xb1c>
 8003c56:	2b50      	cmp	r3, #80	; 0x50
 8003c58:	dc66      	bgt.n	8003d28 <findShorterWay+0x618>
 8003c5a:	2b23      	cmp	r3, #35	; 0x23
 8003c5c:	f2c0 82e6 	blt.w	800422c <findShorterWay+0xb1c>
 8003c60:	3b23      	subs	r3, #35	; 0x23
 8003c62:	2b2d      	cmp	r3, #45	; 0x2d
 8003c64:	f200 82e2 	bhi.w	800422c <findShorterWay+0xb1c>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <findShorterWay+0x560>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003d31 	.word	0x08003d31
 8003c74:	0800422d 	.word	0x0800422d
 8003c78:	0800422d 	.word	0x0800422d
 8003c7c:	0800422d 	.word	0x0800422d
 8003c80:	0800422d 	.word	0x0800422d
 8003c84:	0800422d 	.word	0x0800422d
 8003c88:	0800422d 	.word	0x0800422d
 8003c8c:	08003f3f 	.word	0x08003f3f
 8003c90:	0800422d 	.word	0x0800422d
 8003c94:	0800422d 	.word	0x0800422d
 8003c98:	0800422d 	.word	0x0800422d
 8003c9c:	0800422d 	.word	0x0800422d
 8003ca0:	0800422d 	.word	0x0800422d
 8003ca4:	08003d39 	.word	0x08003d39
 8003ca8:	0800422d 	.word	0x0800422d
 8003cac:	0800422d 	.word	0x0800422d
 8003cb0:	0800422d 	.word	0x0800422d
 8003cb4:	0800422d 	.word	0x0800422d
 8003cb8:	0800422d 	.word	0x0800422d
 8003cbc:	0800422d 	.word	0x0800422d
 8003cc0:	0800422d 	.word	0x0800422d
 8003cc4:	0800422d 	.word	0x0800422d
 8003cc8:	0800422d 	.word	0x0800422d
 8003ccc:	0800422d 	.word	0x0800422d
 8003cd0:	0800422d 	.word	0x0800422d
 8003cd4:	0800422d 	.word	0x0800422d
 8003cd8:	0800422d 	.word	0x0800422d
 8003cdc:	0800422d 	.word	0x0800422d
 8003ce0:	0800422d 	.word	0x0800422d
 8003ce4:	0800422d 	.word	0x0800422d
 8003ce8:	0800422d 	.word	0x0800422d
 8003cec:	0800422d 	.word	0x0800422d
 8003cf0:	0800422d 	.word	0x0800422d
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	0800422d 	.word	0x0800422d
 8003cfc:	0800422d 	.word	0x0800422d
 8003d00:	0800422d 	.word	0x0800422d
 8003d04:	0800422d 	.word	0x0800422d
 8003d08:	0800422d 	.word	0x0800422d
 8003d0c:	0800422d 	.word	0x0800422d
 8003d10:	0800422d 	.word	0x0800422d
 8003d14:	0800422d 	.word	0x0800422d
 8003d18:	0800422d 	.word	0x0800422d
 8003d1c:	0800422d 	.word	0x0800422d
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08003d41 	.word	0x08003d41
 8003d28:	2b65      	cmp	r3, #101	; 0x65
 8003d2a:	f000 8256 	beq.w	80041da <findShorterWay+0xaca>
 8003d2e:	e27d      	b.n	800422c <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8003d30:	bf00      	nop
						break;
 8003d32:	e27e      	b.n	8004232 <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003d34:	bf00      	nop
						break;
 8003d36:	e27c      	b.n	8004232 <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003d38:	bf00      	nop
						break;
 8003d3a:	e27a      	b.n	8004232 <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8003d3c:	bf00      	nop
						break;
 8003d3e:	e278      	b.n	8004232 <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8003d40:	bf00      	nop
						break;
 8003d42:	e276      	b.n	8004232 <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8003d44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d48:	f103 030e 	add.w	r3, r3, #14
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d52:	f102 0210 	add.w	r2, r2, #16
 8003d56:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003d58:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d5c:	f103 030d 	add.w	r3, r3, #13
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d66:	f102 0214 	add.w	r2, r2, #20
 8003d6a:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8003d6c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003d70:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003d74:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d78:	f102 0210 	add.w	r2, r2, #16
 8003d7c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003d80:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f001 f950 	bl	8005032 <setFcost>
 8003d92:	eef0 7a40 	vmov.f32	s15, s0
 8003d96:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8003da0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003daa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003db6:	f103 030e 	add.w	r3, r3, #14
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003dcc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003dd0:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	18d1      	adds	r1, r2, r3
 8003dd8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003de4:	f103 030d 	add.w	r3, r3, #13
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	3304      	adds	r3, #4
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	db07      	blt.n	8003e18 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8003e08:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8003e0a:	e212      	b.n	8004232 <findShorterWay+0xb22>
 8003e0c:	080105ac 	.word	0x080105ac
 8003e10:	200016e4 	.word	0x200016e4
 8003e14:	20001638 	.word	0x20001638
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003e18:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003e1c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003e20:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003e24:	f102 0210 	add.w	r2, r2, #16
 8003e28:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003e2c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003e36:	6809      	ldr	r1, [r1, #0]
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	f000 feed 	bl	8004c18 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 8003e3e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003e42:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003e46:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003e4a:	f102 0210 	add.w	r2, r2, #16
 8003e4e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003e52:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003e5c:	6809      	ldr	r1, [r1, #0]
 8003e5e:	6800      	ldr	r0, [r0, #0]
 8003e60:	f000 ff08 	bl	8004c74 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8003e64:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003e68:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003e6c:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003e70:	f101 0110 	add.w	r1, r1, #16
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f000 fe74 	bl	8004b68 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003e80:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e8c:	f103 030e 	add.w	r3, r3, #14
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003ea2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ea6:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	18d0      	adds	r0, r2, r3
 8003eae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003eba:	f103 030d 	add.w	r3, r3, #13
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8003ec4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ed0:	f103 030e 	add.w	r3, r3, #14
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003ee6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003eea:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003eee:	6809      	ldr	r1, [r1, #0]
 8003ef0:	18cc      	adds	r4, r1, r3
 8003ef2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003efe:	f103 030d 	add.w	r3, r3, #13
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	440b      	add	r3, r1
 8003f06:	1e59      	subs	r1, r3, #1
 8003f08:	460b      	mov	r3, r1
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	440b      	add	r3, r1
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4423      	add	r3, r4
 8003f12:	3314      	adds	r3, #20
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f1c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4403      	add	r3, r0
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8003f2e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003f32:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8003f36:	0123      	lsls	r3, r4, #4
 8003f38:	440b      	add	r3, r1
 8003f3a:	601a      	str	r2, [r3, #0]
						break;
 8003f3c:	e179      	b.n	8004232 <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8003f3e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f42:	f103 030e 	add.w	r3, r3, #14
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003f4c:	f102 0210 	add.w	r2, r2, #16
 8003f50:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003f52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f56:	f103 030d 	add.w	r3, r3, #13
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003f60:	f102 0214 	add.w	r2, r2, #20
 8003f64:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003f66:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003f6a:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003f6e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003f72:	f102 0210 	add.w	r2, r2, #16
 8003f76:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003f7a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003f84:	6809      	ldr	r1, [r1, #0]
 8003f86:	6800      	ldr	r0, [r0, #0]
 8003f88:	f000 fe46 	bl	8004c18 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8003f8c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003f90:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003f94:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003f98:	f102 0210 	add.w	r2, r2, #16
 8003f9c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003fa0:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003faa:	6809      	ldr	r1, [r1, #0]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	f000 fe61 	bl	8004c74 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8003fb2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003fb6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003fba:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003fbe:	f101 0110 	add.w	r1, r1, #16
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	f000 fdcd 	bl	8004b68 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8003fce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fda:	f103 030e 	add.w	r3, r3, #14
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2334      	movs	r3, #52	; 0x34
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	3b34      	subs	r3, #52	; 0x34
 8003fec:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ff0:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68d9      	ldr	r1, [r3, #12]
 8004000:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004004:	f103 030d 	add.w	r3, r3, #13
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	440b      	add	r3, r1
 800400c:	3b01      	subs	r3, #1
 800400e:	214f      	movs	r1, #79	; 0x4f
 8004010:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8004012:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800401e:	f103 030e 	add.w	r3, r3, #14
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4413      	add	r3, r2
 8004026:	461a      	mov	r2, r3
 8004028:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004034:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004038:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	18d1      	adds	r1, r2, r3
 8004040:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800404c:	f103 030d 	add.w	r3, r3, #13
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	4413      	add	r3, r2
 8004054:	1e5a      	subs	r2, r3, #1
 8004056:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800405a:	f103 030b 	add.w	r3, r3, #11
 800405e:	7818      	ldrb	r0, [r3, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3304      	adds	r3, #4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004072:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8004076:	0103      	lsls	r3, r0, #4
 8004078:	440b      	add	r3, r1
 800407a:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 800407c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004088:	f103 030e 	add.w	r3, r3, #14
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	4413      	add	r3, r2
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800409e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80040a2:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	18d1      	adds	r1, r2, r3
 80040aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040b6:	f103 030d 	add.w	r3, r3, #13
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040c4:	f103 030b 	add.w	r3, r3, #11
 80040c8:	7818      	ldrb	r0, [r3, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	3308      	adds	r3, #8
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80040dc:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 80040e0:	0103      	lsls	r3, r0, #4
 80040e2:	440b      	add	r3, r1
 80040e4:	3304      	adds	r3, #4
 80040e6:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 80040e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040f4:	f103 030e 	add.w	r3, r3, #14
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	4413      	add	r3, r2
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004102:	f103 030b 	add.w	r3, r3, #11
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	ee07 2a90 	vmov	s15, r2
 800410c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004110:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004114:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	4413      	add	r3, r2
 800411c:	3308      	adds	r3, #8
 800411e:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8004122:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800412e:	f103 030d 	add.w	r3, r3, #13
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	4413      	add	r3, r2
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800413c:	f103 030b 	add.w	r3, r3, #11
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	ee07 2a90 	vmov	s15, r2
 8004146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800414a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800414e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	330c      	adds	r3, #12
 8004158:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 800415c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004168:	f103 030e 	add.w	r3, r3, #14
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	4413      	add	r3, r2
 8004170:	461a      	mov	r2, r3
 8004172:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800417e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004182:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	18d1      	adds	r1, r2, r3
 800418a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004196:	f103 030d 	add.w	r3, r3, #13
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4413      	add	r3, r2
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041a4:	f103 030b 	add.w	r3, r3, #11
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	3314      	adds	r3, #20
 80041be:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 80041c2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041c6:	f103 030b 	add.w	r3, r3, #11
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	3301      	adds	r3, #1
 80041ce:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80041d2:	f102 020b 	add.w	r2, r2, #11
 80041d6:	7013      	strb	r3, [r2, #0]

						break;
 80041d8:	e02b      	b.n	8004232 <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 80041da:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041de:	f103 030e 	add.w	r3, r3, #14
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80041e8:	f102 0210 	add.w	r2, r2, #16
 80041ec:	6013      	str	r3, [r2, #0]
						position[1] = j;
 80041ee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041f2:	f103 030d 	add.w	r3, r3, #13
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80041fc:	f102 0214 	add.w	r2, r2, #20
 8004200:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8004202:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004206:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800420a:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800420e:	f101 0110 	add.w	r1, r1, #16
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	f000 fca5 	bl	8004b68 <updateParent>
						shorterWayFound = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004224:	f102 020f 	add.w	r2, r2, #15
 8004228:	7013      	strb	r3, [r2, #0]
						break;
 800422a:	e002      	b.n	8004232 <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 800422c:	2300      	movs	r3, #0
 800422e:	f000 bc8e 	b.w	8004b4e <findShorterWay+0x143e>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8004232:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004236:	f103 030f 	add.w	r3, r3, #15
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 8004240:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004244:	f103 030d 	add.w	r3, r3, #13
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004250:	f102 020d 	add.w	r2, r2, #13
 8004254:	7013      	strb	r3, [r2, #0]
 8004256:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800425a:	f103 030d 	add.w	r3, r3, #13
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	f67f acde 	bls.w	8003c22 <findShorterWay+0x512>
 8004266:	e000      	b.n	800426a <findShorterWay+0xb5a>
					break;
 8004268:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 800426a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800426e:	f103 030f 	add.w	r3, r3, #15
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8004278:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800427c:	f103 030e 	add.w	r3, r3, #14
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004288:	f102 020e 	add.w	r2, r2, #14
 800428c:	7013      	strb	r3, [r2, #0]
 800428e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004292:	f103 030e 	add.w	r3, r3, #14
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b02      	cmp	r3, #2
 800429a:	f67f acbb 	bls.w	8003c14 <findShorterWay+0x504>
 800429e:	e000      	b.n	80042a2 <findShorterWay+0xb92>
				break;
 80042a0:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 80042a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042a6:	f103 030f 	add.w	r3, r3, #15
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 8272 	bne.w	8004796 <findShorterWay+0x1086>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 80042b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042b6:	f103 030b 	add.w	r3, r3, #11
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4619      	mov	r1, r3
 80042c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	f001 f81a 	bl	8005300 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 80042cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 812c 	beq.w	8004534 <findShorterWay+0xe24>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80042dc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80042ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80042fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	461a      	mov	r2, r3
 8004306:	2334      	movs	r3, #52	; 0x34
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004310:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	441a      	add	r2, r3
 8004318:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	2b73      	cmp	r3, #115	; 0x73
 8004324:	d101      	bne.n	800432a <findShorterWay+0xc1a>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8004326:	bf00      	nop
 8004328:	e013      	b.n	8004352 <findShorterWay+0xc42>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 800432a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	461a      	mov	r2, r3
 8004334:	2334      	movs	r3, #52	; 0x34
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800433e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	441a      	add	r2, r3
 8004346:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2144      	movs	r1, #68	; 0x44
 8004350:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8004352:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800435e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	3308      	adds	r3, #8
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004370:	ee17 2a90 	vmov	r2, s15
 8004374:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 800437c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004388:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4413      	add	r3, r2
 8004390:	330c      	adds	r3, #12
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800439a:	ee17 2a90 	vmov	r2, s15
 800439e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80043a6:	2300      	movs	r3, #0
 80043a8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043ac:	f102 020e 	add.w	r2, r2, #14
 80043b0:	7013      	strb	r3, [r2, #0]
 80043b2:	e01e      	b.n	80043f2 <findShorterWay+0xce2>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 80043b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043c0:	f103 030e 	add.w	r3, r3, #14
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043ca:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80043ce:	0089      	lsls	r1, r1, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80043dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043e0:	f103 030e 	add.w	r3, r3, #14
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	3301      	adds	r3, #1
 80043e8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043ec:	f102 020e 	add.w	r2, r2, #14
 80043f0:	7013      	strb	r3, [r2, #0]
 80043f2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043f6:	f103 030e 	add.w	r3, r3, #14
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d9d9      	bls.n	80043b4 <findShorterWay+0xca4>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8004400:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	b2db      	uxtb	r3, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004410:	f102 020e 	add.w	r2, r2, #14
 8004414:	7013      	strb	r3, [r2, #0]
 8004416:	e05f      	b.n	80044d8 <findShorterWay+0xdc8>
					for (j = 0 ; j < 4 ; j++){
 8004418:	2300      	movs	r3, #0
 800441a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800441e:	f102 020d 	add.w	r2, r2, #13
 8004422:	7013      	strb	r3, [r2, #0]
 8004424:	e046      	b.n	80044b4 <findShorterWay+0xda4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8004426:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800442a:	f103 030e 	add.w	r3, r3, #14
 800442e:	781c      	ldrb	r4, [r3, #0]
 8004430:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004434:	f103 030d 	add.w	r3, r3, #13
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800443e:	f103 030e 	add.w	r3, r3, #14
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800444a:	f103 030d 	add.w	r3, r3, #13
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004454:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004458:	00a4      	lsls	r4, r4, #2
 800445a:	4422      	add	r2, r4
 800445c:	0092      	lsls	r2, r2, #2
 800445e:	440a      	add	r2, r1
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004466:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 800446a:	0080      	lsls	r0, r0, #2
 800446c:	4403      	add	r3, r0
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8004474:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004478:	f103 030e 	add.w	r3, r3, #14
 800447c:	7819      	ldrb	r1, [r3, #0]
 800447e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004482:	f103 030d 	add.w	r3, r3, #13
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800448c:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004490:	0089      	lsls	r1, r1, #2
 8004492:	440b      	add	r3, r1
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 800449e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044a2:	f103 030d 	add.w	r3, r3, #13
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80044ae:	f102 020d 	add.w	r2, r2, #13
 80044b2:	7013      	strb	r3, [r2, #0]
 80044b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044b8:	f103 030d 	add.w	r3, r3, #13
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d9b1      	bls.n	8004426 <findShorterWay+0xd16>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 80044c2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044c6:	f103 030e 	add.w	r3, r3, #14
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80044d2:	f102 020e 	add.w	r2, r2, #14
 80044d6:	7013      	strb	r3, [r2, #0]
 80044d8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044dc:	f103 030e 	add.w	r3, r3, #14
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044e6:	f103 030b 	add.w	r3, r3, #11
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d393      	bcc.n	8004418 <findShorterWay+0xd08>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80044f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044f4:	f103 030b 	add.w	r3, r3, #11
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004500:	f102 020b 	add.w	r2, r2, #11
 8004504:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004506:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004516:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8004526:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004532:	e124      	b.n	800477e <findShorterWay+0x106e>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8004534:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8004544:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8004554:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	461a      	mov	r2, r3
 800455e:	2334      	movs	r3, #52	; 0x34
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004568:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	441a      	add	r2, r3
 8004570:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	2b73      	cmp	r3, #115	; 0x73
 800457c:	d101      	bne.n	8004582 <findShorterWay+0xe72>
					// Dejamos el char de start tal cual como esta
					__NOP();
 800457e:	bf00      	nop
 8004580:	e013      	b.n	80045aa <findShorterWay+0xe9a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8004582:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	461a      	mov	r2, r3
 800458c:	2334      	movs	r3, #52	; 0x34
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004596:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	441a      	add	r2, r3
 800459e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2144      	movs	r1, #68	; 0x44
 80045a8:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 80045aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80045b6:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	3308      	adds	r3, #8
 80045c0:	edd3 7a00 	vldr	s15, [r3]
 80045c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c8:	ee17 2a90 	vmov	r2, s15
 80045cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 80045d4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80045e0:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	330c      	adds	r3, #12
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f2:	ee17 2a90 	vmov	r2, s15
 80045f6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80045fe:	2300      	movs	r3, #0
 8004600:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004604:	f102 020e 	add.w	r2, r2, #14
 8004608:	7013      	strb	r3, [r2, #0]
 800460a:	e01e      	b.n	800464a <findShorterWay+0xf3a>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 800460c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004614:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004618:	f103 030e 	add.w	r3, r3, #14
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004622:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004626:	0089      	lsls	r1, r1, #2
 8004628:	440b      	add	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8004634:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004638:	f103 030e 	add.w	r3, r3, #14
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004644:	f102 020e 	add.w	r2, r2, #14
 8004648:	7013      	strb	r3, [r2, #0]
 800464a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800464e:	f103 030e 	add.w	r3, r3, #14
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d9d9      	bls.n	800460c <findShorterWay+0xefc>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004658:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3301      	adds	r3, #1
 8004664:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004668:	f102 020e 	add.w	r2, r2, #14
 800466c:	7013      	strb	r3, [r2, #0]
 800466e:	e05f      	b.n	8004730 <findShorterWay+0x1020>
					for (j = 0 ; j < 4 ; j++){
 8004670:	2300      	movs	r3, #0
 8004672:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004676:	f102 020d 	add.w	r2, r2, #13
 800467a:	7013      	strb	r3, [r2, #0]
 800467c:	e046      	b.n	800470c <findShorterWay+0xffc>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 800467e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004682:	f103 030e 	add.w	r3, r3, #14
 8004686:	781c      	ldrb	r4, [r3, #0]
 8004688:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800468c:	f103 030d 	add.w	r3, r3, #13
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004696:	f103 030e 	add.w	r3, r3, #14
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	1e58      	subs	r0, r3, #1
 800469e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046a2:	f103 030d 	add.w	r3, r3, #13
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80046ac:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80046b0:	00a4      	lsls	r4, r4, #2
 80046b2:	4422      	add	r2, r4
 80046b4:	0092      	lsls	r2, r2, #2
 80046b6:	440a      	add	r2, r1
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80046be:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80046c2:	0080      	lsls	r0, r0, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80046cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046d0:	f103 030e 	add.w	r3, r3, #14
 80046d4:	7819      	ldrb	r1, [r3, #0]
 80046d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046da:	f103 030d 	add.w	r3, r3, #13
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80046e4:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80046e8:	0089      	lsls	r1, r1, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80046f6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046fa:	f103 030d 	add.w	r3, r3, #13
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004706:	f102 020d 	add.w	r2, r2, #13
 800470a:	7013      	strb	r3, [r2, #0]
 800470c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004710:	f103 030d 	add.w	r3, r3, #13
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d9b1      	bls.n	800467e <findShorterWay+0xf6e>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 800471a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800471e:	f103 030e 	add.w	r3, r3, #14
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800472a:	f102 020e 	add.w	r2, r2, #14
 800472e:	7013      	strb	r3, [r2, #0]
 8004730:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004734:	f103 030e 	add.w	r3, r3, #14
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800473e:	f103 030b 	add.w	r3, r3, #11
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d393      	bcc.n	8004670 <findShorterWay+0xf60>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8004748:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800474c:	f103 030b 	add.w	r3, r3, #11
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004758:	f102 020b 	add.w	r2, r2, #11
 800475c:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 800475e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 800476e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 800477e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004782:	f103 030a 	add.w	r3, r3, #10
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800478e:	f102 020a 	add.w	r2, r2, #10
 8004792:	7013      	strb	r3, [r2, #0]
 8004794:	e091      	b.n	80048ba <findShorterWay+0x11aa>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8004796:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047a2:	f102 020e 	add.w	r2, r2, #14
 80047a6:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 80047a8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047b4:	f102 020d 	add.w	r2, r2, #13
 80047b8:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 80047ba:	e068      	b.n	800488e <findShorterWay+0x117e>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 80047bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047c0:	f103 030e 	add.w	r3, r3, #14
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80047d2:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	18d1      	adds	r1, r2, r3
 80047da:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047de:	f103 030d 	add.w	r3, r3, #13
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	330c      	adds	r3, #12
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f8:	ee17 3a90 	vmov	r3, s15
 80047fc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004800:	f102 0210 	add.w	r2, r2, #16
 8004804:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 8004806:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800480a:	f103 030e 	add.w	r3, r3, #14
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800481c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	18d1      	adds	r1, r2, r3
 8004824:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004828:	f103 030d 	add.w	r3, r3, #13
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	3310      	adds	r3, #16
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004842:	ee17 3a90 	vmov	r3, s15
 8004846:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800484a:	f102 0214 	add.w	r2, r2, #20
 800484e:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 8004850:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004854:	f103 0310 	add.w	r3, r3, #16
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800485e:	f102 020e 	add.w	r2, r2, #14
 8004862:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8004864:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004868:	f103 0314 	add.w	r3, r3, #20
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004872:	f102 020d 	add.w	r2, r2, #13
 8004876:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8004878:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800487c:	f103 030c 	add.w	r3, r3, #12
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004888:	f102 020c 	add.w	r2, r2, #12
 800488c:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 800488e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004892:	f103 030e 	add.w	r3, r3, #14
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2234      	movs	r2, #52	; 0x34
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80048a2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	441a      	add	r2, r3
 80048aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048ae:	f103 030d 	add.w	r3, r3, #13
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	2b73      	cmp	r3, #115	; 0x73
 80048b8:	d180      	bne.n	80047bc <findShorterWay+0x10ac>
    while(!shorterWayFound){
 80048ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048be:	f103 030f 	add.w	r3, r3, #15
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f43e affa 	beq.w	80038be <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 80048ca:	49a4      	ldr	r1, [pc, #656]	; (8004b5c <findShorterWay+0x144c>)
 80048cc:	48a4      	ldr	r0, [pc, #656]	; (8004b60 <findShorterWay+0x1450>)
 80048ce:	f005 f87d 	bl	80099cc <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 80048d2:	210d      	movs	r1, #13
 80048d4:	48a2      	ldr	r0, [pc, #648]	; (8004b60 <findShorterWay+0x1450>)
 80048d6:	f005 f861 	bl	800999c <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 80048da:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048de:	f103 030c 	add.w	r3, r3, #12
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80048ec:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 80048f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004900:	f102 020e 	add.w	r2, r2, #14
 8004904:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 8004906:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004912:	f102 020d 	add.w	r2, r2, #13
 8004916:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004918:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800491c:	f103 030c 	add.w	r3, r3, #12
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004926:	f102 0204 	add.w	r2, r2, #4
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e0d1      	b.n	8004ad2 <findShorterWay+0x13c2>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 800492e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004932:	f103 030e 	add.w	r3, r3, #14
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2234      	movs	r2, #52	; 0x34
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004942:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	441a      	add	r2, r3
 800494a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800494e:	f103 030d 	add.w	r3, r3, #13
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	2b65      	cmp	r3, #101	; 0x65
 8004958:	d101      	bne.n	800495e <findShorterWay+0x124e>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 800495a:	bf00      	nop
 800495c:	e02c      	b.n	80049b8 <findShorterWay+0x12a8>
    	}else if (Gridcopy[i][j] == 's'){
 800495e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004962:	f103 030e 	add.w	r3, r3, #14
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2234      	movs	r2, #52	; 0x34
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004972:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	441a      	add	r2, r3
 800497a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800497e:	f103 030d 	add.w	r3, r3, #13
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	2b73      	cmp	r3, #115	; 0x73
 8004988:	d101      	bne.n	800498e <findShorterWay+0x127e>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 800498a:	bf00      	nop
 800498c:	e014      	b.n	80049b8 <findShorterWay+0x12a8>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 800498e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004992:	f103 030e 	add.w	r3, r3, #14
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2234      	movs	r2, #52	; 0x34
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80049a2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	441a      	add	r2, r3
 80049aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049ae:	f103 030d 	add.w	r3, r3, #13
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2149      	movs	r1, #73	; 0x49
 80049b6:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 80049b8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049bc:	f103 0304 	add.w	r3, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80049c8:	f102 0204 	add.w	r2, r2, #4
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80049d4:	f102 020e 	add.w	r2, r2, #14
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 80049dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049e0:	f103 0304 	add.w	r3, r3, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80049ec:	f102 0204 	add.w	r2, r2, #4
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80049f8:	f102 020d 	add.w	r2, r2, #13
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 8004a00:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a04:	f103 030e 	add.w	r3, r3, #14
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004a16:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	18d1      	adds	r1, r2, r3
 8004a1e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a22:	f103 030d 	add.w	r3, r3, #13
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	330c      	adds	r3, #12
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3c:	ee17 3a90 	vmov	r3, s15
 8004a40:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004a44:	f102 0210 	add.w	r2, r2, #16
 8004a48:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 8004a4a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a4e:	f103 030e 	add.w	r3, r3, #14
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004a60:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	18d1      	adds	r1, r2, r3
 8004a68:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a6c:	f103 030d 	add.w	r3, r3, #13
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4413      	add	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	edd3 7a00 	vldr	s15, [r3]
 8004a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a86:	ee17 3a90 	vmov	r3, s15
 8004a8a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004a8e:	f102 0214 	add.w	r2, r2, #20
 8004a92:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 8004a94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004a98:	f103 0310 	add.w	r3, r3, #16
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004aa2:	f102 020e 	add.w	r2, r2, #14
 8004aa6:	7013      	strb	r3, [r2, #0]
		j = position[1];
 8004aa8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004aac:	f103 0314 	add.w	r3, r3, #20
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ab6:	f102 020d 	add.w	r2, r2, #13
 8004aba:	7013      	strb	r3, [r2, #0]
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004abc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ac0:	f103 0304 	add.w	r3, r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004acc:	f102 0204 	add.w	r2, r2, #4
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ad6:	f103 0304 	add.w	r3, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f6bf af26 	bge.w	800492e <findShorterWay+0x121e>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ae8:	f102 0203 	add.w	r2, r2, #3
 8004aec:	7013      	strb	r3, [r2, #0]
 8004aee:	e01c      	b.n	8004b2a <findShorterWay+0x141a>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8004af0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004af4:	f103 0303 	add.w	r3, r3, #3
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2234      	movs	r2, #52	; 0x34
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004b04:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4814      	ldr	r0, [pc, #80]	; (8004b60 <findShorterWay+0x1450>)
 8004b10:	f004 ff5c 	bl	80099cc <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004b14:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b18:	f103 0303 	add.w	r3, r3, #3
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b24:	f102 0203 	add.w	r2, r2, #3
 8004b28:	7013      	strb	r3, [r2, #0]
 8004b2a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004b2e:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	7a1b      	ldrb	r3, [r3, #8]
 8004b36:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b3a:	f102 0203 	add.w	r2, r2, #3
 8004b3e:	7812      	ldrb	r2, [r2, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3d5      	bcc.n	8004af0 <findShorterWay+0x13e0>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 8004b44:	4907      	ldr	r1, [pc, #28]	; (8004b64 <findShorterWay+0x1454>)
 8004b46:	4806      	ldr	r0, [pc, #24]	; (8004b60 <findShorterWay+0x1450>)
 8004b48:	f004 ff40 	bl	80099cc <writeMsg>

    return 1;
 8004b4c:	2301      	movs	r3, #1


}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd90      	pop	{r4, r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	080105d4 	.word	0x080105d4
 8004b60:	20001638 	.word	0x20001638
 8004b64:	08010614 	.word	0x08010614

08004b68 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa9a 	bl	80050b0 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b82:	b2d8      	uxtb	r0, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	18d1      	adds	r1, r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	ee07 0a90 	vmov	s15, r0
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bcc:	b2d8      	uxtb	r0, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	18d1      	adds	r1, r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	ee07 0a90 	vmov	s15, r0
 8004bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	edc3 7a00 	vstr	s15, [r3]

}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004c18:	b5b0      	push	{r4, r5, r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4413      	add	r3, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	18d5      	adds	r5, r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	1e5c      	subs	r4, r3, #1
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f905 	bl	8004e64 <setGcost>
 8004c5a:	eef0 7a40 	vmov.f32	s15, s0
 8004c5e:	4623      	mov	r3, r4
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4423      	add	r3, r4
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	442b      	add	r3, r5
 8004c68:	edc3 7a00 	vstr	s15, [r3]
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bdb0      	pop	{r4, r5, r7, pc}

08004c74 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004c74:	b5b0      	push	{r4, r5, r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	18d5      	adds	r5, r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	1e5c      	subs	r4, r3, #1
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f9bd 	bl	8005032 <setFcost>
 8004cb8:	eef0 7a40 	vmov.f32	s15, s0
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4423      	add	r3, r4
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	442b      	add	r3, r5
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	edc3 7a00 	vstr	s15, [r3]

}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bdb0      	pop	{r4, r5, r7, pc}

08004cd4 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	f000 fa41 	bl	800517a <findEnd>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8004cfe:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e0a3      	b.n	8004e4e <setHeuristic+0x17a>
		return RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e0a8      	b.n	8004e5c <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	77bb      	strb	r3, [r7, #30]
 8004d0e:	e095      	b.n	8004e3c <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8004d10:	7ffa      	ldrb	r2, [r7, #31]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfb8      	it	lt
 8004d1c:	425b      	neglt	r3, r3
 8004d1e:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8004d20:	7fba      	ldrb	r2, [r7, #30]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfb8      	it	lt
 8004d2c:	425b      	neglt	r3, r3
 8004d2e:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	dc3f      	bgt.n	8004db8 <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d50:	ee17 3a90 	vmov	r3, s15
 8004d54:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	edd3 6a00 	vldr	s13, [r3]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfb8      	it	lt
 8004d70:	425b      	neglt	r3, r3
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d86:	ee17 3a90 	vmov	r3, s15
 8004d8a:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8004d8c:	7ffb      	ldrb	r3, [r7, #31]
 8004d8e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	18d1      	adds	r1, r2, r3
 8004d9a:	7fba      	ldrb	r2, [r7, #30]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	3308      	adds	r3, #8
 8004db2:	edc3 7a00 	vstr	s15, [r3]
 8004db6:	e03e      	b.n	8004e36 <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd0:	ee17 3a90 	vmov	r3, s15
 8004dd4:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	edd3 6a00 	vldr	s13, [r3]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bfb8      	it	lt
 8004df0:	425b      	neglt	r3, r3
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e06:	ee17 3a90 	vmov	r3, s15
 8004e0a:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	18d1      	adds	r1, r2, r3
 8004e1a:	7fba      	ldrb	r2, [r7, #30]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3308      	adds	r3, #8
 8004e32:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8004e36:	7fbb      	ldrb	r3, [r7, #30]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	77bb      	strb	r3, [r7, #30]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	7a5b      	ldrb	r3, [r3, #9]
 8004e40:	7fba      	ldrb	r2, [r7, #30]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	f4ff af64 	bcc.w	8004d10 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004e48:	7ffb      	ldrb	r3, [r7, #31]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	7a1b      	ldrb	r3, [r3, #8]
 8004e52:	7ffa      	ldrb	r2, [r7, #31]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	f4ff af58 	bcc.w	8004d0a <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 8004e5a:	2301      	movs	r3, #1

}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfb8      	it	lt
 8004e8c:	425b      	neglt	r3, r3
 8004e8e:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	425b      	neglt	r3, r3
 8004ea0:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d05d      	beq.n	8004f72 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	1e5a      	subs	r2, r3, #1
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d052      	beq.n	8004f72 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	dc25      	bgt.n	8004f26 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	ed97 7a07 	vldr	s14, [r7, #28]
 8004ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	ed93 7a00 	vldr	s14, [r3]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfb8      	it	lt
 8004f0a:	425b      	neglt	r3, r3
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f18:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f20:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004f24:	e077      	b.n	8005016 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	ed93 7a00 	vldr	s14, [r3]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bfb8      	it	lt
 8004f56:	425b      	neglt	r3, r3
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f64:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f6c:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004f70:	e051      	b.n	8005016 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dc25      	bgt.n	8004fcc <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f9c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	ed93 7a00 	vldr	s14, [r3]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfb8      	it	lt
 8004fb0:	425b      	neglt	r3, r3
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc6:	edc7 7a07 	vstr	s15, [r7, #28]
 8004fca:	e024      	b.n	8005016 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe0:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe8:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	ed93 7a00 	vldr	s14, [r3]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bfb8      	it	lt
 8004ffc:	425b      	neglt	r3, r3
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	ed97 7a07 	vldr	s14, [r7, #28]
 800500e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005012:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	ee07 3a90 	vmov	s15, r3
}
 8005024:	eeb0 0a67 	vmov.f32	s0, s15
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff ff0d 	bl	8004e64 <setGcost>
 800504a:	eef0 7a40 	vmov.f32	s15, s0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4413      	add	r3, r2
 8005064:	461a      	mov	r2, r3
 8005066:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	18d1      	adds	r1, r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	440b      	add	r3, r1
 800508e:	3308      	adds	r3, #8
 8005090:	edd3 7a00 	vldr	s15, [r3]
 8005094:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	ee07 3a90 	vmov	s15, r3

}
 80050a6:	eeb0 0a67 	vmov.f32	s0, s15
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	1e5a      	subs	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d10c      	bne.n	80050e8 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	3304      	adds	r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d101      	bne.n	80050e8 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 80050e4:	bf00      	nop
 80050e6:	e00c      	b.n	8005102 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
 800511e:	e020      	b.n	8005162 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8005120:	2300      	movs	r3, #0
 8005122:	75bb      	strb	r3, [r7, #22]
 8005124:	e015      	b.n	8005152 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2234      	movs	r2, #52	; 0x34
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	441a      	add	r2, r3
 8005132:	7dbb      	ldrb	r3, [r7, #22]
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	2b73      	cmp	r3, #115	; 0x73
 8005138:	d107      	bne.n	800514a <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 800513a:	7dfa      	ldrb	r2, [r7, #23]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8005140:	7dba      	ldrb	r2, [r7, #22]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8005146:	2301      	movs	r3, #1
 8005148:	e011      	b.n	800516e <findStart+0x60>
			}else{
				__NOP();
 800514a:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800514c:	7dbb      	ldrb	r3, [r7, #22]
 800514e:	3301      	adds	r3, #1
 8005150:	75bb      	strb	r3, [r7, #22]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	7a5b      	ldrb	r3, [r3, #9]
 8005156:	7dba      	ldrb	r2, [r7, #22]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3e4      	bcc.n	8005126 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	3301      	adds	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	7a1b      	ldrb	r3, [r3, #8]
 8005166:	7dfa      	ldrb	r2, [r7, #23]
 8005168:	429a      	cmp	r2, r3
 800516a:	d3d9      	bcc.n	8005120 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 800516c:	2300      	movs	r3, #0



}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]
 800518a:	e020      	b.n	80051ce <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800518c:	2300      	movs	r3, #0
 800518e:	75bb      	strb	r3, [r7, #22]
 8005190:	e015      	b.n	80051be <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2234      	movs	r2, #52	; 0x34
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	441a      	add	r2, r3
 800519e:	7dbb      	ldrb	r3, [r7, #22]
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	2b65      	cmp	r3, #101	; 0x65
 80051a4:	d107      	bne.n	80051b6 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 80051a6:	7dfa      	ldrb	r2, [r7, #23]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 80051ac:	7dba      	ldrb	r2, [r7, #22]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e011      	b.n	80051da <findEnd+0x60>
			}else{
				__NOP();
 80051b6:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80051b8:	7dbb      	ldrb	r3, [r7, #22]
 80051ba:	3301      	adds	r3, #1
 80051bc:	75bb      	strb	r3, [r7, #22]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	7a5b      	ldrb	r3, [r3, #9]
 80051c2:	7dba      	ldrb	r2, [r7, #22]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3e4      	bcc.n	8005192 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	3301      	adds	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	7a1b      	ldrb	r3, [r3, #8]
 80051d2:	7dfa      	ldrb	r2, [r7, #23]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3d9      	bcc.n	800518c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80051d8:	2300      	movs	r3, #0

}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
 80051f6:	e03d      	b.n	8005274 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80051f8:	2300      	movs	r3, #0
 80051fa:	75bb      	strb	r3, [r7, #22]
 80051fc:	e031      	b.n	8005262 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	7a5b      	ldrb	r3, [r3, #9]
 8005202:	7dba      	ldrb	r2, [r7, #22]
 8005204:	429a      	cmp	r2, r3
 8005206:	d109      	bne.n	800521c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2234      	movs	r2, #52	; 0x34
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	441a      	add	r2, r3
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	210d      	movs	r1, #13
 8005218:	54d1      	strb	r1, [r2, r3]
 800521a:	e01f      	b.n	800525c <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 800521c:	7dba      	ldrb	r2, [r7, #22]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	7a5b      	ldrb	r3, [r3, #9]
 8005222:	3301      	adds	r3, #1
 8005224:	429a      	cmp	r2, r3
 8005226:	d109      	bne.n	800523c <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2234      	movs	r2, #52	; 0x34
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	441a      	add	r2, r3
 8005234:	7dbb      	ldrb	r3, [r7, #22]
 8005236:	2100      	movs	r1, #0
 8005238:	54d1      	strb	r1, [r2, r3]
 800523a:	e00f      	b.n	800525c <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	2234      	movs	r2, #52	; 0x34
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	18d0      	adds	r0, r2, r3
 8005248:	7db9      	ldrb	r1, [r7, #22]
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	2234      	movs	r2, #52	; 0x34
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	441a      	add	r2, r3
 8005256:	7dbb      	ldrb	r3, [r7, #22]
 8005258:	5c41      	ldrb	r1, [r0, r1]
 800525a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 800525c:	7dbb      	ldrb	r3, [r7, #22]
 800525e:	3301      	adds	r3, #1
 8005260:	75bb      	strb	r3, [r7, #22]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	7a5b      	ldrb	r3, [r3, #9]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	7dbb      	ldrb	r3, [r7, #22]
 800526a:	429a      	cmp	r2, r3
 800526c:	dac7      	bge.n	80051fe <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	3301      	adds	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	7a1b      	ldrb	r3, [r3, #8]
 8005278:	7dfa      	ldrb	r2, [r7, #23]
 800527a:	429a      	cmp	r2, r3
 800527c:	d3bc      	bcc.n	80051f8 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8005298:	2300      	movs	r3, #0
 800529a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 800529c:	e00a      	b.n	80052b4 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2234      	movs	r2, #52	; 0x34
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	3301      	adds	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2234      	movs	r2, #52	; 0x34
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1eb      	bne.n	800529e <getRows+0x12>

	}

	return counterRows;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80052e0:	e002      	b.n	80052e8 <getColums+0x14>

		counterColumns++;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3301      	adds	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f7      	bne.n	80052e2 <getColums+0xe>

	}

	return counterColumns;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 800531a:	2300      	movs	r3, #0
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e04d      	b.n	80053bc <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8005320:	2300      	movs	r3, #0
 8005322:	77bb      	strb	r3, [r7, #30]
 8005324:	e034      	b.n	8005390 <findLesserValue+0x90>
			if (i == j){
 8005326:	7ffa      	ldrb	r2, [r7, #31]
 8005328:	7fbb      	ldrb	r3, [r7, #30]
 800532a:	429a      	cmp	r2, r3
 800532c:	d101      	bne.n	8005332 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 800532e:	bf00      	nop
 8005330:	e02b      	b.n	800538a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8005332:	7ffb      	ldrb	r3, [r7, #31]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	4413      	add	r3, r2
 800533a:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 800533e:	7fbb      	ldrb	r3, [r7, #30]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800534a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	d41a      	bmi.n	800538a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8005354:	7ffb      	ldrb	r3, [r7, #31]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4413      	add	r3, r2
 800535c:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8005360:	7fbb      	ldrb	r3, [r7, #30]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	4413      	add	r3, r2
 8005368:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 800536c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	d104      	bne.n	8005380 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800537e:	e004      	b.n	800538a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8005388:	e006      	b.n	8005398 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 800538a:	7fbb      	ldrb	r3, [r7, #30]
 800538c:	3301      	adds	r3, #1
 800538e:	77bb      	strb	r3, [r7, #30]
 8005390:	7fba      	ldrb	r2, [r7, #30]
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	429a      	cmp	r2, r3
 8005396:	d3c6      	bcc.n	8005326 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8005398:	7fba      	ldrb	r2, [r7, #30]
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d10a      	bne.n	80053b6 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 80053a0:	7ffa      	ldrb	r2, [r7, #31]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 80053a6:	7ffb      	ldrb	r3, [r7, #31]
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 80053b4:	e006      	b.n	80053c4 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 80053b6:	7ffb      	ldrb	r3, [r7, #31]
 80053b8:	3301      	adds	r3, #1
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	7ffa      	ldrb	r2, [r7, #31]
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3ad      	bcc.n	8005320 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d076      	beq.n	80054bc <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 80053ce:	2300      	movs	r3, #0
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e06e      	b.n	80054b2 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 80053d4:	7ffb      	ldrb	r3, [r7, #31]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4413      	add	r3, r2
 80053dc:	edd3 6a00 	vldr	s13, [r3]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 80053ee:	2300      	movs	r3, #0
 80053f0:	77bb      	strb	r3, [r7, #30]
 80053f2:	e045      	b.n	8005480 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 80053f4:	7fbb      	ldrb	r3, [r7, #30]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	4413      	add	r3, r2
 80053fc:	edd3 6a00 	vldr	s13, [r3]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 800540e:	7ffa      	ldrb	r2, [r7, #31]
 8005410:	7fbb      	ldrb	r3, [r7, #30]
 8005412:	429a      	cmp	r2, r3
 8005414:	d101      	bne.n	800541a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8005416:	bf00      	nop
 8005418:	e02f      	b.n	800547a <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 800541a:	edd7 7a06 	vldr	s15, [r7, #24]
 800541e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005422:	eef4 7a47 	vcmp.f32	s15, s14
 8005426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542a:	d11c      	bne.n	8005466 <findLesserValue+0x166>
 800542c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005434:	eef4 7a47 	vcmp.f32	s15, s14
 8005438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543c:	d113      	bne.n	8005466 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 800543e:	7ffb      	ldrb	r3, [r7, #31]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	ed93 7a01 	vldr	s14, [r3, #4]
 800544a:	7fbb      	ldrb	r3, [r7, #30]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4413      	add	r3, r2
 8005452:	edd3 7a01 	vldr	s15, [r3, #4]
 8005456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545e:	d900      	bls.n	8005462 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8005460:	e014      	b.n	800548c <findLesserValue+0x18c>
						__NOP();
 8005462:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8005464:	e009      	b.n	800547a <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8005466:	edd7 7a06 	vldr	s15, [r7, #24]
 800546a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800546e:	eef4 7a47 	vcmp.f32	s15, s14
 8005472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005476:	d108      	bne.n	800548a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8005478:	bf00      	nop
			for(j = 0; j<contador ; j++){
 800547a:	7fbb      	ldrb	r3, [r7, #30]
 800547c:	3301      	adds	r3, #1
 800547e:	77bb      	strb	r3, [r7, #30]
 8005480:	7fba      	ldrb	r2, [r7, #30]
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	429a      	cmp	r2, r3
 8005486:	d3b5      	bcc.n	80053f4 <findLesserValue+0xf4>
 8005488:	e000      	b.n	800548c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 800548a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 800548c:	7fba      	ldrb	r2, [r7, #30]
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d10b      	bne.n	80054ac <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8005494:	7ffa      	ldrb	r2, [r7, #31]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4413      	add	r3, r2
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 80054a8:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 80054aa:	e008      	b.n	80054be <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 80054ac:	7ffb      	ldrb	r3, [r7, #31]
 80054ae:	3301      	adds	r3, #1
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	7ffa      	ldrb	r2, [r7, #31]
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d38c      	bcc.n	80053d4 <findLesserValue+0xd4>
}
 80054ba:	e000      	b.n	80054be <findLesserValue+0x1be>
		__NOP();
 80054bc:	bf00      	nop
}
 80054be:	bf00      	nop
 80054c0:	3724      	adds	r7, #36	; 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <initSerialComunication+0xc8>)
 80054de:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	; (8005594 <initSerialComunication+0xc8>)
 80054e6:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	79da      	ldrb	r2, [r3, #7]
 80054ec:	4b29      	ldr	r3, [pc, #164]	; (8005594 <initSerialComunication+0xc8>)
 80054ee:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	791a      	ldrb	r2, [r3, #4]
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <initSerialComunication+0xc8>)
 80054f6:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	799a      	ldrb	r2, [r3, #6]
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <initSerialComunication+0xc8>)
 80054fe:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	7a5a      	ldrb	r2, [r3, #9]
 8005504:	4b23      	ldr	r3, [pc, #140]	; (8005594 <initSerialComunication+0xc8>)
 8005506:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	7a9a      	ldrb	r2, [r3, #10]
 800550c:	4b21      	ldr	r3, [pc, #132]	; (8005594 <initSerialComunication+0xc8>)
 800550e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	7a1a      	ldrb	r2, [r3, #8]
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <initSerialComunication+0xc8>)
 8005516:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <initSerialComunication+0xcc>)
 800551e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	7a5a      	ldrb	r2, [r3, #9]
 8005524:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <initSerialComunication+0xcc>)
 8005526:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	795a      	ldrb	r2, [r3, #5]
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <initSerialComunication+0xcc>)
 800552e:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	7a1a      	ldrb	r2, [r3, #8]
 8005534:	4b18      	ldr	r3, [pc, #96]	; (8005598 <initSerialComunication+0xcc>)
 8005536:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	791a      	ldrb	r2, [r3, #4]
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <initSerialComunication+0xcc>)
 800553e:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	79da      	ldrb	r2, [r3, #7]
 8005544:	4b14      	ldr	r3, [pc, #80]	; (8005598 <initSerialComunication+0xcc>)
 8005546:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	799a      	ldrb	r2, [r3, #6]
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <initSerialComunication+0xcc>)
 800554e:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a11      	ldr	r2, [pc, #68]	; (800559c <initSerialComunication+0xd0>)
 8005556:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	7a5a      	ldrb	r2, [r3, #9]
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <initSerialComunication+0xd0>)
 800555e:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	795a      	ldrb	r2, [r3, #5]
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <initSerialComunication+0xd0>)
 8005566:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7a1a      	ldrb	r2, [r3, #8]
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <initSerialComunication+0xd0>)
 800556e:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	791a      	ldrb	r2, [r3, #4]
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <initSerialComunication+0xd0>)
 8005576:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	79da      	ldrb	r2, [r3, #7]
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <initSerialComunication+0xd0>)
 800557e:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	799a      	ldrb	r2, [r3, #6]
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <initSerialComunication+0xd0>)
 8005586:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20001638 	.word	0x20001638
 8005598:	200016cc 	.word	0x200016cc
 800559c:	200016d8 	.word	0x200016d8

080055a0 <create_operations>:

void create_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *prtbuild,
					   Parameters_Path_t *ptrPath){
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	; 0x38
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = prtbuild->initline_x = 0;
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9c1 2300 	strd	r2, r3, [r1]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = prtbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800560c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800560e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005618:	e065      	b.n	80056e6 <create_operations+0x146>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_x = (shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 800561a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800561e:	3301      	adds	r3, #1
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	440b      	add	r3, r1
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005648:	ee17 0a90 	vmov	r0, s15
 800564c:	f7fa ff94 	bl	8000578 <__aeabi_f2d>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dist_to_y = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565c:	3301      	adds	r3, #1
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4413      	add	r3, r2
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	440b      	add	r3, r1
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	ee17 0a90 	vmov	r0, s15
 800568a:	f7fa ff75 	bl	8000578 <__aeabi_f2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9c7 2304 	strd	r2, r3, [r7, #16]

		finishline_x += dist_to_x; // Coordenada x a ir
 8005696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800569a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800569e:	f7fa fe0d 	bl	80002bc <__adddf3>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 80056aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056b2:	f7fa fe03 	bl	80002bc <__adddf3>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		build_Operation(prtList, prtbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 80056be:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80056c2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f002 f9a9 	bl	8007a20 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 80056ce:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80056d2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80056d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80056d8:	f002 fa86 	bl	8007be8 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 80056dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056e0:	3301      	adds	r3, #1
 80056e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	7a9b      	ldrb	r3, [r3, #10]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	429a      	cmp	r2, r3
 80056f2:	db92      	blt.n	800561a <create_operations+0x7a>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, prtbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056fa:	ed9f 2b07 	vldr	d2, [pc, #28]	; 8005718 <create_operations+0x178>
 80056fe:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005718 <create_operations+0x178>
 8005702:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005718 <create_operations+0x178>
 8005706:	2200      	movs	r2, #0
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f002 fa28 	bl	8007b60 <add_Operation>


}
 8005710:	bf00      	nop
 8005712:	3738      	adds	r7, #56	; 0x38
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
	...

08005720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	2b00      	cmp	r3, #0
 8005730:	db0b      	blt.n	800574a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	4907      	ldr	r1, [pc, #28]	; (8005758 <__NVIC_EnableIRQ+0x38>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2001      	movs	r0, #1
 8005742:	fa00 f202 	lsl.w	r2, r0, r2
 8005746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000e100 	.word	0xe000e100

0800575c <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <inTIM4+0x30>)
 8005762:	4a0b      	ldr	r2, [pc, #44]	; (8005790 <inTIM4+0x34>)
 8005764:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <inTIM4+0x30>)
 8005768:	2200      	movs	r2, #0
 800576a:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <inTIM4+0x30>)
 800576e:	2200      	movs	r2, #0
 8005770:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <inTIM4+0x30>)
 8005774:	f242 7210 	movw	r2, #10000	; 0x2710
 8005778:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 800577a:	4b04      	ldr	r3, [pc, #16]	; (800578c <inTIM4+0x30>)
 800577c:	220a      	movs	r2, #10
 800577e:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8005780:	4802      	ldr	r0, [pc, #8]	; (800578c <inTIM4+0x30>)
 8005782:	f000 f807 	bl	8005794 <BasicTimer_Config>

}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200002d8 	.word	0x200002d8
 8005790:	40000800 	.word	0x40000800

08005794 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057a4:	b672      	cpsid	i
}
 80057a6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a85      	ldr	r2, [pc, #532]	; (80059c4 <BasicTimer_Config+0x230>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d106      	bne.n	80057c0 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80057b2:	4b85      	ldr	r3, [pc, #532]	; (80059c8 <BasicTimer_Config+0x234>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	4a84      	ldr	r2, [pc, #528]	; (80059c8 <BasicTimer_Config+0x234>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6453      	str	r3, [r2, #68]	; 0x44
 80057be:	e030      	b.n	8005822 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d106      	bne.n	80057d8 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80057ca:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <BasicTimer_Config+0x234>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	4a7e      	ldr	r2, [pc, #504]	; (80059c8 <BasicTimer_Config+0x234>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6413      	str	r3, [r2, #64]	; 0x40
 80057d6:	e024      	b.n	8005822 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a7b      	ldr	r2, [pc, #492]	; (80059cc <BasicTimer_Config+0x238>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d106      	bne.n	80057f0 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80057e2:	4b79      	ldr	r3, [pc, #484]	; (80059c8 <BasicTimer_Config+0x234>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	4a78      	ldr	r2, [pc, #480]	; (80059c8 <BasicTimer_Config+0x234>)
 80057e8:	f043 0302 	orr.w	r3, r3, #2
 80057ec:	6413      	str	r3, [r2, #64]	; 0x40
 80057ee:	e018      	b.n	8005822 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a76      	ldr	r2, [pc, #472]	; (80059d0 <BasicTimer_Config+0x23c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d106      	bne.n	8005808 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80057fa:	4b73      	ldr	r3, [pc, #460]	; (80059c8 <BasicTimer_Config+0x234>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	4a72      	ldr	r2, [pc, #456]	; (80059c8 <BasicTimer_Config+0x234>)
 8005800:	f043 0304 	orr.w	r3, r3, #4
 8005804:	6413      	str	r3, [r2, #64]	; 0x40
 8005806:	e00c      	b.n	8005822 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a71      	ldr	r2, [pc, #452]	; (80059d4 <BasicTimer_Config+0x240>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d106      	bne.n	8005820 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005812:	4b6d      	ldr	r3, [pc, #436]	; (80059c8 <BasicTimer_Config+0x234>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	4a6c      	ldr	r2, [pc, #432]	; (80059c8 <BasicTimer_Config+0x234>)
 8005818:	f043 0308 	orr.w	r3, r3, #8
 800581c:	6413      	str	r3, [r2, #64]	; 0x40
 800581e:	e000      	b.n	8005822 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8005820:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005830:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	791b      	ldrb	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 80d3 	bne.w	80059ec <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0210 	bic.w	r2, r2, #16
 8005854:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2ba0      	cmp	r3, #160	; 0xa0
 8005860:	d022      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2bc8      	cmp	r3, #200	; 0xc8
 8005866:	d01f      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800586e:	d01b      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005876:	d017      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800587e:	d013      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005886:	d00f      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800588e:	d00b      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005896:	d007      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800589e:	d003      	beq.n	80058a8 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a6:	d10b      	bne.n	80058c0 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2264      	movs	r2, #100	; 0x64
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80058be:	e07c      	b.n	80059ba <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058c6:	d029      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058ce:	d025      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d020      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80058e0:	d01c      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d017      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f241 7270 	movw	r2, #6000	; 0x1770
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d012      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00d      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005906:	d009      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f242 3228 	movw	r2, #9000	; 0x2328
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f242 7210 	movw	r2, #10000	; 0x2710
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	3a01      	subs	r2, #1
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
 8005934:	e041      	b.n	80059ba <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800593c:	d028      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005944:	4293      	cmp	r3, r2
 8005946:	d023      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f247 5230 	movw	r2, #30000	; 0x7530
 800594e:	4293      	cmp	r3, r2
 8005950:	d01e      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f649 4240 	movw	r2, #40000	; 0x9c40
 8005958:	4293      	cmp	r3, r2
 800595a:	d019      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005962:	4293      	cmp	r3, r2
 8005964:	d014      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f64e 2260 	movw	r2, #60000	; 0xea60
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <BasicTimer_Config+0x244>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <BasicTimer_Config+0x248>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <BasicTimer_Config+0x24c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <BasicTimer_Config+0x250>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	3a01      	subs	r2, #1
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
 80059a0:	e00b      	b.n	80059ba <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <BasicTimer_Config+0x254>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	3a01      	subs	r2, #1
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
 80059c2:	e027      	b.n	8005a14 <BasicTimer_Config+0x280>
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	00011170 	.word	0x00011170
 80059dc:	00013880 	.word	0x00013880
 80059e0:	00015f90 	.word	0x00015f90
 80059e4:	000186a0 	.word	0x000186a0
 80059e8:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0210 	orr.w	r2, r2, #16
 80059fa:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3a01      	subs	r2, #1
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	7c1b      	ldrb	r3, [r3, #16]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d12d      	bne.n	8005a78 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d103      	bne.n	8005a3e <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8005a36:	201c      	movs	r0, #28
 8005a38:	f7ff fe72 	bl	8005720 <__NVIC_EnableIRQ>
 8005a3c:	e024      	b.n	8005a88 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a14      	ldr	r2, [pc, #80]	; (8005a94 <BasicTimer_Config+0x300>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8005a48:	201d      	movs	r0, #29
 8005a4a:	f7ff fe69 	bl	8005720 <__NVIC_EnableIRQ>
 8005a4e:	e01b      	b.n	8005a88 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <BasicTimer_Config+0x304>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d103      	bne.n	8005a62 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8005a5a:	201e      	movs	r0, #30
 8005a5c:	f7ff fe60 	bl	8005720 <__NVIC_EnableIRQ>
 8005a60:	e012      	b.n	8005a88 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <BasicTimer_Config+0x308>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d103      	bne.n	8005a74 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8005a6c:	2032      	movs	r0, #50	; 0x32
 8005a6e:	f7ff fe57 	bl	8005720 <__NVIC_EnableIRQ>
 8005a72:	e009      	b.n	8005a88 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8005a74:	bf00      	nop
 8005a76:	e007      	b.n	8005a88 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a88:	b662      	cpsie	i
}
 8005a8a:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00

08005aa0 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8005aaa:	4818      	ldr	r0, [pc, #96]	; (8005b0c <delay_ms+0x6c>)
 8005aac:	f000 fa6e 	bl	8005f8c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	0092      	lsls	r2, r2, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8005ac4:	e016      	b.n	8005af4 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <delay_ms+0x6c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <delay_ms+0x6c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	3301      	adds	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <delay_ms+0x6c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <delay_ms+0x6c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8005af4:	89fa      	ldrh	r2, [r7, #14]
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d3e4      	bcc.n	8005ac6 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8005afc:	4803      	ldr	r0, [pc, #12]	; (8005b0c <delay_ms+0x6c>)
 8005afe:	f000 fa57 	bl	8005fb0 <stopTimer>
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200002d8 	.word	0x200002d8

08005b10 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b14:	bf00      	nop
}
 8005b16:	bf00      	nop
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b24:	bf00      	nop
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b34:	bf00      	nop
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b44:	bf00      	nop
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b54:	bf00      	nop
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b64:	bf00      	nop
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b74:	bf00      	nop
}
 8005b76:	bf00      	nop
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b84:	bf00      	nop
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005b94:	bf00      	nop
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ba4:	bf00      	nop
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005bb4:	bf00      	nop
}
 8005bb6:	bf00      	nop
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005bc4:	bf00      	nop
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005bd4:	bf00      	nop
}
 8005bd6:	bf00      	nop
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005be4:	bf00      	nop
}
 8005be6:	bf00      	nop
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005bf4:	bf00      	nop
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005c04:	bf00      	nop
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005c14:	bf00      	nop
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8005c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8005c42:	f7fc f805 	bl	8001c50 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8005c46:	e066      	b.n	8005d16 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8005c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8005c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c60:	f023 0302 	bic.w	r3, r3, #2
 8005c64:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8005c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8005c76:	f7ff ff5b 	bl	8005b30 <Capture_TIM2_Ch1_Callback>
}
 8005c7a:	e04c      	b.n	8005d16 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8005c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d012      	beq.n	8005cb0 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8005c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c94:	f023 0304 	bic.w	r3, r3, #4
 8005c98:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8005c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8005caa:	f7ff ff49 	bl	8005b40 <Capture_TIM2_Ch2_Callback>
}
 8005cae:	e032      	b.n	8005d16 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8005cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d012      	beq.n	8005ce4 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8005cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cc8:	f023 0308 	bic.w	r3, r3, #8
 8005ccc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8005cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cdc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8005cde:	f7ff ff37 	bl	8005b50 <Capture_TIM2_Ch3_Callback>
}
 8005ce2:	e018      	b.n	8005d16 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8005ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d011      	beq.n	8005d16 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8005cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cfc:	f023 0310 	bic.w	r3, r3, #16
 8005d00:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8005d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d10:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8005d12:	f7ff ff25 	bl	8005b60 <Capture_TIM2_Ch4_Callback>
}
 8005d16:	bf00      	nop
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8005d2c:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8005d38:	f7fb ff80 	bl	8001c3c <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8005d3c:	e052      	b.n	8005de4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8005d3e:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00e      	beq.n	8005d68 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8005d4a:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d50:	f023 0302 	bic.w	r3, r3, #2
 8005d54:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8005d56:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d60:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8005d62:	f7ff ff05 	bl	8005b70 <Capture_TIM3_Ch1_Callback>
}
 8005d66:	e03d      	b.n	8005de4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00e      	beq.n	8005d92 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d7a:	f023 0304 	bic.w	r3, r3, #4
 8005d7e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8005d80:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8005d8c:	f7ff fef8 	bl	8005b80 <Capture_TIM3_Ch2_Callback>
}
 8005d90:	e028      	b.n	8005de4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005da4:	f023 0308 	bic.w	r3, r3, #8
 8005da8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8005db6:	f7ff feeb 	bl	8005b90 <Capture_TIM3_Ch3_Callback>
}
 8005dba:	e013      	b.n	8005de4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00d      	beq.n	8005de4 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a06      	ldr	r2, [pc, #24]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <TIM3_IRQHandler+0xcc>)
 8005dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dde:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8005de0:	f7ff fede 	bl	8005ba0 <Capture_TIM3_Ch4_Callback>
}
 8005de4:	bf00      	nop
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40000400 	.word	0x40000400

08005dec <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8005df0:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8005dfc:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8005e08:	f7ff fe82 	bl	8005b10 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8005e0c:	e052      	b.n	8005eb4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e20:	f023 0302 	bic.w	r3, r3, #2
 8005e24:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8005e32:	f7ff febd 	bl	8005bb0 <Capture_TIM4_Ch1_Callback>
}
 8005e36:	e03d      	b.n	8005eb4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8005e38:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e4a:	f023 0304 	bic.w	r3, r3, #4
 8005e4e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8005e50:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8005e5c:	f7ff fec8 	bl	8005bf0 <Capture_TIM5_Ch2_Callback>
}
 8005e60:	e028      	b.n	8005eb4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8005e62:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e74:	f023 0308 	bic.w	r3, r3, #8
 8005e78:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	4a0e      	ldr	r2, [pc, #56]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e84:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8005e86:	f7ff fe9b 	bl	8005bc0 <Capture_TIM4_Ch3_Callback>
}
 8005e8a:	e013      	b.n	8005eb4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00d      	beq.n	8005eb4 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4a06      	ldr	r2, [pc, #24]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005e9e:	f023 0310 	bic.w	r3, r3, #16
 8005ea2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4a03      	ldr	r2, [pc, #12]	; (8005eb8 <TIM4_IRQHandler+0xcc>)
 8005eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eae:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8005eb0:	f7ff fe8e 	bl	8005bd0 <Capture_TIM4_Ch4_Callback>
}
 8005eb4:	bf00      	nop
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40000800 	.word	0x40000800

08005ebc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8005ed8:	f7ff fe22 	bl	8005b20 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8005edc:	e052      	b.n	8005f84 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8005ede:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ef0:	f023 0302 	bic.w	r3, r3, #2
 8005ef4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	4a23      	ldr	r2, [pc, #140]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f00:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8005f02:	f7ff fe6d 	bl	8005be0 <Capture_TIM5_Ch1_Callback>
}
 8005f06:	e03d      	b.n	8005f84 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8005f08:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8005f14:	4b1c      	ldr	r3, [pc, #112]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f1a:	f023 0304 	bic.w	r3, r3, #4
 8005f1e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8005f20:	4b19      	ldr	r3, [pc, #100]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f2a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8005f2c:	f7ff fe60 	bl	8005bf0 <Capture_TIM5_Ch2_Callback>
}
 8005f30:	e028      	b.n	8005f84 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00e      	beq.n	8005f5c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f44:	f023 0308 	bic.w	r3, r3, #8
 8005f48:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4a0e      	ldr	r2, [pc, #56]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f54:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8005f56:	f7ff fe53 	bl	8005c00 <Capture_TIM5_Ch3_Callback>
}
 8005f5a:	e013      	b.n	8005f84 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	4a03      	ldr	r2, [pc, #12]	; (8005f88 <TIM5_IRQHandler+0xcc>)
 8005f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f7e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8005f80:	f7ff fe46 	bl	8005c10 <Capture_TIM5_Ch4_Callback>
}
 8005f84:	bf00      	nop
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40000c00 	.word	0x40000c00

08005f8c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <__NVIC_EnableIRQ>:
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	db0b      	blt.n	8005ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	f003 021f 	and.w	r2, r3, #31
 8005fec:	4907      	ldr	r1, [pc, #28]	; (800600c <__NVIC_EnableIRQ+0x38>)
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	e000e100 	.word	0xe000e100

08006010 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f825 	bl	800706c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8006022:	4b96      	ldr	r3, [pc, #600]	; (800627c <extInt_Config+0x26c>)
 8006024:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006028:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	791b      	ldrb	r3, [r3, #4]
 8006030:	2b0f      	cmp	r3, #15
 8006032:	f200 85cd 	bhi.w	8006bd0 <extInt_Config+0xbc0>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <extInt_Config+0x2c>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800607d 	.word	0x0800607d
 8006040:	08006133 	.word	0x08006133
 8006044:	080061e9 	.word	0x080061e9
 8006048:	080062bf 	.word	0x080062bf
 800604c:	08006375 	.word	0x08006375
 8006050:	08006423 	.word	0x08006423
 8006054:	080064e9 	.word	0x080064e9
 8006058:	08006591 	.word	0x08006591
 800605c:	08006639 	.word	0x08006639
 8006060:	080066e1 	.word	0x080066e1
 8006064:	080067a7 	.word	0x080067a7
 8006068:	0800684f 	.word	0x0800684f
 800606c:	080068f7 	.word	0x080068f7
 8006070:	080069bd 	.word	0x080069bd
 8006074:	08006a63 	.word	0x08006a63
 8006078:	08006b0b 	.word	0x08006b0b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 800607c:	4b80      	ldr	r3, [pc, #512]	; (8006280 <extInt_Config+0x270>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4a7f      	ldr	r2, [pc, #508]	; (8006280 <extInt_Config+0x270>)
 8006082:	f023 030f 	bic.w	r3, r3, #15
 8006086:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a7d      	ldr	r2, [pc, #500]	; (8006284 <extInt_Config+0x274>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d105      	bne.n	80060a0 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006094:	4b7a      	ldr	r3, [pc, #488]	; (8006280 <extInt_Config+0x270>)
 8006096:	4a7a      	ldr	r2, [pc, #488]	; (8006280 <extInt_Config+0x270>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800609c:	f000 bd9a 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a78      	ldr	r2, [pc, #480]	; (8006288 <extInt_Config+0x278>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d107      	bne.n	80060bc <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80060ac:	4b74      	ldr	r3, [pc, #464]	; (8006280 <extInt_Config+0x270>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4a73      	ldr	r2, [pc, #460]	; (8006280 <extInt_Config+0x270>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6093      	str	r3, [r2, #8]
					break;
 80060b8:	f000 bd8c 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a72      	ldr	r2, [pc, #456]	; (800628c <extInt_Config+0x27c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d107      	bne.n	80060d8 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80060c8:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <extInt_Config+0x270>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4a6c      	ldr	r2, [pc, #432]	; (8006280 <extInt_Config+0x270>)
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	6093      	str	r3, [r2, #8]
					break;
 80060d4:	f000 bd7e 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a6c      	ldr	r2, [pc, #432]	; (8006290 <extInt_Config+0x280>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d107      	bne.n	80060f4 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <extInt_Config+0x270>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a65      	ldr	r2, [pc, #404]	; (8006280 <extInt_Config+0x270>)
 80060ea:	f043 0303 	orr.w	r3, r3, #3
 80060ee:	6093      	str	r3, [r2, #8]
					break;
 80060f0:	f000 bd70 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a66      	ldr	r2, [pc, #408]	; (8006294 <extInt_Config+0x284>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d107      	bne.n	8006110 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006100:	4b5f      	ldr	r3, [pc, #380]	; (8006280 <extInt_Config+0x270>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4a5e      	ldr	r2, [pc, #376]	; (8006280 <extInt_Config+0x270>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	6093      	str	r3, [r2, #8]
					break;
 800610c:	f000 bd62 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a60      	ldr	r2, [pc, #384]	; (8006298 <extInt_Config+0x288>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d107      	bne.n	800612c <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800611c:	4b58      	ldr	r3, [pc, #352]	; (8006280 <extInt_Config+0x270>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a57      	ldr	r2, [pc, #348]	; (8006280 <extInt_Config+0x270>)
 8006122:	f043 0307 	orr.w	r3, r3, #7
 8006126:	6093      	str	r3, [r2, #8]
					break;
 8006128:	f000 bd54 	b.w	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 800612c:	bf00      	nop
					break;
 800612e:	f000 bd51 	b.w	8006bd4 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8006132:	4b53      	ldr	r3, [pc, #332]	; (8006280 <extInt_Config+0x270>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4a52      	ldr	r2, [pc, #328]	; (8006280 <extInt_Config+0x270>)
 8006138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a4f      	ldr	r2, [pc, #316]	; (8006284 <extInt_Config+0x274>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d105      	bne.n	8006156 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800614a:	4b4d      	ldr	r3, [pc, #308]	; (8006280 <extInt_Config+0x270>)
 800614c:	4a4c      	ldr	r2, [pc, #304]	; (8006280 <extInt_Config+0x270>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006152:	f000 bd3f 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a4a      	ldr	r2, [pc, #296]	; (8006288 <extInt_Config+0x278>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d107      	bne.n	8006172 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <extInt_Config+0x270>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4a46      	ldr	r2, [pc, #280]	; (8006280 <extInt_Config+0x270>)
 8006168:	f043 0310 	orr.w	r3, r3, #16
 800616c:	6093      	str	r3, [r2, #8]
					break;
 800616e:	f000 bd31 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a44      	ldr	r2, [pc, #272]	; (800628c <extInt_Config+0x27c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d107      	bne.n	800618e <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 800617e:	4b40      	ldr	r3, [pc, #256]	; (8006280 <extInt_Config+0x270>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4a3f      	ldr	r2, [pc, #252]	; (8006280 <extInt_Config+0x270>)
 8006184:	f043 0320 	orr.w	r3, r3, #32
 8006188:	6093      	str	r3, [r2, #8]
					break;
 800618a:	f000 bd23 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a3e      	ldr	r2, [pc, #248]	; (8006290 <extInt_Config+0x280>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d107      	bne.n	80061aa <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800619a:	4b39      	ldr	r3, [pc, #228]	; (8006280 <extInt_Config+0x270>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	4a38      	ldr	r2, [pc, #224]	; (8006280 <extInt_Config+0x270>)
 80061a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80061a4:	6093      	str	r3, [r2, #8]
					break;
 80061a6:	f000 bd15 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a38      	ldr	r2, [pc, #224]	; (8006294 <extInt_Config+0x284>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d107      	bne.n	80061c6 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80061b6:	4b32      	ldr	r3, [pc, #200]	; (8006280 <extInt_Config+0x270>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	4a31      	ldr	r2, [pc, #196]	; (8006280 <extInt_Config+0x270>)
 80061bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061c0:	6093      	str	r3, [r2, #8]
					break;
 80061c2:	f000 bd07 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a32      	ldr	r2, [pc, #200]	; (8006298 <extInt_Config+0x288>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d107      	bne.n	80061e2 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80061d2:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <extInt_Config+0x270>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <extInt_Config+0x270>)
 80061d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80061dc:	6093      	str	r3, [r2, #8]
					break;
 80061de:	f000 bcf9 	b.w	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80061e2:	bf00      	nop
					break;
 80061e4:	f000 bcf6 	b.w	8006bd4 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <extInt_Config+0x270>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <extInt_Config+0x270>)
 80061ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061f2:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a22      	ldr	r2, [pc, #136]	; (8006284 <extInt_Config+0x274>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d105      	bne.n	800620c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8006200:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <extInt_Config+0x270>)
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <extInt_Config+0x270>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006208:	f000 bce4 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <extInt_Config+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d107      	bne.n	8006228 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <extInt_Config+0x270>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <extInt_Config+0x270>)
 800621e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006222:	6093      	str	r3, [r2, #8]
					break;
 8006224:	f000 bcd6 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a17      	ldr	r2, [pc, #92]	; (800628c <extInt_Config+0x27c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d107      	bne.n	8006244 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <extInt_Config+0x270>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a11      	ldr	r2, [pc, #68]	; (8006280 <extInt_Config+0x270>)
 800623a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800623e:	6093      	str	r3, [r2, #8]
					break;
 8006240:	f000 bcc8 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <extInt_Config+0x280>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d107      	bne.n	8006260 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <extInt_Config+0x270>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <extInt_Config+0x270>)
 8006256:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800625a:	6093      	str	r3, [r2, #8]
					break;
 800625c:	f000 bcba 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a0b      	ldr	r2, [pc, #44]	; (8006294 <extInt_Config+0x284>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d117      	bne.n	800629c <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <extInt_Config+0x270>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4a03      	ldr	r2, [pc, #12]	; (8006280 <extInt_Config+0x270>)
 8006272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006276:	6093      	str	r3, [r2, #8]
					break;
 8006278:	f000 bcac 	b.w	8006bd4 <extInt_Config+0xbc4>
 800627c:	40023800 	.word	0x40023800
 8006280:	40013800 	.word	0x40013800
 8006284:	40020000 	.word	0x40020000
 8006288:	40020400 	.word	0x40020400
 800628c:	40020800 	.word	0x40020800
 8006290:	40020c00 	.word	0x40020c00
 8006294:	40021000 	.word	0x40021000
 8006298:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a8a      	ldr	r2, [pc, #552]	; (80064cc <extInt_Config+0x4bc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d107      	bne.n	80062b8 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80062a8:	4b89      	ldr	r3, [pc, #548]	; (80064d0 <extInt_Config+0x4c0>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4a88      	ldr	r2, [pc, #544]	; (80064d0 <extInt_Config+0x4c0>)
 80062ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062b2:	6093      	str	r3, [r2, #8]
					break;
 80062b4:	f000 bc8e 	b.w	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80062b8:	bf00      	nop
					break;
 80062ba:	f000 bc8b 	b.w	8006bd4 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80062be:	4b84      	ldr	r3, [pc, #528]	; (80064d0 <extInt_Config+0x4c0>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4a83      	ldr	r2, [pc, #524]	; (80064d0 <extInt_Config+0x4c0>)
 80062c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c8:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a80      	ldr	r2, [pc, #512]	; (80064d4 <extInt_Config+0x4c4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d105      	bne.n	80062e2 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80062d6:	4b7e      	ldr	r3, [pc, #504]	; (80064d0 <extInt_Config+0x4c0>)
 80062d8:	4a7d      	ldr	r2, [pc, #500]	; (80064d0 <extInt_Config+0x4c0>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80062de:	f000 bc79 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a7b      	ldr	r2, [pc, #492]	; (80064d8 <extInt_Config+0x4c8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d107      	bne.n	80062fe <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80062ee:	4b78      	ldr	r3, [pc, #480]	; (80064d0 <extInt_Config+0x4c0>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4a77      	ldr	r2, [pc, #476]	; (80064d0 <extInt_Config+0x4c0>)
 80062f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062f8:	6093      	str	r3, [r2, #8]
					break;
 80062fa:	f000 bc6b 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a75      	ldr	r2, [pc, #468]	; (80064dc <extInt_Config+0x4cc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d107      	bne.n	800631a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800630a:	4b71      	ldr	r3, [pc, #452]	; (80064d0 <extInt_Config+0x4c0>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4a70      	ldr	r2, [pc, #448]	; (80064d0 <extInt_Config+0x4c0>)
 8006310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006314:	6093      	str	r3, [r2, #8]
					break;
 8006316:	f000 bc5d 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a6f      	ldr	r2, [pc, #444]	; (80064e0 <extInt_Config+0x4d0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d107      	bne.n	8006336 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006326:	4b6a      	ldr	r3, [pc, #424]	; (80064d0 <extInt_Config+0x4c0>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a69      	ldr	r2, [pc, #420]	; (80064d0 <extInt_Config+0x4c0>)
 800632c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006330:	6093      	str	r3, [r2, #8]
					break;
 8006332:	f000 bc4f 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a69      	ldr	r2, [pc, #420]	; (80064e4 <extInt_Config+0x4d4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d107      	bne.n	8006352 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <extInt_Config+0x4c0>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	4a62      	ldr	r2, [pc, #392]	; (80064d0 <extInt_Config+0x4c0>)
 8006348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800634c:	6093      	str	r3, [r2, #8]
					break;
 800634e:	f000 bc41 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5c      	ldr	r2, [pc, #368]	; (80064cc <extInt_Config+0x4bc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d107      	bne.n	800636e <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800635e:	4b5c      	ldr	r3, [pc, #368]	; (80064d0 <extInt_Config+0x4c0>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	4a5b      	ldr	r2, [pc, #364]	; (80064d0 <extInt_Config+0x4c0>)
 8006364:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006368:	6093      	str	r3, [r2, #8]
					break;
 800636a:	f000 bc33 	b.w	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 800636e:	bf00      	nop
					break;
 8006370:	f000 bc30 	b.w	8006bd4 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8006374:	4b56      	ldr	r3, [pc, #344]	; (80064d0 <extInt_Config+0x4c0>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a55      	ldr	r2, [pc, #340]	; (80064d0 <extInt_Config+0x4c0>)
 800637a:	f023 030f 	bic.w	r3, r3, #15
 800637e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a53      	ldr	r2, [pc, #332]	; (80064d4 <extInt_Config+0x4c4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d105      	bne.n	8006398 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 800638c:	4b50      	ldr	r3, [pc, #320]	; (80064d0 <extInt_Config+0x4c0>)
 800638e:	4a50      	ldr	r2, [pc, #320]	; (80064d0 <extInt_Config+0x4c0>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006394:	f000 bc1e 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a4e      	ldr	r2, [pc, #312]	; (80064d8 <extInt_Config+0x4c8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d107      	bne.n	80063b4 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80063a4:	4b4a      	ldr	r3, [pc, #296]	; (80064d0 <extInt_Config+0x4c0>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4a49      	ldr	r2, [pc, #292]	; (80064d0 <extInt_Config+0x4c0>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	60d3      	str	r3, [r2, #12]
					break;
 80063b0:	f000 bc10 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a48      	ldr	r2, [pc, #288]	; (80064dc <extInt_Config+0x4cc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d107      	bne.n	80063d0 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80063c0:	4b43      	ldr	r3, [pc, #268]	; (80064d0 <extInt_Config+0x4c0>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4a42      	ldr	r2, [pc, #264]	; (80064d0 <extInt_Config+0x4c0>)
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	60d3      	str	r3, [r2, #12]
					break;
 80063cc:	f000 bc02 	b.w	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a42      	ldr	r2, [pc, #264]	; (80064e0 <extInt_Config+0x4d0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d106      	bne.n	80063ea <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80063dc:	4b3c      	ldr	r3, [pc, #240]	; (80064d0 <extInt_Config+0x4c0>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4a3b      	ldr	r2, [pc, #236]	; (80064d0 <extInt_Config+0x4c0>)
 80063e2:	f043 0303 	orr.w	r3, r3, #3
 80063e6:	60d3      	str	r3, [r2, #12]
					break;
 80063e8:	e3f4      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a3c      	ldr	r2, [pc, #240]	; (80064e4 <extInt_Config+0x4d4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d106      	bne.n	8006404 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <extInt_Config+0x4c0>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <extInt_Config+0x4c0>)
 80063fc:	f043 0304 	orr.w	r3, r3, #4
 8006400:	60d3      	str	r3, [r2, #12]
					break;
 8006402:	e3e7      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a30      	ldr	r2, [pc, #192]	; (80064cc <extInt_Config+0x4bc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d106      	bne.n	800641e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006410:	4b2f      	ldr	r3, [pc, #188]	; (80064d0 <extInt_Config+0x4c0>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a2e      	ldr	r2, [pc, #184]	; (80064d0 <extInt_Config+0x4c0>)
 8006416:	f043 0307 	orr.w	r3, r3, #7
 800641a:	60d3      	str	r3, [r2, #12]
					break;
 800641c:	e3da      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 800641e:	bf00      	nop
					break;
 8006420:	e3d8      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8006422:	4b2b      	ldr	r3, [pc, #172]	; (80064d0 <extInt_Config+0x4c0>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <extInt_Config+0x4c0>)
 8006428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800642c:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <extInt_Config+0x4c4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d104      	bne.n	8006444 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <extInt_Config+0x4c0>)
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <extInt_Config+0x4c0>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006442:	e3c7      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <extInt_Config+0x4c8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d106      	bne.n	800645e <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <extInt_Config+0x4c0>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <extInt_Config+0x4c0>)
 8006456:	f043 0310 	orr.w	r3, r3, #16
 800645a:	60d3      	str	r3, [r2, #12]
					break;
 800645c:	e3ba      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <extInt_Config+0x4cc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d106      	bne.n	8006478 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <extInt_Config+0x4c0>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <extInt_Config+0x4c0>)
 8006470:	f043 0320 	orr.w	r3, r3, #32
 8006474:	60d3      	str	r3, [r2, #12]
					break;
 8006476:	e3ad      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a18      	ldr	r2, [pc, #96]	; (80064e0 <extInt_Config+0x4d0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d106      	bne.n	8006492 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <extInt_Config+0x4c0>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <extInt_Config+0x4c0>)
 800648a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800648e:	60d3      	str	r3, [r2, #12]
					break;
 8006490:	e3a0      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <extInt_Config+0x4d4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d106      	bne.n	80064ac <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <extInt_Config+0x4c0>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <extInt_Config+0x4c0>)
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	60d3      	str	r3, [r2, #12]
					break;
 80064aa:	e393      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a06      	ldr	r2, [pc, #24]	; (80064cc <extInt_Config+0x4bc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d106      	bne.n	80064c6 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <extInt_Config+0x4c0>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <extInt_Config+0x4c0>)
 80064be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80064c2:	60d3      	str	r3, [r2, #12]
					break;
 80064c4:	e386      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80064c6:	bf00      	nop
					break;
 80064c8:	e384      	b.n	8006bd4 <extInt_Config+0xbc4>
 80064ca:	bf00      	nop
 80064cc:	40021c00 	.word	0x40021c00
 80064d0:	40013800 	.word	0x40013800
 80064d4:	40020000 	.word	0x40020000
 80064d8:	40020400 	.word	0x40020400
 80064dc:	40020800 	.word	0x40020800
 80064e0:	40020c00 	.word	0x40020c00
 80064e4:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 80064e8:	4b86      	ldr	r3, [pc, #536]	; (8006704 <extInt_Config+0x6f4>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a85      	ldr	r2, [pc, #532]	; (8006704 <extInt_Config+0x6f4>)
 80064ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064f2:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a83      	ldr	r2, [pc, #524]	; (8006708 <extInt_Config+0x6f8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d104      	bne.n	800650a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006500:	4b80      	ldr	r3, [pc, #512]	; (8006704 <extInt_Config+0x6f4>)
 8006502:	4a80      	ldr	r2, [pc, #512]	; (8006704 <extInt_Config+0x6f4>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006508:	e364      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a7e      	ldr	r2, [pc, #504]	; (800670c <extInt_Config+0x6fc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d106      	bne.n	8006524 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006516:	4b7b      	ldr	r3, [pc, #492]	; (8006704 <extInt_Config+0x6f4>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4a7a      	ldr	r2, [pc, #488]	; (8006704 <extInt_Config+0x6f4>)
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	60d3      	str	r3, [r2, #12]
					break;
 8006522:	e357      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a79      	ldr	r2, [pc, #484]	; (8006710 <extInt_Config+0x700>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d106      	bne.n	800653e <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006530:	4b74      	ldr	r3, [pc, #464]	; (8006704 <extInt_Config+0x6f4>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	4a73      	ldr	r2, [pc, #460]	; (8006704 <extInt_Config+0x6f4>)
 8006536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653a:	60d3      	str	r3, [r2, #12]
					break;
 800653c:	e34a      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a73      	ldr	r2, [pc, #460]	; (8006714 <extInt_Config+0x704>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d106      	bne.n	8006558 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800654a:	4b6e      	ldr	r3, [pc, #440]	; (8006704 <extInt_Config+0x6f4>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4a6d      	ldr	r2, [pc, #436]	; (8006704 <extInt_Config+0x6f4>)
 8006550:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006554:	60d3      	str	r3, [r2, #12]
					break;
 8006556:	e33d      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6e      	ldr	r2, [pc, #440]	; (8006718 <extInt_Config+0x708>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d106      	bne.n	8006572 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006564:	4b67      	ldr	r3, [pc, #412]	; (8006704 <extInt_Config+0x6f4>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4a66      	ldr	r2, [pc, #408]	; (8006704 <extInt_Config+0x6f4>)
 800656a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800656e:	60d3      	str	r3, [r2, #12]
					break;
 8006570:	e330      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a68      	ldr	r2, [pc, #416]	; (800671c <extInt_Config+0x70c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d106      	bne.n	800658c <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800657e:	4b61      	ldr	r3, [pc, #388]	; (8006704 <extInt_Config+0x6f4>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4a60      	ldr	r2, [pc, #384]	; (8006704 <extInt_Config+0x6f4>)
 8006584:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006588:	60d3      	str	r3, [r2, #12]
					break;
 800658a:	e323      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 800658c:	bf00      	nop
					break;
 800658e:	e321      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8006590:	4b5c      	ldr	r3, [pc, #368]	; (8006704 <extInt_Config+0x6f4>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a5b      	ldr	r2, [pc, #364]	; (8006704 <extInt_Config+0x6f4>)
 8006596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a59      	ldr	r2, [pc, #356]	; (8006708 <extInt_Config+0x6f8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d104      	bne.n	80065b2 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80065a8:	4b56      	ldr	r3, [pc, #344]	; (8006704 <extInt_Config+0x6f4>)
 80065aa:	4a56      	ldr	r2, [pc, #344]	; (8006704 <extInt_Config+0x6f4>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80065b0:	e310      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a54      	ldr	r2, [pc, #336]	; (800670c <extInt_Config+0x6fc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d106      	bne.n	80065cc <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80065be:	4b51      	ldr	r3, [pc, #324]	; (8006704 <extInt_Config+0x6f4>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	4a50      	ldr	r2, [pc, #320]	; (8006704 <extInt_Config+0x6f4>)
 80065c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065c8:	60d3      	str	r3, [r2, #12]
					break;
 80065ca:	e303      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4f      	ldr	r2, [pc, #316]	; (8006710 <extInt_Config+0x700>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d106      	bne.n	80065e6 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80065d8:	4b4a      	ldr	r3, [pc, #296]	; (8006704 <extInt_Config+0x6f4>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a49      	ldr	r2, [pc, #292]	; (8006704 <extInt_Config+0x6f4>)
 80065de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065e2:	60d3      	str	r3, [r2, #12]
					break;
 80065e4:	e2f6      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a49      	ldr	r2, [pc, #292]	; (8006714 <extInt_Config+0x704>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d106      	bne.n	8006600 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80065f2:	4b44      	ldr	r3, [pc, #272]	; (8006704 <extInt_Config+0x6f4>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4a43      	ldr	r2, [pc, #268]	; (8006704 <extInt_Config+0x6f4>)
 80065f8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80065fc:	60d3      	str	r3, [r2, #12]
					break;
 80065fe:	e2e9      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a44      	ldr	r2, [pc, #272]	; (8006718 <extInt_Config+0x708>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d106      	bne.n	800661a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800660c:	4b3d      	ldr	r3, [pc, #244]	; (8006704 <extInt_Config+0x6f4>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <extInt_Config+0x6f4>)
 8006612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006616:	60d3      	str	r3, [r2, #12]
					break;
 8006618:	e2dc      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3e      	ldr	r2, [pc, #248]	; (800671c <extInt_Config+0x70c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d106      	bne.n	8006634 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006626:	4b37      	ldr	r3, [pc, #220]	; (8006704 <extInt_Config+0x6f4>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	4a36      	ldr	r2, [pc, #216]	; (8006704 <extInt_Config+0x6f4>)
 800662c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006630:	60d3      	str	r3, [r2, #12]
					break;
 8006632:	e2cf      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 8006634:	bf00      	nop
					break;
 8006636:	e2cd      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8006638:	4b32      	ldr	r3, [pc, #200]	; (8006704 <extInt_Config+0x6f4>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	4a31      	ldr	r2, [pc, #196]	; (8006704 <extInt_Config+0x6f4>)
 800663e:	f023 030f 	bic.w	r3, r3, #15
 8006642:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <extInt_Config+0x6f8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d104      	bne.n	800665a <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006650:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <extInt_Config+0x6f4>)
 8006652:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <extInt_Config+0x6f4>)
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006658:	e2bc      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2a      	ldr	r2, [pc, #168]	; (800670c <extInt_Config+0x6fc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d106      	bne.n	8006674 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006666:	4b27      	ldr	r3, [pc, #156]	; (8006704 <extInt_Config+0x6f4>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	4a26      	ldr	r2, [pc, #152]	; (8006704 <extInt_Config+0x6f4>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6113      	str	r3, [r2, #16]
					break;
 8006672:	e2af      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a25      	ldr	r2, [pc, #148]	; (8006710 <extInt_Config+0x700>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d106      	bne.n	800668e <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <extInt_Config+0x6f4>)
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <extInt_Config+0x6f4>)
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	6113      	str	r3, [r2, #16]
					break;
 800668c:	e2a2      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <extInt_Config+0x704>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d106      	bne.n	80066a8 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <extInt_Config+0x6f4>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	4a19      	ldr	r2, [pc, #100]	; (8006704 <extInt_Config+0x6f4>)
 80066a0:	f043 0303 	orr.w	r3, r3, #3
 80066a4:	6113      	str	r3, [r2, #16]
					break;
 80066a6:	e295      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <extInt_Config+0x708>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d106      	bne.n	80066c2 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80066b4:	4b13      	ldr	r3, [pc, #76]	; (8006704 <extInt_Config+0x6f4>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	4a12      	ldr	r2, [pc, #72]	; (8006704 <extInt_Config+0x6f4>)
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	6113      	str	r3, [r2, #16]
					break;
 80066c0:	e288      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a14      	ldr	r2, [pc, #80]	; (800671c <extInt_Config+0x70c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d106      	bne.n	80066dc <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <extInt_Config+0x6f4>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	4a0c      	ldr	r2, [pc, #48]	; (8006704 <extInt_Config+0x6f4>)
 80066d4:	f043 0307 	orr.w	r3, r3, #7
 80066d8:	6113      	str	r3, [r2, #16]
					break;
 80066da:	e27b      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80066dc:	bf00      	nop
					break;
 80066de:	e279      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80066e0:	4b08      	ldr	r3, [pc, #32]	; (8006704 <extInt_Config+0x6f4>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	4a07      	ldr	r2, [pc, #28]	; (8006704 <extInt_Config+0x6f4>)
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a05      	ldr	r2, [pc, #20]	; (8006708 <extInt_Config+0x6f8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d113      	bne.n	8006720 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80066f8:	4b02      	ldr	r3, [pc, #8]	; (8006704 <extInt_Config+0x6f4>)
 80066fa:	4a02      	ldr	r2, [pc, #8]	; (8006704 <extInt_Config+0x6f4>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006700:	e268      	b.n	8006bd4 <extInt_Config+0xbc4>
 8006702:	bf00      	nop
 8006704:	40013800 	.word	0x40013800
 8006708:	40020000 	.word	0x40020000
 800670c:	40020400 	.word	0x40020400
 8006710:	40020800 	.word	0x40020800
 8006714:	40020c00 	.word	0x40020c00
 8006718:	40021000 	.word	0x40021000
 800671c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a83      	ldr	r2, [pc, #524]	; (8006934 <extInt_Config+0x924>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d106      	bne.n	800673a <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800672c:	4b82      	ldr	r3, [pc, #520]	; (8006938 <extInt_Config+0x928>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	4a81      	ldr	r2, [pc, #516]	; (8006938 <extInt_Config+0x928>)
 8006732:	f043 0310 	orr.w	r3, r3, #16
 8006736:	6113      	str	r3, [r2, #16]
					break;
 8006738:	e24c      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a7e      	ldr	r2, [pc, #504]	; (800693c <extInt_Config+0x92c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d106      	bne.n	8006754 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006746:	4b7c      	ldr	r3, [pc, #496]	; (8006938 <extInt_Config+0x928>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	4a7b      	ldr	r2, [pc, #492]	; (8006938 <extInt_Config+0x928>)
 800674c:	f043 0320 	orr.w	r3, r3, #32
 8006750:	6113      	str	r3, [r2, #16]
					break;
 8006752:	e23f      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a79      	ldr	r2, [pc, #484]	; (8006940 <extInt_Config+0x930>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d106      	bne.n	800676e <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006760:	4b75      	ldr	r3, [pc, #468]	; (8006938 <extInt_Config+0x928>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	4a74      	ldr	r2, [pc, #464]	; (8006938 <extInt_Config+0x928>)
 8006766:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800676a:	6113      	str	r3, [r2, #16]
					break;
 800676c:	e232      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a73      	ldr	r2, [pc, #460]	; (8006944 <extInt_Config+0x934>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d106      	bne.n	8006788 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800677a:	4b6f      	ldr	r3, [pc, #444]	; (8006938 <extInt_Config+0x928>)
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	4a6e      	ldr	r2, [pc, #440]	; (8006938 <extInt_Config+0x928>)
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	6113      	str	r3, [r2, #16]
					break;
 8006786:	e225      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6e      	ldr	r2, [pc, #440]	; (8006948 <extInt_Config+0x938>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d106      	bne.n	80067a2 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006794:	4b68      	ldr	r3, [pc, #416]	; (8006938 <extInt_Config+0x928>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	4a67      	ldr	r2, [pc, #412]	; (8006938 <extInt_Config+0x928>)
 800679a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800679e:	6113      	str	r3, [r2, #16]
					break;
 80067a0:	e218      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80067a2:	bf00      	nop
					break;
 80067a4:	e216      	b.n	8006bd4 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80067a6:	4b64      	ldr	r3, [pc, #400]	; (8006938 <extInt_Config+0x928>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	4a63      	ldr	r2, [pc, #396]	; (8006938 <extInt_Config+0x928>)
 80067ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067b0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a64      	ldr	r2, [pc, #400]	; (800694c <extInt_Config+0x93c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d104      	bne.n	80067c8 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80067be:	4b5e      	ldr	r3, [pc, #376]	; (8006938 <extInt_Config+0x928>)
 80067c0:	4a5d      	ldr	r2, [pc, #372]	; (8006938 <extInt_Config+0x928>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80067c6:	e205      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a59      	ldr	r2, [pc, #356]	; (8006934 <extInt_Config+0x924>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d106      	bne.n	80067e2 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80067d4:	4b58      	ldr	r3, [pc, #352]	; (8006938 <extInt_Config+0x928>)
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	4a57      	ldr	r2, [pc, #348]	; (8006938 <extInt_Config+0x928>)
 80067da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067de:	6113      	str	r3, [r2, #16]
					break;
 80067e0:	e1f8      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a54      	ldr	r2, [pc, #336]	; (800693c <extInt_Config+0x92c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d106      	bne.n	80067fc <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80067ee:	4b52      	ldr	r3, [pc, #328]	; (8006938 <extInt_Config+0x928>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	4a51      	ldr	r2, [pc, #324]	; (8006938 <extInt_Config+0x928>)
 80067f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f8:	6113      	str	r3, [r2, #16]
					break;
 80067fa:	e1eb      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a4f      	ldr	r2, [pc, #316]	; (8006940 <extInt_Config+0x930>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d106      	bne.n	8006816 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006808:	4b4b      	ldr	r3, [pc, #300]	; (8006938 <extInt_Config+0x928>)
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	4a4a      	ldr	r2, [pc, #296]	; (8006938 <extInt_Config+0x928>)
 800680e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006812:	6113      	str	r3, [r2, #16]
					break;
 8006814:	e1de      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a49      	ldr	r2, [pc, #292]	; (8006944 <extInt_Config+0x934>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d106      	bne.n	8006830 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006822:	4b45      	ldr	r3, [pc, #276]	; (8006938 <extInt_Config+0x928>)
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	4a44      	ldr	r2, [pc, #272]	; (8006938 <extInt_Config+0x928>)
 8006828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682c:	6113      	str	r3, [r2, #16]
					break;
 800682e:	e1d1      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a44      	ldr	r2, [pc, #272]	; (8006948 <extInt_Config+0x938>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d106      	bne.n	800684a <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800683c:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <extInt_Config+0x928>)
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4a3d      	ldr	r2, [pc, #244]	; (8006938 <extInt_Config+0x928>)
 8006842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006846:	6113      	str	r3, [r2, #16]
					break;
 8006848:	e1c4      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 800684a:	bf00      	nop
					break;
 800684c:	e1c2      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 800684e:	4b3a      	ldr	r3, [pc, #232]	; (8006938 <extInt_Config+0x928>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a39      	ldr	r2, [pc, #228]	; (8006938 <extInt_Config+0x928>)
 8006854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006858:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3a      	ldr	r2, [pc, #232]	; (800694c <extInt_Config+0x93c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d104      	bne.n	8006870 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8006866:	4b34      	ldr	r3, [pc, #208]	; (8006938 <extInt_Config+0x928>)
 8006868:	4a33      	ldr	r2, [pc, #204]	; (8006938 <extInt_Config+0x928>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800686e:	e1b1      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <extInt_Config+0x924>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d106      	bne.n	800688a <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800687c:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <extInt_Config+0x928>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	4a2d      	ldr	r2, [pc, #180]	; (8006938 <extInt_Config+0x928>)
 8006882:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006886:	6113      	str	r3, [r2, #16]
					break;
 8006888:	e1a4      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2a      	ldr	r2, [pc, #168]	; (800693c <extInt_Config+0x92c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d106      	bne.n	80068a4 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006896:	4b28      	ldr	r3, [pc, #160]	; (8006938 <extInt_Config+0x928>)
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	4a27      	ldr	r2, [pc, #156]	; (8006938 <extInt_Config+0x928>)
 800689c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068a0:	6113      	str	r3, [r2, #16]
					break;
 80068a2:	e197      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a25      	ldr	r2, [pc, #148]	; (8006940 <extInt_Config+0x930>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d106      	bne.n	80068be <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <extInt_Config+0x928>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <extInt_Config+0x928>)
 80068b6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80068ba:	6113      	str	r3, [r2, #16]
					break;
 80068bc:	e18a      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <extInt_Config+0x934>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d106      	bne.n	80068d8 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <extInt_Config+0x928>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	4a1a      	ldr	r2, [pc, #104]	; (8006938 <extInt_Config+0x928>)
 80068d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d4:	6113      	str	r3, [r2, #16]
					break;
 80068d6:	e17d      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <extInt_Config+0x938>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d106      	bne.n	80068f2 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80068e4:	4b14      	ldr	r3, [pc, #80]	; (8006938 <extInt_Config+0x928>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <extInt_Config+0x928>)
 80068ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80068ee:	6113      	str	r3, [r2, #16]
					break;
 80068f0:	e170      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80068f2:	bf00      	nop
					break;
 80068f4:	e16e      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <extInt_Config+0x928>)
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <extInt_Config+0x928>)
 80068fc:	f023 030f 	bic.w	r3, r3, #15
 8006900:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a10      	ldr	r2, [pc, #64]	; (800694c <extInt_Config+0x93c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d104      	bne.n	8006918 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <extInt_Config+0x928>)
 8006910:	4a09      	ldr	r2, [pc, #36]	; (8006938 <extInt_Config+0x928>)
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006916:	e15d      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a05      	ldr	r2, [pc, #20]	; (8006934 <extInt_Config+0x924>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d115      	bne.n	8006950 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <extInt_Config+0x928>)
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	4a03      	ldr	r2, [pc, #12]	; (8006938 <extInt_Config+0x928>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6153      	str	r3, [r2, #20]
					break;
 8006930:	e150      	b.n	8006bd4 <extInt_Config+0xbc4>
 8006932:	bf00      	nop
 8006934:	40020400 	.word	0x40020400
 8006938:	40013800 	.word	0x40013800
 800693c:	40020800 	.word	0x40020800
 8006940:	40020c00 	.word	0x40020c00
 8006944:	40021000 	.word	0x40021000
 8006948:	40021c00 	.word	0x40021c00
 800694c:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a89      	ldr	r2, [pc, #548]	; (8006b7c <extInt_Config+0xb6c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d106      	bne.n	800696a <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800695c:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <extInt_Config+0xb70>)
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	4a87      	ldr	r2, [pc, #540]	; (8006b80 <extInt_Config+0xb70>)
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	6153      	str	r3, [r2, #20]
					break;
 8006968:	e134      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a84      	ldr	r2, [pc, #528]	; (8006b84 <extInt_Config+0xb74>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d106      	bne.n	8006984 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8006976:	4b82      	ldr	r3, [pc, #520]	; (8006b80 <extInt_Config+0xb70>)
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	4a81      	ldr	r2, [pc, #516]	; (8006b80 <extInt_Config+0xb70>)
 800697c:	f043 0303 	orr.w	r3, r3, #3
 8006980:	6153      	str	r3, [r2, #20]
					break;
 8006982:	e127      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a7f      	ldr	r2, [pc, #508]	; (8006b88 <extInt_Config+0xb78>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d106      	bne.n	800699e <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006990:	4b7b      	ldr	r3, [pc, #492]	; (8006b80 <extInt_Config+0xb70>)
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	4a7a      	ldr	r2, [pc, #488]	; (8006b80 <extInt_Config+0xb70>)
 8006996:	f043 0304 	orr.w	r3, r3, #4
 800699a:	6153      	str	r3, [r2, #20]
					break;
 800699c:	e11a      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a79      	ldr	r2, [pc, #484]	; (8006b8c <extInt_Config+0xb7c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d106      	bne.n	80069b8 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80069aa:	4b75      	ldr	r3, [pc, #468]	; (8006b80 <extInt_Config+0xb70>)
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4a74      	ldr	r2, [pc, #464]	; (8006b80 <extInt_Config+0xb70>)
 80069b0:	f043 0307 	orr.w	r3, r3, #7
 80069b4:	6153      	str	r3, [r2, #20]
					break;
 80069b6:	e10d      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 80069b8:	bf00      	nop
					break;
 80069ba:	e10b      	b.n	8006bd4 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80069bc:	4b70      	ldr	r3, [pc, #448]	; (8006b80 <extInt_Config+0xb70>)
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	4a6f      	ldr	r2, [pc, #444]	; (8006b80 <extInt_Config+0xb70>)
 80069c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c6:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a70      	ldr	r2, [pc, #448]	; (8006b90 <extInt_Config+0xb80>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d104      	bne.n	80069de <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80069d4:	4b6a      	ldr	r3, [pc, #424]	; (8006b80 <extInt_Config+0xb70>)
 80069d6:	4a6a      	ldr	r2, [pc, #424]	; (8006b80 <extInt_Config+0xb70>)
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	6153      	str	r3, [r2, #20]
 80069dc:	e041      	b.n	8006a62 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a6b      	ldr	r2, [pc, #428]	; (8006b94 <extInt_Config+0xb84>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d106      	bne.n	80069f8 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80069ea:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <extInt_Config+0xb70>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	4a64      	ldr	r2, [pc, #400]	; (8006b80 <extInt_Config+0xb70>)
 80069f0:	f043 0310 	orr.w	r3, r3, #16
 80069f4:	6153      	str	r3, [r2, #20]
 80069f6:	e034      	b.n	8006a62 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a5f      	ldr	r2, [pc, #380]	; (8006b7c <extInt_Config+0xb6c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d106      	bne.n	8006a12 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006a04:	4b5e      	ldr	r3, [pc, #376]	; (8006b80 <extInt_Config+0xb70>)
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	4a5d      	ldr	r2, [pc, #372]	; (8006b80 <extInt_Config+0xb70>)
 8006a0a:	f043 0320 	orr.w	r3, r3, #32
 8006a0e:	6153      	str	r3, [r2, #20]
 8006a10:	e027      	b.n	8006a62 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5a      	ldr	r2, [pc, #360]	; (8006b84 <extInt_Config+0xb74>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d106      	bne.n	8006a2c <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006a1e:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <extInt_Config+0xb70>)
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	4a57      	ldr	r2, [pc, #348]	; (8006b80 <extInt_Config+0xb70>)
 8006a24:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006a28:	6153      	str	r3, [r2, #20]
 8006a2a:	e01a      	b.n	8006a62 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a55      	ldr	r2, [pc, #340]	; (8006b88 <extInt_Config+0xb78>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d106      	bne.n	8006a46 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006a38:	4b51      	ldr	r3, [pc, #324]	; (8006b80 <extInt_Config+0xb70>)
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	4a50      	ldr	r2, [pc, #320]	; (8006b80 <extInt_Config+0xb70>)
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	6153      	str	r3, [r2, #20]
 8006a44:	e00d      	b.n	8006a62 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <extInt_Config+0xb7c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d106      	bne.n	8006a60 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006a52:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <extInt_Config+0xb70>)
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	4a4a      	ldr	r2, [pc, #296]	; (8006b80 <extInt_Config+0xb70>)
 8006a58:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006a5c:	6153      	str	r3, [r2, #20]
 8006a5e:	e000      	b.n	8006a62 <extInt_Config+0xa52>

					} else {
						__NOP();
 8006a60:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8006a62:	4b47      	ldr	r3, [pc, #284]	; (8006b80 <extInt_Config+0xb70>)
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4a46      	ldr	r2, [pc, #280]	; (8006b80 <extInt_Config+0xb70>)
 8006a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a6c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a46      	ldr	r2, [pc, #280]	; (8006b90 <extInt_Config+0xb80>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d104      	bne.n	8006a84 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8006a7a:	4b41      	ldr	r3, [pc, #260]	; (8006b80 <extInt_Config+0xb70>)
 8006a7c:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <extInt_Config+0xb70>)
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006a82:	e0a7      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a42      	ldr	r2, [pc, #264]	; (8006b94 <extInt_Config+0xb84>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d106      	bne.n	8006a9e <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8006a90:	4b3b      	ldr	r3, [pc, #236]	; (8006b80 <extInt_Config+0xb70>)
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <extInt_Config+0xb70>)
 8006a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a9a:	6153      	str	r3, [r2, #20]
					break;
 8006a9c:	e09a      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a35      	ldr	r2, [pc, #212]	; (8006b7c <extInt_Config+0xb6c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d106      	bne.n	8006ab8 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8006aaa:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <extInt_Config+0xb70>)
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4a34      	ldr	r2, [pc, #208]	; (8006b80 <extInt_Config+0xb70>)
 8006ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ab4:	6153      	str	r3, [r2, #20]
					break;
 8006ab6:	e08d      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a31      	ldr	r2, [pc, #196]	; (8006b84 <extInt_Config+0xb74>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d106      	bne.n	8006ad2 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006ac4:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <extInt_Config+0xb70>)
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	4a2d      	ldr	r2, [pc, #180]	; (8006b80 <extInt_Config+0xb70>)
 8006aca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ace:	6153      	str	r3, [r2, #20]
					break;
 8006ad0:	e080      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <extInt_Config+0xb78>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d106      	bne.n	8006aec <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <extInt_Config+0xb70>)
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <extInt_Config+0xb70>)
 8006ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ae8:	6153      	str	r3, [r2, #20]
					break;
 8006aea:	e073      	b.n	8006bd4 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <extInt_Config+0xb7c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d106      	bne.n	8006b06 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006af8:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <extInt_Config+0xb70>)
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <extInt_Config+0xb70>)
 8006afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b02:	6153      	str	r3, [r2, #20]
					break;
 8006b04:	e066      	b.n	8006bd4 <extInt_Config+0xbc4>
						__NOP();
 8006b06:	bf00      	nop
					break;
 8006b08:	e064      	b.n	8006bd4 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <extInt_Config+0xb70>)
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <extInt_Config+0xb70>)
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b14:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <extInt_Config+0xb80>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d104      	bne.n	8006b2c <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006b22:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <extInt_Config+0xb70>)
 8006b24:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <extInt_Config+0xb70>)
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8006b2a:	e053      	b.n	8006bd4 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <extInt_Config+0xb84>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d106      	bne.n	8006b46 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <extInt_Config+0xb70>)
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <extInt_Config+0xb70>)
 8006b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b42:	6153      	str	r3, [r2, #20]
						break;
 8006b44:	e046      	b.n	8006bd4 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <extInt_Config+0xb6c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d106      	bne.n	8006b60 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <extInt_Config+0xb70>)
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <extInt_Config+0xb70>)
 8006b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b5c:	6153      	str	r3, [r2, #20]
						break;
 8006b5e:	e039      	b.n	8006bd4 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a07      	ldr	r2, [pc, #28]	; (8006b84 <extInt_Config+0xb74>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d115      	bne.n	8006b98 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <extInt_Config+0xb70>)
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4a03      	ldr	r2, [pc, #12]	; (8006b80 <extInt_Config+0xb70>)
 8006b72:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006b76:	6153      	str	r3, [r2, #20]
						break;
 8006b78:	e02c      	b.n	8006bd4 <extInt_Config+0xbc4>
 8006b7a:	bf00      	nop
 8006b7c:	40020800 	.word	0x40020800
 8006b80:	40013800 	.word	0x40013800
 8006b84:	40020c00 	.word	0x40020c00
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40021c00 	.word	0x40021c00
 8006b90:	40020000 	.word	0x40020000
 8006b94:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6c      	ldr	r2, [pc, #432]	; (8006d50 <extInt_Config+0xd40>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d106      	bne.n	8006bb2 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006ba4:	4b6b      	ldr	r3, [pc, #428]	; (8006d54 <extInt_Config+0xd44>)
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	4a6a      	ldr	r2, [pc, #424]	; (8006d54 <extInt_Config+0xd44>)
 8006baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bae:	6153      	str	r3, [r2, #20]
						break;
 8006bb0:	e010      	b.n	8006bd4 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a67      	ldr	r2, [pc, #412]	; (8006d58 <extInt_Config+0xd48>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d106      	bne.n	8006bcc <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006bbe:	4b65      	ldr	r3, [pc, #404]	; (8006d54 <extInt_Config+0xd44>)
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	4a64      	ldr	r2, [pc, #400]	; (8006d54 <extInt_Config+0xd44>)
 8006bc4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006bc8:	6153      	str	r3, [r2, #20]
						break;
 8006bca:	e003      	b.n	8006bd4 <extInt_Config+0xbc4>
							__NOP();
 8006bcc:	bf00      	nop
						break;
 8006bce:	e001      	b.n	8006bd4 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8006bd0:	bf00      	nop
						break;
 8006bd2:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	791b      	ldrb	r3, [r3, #4]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d020      	beq.n	8006c1e <extInt_Config+0xc0e>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	dc37      	bgt.n	8006c50 <extInt_Config+0xc40>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <extInt_Config+0xbda>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d00d      	beq.n	8006c04 <extInt_Config+0xbf4>
 8006be8:	e032      	b.n	8006c50 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006bea:	4b5c      	ldr	r3, [pc, #368]	; (8006d5c <extInt_Config+0xd4c>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	7912      	ldrb	r2, [r2, #4]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	408a      	lsls	r2, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4a57      	ldr	r2, [pc, #348]	; (8006d5c <extInt_Config+0xd4c>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	60d3      	str	r3, [r2, #12]

		break;
 8006c02:	e027      	b.n	8006c54 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c04:	4b55      	ldr	r3, [pc, #340]	; (8006d5c <extInt_Config+0xd4c>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	7912      	ldrb	r2, [r2, #4]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	2201      	movs	r2, #1
 8006c12:	408a      	lsls	r2, r1
 8006c14:	4611      	mov	r1, r2
 8006c16:	4a51      	ldr	r2, [pc, #324]	; (8006d5c <extInt_Config+0xd4c>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6093      	str	r3, [r2, #8]

		break;
 8006c1c:	e01a      	b.n	8006c54 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c1e:	4b4f      	ldr	r3, [pc, #316]	; (8006d5c <extInt_Config+0xd4c>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	7912      	ldrb	r2, [r2, #4]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	408a      	lsls	r2, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4a4a      	ldr	r2, [pc, #296]	; (8006d5c <extInt_Config+0xd4c>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c36:	4b49      	ldr	r3, [pc, #292]	; (8006d5c <extInt_Config+0xd4c>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	7912      	ldrb	r2, [r2, #4]
 8006c40:	4611      	mov	r1, r2
 8006c42:	2201      	movs	r2, #1
 8006c44:	408a      	lsls	r2, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	4a44      	ldr	r2, [pc, #272]	; (8006d5c <extInt_Config+0xd4c>)
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	6093      	str	r3, [r2, #8]

		break;
 8006c4e:	e001      	b.n	8006c54 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8006c50:	bf00      	nop
		break;
 8006c52:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8006c54:	b672      	cpsid	i
}
 8006c56:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c58:	4b40      	ldr	r3, [pc, #256]	; (8006d5c <extInt_Config+0xd4c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	7912      	ldrb	r2, [r2, #4]
 8006c62:	4611      	mov	r1, r2
 8006c64:	2201      	movs	r2, #1
 8006c66:	408a      	lsls	r2, r1
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4a3c      	ldr	r2, [pc, #240]	; (8006d5c <extInt_Config+0xd4c>)
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d862      	bhi.n	8006d40 <extInt_Config+0xd30>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <extInt_Config+0xc70>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	08006cd1 	.word	0x08006cd1
 8006c8c:	08006cd9 	.word	0x08006cd9
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006cf1 	.word	0x08006cf1
 8006c9c:	08006cf9 	.word	0x08006cf9
 8006ca0:	08006d01 	.word	0x08006d01
 8006ca4:	08006d09 	.word	0x08006d09
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006d21 	.word	0x08006d21
 8006cb4:	08006d29 	.word	0x08006d29
 8006cb8:	08006d31 	.word	0x08006d31
 8006cbc:	08006d39 	.word	0x08006d39
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8006cc0:	2006      	movs	r0, #6
 8006cc2:	f7ff f987 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cc6:	e03d      	b.n	8006d44 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8006cc8:	2007      	movs	r0, #7
 8006cca:	f7ff f983 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cce:	e039      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8006cd0:	2008      	movs	r0, #8
 8006cd2:	f7ff f97f 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cd6:	e035      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8006cd8:	2009      	movs	r0, #9
 8006cda:	f7ff f97b 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cde:	e031      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8006ce0:	200a      	movs	r0, #10
 8006ce2:	f7ff f977 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006ce6:	e02d      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006ce8:	2017      	movs	r0, #23
 8006cea:	f7ff f973 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cee:	e029      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cf0:	2017      	movs	r0, #23
 8006cf2:	f7ff f96f 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cf6:	e025      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cf8:	2017      	movs	r0, #23
 8006cfa:	f7ff f96b 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006cfe:	e021      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d00:	2017      	movs	r0, #23
 8006d02:	f7ff f967 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d06:	e01d      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d08:	2017      	movs	r0, #23
 8006d0a:	f7ff f963 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d0e:	e019      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d10:	2028      	movs	r0, #40	; 0x28
 8006d12:	f7ff f95f 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d16:	e015      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d18:	2028      	movs	r0, #40	; 0x28
 8006d1a:	f7ff f95b 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d1e:	e011      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d20:	2028      	movs	r0, #40	; 0x28
 8006d22:	f7ff f957 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d26:	e00d      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d28:	2028      	movs	r0, #40	; 0x28
 8006d2a:	f7ff f953 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d2e:	e009      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d30:	2028      	movs	r0, #40	; 0x28
 8006d32:	f7ff f94f 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d36:	e005      	b.n	8006d44 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d38:	2028      	movs	r0, #40	; 0x28
 8006d3a:	f7ff f94b 	bl	8005fd4 <__NVIC_EnableIRQ>
			break;
 8006d3e:	e001      	b.n	8006d44 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8006d40:	bf00      	nop
			break;
 8006d42:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006d44:	b662      	cpsie	i
}
 8006d46:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40013800 	.word	0x40013800
 8006d58:	40021c00 	.word	0x40021c00
 8006d5c:	40013c00 	.word	0x40013c00

08006d60 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
	__NOP();
 8006d64:	bf00      	nop
}
 8006d66:	bf00      	nop
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
	__NOP();
 8006d74:	bf00      	nop
}
 8006d76:	bf00      	nop
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
	__NOP();
 8006d84:	bf00      	nop
}
 8006d86:	bf00      	nop
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
	__NOP();
 8006d94:	bf00      	nop
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
	__NOP();
 8006da4:	bf00      	nop
}
 8006da6:	bf00      	nop
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
	__NOP();
 8006db4:	bf00      	nop
}
 8006db6:	bf00      	nop
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
	__NOP();
 8006dc4:	bf00      	nop
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
	__NOP();
 8006dd4:	bf00      	nop
}
 8006dd6:	bf00      	nop
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
	__NOP();
 8006de4:	bf00      	nop
}
 8006de6:	bf00      	nop
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
	__NOP();
 8006df4:	bf00      	nop
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
	__NOP();
 8006e04:	bf00      	nop
}
 8006e06:	bf00      	nop
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
	__NOP();
 8006e14:	bf00      	nop
}
 8006e16:	bf00      	nop
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
	__NOP();
 8006e24:	bf00      	nop
}
 8006e26:	bf00      	nop
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
	__NOP();
 8006e34:	bf00      	nop
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8006e44:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <EXTI0_IRQHandler+0x24>)
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <EXTI0_IRQHandler+0x24>)
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4a03      	ldr	r2, [pc, #12]	; (8006e64 <EXTI0_IRQHandler+0x24>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8006e5c:	f7ff ff80 	bl	8006d60 <callback_extInt0>
	}
}
 8006e60:	bf00      	nop
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40013c00 	.word	0x40013c00

08006e68 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <EXTI1_IRQHandler+0x24>)
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <EXTI1_IRQHandler+0x24>)
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	4a03      	ldr	r2, [pc, #12]	; (8006e8c <EXTI1_IRQHandler+0x24>)
 8006e7e:	f043 0302 	orr.w	r3, r3, #2
 8006e82:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8006e84:	f7fa ff12 	bl	8001cac <callback_extInt1>
	}
}
 8006e88:	bf00      	nop
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40013c00 	.word	0x40013c00

08006e90 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <EXTI2_IRQHandler+0x24>)
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <EXTI2_IRQHandler+0x24>)
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <EXTI2_IRQHandler+0x24>)
 8006ea6:	f043 0304 	orr.w	r3, r3, #4
 8006eaa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8006eac:	f7ff ff60 	bl	8006d70 <callback_extInt2>
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40013c00 	.word	0x40013c00

08006eb8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8006ebc:	4b07      	ldr	r3, [pc, #28]	; (8006edc <EXTI3_IRQHandler+0x24>)
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <EXTI3_IRQHandler+0x24>)
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	4a03      	ldr	r2, [pc, #12]	; (8006edc <EXTI3_IRQHandler+0x24>)
 8006ece:	f043 0308 	orr.w	r3, r3, #8
 8006ed2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006ed4:	f7fa ff00 	bl	8001cd8 <callback_extInt3>
	}
}
 8006ed8:	bf00      	nop
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40013c00 	.word	0x40013c00

08006ee0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <EXTI4_IRQHandler+0x24>)
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8006ef0:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <EXTI4_IRQHandler+0x24>)
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	4a03      	ldr	r2, [pc, #12]	; (8006f04 <EXTI4_IRQHandler+0x24>)
 8006ef6:	f043 0310 	orr.w	r3, r3, #16
 8006efa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8006efc:	f7ff ff40 	bl	8006d80 <callback_extInt4>
	}
}
 8006f00:	bf00      	nop
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40013c00 	.word	0x40013c00

08006f08 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8006f0c:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f1e:	f043 0320 	orr.w	r3, r3, #32
 8006f22:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8006f24:	f7ff ff34 	bl	8006d90 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8006f28:	e03c      	b.n	8006fa4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8006f2a:	4b1f      	ldr	r3, [pc, #124]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8006f36:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f40:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8006f42:	f7ff ff2d 	bl	8006da0 <callback_extInt6>
}
 8006f46:	e02d      	b.n	8006fa4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8006f48:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5e:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8006f60:	f7ff ff26 	bl	8006db0 <callback_extInt7>
}
 8006f64:	e01e      	b.n	8006fa4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8006f66:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8006f72:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7c:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8006f7e:	f7ff ff1f 	bl	8006dc0 <callback_extInt8>
}
 8006f82:	e00f      	b.n	8006fa4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8006f84:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d008      	beq.n	8006fa2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <EXTI9_5_IRQHandler+0xa0>)
 8006f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f9a:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8006f9c:	f7ff ff18 	bl	8006dd0 <callback_extInt9>
}
 8006fa0:	e000      	b.n	8006fa4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006fa2:	bf00      	nop
}
 8006fa4:	bf00      	nop
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40013c00 	.word	0x40013c00

08006fac <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fc6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8006fc8:	f7ff ff0a 	bl	8006de0 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8006fcc:	e049      	b.n	8007062 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8006fce:	4b26      	ldr	r3, [pc, #152]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fe4:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8006fe6:	f7ff ff03 	bl	8006df0 <callback_extInt11>
}
 8006fea:	e03a      	b.n	8007062 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8006fec:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8006ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007002:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8007004:	f7ff fefc 	bl	8006e00 <callback_extInt12>
}
 8007008:	e02b      	b.n	8007062 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4a13      	ldr	r2, [pc, #76]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 800701c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007020:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8007022:	f7ff fef5 	bl	8006e10 <callback_extInt13>
}
 8007026:	e01c      	b.n	8007062 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 800703a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800703e:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007040:	f7ff feee 	bl	8006e20 <callback_extInt14>
}
 8007044:	e00d      	b.n	8007062 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	4a04      	ldr	r2, [pc, #16]	; (8007068 <EXTI15_10_IRQHandler+0xbc>)
 8007058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705c:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800705e:	f7ff fee7 	bl	8006e30 <callback_extInt15>
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40013c00 	.word	0x40013c00

0800706c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a88      	ldr	r2, [pc, #544]	; (80072a4 <GPIO_Config+0x238>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d106      	bne.n	8007094 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8007086:	4b88      	ldr	r3, [pc, #544]	; (80072a8 <GPIO_Config+0x23c>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	4a87      	ldr	r2, [pc, #540]	; (80072a8 <GPIO_Config+0x23c>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	6313      	str	r3, [r2, #48]	; 0x30
 8007092:	e03a      	b.n	800710a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a84      	ldr	r2, [pc, #528]	; (80072ac <GPIO_Config+0x240>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d106      	bne.n	80070ac <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800709e:	4b82      	ldr	r3, [pc, #520]	; (80072a8 <GPIO_Config+0x23c>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	4a81      	ldr	r2, [pc, #516]	; (80072a8 <GPIO_Config+0x23c>)
 80070a4:	f043 0302 	orr.w	r3, r3, #2
 80070a8:	6313      	str	r3, [r2, #48]	; 0x30
 80070aa:	e02e      	b.n	800710a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a7f      	ldr	r2, [pc, #508]	; (80072b0 <GPIO_Config+0x244>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d106      	bne.n	80070c4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80070b6:	4b7c      	ldr	r3, [pc, #496]	; (80072a8 <GPIO_Config+0x23c>)
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	4a7b      	ldr	r2, [pc, #492]	; (80072a8 <GPIO_Config+0x23c>)
 80070bc:	f043 0304 	orr.w	r3, r3, #4
 80070c0:	6313      	str	r3, [r2, #48]	; 0x30
 80070c2:	e022      	b.n	800710a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7a      	ldr	r2, [pc, #488]	; (80072b4 <GPIO_Config+0x248>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d106      	bne.n	80070dc <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80070ce:	4b76      	ldr	r3, [pc, #472]	; (80072a8 <GPIO_Config+0x23c>)
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	4a75      	ldr	r2, [pc, #468]	; (80072a8 <GPIO_Config+0x23c>)
 80070d4:	f043 0308 	orr.w	r3, r3, #8
 80070d8:	6313      	str	r3, [r2, #48]	; 0x30
 80070da:	e016      	b.n	800710a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a75      	ldr	r2, [pc, #468]	; (80072b8 <GPIO_Config+0x24c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d106      	bne.n	80070f4 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80070e6:	4b70      	ldr	r3, [pc, #448]	; (80072a8 <GPIO_Config+0x23c>)
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	4a6f      	ldr	r2, [pc, #444]	; (80072a8 <GPIO_Config+0x23c>)
 80070ec:	f043 0310 	orr.w	r3, r3, #16
 80070f0:	6313      	str	r3, [r2, #48]	; 0x30
 80070f2:	e00a      	b.n	800710a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a70      	ldr	r2, [pc, #448]	; (80072bc <GPIO_Config+0x250>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d105      	bne.n	800710a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80070fe:	4b6a      	ldr	r3, [pc, #424]	; (80072a8 <GPIO_Config+0x23c>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	4a69      	ldr	r2, [pc, #420]	; (80072a8 <GPIO_Config+0x23c>)
 8007104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	795b      	ldrb	r3, [r3, #5]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d143      	bne.n	800719a <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	791b      	ldrb	r3, [r3, #4]
 8007116:	2b07      	cmp	r3, #7
 8007118:	d81f      	bhi.n	800715a <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	791b      	ldrb	r3, [r3, #4]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a1a      	ldr	r2, [r3, #32]
 8007128:	210f      	movs	r1, #15
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	43db      	mvns	r3, r3
 8007132:	4619      	mov	r1, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	400a      	ands	r2, r1
 800713a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	7a5b      	ldrb	r3, [r3, #9]
 8007146:	4619      	mov	r1, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	4619      	mov	r1, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	621a      	str	r2, [r3, #32]
 8007158:	e01f      	b.n	800719a <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	791b      	ldrb	r3, [r3, #4]
 800715e:	3b08      	subs	r3, #8
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800716a:	210f      	movs	r1, #15
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	43db      	mvns	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	400a      	ands	r2, r1
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7a5b      	ldrb	r3, [r3, #9]
 8007188:	4619      	mov	r1, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	fa01 f303 	lsl.w	r3, r1, r3
 8007190:	4619      	mov	r1, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	795b      	ldrb	r3, [r3, #5]
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	2103      	movs	r1, #3
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	43db      	mvns	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	400a      	ands	r2, r1
 80071c8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7a1b      	ldrb	r3, [r3, #8]
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	791b      	ldrb	r3, [r3, #4]
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	791b      	ldrb	r3, [r3, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	2301      	movs	r3, #1
 80071f8:	408b      	lsls	r3, r1
 80071fa:	43db      	mvns	r3, r3
 80071fc:	4619      	mov	r1, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	400a      	ands	r2, r1
 8007204:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	799b      	ldrb	r3, [r3, #6]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	791b      	ldrb	r3, [r3, #4]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	791b      	ldrb	r3, [r3, #4]
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	2103      	movs	r1, #3
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	400a      	ands	r2, r1
 8007244:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6899      	ldr	r1, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	430a      	orrs	r2, r1
 8007254:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	79db      	ldrb	r3, [r3, #7]
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	2103      	movs	r1, #3
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	43db      	mvns	r3, r3
 800727c:	4619      	mov	r1, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	400a      	ands	r2, r1
 8007284:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68d9      	ldr	r1, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	430a      	orrs	r2, r1
 8007294:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40020000 	.word	0x40020000
 80072a8:	40023800 	.word	0x40023800
 80072ac:	40020400 	.word	0x40020400
 80072b0:	40020800 	.word	0x40020800
 80072b4:	40020c00 	.word	0x40020c00
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40021c00 	.word	0x40021c00

080072c0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10d      	bne.n	80072ee <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	4619      	mov	r1, r3
 80072de:	2301      	movs	r3, #1
 80072e0:	408b      	lsls	r3, r1
 80072e2:	4619      	mov	r1, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80072ec:	e00d      	b.n	800730a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	791b      	ldrb	r3, [r3, #4]
 80072f8:	3310      	adds	r3, #16
 80072fa:	2101      	movs	r1, #1
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	4619      	mov	r1, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	619a      	str	r2, [r3, #24]
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	791b      	ldrb	r3, [r3, #4]
 8007332:	4619      	mov	r1, r3
 8007334:	2301      	movs	r3, #1
 8007336:	408b      	lsls	r3, r1
 8007338:	4619      	mov	r1, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007342:	e00d      	b.n	8007360 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	791b      	ldrb	r3, [r3, #4]
 800734e:	3310      	adds	r3, #16
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f303 	lsl.w	r3, r1, r3
 8007356:	4619      	mov	r1, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	619a      	str	r2, [r3, #24]
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	791b      	ldrb	r3, [r3, #4]
 800737c:	461a      	mov	r2, r3
 800737e:	2301      	movs	r3, #1
 8007380:	4093      	lsls	r3, r2
 8007382:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800738c:	897b      	ldrh	r3, [r7, #10]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	791b      	ldrb	r3, [r3, #4]
 8007398:	461a      	mov	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	40d3      	lsrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80073a0:	68fb      	ldr	r3, [r7, #12]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ffd8 	bl	800736c <GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff ff76 	bl	80072c0 <GPIO_WritePin>
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fe3b 	bl	800706c <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fe36 	bl	800706c <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4618      	mov	r0, r3
 8007406:	f002 fba7 	bl	8009b58 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800740a:	e004      	b.n	8007416 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f94f 	bl	80076b0 <WHOIAM>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f7      	beq.n	800740c <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800741c:	216b      	movs	r1, #107	; 0x6b
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8f1 	bl	8007606 <readData>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8007428:	2300      	movs	r3, #0
 800742a:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	461a      	mov	r2, r3
 8007430:	216b      	movs	r1, #107	; 0x6b
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f89c 	bl	8007570 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8007438:	216b      	movs	r1, #107	; 0x6b
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8e3 	bl	8007606 <readData>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8007444:	211c      	movs	r1, #28
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8dd 	bl	8007606 <readData>
 800744c:	4603      	mov	r3, r0
 800744e:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f023 0318 	bic.w	r3, r3, #24
 8007456:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d833      	bhi.n	80074c8 <configMPUAccel+0xec>
 8007460:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <configMPUAccel+0x8c>)
 8007462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007466:	bf00      	nop
 8007468:	08007479 	.word	0x08007479
 800746c:	08007487 	.word	0x08007487
 8007470:	0800749d 	.word	0x0800749d
 8007474:	080074b3 	.word	0x080074b3
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	461a      	mov	r2, r3
 800747c:	211c      	movs	r1, #28
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f876 	bl	8007570 <writeData>


				break;
 8007484:	e021      	b.n	80074ca <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	f043 0308 	orr.w	r3, r3, #8
 800748c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	461a      	mov	r2, r3
 8007492:	211c      	movs	r1, #28
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f86b 	bl	8007570 <writeData>


				break;
 800749a:	e016      	b.n	80074ca <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	f043 0310 	orr.w	r3, r3, #16
 80074a2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	461a      	mov	r2, r3
 80074a8:	211c      	movs	r1, #28
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f860 	bl	8007570 <writeData>


				break;
 80074b0:	e00b      	b.n	80074ca <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	f043 0318 	orr.w	r3, r3, #24
 80074b8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	461a      	mov	r2, r3
 80074be:	211c      	movs	r1, #28
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f855 	bl	8007570 <writeData>


				break;
 80074c6:	e000      	b.n	80074ca <configMPUAccel+0xee>
			}default:{
				break;
 80074c8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 80074ca:	211c      	movs	r1, #28
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f89a 	bl	8007606 <readData>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 80074d6:	211b      	movs	r1, #27
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f894 	bl	8007606 <readData>
 80074de:	4603      	mov	r3, r0
 80074e0:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f023 0318 	bic.w	r3, r3, #24
 80074e8:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d832      	bhi.n	8007558 <configMPUAccel+0x17c>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <configMPUAccel+0x11c>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007509 	.word	0x08007509
 80074fc:	08007517 	.word	0x08007517
 8007500:	0800752d 	.word	0x0800752d
 8007504:	08007543 	.word	0x08007543
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	461a      	mov	r2, r3
 800750c:	211b      	movs	r1, #27
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f82e 	bl	8007570 <writeData>


				break;
 8007514:	e021      	b.n	800755a <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	461a      	mov	r2, r3
 8007522:	211b      	movs	r1, #27
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f823 	bl	8007570 <writeData>


				break;
 800752a:	e016      	b.n	800755a <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	f043 0310 	orr.w	r3, r3, #16
 8007532:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	461a      	mov	r2, r3
 8007538:	211b      	movs	r1, #27
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f818 	bl	8007570 <writeData>


				break;
 8007540:	e00b      	b.n	800755a <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	f043 0318 	orr.w	r3, r3, #24
 8007548:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	461a      	mov	r2, r3
 800754e:	211b      	movs	r1, #27
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f80d 	bl	8007570 <writeData>


				break;
 8007556:	e000      	b.n	800755a <configMPUAccel+0x17e>
			}default:{
				break;
 8007558:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800755a:	211b      	movs	r1, #27
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f852 	bl	8007606 <readData>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]


}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop

08007570 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
 800757c:	4613      	mov	r3, r2
 800757e:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007592:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4618      	mov	r0, r3
 800759a:	f002 fc4d 	bl	8009e38 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68d8      	ldr	r0, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	791b      	ldrb	r3, [r3, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	4619      	mov	r1, r3
 80075ac:	f002 fcaf 	bl	8009f0e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f002 fcd0 	bl	8009f5e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80075be:	e000      	b.n	80075c2 <writeData+0x52>
		__NOP();
 80075c0:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f6      	bne.n	80075c0 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	78ba      	ldrb	r2, [r7, #2]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 fcd9 	bl	8009f92 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80075e0:	e000      	b.n	80075e4 <writeData+0x74>
		__NOP();
 80075e2:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f6      	bne.n	80075e2 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 fc0b 	bl	8009e14 <i2c_stopTransaction>



}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007628:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	4618      	mov	r0, r3
 8007630:	f002 fc02 	bl	8009e38 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68d8      	ldr	r0, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	4619      	mov	r1, r3
 8007642:	f002 fc64 	bl	8009f0e <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f002 fc85 	bl	8009f5e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007654:	e000      	b.n	8007658 <readData+0x52>
		__NOP();
 8007656:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f6      	bne.n	8007656 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4618      	mov	r0, r3
 800766e:	f002 fc14 	bl	8009e9a <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68d8      	ldr	r0, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	4619      	mov	r1, r3
 8007680:	f002 fc45 	bl	8009f0e <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4618      	mov	r0, r3
 800768a:	f002 fc2e 	bl	8009eea <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	4618      	mov	r0, r3
 8007694:	f002 fbbe 	bl	8009e14 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4618      	mov	r0, r3
 800769e:	f002 fc92 	bl	8009fc6 <i2c_readDataByte>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 80076c0:	2175      	movs	r1, #117	; 0x75
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff ff9f 	bl	8007606 <readData>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80076d2:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80076e6:	7bbb      	ldrb	r3, [r7, #14]

}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007710:	2143      	movs	r1, #67	; 0x43
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ff77 	bl	8007606 <readData>
 8007718:	4603      	mov	r3, r0
 800771a:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800771c:	2144      	movs	r1, #68	; 0x44
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff71 	bl	8007606 <readData>
 8007724:	4603      	mov	r3, r0
 8007726:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8007728:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	b21a      	sxth	r2, r3
 8007730:	89bb      	ldrh	r3, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d846      	bhi.n	80077cc <readGyro_X+0xdc>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <readGyro_X+0x54>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007755 	.word	0x08007755
 8007748:	08007773 	.word	0x08007773
 800774c:	08007791 	.word	0x08007791
 8007750:	080077af 	.word	0x080077af
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8007754:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007758:	4618      	mov	r0, r3
 800775a:	f7f8 fefb 	bl	8000554 <__aeabi_i2d>
 800775e:	a325      	add	r3, pc, #148	; (adr r3, 80077f4 <readGyro_X+0x104>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f9 f88a 	bl	800087c <__aeabi_ddiv>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007770:	e02d      	b.n	80077ce <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8007772:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007776:	4618      	mov	r0, r3
 8007778:	f7f8 feec 	bl	8000554 <__aeabi_i2d>
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <readGyro_X+0xf8>)
 8007782:	f7f9 f87b 	bl	800087c <__aeabi_ddiv>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800778e:	e01e      	b.n	80077ce <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8007790:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007794:	4618      	mov	r0, r3
 8007796:	f7f8 fedd 	bl	8000554 <__aeabi_i2d>
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <readGyro_X+0xfc>)
 80077a0:	f7f9 f86c 	bl	800087c <__aeabi_ddiv>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80077ac:	e00f      	b.n	80077ce <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 80077ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fece 	bl	8000554 <__aeabi_i2d>
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <readGyro_X+0x100>)
 80077be:	f7f9 f85d 	bl	800087c <__aeabi_ddiv>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80077ca:	e000      	b.n	80077ce <readGyro_X+0xde>
		}default:{
			break;
 80077cc:	bf00      	nop
		}

	}

	return GYROX_R;
 80077ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077d2:	f7f9 fa21 	bl	8000c18 <__aeabi_d2f>
 80077d6:	4603      	mov	r3, r0
 80077d8:	ee07 3a90 	vmov	s15, r3

}
 80077dc:	eeb0 0a67 	vmov.f32	s0, s15
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40508000 	.word	0x40508000
 80077ec:	40408000 	.word	0x40408000
 80077f0:	40300000 	.word	0x40300000
 80077f4:	00000000 	.word	0x00000000
 80077f8:	40606000 	.word	0x40606000
 80077fc:	00000000 	.word	0x00000000

08007800 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8007820:	2145      	movs	r1, #69	; 0x45
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff feef 	bl	8007606 <readData>
 8007828:	4603      	mov	r3, r0
 800782a:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800782c:	2146      	movs	r1, #70	; 0x46
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fee9 	bl	8007606 <readData>
 8007834:	4603      	mov	r3, r0
 8007836:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8007838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	b21a      	sxth	r2, r3
 8007840:	89bb      	ldrh	r3, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d846      	bhi.n	80078dc <readGyro_Y+0xdc>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <readGyro_Y+0x54>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	08007865 	.word	0x08007865
 8007858:	08007883 	.word	0x08007883
 800785c:	080078a1 	.word	0x080078a1
 8007860:	080078bf 	.word	0x080078bf
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8007864:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe73 	bl	8000554 <__aeabi_i2d>
 800786e:	a325      	add	r3, pc, #148	; (adr r3, 8007904 <readGyro_Y+0x104>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f9 f802 	bl	800087c <__aeabi_ddiv>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007880:	e02d      	b.n	80078de <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8007882:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fe64 	bl	8000554 <__aeabi_i2d>
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <readGyro_Y+0xf8>)
 8007892:	f7f8 fff3 	bl	800087c <__aeabi_ddiv>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800789e:	e01e      	b.n	80078de <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80078a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7f8 fe55 	bl	8000554 <__aeabi_i2d>
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <readGyro_Y+0xfc>)
 80078b0:	f7f8 ffe4 	bl	800087c <__aeabi_ddiv>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80078bc:	e00f      	b.n	80078de <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 80078be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fe46 	bl	8000554 <__aeabi_i2d>
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <readGyro_Y+0x100>)
 80078ce:	f7f8 ffd5 	bl	800087c <__aeabi_ddiv>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80078da:	e000      	b.n	80078de <readGyro_Y+0xde>
		}default:{
			break;
 80078dc:	bf00      	nop
		}

	}

	return GYROY_R;
 80078de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078e2:	f7f9 f999 	bl	8000c18 <__aeabi_d2f>
 80078e6:	4603      	mov	r3, r0
 80078e8:	ee07 3a90 	vmov	s15, r3

}
 80078ec:	eeb0 0a67 	vmov.f32	s0, s15
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40508000 	.word	0x40508000
 80078fc:	40408000 	.word	0x40408000
 8007900:	40300000 	.word	0x40300000
 8007904:	00000000 	.word	0x00000000
 8007908:	40606000 	.word	0x40606000
 800790c:	00000000 	.word	0x00000000

08007910 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8007930:	2147      	movs	r1, #71	; 0x47
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fe67 	bl	8007606 <readData>
 8007938:	4603      	mov	r3, r0
 800793a:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800793c:	2148      	movs	r1, #72	; 0x48
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fe61 	bl	8007606 <readData>
 8007944:	4603      	mov	r3, r0
 8007946:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8007948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	b21a      	sxth	r2, r3
 8007950:	89bb      	ldrh	r3, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	2b03      	cmp	r3, #3
 800795c:	d846      	bhi.n	80079ec <readGyro_Z+0xdc>
 800795e:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <readGyro_Z+0x54>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	08007975 	.word	0x08007975
 8007968:	08007993 	.word	0x08007993
 800796c:	080079b1 	.word	0x080079b1
 8007970:	080079cf 	.word	0x080079cf
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8007974:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007978:	4618      	mov	r0, r3
 800797a:	f7f8 fdeb 	bl	8000554 <__aeabi_i2d>
 800797e:	a325      	add	r3, pc, #148	; (adr r3, 8007a14 <readGyro_Z+0x104>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 ff7a 	bl	800087c <__aeabi_ddiv>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007990:	e02d      	b.n	80079ee <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8007992:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007996:	4618      	mov	r0, r3
 8007998:	f7f8 fddc 	bl	8000554 <__aeabi_i2d>
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <readGyro_Z+0xf8>)
 80079a2:	f7f8 ff6b 	bl	800087c <__aeabi_ddiv>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80079ae:	e01e      	b.n	80079ee <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 80079b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f8 fdcd 	bl	8000554 <__aeabi_i2d>
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <readGyro_Z+0xfc>)
 80079c0:	f7f8 ff5c 	bl	800087c <__aeabi_ddiv>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80079cc:	e00f      	b.n	80079ee <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 80079ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7f8 fdbe 	bl	8000554 <__aeabi_i2d>
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <readGyro_Z+0x100>)
 80079de:	f7f8 ff4d 	bl	800087c <__aeabi_ddiv>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80079ea:	e000      	b.n	80079ee <readGyro_Z+0xde>
		}default:{
			break;
 80079ec:	bf00      	nop
		}

	}

	return GYROZ_R;
 80079ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079f2:	f7f9 f911 	bl	8000c18 <__aeabi_d2f>
 80079f6:	4603      	mov	r3, r0
 80079f8:	ee07 3a90 	vmov	s15, r3

}
 80079fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40508000 	.word	0x40508000
 8007a0c:	40408000 	.word	0x40408000
 8007a10:	40300000 	.word	0x40300000
 8007a14:	00000000 	.word	0x00000000
 8007a18:	40606000 	.word	0x40606000
 8007a1c:	00000000 	.word	0x00000000

08007a20 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08c      	sub	sp, #48	; 0x30
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6178      	str	r0, [r7, #20]
 8007a28:	6139      	str	r1, [r7, #16]
 8007a2a:	ed87 0b02 	vstr	d0, [r7, #8]
 8007a2e:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a3c:	f7f8 fc3c 	bl	80002b8 <__aeabi_dsub>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a52:	f7f8 fc31 	bl	80002b8 <__aeabi_dsub>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	3310      	adds	r3, #16
 8007a62:	f107 0218 	add.w	r2, r7, #24
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fa55 	bl	8007f18 <calculed_ang_turn>
 8007a6e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <build_Operation+0x138>)
 8007a78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a7c:	f7f9 f864 	bl	8000b48 <__aeabi_dcmpgt>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d020      	beq.n	8007ac8 <build_Operation+0xa8>
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	4b34      	ldr	r3, [pc, #208]	; (8007b5c <build_Operation+0x13c>)
 8007a8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a90:	f7f9 f83c 	bl	8000b0c <__aeabi_dcmplt>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d016      	beq.n	8007ac8 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aa0:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8007b50 <build_Operation+0x130>
 8007aa4:	ed97 1b00 	vldr	d1, [r7]
 8007aa8:	ed97 0b02 	vldr	d0, [r7, #8]
 8007aac:	2201      	movs	r2, #1
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6978      	ldr	r0, [r7, #20]
 8007ab2:	f000 f855 	bl	8007b60 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007abc:	3301      	adds	r3, #1
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007ac6:	e02b      	b.n	8007b20 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ace:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8007ad2:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007b50 <build_Operation+0x130>
 8007ad6:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007b50 <build_Operation+0x130>
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6978      	ldr	r0, [r7, #20]
 8007ae0:	f000 f83e 	bl	8007b60 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007afa:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8007b50 <build_Operation+0x130>
 8007afe:	ed97 1b00 	vldr	d1, [r7]
 8007b02:	ed97 0b02 	vldr	d0, [r7, #8]
 8007b06:	2201      	movs	r2, #1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6978      	ldr	r0, [r7, #20]
 8007b0c:	f000 f828 	bl	8007b60 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8007b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b24:	6939      	ldr	r1, [r7, #16]
 8007b26:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 8007b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b2e:	6939      	ldr	r1, [r7, #16]
 8007b30:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 8007b34:	6939      	ldr	r1, [r7, #16]
 8007b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b3a:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 8007b3e:	6939      	ldr	r1, [r7, #16]
 8007b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b44:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	3730      	adds	r7, #48	; 0x30
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
	...
 8007b58:	c0140000 	.word	0xc0140000
 8007b5c:	40140000 	.word	0x40140000

08007b60 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b089      	sub	sp, #36	; 0x24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	61f8      	str	r0, [r7, #28]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007b6e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007b72:	ed87 2b00 	vstr	d2, [r7]
 8007b76:	76fb      	strb	r3, [r7, #27]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 8007b7c:	7efa      	ldrb	r2, [r7, #27]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	461a      	mov	r2, r3
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	7eba      	ldrb	r2, [r7, #26]
 8007b8e:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8007b90:	7efa      	ldrb	r2, [r7, #27]
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	1899      	adds	r1, r3, r2
 8007ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8007ba8:	7efa      	ldrb	r2, [r7, #27]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	1899      	adds	r1, r3, r2
 8007bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8007bc0:	7efa      	ldrb	r2, [r7, #27]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	1899      	adds	r1, r3, r2
 8007bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8007bd8:	bf00      	nop
 8007bda:	3724      	adds	r7, #36	; 0x24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6178      	str	r0, [r7, #20]
 8007bf0:	ed87 0b02 	vstr	d0, [r7, #8]
 8007bf4:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 8007c10:	6979      	ldr	r1, [r7, #20]
 8007c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c16:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c20:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007c30:	f7f8 fb42 	bl	80002b8 <__aeabi_dsub>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	ec43 2b17 	vmov	d7, r2, r3
 8007c3c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8007cb0 <change_coordinates_position+0xc8>
 8007c40:	eeb0 0a47 	vmov.f32	s0, s14
 8007c44:	eef0 0a67 	vmov.f32	s1, s15
 8007c48:	f005 fed4 	bl	800d9f4 <pow>
 8007c4c:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007c5c:	f7f8 fb2c 	bl	80002b8 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	ec43 2b17 	vmov	d7, r2, r3
 8007c68:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007cb0 <change_coordinates_position+0xc8>
 8007c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8007c70:	eef0 0a67 	vmov.f32	s1, s15
 8007c74:	f005 febe 	bl	800d9f4 <pow>
 8007c78:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fb1c 	bl	80002bc <__adddf3>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	ec43 2b17 	vmov	d7, r2, r3
 8007c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8007c90:	eef0 0a67 	vmov.f32	s1, s15
 8007c94:	f005 ff1e 	bl	800dad4 <sqrt>
 8007c98:	eeb0 7a40 	vmov.f32	s14, s0
 8007c9c:	eef0 7a60 	vmov.f32	s15, s1
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 8007ca6:	bf00      	nop
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bdb0      	pop	{r4, r5, r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	00000000 	.word	0x00000000
 8007cb4:	40000000 	.word	0x40000000

08007cb8 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8007cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007cbc:	b08a      	sub	sp, #40	; 0x28
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007cce:	f7f8 faf3 	bl	80002b8 <__aeabi_dsub>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007ce6:	f7f8 fae7 	bl	80002b8 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8007cf2:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8007e00 <calculation_parameter_distance+0x148>
 8007cf6:	ed97 0b08 	vldr	d0, [r7, #32]
 8007cfa:	f005 fe7b 	bl	800d9f4 <pow>
 8007cfe:	ec59 8b10 	vmov	r8, r9, d0
 8007d02:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8007e00 <calculation_parameter_distance+0x148>
 8007d06:	ed97 0b06 	vldr	d0, [r7, #24]
 8007d0a:	f005 fe73 	bl	800d9f4 <pow>
 8007d0e:	ec53 2b10 	vmov	r2, r3, d0
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fad1 	bl	80002bc <__adddf3>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	ec43 2b17 	vmov	d7, r2, r3
 8007d22:	eeb0 0a47 	vmov.f32	s0, s14
 8007d26:	eef0 0a67 	vmov.f32	s1, s15
 8007d2a:	f005 fed3 	bl	800dad4 <sqrt>
 8007d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8007d32:	eef0 7a60 	vmov.f32	s15, s1
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d42:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d66:	f7f8 fc5f 	bl	8000628 <__aeabi_dmul>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4690      	mov	r8, r2
 8007d70:	4699      	mov	r9, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d7c:	f7f8 fc54 	bl	8000628 <__aeabi_dmul>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4640      	mov	r0, r8
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7f8 fa96 	bl	80002b8 <__aeabi_dsub>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	6979      	ldr	r1, [r7, #20]
 8007d92:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d9c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8007da0:	6a3c      	ldr	r4, [r7, #32]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dc4:	f7f8 fc30 	bl	8000628 <__aeabi_dmul>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	461d      	mov	r5, r3
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dda:	f7f8 fc25 	bl	8000628 <__aeabi_dmul>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4620      	mov	r0, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	f7f8 fa69 	bl	80002bc <__adddf3>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8007df4:	bf00      	nop
 8007df6:	3728      	adds	r7, #40	; 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dfe:	bf00      	nop
 8007e00:	00000000 	.word	0x00000000
 8007e04:	40000000 	.word	0x40000000

08007e08 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8007e08:	b5b0      	push	{r4, r5, r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6178      	str	r0, [r7, #20]
 8007e10:	ed87 0b02 	vstr	d0, [r7, #8]
 8007e14:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e22:	f7f8 fc01 	bl	8000628 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	461d      	mov	r5, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e38:	f7f8 fbf6 	bl	8000628 <__aeabi_dmul>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4620      	mov	r0, r4
 8007e42:	4629      	mov	r1, r5
 8007e44:	f7f8 fa3a 	bl	80002bc <__adddf3>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007e56:	f7f8 fa31 	bl	80002bc <__adddf3>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 fd08 	bl	800087c <__aeabi_ddiv>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8007e70:	4611      	mov	r1, r2
 8007e72:	61b9      	str	r1, [r7, #24]
 8007e74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	61fb      	str	r3, [r7, #28]

	return distance;
 8007e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8007e82:	eeb0 0a47 	vmov.f32	s0, s14
 8007e86:	eef0 0a67 	vmov.f32	s1, s15
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bdb0      	pop	{r4, r5, r7, pc}

08007e90 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6178      	str	r0, [r7, #20]
 8007e98:	ed87 0b02 	vstr	d0, [r7, #8]
 8007e9c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eaa:	f7f8 fbbd 	bl	8000628 <__aeabi_dmul>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	461d      	mov	r5, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec0:	f7f8 fbb2 	bl	8000628 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7f8 f9f6 	bl	80002bc <__adddf3>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007ede:	f7f8 f9ed 	bl	80002bc <__adddf3>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8007ef0:	f7f8 fcc4 	bl	800087c <__aeabi_ddiv>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8007efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f00:	ec43 2b17 	vmov	d7, r2, r3
}
 8007f04:	eeb0 0a47 	vmov.f32	s0, s14
 8007f08:	eef0 0a67 	vmov.f32	s1, s15
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bdb0      	pop	{r4, r5, r7, pc}
 8007f12:	0000      	movs	r0, r0
 8007f14:	0000      	movs	r0, r0
	...

08007f18 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8007f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f1c:	b08a      	sub	sp, #40	; 0x28
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 fb79 	bl	8000628 <__aeabi_dmul>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4690      	mov	r8, r2
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3308      	adds	r3, #8
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fb6c 	bl	8000628 <__aeabi_dmul>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 f9ae 	bl	80002b8 <__aeabi_dsub>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	ed93 7b00 	vldr	d7, [r3]
 8007f6a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80080e8 <calculed_ang_turn+0x1d0>
 8007f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8007f72:	eef0 0a67 	vmov.f32	s1, s15
 8007f76:	f005 fd3d 	bl	800d9f4 <pow>
 8007f7a:	ec59 8b10 	vmov	r8, r9, d0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3308      	adds	r3, #8
 8007f82:	ed93 7b00 	vldr	d7, [r3]
 8007f86:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80080e8 <calculed_ang_turn+0x1d0>
 8007f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8007f8e:	eef0 0a67 	vmov.f32	s1, s15
 8007f92:	f005 fd2f 	bl	800d9f4 <pow>
 8007f96:	ec53 2b10 	vmov	r2, r3, d0
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 f98d 	bl	80002bc <__adddf3>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	ec43 2b17 	vmov	d7, r2, r3
 8007faa:	eeb0 0a47 	vmov.f32	s0, s14
 8007fae:	eef0 0a67 	vmov.f32	s1, s15
 8007fb2:	f005 fd8f 	bl	800dad4 <sqrt>
 8007fb6:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	ed93 7b00 	vldr	d7, [r3]
 8007fc0:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80080e8 <calculed_ang_turn+0x1d0>
 8007fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8007fc8:	eef0 0a67 	vmov.f32	s1, s15
 8007fcc:	f005 fd12 	bl	800d9f4 <pow>
 8007fd0:	ec59 8b10 	vmov	r8, r9, d0
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	ed93 7b00 	vldr	d7, [r3]
 8007fdc:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80080e8 <calculed_ang_turn+0x1d0>
 8007fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8007fe4:	eef0 0a67 	vmov.f32	s1, s15
 8007fe8:	f005 fd04 	bl	800d9f4 <pow>
 8007fec:	ec53 2b10 	vmov	r2, r3, d0
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 f962 	bl	80002bc <__adddf3>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	ec43 2b17 	vmov	d7, r2, r3
 8008000:	eeb0 0a47 	vmov.f32	s0, s14
 8008004:	eef0 0a67 	vmov.f32	s1, s15
 8008008:	f005 fd64 	bl	800dad4 <sqrt>
 800800c:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f7f8 fb04 	bl	8000628 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4690      	mov	r8, r2
 8008026:	4699      	mov	r9, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3308      	adds	r3, #8
 800802c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3308      	adds	r3, #8
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 faf6 	bl	8000628 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 f93a 	bl	80002bc <__adddf3>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4690      	mov	r8, r2
 800804e:	4699      	mov	r9, r3
 8008050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008058:	f7f8 fae6 	bl	8000628 <__aeabi_dmul>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	f7f8 fc0a 	bl	800087c <__aeabi_ddiv>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	ec43 2b17 	vmov	d7, r2, r3
 8008070:	eeb0 0a47 	vmov.f32	s0, s14
 8008074:	eef0 0a67 	vmov.f32	s1, s15
 8008078:	f005 fc86 	bl	800d988 <acos>
 800807c:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <calculed_ang_turn+0x1e0>)
 8008086:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800808a:	f7f8 facd 	bl	8000628 <__aeabi_dmul>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	a316      	add	r3, pc, #88	; (adr r3, 80080f0 <calculed_ang_turn+0x1d8>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f7f8 fbee 	bl	800087c <__aeabi_ddiv>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080b4:	f7f8 fd2a 	bl	8000b0c <__aeabi_dcmplt>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <calculed_ang_turn+0x1b2>
 80080be:	6a3c      	ldr	r4, [r7, #32]
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80080c6:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 80080ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80080d2:	eeb0 0a47 	vmov.f32	s0, s14
 80080d6:	eef0 0a67 	vmov.f32	s1, s15
 80080da:	3728      	adds	r7, #40	; 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080e2:	bf00      	nop
 80080e4:	f3af 8000 	nop.w
 80080e8:	00000000 	.word	0x00000000
 80080ec:	40000000 	.word	0x40000000
 80080f0:	54442d18 	.word	0x54442d18
 80080f4:	400921fb 	.word	0x400921fb
 80080f8:	40668000 	.word	0x40668000

080080fc <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a6c      	ldr	r2, [pc, #432]	; (80082bc <pwm_Config+0x1c0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d106      	bne.n	800811c <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800810e:	4b6c      	ldr	r3, [pc, #432]	; (80082c0 <pwm_Config+0x1c4>)
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	4a6b      	ldr	r2, [pc, #428]	; (80082c0 <pwm_Config+0x1c4>)
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6453      	str	r3, [r2, #68]	; 0x44
 800811a:	e030      	b.n	800817e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	d106      	bne.n	8008134 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008126:	4b66      	ldr	r3, [pc, #408]	; (80082c0 <pwm_Config+0x1c4>)
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	4a65      	ldr	r2, [pc, #404]	; (80082c0 <pwm_Config+0x1c4>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	6413      	str	r3, [r2, #64]	; 0x40
 8008132:	e024      	b.n	800817e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a62      	ldr	r2, [pc, #392]	; (80082c4 <pwm_Config+0x1c8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d106      	bne.n	800814c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800813e:	4b60      	ldr	r3, [pc, #384]	; (80082c0 <pwm_Config+0x1c4>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	4a5f      	ldr	r2, [pc, #380]	; (80082c0 <pwm_Config+0x1c4>)
 8008144:	f043 0302 	orr.w	r3, r3, #2
 8008148:	6413      	str	r3, [r2, #64]	; 0x40
 800814a:	e018      	b.n	800817e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a5d      	ldr	r2, [pc, #372]	; (80082c8 <pwm_Config+0x1cc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d106      	bne.n	8008164 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008156:	4b5a      	ldr	r3, [pc, #360]	; (80082c0 <pwm_Config+0x1c4>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	4a59      	ldr	r2, [pc, #356]	; (80082c0 <pwm_Config+0x1c4>)
 800815c:	f043 0304 	orr.w	r3, r3, #4
 8008160:	6413      	str	r3, [r2, #64]	; 0x40
 8008162:	e00c      	b.n	800817e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a58      	ldr	r2, [pc, #352]	; (80082cc <pwm_Config+0x1d0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d106      	bne.n	800817c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800816e:	4b54      	ldr	r3, [pc, #336]	; (80082c0 <pwm_Config+0x1c4>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	4a53      	ldr	r2, [pc, #332]	; (80082c0 <pwm_Config+0x1c4>)
 8008174:	f043 0308 	orr.w	r3, r3, #8
 8008178:	6413      	str	r3, [r2, #64]	; 0x40
 800817a:	e000      	b.n	800817e <pwm_Config+0x82>
	}
	else{
		__NOP();
 800817c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800818c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7f5b      	ldrb	r3, [r3, #29]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f930 	bl	80083fc <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa67 	bl	8008670 <setDuttyCycle>
 80081a2:	e005      	b.n	80081b0 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f929 	bl	80083fc <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fb38 	bl	8008820 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0210 	bic.w	r2, r2, #16
 80081be:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7a1b      	ldrb	r3, [r3, #8]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d86f      	bhi.n	80082b0 <pwm_Config+0x1b4>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <pwm_Config+0xdc>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	0800821b 	.word	0x0800821b
 80081e0:	0800824d 	.word	0x0800824d
 80081e4:	0800827f 	.word	0x0800827f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0203 	bic.w	r2, r2, #3
 80081f6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008206:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0208 	orr.w	r2, r2, #8
 8008216:	619a      	str	r2, [r3, #24]


		break;
 8008218:	e04b      	b.n	80082b2 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008228:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008238:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008248:	619a      	str	r2, [r3, #24]

		break;
 800824a:	e032      	b.n	80082b2 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0203 	bic.w	r2, r2, #3
 800825a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800826a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69da      	ldr	r2, [r3, #28]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	61da      	str	r2, [r3, #28]

		break;
 800827c:	e019      	b.n	80082b2 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800828c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800829c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ac:	61da      	str	r2, [r3, #28]

		break;
 80082ae:	e000      	b.n	80082b2 <pwm_Config+0x1b6>
	}

	default:{
		break;
 80082b0:	bf00      	nop
	}// fin del switch-case




}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40023800 	.word	0x40023800
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00

080082d0 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a3d      	ldr	r2, [pc, #244]	; (80083f8 <enableOutput+0x104>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d13a      	bne.n	800837c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008314:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7a1b      	ldrb	r3, [r3, #8]
 800831a:	2b03      	cmp	r3, #3
 800831c:	d862      	bhi.n	80083e4 <enableOutput+0xf0>
 800831e:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <enableOutput+0x30>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008335 	.word	0x08008335
 8008328:	08008347 	.word	0x08008347
 800832c:	08008359 	.word	0x08008359
 8008330:	0800836b 	.word	0x0800836b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	621a      	str	r2, [r3, #32]

				break;
 8008344:	e051      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0210 	orr.w	r2, r2, #16
 8008354:	621a      	str	r2, [r3, #32]

				break;
 8008356:	e048      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008366:	621a      	str	r2, [r3, #32]

				break;
 8008368:	e03f      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6a1a      	ldr	r2, [r3, #32]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008378:	621a      	str	r2, [r3, #32]

				break;
 800837a:	e036      	b.n	80083ea <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7a1b      	ldrb	r3, [r3, #8]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d831      	bhi.n	80083e8 <enableOutput+0xf4>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <enableOutput+0x98>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	0800839d 	.word	0x0800839d
 8008390:	080083af 	.word	0x080083af
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083d3 	.word	0x080083d3
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	621a      	str	r2, [r3, #32]

				break;
 80083ac:	e01d      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0210 	orr.w	r2, r2, #16
 80083bc:	621a      	str	r2, [r3, #32]

				break;
 80083be:	e014      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6a1a      	ldr	r2, [r3, #32]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083ce:	621a      	str	r2, [r3, #32]

				break;
 80083d0:	e00b      	b.n	80083ea <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083e0:	621a      	str	r2, [r3, #32]

				break;
 80083e2:	e002      	b.n	80083ea <enableOutput+0xf6>
				break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <enableOutput+0xf6>
			}

			default: {
				break;
 80083e8:	bf00      	nop
			}

		}
	}
	return SET;
 80083ea:	2301      	movs	r3, #1
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40010000 	.word	0x40010000

080083fc <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68d2      	ldr	r2, [r2, #12]
 8008410:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b10      	cmp	r3, #16
 800841c:	d01a      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b14      	cmp	r3, #20
 8008422:	d017      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b1e      	cmp	r3, #30
 8008428:	d014      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b28      	cmp	r3, #40	; 0x28
 800842e:	d011      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b32      	cmp	r3, #50	; 0x32
 8008434:	d00e      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b3c      	cmp	r3, #60	; 0x3c
 800843a:	d00b      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b46      	cmp	r3, #70	; 0x46
 8008440:	d008      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b50      	cmp	r3, #80	; 0x50
 8008446:	d005      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b5a      	cmp	r3, #90	; 0x5a
 800844c:	d002      	beq.n	8008454 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b64      	cmp	r3, #100	; 0x64
 8008452:	d118      	bne.n	8008486 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	4b7b      	ldr	r3, [pc, #492]	; (800864c <setFrequency+0x250>)
 8008460:	f7f8 f8e2 	bl	8000628 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4610      	mov	r0, r2
 800846a:	4619      	mov	r1, r3
 800846c:	f7f8 fbb4 	bl	8000bd8 <__aeabi_d2uiz>
 8008470:	4603      	mov	r3, r0
 8008472:	b29a      	uxth	r2, r3
 8008474:	4b76      	ldr	r3, [pc, #472]	; (8008650 <setFrequency+0x254>)
 8008476:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008478:	4b75      	ldr	r3, [pc, #468]	; (8008650 <setFrequency+0x254>)
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	1e5a      	subs	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c
 8008484:	e0dd      	b.n	8008642 <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2ba0      	cmp	r3, #160	; 0xa0
 800848a:	d022      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2bc8      	cmp	r3, #200	; 0xc8
 8008490:	d01f      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008498:	d01b      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80084a0:	d017      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80084a8:	d013      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80084b0:	d00f      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80084b8:	d00b      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80084c0:	d007      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80084c8:	d003      	beq.n	80084d2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084d0:	d118      	bne.n	8008504 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	4b5d      	ldr	r3, [pc, #372]	; (8008654 <setFrequency+0x258>)
 80084de:	f7f8 f8a3 	bl	8000628 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	f7f8 fb75 	bl	8000bd8 <__aeabi_d2uiz>
 80084ee:	4603      	mov	r3, r0
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	4b57      	ldr	r3, [pc, #348]	; (8008650 <setFrequency+0x254>)
 80084f4:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80084f6:	4b56      	ldr	r3, [pc, #344]	; (8008650 <setFrequency+0x254>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	1e5a      	subs	r2, r3, #1
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	62da      	str	r2, [r3, #44]	; 0x2c
 8008502:	e09e      	b.n	8008642 <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800850a:	d029      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008512:	d025      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800851a:	4293      	cmp	r3, r2
 800851c:	d020      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008524:	d01c      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f241 3288 	movw	r2, #5000	; 0x1388
 800852c:	4293      	cmp	r3, r2
 800852e:	d017      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f241 7270 	movw	r2, #6000	; 0x1770
 8008536:	4293      	cmp	r3, r2
 8008538:	d012      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8008540:	4293      	cmp	r3, r2
 8008542:	d00d      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800854a:	d009      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f242 7210 	movw	r2, #10000	; 0x2710
 800855c:	4293      	cmp	r3, r2
 800855e:	d118      	bne.n	8008592 <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	4b3b      	ldr	r3, [pc, #236]	; (8008658 <setFrequency+0x25c>)
 800856c:	f7f8 f85c 	bl	8000628 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	f7f8 fb2e 	bl	8000bd8 <__aeabi_d2uiz>
 800857c:	4603      	mov	r3, r0
 800857e:	b29a      	uxth	r2, r3
 8008580:	4b33      	ldr	r3, [pc, #204]	; (8008650 <setFrequency+0x254>)
 8008582:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008584:	4b32      	ldr	r3, [pc, #200]	; (8008650 <setFrequency+0x254>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	1e5a      	subs	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008590:	e057      	b.n	8008642 <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008598:	d028      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d023      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f247 5230 	movw	r2, #30000	; 0x7530
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01e      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d019      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80085be:	4293      	cmp	r3, r2
 80085c0:	d014      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00f      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4a23      	ldr	r2, [pc, #140]	; (800865c <setFrequency+0x260>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00b      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4a22      	ldr	r2, [pc, #136]	; (8008660 <setFrequency+0x264>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d007      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4a21      	ldr	r2, [pc, #132]	; (8008664 <setFrequency+0x268>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4a20      	ldr	r2, [pc, #128]	; (8008668 <setFrequency+0x26c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d111      	bne.n	8008610 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085f2:	4610      	mov	r0, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	f7f8 faef 	bl	8000bd8 <__aeabi_d2uiz>
 80085fa:	4603      	mov	r3, r0
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	4b14      	ldr	r3, [pc, #80]	; (8008650 <setFrequency+0x254>)
 8008600:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008602:	4b13      	ldr	r3, [pc, #76]	; (8008650 <setFrequency+0x254>)
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	1e5a      	subs	r2, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	62da      	str	r2, [r3, #44]	; 0x2c
 800860e:	e018      	b.n	8008642 <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	4b14      	ldr	r3, [pc, #80]	; (800866c <setFrequency+0x270>)
 800861c:	f7f8 f92e 	bl	800087c <__aeabi_ddiv>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4610      	mov	r0, r2
 8008626:	4619      	mov	r1, r3
 8008628:	f7f8 fad6 	bl	8000bd8 <__aeabi_d2uiz>
 800862c:	4603      	mov	r3, r0
 800862e:	b29a      	uxth	r2, r3
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <setFrequency+0x254>)
 8008632:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <setFrequency+0x254>)
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	408f4000 	.word	0x408f4000
 8008650:	20012254 	.word	0x20012254
 8008654:	40590000 	.word	0x40590000
 8008658:	40240000 	.word	0x40240000
 800865c:	00011170 	.word	0x00011170
 8008660:	00013880 	.word	0x00013880
 8008664:	00015f90 	.word	0x00015f90
 8008668:	000186a0 	.word	0x000186a0
 800866c:	40340000 	.word	0x40340000

08008670 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b08b      	sub	sp, #44	; 0x2c
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7a1b      	ldrb	r3, [r3, #8]
 800867c:	2b03      	cmp	r3, #3
 800867e:	f200 80c3 	bhi.w	8008808 <setDuttyCycle+0x198>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <setDuttyCycle+0x18>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	08008699 	.word	0x08008699
 800868c:	080086f5 	.word	0x080086f5
 8008690:	08008751 	.word	0x08008751
 8008694:	080087ad 	.word	0x080087ad
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	ed93 7a06 	vldr	s14, [r3, #24]
 800869e:	4b5d      	ldr	r3, [pc, #372]	; (8008814 <setDuttyCycle+0x1a4>)
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	ee17 0a90 	vmov	r0, s15
 80086b2:	f7f7 ff61 	bl	8000578 <__aeabi_f2d>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	4b55      	ldr	r3, [pc, #340]	; (8008818 <setDuttyCycle+0x1a8>)
 80086c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086c8:	f7f8 f8d8 	bl	800087c <__aeabi_ddiv>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	4b50      	ldr	r3, [pc, #320]	; (800881c <setDuttyCycle+0x1ac>)
 80086da:	f7f7 fded 	bl	80002b8 <__aeabi_dsub>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681c      	ldr	r4, [r3, #0]
 80086ea:	f7f8 fa75 	bl	8000bd8 <__aeabi_d2uiz>
 80086ee:	4603      	mov	r3, r0
 80086f0:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80086f2:	e08a      	b.n	800880a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80086fa:	4b46      	ldr	r3, [pc, #280]	; (8008814 <setDuttyCycle+0x1a4>)
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870a:	ee17 0a90 	vmov	r0, s15
 800870e:	f7f7 ff33 	bl	8000578 <__aeabi_f2d>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <setDuttyCycle+0x1a8>)
 8008720:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008724:	f7f8 f8aa 	bl	800087c <__aeabi_ddiv>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4610      	mov	r0, r2
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	4b39      	ldr	r3, [pc, #228]	; (800881c <setDuttyCycle+0x1ac>)
 8008736:	f7f7 fdbf 	bl	80002b8 <__aeabi_dsub>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4610      	mov	r0, r2
 8008740:	4619      	mov	r1, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681c      	ldr	r4, [r3, #0]
 8008746:	f7f8 fa47 	bl	8000bd8 <__aeabi_d2uiz>
 800874a:	4603      	mov	r3, r0
 800874c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800874e:	e05c      	b.n	800880a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	ed93 7a06 	vldr	s14, [r3, #24]
 8008756:	4b2f      	ldr	r3, [pc, #188]	; (8008814 <setDuttyCycle+0x1a4>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008766:	ee17 0a90 	vmov	r0, s15
 800876a:	f7f7 ff05 	bl	8000578 <__aeabi_f2d>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	4b27      	ldr	r3, [pc, #156]	; (8008818 <setDuttyCycle+0x1a8>)
 800877c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008780:	f7f8 f87c 	bl	800087c <__aeabi_ddiv>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4610      	mov	r0, r2
 800878a:	4619      	mov	r1, r3
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	4b22      	ldr	r3, [pc, #136]	; (800881c <setDuttyCycle+0x1ac>)
 8008792:	f7f7 fd91 	bl	80002b8 <__aeabi_dsub>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681c      	ldr	r4, [r3, #0]
 80087a2:	f7f8 fa19 	bl	8000bd8 <__aeabi_d2uiz>
 80087a6:	4603      	mov	r3, r0
 80087a8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80087aa:	e02e      	b.n	800880a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <setDuttyCycle+0x1a4>)
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c2:	ee17 0a90 	vmov	r0, s15
 80087c6:	f7f7 fed7 	bl	8000578 <__aeabi_f2d>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <setDuttyCycle+0x1a8>)
 80087d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087dc:	f7f8 f84e 	bl	800087c <__aeabi_ddiv>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	4b0b      	ldr	r3, [pc, #44]	; (800881c <setDuttyCycle+0x1ac>)
 80087ee:	f7f7 fd63 	bl	80002b8 <__aeabi_dsub>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4610      	mov	r0, r2
 80087f8:	4619      	mov	r1, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	f7f8 f9eb 	bl	8000bd8 <__aeabi_d2uiz>
 8008802:	4603      	mov	r3, r0
 8008804:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008806:	e000      	b.n	800880a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008808:	bf00      	nop
	}

	}// fin del switch-case

}
 800880a:	bf00      	nop
 800880c:	372c      	adds	r7, #44	; 0x2c
 800880e:	46bd      	mov	sp, r7
 8008810:	bd90      	pop	{r4, r7, pc}
 8008812:	bf00      	nop
 8008814:	20012254 	.word	0x20012254
 8008818:	40590000 	.word	0x40590000
 800881c:	3ff00000 	.word	0x3ff00000

08008820 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b08b      	sub	sp, #44	; 0x2c
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7a1b      	ldrb	r3, [r3, #8]
 800882c:	2b03      	cmp	r3, #3
 800882e:	f200 80d3 	bhi.w	80089d8 <setDuttyCycleAfOpt+0x1b8>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <setDuttyCycleAfOpt+0x18>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008849 	.word	0x08008849
 800883c:	080088ad 	.word	0x080088ad
 8008840:	08008911 	.word	0x08008911
 8008844:	08008975 	.word	0x08008975
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	edd3 7a06 	vldr	s15, [r3, #24]
 800884e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80089e4 <setDuttyCycleAfOpt+0x1c4>
 8008852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008856:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <setDuttyCycleAfOpt+0x1c8>)
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008866:	ee17 0a90 	vmov	r0, s15
 800886a:	f7f7 fe85 	bl	8000578 <__aeabi_f2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	4b5c      	ldr	r3, [pc, #368]	; (80089ec <setDuttyCycleAfOpt+0x1cc>)
 800887c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008880:	f7f7 fffc 	bl	800087c <__aeabi_ddiv>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	4b57      	ldr	r3, [pc, #348]	; (80089f0 <setDuttyCycleAfOpt+0x1d0>)
 8008892:	f7f7 fd11 	bl	80002b8 <__aeabi_dsub>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4610      	mov	r0, r2
 800889c:	4619      	mov	r1, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681c      	ldr	r4, [r3, #0]
 80088a2:	f7f8 f999 	bl	8000bd8 <__aeabi_d2uiz>
 80088a6:	4603      	mov	r3, r0
 80088a8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80088aa:	e096      	b.n	80089da <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80088b2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80089e4 <setDuttyCycleAfOpt+0x1c4>
 80088b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088ba:	4b4b      	ldr	r3, [pc, #300]	; (80089e8 <setDuttyCycleAfOpt+0x1c8>)
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ca:	ee17 0a90 	vmov	r0, s15
 80088ce:	f7f7 fe53 	bl	8000578 <__aeabi_f2d>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	4b43      	ldr	r3, [pc, #268]	; (80089ec <setDuttyCycleAfOpt+0x1cc>)
 80088e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088e4:	f7f7 ffca 	bl	800087c <__aeabi_ddiv>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4610      	mov	r0, r2
 80088ee:	4619      	mov	r1, r3
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <setDuttyCycleAfOpt+0x1d0>)
 80088f6:	f7f7 fcdf 	bl	80002b8 <__aeabi_dsub>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4610      	mov	r0, r2
 8008900:	4619      	mov	r1, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681c      	ldr	r4, [r3, #0]
 8008906:	f7f8 f967 	bl	8000bd8 <__aeabi_d2uiz>
 800890a:	4603      	mov	r3, r0
 800890c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800890e:	e064      	b.n	80089da <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	edd3 7a06 	vldr	s15, [r3, #24]
 8008916:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80089e4 <setDuttyCycleAfOpt+0x1c4>
 800891a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <setDuttyCycleAfOpt+0x1c8>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800892a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892e:	ee17 0a90 	vmov	r0, s15
 8008932:	f7f7 fe21 	bl	8000578 <__aeabi_f2d>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <setDuttyCycleAfOpt+0x1cc>)
 8008944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008948:	f7f7 ff98 	bl	800087c <__aeabi_ddiv>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <setDuttyCycleAfOpt+0x1d0>)
 800895a:	f7f7 fcad 	bl	80002b8 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681c      	ldr	r4, [r3, #0]
 800896a:	f7f8 f935 	bl	8000bd8 <__aeabi_d2uiz>
 800896e:	4603      	mov	r3, r0
 8008970:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008972:	e032      	b.n	80089da <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	edd3 7a06 	vldr	s15, [r3, #24]
 800897a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80089e4 <setDuttyCycleAfOpt+0x1c4>
 800897e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <setDuttyCycleAfOpt+0x1c8>)
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800898e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008992:	ee17 0a90 	vmov	r0, s15
 8008996:	f7f7 fdef 	bl	8000578 <__aeabi_f2d>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <setDuttyCycleAfOpt+0x1cc>)
 80089a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089ac:	f7f7 ff66 	bl	800087c <__aeabi_ddiv>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <setDuttyCycleAfOpt+0x1d0>)
 80089be:	f7f7 fc7b 	bl	80002b8 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	f7f8 f903 	bl	8000bd8 <__aeabi_d2uiz>
 80089d2:	4603      	mov	r3, r0
 80089d4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80089d6:	e000      	b.n	80089da <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 80089d8:	bf00      	nop
	}

	}// fin del switch-case


}
 80089da:	bf00      	nop
 80089dc:	372c      	adds	r7, #44	; 0x2c
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd90      	pop	{r4, r7, pc}
 80089e2:	bf00      	nop
 80089e4:	42c80000 	.word	0x42c80000
 80089e8:	20012254 	.word	0x20012254
 80089ec:	40590000 	.word	0x40590000
 80089f0:	3ff00000 	.word	0x3ff00000

080089f4 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7a1b      	ldrb	r3, [r3, #8]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d82f      	bhi.n	8008a64 <disableOutput+0x70>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <disableOutput+0x18>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a2f 	.word	0x08008a2f
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a53 	.word	0x08008a53
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a1a      	ldr	r2, [r3, #32]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	621a      	str	r2, [r3, #32]

			break;
 8008a2c:	e01b      	b.n	8008a66 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0210 	bic.w	r2, r2, #16
 8008a3c:	621a      	str	r2, [r3, #32]

			break;
 8008a3e:	e012      	b.n	8008a66 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a4e:	621a      	str	r2, [r3, #32]

			break;
 8008a50:	e009      	b.n	8008a66 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6a1a      	ldr	r2, [r3, #32]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a60:	621a      	str	r2, [r3, #32]

			break;
 8008a62:	e000      	b.n	8008a66 <disableOutput+0x72>
		}

		default: {
			break;
 8008a64:	bf00      	nop
		}
		}

	return RESET;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7a1b      	ldrb	r3, [r3, #8]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d82f      	bhi.n	8008ae4 <PWMx_Toggle+0x70>
 8008a84:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <PWMx_Toggle+0x18>)
 8008a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8a:	bf00      	nop
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008aaf 	.word	0x08008aaf
 8008a94:	08008ac1 	.word	0x08008ac1
 8008a98:	08008ad3 	.word	0x08008ad3
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6a1a      	ldr	r2, [r3, #32]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f082 0202 	eor.w	r2, r2, #2
 8008aaa:	621a      	str	r2, [r3, #32]

				break;
 8008aac:	e01b      	b.n	8008ae6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6a1a      	ldr	r2, [r3, #32]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f082 0220 	eor.w	r2, r2, #32
 8008abc:	621a      	str	r2, [r3, #32]

				break;
 8008abe:	e012      	b.n	8008ae6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8008ace:	621a      	str	r2, [r3, #32]

				break;
 8008ad0:	e009      	b.n	8008ae6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8008ae0:	621a      	str	r2, [r3, #32]

				break;
 8008ae2:	e000      	b.n	8008ae6 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8008ae4:	bf00      	nop
			}
			}


}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop

08008af4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8008afe:	4b92      	ldr	r3, [pc, #584]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a91      	ldr	r2, [pc, #580]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b08:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008b0a:	4b8f      	ldr	r3, [pc, #572]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008b12:	4b8e      	ldr	r3, [pc, #568]	; (8008d4c <RCC_enableMaxFrequencies+0x258>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a8d      	ldr	r2, [pc, #564]	; (8008d4c <RCC_enableMaxFrequencies+0x258>)
 8008b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b1c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8008b1e:	4b8a      	ldr	r3, [pc, #552]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	4a89      	ldr	r2, [pc, #548]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008b28:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	f200 82fc 	bhi.w	800912a <RCC_enableMaxFrequencies+0x636>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <RCC_enableMaxFrequencies+0x44>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b5d 	.word	0x08008b5d
 8008b3c:	08008bff 	.word	0x08008bff
 8008b40:	08008ca1 	.word	0x08008ca1
 8008b44:	08008d55 	.word	0x08008d55
 8008b48:	08008df7 	.word	0x08008df7
 8008b4c:	08008e99 	.word	0x08008e99
 8008b50:	08008f45 	.word	0x08008f45
 8008b54:	08008fe7 	.word	0x08008fe7
 8008b58:	08009089 	.word	0x08009089
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008b5c:	4b7a      	ldr	r3, [pc, #488]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4a79      	ldr	r2, [pc, #484]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b66:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008b68:	4b77      	ldr	r3, [pc, #476]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a76      	ldr	r2, [pc, #472]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b6e:	f043 0310 	orr.w	r3, r3, #16
 8008b72:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008b74:	4b74      	ldr	r3, [pc, #464]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4a73      	ldr	r2, [pc, #460]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008b84:	4b70      	ldr	r3, [pc, #448]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4a6f      	ldr	r2, [pc, #444]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b8a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008b8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008b90:	4b6d      	ldr	r3, [pc, #436]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a6c      	ldr	r2, [pc, #432]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008b9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008b9c:	4b6a      	ldr	r3, [pc, #424]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a69      	ldr	r2, [pc, #420]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba6:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008ba8:	4b67      	ldr	r3, [pc, #412]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	4a66      	ldr	r2, [pc, #408]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008bb4:	4b64      	ldr	r3, [pc, #400]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	4a63      	ldr	r2, [pc, #396]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bbe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008bc0:	4b61      	ldr	r3, [pc, #388]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4a60      	ldr	r2, [pc, #384]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bca:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008bcc:	4b5e      	ldr	r3, [pc, #376]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a5d      	ldr	r2, [pc, #372]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bd6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008bd8:	e000      	b.n	8008bdc <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8008bda:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008bdc:	4b5a      	ldr	r3, [pc, #360]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0f8      	beq.n	8008bda <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008be8:	4b59      	ldr	r3, [pc, #356]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a58      	ldr	r2, [pc, #352]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008bee:	f023 030f 	bic.w	r3, r3, #15
 8008bf2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008bf4:	4b56      	ldr	r3, [pc, #344]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008bf6:	4a56      	ldr	r2, [pc, #344]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6013      	str	r3, [r2, #0]

			break;
 8008bfc:	e296      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008bfe:	4b52      	ldr	r3, [pc, #328]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4a51      	ldr	r2, [pc, #324]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c08:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008c0a:	4b4f      	ldr	r3, [pc, #316]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	4a4e      	ldr	r2, [pc, #312]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c10:	f043 0310 	orr.w	r3, r3, #16
 8008c14:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008c16:	4b4c      	ldr	r3, [pc, #304]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	4a4b      	ldr	r2, [pc, #300]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c24:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008c26:	4b48      	ldr	r3, [pc, #288]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4a47      	ldr	r2, [pc, #284]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c2c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008c30:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008c32:	4b45      	ldr	r3, [pc, #276]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4a44      	ldr	r2, [pc, #272]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008c3c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8008c3e:	4b42      	ldr	r3, [pc, #264]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4a41      	ldr	r2, [pc, #260]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c48:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008c4a:	4b3f      	ldr	r3, [pc, #252]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	4a3e      	ldr	r2, [pc, #248]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c54:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008c56:	4b3c      	ldr	r3, [pc, #240]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	4a3b      	ldr	r2, [pc, #236]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c60:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008c62:	4b39      	ldr	r3, [pc, #228]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	4a38      	ldr	r2, [pc, #224]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c6c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008c6e:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a35      	ldr	r2, [pc, #212]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c78:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008c7a:	e000      	b.n	8008c7e <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8008c7c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008c7e:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0f8      	beq.n	8008c7c <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a30      	ldr	r2, [pc, #192]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008c90:	f023 030f 	bic.w	r3, r3, #15
 8008c94:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008c96:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008c98:	4a2d      	ldr	r2, [pc, #180]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6013      	str	r3, [r2, #0]

			break;
 8008c9e:	e245      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ca0:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	4a28      	ldr	r2, [pc, #160]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008caa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008cac:	4b26      	ldr	r3, [pc, #152]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4a25      	ldr	r2, [pc, #148]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cb2:	f043 0310 	orr.w	r3, r3, #16
 8008cb6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008cb8:	4b23      	ldr	r3, [pc, #140]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	4a22      	ldr	r2, [pc, #136]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8008cc8:	4b1f      	ldr	r3, [pc, #124]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cce:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8008cd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4a1b      	ldr	r2, [pc, #108]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008cde:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008ce0:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cea:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008cec:	4b16      	ldr	r3, [pc, #88]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008cf8:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	4a12      	ldr	r2, [pc, #72]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d02:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008d04:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	4a0f      	ldr	r2, [pc, #60]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008d10:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d1a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008d1c:	e000      	b.n	8008d20 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8008d1e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008d20:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <RCC_enableMaxFrequencies+0x254>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f8      	beq.n	8008d1e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008d32:	f023 030f 	bic.w	r3, r3, #15
 8008d36:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <RCC_enableMaxFrequencies+0x25c>)
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	6013      	str	r3, [r2, #0]


			break;
 8008d44:	e1f2      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
 8008d46:	bf00      	nop
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40007000 	.word	0x40007000
 8008d50:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008d54:	4b79      	ldr	r3, [pc, #484]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4a78      	ldr	r2, [pc, #480]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008d60:	4b76      	ldr	r3, [pc, #472]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a75      	ldr	r2, [pc, #468]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d66:	f043 0310 	orr.w	r3, r3, #16
 8008d6a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008d6c:	4b73      	ldr	r3, [pc, #460]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	4a72      	ldr	r2, [pc, #456]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8008d7c:	4b6f      	ldr	r3, [pc, #444]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a6e      	ldr	r2, [pc, #440]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d82:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8008d86:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008d88:	4b6c      	ldr	r3, [pc, #432]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a6b      	ldr	r2, [pc, #428]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008d92:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008d94:	4b69      	ldr	r3, [pc, #420]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d96:	4a69      	ldr	r2, [pc, #420]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008d9c:	4b67      	ldr	r3, [pc, #412]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	4a66      	ldr	r2, [pc, #408]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008da8:	4b64      	ldr	r3, [pc, #400]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	4a63      	ldr	r2, [pc, #396]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008db2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008db4:	4b61      	ldr	r3, [pc, #388]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4a60      	ldr	r2, [pc, #384]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dbe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008dc0:	4b5e      	ldr	r3, [pc, #376]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a5d      	ldr	r2, [pc, #372]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dca:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008dcc:	e000      	b.n	8008dd0 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8008dce:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008dd0:	4b5a      	ldr	r3, [pc, #360]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f8      	beq.n	8008dce <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008ddc:	4b58      	ldr	r3, [pc, #352]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a57      	ldr	r2, [pc, #348]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008de2:	f023 030f 	bic.w	r3, r3, #15
 8008de6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008de8:	4b55      	ldr	r3, [pc, #340]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a54      	ldr	r2, [pc, #336]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	6013      	str	r3, [r2, #0]

			break;
 8008df4:	e19a      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008df6:	4b51      	ldr	r3, [pc, #324]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	4a50      	ldr	r2, [pc, #320]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008dfc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e00:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008e02:	4b4e      	ldr	r3, [pc, #312]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4a4d      	ldr	r2, [pc, #308]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e08:	f043 0310 	orr.w	r3, r3, #16
 8008e0c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008e0e:	4b4b      	ldr	r3, [pc, #300]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	4a4a      	ldr	r2, [pc, #296]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e14:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008e1e:	4b47      	ldr	r3, [pc, #284]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4a46      	ldr	r2, [pc, #280]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e24:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008e28:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	4a43      	ldr	r2, [pc, #268]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008e34:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008e36:	4b41      	ldr	r3, [pc, #260]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e38:	4a40      	ldr	r2, [pc, #256]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008e3e:	4b3f      	ldr	r3, [pc, #252]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	4a3e      	ldr	r2, [pc, #248]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e48:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008e4a:	4b3c      	ldr	r3, [pc, #240]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	4a3b      	ldr	r2, [pc, #236]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e54:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008e56:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4a38      	ldr	r2, [pc, #224]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e60:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008e62:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a35      	ldr	r2, [pc, #212]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e6c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e6e:	e000      	b.n	8008e72 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8008e70:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e72:	4b32      	ldr	r3, [pc, #200]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0f8      	beq.n	8008e70 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008e7e:	4b30      	ldr	r3, [pc, #192]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a2f      	ldr	r2, [pc, #188]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008e84:	f023 030f 	bic.w	r3, r3, #15
 8008e88:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008e8a:	4b2d      	ldr	r3, [pc, #180]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a2c      	ldr	r2, [pc, #176]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	6013      	str	r3, [r2, #0]

			break;
 8008e96:	e149      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008e98:	4b28      	ldr	r3, [pc, #160]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a27      	ldr	r2, [pc, #156]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ea2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008ea4:	4b25      	ldr	r3, [pc, #148]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	4a24      	ldr	r2, [pc, #144]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008eaa:	f043 0310 	orr.w	r3, r3, #16
 8008eae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008eb0:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4a21      	ldr	r2, [pc, #132]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008eb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ec6:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8008eca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ed2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008ed6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008ed8:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008eda:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008ee0:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eea:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	4a12      	ldr	r2, [pc, #72]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ef6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008ef8:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	4a0f      	ldr	r2, [pc, #60]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f02:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008f04:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a0c      	ldr	r2, [pc, #48]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f0e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f10:	e000      	b.n	8008f14 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8008f12:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <RCC_enableMaxFrequencies+0x448>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0f8      	beq.n	8008f12 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a06      	ldr	r2, [pc, #24]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008f26:	f023 030f 	bic.w	r3, r3, #15
 8008f2a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8008f2c:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a03      	ldr	r2, [pc, #12]	; (8008f40 <RCC_enableMaxFrequencies+0x44c>)
 8008f32:	f043 0302 	orr.w	r3, r3, #2
 8008f36:	6013      	str	r3, [r2, #0]

			break;
 8008f38:	e0f8      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
 8008f3a:	bf00      	nop
 8008f3c:	40023800 	.word	0x40023800
 8008f40:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008f44:	4b84      	ldr	r3, [pc, #528]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	4a83      	ldr	r2, [pc, #524]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f4e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008f50:	4b81      	ldr	r3, [pc, #516]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	4a80      	ldr	r2, [pc, #512]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f56:	f043 0310 	orr.w	r3, r3, #16
 8008f5a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008f5c:	4b7e      	ldr	r3, [pc, #504]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	4a7d      	ldr	r2, [pc, #500]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8008f6c:	4b7a      	ldr	r3, [pc, #488]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a79      	ldr	r2, [pc, #484]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f72:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008f76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008f78:	4b77      	ldr	r3, [pc, #476]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	4a76      	ldr	r2, [pc, #472]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008f84:	4b74      	ldr	r3, [pc, #464]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f86:	4a74      	ldr	r2, [pc, #464]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008f8c:	4b72      	ldr	r3, [pc, #456]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	4a71      	ldr	r2, [pc, #452]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f96:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008f98:	4b6f      	ldr	r3, [pc, #444]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	4a6e      	ldr	r2, [pc, #440]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008f9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fa2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008fa4:	4b6c      	ldr	r3, [pc, #432]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	4a6b      	ldr	r2, [pc, #428]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fae:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008fb0:	4b69      	ldr	r3, [pc, #420]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a68      	ldr	r2, [pc, #416]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fba:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008fbc:	e000      	b.n	8008fc0 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8008fbe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008fc0:	4b65      	ldr	r3, [pc, #404]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0f8      	beq.n	8008fbe <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008fcc:	4b63      	ldr	r3, [pc, #396]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a62      	ldr	r2, [pc, #392]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8008fd2:	f023 030f 	bic.w	r3, r3, #15
 8008fd6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8008fd8:	4b60      	ldr	r3, [pc, #384]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a5f      	ldr	r2, [pc, #380]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	6013      	str	r3, [r2, #0]

			break;
 8008fe4:	e0a2      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008fe6:	4b5c      	ldr	r3, [pc, #368]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	4a5b      	ldr	r2, [pc, #364]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008fec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ff0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008ff2:	4b59      	ldr	r3, [pc, #356]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4a58      	ldr	r2, [pc, #352]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8008ff8:	f043 0310 	orr.w	r3, r3, #16
 8008ffc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008ffe:	4b56      	ldr	r3, [pc, #344]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	4a55      	ldr	r2, [pc, #340]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009004:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800900e:	4b52      	ldr	r3, [pc, #328]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	4a51      	ldr	r2, [pc, #324]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009014:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009018:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800901a:	4b4f      	ldr	r3, [pc, #316]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	4a4e      	ldr	r2, [pc, #312]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009020:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009024:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009026:	4b4c      	ldr	r3, [pc, #304]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009028:	4a4b      	ldr	r2, [pc, #300]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800902e:	4b4a      	ldr	r3, [pc, #296]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4a49      	ldr	r2, [pc, #292]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009038:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800903a:	4b47      	ldr	r3, [pc, #284]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	4a46      	ldr	r2, [pc, #280]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009044:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009046:	4b44      	ldr	r3, [pc, #272]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4a43      	ldr	r2, [pc, #268]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800904c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009050:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009052:	4b41      	ldr	r3, [pc, #260]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a40      	ldr	r2, [pc, #256]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800905c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800905e:	e000      	b.n	8009062 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8009060:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009062:	4b3d      	ldr	r3, [pc, #244]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f8      	beq.n	8009060 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800906e:	4b3b      	ldr	r3, [pc, #236]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a3a      	ldr	r2, [pc, #232]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009074:	f023 030f 	bic.w	r3, r3, #15
 8009078:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800907a:	4b38      	ldr	r3, [pc, #224]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a37      	ldr	r2, [pc, #220]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	6013      	str	r3, [r2, #0]

			break;
 8009086:	e051      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009088:	4b33      	ldr	r3, [pc, #204]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	4a32      	ldr	r2, [pc, #200]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800908e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009092:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8009094:	4b30      	ldr	r3, [pc, #192]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a2f      	ldr	r2, [pc, #188]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800909a:	f043 0308 	orr.w	r3, r3, #8
 800909e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80090a0:	4b2d      	ldr	r3, [pc, #180]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a2c      	ldr	r2, [pc, #176]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80090b0:	4b29      	ldr	r3, [pc, #164]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a28      	ldr	r2, [pc, #160]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090b6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80090ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80090bc:	4b26      	ldr	r3, [pc, #152]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4a25      	ldr	r2, [pc, #148]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80090c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80090c8:	4b23      	ldr	r3, [pc, #140]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090ca:	4a23      	ldr	r2, [pc, #140]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80090d0:	4b21      	ldr	r3, [pc, #132]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a20      	ldr	r2, [pc, #128]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090da:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80090dc:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4a1d      	ldr	r2, [pc, #116]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	4a1a      	ldr	r2, [pc, #104]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090f2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80090f4:	4b18      	ldr	r3, [pc, #96]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a17      	ldr	r2, [pc, #92]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 80090fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090fe:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009100:	e000      	b.n	8009104 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8009102:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009104:	4b14      	ldr	r3, [pc, #80]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0f8      	beq.n	8009102 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009110:	4b12      	ldr	r3, [pc, #72]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a11      	ldr	r2, [pc, #68]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009116:	f023 030f 	bic.w	r3, r3, #15
 800911a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a0e      	ldr	r2, [pc, #56]	; (800915c <RCC_enableMaxFrequencies+0x668>)
 8009122:	f043 0303 	orr.w	r3, r3, #3
 8009126:	6013      	str	r3, [r2, #0]

			break;
 8009128:	e000      	b.n	800912c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800912a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	4a09      	ldr	r2, [pc, #36]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 8009132:	f043 0302 	orr.w	r3, r3, #2
 8009136:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009138:	e000      	b.n	800913c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800913a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <RCC_enableMaxFrequencies+0x664>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f8      	beq.n	800913a <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40023800 	.word	0x40023800
 800915c:	40023c00 	.word	0x40023c00

08009160 <__NVIC_EnableIRQ>:
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800916a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916e:	2b00      	cmp	r3, #0
 8009170:	db0b      	blt.n	800918a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	f003 021f 	and.w	r2, r3, #31
 8009178:	4907      	ldr	r1, [pc, #28]	; (8009198 <__NVIC_EnableIRQ+0x38>)
 800917a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917e:	095b      	lsrs	r3, r3, #5
 8009180:	2001      	movs	r0, #1
 8009182:	fa00 f202 	lsl.w	r2, r0, r2
 8009186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800918a:	bf00      	nop
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	e000e100 	.word	0xe000e100

0800919c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	6039      	str	r1, [r7, #0]
 80091a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	db0a      	blt.n	80091c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	490c      	ldr	r1, [pc, #48]	; (80091e8 <__NVIC_SetPriority+0x4c>)
 80091b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ba:	0112      	lsls	r2, r2, #4
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	440b      	add	r3, r1
 80091c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80091c4:	e00a      	b.n	80091dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4908      	ldr	r1, [pc, #32]	; (80091ec <__NVIC_SetPriority+0x50>)
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	3b04      	subs	r3, #4
 80091d4:	0112      	lsls	r2, r2, #4
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	440b      	add	r3, r1
 80091da:	761a      	strb	r2, [r3, #24]
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	e000e100 	.word	0xe000e100
 80091ec:	e000ed00 	.word	0xe000ed00

080091f0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80091f8:	b672      	cpsid	i
}
 80091fa:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a91      	ldr	r2, [pc, #580]	; (8009448 <USART_Config+0x258>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d106      	bne.n	8009214 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8009206:	4b91      	ldr	r3, [pc, #580]	; (800944c <USART_Config+0x25c>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	4a90      	ldr	r2, [pc, #576]	; (800944c <USART_Config+0x25c>)
 800920c:	f043 0310 	orr.w	r3, r3, #16
 8009210:	6453      	str	r3, [r2, #68]	; 0x44
 8009212:	e018      	b.n	8009246 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a8d      	ldr	r2, [pc, #564]	; (8009450 <USART_Config+0x260>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d106      	bne.n	800922c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800921e:	4b8b      	ldr	r3, [pc, #556]	; (800944c <USART_Config+0x25c>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	4a8a      	ldr	r2, [pc, #552]	; (800944c <USART_Config+0x25c>)
 8009224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009228:	6413      	str	r3, [r2, #64]	; 0x40
 800922a:	e00c      	b.n	8009246 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a88      	ldr	r2, [pc, #544]	; (8009454 <USART_Config+0x264>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d106      	bne.n	8009244 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8009236:	4b85      	ldr	r3, [pc, #532]	; (800944c <USART_Config+0x25c>)
 8009238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923a:	4a84      	ldr	r2, [pc, #528]	; (800944c <USART_Config+0x25c>)
 800923c:	f043 0320 	orr.w	r3, r3, #32
 8009240:	6453      	str	r3, [r2, #68]	; 0x44
 8009242:	e000      	b.n	8009246 <USART_Config+0x56>
	}
	else{
		__NOP();
 8009244:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7a5b      	ldrb	r3, [r3, #9]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d025      	beq.n	80092aa <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7a5b      	ldrb	r3, [r3, #9]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d110      	bne.n	8009288 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009274:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009284:	60da      	str	r2, [r3, #12]
 8009286:	e018      	b.n	80092ba <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009296:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092a6:	60da      	str	r2, [r3, #12]
 80092a8:	e007      	b.n	80092ba <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68da      	ldr	r2, [r3, #12]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b8:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7a1b      	ldrb	r3, [r3, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d108      	bne.n	80092d4 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e007      	b.n	80092e4 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092e2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7a9b      	ldrb	r3, [r3, #10]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d82f      	bhi.n	800934c <USART_Config+0x15c>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USART_Config+0x104>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009305 	.word	0x08009305
 80092f8:	08009317 	.word	0x08009317
 80092fc:	08009329 	.word	0x08009329
 8009300:	0800933b 	.word	0x0800933b
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009312:	611a      	str	r2, [r3, #16]
			break;
 8009314:	e023      	b.n	800935e <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009324:	611a      	str	r2, [r3, #16]
			break;
 8009326:	e01a      	b.n	800935e <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691a      	ldr	r2, [r3, #16]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009336:	611a      	str	r2, [r3, #16]
			break;
 8009338:	e011      	b.n	800935e <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009348:	611a      	str	r2, [r3, #16]
			break;
 800934a:	e008      	b.n	800935e <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	691a      	ldr	r2, [r3, #16]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800935a:	611a      	str	r2, [r3, #16]
			break;
 800935c:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681c      	ldr	r4, [r3, #0]
 8009366:	4611      	mov	r1, r2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f8d9 	bl	8009520 <brrCalculus>
 800936e:	4603      	mov	r3, r0
 8009370:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	799b      	ldrb	r3, [r3, #6]
 8009376:	2b03      	cmp	r3, #3
 8009378:	d82e      	bhi.n	80093d8 <USART_Config+0x1e8>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USART_Config+0x190>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	08009391 	.word	0x08009391
 8009384:	080093a3 	.word	0x080093a3
 8009388:	080093b5 	.word	0x080093b5
 800938c:	080093c7 	.word	0x080093c7
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0208 	orr.w	r2, r2, #8
 800939e:	60da      	str	r2, [r3, #12]
			break;
 80093a0:	e023      	b.n	80093ea <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0204 	orr.w	r2, r2, #4
 80093b0:	60da      	str	r2, [r3, #12]
			break;
 80093b2:	e01a      	b.n	80093ea <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 020c 	orr.w	r2, r2, #12
 80093c2:	60da      	str	r2, [r3, #12]
			break;
 80093c4:	e011      	b.n	80093ea <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 020c 	bic.w	r2, r2, #12
 80093d4:	60da      	str	r2, [r3, #12]
			break;
 80093d6:	e008      	b.n	80093ea <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 020c 	bic.w	r2, r2, #12
 80093e6:	60da      	str	r2, [r3, #12]
			break;
 80093e8:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	799b      	ldrb	r3, [r3, #6]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d008      	beq.n	8009404 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009400:	60da      	str	r2, [r3, #12]
 8009402:	e007      	b.n	8009414 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009412:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	795b      	ldrb	r3, [r3, #5]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d139      	bne.n	8009490 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0220 	orr.w	r2, r2, #32
 800942a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a05      	ldr	r2, [pc, #20]	; (8009448 <USART_Config+0x258>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d110      	bne.n	8009458 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009436:	2025      	movs	r0, #37	; 0x25
 8009438:	f7ff fe92 	bl	8009160 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 800943c:	2101      	movs	r1, #1
 800943e:	2025      	movs	r0, #37	; 0x25
 8009440:	f7ff feac 	bl	800919c <__NVIC_SetPriority>
 8009444:	e02c      	b.n	80094a0 <USART_Config+0x2b0>
 8009446:	bf00      	nop
 8009448:	40011000 	.word	0x40011000
 800944c:	40023800 	.word	0x40023800
 8009450:	40004400 	.word	0x40004400
 8009454:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a2c      	ldr	r2, [pc, #176]	; (8009510 <USART_Config+0x320>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d107      	bne.n	8009472 <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009462:	2026      	movs	r0, #38	; 0x26
 8009464:	f7ff fe7c 	bl	8009160 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8009468:	2101      	movs	r1, #1
 800946a:	2026      	movs	r0, #38	; 0x26
 800946c:	f7ff fe96 	bl	800919c <__NVIC_SetPriority>
 8009470:	e016      	b.n	80094a0 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a27      	ldr	r2, [pc, #156]	; (8009514 <USART_Config+0x324>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d107      	bne.n	800948c <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800947c:	2047      	movs	r0, #71	; 0x47
 800947e:	f7ff fe6f 	bl	8009160 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 8009482:	2101      	movs	r1, #1
 8009484:	2047      	movs	r0, #71	; 0x47
 8009486:	f7ff fe89 	bl	800919c <__NVIC_SetPriority>
 800948a:	e009      	b.n	80094a0 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800948c:	bf00      	nop
 800948e:	e007      	b.n	80094a0 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0220 	bic.w	r2, r2, #32
 800949e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	791b      	ldrb	r3, [r3, #4]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d124      	bne.n	80094f2 <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094b6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <USART_Config+0x328>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d103      	bne.n	80094ca <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80094c2:	2025      	movs	r0, #37	; 0x25
 80094c4:	f7ff fe4c 	bl	8009160 <__NVIC_EnableIRQ>
 80094c8:	e01b      	b.n	8009502 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a10      	ldr	r2, [pc, #64]	; (8009510 <USART_Config+0x320>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d103      	bne.n	80094dc <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80094d4:	2026      	movs	r0, #38	; 0x26
 80094d6:	f7ff fe43 	bl	8009160 <__NVIC_EnableIRQ>
 80094da:	e012      	b.n	8009502 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <USART_Config+0x324>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d103      	bne.n	80094ee <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80094e6:	2047      	movs	r0, #71	; 0x47
 80094e8:	f7ff fe3a 	bl	8009160 <__NVIC_EnableIRQ>
 80094ec:	e009      	b.n	8009502 <USART_Config+0x312>
		}
		else{
				__NOP();
 80094ee:	bf00      	nop
 80094f0:	e007      	b.n	8009502 <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009500:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009502:	b662      	cpsie	i
}
 8009504:	bf00      	nop
	}

	__enable_irq();
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bd90      	pop	{r4, r7, pc}
 800950e:	bf00      	nop
 8009510:	40004400 	.word	0x40004400
 8009514:	40011400 	.word	0x40011400
 8009518:	40011000 	.word	0x40011000
 800951c:	00000000 	.word	0x00000000

08009520 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	79db      	ldrb	r3, [r3, #7]
 800952e:	2b03      	cmp	r3, #3
 8009530:	f200 8217 	bhi.w	8009962 <brrCalculus+0x442>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <brrCalculus+0x1c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	0800954d 	.word	0x0800954d
 8009540:	08009647 	.word	0x08009647
 8009544:	08009761 	.word	0x08009761
 8009548:	08009869 	.word	0x08009869

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800954c:	4980      	ldr	r1, [pc, #512]	; (8009750 <brrCalculus+0x230>)
 800954e:	a37c      	add	r3, pc, #496	; (adr r3, 8009740 <brrCalculus+0x220>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009562:	ee17 0a90 	vmov	r0, s15
 8009566:	f7f7 f807 	bl	8000578 <__aeabi_f2d>
 800956a:	4b79      	ldr	r3, [pc, #484]	; (8009750 <brrCalculus+0x230>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f7f7 f85a 	bl	8000628 <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4975      	ldr	r1, [pc, #468]	; (8009750 <brrCalculus+0x230>)
 800957a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800957e:	4b74      	ldr	r3, [pc, #464]	; (8009750 <brrCalculus+0x230>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	f7f7 fafe 	bl	8000b88 <__aeabi_d2iz>
 800958c:	4603      	mov	r3, r0
 800958e:	b29a      	uxth	r2, r3
 8009590:	4b70      	ldr	r3, [pc, #448]	; (8009754 <brrCalculus+0x234>)
 8009592:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009594:	4b6e      	ldr	r3, [pc, #440]	; (8009750 <brrCalculus+0x230>)
 8009596:	e9d3 4500 	ldrd	r4, r5, [r3]
 800959a:	4b6d      	ldr	r3, [pc, #436]	; (8009750 <brrCalculus+0x230>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	4610      	mov	r0, r2
 80095a2:	4619      	mov	r1, r3
 80095a4:	f7f7 faf0 	bl	8000b88 <__aeabi_d2iz>
 80095a8:	4603      	mov	r3, r0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f6 ffd2 	bl	8000554 <__aeabi_i2d>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f6 fe7e 	bl	80002b8 <__aeabi_dsub>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4610      	mov	r0, r2
 80095c2:	4619      	mov	r1, r3
 80095c4:	f7f7 fb28 	bl	8000c18 <__aeabi_d2f>
 80095c8:	4603      	mov	r3, r0
 80095ca:	4a63      	ldr	r2, [pc, #396]	; (8009758 <brrCalculus+0x238>)
 80095cc:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80095ce:	4b62      	ldr	r3, [pc, #392]	; (8009758 <brrCalculus+0x238>)
 80095d0:	edd3 7a00 	vldr	s15, [r3]
 80095d4:	2004      	movs	r0, #4
 80095d6:	eeb0 0a67 	vmov.f32	s0, s15
 80095da:	f000 fa6d 	bl	8009ab8 <roundToNDecimals>
 80095de:	eef0 7a40 	vmov.f32	s15, s0
 80095e2:	4b5d      	ldr	r3, [pc, #372]	; (8009758 <brrCalculus+0x238>)
 80095e4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80095e8:	4b5b      	ldr	r3, [pc, #364]	; (8009758 <brrCalculus+0x238>)
 80095ea:	edd3 7a00 	vldr	s15, [r3]
 80095ee:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80095f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095f6:	4b58      	ldr	r3, [pc, #352]	; (8009758 <brrCalculus+0x238>)
 80095f8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80095fc:	4b56      	ldr	r3, [pc, #344]	; (8009758 <brrCalculus+0x238>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f7f6 ffb9 	bl	8000578 <__aeabi_f2d>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	ec43 2b10 	vmov	d0, r2, r3
 800960e:	f004 f91b 	bl	800d848 <round>
 8009612:	ec53 2b10 	vmov	r2, r3, d0
 8009616:	4610      	mov	r0, r2
 8009618:	4619      	mov	r1, r3
 800961a:	f7f7 fafd 	bl	8000c18 <__aeabi_d2f>
 800961e:	4603      	mov	r3, r0
 8009620:	4a4d      	ldr	r2, [pc, #308]	; (8009758 <brrCalculus+0x238>)
 8009622:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009624:	4b4b      	ldr	r3, [pc, #300]	; (8009754 <brrCalculus+0x234>)
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	011b      	lsls	r3, r3, #4
 800962a:	b29a      	uxth	r2, r3
 800962c:	4b4a      	ldr	r3, [pc, #296]	; (8009758 <brrCalculus+0x238>)
 800962e:	edd3 7a00 	vldr	s15, [r3]
 8009632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009636:	ee17 3a90 	vmov	r3, s15
 800963a:	b29b      	uxth	r3, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	4b46      	ldr	r3, [pc, #280]	; (800975c <brrCalculus+0x23c>)
 8009642:	801a      	strh	r2, [r3, #0]


		break;
 8009644:	e18f      	b.n	8009966 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8009646:	4942      	ldr	r1, [pc, #264]	; (8009750 <brrCalculus+0x230>)
 8009648:	a33f      	add	r3, pc, #252	; (adr r3, 8009748 <brrCalculus+0x228>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	ee17 0a90 	vmov	r0, s15
 8009660:	f7f6 ff8a 	bl	8000578 <__aeabi_f2d>
 8009664:	4b3a      	ldr	r3, [pc, #232]	; (8009750 <brrCalculus+0x230>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f6 ffdd 	bl	8000628 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4937      	ldr	r1, [pc, #220]	; (8009750 <brrCalculus+0x230>)
 8009674:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009678:	4b35      	ldr	r3, [pc, #212]	; (8009750 <brrCalculus+0x230>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	f7f7 fa81 	bl	8000b88 <__aeabi_d2iz>
 8009686:	4603      	mov	r3, r0
 8009688:	b29a      	uxth	r2, r3
 800968a:	4b32      	ldr	r3, [pc, #200]	; (8009754 <brrCalculus+0x234>)
 800968c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800968e:	4b30      	ldr	r3, [pc, #192]	; (8009750 <brrCalculus+0x230>)
 8009690:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009694:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <brrCalculus+0x230>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	4610      	mov	r0, r2
 800969c:	4619      	mov	r1, r3
 800969e:	f7f7 fa73 	bl	8000b88 <__aeabi_d2iz>
 80096a2:	4603      	mov	r3, r0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f6 ff55 	bl	8000554 <__aeabi_i2d>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 fe01 	bl	80002b8 <__aeabi_dsub>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	f7f7 faab 	bl	8000c18 <__aeabi_d2f>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4a24      	ldr	r2, [pc, #144]	; (8009758 <brrCalculus+0x238>)
 80096c6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80096c8:	4b23      	ldr	r3, [pc, #140]	; (8009758 <brrCalculus+0x238>)
 80096ca:	edd3 7a00 	vldr	s15, [r3]
 80096ce:	2004      	movs	r0, #4
 80096d0:	eeb0 0a67 	vmov.f32	s0, s15
 80096d4:	f000 f9f0 	bl	8009ab8 <roundToNDecimals>
 80096d8:	eef0 7a40 	vmov.f32	s15, s0
 80096dc:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <brrCalculus+0x238>)
 80096de:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80096e2:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <brrCalculus+0x238>)
 80096e4:	edd3 7a00 	vldr	s15, [r3]
 80096e8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80096ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096f0:	4b19      	ldr	r3, [pc, #100]	; (8009758 <brrCalculus+0x238>)
 80096f2:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80096f6:	4b18      	ldr	r3, [pc, #96]	; (8009758 <brrCalculus+0x238>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f6 ff3c 	bl	8000578 <__aeabi_f2d>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	ec43 2b10 	vmov	d0, r2, r3
 8009708:	f004 f89e 	bl	800d848 <round>
 800970c:	ec53 2b10 	vmov	r2, r3, d0
 8009710:	4610      	mov	r0, r2
 8009712:	4619      	mov	r1, r3
 8009714:	f7f7 fa80 	bl	8000c18 <__aeabi_d2f>
 8009718:	4603      	mov	r3, r0
 800971a:	4a0f      	ldr	r2, [pc, #60]	; (8009758 <brrCalculus+0x238>)
 800971c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800971e:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <brrCalculus+0x234>)
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	b29a      	uxth	r2, r3
 8009726:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <brrCalculus+0x238>)
 8009728:	edd3 7a00 	vldr	s15, [r3]
 800972c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009730:	ee17 3a90 	vmov	r3, s15
 8009734:	b29b      	uxth	r3, r3
 8009736:	4313      	orrs	r3, r2
 8009738:	b29a      	uxth	r2, r3
 800973a:	4b08      	ldr	r3, [pc, #32]	; (800975c <brrCalculus+0x23c>)
 800973c:	801a      	strh	r2, [r3, #0]


		break;
 800973e:	e112      	b.n	8009966 <brrCalculus+0x446>
 8009740:	b4e81b4f 	.word	0xb4e81b4f
 8009744:	3edb4e81 	.word	0x3edb4e81
 8009748:	b4e81b4f 	.word	0xb4e81b4f
 800974c:	3ecb4e81 	.word	0x3ecb4e81
 8009750:	20012260 	.word	0x20012260
 8009754:	20012258 	.word	0x20012258
 8009758:	2001225c 	.word	0x2001225c
 800975c:	20012256 	.word	0x20012256
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009760:	4989      	ldr	r1, [pc, #548]	; (8009988 <brrCalculus+0x468>)
 8009762:	a385      	add	r3, pc, #532	; (adr r3, 8009978 <brrCalculus+0x458>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	ee17 0a90 	vmov	r0, s15
 800977a:	f7f6 fefd 	bl	8000578 <__aeabi_f2d>
 800977e:	4b82      	ldr	r3, [pc, #520]	; (8009988 <brrCalculus+0x468>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f6 ff50 	bl	8000628 <__aeabi_dmul>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	497e      	ldr	r1, [pc, #504]	; (8009988 <brrCalculus+0x468>)
 800978e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009792:	4b7d      	ldr	r3, [pc, #500]	; (8009988 <brrCalculus+0x468>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	4610      	mov	r0, r2
 800979a:	4619      	mov	r1, r3
 800979c:	f7f7 f9f4 	bl	8000b88 <__aeabi_d2iz>
 80097a0:	4603      	mov	r3, r0
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	4b79      	ldr	r3, [pc, #484]	; (800998c <brrCalculus+0x46c>)
 80097a6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80097a8:	4b77      	ldr	r3, [pc, #476]	; (8009988 <brrCalculus+0x468>)
 80097aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097ae:	4b76      	ldr	r3, [pc, #472]	; (8009988 <brrCalculus+0x468>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	4610      	mov	r0, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	f7f7 f9e6 	bl	8000b88 <__aeabi_d2iz>
 80097bc:	4603      	mov	r3, r0
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f6 fec8 	bl	8000554 <__aeabi_i2d>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f6 fd74 	bl	80002b8 <__aeabi_dsub>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	f7f7 fa1e 	bl	8000c18 <__aeabi_d2f>
 80097dc:	4603      	mov	r3, r0
 80097de:	4a6c      	ldr	r2, [pc, #432]	; (8009990 <brrCalculus+0x470>)
 80097e0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80097e2:	4b6b      	ldr	r3, [pc, #428]	; (8009990 <brrCalculus+0x470>)
 80097e4:	edd3 7a00 	vldr	s15, [r3]
 80097e8:	2004      	movs	r0, #4
 80097ea:	eeb0 0a67 	vmov.f32	s0, s15
 80097ee:	f000 f963 	bl	8009ab8 <roundToNDecimals>
 80097f2:	eef0 7a40 	vmov.f32	s15, s0
 80097f6:	4b66      	ldr	r3, [pc, #408]	; (8009990 <brrCalculus+0x470>)
 80097f8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80097fc:	4b64      	ldr	r3, [pc, #400]	; (8009990 <brrCalculus+0x470>)
 80097fe:	edd3 7a00 	vldr	s15, [r3]
 8009802:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800980a:	4b61      	ldr	r3, [pc, #388]	; (8009990 <brrCalculus+0x470>)
 800980c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009810:	4b5f      	ldr	r3, [pc, #380]	; (8009990 <brrCalculus+0x470>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f7f6 feaf 	bl	8000578 <__aeabi_f2d>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	ec43 2b10 	vmov	d0, r2, r3
 8009822:	f004 f811 	bl	800d848 <round>
 8009826:	ec51 0b10 	vmov	r0, r1, d0
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	4b59      	ldr	r3, [pc, #356]	; (8009994 <brrCalculus+0x474>)
 8009830:	f7f6 fd44 	bl	80002bc <__adddf3>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	4610      	mov	r0, r2
 800983a:	4619      	mov	r1, r3
 800983c:	f7f7 f9ec 	bl	8000c18 <__aeabi_d2f>
 8009840:	4603      	mov	r3, r0
 8009842:	4a53      	ldr	r2, [pc, #332]	; (8009990 <brrCalculus+0x470>)
 8009844:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009846:	4b51      	ldr	r3, [pc, #324]	; (800998c <brrCalculus+0x46c>)
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	b29a      	uxth	r2, r3
 800984e:	4b50      	ldr	r3, [pc, #320]	; (8009990 <brrCalculus+0x470>)
 8009850:	edd3 7a00 	vldr	s15, [r3]
 8009854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009858:	ee17 3a90 	vmov	r3, s15
 800985c:	b29b      	uxth	r3, r3
 800985e:	4313      	orrs	r3, r2
 8009860:	b29a      	uxth	r2, r3
 8009862:	4b4d      	ldr	r3, [pc, #308]	; (8009998 <brrCalculus+0x478>)
 8009864:	801a      	strh	r2, [r3, #0]


		break;
 8009866:	e07e      	b.n	8009966 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009868:	4947      	ldr	r1, [pc, #284]	; (8009988 <brrCalculus+0x468>)
 800986a:	a345      	add	r3, pc, #276	; (adr r3, 8009980 <brrCalculus+0x460>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	ee17 0a90 	vmov	r0, s15
 8009882:	f7f6 fe79 	bl	8000578 <__aeabi_f2d>
 8009886:	4b40      	ldr	r3, [pc, #256]	; (8009988 <brrCalculus+0x468>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f7f6 fecc 	bl	8000628 <__aeabi_dmul>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	493c      	ldr	r1, [pc, #240]	; (8009988 <brrCalculus+0x468>)
 8009896:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800989a:	4b3b      	ldr	r3, [pc, #236]	; (8009988 <brrCalculus+0x468>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	4610      	mov	r0, r2
 80098a2:	4619      	mov	r1, r3
 80098a4:	f7f7 f970 	bl	8000b88 <__aeabi_d2iz>
 80098a8:	4603      	mov	r3, r0
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	4b37      	ldr	r3, [pc, #220]	; (800998c <brrCalculus+0x46c>)
 80098ae:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80098b0:	4b35      	ldr	r3, [pc, #212]	; (8009988 <brrCalculus+0x468>)
 80098b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80098b6:	4b34      	ldr	r3, [pc, #208]	; (8009988 <brrCalculus+0x468>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4610      	mov	r0, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	f7f7 f962 	bl	8000b88 <__aeabi_d2iz>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7f6 fe44 	bl	8000554 <__aeabi_i2d>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4620      	mov	r0, r4
 80098d2:	4629      	mov	r1, r5
 80098d4:	f7f6 fcf0 	bl	80002b8 <__aeabi_dsub>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4610      	mov	r0, r2
 80098de:	4619      	mov	r1, r3
 80098e0:	f7f7 f99a 	bl	8000c18 <__aeabi_d2f>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <brrCalculus+0x470>)
 80098e8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80098ea:	4b29      	ldr	r3, [pc, #164]	; (8009990 <brrCalculus+0x470>)
 80098ec:	edd3 7a00 	vldr	s15, [r3]
 80098f0:	2004      	movs	r0, #4
 80098f2:	eeb0 0a67 	vmov.f32	s0, s15
 80098f6:	f000 f8df 	bl	8009ab8 <roundToNDecimals>
 80098fa:	eef0 7a40 	vmov.f32	s15, s0
 80098fe:	4b24      	ldr	r3, [pc, #144]	; (8009990 <brrCalculus+0x470>)
 8009900:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009904:	4b22      	ldr	r3, [pc, #136]	; (8009990 <brrCalculus+0x470>)
 8009906:	edd3 7a00 	vldr	s15, [r3]
 800990a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800990e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009912:	4b1f      	ldr	r3, [pc, #124]	; (8009990 <brrCalculus+0x470>)
 8009914:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009918:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <brrCalculus+0x470>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f7f6 fe2b 	bl	8000578 <__aeabi_f2d>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	ec43 2b10 	vmov	d0, r2, r3
 800992a:	f003 ff8d 	bl	800d848 <round>
 800992e:	ec53 2b10 	vmov	r2, r3, d0
 8009932:	4610      	mov	r0, r2
 8009934:	4619      	mov	r1, r3
 8009936:	f7f7 f96f 	bl	8000c18 <__aeabi_d2f>
 800993a:	4603      	mov	r3, r0
 800993c:	4a14      	ldr	r2, [pc, #80]	; (8009990 <brrCalculus+0x470>)
 800993e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009940:	4b12      	ldr	r3, [pc, #72]	; (800998c <brrCalculus+0x46c>)
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	b29a      	uxth	r2, r3
 8009948:	4b11      	ldr	r3, [pc, #68]	; (8009990 <brrCalculus+0x470>)
 800994a:	edd3 7a00 	vldr	s15, [r3]
 800994e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009952:	ee17 3a90 	vmov	r3, s15
 8009956:	b29b      	uxth	r3, r3
 8009958:	4313      	orrs	r3, r2
 800995a:	b29a      	uxth	r2, r3
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <brrCalculus+0x478>)
 800995e:	801a      	strh	r2, [r3, #0]


		break;
 8009960:	e001      	b.n	8009966 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009962:	bf00      	nop
		break;
 8009964:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <brrCalculus+0x478>)
 8009968:	881b      	ldrh	r3, [r3, #0]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bdb0      	pop	{r4, r5, r7, pc}
 8009972:	bf00      	nop
 8009974:	f3af 8000 	nop.w
 8009978:	789abcdf 	.word	0x789abcdf
 800997c:	3ec23456 	.word	0x3ec23456
 8009980:	789abcdf 	.word	0x789abcdf
 8009984:	3ea23456 	.word	0x3ea23456
 8009988:	20012260 	.word	0x20012260
 800998c:	20012258 	.word	0x20012258
 8009990:	2001225c 	.word	0x2001225c
 8009994:	3ff00000 	.word	0x3ff00000
 8009998:	20012256 	.word	0x20012256

0800999c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80099a6:	e000      	b.n	80099aa <writeChar+0xe>
		__NOP();
 80099a8:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0f7      	beq.n	80099a8 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	605a      	str	r2, [r3, #4]

}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80099d6:	e008      	b.n	80099ea <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff ffdc 	bl	800999c <writeChar>
		msgToSend ++ ;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1f2      	bne.n	80099d8 <writeMsg+0xc>
	}
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80099fc:	b480      	push	{r7}
 80099fe:	af00      	add	r7, sp, #0
	__NOP();
 8009a00:	bf00      	nop
}
 8009a02:	bf00      	nop
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
	__NOP();
 8009a10:	bf00      	nop
}
 8009a12:	bf00      	nop
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
	return auxRxData;
 8009a20:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <getRxData+0x14>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20012268 	.word	0x20012268

08009a34 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009a38:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <USART2_IRQHandler+0x24>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d006      	beq.n	8009a52 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <USART2_IRQHandler+0x24>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <USART2_IRQHandler+0x28>)
 8009a4c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8009a4e:	f7f8 f8e9 	bl	8001c24 <usart2Rx_Callback>
	}

}
 8009a52:	bf00      	nop
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	40004400 	.word	0x40004400
 8009a5c:	20012268 	.word	0x20012268

08009a60 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <USART1_IRQHandler+0x24>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <USART1_IRQHandler+0x24>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <USART1_IRQHandler+0x28>)
 8009a78:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8009a7a:	f7ff ffbf 	bl	80099fc <usart1Rx_Callback>
	}
}
 8009a7e:	bf00      	nop
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40011000 	.word	0x40011000
 8009a88:	20012268 	.word	0x20012268

08009a8c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <USART6_IRQHandler+0x24>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <USART6_IRQHandler+0x24>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <USART6_IRQHandler+0x28>)
 8009aa4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009aa6:	f7ff ffb1 	bl	8009a0c <usart6Rx_Callback>
	}

}
 8009aaa:	bf00      	nop
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	40011400 	.word	0x40011400
 8009ab4:	20012268 	.word	0x20012268

08009ab8 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ac2:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8009ac4:	6838      	ldr	r0, [r7, #0]
 8009ac6:	f7f6 fd45 	bl	8000554 <__aeabi_i2d>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	ec43 2b11 	vmov	d1, r2, r3
 8009ad2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009b50 <roundToNDecimals+0x98>
 8009ad6:	f003 ff8d 	bl	800d9f4 <pow>
 8009ada:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f6 fd4a 	bl	8000578 <__aeabi_f2d>
 8009ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ae8:	f7f6 fd9e 	bl	8000628 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4610      	mov	r0, r2
 8009af2:	4619      	mov	r1, r3
 8009af4:	f7f7 f890 	bl	8000c18 <__aeabi_d2f>
 8009af8:	4603      	mov	r3, r0
 8009afa:	607b      	str	r3, [r7, #4]

    number = round(number);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f6 fd3b 	bl	8000578 <__aeabi_f2d>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	ec43 2b10 	vmov	d0, r2, r3
 8009b0a:	f003 fe9d 	bl	800d848 <round>
 8009b0e:	ec53 2b10 	vmov	r2, r3, d0
 8009b12:	4610      	mov	r0, r2
 8009b14:	4619      	mov	r1, r3
 8009b16:	f7f7 f87f 	bl	8000c18 <__aeabi_d2f>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7f6 fd2a 	bl	8000578 <__aeabi_f2d>
 8009b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b28:	f7f6 fea8 	bl	800087c <__aeabi_ddiv>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4610      	mov	r0, r2
 8009b32:	4619      	mov	r1, r3
 8009b34:	f7f7 f870 	bl	8000c18 <__aeabi_d2f>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	607b      	str	r3, [r7, #4]

    return number;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	ee07 3a90 	vmov	s15, r3
}
 8009b42:	eeb0 0a67 	vmov.f32	s0, s15
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	f3af 8000 	nop.w
 8009b50:	00000000 	.word	0x00000000
 8009b54:	40240000 	.word	0x40240000

08009b58 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a89      	ldr	r2, [pc, #548]	; (8009d8c <i2c_config+0x234>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d106      	bne.n	8009b78 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8009b6a:	4b89      	ldr	r3, [pc, #548]	; (8009d90 <i2c_config+0x238>)
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	4a88      	ldr	r2, [pc, #544]	; (8009d90 <i2c_config+0x238>)
 8009b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b74:	6413      	str	r3, [r2, #64]	; 0x40
 8009b76:	e016      	b.n	8009ba6 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a85      	ldr	r2, [pc, #532]	; (8009d94 <i2c_config+0x23c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d106      	bne.n	8009b90 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009b82:	4b83      	ldr	r3, [pc, #524]	; (8009d90 <i2c_config+0x238>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	4a82      	ldr	r2, [pc, #520]	; (8009d90 <i2c_config+0x238>)
 8009b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8e:	e00a      	b.n	8009ba6 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a80      	ldr	r2, [pc, #512]	; (8009d98 <i2c_config+0x240>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d105      	bne.n	8009ba6 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8009b9a:	4b7d      	ldr	r3, [pc, #500]	; (8009d90 <i2c_config+0x238>)
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	4a7c      	ldr	r2, [pc, #496]	; (8009d90 <i2c_config+0x238>)
 8009ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ba4:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0201 	bic.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009bb6:	e000      	b.n	8009bba <i2c_config+0x62>
		__NOP();
 8009bb8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1f7      	bne.n	8009bb8 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bd6:	601a      	str	r2, [r3, #0]

	__NOP();
 8009bd8:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009be8:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009bf8:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	79db      	ldrb	r3, [r3, #7]
 8009bfe:	2b10      	cmp	r3, #16
 8009c00:	d108      	bne.n	8009c14 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0210 	orr.w	r2, r2, #16
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	e018      	b.n	8009c46 <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	79db      	ldrb	r3, [r3, #7]
 8009c18:	2b19      	cmp	r3, #25
 8009c1a:	d108      	bne.n	8009c2e <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0219 	orr.w	r2, r2, #25
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	e00b      	b.n	8009c46 <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	79db      	ldrb	r3, [r3, #7]
 8009c32:	2b32      	cmp	r3, #50	; 0x32
 8009c34:	d107      	bne.n	8009c46 <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8009c44:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	795b      	ldrb	r3, [r3, #5]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d15c      	bne.n	8009d18 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c6c:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	79db      	ldrb	r3, [r3, #7]
 8009c72:	2b32      	cmp	r3, #50	; 0x32
 8009c74:	d03f      	beq.n	8009cf6 <i2c_config+0x19e>
 8009c76:	2b32      	cmp	r3, #50	; 0x32
 8009c78:	f300 80b2 	bgt.w	8009de0 <i2c_config+0x288>
 8009c7c:	2b19      	cmp	r3, #25
 8009c7e:	d029      	beq.n	8009cd4 <i2c_config+0x17c>
 8009c80:	2b19      	cmp	r3, #25
 8009c82:	f300 80ad 	bgt.w	8009de0 <i2c_config+0x288>
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d002      	beq.n	8009c90 <i2c_config+0x138>
 8009c8a:	2b10      	cmp	r3, #16
 8009c8c:	d011      	beq.n	8009cb2 <i2c_config+0x15a>


				break;
			}default:{

				break;
 8009c8e:	e0a7      	b.n	8009de0 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	69da      	ldr	r2, [r3, #28]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0214 	orr.w	r2, r2, #20
 8009c9e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6a1a      	ldr	r2, [r3, #32]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0205 	orr.w	r2, r2, #5
 8009cae:	621a      	str	r2, [r3, #32]
				break;
 8009cb0:	e099      	b.n	8009de6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69da      	ldr	r2, [r3, #28]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8009cc0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6a1a      	ldr	r2, [r3, #32]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0211 	orr.w	r2, r2, #17
 8009cd0:	621a      	str	r2, [r3, #32]
				break;
 8009cd2:	e088      	b.n	8009de6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	69da      	ldr	r2, [r3, #28]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8009ce2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6a1a      	ldr	r2, [r3, #32]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0215 	orr.w	r2, r2, #21
 8009cf2:	621a      	str	r2, [r3, #32]
				break;
 8009cf4:	e077      	b.n	8009de6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8009d04:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6a1a      	ldr	r2, [r3, #32]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8009d14:	621a      	str	r2, [r3, #32]
				break;
 8009d16:	e066      	b.n	8009de6 <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69da      	ldr	r2, [r3, #28]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d26:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	79db      	ldrb	r3, [r3, #7]
 8009d2c:	2b32      	cmp	r3, #50	; 0x32
 8009d2e:	d046      	beq.n	8009dbe <i2c_config+0x266>
 8009d30:	2b32      	cmp	r3, #50	; 0x32
 8009d32:	dc57      	bgt.n	8009de4 <i2c_config+0x28c>
 8009d34:	2b19      	cmp	r3, #25
 8009d36:	d031      	beq.n	8009d9c <i2c_config+0x244>
 8009d38:	2b19      	cmp	r3, #25
 8009d3a:	dc53      	bgt.n	8009de4 <i2c_config+0x28c>
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d002      	beq.n	8009d46 <i2c_config+0x1ee>
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d011      	beq.n	8009d68 <i2c_config+0x210>


				break;
			}default:{

				break;
 8009d44:	e04e      	b.n	8009de4 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0203 	orr.w	r2, r2, #3
 8009d54:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6a1a      	ldr	r2, [r3, #32]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f042 0202 	orr.w	r2, r2, #2
 8009d64:	621a      	str	r2, [r3, #32]
				break;
 8009d66:	e03e      	b.n	8009de6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69da      	ldr	r2, [r3, #28]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 020d 	orr.w	r2, r2, #13
 8009d76:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0206 	orr.w	r2, r2, #6
 8009d86:	621a      	str	r2, [r3, #32]
				break;
 8009d88:	e02d      	b.n	8009de6 <i2c_config+0x28e>
 8009d8a:	bf00      	nop
 8009d8c:	40005400 	.word	0x40005400
 8009d90:	40023800 	.word	0x40023800
 8009d94:	40005800 	.word	0x40005800
 8009d98:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69da      	ldr	r2, [r3, #28]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0215 	orr.w	r2, r2, #21
 8009daa:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0208 	orr.w	r2, r2, #8
 8009dba:	621a      	str	r2, [r3, #32]
				break;
 8009dbc:	e013      	b.n	8009de6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	69da      	ldr	r2, [r3, #28]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8009dcc:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6a1a      	ldr	r2, [r3, #32]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0210 	orr.w	r2, r2, #16
 8009ddc:	621a      	str	r2, [r3, #32]
				break;
 8009dde:	e002      	b.n	8009de6 <i2c_config+0x28e>
				break;
 8009de0:	bf00      	nop
 8009de2:	e002      	b.n	8009dea <i2c_config+0x292>
				break;
 8009de4:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009de6:	e000      	b.n	8009dea <i2c_config+0x292>
		__NOP();
 8009de8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1f7      	bne.n	8009de8 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f042 0201 	orr.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]


}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e2a:	601a      	str	r2, [r3, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7a1b      	ldrb	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e56:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009e58:	e000      	b.n	8009e5c <i2c_startTransaction+0x24>
		__NOP();
 8009e5a:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1f7      	bne.n	8009e5a <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e78:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8009e7a:	e000      	b.n	8009e7e <i2c_startTransaction+0x46>
		__NOP();
 8009e7c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0f7      	beq.n	8009e7c <i2c_startTransaction+0x44>
	}
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7a1b      	ldrb	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eb8:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8009eca:	e000      	b.n	8009ece <i2c_reStartTransaction+0x34>
		__NOP();
 8009ecc:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f7      	beq.n	8009ecc <i2c_reStartTransaction+0x32>
	}
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f00:	601a      	str	r2, [r3, #0]
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8009f0e:	b480      	push	{r7}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	460b      	mov	r3, r1
 8009f18:	70fb      	strb	r3, [r7, #3]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8009f22:	78fb      	ldrb	r3, [r7, #3]
 8009f24:	005a      	lsls	r2, r3, #1
 8009f26:	78bb      	ldrb	r3, [r7, #2]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8009f30:	e000      	b.n	8009f34 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8009f32:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0f7      	beq.n	8009f32 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	73fb      	strb	r3, [r7, #15]

}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8009f72:	e000      	b.n	8009f76 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8009f74:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0f7      	beq.n	8009f74 <i2c_sendMemoryAddress+0x16>
	}
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8009fa6:	e000      	b.n	8009faa <i2c_sendDataByte+0x18>
		__NOP();
 8009fa8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f7      	beq.n	8009fa8 <i2c_sendDataByte+0x16>
	}
}
 8009fb8:	bf00      	nop
 8009fba:	bf00      	nop
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8009fc6:	b480      	push	{r7}
 8009fc8:	b083      	sub	sp, #12
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8009fce:	e000      	b.n	8009fd2 <i2c_readDataByte+0xc>
		__NOP();
 8009fd0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0f7      	beq.n	8009fd0 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	799b      	ldrb	r3, [r3, #6]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <__errno>:
 8009ffc:	4b01      	ldr	r3, [pc, #4]	; (800a004 <__errno+0x8>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	20000014 	.word	0x20000014

0800a008 <__libc_init_array>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	4d0d      	ldr	r5, [pc, #52]	; (800a040 <__libc_init_array+0x38>)
 800a00c:	4c0d      	ldr	r4, [pc, #52]	; (800a044 <__libc_init_array+0x3c>)
 800a00e:	1b64      	subs	r4, r4, r5
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	2600      	movs	r6, #0
 800a014:	42a6      	cmp	r6, r4
 800a016:	d109      	bne.n	800a02c <__libc_init_array+0x24>
 800a018:	4d0b      	ldr	r5, [pc, #44]	; (800a048 <__libc_init_array+0x40>)
 800a01a:	4c0c      	ldr	r4, [pc, #48]	; (800a04c <__libc_init_array+0x44>)
 800a01c:	f006 f87c 	bl	8010118 <_init>
 800a020:	1b64      	subs	r4, r4, r5
 800a022:	10a4      	asrs	r4, r4, #2
 800a024:	2600      	movs	r6, #0
 800a026:	42a6      	cmp	r6, r4
 800a028:	d105      	bne.n	800a036 <__libc_init_array+0x2e>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a030:	4798      	blx	r3
 800a032:	3601      	adds	r6, #1
 800a034:	e7ee      	b.n	800a014 <__libc_init_array+0xc>
 800a036:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03a:	4798      	blx	r3
 800a03c:	3601      	adds	r6, #1
 800a03e:	e7f2      	b.n	800a026 <__libc_init_array+0x1e>
 800a040:	08010cf0 	.word	0x08010cf0
 800a044:	08010cf0 	.word	0x08010cf0
 800a048:	08010cf0 	.word	0x08010cf0
 800a04c:	08010cf4 	.word	0x08010cf4

0800a050 <malloc>:
 800a050:	4b02      	ldr	r3, [pc, #8]	; (800a05c <malloc+0xc>)
 800a052:	4601      	mov	r1, r0
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f000 b877 	b.w	800a148 <_malloc_r>
 800a05a:	bf00      	nop
 800a05c:	20000014 	.word	0x20000014

0800a060 <memset>:
 800a060:	4402      	add	r2, r0
 800a062:	4603      	mov	r3, r0
 800a064:	4293      	cmp	r3, r2
 800a066:	d100      	bne.n	800a06a <memset+0xa>
 800a068:	4770      	bx	lr
 800a06a:	f803 1b01 	strb.w	r1, [r3], #1
 800a06e:	e7f9      	b.n	800a064 <memset+0x4>

0800a070 <_free_r>:
 800a070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a072:	2900      	cmp	r1, #0
 800a074:	d044      	beq.n	800a100 <_free_r+0x90>
 800a076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a07a:	9001      	str	r0, [sp, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f1a1 0404 	sub.w	r4, r1, #4
 800a082:	bfb8      	it	lt
 800a084:	18e4      	addlt	r4, r4, r3
 800a086:	f001 fca1 	bl	800b9cc <__malloc_lock>
 800a08a:	4a1e      	ldr	r2, [pc, #120]	; (800a104 <_free_r+0x94>)
 800a08c:	9801      	ldr	r0, [sp, #4]
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	b933      	cbnz	r3, 800a0a0 <_free_r+0x30>
 800a092:	6063      	str	r3, [r4, #4]
 800a094:	6014      	str	r4, [r2, #0]
 800a096:	b003      	add	sp, #12
 800a098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a09c:	f001 bc9c 	b.w	800b9d8 <__malloc_unlock>
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	d908      	bls.n	800a0b6 <_free_r+0x46>
 800a0a4:	6825      	ldr	r5, [r4, #0]
 800a0a6:	1961      	adds	r1, r4, r5
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	bf01      	itttt	eq
 800a0ac:	6819      	ldreq	r1, [r3, #0]
 800a0ae:	685b      	ldreq	r3, [r3, #4]
 800a0b0:	1949      	addeq	r1, r1, r5
 800a0b2:	6021      	streq	r1, [r4, #0]
 800a0b4:	e7ed      	b.n	800a092 <_free_r+0x22>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b10b      	cbz	r3, 800a0c0 <_free_r+0x50>
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d9fa      	bls.n	800a0b6 <_free_r+0x46>
 800a0c0:	6811      	ldr	r1, [r2, #0]
 800a0c2:	1855      	adds	r5, r2, r1
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d10b      	bne.n	800a0e0 <_free_r+0x70>
 800a0c8:	6824      	ldr	r4, [r4, #0]
 800a0ca:	4421      	add	r1, r4
 800a0cc:	1854      	adds	r4, r2, r1
 800a0ce:	42a3      	cmp	r3, r4
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	d1e0      	bne.n	800a096 <_free_r+0x26>
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	6053      	str	r3, [r2, #4]
 800a0da:	4421      	add	r1, r4
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	e7da      	b.n	800a096 <_free_r+0x26>
 800a0e0:	d902      	bls.n	800a0e8 <_free_r+0x78>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	e7d6      	b.n	800a096 <_free_r+0x26>
 800a0e8:	6825      	ldr	r5, [r4, #0]
 800a0ea:	1961      	adds	r1, r4, r5
 800a0ec:	428b      	cmp	r3, r1
 800a0ee:	bf04      	itt	eq
 800a0f0:	6819      	ldreq	r1, [r3, #0]
 800a0f2:	685b      	ldreq	r3, [r3, #4]
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	bf04      	itt	eq
 800a0f8:	1949      	addeq	r1, r1, r5
 800a0fa:	6021      	streq	r1, [r4, #0]
 800a0fc:	6054      	str	r4, [r2, #4]
 800a0fe:	e7ca      	b.n	800a096 <_free_r+0x26>
 800a100:	b003      	add	sp, #12
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	2001226c 	.word	0x2001226c

0800a108 <sbrk_aligned>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4e0e      	ldr	r6, [pc, #56]	; (800a144 <sbrk_aligned+0x3c>)
 800a10c:	460c      	mov	r4, r1
 800a10e:	6831      	ldr	r1, [r6, #0]
 800a110:	4605      	mov	r5, r0
 800a112:	b911      	cbnz	r1, 800a11a <sbrk_aligned+0x12>
 800a114:	f000 fcf6 	bl	800ab04 <_sbrk_r>
 800a118:	6030      	str	r0, [r6, #0]
 800a11a:	4621      	mov	r1, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	f000 fcf1 	bl	800ab04 <_sbrk_r>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d00a      	beq.n	800a13c <sbrk_aligned+0x34>
 800a126:	1cc4      	adds	r4, r0, #3
 800a128:	f024 0403 	bic.w	r4, r4, #3
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d007      	beq.n	800a140 <sbrk_aligned+0x38>
 800a130:	1a21      	subs	r1, r4, r0
 800a132:	4628      	mov	r0, r5
 800a134:	f000 fce6 	bl	800ab04 <_sbrk_r>
 800a138:	3001      	adds	r0, #1
 800a13a:	d101      	bne.n	800a140 <sbrk_aligned+0x38>
 800a13c:	f04f 34ff 	mov.w	r4, #4294967295
 800a140:	4620      	mov	r0, r4
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	20012270 	.word	0x20012270

0800a148 <_malloc_r>:
 800a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14c:	1ccd      	adds	r5, r1, #3
 800a14e:	f025 0503 	bic.w	r5, r5, #3
 800a152:	3508      	adds	r5, #8
 800a154:	2d0c      	cmp	r5, #12
 800a156:	bf38      	it	cc
 800a158:	250c      	movcc	r5, #12
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	4607      	mov	r7, r0
 800a15e:	db01      	blt.n	800a164 <_malloc_r+0x1c>
 800a160:	42a9      	cmp	r1, r5
 800a162:	d905      	bls.n	800a170 <_malloc_r+0x28>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	2600      	movs	r6, #0
 800a16a:	4630      	mov	r0, r6
 800a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a170:	4e2e      	ldr	r6, [pc, #184]	; (800a22c <_malloc_r+0xe4>)
 800a172:	f001 fc2b 	bl	800b9cc <__malloc_lock>
 800a176:	6833      	ldr	r3, [r6, #0]
 800a178:	461c      	mov	r4, r3
 800a17a:	bb34      	cbnz	r4, 800a1ca <_malloc_r+0x82>
 800a17c:	4629      	mov	r1, r5
 800a17e:	4638      	mov	r0, r7
 800a180:	f7ff ffc2 	bl	800a108 <sbrk_aligned>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	4604      	mov	r4, r0
 800a188:	d14d      	bne.n	800a226 <_malloc_r+0xde>
 800a18a:	6834      	ldr	r4, [r6, #0]
 800a18c:	4626      	mov	r6, r4
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d140      	bne.n	800a214 <_malloc_r+0xcc>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	4631      	mov	r1, r6
 800a196:	4638      	mov	r0, r7
 800a198:	eb04 0803 	add.w	r8, r4, r3
 800a19c:	f000 fcb2 	bl	800ab04 <_sbrk_r>
 800a1a0:	4580      	cmp	r8, r0
 800a1a2:	d13a      	bne.n	800a21a <_malloc_r+0xd2>
 800a1a4:	6821      	ldr	r1, [r4, #0]
 800a1a6:	3503      	adds	r5, #3
 800a1a8:	1a6d      	subs	r5, r5, r1
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ffa5 	bl	800a108 <sbrk_aligned>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d02b      	beq.n	800a21a <_malloc_r+0xd2>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	442b      	add	r3, r5
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	e00e      	b.n	800a1e8 <_malloc_r+0xa0>
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	1b52      	subs	r2, r2, r5
 800a1ce:	d41e      	bmi.n	800a20e <_malloc_r+0xc6>
 800a1d0:	2a0b      	cmp	r2, #11
 800a1d2:	d916      	bls.n	800a202 <_malloc_r+0xba>
 800a1d4:	1961      	adds	r1, r4, r5
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	6025      	str	r5, [r4, #0]
 800a1da:	bf18      	it	ne
 800a1dc:	6059      	strne	r1, [r3, #4]
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	bf08      	it	eq
 800a1e2:	6031      	streq	r1, [r6, #0]
 800a1e4:	5162      	str	r2, [r4, r5]
 800a1e6:	604b      	str	r3, [r1, #4]
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f104 060b 	add.w	r6, r4, #11
 800a1ee:	f001 fbf3 	bl	800b9d8 <__malloc_unlock>
 800a1f2:	f026 0607 	bic.w	r6, r6, #7
 800a1f6:	1d23      	adds	r3, r4, #4
 800a1f8:	1af2      	subs	r2, r6, r3
 800a1fa:	d0b6      	beq.n	800a16a <_malloc_r+0x22>
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	50a3      	str	r3, [r4, r2]
 800a200:	e7b3      	b.n	800a16a <_malloc_r+0x22>
 800a202:	6862      	ldr	r2, [r4, #4]
 800a204:	42a3      	cmp	r3, r4
 800a206:	bf0c      	ite	eq
 800a208:	6032      	streq	r2, [r6, #0]
 800a20a:	605a      	strne	r2, [r3, #4]
 800a20c:	e7ec      	b.n	800a1e8 <_malloc_r+0xa0>
 800a20e:	4623      	mov	r3, r4
 800a210:	6864      	ldr	r4, [r4, #4]
 800a212:	e7b2      	b.n	800a17a <_malloc_r+0x32>
 800a214:	4634      	mov	r4, r6
 800a216:	6876      	ldr	r6, [r6, #4]
 800a218:	e7b9      	b.n	800a18e <_malloc_r+0x46>
 800a21a:	230c      	movs	r3, #12
 800a21c:	603b      	str	r3, [r7, #0]
 800a21e:	4638      	mov	r0, r7
 800a220:	f001 fbda 	bl	800b9d8 <__malloc_unlock>
 800a224:	e7a1      	b.n	800a16a <_malloc_r+0x22>
 800a226:	6025      	str	r5, [r4, #0]
 800a228:	e7de      	b.n	800a1e8 <_malloc_r+0xa0>
 800a22a:	bf00      	nop
 800a22c:	2001226c 	.word	0x2001226c

0800a230 <__cvt>:
 800a230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a234:	ec55 4b10 	vmov	r4, r5, d0
 800a238:	2d00      	cmp	r5, #0
 800a23a:	460e      	mov	r6, r1
 800a23c:	4619      	mov	r1, r3
 800a23e:	462b      	mov	r3, r5
 800a240:	bfbb      	ittet	lt
 800a242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a246:	461d      	movlt	r5, r3
 800a248:	2300      	movge	r3, #0
 800a24a:	232d      	movlt	r3, #45	; 0x2d
 800a24c:	700b      	strb	r3, [r1, #0]
 800a24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a254:	4691      	mov	r9, r2
 800a256:	f023 0820 	bic.w	r8, r3, #32
 800a25a:	bfbc      	itt	lt
 800a25c:	4622      	movlt	r2, r4
 800a25e:	4614      	movlt	r4, r2
 800a260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a264:	d005      	beq.n	800a272 <__cvt+0x42>
 800a266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a26a:	d100      	bne.n	800a26e <__cvt+0x3e>
 800a26c:	3601      	adds	r6, #1
 800a26e:	2102      	movs	r1, #2
 800a270:	e000      	b.n	800a274 <__cvt+0x44>
 800a272:	2103      	movs	r1, #3
 800a274:	ab03      	add	r3, sp, #12
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	ab02      	add	r3, sp, #8
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	ec45 4b10 	vmov	d0, r4, r5
 800a280:	4653      	mov	r3, sl
 800a282:	4632      	mov	r2, r6
 800a284:	f000 fd90 	bl	800ada8 <_dtoa_r>
 800a288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a28c:	4607      	mov	r7, r0
 800a28e:	d102      	bne.n	800a296 <__cvt+0x66>
 800a290:	f019 0f01 	tst.w	r9, #1
 800a294:	d022      	beq.n	800a2dc <__cvt+0xac>
 800a296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a29a:	eb07 0906 	add.w	r9, r7, r6
 800a29e:	d110      	bne.n	800a2c2 <__cvt+0x92>
 800a2a0:	783b      	ldrb	r3, [r7, #0]
 800a2a2:	2b30      	cmp	r3, #48	; 0x30
 800a2a4:	d10a      	bne.n	800a2bc <__cvt+0x8c>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	f7f6 fc23 	bl	8000af8 <__aeabi_dcmpeq>
 800a2b2:	b918      	cbnz	r0, 800a2bc <__cvt+0x8c>
 800a2b4:	f1c6 0601 	rsb	r6, r6, #1
 800a2b8:	f8ca 6000 	str.w	r6, [sl]
 800a2bc:	f8da 3000 	ldr.w	r3, [sl]
 800a2c0:	4499      	add	r9, r3
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f6 fc15 	bl	8000af8 <__aeabi_dcmpeq>
 800a2ce:	b108      	cbz	r0, 800a2d4 <__cvt+0xa4>
 800a2d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2d4:	2230      	movs	r2, #48	; 0x30
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	454b      	cmp	r3, r9
 800a2da:	d307      	bcc.n	800a2ec <__cvt+0xbc>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2e0:	1bdb      	subs	r3, r3, r7
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	b004      	add	sp, #16
 800a2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ec:	1c59      	adds	r1, r3, #1
 800a2ee:	9103      	str	r1, [sp, #12]
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	e7f0      	b.n	800a2d6 <__cvt+0xa6>

0800a2f4 <__exponent>:
 800a2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	bfb8      	it	lt
 800a2fc:	4249      	neglt	r1, r1
 800a2fe:	f803 2b02 	strb.w	r2, [r3], #2
 800a302:	bfb4      	ite	lt
 800a304:	222d      	movlt	r2, #45	; 0x2d
 800a306:	222b      	movge	r2, #43	; 0x2b
 800a308:	2909      	cmp	r1, #9
 800a30a:	7042      	strb	r2, [r0, #1]
 800a30c:	dd2a      	ble.n	800a364 <__exponent+0x70>
 800a30e:	f10d 0407 	add.w	r4, sp, #7
 800a312:	46a4      	mov	ip, r4
 800a314:	270a      	movs	r7, #10
 800a316:	46a6      	mov	lr, r4
 800a318:	460a      	mov	r2, r1
 800a31a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a31e:	fb07 1516 	mls	r5, r7, r6, r1
 800a322:	3530      	adds	r5, #48	; 0x30
 800a324:	2a63      	cmp	r2, #99	; 0x63
 800a326:	f104 34ff 	add.w	r4, r4, #4294967295
 800a32a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a32e:	4631      	mov	r1, r6
 800a330:	dcf1      	bgt.n	800a316 <__exponent+0x22>
 800a332:	3130      	adds	r1, #48	; 0x30
 800a334:	f1ae 0502 	sub.w	r5, lr, #2
 800a338:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a33c:	1c44      	adds	r4, r0, #1
 800a33e:	4629      	mov	r1, r5
 800a340:	4561      	cmp	r1, ip
 800a342:	d30a      	bcc.n	800a35a <__exponent+0x66>
 800a344:	f10d 0209 	add.w	r2, sp, #9
 800a348:	eba2 020e 	sub.w	r2, r2, lr
 800a34c:	4565      	cmp	r5, ip
 800a34e:	bf88      	it	hi
 800a350:	2200      	movhi	r2, #0
 800a352:	4413      	add	r3, r2
 800a354:	1a18      	subs	r0, r3, r0
 800a356:	b003      	add	sp, #12
 800a358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a35e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a362:	e7ed      	b.n	800a340 <__exponent+0x4c>
 800a364:	2330      	movs	r3, #48	; 0x30
 800a366:	3130      	adds	r1, #48	; 0x30
 800a368:	7083      	strb	r3, [r0, #2]
 800a36a:	70c1      	strb	r1, [r0, #3]
 800a36c:	1d03      	adds	r3, r0, #4
 800a36e:	e7f1      	b.n	800a354 <__exponent+0x60>

0800a370 <_printf_float>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ed2d 8b02 	vpush	{d8}
 800a378:	b08d      	sub	sp, #52	; 0x34
 800a37a:	460c      	mov	r4, r1
 800a37c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a380:	4616      	mov	r6, r2
 800a382:	461f      	mov	r7, r3
 800a384:	4605      	mov	r5, r0
 800a386:	f001 fafd 	bl	800b984 <_localeconv_r>
 800a38a:	f8d0 a000 	ldr.w	sl, [r0]
 800a38e:	4650      	mov	r0, sl
 800a390:	f7f5 ff30 	bl	80001f4 <strlen>
 800a394:	2300      	movs	r3, #0
 800a396:	930a      	str	r3, [sp, #40]	; 0x28
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3a4:	3307      	adds	r3, #7
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	f103 0208 	add.w	r2, r3, #8
 800a3ae:	f8c8 2000 	str.w	r2, [r8]
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a3be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3c2:	9307      	str	r3, [sp, #28]
 800a3c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3c8:	ee08 0a10 	vmov	s16, r0
 800a3cc:	4b9f      	ldr	r3, [pc, #636]	; (800a64c <_printf_float+0x2dc>)
 800a3ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d6:	f7f6 fbc1 	bl	8000b5c <__aeabi_dcmpun>
 800a3da:	bb88      	cbnz	r0, 800a440 <_printf_float+0xd0>
 800a3dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3e0:	4b9a      	ldr	r3, [pc, #616]	; (800a64c <_printf_float+0x2dc>)
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	f7f6 fb9b 	bl	8000b20 <__aeabi_dcmple>
 800a3ea:	bb48      	cbnz	r0, 800a440 <_printf_float+0xd0>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	f7f6 fb8a 	bl	8000b0c <__aeabi_dcmplt>
 800a3f8:	b110      	cbz	r0, 800a400 <_printf_float+0x90>
 800a3fa:	232d      	movs	r3, #45	; 0x2d
 800a3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a400:	4b93      	ldr	r3, [pc, #588]	; (800a650 <_printf_float+0x2e0>)
 800a402:	4894      	ldr	r0, [pc, #592]	; (800a654 <_printf_float+0x2e4>)
 800a404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a408:	bf94      	ite	ls
 800a40a:	4698      	movls	r8, r3
 800a40c:	4680      	movhi	r8, r0
 800a40e:	2303      	movs	r3, #3
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	f023 0204 	bic.w	r2, r3, #4
 800a418:	6022      	str	r2, [r4, #0]
 800a41a:	f04f 0900 	mov.w	r9, #0
 800a41e:	9700      	str	r7, [sp, #0]
 800a420:	4633      	mov	r3, r6
 800a422:	aa0b      	add	r2, sp, #44	; 0x2c
 800a424:	4621      	mov	r1, r4
 800a426:	4628      	mov	r0, r5
 800a428:	f000 f9d8 	bl	800a7dc <_printf_common>
 800a42c:	3001      	adds	r0, #1
 800a42e:	f040 8090 	bne.w	800a552 <_printf_float+0x1e2>
 800a432:	f04f 30ff 	mov.w	r0, #4294967295
 800a436:	b00d      	add	sp, #52	; 0x34
 800a438:	ecbd 8b02 	vpop	{d8}
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f6 fb88 	bl	8000b5c <__aeabi_dcmpun>
 800a44c:	b140      	cbz	r0, 800a460 <_printf_float+0xf0>
 800a44e:	464b      	mov	r3, r9
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfbc      	itt	lt
 800a454:	232d      	movlt	r3, #45	; 0x2d
 800a456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a45a:	487f      	ldr	r0, [pc, #508]	; (800a658 <_printf_float+0x2e8>)
 800a45c:	4b7f      	ldr	r3, [pc, #508]	; (800a65c <_printf_float+0x2ec>)
 800a45e:	e7d1      	b.n	800a404 <_printf_float+0x94>
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a466:	9206      	str	r2, [sp, #24]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	d13f      	bne.n	800a4ec <_printf_float+0x17c>
 800a46c:	2306      	movs	r3, #6
 800a46e:	6063      	str	r3, [r4, #4]
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	6861      	ldr	r1, [r4, #4]
 800a474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a478:	2300      	movs	r3, #0
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	ab0a      	add	r3, sp, #40	; 0x28
 800a47e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a482:	ab09      	add	r3, sp, #36	; 0x24
 800a484:	ec49 8b10 	vmov	d0, r8, r9
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	6022      	str	r2, [r4, #0]
 800a48c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fecd 	bl	800a230 <__cvt>
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a49a:	2b47      	cmp	r3, #71	; 0x47
 800a49c:	4680      	mov	r8, r0
 800a49e:	d108      	bne.n	800a4b2 <_printf_float+0x142>
 800a4a0:	1cc8      	adds	r0, r1, #3
 800a4a2:	db02      	blt.n	800a4aa <_printf_float+0x13a>
 800a4a4:	6863      	ldr	r3, [r4, #4]
 800a4a6:	4299      	cmp	r1, r3
 800a4a8:	dd41      	ble.n	800a52e <_printf_float+0x1be>
 800a4aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800a4ae:	fa5f fb8b 	uxtb.w	fp, fp
 800a4b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4b6:	d820      	bhi.n	800a4fa <_printf_float+0x18a>
 800a4b8:	3901      	subs	r1, #1
 800a4ba:	465a      	mov	r2, fp
 800a4bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a4c2:	f7ff ff17 	bl	800a2f4 <__exponent>
 800a4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4c8:	1813      	adds	r3, r2, r0
 800a4ca:	2a01      	cmp	r2, #1
 800a4cc:	4681      	mov	r9, r0
 800a4ce:	6123      	str	r3, [r4, #16]
 800a4d0:	dc02      	bgt.n	800a4d8 <_printf_float+0x168>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	07d2      	lsls	r2, r2, #31
 800a4d6:	d501      	bpl.n	800a4dc <_printf_float+0x16c>
 800a4d8:	3301      	adds	r3, #1
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d09c      	beq.n	800a41e <_printf_float+0xae>
 800a4e4:	232d      	movs	r3, #45	; 0x2d
 800a4e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ea:	e798      	b.n	800a41e <_printf_float+0xae>
 800a4ec:	9a06      	ldr	r2, [sp, #24]
 800a4ee:	2a47      	cmp	r2, #71	; 0x47
 800a4f0:	d1be      	bne.n	800a470 <_printf_float+0x100>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1bc      	bne.n	800a470 <_printf_float+0x100>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7b9      	b.n	800a46e <_printf_float+0xfe>
 800a4fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4fe:	d118      	bne.n	800a532 <_printf_float+0x1c2>
 800a500:	2900      	cmp	r1, #0
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	dd0b      	ble.n	800a51e <_printf_float+0x1ae>
 800a506:	6121      	str	r1, [r4, #16]
 800a508:	b913      	cbnz	r3, 800a510 <_printf_float+0x1a0>
 800a50a:	6822      	ldr	r2, [r4, #0]
 800a50c:	07d0      	lsls	r0, r2, #31
 800a50e:	d502      	bpl.n	800a516 <_printf_float+0x1a6>
 800a510:	3301      	adds	r3, #1
 800a512:	440b      	add	r3, r1
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	65a1      	str	r1, [r4, #88]	; 0x58
 800a518:	f04f 0900 	mov.w	r9, #0
 800a51c:	e7de      	b.n	800a4dc <_printf_float+0x16c>
 800a51e:	b913      	cbnz	r3, 800a526 <_printf_float+0x1b6>
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	07d2      	lsls	r2, r2, #31
 800a524:	d501      	bpl.n	800a52a <_printf_float+0x1ba>
 800a526:	3302      	adds	r3, #2
 800a528:	e7f4      	b.n	800a514 <_printf_float+0x1a4>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7f2      	b.n	800a514 <_printf_float+0x1a4>
 800a52e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a534:	4299      	cmp	r1, r3
 800a536:	db05      	blt.n	800a544 <_printf_float+0x1d4>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	6121      	str	r1, [r4, #16]
 800a53c:	07d8      	lsls	r0, r3, #31
 800a53e:	d5ea      	bpl.n	800a516 <_printf_float+0x1a6>
 800a540:	1c4b      	adds	r3, r1, #1
 800a542:	e7e7      	b.n	800a514 <_printf_float+0x1a4>
 800a544:	2900      	cmp	r1, #0
 800a546:	bfd4      	ite	le
 800a548:	f1c1 0202 	rsble	r2, r1, #2
 800a54c:	2201      	movgt	r2, #1
 800a54e:	4413      	add	r3, r2
 800a550:	e7e0      	b.n	800a514 <_printf_float+0x1a4>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	055a      	lsls	r2, r3, #21
 800a556:	d407      	bmi.n	800a568 <_printf_float+0x1f8>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	4642      	mov	r2, r8
 800a55c:	4631      	mov	r1, r6
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	d12c      	bne.n	800a5c0 <_printf_float+0x250>
 800a566:	e764      	b.n	800a432 <_printf_float+0xc2>
 800a568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a56c:	f240 80e0 	bls.w	800a730 <_printf_float+0x3c0>
 800a570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	f7f6 fabe 	bl	8000af8 <__aeabi_dcmpeq>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d034      	beq.n	800a5ea <_printf_float+0x27a>
 800a580:	4a37      	ldr	r2, [pc, #220]	; (800a660 <_printf_float+0x2f0>)
 800a582:	2301      	movs	r3, #1
 800a584:	4631      	mov	r1, r6
 800a586:	4628      	mov	r0, r5
 800a588:	47b8      	blx	r7
 800a58a:	3001      	adds	r0, #1
 800a58c:	f43f af51 	beq.w	800a432 <_printf_float+0xc2>
 800a590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a594:	429a      	cmp	r2, r3
 800a596:	db02      	blt.n	800a59e <_printf_float+0x22e>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	07d8      	lsls	r0, r3, #31
 800a59c:	d510      	bpl.n	800a5c0 <_printf_float+0x250>
 800a59e:	ee18 3a10 	vmov	r3, s16
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	f43f af41 	beq.w	800a432 <_printf_float+0xc2>
 800a5b0:	f04f 0800 	mov.w	r8, #0
 800a5b4:	f104 091a 	add.w	r9, r4, #26
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4543      	cmp	r3, r8
 800a5be:	dc09      	bgt.n	800a5d4 <_printf_float+0x264>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	079b      	lsls	r3, r3, #30
 800a5c4:	f100 8105 	bmi.w	800a7d2 <_printf_float+0x462>
 800a5c8:	68e0      	ldr	r0, [r4, #12]
 800a5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5cc:	4298      	cmp	r0, r3
 800a5ce:	bfb8      	it	lt
 800a5d0:	4618      	movlt	r0, r3
 800a5d2:	e730      	b.n	800a436 <_printf_float+0xc6>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	464a      	mov	r2, r9
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f af27 	beq.w	800a432 <_printf_float+0xc2>
 800a5e4:	f108 0801 	add.w	r8, r8, #1
 800a5e8:	e7e6      	b.n	800a5b8 <_printf_float+0x248>
 800a5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dc39      	bgt.n	800a664 <_printf_float+0x2f4>
 800a5f0:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <_printf_float+0x2f0>)
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	47b8      	blx	r7
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	f43f af19 	beq.w	800a432 <_printf_float+0xc2>
 800a600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a604:	4313      	orrs	r3, r2
 800a606:	d102      	bne.n	800a60e <_printf_float+0x29e>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	07d9      	lsls	r1, r3, #31
 800a60c:	d5d8      	bpl.n	800a5c0 <_printf_float+0x250>
 800a60e:	ee18 3a10 	vmov	r3, s16
 800a612:	4652      	mov	r2, sl
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f af09 	beq.w	800a432 <_printf_float+0xc2>
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	f104 0a1a 	add.w	sl, r4, #26
 800a628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62a:	425b      	negs	r3, r3
 800a62c:	454b      	cmp	r3, r9
 800a62e:	dc01      	bgt.n	800a634 <_printf_float+0x2c4>
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	e792      	b.n	800a55a <_printf_float+0x1ea>
 800a634:	2301      	movs	r3, #1
 800a636:	4652      	mov	r2, sl
 800a638:	4631      	mov	r1, r6
 800a63a:	4628      	mov	r0, r5
 800a63c:	47b8      	blx	r7
 800a63e:	3001      	adds	r0, #1
 800a640:	f43f aef7 	beq.w	800a432 <_printf_float+0xc2>
 800a644:	f109 0901 	add.w	r9, r9, #1
 800a648:	e7ee      	b.n	800a628 <_printf_float+0x2b8>
 800a64a:	bf00      	nop
 800a64c:	7fefffff 	.word	0x7fefffff
 800a650:	08010680 	.word	0x08010680
 800a654:	08010684 	.word	0x08010684
 800a658:	0801068c 	.word	0x0801068c
 800a65c:	08010688 	.word	0x08010688
 800a660:	080108b1 	.word	0x080108b1
 800a664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a668:	429a      	cmp	r2, r3
 800a66a:	bfa8      	it	ge
 800a66c:	461a      	movge	r2, r3
 800a66e:	2a00      	cmp	r2, #0
 800a670:	4691      	mov	r9, r2
 800a672:	dc37      	bgt.n	800a6e4 <_printf_float+0x374>
 800a674:	f04f 0b00 	mov.w	fp, #0
 800a678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a67c:	f104 021a 	add.w	r2, r4, #26
 800a680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a682:	9305      	str	r3, [sp, #20]
 800a684:	eba3 0309 	sub.w	r3, r3, r9
 800a688:	455b      	cmp	r3, fp
 800a68a:	dc33      	bgt.n	800a6f4 <_printf_float+0x384>
 800a68c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a690:	429a      	cmp	r2, r3
 800a692:	db3b      	blt.n	800a70c <_printf_float+0x39c>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	07da      	lsls	r2, r3, #31
 800a698:	d438      	bmi.n	800a70c <_printf_float+0x39c>
 800a69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69c:	9a05      	ldr	r2, [sp, #20]
 800a69e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6a0:	1a9a      	subs	r2, r3, r2
 800a6a2:	eba3 0901 	sub.w	r9, r3, r1
 800a6a6:	4591      	cmp	r9, r2
 800a6a8:	bfa8      	it	ge
 800a6aa:	4691      	movge	r9, r2
 800a6ac:	f1b9 0f00 	cmp.w	r9, #0
 800a6b0:	dc35      	bgt.n	800a71e <_printf_float+0x3ae>
 800a6b2:	f04f 0800 	mov.w	r8, #0
 800a6b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6ba:	f104 0a1a 	add.w	sl, r4, #26
 800a6be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	eba3 0309 	sub.w	r3, r3, r9
 800a6c8:	4543      	cmp	r3, r8
 800a6ca:	f77f af79 	ble.w	800a5c0 <_printf_float+0x250>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	47b8      	blx	r7
 800a6d8:	3001      	adds	r0, #1
 800a6da:	f43f aeaa 	beq.w	800a432 <_printf_float+0xc2>
 800a6de:	f108 0801 	add.w	r8, r8, #1
 800a6e2:	e7ec      	b.n	800a6be <_printf_float+0x34e>
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d1c0      	bne.n	800a674 <_printf_float+0x304>
 800a6f2:	e69e      	b.n	800a432 <_printf_float+0xc2>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	4631      	mov	r1, r6
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	9205      	str	r2, [sp, #20]
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f ae97 	beq.w	800a432 <_printf_float+0xc2>
 800a704:	9a05      	ldr	r2, [sp, #20]
 800a706:	f10b 0b01 	add.w	fp, fp, #1
 800a70a:	e7b9      	b.n	800a680 <_printf_float+0x310>
 800a70c:	ee18 3a10 	vmov	r3, s16
 800a710:	4652      	mov	r2, sl
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	d1be      	bne.n	800a69a <_printf_float+0x32a>
 800a71c:	e689      	b.n	800a432 <_printf_float+0xc2>
 800a71e:	9a05      	ldr	r2, [sp, #20]
 800a720:	464b      	mov	r3, r9
 800a722:	4442      	add	r2, r8
 800a724:	4631      	mov	r1, r6
 800a726:	4628      	mov	r0, r5
 800a728:	47b8      	blx	r7
 800a72a:	3001      	adds	r0, #1
 800a72c:	d1c1      	bne.n	800a6b2 <_printf_float+0x342>
 800a72e:	e680      	b.n	800a432 <_printf_float+0xc2>
 800a730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a732:	2a01      	cmp	r2, #1
 800a734:	dc01      	bgt.n	800a73a <_printf_float+0x3ca>
 800a736:	07db      	lsls	r3, r3, #31
 800a738:	d538      	bpl.n	800a7ac <_printf_float+0x43c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4642      	mov	r2, r8
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	f43f ae74 	beq.w	800a432 <_printf_float+0xc2>
 800a74a:	ee18 3a10 	vmov	r3, s16
 800a74e:	4652      	mov	r2, sl
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	47b8      	blx	r7
 800a756:	3001      	adds	r0, #1
 800a758:	f43f ae6b 	beq.w	800a432 <_printf_float+0xc2>
 800a75c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a760:	2200      	movs	r2, #0
 800a762:	2300      	movs	r3, #0
 800a764:	f7f6 f9c8 	bl	8000af8 <__aeabi_dcmpeq>
 800a768:	b9d8      	cbnz	r0, 800a7a2 <_printf_float+0x432>
 800a76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76c:	f108 0201 	add.w	r2, r8, #1
 800a770:	3b01      	subs	r3, #1
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	d10e      	bne.n	800a79a <_printf_float+0x42a>
 800a77c:	e659      	b.n	800a432 <_printf_float+0xc2>
 800a77e:	2301      	movs	r3, #1
 800a780:	4652      	mov	r2, sl
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae52 	beq.w	800a432 <_printf_float+0xc2>
 800a78e:	f108 0801 	add.w	r8, r8, #1
 800a792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a794:	3b01      	subs	r3, #1
 800a796:	4543      	cmp	r3, r8
 800a798:	dcf1      	bgt.n	800a77e <_printf_float+0x40e>
 800a79a:	464b      	mov	r3, r9
 800a79c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7a0:	e6dc      	b.n	800a55c <_printf_float+0x1ec>
 800a7a2:	f04f 0800 	mov.w	r8, #0
 800a7a6:	f104 0a1a 	add.w	sl, r4, #26
 800a7aa:	e7f2      	b.n	800a792 <_printf_float+0x422>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	e7df      	b.n	800a772 <_printf_float+0x402>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	464a      	mov	r2, r9
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f ae38 	beq.w	800a432 <_printf_float+0xc2>
 800a7c2:	f108 0801 	add.w	r8, r8, #1
 800a7c6:	68e3      	ldr	r3, [r4, #12]
 800a7c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7ca:	1a5b      	subs	r3, r3, r1
 800a7cc:	4543      	cmp	r3, r8
 800a7ce:	dcf0      	bgt.n	800a7b2 <_printf_float+0x442>
 800a7d0:	e6fa      	b.n	800a5c8 <_printf_float+0x258>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	f104 0919 	add.w	r9, r4, #25
 800a7da:	e7f4      	b.n	800a7c6 <_printf_float+0x456>

0800a7dc <_printf_common>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	688a      	ldr	r2, [r1, #8]
 800a7e6:	690b      	ldr	r3, [r1, #16]
 800a7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	bfb8      	it	lt
 800a7f0:	4613      	movlt	r3, r2
 800a7f2:	6033      	str	r3, [r6, #0]
 800a7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b10a      	cbz	r2, 800a802 <_printf_common+0x26>
 800a7fe:	3301      	adds	r3, #1
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	0699      	lsls	r1, r3, #26
 800a806:	bf42      	ittt	mi
 800a808:	6833      	ldrmi	r3, [r6, #0]
 800a80a:	3302      	addmi	r3, #2
 800a80c:	6033      	strmi	r3, [r6, #0]
 800a80e:	6825      	ldr	r5, [r4, #0]
 800a810:	f015 0506 	ands.w	r5, r5, #6
 800a814:	d106      	bne.n	800a824 <_printf_common+0x48>
 800a816:	f104 0a19 	add.w	sl, r4, #25
 800a81a:	68e3      	ldr	r3, [r4, #12]
 800a81c:	6832      	ldr	r2, [r6, #0]
 800a81e:	1a9b      	subs	r3, r3, r2
 800a820:	42ab      	cmp	r3, r5
 800a822:	dc26      	bgt.n	800a872 <_printf_common+0x96>
 800a824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a828:	1e13      	subs	r3, r2, #0
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	bf18      	it	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	0692      	lsls	r2, r2, #26
 800a832:	d42b      	bmi.n	800a88c <_printf_common+0xb0>
 800a834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a838:	4649      	mov	r1, r9
 800a83a:	4638      	mov	r0, r7
 800a83c:	47c0      	blx	r8
 800a83e:	3001      	adds	r0, #1
 800a840:	d01e      	beq.n	800a880 <_printf_common+0xa4>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	68e5      	ldr	r5, [r4, #12]
 800a846:	6832      	ldr	r2, [r6, #0]
 800a848:	f003 0306 	and.w	r3, r3, #6
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	bf08      	it	eq
 800a850:	1aad      	subeq	r5, r5, r2
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	6922      	ldr	r2, [r4, #16]
 800a856:	bf0c      	ite	eq
 800a858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a85c:	2500      	movne	r5, #0
 800a85e:	4293      	cmp	r3, r2
 800a860:	bfc4      	itt	gt
 800a862:	1a9b      	subgt	r3, r3, r2
 800a864:	18ed      	addgt	r5, r5, r3
 800a866:	2600      	movs	r6, #0
 800a868:	341a      	adds	r4, #26
 800a86a:	42b5      	cmp	r5, r6
 800a86c:	d11a      	bne.n	800a8a4 <_printf_common+0xc8>
 800a86e:	2000      	movs	r0, #0
 800a870:	e008      	b.n	800a884 <_printf_common+0xa8>
 800a872:	2301      	movs	r3, #1
 800a874:	4652      	mov	r2, sl
 800a876:	4649      	mov	r1, r9
 800a878:	4638      	mov	r0, r7
 800a87a:	47c0      	blx	r8
 800a87c:	3001      	adds	r0, #1
 800a87e:	d103      	bne.n	800a888 <_printf_common+0xac>
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	3501      	adds	r5, #1
 800a88a:	e7c6      	b.n	800a81a <_printf_common+0x3e>
 800a88c:	18e1      	adds	r1, r4, r3
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	2030      	movs	r0, #48	; 0x30
 800a892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a896:	4422      	add	r2, r4
 800a898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	e7c7      	b.n	800a834 <_printf_common+0x58>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	47c0      	blx	r8
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d0e6      	beq.n	800a880 <_printf_common+0xa4>
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7d9      	b.n	800a86a <_printf_common+0x8e>
	...

0800a8b8 <_printf_i>:
 800a8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	7e0f      	ldrb	r7, [r1, #24]
 800a8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c0:	2f78      	cmp	r7, #120	; 0x78
 800a8c2:	4691      	mov	r9, r2
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ce:	d807      	bhi.n	800a8e0 <_printf_i+0x28>
 800a8d0:	2f62      	cmp	r7, #98	; 0x62
 800a8d2:	d80a      	bhi.n	800a8ea <_printf_i+0x32>
 800a8d4:	2f00      	cmp	r7, #0
 800a8d6:	f000 80d8 	beq.w	800aa8a <_printf_i+0x1d2>
 800a8da:	2f58      	cmp	r7, #88	; 0x58
 800a8dc:	f000 80a3 	beq.w	800aa26 <_printf_i+0x16e>
 800a8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8e8:	e03a      	b.n	800a960 <_printf_i+0xa8>
 800a8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ee:	2b15      	cmp	r3, #21
 800a8f0:	d8f6      	bhi.n	800a8e0 <_printf_i+0x28>
 800a8f2:	a101      	add	r1, pc, #4	; (adr r1, 800a8f8 <_printf_i+0x40>)
 800a8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f8:	0800a951 	.word	0x0800a951
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a8e1 	.word	0x0800a8e1
 800a904:	0800a8e1 	.word	0x0800a8e1
 800a908:	0800a8e1 	.word	0x0800a8e1
 800a90c:	0800a8e1 	.word	0x0800a8e1
 800a910:	0800a965 	.word	0x0800a965
 800a914:	0800a8e1 	.word	0x0800a8e1
 800a918:	0800a8e1 	.word	0x0800a8e1
 800a91c:	0800a8e1 	.word	0x0800a8e1
 800a920:	0800a8e1 	.word	0x0800a8e1
 800a924:	0800aa71 	.word	0x0800aa71
 800a928:	0800a995 	.word	0x0800a995
 800a92c:	0800aa53 	.word	0x0800aa53
 800a930:	0800a8e1 	.word	0x0800a8e1
 800a934:	0800a8e1 	.word	0x0800a8e1
 800a938:	0800aa93 	.word	0x0800aa93
 800a93c:	0800a8e1 	.word	0x0800a8e1
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a8e1 	.word	0x0800a8e1
 800a948:	0800a8e1 	.word	0x0800a8e1
 800a94c:	0800aa5b 	.word	0x0800aa5b
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	602a      	str	r2, [r5, #0]
 800a958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a960:	2301      	movs	r3, #1
 800a962:	e0a3      	b.n	800aaac <_printf_i+0x1f4>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	6829      	ldr	r1, [r5, #0]
 800a968:	0606      	lsls	r6, r0, #24
 800a96a:	f101 0304 	add.w	r3, r1, #4
 800a96e:	d50a      	bpl.n	800a986 <_printf_i+0xce>
 800a970:	680e      	ldr	r6, [r1, #0]
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	2e00      	cmp	r6, #0
 800a976:	da03      	bge.n	800a980 <_printf_i+0xc8>
 800a978:	232d      	movs	r3, #45	; 0x2d
 800a97a:	4276      	negs	r6, r6
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a980:	485e      	ldr	r0, [pc, #376]	; (800aafc <_printf_i+0x244>)
 800a982:	230a      	movs	r3, #10
 800a984:	e019      	b.n	800a9ba <_printf_i+0x102>
 800a986:	680e      	ldr	r6, [r1, #0]
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a98e:	bf18      	it	ne
 800a990:	b236      	sxthne	r6, r6
 800a992:	e7ef      	b.n	800a974 <_printf_i+0xbc>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	6820      	ldr	r0, [r4, #0]
 800a998:	1d19      	adds	r1, r3, #4
 800a99a:	6029      	str	r1, [r5, #0]
 800a99c:	0601      	lsls	r1, r0, #24
 800a99e:	d501      	bpl.n	800a9a4 <_printf_i+0xec>
 800a9a0:	681e      	ldr	r6, [r3, #0]
 800a9a2:	e002      	b.n	800a9aa <_printf_i+0xf2>
 800a9a4:	0646      	lsls	r6, r0, #25
 800a9a6:	d5fb      	bpl.n	800a9a0 <_printf_i+0xe8>
 800a9a8:	881e      	ldrh	r6, [r3, #0]
 800a9aa:	4854      	ldr	r0, [pc, #336]	; (800aafc <_printf_i+0x244>)
 800a9ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2308      	moveq	r3, #8
 800a9b2:	230a      	movne	r3, #10
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ba:	6865      	ldr	r5, [r4, #4]
 800a9bc:	60a5      	str	r5, [r4, #8]
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	bfa2      	ittt	ge
 800a9c2:	6821      	ldrge	r1, [r4, #0]
 800a9c4:	f021 0104 	bicge.w	r1, r1, #4
 800a9c8:	6021      	strge	r1, [r4, #0]
 800a9ca:	b90e      	cbnz	r6, 800a9d0 <_printf_i+0x118>
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	d04d      	beq.n	800aa6c <_printf_i+0x1b4>
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a9da:	5dc7      	ldrb	r7, [r0, r7]
 800a9dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9e0:	4637      	mov	r7, r6
 800a9e2:	42bb      	cmp	r3, r7
 800a9e4:	460e      	mov	r6, r1
 800a9e6:	d9f4      	bls.n	800a9d2 <_printf_i+0x11a>
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10b      	bne.n	800aa04 <_printf_i+0x14c>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07de      	lsls	r6, r3, #31
 800a9f0:	d508      	bpl.n	800aa04 <_printf_i+0x14c>
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	6861      	ldr	r1, [r4, #4]
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	bfde      	ittt	le
 800a9fa:	2330      	movle	r3, #48	; 0x30
 800a9fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa04:	1b52      	subs	r2, r2, r5
 800aa06:	6122      	str	r2, [r4, #16]
 800aa08:	f8cd a000 	str.w	sl, [sp]
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	aa03      	add	r2, sp, #12
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7ff fee2 	bl	800a7dc <_printf_common>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d14c      	bne.n	800aab6 <_printf_i+0x1fe>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b004      	add	sp, #16
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	4835      	ldr	r0, [pc, #212]	; (800aafc <_printf_i+0x244>)
 800aa28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa34:	6029      	str	r1, [r5, #0]
 800aa36:	061d      	lsls	r5, r3, #24
 800aa38:	d514      	bpl.n	800aa64 <_printf_i+0x1ac>
 800aa3a:	07df      	lsls	r7, r3, #31
 800aa3c:	bf44      	itt	mi
 800aa3e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa42:	6023      	strmi	r3, [r4, #0]
 800aa44:	b91e      	cbnz	r6, 800aa4e <_printf_i+0x196>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f023 0320 	bic.w	r3, r3, #32
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	2310      	movs	r3, #16
 800aa50:	e7b0      	b.n	800a9b4 <_printf_i+0xfc>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	f043 0320 	orr.w	r3, r3, #32
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	2378      	movs	r3, #120	; 0x78
 800aa5c:	4828      	ldr	r0, [pc, #160]	; (800ab00 <_printf_i+0x248>)
 800aa5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa62:	e7e3      	b.n	800aa2c <_printf_i+0x174>
 800aa64:	0659      	lsls	r1, r3, #25
 800aa66:	bf48      	it	mi
 800aa68:	b2b6      	uxthmi	r6, r6
 800aa6a:	e7e6      	b.n	800aa3a <_printf_i+0x182>
 800aa6c:	4615      	mov	r5, r2
 800aa6e:	e7bb      	b.n	800a9e8 <_printf_i+0x130>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	6826      	ldr	r6, [r4, #0]
 800aa74:	6961      	ldr	r1, [r4, #20]
 800aa76:	1d18      	adds	r0, r3, #4
 800aa78:	6028      	str	r0, [r5, #0]
 800aa7a:	0635      	lsls	r5, r6, #24
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	d501      	bpl.n	800aa84 <_printf_i+0x1cc>
 800aa80:	6019      	str	r1, [r3, #0]
 800aa82:	e002      	b.n	800aa8a <_printf_i+0x1d2>
 800aa84:	0670      	lsls	r0, r6, #25
 800aa86:	d5fb      	bpl.n	800aa80 <_printf_i+0x1c8>
 800aa88:	8019      	strh	r1, [r3, #0]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6123      	str	r3, [r4, #16]
 800aa8e:	4615      	mov	r5, r2
 800aa90:	e7ba      	b.n	800aa08 <_printf_i+0x150>
 800aa92:	682b      	ldr	r3, [r5, #0]
 800aa94:	1d1a      	adds	r2, r3, #4
 800aa96:	602a      	str	r2, [r5, #0]
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	6862      	ldr	r2, [r4, #4]
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7f5 fbb6 	bl	8000210 <memchr>
 800aaa4:	b108      	cbz	r0, 800aaaa <_printf_i+0x1f2>
 800aaa6:	1b40      	subs	r0, r0, r5
 800aaa8:	6060      	str	r0, [r4, #4]
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	2300      	movs	r3, #0
 800aab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab4:	e7a8      	b.n	800aa08 <_printf_i+0x150>
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4649      	mov	r1, r9
 800aabc:	4640      	mov	r0, r8
 800aabe:	47d0      	blx	sl
 800aac0:	3001      	adds	r0, #1
 800aac2:	d0ab      	beq.n	800aa1c <_printf_i+0x164>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	079b      	lsls	r3, r3, #30
 800aac8:	d413      	bmi.n	800aaf2 <_printf_i+0x23a>
 800aaca:	68e0      	ldr	r0, [r4, #12]
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	4298      	cmp	r0, r3
 800aad0:	bfb8      	it	lt
 800aad2:	4618      	movlt	r0, r3
 800aad4:	e7a4      	b.n	800aa20 <_printf_i+0x168>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4632      	mov	r2, r6
 800aada:	4649      	mov	r1, r9
 800aadc:	4640      	mov	r0, r8
 800aade:	47d0      	blx	sl
 800aae0:	3001      	adds	r0, #1
 800aae2:	d09b      	beq.n	800aa1c <_printf_i+0x164>
 800aae4:	3501      	adds	r5, #1
 800aae6:	68e3      	ldr	r3, [r4, #12]
 800aae8:	9903      	ldr	r1, [sp, #12]
 800aaea:	1a5b      	subs	r3, r3, r1
 800aaec:	42ab      	cmp	r3, r5
 800aaee:	dcf2      	bgt.n	800aad6 <_printf_i+0x21e>
 800aaf0:	e7eb      	b.n	800aaca <_printf_i+0x212>
 800aaf2:	2500      	movs	r5, #0
 800aaf4:	f104 0619 	add.w	r6, r4, #25
 800aaf8:	e7f5      	b.n	800aae6 <_printf_i+0x22e>
 800aafa:	bf00      	nop
 800aafc:	08010690 	.word	0x08010690
 800ab00:	080106a1 	.word	0x080106a1

0800ab04 <_sbrk_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d06      	ldr	r5, [pc, #24]	; (800ab20 <_sbrk_r+0x1c>)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	602b      	str	r3, [r5, #0]
 800ab10:	f005 faf4 	bl	80100fc <_sbrk>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_sbrk_r+0x1a>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_sbrk_r+0x1a>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	20012274 	.word	0x20012274

0800ab24 <siprintf>:
 800ab24:	b40e      	push	{r1, r2, r3}
 800ab26:	b500      	push	{lr}
 800ab28:	b09c      	sub	sp, #112	; 0x70
 800ab2a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab2c:	9002      	str	r0, [sp, #8]
 800ab2e:	9006      	str	r0, [sp, #24]
 800ab30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab34:	4809      	ldr	r0, [pc, #36]	; (800ab5c <siprintf+0x38>)
 800ab36:	9107      	str	r1, [sp, #28]
 800ab38:	9104      	str	r1, [sp, #16]
 800ab3a:	4909      	ldr	r1, [pc, #36]	; (800ab60 <siprintf+0x3c>)
 800ab3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab40:	9105      	str	r1, [sp, #20]
 800ab42:	6800      	ldr	r0, [r0, #0]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	a902      	add	r1, sp, #8
 800ab48:	f001 fb42 	bl	800c1d0 <_svfiprintf_r>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	b01c      	add	sp, #112	; 0x70
 800ab54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab58:	b003      	add	sp, #12
 800ab5a:	4770      	bx	lr
 800ab5c:	20000014 	.word	0x20000014
 800ab60:	ffff0208 	.word	0xffff0208

0800ab64 <siscanf>:
 800ab64:	b40e      	push	{r1, r2, r3}
 800ab66:	b510      	push	{r4, lr}
 800ab68:	b09f      	sub	sp, #124	; 0x7c
 800ab6a:	ac21      	add	r4, sp, #132	; 0x84
 800ab6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ab70:	f854 2b04 	ldr.w	r2, [r4], #4
 800ab74:	9201      	str	r2, [sp, #4]
 800ab76:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ab7a:	9004      	str	r0, [sp, #16]
 800ab7c:	9008      	str	r0, [sp, #32]
 800ab7e:	f7f5 fb39 	bl	80001f4 <strlen>
 800ab82:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <siscanf+0x50>)
 800ab84:	9005      	str	r0, [sp, #20]
 800ab86:	9009      	str	r0, [sp, #36]	; 0x24
 800ab88:	930d      	str	r3, [sp, #52]	; 0x34
 800ab8a:	480b      	ldr	r0, [pc, #44]	; (800abb8 <siscanf+0x54>)
 800ab8c:	9a01      	ldr	r2, [sp, #4]
 800ab8e:	6800      	ldr	r0, [r0, #0]
 800ab90:	9403      	str	r4, [sp, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	9311      	str	r3, [sp, #68]	; 0x44
 800ab96:	9316      	str	r3, [sp, #88]	; 0x58
 800ab98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aba0:	a904      	add	r1, sp, #16
 800aba2:	4623      	mov	r3, r4
 800aba4:	f001 fc6e 	bl	800c484 <__ssvfiscanf_r>
 800aba8:	b01f      	add	sp, #124	; 0x7c
 800abaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abae:	b003      	add	sp, #12
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	0800abdf 	.word	0x0800abdf
 800abb8:	20000014 	.word	0x20000014

0800abbc <__sread>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	460c      	mov	r4, r1
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	f001 ff28 	bl	800ca18 <_read_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	bfab      	itete	ge
 800abcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abce:	89a3      	ldrhlt	r3, [r4, #12]
 800abd0:	181b      	addge	r3, r3, r0
 800abd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abd6:	bfac      	ite	ge
 800abd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800abda:	81a3      	strhlt	r3, [r4, #12]
 800abdc:	bd10      	pop	{r4, pc}

0800abde <__seofread>:
 800abde:	2000      	movs	r0, #0
 800abe0:	4770      	bx	lr

0800abe2 <__swrite>:
 800abe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe6:	461f      	mov	r7, r3
 800abe8:	898b      	ldrh	r3, [r1, #12]
 800abea:	05db      	lsls	r3, r3, #23
 800abec:	4605      	mov	r5, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	4616      	mov	r6, r2
 800abf2:	d505      	bpl.n	800ac00 <__swrite+0x1e>
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	2302      	movs	r3, #2
 800abfa:	2200      	movs	r2, #0
 800abfc:	f000 fec6 	bl	800b98c <_lseek_r>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	4632      	mov	r2, r6
 800ac0e:	463b      	mov	r3, r7
 800ac10:	4628      	mov	r0, r5
 800ac12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac16:	f000 b817 	b.w	800ac48 <_write_r>

0800ac1a <__sseek>:
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac22:	f000 feb3 	bl	800b98c <_lseek_r>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	bf15      	itete	ne
 800ac2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac36:	81a3      	strheq	r3, [r4, #12]
 800ac38:	bf18      	it	ne
 800ac3a:	81a3      	strhne	r3, [r4, #12]
 800ac3c:	bd10      	pop	{r4, pc}

0800ac3e <__sclose>:
 800ac3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac42:	f000 b813 	b.w	800ac6c <_close_r>
	...

0800ac48 <_write_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_write_r+0x20>)
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	2200      	movs	r2, #0
 800ac54:	602a      	str	r2, [r5, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	f7f8 fcdf 	bl	800361a <_write>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_write_r+0x1e>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_write_r+0x1e>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20012274 	.word	0x20012274

0800ac6c <_close_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	; (800ac88 <_close_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f8 fceb 	bl	8003652 <_close>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_close_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_close_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20012274 	.word	0x20012274

0800ac8c <quorem>:
 800ac8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	6903      	ldr	r3, [r0, #16]
 800ac92:	690c      	ldr	r4, [r1, #16]
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	4607      	mov	r7, r0
 800ac98:	f2c0 8081 	blt.w	800ad9e <quorem+0x112>
 800ac9c:	3c01      	subs	r4, #1
 800ac9e:	f101 0814 	add.w	r8, r1, #20
 800aca2:	f100 0514 	add.w	r5, r0, #20
 800aca6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acb4:	3301      	adds	r3, #1
 800acb6:	429a      	cmp	r2, r3
 800acb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800acbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800acc4:	d331      	bcc.n	800ad2a <quorem+0x9e>
 800acc6:	f04f 0e00 	mov.w	lr, #0
 800acca:	4640      	mov	r0, r8
 800accc:	46ac      	mov	ip, r5
 800acce:	46f2      	mov	sl, lr
 800acd0:	f850 2b04 	ldr.w	r2, [r0], #4
 800acd4:	b293      	uxth	r3, r2
 800acd6:	fb06 e303 	mla	r3, r6, r3, lr
 800acda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ebaa 0303 	sub.w	r3, sl, r3
 800ace4:	f8dc a000 	ldr.w	sl, [ip]
 800ace8:	0c12      	lsrs	r2, r2, #16
 800acea:	fa13 f38a 	uxtah	r3, r3, sl
 800acee:	fb06 e202 	mla	r2, r6, r2, lr
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acfa:	b292      	uxth	r2, r2
 800acfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad04:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad08:	4581      	cmp	r9, r0
 800ad0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad0e:	f84c 3b04 	str.w	r3, [ip], #4
 800ad12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad16:	d2db      	bcs.n	800acd0 <quorem+0x44>
 800ad18:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad1c:	b92b      	cbnz	r3, 800ad2a <quorem+0x9e>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	3b04      	subs	r3, #4
 800ad22:	429d      	cmp	r5, r3
 800ad24:	461a      	mov	r2, r3
 800ad26:	d32e      	bcc.n	800ad86 <quorem+0xfa>
 800ad28:	613c      	str	r4, [r7, #16]
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f001 f8dc 	bl	800bee8 <__mcmp>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	db24      	blt.n	800ad7e <quorem+0xf2>
 800ad34:	3601      	adds	r6, #1
 800ad36:	4628      	mov	r0, r5
 800ad38:	f04f 0c00 	mov.w	ip, #0
 800ad3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad40:	f8d0 e000 	ldr.w	lr, [r0]
 800ad44:	b293      	uxth	r3, r2
 800ad46:	ebac 0303 	sub.w	r3, ip, r3
 800ad4a:	0c12      	lsrs	r2, r2, #16
 800ad4c:	fa13 f38e 	uxtah	r3, r3, lr
 800ad50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad5e:	45c1      	cmp	r9, r8
 800ad60:	f840 3b04 	str.w	r3, [r0], #4
 800ad64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad68:	d2e8      	bcs.n	800ad3c <quorem+0xb0>
 800ad6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad72:	b922      	cbnz	r2, 800ad7e <quorem+0xf2>
 800ad74:	3b04      	subs	r3, #4
 800ad76:	429d      	cmp	r5, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	d30a      	bcc.n	800ad92 <quorem+0x106>
 800ad7c:	613c      	str	r4, [r7, #16]
 800ad7e:	4630      	mov	r0, r6
 800ad80:	b003      	add	sp, #12
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	3b04      	subs	r3, #4
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	d1cc      	bne.n	800ad28 <quorem+0x9c>
 800ad8e:	3c01      	subs	r4, #1
 800ad90:	e7c7      	b.n	800ad22 <quorem+0x96>
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	3b04      	subs	r3, #4
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d1f0      	bne.n	800ad7c <quorem+0xf0>
 800ad9a:	3c01      	subs	r4, #1
 800ad9c:	e7eb      	b.n	800ad76 <quorem+0xea>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	e7ee      	b.n	800ad80 <quorem+0xf4>
 800ada2:	0000      	movs	r0, r0
 800ada4:	0000      	movs	r0, r0
	...

0800ada8 <_dtoa_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	ed2d 8b04 	vpush	{d8-d9}
 800adb0:	ec57 6b10 	vmov	r6, r7, d0
 800adb4:	b093      	sub	sp, #76	; 0x4c
 800adb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800adb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800adbc:	9106      	str	r1, [sp, #24]
 800adbe:	ee10 aa10 	vmov	sl, s0
 800adc2:	4604      	mov	r4, r0
 800adc4:	9209      	str	r2, [sp, #36]	; 0x24
 800adc6:	930c      	str	r3, [sp, #48]	; 0x30
 800adc8:	46bb      	mov	fp, r7
 800adca:	b975      	cbnz	r5, 800adea <_dtoa_r+0x42>
 800adcc:	2010      	movs	r0, #16
 800adce:	f7ff f93f 	bl	800a050 <malloc>
 800add2:	4602      	mov	r2, r0
 800add4:	6260      	str	r0, [r4, #36]	; 0x24
 800add6:	b920      	cbnz	r0, 800ade2 <_dtoa_r+0x3a>
 800add8:	4ba7      	ldr	r3, [pc, #668]	; (800b078 <_dtoa_r+0x2d0>)
 800adda:	21ea      	movs	r1, #234	; 0xea
 800addc:	48a7      	ldr	r0, [pc, #668]	; (800b07c <_dtoa_r+0x2d4>)
 800adde:	f001 ff97 	bl	800cd10 <__assert_func>
 800ade2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ade6:	6005      	str	r5, [r0, #0]
 800ade8:	60c5      	str	r5, [r0, #12]
 800adea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adec:	6819      	ldr	r1, [r3, #0]
 800adee:	b151      	cbz	r1, 800ae06 <_dtoa_r+0x5e>
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	604a      	str	r2, [r1, #4]
 800adf4:	2301      	movs	r3, #1
 800adf6:	4093      	lsls	r3, r2
 800adf8:	608b      	str	r3, [r1, #8]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fe32 	bl	800ba64 <_Bfree>
 800ae00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	1e3b      	subs	r3, r7, #0
 800ae08:	bfaa      	itet	ge
 800ae0a:	2300      	movge	r3, #0
 800ae0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae10:	f8c8 3000 	strge.w	r3, [r8]
 800ae14:	4b9a      	ldr	r3, [pc, #616]	; (800b080 <_dtoa_r+0x2d8>)
 800ae16:	bfbc      	itt	lt
 800ae18:	2201      	movlt	r2, #1
 800ae1a:	f8c8 2000 	strlt.w	r2, [r8]
 800ae1e:	ea33 030b 	bics.w	r3, r3, fp
 800ae22:	d11b      	bne.n	800ae5c <_dtoa_r+0xb4>
 800ae24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae26:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae30:	4333      	orrs	r3, r6
 800ae32:	f000 8592 	beq.w	800b95a <_dtoa_r+0xbb2>
 800ae36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae38:	b963      	cbnz	r3, 800ae54 <_dtoa_r+0xac>
 800ae3a:	4b92      	ldr	r3, [pc, #584]	; (800b084 <_dtoa_r+0x2dc>)
 800ae3c:	e022      	b.n	800ae84 <_dtoa_r+0xdc>
 800ae3e:	4b92      	ldr	r3, [pc, #584]	; (800b088 <_dtoa_r+0x2e0>)
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	3308      	adds	r3, #8
 800ae44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	9801      	ldr	r0, [sp, #4]
 800ae4a:	b013      	add	sp, #76	; 0x4c
 800ae4c:	ecbd 8b04 	vpop	{d8-d9}
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	4b8b      	ldr	r3, [pc, #556]	; (800b084 <_dtoa_r+0x2dc>)
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	3303      	adds	r3, #3
 800ae5a:	e7f3      	b.n	800ae44 <_dtoa_r+0x9c>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4650      	mov	r0, sl
 800ae62:	4659      	mov	r1, fp
 800ae64:	f7f5 fe48 	bl	8000af8 <__aeabi_dcmpeq>
 800ae68:	ec4b ab19 	vmov	d9, sl, fp
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	b158      	cbz	r0, 800ae88 <_dtoa_r+0xe0>
 800ae70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae72:	2301      	movs	r3, #1
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 856b 	beq.w	800b954 <_dtoa_r+0xbac>
 800ae7e:	4883      	ldr	r0, [pc, #524]	; (800b08c <_dtoa_r+0x2e4>)
 800ae80:	6018      	str	r0, [r3, #0]
 800ae82:	1e43      	subs	r3, r0, #1
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	e7df      	b.n	800ae48 <_dtoa_r+0xa0>
 800ae88:	ec4b ab10 	vmov	d0, sl, fp
 800ae8c:	aa10      	add	r2, sp, #64	; 0x40
 800ae8e:	a911      	add	r1, sp, #68	; 0x44
 800ae90:	4620      	mov	r0, r4
 800ae92:	f001 f8cf 	bl	800c034 <__d2b>
 800ae96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ae9a:	ee08 0a10 	vmov	s16, r0
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	f000 8084 	beq.w	800afac <_dtoa_r+0x204>
 800aea4:	ee19 3a90 	vmov	r3, s19
 800aea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aeb0:	4656      	mov	r6, sl
 800aeb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aeb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aeba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aebe:	4b74      	ldr	r3, [pc, #464]	; (800b090 <_dtoa_r+0x2e8>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	f7f5 f9f7 	bl	80002b8 <__aeabi_dsub>
 800aeca:	a365      	add	r3, pc, #404	; (adr r3, 800b060 <_dtoa_r+0x2b8>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 fbaa 	bl	8000628 <__aeabi_dmul>
 800aed4:	a364      	add	r3, pc, #400	; (adr r3, 800b068 <_dtoa_r+0x2c0>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	f7f5 f9ef 	bl	80002bc <__adddf3>
 800aede:	4606      	mov	r6, r0
 800aee0:	4628      	mov	r0, r5
 800aee2:	460f      	mov	r7, r1
 800aee4:	f7f5 fb36 	bl	8000554 <__aeabi_i2d>
 800aee8:	a361      	add	r3, pc, #388	; (adr r3, 800b070 <_dtoa_r+0x2c8>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	f7f5 fb9b 	bl	8000628 <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4630      	mov	r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 f9df 	bl	80002bc <__adddf3>
 800aefe:	4606      	mov	r6, r0
 800af00:	460f      	mov	r7, r1
 800af02:	f7f5 fe41 	bl	8000b88 <__aeabi_d2iz>
 800af06:	2200      	movs	r2, #0
 800af08:	9000      	str	r0, [sp, #0]
 800af0a:	2300      	movs	r3, #0
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 800af14:	b150      	cbz	r0, 800af2c <_dtoa_r+0x184>
 800af16:	9800      	ldr	r0, [sp, #0]
 800af18:	f7f5 fb1c 	bl	8000554 <__aeabi_i2d>
 800af1c:	4632      	mov	r2, r6
 800af1e:	463b      	mov	r3, r7
 800af20:	f7f5 fdea 	bl	8000af8 <__aeabi_dcmpeq>
 800af24:	b910      	cbnz	r0, 800af2c <_dtoa_r+0x184>
 800af26:	9b00      	ldr	r3, [sp, #0]
 800af28:	3b01      	subs	r3, #1
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	2b16      	cmp	r3, #22
 800af30:	d85a      	bhi.n	800afe8 <_dtoa_r+0x240>
 800af32:	9a00      	ldr	r2, [sp, #0]
 800af34:	4b57      	ldr	r3, [pc, #348]	; (800b094 <_dtoa_r+0x2ec>)
 800af36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	ec51 0b19 	vmov	r0, r1, d9
 800af42:	f7f5 fde3 	bl	8000b0c <__aeabi_dcmplt>
 800af46:	2800      	cmp	r0, #0
 800af48:	d050      	beq.n	800afec <_dtoa_r+0x244>
 800af4a:	9b00      	ldr	r3, [sp, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	2300      	movs	r3, #0
 800af52:	930b      	str	r3, [sp, #44]	; 0x2c
 800af54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af56:	1b5d      	subs	r5, r3, r5
 800af58:	1e6b      	subs	r3, r5, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	bf45      	ittet	mi
 800af5e:	f1c5 0301 	rsbmi	r3, r5, #1
 800af62:	9304      	strmi	r3, [sp, #16]
 800af64:	2300      	movpl	r3, #0
 800af66:	2300      	movmi	r3, #0
 800af68:	bf4c      	ite	mi
 800af6a:	9305      	strmi	r3, [sp, #20]
 800af6c:	9304      	strpl	r3, [sp, #16]
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	db3d      	blt.n	800aff0 <_dtoa_r+0x248>
 800af74:	9b05      	ldr	r3, [sp, #20]
 800af76:	9a00      	ldr	r2, [sp, #0]
 800af78:	920a      	str	r2, [sp, #40]	; 0x28
 800af7a:	4413      	add	r3, r2
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	2300      	movs	r3, #0
 800af80:	9307      	str	r3, [sp, #28]
 800af82:	9b06      	ldr	r3, [sp, #24]
 800af84:	2b09      	cmp	r3, #9
 800af86:	f200 8089 	bhi.w	800b09c <_dtoa_r+0x2f4>
 800af8a:	2b05      	cmp	r3, #5
 800af8c:	bfc4      	itt	gt
 800af8e:	3b04      	subgt	r3, #4
 800af90:	9306      	strgt	r3, [sp, #24]
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	f1a3 0302 	sub.w	r3, r3, #2
 800af98:	bfcc      	ite	gt
 800af9a:	2500      	movgt	r5, #0
 800af9c:	2501      	movle	r5, #1
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	f200 8087 	bhi.w	800b0b2 <_dtoa_r+0x30a>
 800afa4:	e8df f003 	tbb	[pc, r3]
 800afa8:	59383a2d 	.word	0x59383a2d
 800afac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afb0:	441d      	add	r5, r3
 800afb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	bfc1      	itttt	gt
 800afba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800afc2:	fa0b f303 	lslgt.w	r3, fp, r3
 800afc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800afca:	bfda      	itte	le
 800afcc:	f1c3 0320 	rsble	r3, r3, #32
 800afd0:	fa06 f003 	lslle.w	r0, r6, r3
 800afd4:	4318      	orrgt	r0, r3
 800afd6:	f7f5 faad 	bl	8000534 <__aeabi_ui2d>
 800afda:	2301      	movs	r3, #1
 800afdc:	4606      	mov	r6, r0
 800afde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800afe2:	3d01      	subs	r5, #1
 800afe4:	930e      	str	r3, [sp, #56]	; 0x38
 800afe6:	e76a      	b.n	800aebe <_dtoa_r+0x116>
 800afe8:	2301      	movs	r3, #1
 800afea:	e7b2      	b.n	800af52 <_dtoa_r+0x1aa>
 800afec:	900b      	str	r0, [sp, #44]	; 0x2c
 800afee:	e7b1      	b.n	800af54 <_dtoa_r+0x1ac>
 800aff0:	9b04      	ldr	r3, [sp, #16]
 800aff2:	9a00      	ldr	r2, [sp, #0]
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	4253      	negs	r3, r2
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	2300      	movs	r3, #0
 800affe:	930a      	str	r3, [sp, #40]	; 0x28
 800b000:	e7bf      	b.n	800af82 <_dtoa_r+0x1da>
 800b002:	2300      	movs	r3, #0
 800b004:	9308      	str	r3, [sp, #32]
 800b006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dc55      	bgt.n	800b0b8 <_dtoa_r+0x310>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b012:	461a      	mov	r2, r3
 800b014:	9209      	str	r2, [sp, #36]	; 0x24
 800b016:	e00c      	b.n	800b032 <_dtoa_r+0x28a>
 800b018:	2301      	movs	r3, #1
 800b01a:	e7f3      	b.n	800b004 <_dtoa_r+0x25c>
 800b01c:	2300      	movs	r3, #0
 800b01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b020:	9308      	str	r3, [sp, #32]
 800b022:	9b00      	ldr	r3, [sp, #0]
 800b024:	4413      	add	r3, r2
 800b026:	9302      	str	r3, [sp, #8]
 800b028:	3301      	adds	r3, #1
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	bfb8      	it	lt
 800b030:	2301      	movlt	r3, #1
 800b032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b034:	2200      	movs	r2, #0
 800b036:	6042      	str	r2, [r0, #4]
 800b038:	2204      	movs	r2, #4
 800b03a:	f102 0614 	add.w	r6, r2, #20
 800b03e:	429e      	cmp	r6, r3
 800b040:	6841      	ldr	r1, [r0, #4]
 800b042:	d93d      	bls.n	800b0c0 <_dtoa_r+0x318>
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fccd 	bl	800b9e4 <_Balloc>
 800b04a:	9001      	str	r0, [sp, #4]
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d13b      	bne.n	800b0c8 <_dtoa_r+0x320>
 800b050:	4b11      	ldr	r3, [pc, #68]	; (800b098 <_dtoa_r+0x2f0>)
 800b052:	4602      	mov	r2, r0
 800b054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b058:	e6c0      	b.n	800addc <_dtoa_r+0x34>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e7df      	b.n	800b01e <_dtoa_r+0x276>
 800b05e:	bf00      	nop
 800b060:	636f4361 	.word	0x636f4361
 800b064:	3fd287a7 	.word	0x3fd287a7
 800b068:	8b60c8b3 	.word	0x8b60c8b3
 800b06c:	3fc68a28 	.word	0x3fc68a28
 800b070:	509f79fb 	.word	0x509f79fb
 800b074:	3fd34413 	.word	0x3fd34413
 800b078:	080106bf 	.word	0x080106bf
 800b07c:	080106d6 	.word	0x080106d6
 800b080:	7ff00000 	.word	0x7ff00000
 800b084:	080106bb 	.word	0x080106bb
 800b088:	080106b2 	.word	0x080106b2
 800b08c:	080108b2 	.word	0x080108b2
 800b090:	3ff80000 	.word	0x3ff80000
 800b094:	080107c8 	.word	0x080107c8
 800b098:	08010731 	.word	0x08010731
 800b09c:	2501      	movs	r5, #1
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9306      	str	r3, [sp, #24]
 800b0a2:	9508      	str	r5, [sp, #32]
 800b0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2312      	movs	r3, #18
 800b0b0:	e7b0      	b.n	800b014 <_dtoa_r+0x26c>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9308      	str	r3, [sp, #32]
 800b0b6:	e7f5      	b.n	800b0a4 <_dtoa_r+0x2fc>
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0be:	e7b8      	b.n	800b032 <_dtoa_r+0x28a>
 800b0c0:	3101      	adds	r1, #1
 800b0c2:	6041      	str	r1, [r0, #4]
 800b0c4:	0052      	lsls	r2, r2, #1
 800b0c6:	e7b8      	b.n	800b03a <_dtoa_r+0x292>
 800b0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ca:	9a01      	ldr	r2, [sp, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	2b0e      	cmp	r3, #14
 800b0d2:	f200 809d 	bhi.w	800b210 <_dtoa_r+0x468>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	f000 809a 	beq.w	800b210 <_dtoa_r+0x468>
 800b0dc:	9b00      	ldr	r3, [sp, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd32      	ble.n	800b148 <_dtoa_r+0x3a0>
 800b0e2:	4ab7      	ldr	r2, [pc, #732]	; (800b3c0 <_dtoa_r+0x618>)
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b0ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	05d8      	lsls	r0, r3, #23
 800b0f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b0f8:	d516      	bpl.n	800b128 <_dtoa_r+0x380>
 800b0fa:	4bb2      	ldr	r3, [pc, #712]	; (800b3c4 <_dtoa_r+0x61c>)
 800b0fc:	ec51 0b19 	vmov	r0, r1, d9
 800b100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b104:	f7f5 fbba 	bl	800087c <__aeabi_ddiv>
 800b108:	f007 070f 	and.w	r7, r7, #15
 800b10c:	4682      	mov	sl, r0
 800b10e:	468b      	mov	fp, r1
 800b110:	2503      	movs	r5, #3
 800b112:	4eac      	ldr	r6, [pc, #688]	; (800b3c4 <_dtoa_r+0x61c>)
 800b114:	b957      	cbnz	r7, 800b12c <_dtoa_r+0x384>
 800b116:	4642      	mov	r2, r8
 800b118:	464b      	mov	r3, r9
 800b11a:	4650      	mov	r0, sl
 800b11c:	4659      	mov	r1, fp
 800b11e:	f7f5 fbad 	bl	800087c <__aeabi_ddiv>
 800b122:	4682      	mov	sl, r0
 800b124:	468b      	mov	fp, r1
 800b126:	e028      	b.n	800b17a <_dtoa_r+0x3d2>
 800b128:	2502      	movs	r5, #2
 800b12a:	e7f2      	b.n	800b112 <_dtoa_r+0x36a>
 800b12c:	07f9      	lsls	r1, r7, #31
 800b12e:	d508      	bpl.n	800b142 <_dtoa_r+0x39a>
 800b130:	4640      	mov	r0, r8
 800b132:	4649      	mov	r1, r9
 800b134:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b138:	f7f5 fa76 	bl	8000628 <__aeabi_dmul>
 800b13c:	3501      	adds	r5, #1
 800b13e:	4680      	mov	r8, r0
 800b140:	4689      	mov	r9, r1
 800b142:	107f      	asrs	r7, r7, #1
 800b144:	3608      	adds	r6, #8
 800b146:	e7e5      	b.n	800b114 <_dtoa_r+0x36c>
 800b148:	f000 809b 	beq.w	800b282 <_dtoa_r+0x4da>
 800b14c:	9b00      	ldr	r3, [sp, #0]
 800b14e:	4f9d      	ldr	r7, [pc, #628]	; (800b3c4 <_dtoa_r+0x61c>)
 800b150:	425e      	negs	r6, r3
 800b152:	4b9b      	ldr	r3, [pc, #620]	; (800b3c0 <_dtoa_r+0x618>)
 800b154:	f006 020f 	and.w	r2, r6, #15
 800b158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	ec51 0b19 	vmov	r0, r1, d9
 800b164:	f7f5 fa60 	bl	8000628 <__aeabi_dmul>
 800b168:	1136      	asrs	r6, r6, #4
 800b16a:	4682      	mov	sl, r0
 800b16c:	468b      	mov	fp, r1
 800b16e:	2300      	movs	r3, #0
 800b170:	2502      	movs	r5, #2
 800b172:	2e00      	cmp	r6, #0
 800b174:	d17a      	bne.n	800b26c <_dtoa_r+0x4c4>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1d3      	bne.n	800b122 <_dtoa_r+0x37a>
 800b17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 8082 	beq.w	800b286 <_dtoa_r+0x4de>
 800b182:	4b91      	ldr	r3, [pc, #580]	; (800b3c8 <_dtoa_r+0x620>)
 800b184:	2200      	movs	r2, #0
 800b186:	4650      	mov	r0, sl
 800b188:	4659      	mov	r1, fp
 800b18a:	f7f5 fcbf 	bl	8000b0c <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d079      	beq.n	800b286 <_dtoa_r+0x4de>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d076      	beq.n	800b286 <_dtoa_r+0x4de>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dd36      	ble.n	800b20c <_dtoa_r+0x464>
 800b19e:	9b00      	ldr	r3, [sp, #0]
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	1e5f      	subs	r7, r3, #1
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4b88      	ldr	r3, [pc, #544]	; (800b3cc <_dtoa_r+0x624>)
 800b1aa:	f7f5 fa3d 	bl	8000628 <__aeabi_dmul>
 800b1ae:	9e02      	ldr	r6, [sp, #8]
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	468b      	mov	fp, r1
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f7f5 f9cc 	bl	8000554 <__aeabi_i2d>
 800b1bc:	4652      	mov	r2, sl
 800b1be:	465b      	mov	r3, fp
 800b1c0:	f7f5 fa32 	bl	8000628 <__aeabi_dmul>
 800b1c4:	4b82      	ldr	r3, [pc, #520]	; (800b3d0 <_dtoa_r+0x628>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f7f5 f878 	bl	80002bc <__adddf3>
 800b1cc:	46d0      	mov	r8, sl
 800b1ce:	46d9      	mov	r9, fp
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d158      	bne.n	800b28c <_dtoa_r+0x4e4>
 800b1da:	4b7e      	ldr	r3, [pc, #504]	; (800b3d4 <_dtoa_r+0x62c>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	f7f5 f869 	bl	80002b8 <__aeabi_dsub>
 800b1e6:	4652      	mov	r2, sl
 800b1e8:	465b      	mov	r3, fp
 800b1ea:	4680      	mov	r8, r0
 800b1ec:	4689      	mov	r9, r1
 800b1ee:	f7f5 fcab 	bl	8000b48 <__aeabi_dcmpgt>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f040 8295 	bne.w	800b722 <_dtoa_r+0x97a>
 800b1f8:	4652      	mov	r2, sl
 800b1fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f7f5 fc83 	bl	8000b0c <__aeabi_dcmplt>
 800b206:	2800      	cmp	r0, #0
 800b208:	f040 8289 	bne.w	800b71e <_dtoa_r+0x976>
 800b20c:	ec5b ab19 	vmov	sl, fp, d9
 800b210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b212:	2b00      	cmp	r3, #0
 800b214:	f2c0 8148 	blt.w	800b4a8 <_dtoa_r+0x700>
 800b218:	9a00      	ldr	r2, [sp, #0]
 800b21a:	2a0e      	cmp	r2, #14
 800b21c:	f300 8144 	bgt.w	800b4a8 <_dtoa_r+0x700>
 800b220:	4b67      	ldr	r3, [pc, #412]	; (800b3c0 <_dtoa_r+0x618>)
 800b222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f280 80d5 	bge.w	800b3dc <_dtoa_r+0x634>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f300 80d1 	bgt.w	800b3dc <_dtoa_r+0x634>
 800b23a:	f040 826f 	bne.w	800b71c <_dtoa_r+0x974>
 800b23e:	4b65      	ldr	r3, [pc, #404]	; (800b3d4 <_dtoa_r+0x62c>)
 800b240:	2200      	movs	r2, #0
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 f9ef 	bl	8000628 <__aeabi_dmul>
 800b24a:	4652      	mov	r2, sl
 800b24c:	465b      	mov	r3, fp
 800b24e:	f7f5 fc71 	bl	8000b34 <__aeabi_dcmpge>
 800b252:	9e03      	ldr	r6, [sp, #12]
 800b254:	4637      	mov	r7, r6
 800b256:	2800      	cmp	r0, #0
 800b258:	f040 8245 	bne.w	800b6e6 <_dtoa_r+0x93e>
 800b25c:	9d01      	ldr	r5, [sp, #4]
 800b25e:	2331      	movs	r3, #49	; 0x31
 800b260:	f805 3b01 	strb.w	r3, [r5], #1
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	3301      	adds	r3, #1
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	e240      	b.n	800b6ee <_dtoa_r+0x946>
 800b26c:	07f2      	lsls	r2, r6, #31
 800b26e:	d505      	bpl.n	800b27c <_dtoa_r+0x4d4>
 800b270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b274:	f7f5 f9d8 	bl	8000628 <__aeabi_dmul>
 800b278:	3501      	adds	r5, #1
 800b27a:	2301      	movs	r3, #1
 800b27c:	1076      	asrs	r6, r6, #1
 800b27e:	3708      	adds	r7, #8
 800b280:	e777      	b.n	800b172 <_dtoa_r+0x3ca>
 800b282:	2502      	movs	r5, #2
 800b284:	e779      	b.n	800b17a <_dtoa_r+0x3d2>
 800b286:	9f00      	ldr	r7, [sp, #0]
 800b288:	9e03      	ldr	r6, [sp, #12]
 800b28a:	e794      	b.n	800b1b6 <_dtoa_r+0x40e>
 800b28c:	9901      	ldr	r1, [sp, #4]
 800b28e:	4b4c      	ldr	r3, [pc, #304]	; (800b3c0 <_dtoa_r+0x618>)
 800b290:	4431      	add	r1, r6
 800b292:	910d      	str	r1, [sp, #52]	; 0x34
 800b294:	9908      	ldr	r1, [sp, #32]
 800b296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b29a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b29e:	2900      	cmp	r1, #0
 800b2a0:	d043      	beq.n	800b32a <_dtoa_r+0x582>
 800b2a2:	494d      	ldr	r1, [pc, #308]	; (800b3d8 <_dtoa_r+0x630>)
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f7f5 fae9 	bl	800087c <__aeabi_ddiv>
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	f7f5 f803 	bl	80002b8 <__aeabi_dsub>
 800b2b2:	9d01      	ldr	r5, [sp, #4]
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	f7f5 fc64 	bl	8000b88 <__aeabi_d2iz>
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	f7f5 f947 	bl	8000554 <__aeabi_i2d>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	f7f4 fff3 	bl	80002b8 <__aeabi_dsub>
 800b2d2:	3630      	adds	r6, #48	; 0x30
 800b2d4:	f805 6b01 	strb.w	r6, [r5], #1
 800b2d8:	4652      	mov	r2, sl
 800b2da:	465b      	mov	r3, fp
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4689      	mov	r9, r1
 800b2e0:	f7f5 fc14 	bl	8000b0c <__aeabi_dcmplt>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d163      	bne.n	800b3b0 <_dtoa_r+0x608>
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	4936      	ldr	r1, [pc, #216]	; (800b3c8 <_dtoa_r+0x620>)
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	f7f4 ffe2 	bl	80002b8 <__aeabi_dsub>
 800b2f4:	4652      	mov	r2, sl
 800b2f6:	465b      	mov	r3, fp
 800b2f8:	f7f5 fc08 	bl	8000b0c <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f040 80b5 	bne.w	800b46c <_dtoa_r+0x6c4>
 800b302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b304:	429d      	cmp	r5, r3
 800b306:	d081      	beq.n	800b20c <_dtoa_r+0x464>
 800b308:	4b30      	ldr	r3, [pc, #192]	; (800b3cc <_dtoa_r+0x624>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	4650      	mov	r0, sl
 800b30e:	4659      	mov	r1, fp
 800b310:	f7f5 f98a 	bl	8000628 <__aeabi_dmul>
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <_dtoa_r+0x624>)
 800b316:	4682      	mov	sl, r0
 800b318:	468b      	mov	fp, r1
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	2200      	movs	r2, #0
 800b320:	f7f5 f982 	bl	8000628 <__aeabi_dmul>
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	e7c6      	b.n	800b2b8 <_dtoa_r+0x510>
 800b32a:	4650      	mov	r0, sl
 800b32c:	4659      	mov	r1, fp
 800b32e:	f7f5 f97b 	bl	8000628 <__aeabi_dmul>
 800b332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b334:	9d01      	ldr	r5, [sp, #4]
 800b336:	930f      	str	r3, [sp, #60]	; 0x3c
 800b338:	4682      	mov	sl, r0
 800b33a:	468b      	mov	fp, r1
 800b33c:	4649      	mov	r1, r9
 800b33e:	4640      	mov	r0, r8
 800b340:	f7f5 fc22 	bl	8000b88 <__aeabi_d2iz>
 800b344:	4606      	mov	r6, r0
 800b346:	f7f5 f905 	bl	8000554 <__aeabi_i2d>
 800b34a:	3630      	adds	r6, #48	; 0x30
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	f7f4 ffb0 	bl	80002b8 <__aeabi_dsub>
 800b358:	f805 6b01 	strb.w	r6, [r5], #1
 800b35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b35e:	429d      	cmp	r5, r3
 800b360:	4680      	mov	r8, r0
 800b362:	4689      	mov	r9, r1
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	d124      	bne.n	800b3b4 <_dtoa_r+0x60c>
 800b36a:	4b1b      	ldr	r3, [pc, #108]	; (800b3d8 <_dtoa_r+0x630>)
 800b36c:	4650      	mov	r0, sl
 800b36e:	4659      	mov	r1, fp
 800b370:	f7f4 ffa4 	bl	80002bc <__adddf3>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f5 fbe4 	bl	8000b48 <__aeabi_dcmpgt>
 800b380:	2800      	cmp	r0, #0
 800b382:	d173      	bne.n	800b46c <_dtoa_r+0x6c4>
 800b384:	4652      	mov	r2, sl
 800b386:	465b      	mov	r3, fp
 800b388:	4913      	ldr	r1, [pc, #76]	; (800b3d8 <_dtoa_r+0x630>)
 800b38a:	2000      	movs	r0, #0
 800b38c:	f7f4 ff94 	bl	80002b8 <__aeabi_dsub>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4640      	mov	r0, r8
 800b396:	4649      	mov	r1, r9
 800b398:	f7f5 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f43f af35 	beq.w	800b20c <_dtoa_r+0x464>
 800b3a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3a4:	1e6b      	subs	r3, r5, #1
 800b3a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3ac:	2b30      	cmp	r3, #48	; 0x30
 800b3ae:	d0f8      	beq.n	800b3a2 <_dtoa_r+0x5fa>
 800b3b0:	9700      	str	r7, [sp, #0]
 800b3b2:	e049      	b.n	800b448 <_dtoa_r+0x6a0>
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <_dtoa_r+0x624>)
 800b3b6:	f7f5 f937 	bl	8000628 <__aeabi_dmul>
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	4689      	mov	r9, r1
 800b3be:	e7bd      	b.n	800b33c <_dtoa_r+0x594>
 800b3c0:	080107c8 	.word	0x080107c8
 800b3c4:	080107a0 	.word	0x080107a0
 800b3c8:	3ff00000 	.word	0x3ff00000
 800b3cc:	40240000 	.word	0x40240000
 800b3d0:	401c0000 	.word	0x401c0000
 800b3d4:	40140000 	.word	0x40140000
 800b3d8:	3fe00000 	.word	0x3fe00000
 800b3dc:	9d01      	ldr	r5, [sp, #4]
 800b3de:	4656      	mov	r6, sl
 800b3e0:	465f      	mov	r7, fp
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f5 fa47 	bl	800087c <__aeabi_ddiv>
 800b3ee:	f7f5 fbcb 	bl	8000b88 <__aeabi_d2iz>
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	f7f5 f8ae 	bl	8000554 <__aeabi_i2d>
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	f7f5 f914 	bl	8000628 <__aeabi_dmul>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4630      	mov	r0, r6
 800b406:	4639      	mov	r1, r7
 800b408:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b40c:	f7f4 ff54 	bl	80002b8 <__aeabi_dsub>
 800b410:	f805 6b01 	strb.w	r6, [r5], #1
 800b414:	9e01      	ldr	r6, [sp, #4]
 800b416:	9f03      	ldr	r7, [sp, #12]
 800b418:	1bae      	subs	r6, r5, r6
 800b41a:	42b7      	cmp	r7, r6
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	d135      	bne.n	800b48e <_dtoa_r+0x6e6>
 800b422:	f7f4 ff4b 	bl	80002bc <__adddf3>
 800b426:	4642      	mov	r2, r8
 800b428:	464b      	mov	r3, r9
 800b42a:	4606      	mov	r6, r0
 800b42c:	460f      	mov	r7, r1
 800b42e:	f7f5 fb8b 	bl	8000b48 <__aeabi_dcmpgt>
 800b432:	b9d0      	cbnz	r0, 800b46a <_dtoa_r+0x6c2>
 800b434:	4642      	mov	r2, r8
 800b436:	464b      	mov	r3, r9
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f5 fb5c 	bl	8000af8 <__aeabi_dcmpeq>
 800b440:	b110      	cbz	r0, 800b448 <_dtoa_r+0x6a0>
 800b442:	f01a 0f01 	tst.w	sl, #1
 800b446:	d110      	bne.n	800b46a <_dtoa_r+0x6c2>
 800b448:	4620      	mov	r0, r4
 800b44a:	ee18 1a10 	vmov	r1, s16
 800b44e:	f000 fb09 	bl	800ba64 <_Bfree>
 800b452:	2300      	movs	r3, #0
 800b454:	9800      	ldr	r0, [sp, #0]
 800b456:	702b      	strb	r3, [r5, #0]
 800b458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b45a:	3001      	adds	r0, #1
 800b45c:	6018      	str	r0, [r3, #0]
 800b45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b460:	2b00      	cmp	r3, #0
 800b462:	f43f acf1 	beq.w	800ae48 <_dtoa_r+0xa0>
 800b466:	601d      	str	r5, [r3, #0]
 800b468:	e4ee      	b.n	800ae48 <_dtoa_r+0xa0>
 800b46a:	9f00      	ldr	r7, [sp, #0]
 800b46c:	462b      	mov	r3, r5
 800b46e:	461d      	mov	r5, r3
 800b470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b474:	2a39      	cmp	r2, #57	; 0x39
 800b476:	d106      	bne.n	800b486 <_dtoa_r+0x6de>
 800b478:	9a01      	ldr	r2, [sp, #4]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d1f7      	bne.n	800b46e <_dtoa_r+0x6c6>
 800b47e:	9901      	ldr	r1, [sp, #4]
 800b480:	2230      	movs	r2, #48	; 0x30
 800b482:	3701      	adds	r7, #1
 800b484:	700a      	strb	r2, [r1, #0]
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	3201      	adds	r2, #1
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	e790      	b.n	800b3b0 <_dtoa_r+0x608>
 800b48e:	4ba6      	ldr	r3, [pc, #664]	; (800b728 <_dtoa_r+0x980>)
 800b490:	2200      	movs	r2, #0
 800b492:	f7f5 f8c9 	bl	8000628 <__aeabi_dmul>
 800b496:	2200      	movs	r2, #0
 800b498:	2300      	movs	r3, #0
 800b49a:	4606      	mov	r6, r0
 800b49c:	460f      	mov	r7, r1
 800b49e:	f7f5 fb2b 	bl	8000af8 <__aeabi_dcmpeq>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d09d      	beq.n	800b3e2 <_dtoa_r+0x63a>
 800b4a6:	e7cf      	b.n	800b448 <_dtoa_r+0x6a0>
 800b4a8:	9a08      	ldr	r2, [sp, #32]
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	f000 80d7 	beq.w	800b65e <_dtoa_r+0x8b6>
 800b4b0:	9a06      	ldr	r2, [sp, #24]
 800b4b2:	2a01      	cmp	r2, #1
 800b4b4:	f300 80ba 	bgt.w	800b62c <_dtoa_r+0x884>
 800b4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4ba:	2a00      	cmp	r2, #0
 800b4bc:	f000 80b2 	beq.w	800b624 <_dtoa_r+0x87c>
 800b4c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4c4:	9e07      	ldr	r6, [sp, #28]
 800b4c6:	9d04      	ldr	r5, [sp, #16]
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	441a      	add	r2, r3
 800b4cc:	9204      	str	r2, [sp, #16]
 800b4ce:	9a05      	ldr	r2, [sp, #20]
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	441a      	add	r2, r3
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	9205      	str	r2, [sp, #20]
 800b4d8:	f000 fb7c 	bl	800bbd4 <__i2b>
 800b4dc:	4607      	mov	r7, r0
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	dd0c      	ble.n	800b4fc <_dtoa_r+0x754>
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd09      	ble.n	800b4fc <_dtoa_r+0x754>
 800b4e8:	42ab      	cmp	r3, r5
 800b4ea:	9a04      	ldr	r2, [sp, #16]
 800b4ec:	bfa8      	it	ge
 800b4ee:	462b      	movge	r3, r5
 800b4f0:	1ad2      	subs	r2, r2, r3
 800b4f2:	9204      	str	r2, [sp, #16]
 800b4f4:	9a05      	ldr	r2, [sp, #20]
 800b4f6:	1aed      	subs	r5, r5, r3
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	9305      	str	r3, [sp, #20]
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	b31b      	cbz	r3, 800b548 <_dtoa_r+0x7a0>
 800b500:	9b08      	ldr	r3, [sp, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 80af 	beq.w	800b666 <_dtoa_r+0x8be>
 800b508:	2e00      	cmp	r6, #0
 800b50a:	dd13      	ble.n	800b534 <_dtoa_r+0x78c>
 800b50c:	4639      	mov	r1, r7
 800b50e:	4632      	mov	r2, r6
 800b510:	4620      	mov	r0, r4
 800b512:	f000 fc1f 	bl	800bd54 <__pow5mult>
 800b516:	ee18 2a10 	vmov	r2, s16
 800b51a:	4601      	mov	r1, r0
 800b51c:	4607      	mov	r7, r0
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fb6e 	bl	800bc00 <__multiply>
 800b524:	ee18 1a10 	vmov	r1, s16
 800b528:	4680      	mov	r8, r0
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 fa9a 	bl	800ba64 <_Bfree>
 800b530:	ee08 8a10 	vmov	s16, r8
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	1b9a      	subs	r2, r3, r6
 800b538:	d006      	beq.n	800b548 <_dtoa_r+0x7a0>
 800b53a:	ee18 1a10 	vmov	r1, s16
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 fc08 	bl	800bd54 <__pow5mult>
 800b544:	ee08 0a10 	vmov	s16, r0
 800b548:	2101      	movs	r1, #1
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fb42 	bl	800bbd4 <__i2b>
 800b550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b552:	2b00      	cmp	r3, #0
 800b554:	4606      	mov	r6, r0
 800b556:	f340 8088 	ble.w	800b66a <_dtoa_r+0x8c2>
 800b55a:	461a      	mov	r2, r3
 800b55c:	4601      	mov	r1, r0
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 fbf8 	bl	800bd54 <__pow5mult>
 800b564:	9b06      	ldr	r3, [sp, #24]
 800b566:	2b01      	cmp	r3, #1
 800b568:	4606      	mov	r6, r0
 800b56a:	f340 8081 	ble.w	800b670 <_dtoa_r+0x8c8>
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	6933      	ldr	r3, [r6, #16]
 800b574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b578:	6918      	ldr	r0, [r3, #16]
 800b57a:	f000 fadb 	bl	800bb34 <__hi0bits>
 800b57e:	f1c0 0020 	rsb	r0, r0, #32
 800b582:	9b05      	ldr	r3, [sp, #20]
 800b584:	4418      	add	r0, r3
 800b586:	f010 001f 	ands.w	r0, r0, #31
 800b58a:	f000 8092 	beq.w	800b6b2 <_dtoa_r+0x90a>
 800b58e:	f1c0 0320 	rsb	r3, r0, #32
 800b592:	2b04      	cmp	r3, #4
 800b594:	f340 808a 	ble.w	800b6ac <_dtoa_r+0x904>
 800b598:	f1c0 001c 	rsb	r0, r0, #28
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	4403      	add	r3, r0
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	9b05      	ldr	r3, [sp, #20]
 800b5a4:	4403      	add	r3, r0
 800b5a6:	4405      	add	r5, r0
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	9b04      	ldr	r3, [sp, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dd07      	ble.n	800b5c0 <_dtoa_r+0x818>
 800b5b0:	ee18 1a10 	vmov	r1, s16
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f000 fc26 	bl	800be08 <__lshift>
 800b5bc:	ee08 0a10 	vmov	s16, r0
 800b5c0:	9b05      	ldr	r3, [sp, #20]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	dd05      	ble.n	800b5d2 <_dtoa_r+0x82a>
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 fc1c 	bl	800be08 <__lshift>
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d06e      	beq.n	800b6b6 <_dtoa_r+0x90e>
 800b5d8:	ee18 0a10 	vmov	r0, s16
 800b5dc:	4631      	mov	r1, r6
 800b5de:	f000 fc83 	bl	800bee8 <__mcmp>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	da67      	bge.n	800b6b6 <_dtoa_r+0x90e>
 800b5e6:	9b00      	ldr	r3, [sp, #0]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	ee18 1a10 	vmov	r1, s16
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	220a      	movs	r2, #10
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 fa57 	bl	800baa8 <__multadd>
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	ee08 0a10 	vmov	s16, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 81b1 	beq.w	800b968 <_dtoa_r+0xbc0>
 800b606:	2300      	movs	r3, #0
 800b608:	4639      	mov	r1, r7
 800b60a:	220a      	movs	r2, #10
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 fa4b 	bl	800baa8 <__multadd>
 800b612:	9b02      	ldr	r3, [sp, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	4607      	mov	r7, r0
 800b618:	f300 808e 	bgt.w	800b738 <_dtoa_r+0x990>
 800b61c:	9b06      	ldr	r3, [sp, #24]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	dc51      	bgt.n	800b6c6 <_dtoa_r+0x91e>
 800b622:	e089      	b.n	800b738 <_dtoa_r+0x990>
 800b624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b62a:	e74b      	b.n	800b4c4 <_dtoa_r+0x71c>
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	1e5e      	subs	r6, r3, #1
 800b630:	9b07      	ldr	r3, [sp, #28]
 800b632:	42b3      	cmp	r3, r6
 800b634:	bfbf      	itttt	lt
 800b636:	9b07      	ldrlt	r3, [sp, #28]
 800b638:	9607      	strlt	r6, [sp, #28]
 800b63a:	1af2      	sublt	r2, r6, r3
 800b63c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b63e:	bfb6      	itet	lt
 800b640:	189b      	addlt	r3, r3, r2
 800b642:	1b9e      	subge	r6, r3, r6
 800b644:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	bfb8      	it	lt
 800b64a:	2600      	movlt	r6, #0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bfb7      	itett	lt
 800b650:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b654:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b658:	1a9d      	sublt	r5, r3, r2
 800b65a:	2300      	movlt	r3, #0
 800b65c:	e734      	b.n	800b4c8 <_dtoa_r+0x720>
 800b65e:	9e07      	ldr	r6, [sp, #28]
 800b660:	9d04      	ldr	r5, [sp, #16]
 800b662:	9f08      	ldr	r7, [sp, #32]
 800b664:	e73b      	b.n	800b4de <_dtoa_r+0x736>
 800b666:	9a07      	ldr	r2, [sp, #28]
 800b668:	e767      	b.n	800b53a <_dtoa_r+0x792>
 800b66a:	9b06      	ldr	r3, [sp, #24]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	dc18      	bgt.n	800b6a2 <_dtoa_r+0x8fa>
 800b670:	f1ba 0f00 	cmp.w	sl, #0
 800b674:	d115      	bne.n	800b6a2 <_dtoa_r+0x8fa>
 800b676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b67a:	b993      	cbnz	r3, 800b6a2 <_dtoa_r+0x8fa>
 800b67c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b680:	0d1b      	lsrs	r3, r3, #20
 800b682:	051b      	lsls	r3, r3, #20
 800b684:	b183      	cbz	r3, 800b6a8 <_dtoa_r+0x900>
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	3301      	adds	r3, #1
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	9b05      	ldr	r3, [sp, #20]
 800b68e:	3301      	adds	r3, #1
 800b690:	9305      	str	r3, [sp, #20]
 800b692:	f04f 0801 	mov.w	r8, #1
 800b696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f47f af6a 	bne.w	800b572 <_dtoa_r+0x7ca>
 800b69e:	2001      	movs	r0, #1
 800b6a0:	e76f      	b.n	800b582 <_dtoa_r+0x7da>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	e7f6      	b.n	800b696 <_dtoa_r+0x8ee>
 800b6a8:	4698      	mov	r8, r3
 800b6aa:	e7f4      	b.n	800b696 <_dtoa_r+0x8ee>
 800b6ac:	f43f af7d 	beq.w	800b5aa <_dtoa_r+0x802>
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	301c      	adds	r0, #28
 800b6b4:	e772      	b.n	800b59c <_dtoa_r+0x7f4>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dc37      	bgt.n	800b72c <_dtoa_r+0x984>
 800b6bc:	9b06      	ldr	r3, [sp, #24]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	dd34      	ble.n	800b72c <_dtoa_r+0x984>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	9302      	str	r3, [sp, #8]
 800b6c6:	9b02      	ldr	r3, [sp, #8]
 800b6c8:	b96b      	cbnz	r3, 800b6e6 <_dtoa_r+0x93e>
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	2205      	movs	r2, #5
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 f9ea 	bl	800baa8 <__multadd>
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	ee18 0a10 	vmov	r0, s16
 800b6dc:	f000 fc04 	bl	800bee8 <__mcmp>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f73f adbb 	bgt.w	800b25c <_dtoa_r+0x4b4>
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	9d01      	ldr	r5, [sp, #4]
 800b6ea:	43db      	mvns	r3, r3
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	f04f 0800 	mov.w	r8, #0
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f000 f9b5 	bl	800ba64 <_Bfree>
 800b6fa:	2f00      	cmp	r7, #0
 800b6fc:	f43f aea4 	beq.w	800b448 <_dtoa_r+0x6a0>
 800b700:	f1b8 0f00 	cmp.w	r8, #0
 800b704:	d005      	beq.n	800b712 <_dtoa_r+0x96a>
 800b706:	45b8      	cmp	r8, r7
 800b708:	d003      	beq.n	800b712 <_dtoa_r+0x96a>
 800b70a:	4641      	mov	r1, r8
 800b70c:	4620      	mov	r0, r4
 800b70e:	f000 f9a9 	bl	800ba64 <_Bfree>
 800b712:	4639      	mov	r1, r7
 800b714:	4620      	mov	r0, r4
 800b716:	f000 f9a5 	bl	800ba64 <_Bfree>
 800b71a:	e695      	b.n	800b448 <_dtoa_r+0x6a0>
 800b71c:	2600      	movs	r6, #0
 800b71e:	4637      	mov	r7, r6
 800b720:	e7e1      	b.n	800b6e6 <_dtoa_r+0x93e>
 800b722:	9700      	str	r7, [sp, #0]
 800b724:	4637      	mov	r7, r6
 800b726:	e599      	b.n	800b25c <_dtoa_r+0x4b4>
 800b728:	40240000 	.word	0x40240000
 800b72c:	9b08      	ldr	r3, [sp, #32]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80ca 	beq.w	800b8c8 <_dtoa_r+0xb20>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	2d00      	cmp	r5, #0
 800b73a:	dd05      	ble.n	800b748 <_dtoa_r+0x9a0>
 800b73c:	4639      	mov	r1, r7
 800b73e:	462a      	mov	r2, r5
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fb61 	bl	800be08 <__lshift>
 800b746:	4607      	mov	r7, r0
 800b748:	f1b8 0f00 	cmp.w	r8, #0
 800b74c:	d05b      	beq.n	800b806 <_dtoa_r+0xa5e>
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	4620      	mov	r0, r4
 800b752:	f000 f947 	bl	800b9e4 <_Balloc>
 800b756:	4605      	mov	r5, r0
 800b758:	b928      	cbnz	r0, 800b766 <_dtoa_r+0x9be>
 800b75a:	4b87      	ldr	r3, [pc, #540]	; (800b978 <_dtoa_r+0xbd0>)
 800b75c:	4602      	mov	r2, r0
 800b75e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b762:	f7ff bb3b 	b.w	800addc <_dtoa_r+0x34>
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	3202      	adds	r2, #2
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	f107 010c 	add.w	r1, r7, #12
 800b770:	300c      	adds	r0, #12
 800b772:	f000 f91d 	bl	800b9b0 <memcpy>
 800b776:	2201      	movs	r2, #1
 800b778:	4629      	mov	r1, r5
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fb44 	bl	800be08 <__lshift>
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	f103 0901 	add.w	r9, r3, #1
 800b786:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b78a:	4413      	add	r3, r2
 800b78c:	9305      	str	r3, [sp, #20]
 800b78e:	f00a 0301 	and.w	r3, sl, #1
 800b792:	46b8      	mov	r8, r7
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	4607      	mov	r7, r0
 800b798:	4631      	mov	r1, r6
 800b79a:	ee18 0a10 	vmov	r0, s16
 800b79e:	f7ff fa75 	bl	800ac8c <quorem>
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	9002      	str	r0, [sp, #8]
 800b7a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7aa:	ee18 0a10 	vmov	r0, s16
 800b7ae:	f000 fb9b 	bl	800bee8 <__mcmp>
 800b7b2:	463a      	mov	r2, r7
 800b7b4:	9003      	str	r0, [sp, #12]
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fbb1 	bl	800bf20 <__mdiff>
 800b7be:	68c2      	ldr	r2, [r0, #12]
 800b7c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	bb02      	cbnz	r2, 800b80a <_dtoa_r+0xa62>
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	ee18 0a10 	vmov	r0, s16
 800b7ce:	f000 fb8b 	bl	800bee8 <__mcmp>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	9207      	str	r2, [sp, #28]
 800b7da:	f000 f943 	bl	800ba64 <_Bfree>
 800b7de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b7e2:	ea43 0102 	orr.w	r1, r3, r2
 800b7e6:	9b04      	ldr	r3, [sp, #16]
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	464d      	mov	r5, r9
 800b7ec:	d10f      	bne.n	800b80e <_dtoa_r+0xa66>
 800b7ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7f2:	d02a      	beq.n	800b84a <_dtoa_r+0xaa2>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd02      	ble.n	800b800 <_dtoa_r+0xa58>
 800b7fa:	9b02      	ldr	r3, [sp, #8]
 800b7fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b800:	f88b a000 	strb.w	sl, [fp]
 800b804:	e775      	b.n	800b6f2 <_dtoa_r+0x94a>
 800b806:	4638      	mov	r0, r7
 800b808:	e7ba      	b.n	800b780 <_dtoa_r+0x9d8>
 800b80a:	2201      	movs	r2, #1
 800b80c:	e7e2      	b.n	800b7d4 <_dtoa_r+0xa2c>
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	db04      	blt.n	800b81e <_dtoa_r+0xa76>
 800b814:	9906      	ldr	r1, [sp, #24]
 800b816:	430b      	orrs	r3, r1
 800b818:	9904      	ldr	r1, [sp, #16]
 800b81a:	430b      	orrs	r3, r1
 800b81c:	d122      	bne.n	800b864 <_dtoa_r+0xabc>
 800b81e:	2a00      	cmp	r2, #0
 800b820:	ddee      	ble.n	800b800 <_dtoa_r+0xa58>
 800b822:	ee18 1a10 	vmov	r1, s16
 800b826:	2201      	movs	r2, #1
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 faed 	bl	800be08 <__lshift>
 800b82e:	4631      	mov	r1, r6
 800b830:	ee08 0a10 	vmov	s16, r0
 800b834:	f000 fb58 	bl	800bee8 <__mcmp>
 800b838:	2800      	cmp	r0, #0
 800b83a:	dc03      	bgt.n	800b844 <_dtoa_r+0xa9c>
 800b83c:	d1e0      	bne.n	800b800 <_dtoa_r+0xa58>
 800b83e:	f01a 0f01 	tst.w	sl, #1
 800b842:	d0dd      	beq.n	800b800 <_dtoa_r+0xa58>
 800b844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b848:	d1d7      	bne.n	800b7fa <_dtoa_r+0xa52>
 800b84a:	2339      	movs	r3, #57	; 0x39
 800b84c:	f88b 3000 	strb.w	r3, [fp]
 800b850:	462b      	mov	r3, r5
 800b852:	461d      	mov	r5, r3
 800b854:	3b01      	subs	r3, #1
 800b856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b85a:	2a39      	cmp	r2, #57	; 0x39
 800b85c:	d071      	beq.n	800b942 <_dtoa_r+0xb9a>
 800b85e:	3201      	adds	r2, #1
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	e746      	b.n	800b6f2 <_dtoa_r+0x94a>
 800b864:	2a00      	cmp	r2, #0
 800b866:	dd07      	ble.n	800b878 <_dtoa_r+0xad0>
 800b868:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b86c:	d0ed      	beq.n	800b84a <_dtoa_r+0xaa2>
 800b86e:	f10a 0301 	add.w	r3, sl, #1
 800b872:	f88b 3000 	strb.w	r3, [fp]
 800b876:	e73c      	b.n	800b6f2 <_dtoa_r+0x94a>
 800b878:	9b05      	ldr	r3, [sp, #20]
 800b87a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b87e:	4599      	cmp	r9, r3
 800b880:	d047      	beq.n	800b912 <_dtoa_r+0xb6a>
 800b882:	ee18 1a10 	vmov	r1, s16
 800b886:	2300      	movs	r3, #0
 800b888:	220a      	movs	r2, #10
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f90c 	bl	800baa8 <__multadd>
 800b890:	45b8      	cmp	r8, r7
 800b892:	ee08 0a10 	vmov	s16, r0
 800b896:	f04f 0300 	mov.w	r3, #0
 800b89a:	f04f 020a 	mov.w	r2, #10
 800b89e:	4641      	mov	r1, r8
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	d106      	bne.n	800b8b2 <_dtoa_r+0xb0a>
 800b8a4:	f000 f900 	bl	800baa8 <__multadd>
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	4607      	mov	r7, r0
 800b8ac:	f109 0901 	add.w	r9, r9, #1
 800b8b0:	e772      	b.n	800b798 <_dtoa_r+0x9f0>
 800b8b2:	f000 f8f9 	bl	800baa8 <__multadd>
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	220a      	movs	r2, #10
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 f8f2 	bl	800baa8 <__multadd>
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	e7f1      	b.n	800b8ac <_dtoa_r+0xb04>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	9d01      	ldr	r5, [sp, #4]
 800b8ce:	ee18 0a10 	vmov	r0, s16
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	f7ff f9da 	bl	800ac8c <quorem>
 800b8d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	f805 ab01 	strb.w	sl, [r5], #1
 800b8e2:	1aea      	subs	r2, r5, r3
 800b8e4:	9b02      	ldr	r3, [sp, #8]
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	dd09      	ble.n	800b8fe <_dtoa_r+0xb56>
 800b8ea:	ee18 1a10 	vmov	r1, s16
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	220a      	movs	r2, #10
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 f8d8 	bl	800baa8 <__multadd>
 800b8f8:	ee08 0a10 	vmov	s16, r0
 800b8fc:	e7e7      	b.n	800b8ce <_dtoa_r+0xb26>
 800b8fe:	9b02      	ldr	r3, [sp, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	bfc8      	it	gt
 800b904:	461d      	movgt	r5, r3
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	bfd8      	it	le
 800b90a:	2501      	movle	r5, #1
 800b90c:	441d      	add	r5, r3
 800b90e:	f04f 0800 	mov.w	r8, #0
 800b912:	ee18 1a10 	vmov	r1, s16
 800b916:	2201      	movs	r2, #1
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 fa75 	bl	800be08 <__lshift>
 800b91e:	4631      	mov	r1, r6
 800b920:	ee08 0a10 	vmov	s16, r0
 800b924:	f000 fae0 	bl	800bee8 <__mcmp>
 800b928:	2800      	cmp	r0, #0
 800b92a:	dc91      	bgt.n	800b850 <_dtoa_r+0xaa8>
 800b92c:	d102      	bne.n	800b934 <_dtoa_r+0xb8c>
 800b92e:	f01a 0f01 	tst.w	sl, #1
 800b932:	d18d      	bne.n	800b850 <_dtoa_r+0xaa8>
 800b934:	462b      	mov	r3, r5
 800b936:	461d      	mov	r5, r3
 800b938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b93c:	2a30      	cmp	r2, #48	; 0x30
 800b93e:	d0fa      	beq.n	800b936 <_dtoa_r+0xb8e>
 800b940:	e6d7      	b.n	800b6f2 <_dtoa_r+0x94a>
 800b942:	9a01      	ldr	r2, [sp, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d184      	bne.n	800b852 <_dtoa_r+0xaaa>
 800b948:	9b00      	ldr	r3, [sp, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	2331      	movs	r3, #49	; 0x31
 800b950:	7013      	strb	r3, [r2, #0]
 800b952:	e6ce      	b.n	800b6f2 <_dtoa_r+0x94a>
 800b954:	4b09      	ldr	r3, [pc, #36]	; (800b97c <_dtoa_r+0xbd4>)
 800b956:	f7ff ba95 	b.w	800ae84 <_dtoa_r+0xdc>
 800b95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f47f aa6e 	bne.w	800ae3e <_dtoa_r+0x96>
 800b962:	4b07      	ldr	r3, [pc, #28]	; (800b980 <_dtoa_r+0xbd8>)
 800b964:	f7ff ba8e 	b.w	800ae84 <_dtoa_r+0xdc>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dcae      	bgt.n	800b8cc <_dtoa_r+0xb24>
 800b96e:	9b06      	ldr	r3, [sp, #24]
 800b970:	2b02      	cmp	r3, #2
 800b972:	f73f aea8 	bgt.w	800b6c6 <_dtoa_r+0x91e>
 800b976:	e7a9      	b.n	800b8cc <_dtoa_r+0xb24>
 800b978:	08010731 	.word	0x08010731
 800b97c:	080108b1 	.word	0x080108b1
 800b980:	080106b2 	.word	0x080106b2

0800b984 <_localeconv_r>:
 800b984:	4800      	ldr	r0, [pc, #0]	; (800b988 <_localeconv_r+0x4>)
 800b986:	4770      	bx	lr
 800b988:	20000168 	.word	0x20000168

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	; (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f7 fe80 	bl	80036a0 <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20012274 	.word	0x20012274

0800b9b0 <memcpy>:
 800b9b0:	440a      	add	r2, r1
 800b9b2:	4291      	cmp	r1, r2
 800b9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9b8:	d100      	bne.n	800b9bc <memcpy+0xc>
 800b9ba:	4770      	bx	lr
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9c6:	4291      	cmp	r1, r2
 800b9c8:	d1f9      	bne.n	800b9be <memcpy+0xe>
 800b9ca:	bd10      	pop	{r4, pc}

0800b9cc <__malloc_lock>:
 800b9cc:	4801      	ldr	r0, [pc, #4]	; (800b9d4 <__malloc_lock+0x8>)
 800b9ce:	f001 bb87 	b.w	800d0e0 <__retarget_lock_acquire_recursive>
 800b9d2:	bf00      	nop
 800b9d4:	20012278 	.word	0x20012278

0800b9d8 <__malloc_unlock>:
 800b9d8:	4801      	ldr	r0, [pc, #4]	; (800b9e0 <__malloc_unlock+0x8>)
 800b9da:	f001 bb82 	b.w	800d0e2 <__retarget_lock_release_recursive>
 800b9de:	bf00      	nop
 800b9e0:	20012278 	.word	0x20012278

0800b9e4 <_Balloc>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	b976      	cbnz	r6, 800ba0c <_Balloc+0x28>
 800b9ee:	2010      	movs	r0, #16
 800b9f0:	f7fe fb2e 	bl	800a050 <malloc>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b9f8:	b920      	cbnz	r0, 800ba04 <_Balloc+0x20>
 800b9fa:	4b18      	ldr	r3, [pc, #96]	; (800ba5c <_Balloc+0x78>)
 800b9fc:	4818      	ldr	r0, [pc, #96]	; (800ba60 <_Balloc+0x7c>)
 800b9fe:	2166      	movs	r1, #102	; 0x66
 800ba00:	f001 f986 	bl	800cd10 <__assert_func>
 800ba04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba08:	6006      	str	r6, [r0, #0]
 800ba0a:	60c6      	str	r6, [r0, #12]
 800ba0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba0e:	68f3      	ldr	r3, [r6, #12]
 800ba10:	b183      	cbz	r3, 800ba34 <_Balloc+0x50>
 800ba12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba1a:	b9b8      	cbnz	r0, 800ba4c <_Balloc+0x68>
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba22:	1d72      	adds	r2, r6, #5
 800ba24:	0092      	lsls	r2, r2, #2
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 fb60 	bl	800c0ec <_calloc_r>
 800ba2c:	b160      	cbz	r0, 800ba48 <_Balloc+0x64>
 800ba2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba32:	e00e      	b.n	800ba52 <_Balloc+0x6e>
 800ba34:	2221      	movs	r2, #33	; 0x21
 800ba36:	2104      	movs	r1, #4
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 fb57 	bl	800c0ec <_calloc_r>
 800ba3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba40:	60f0      	str	r0, [r6, #12]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e4      	bne.n	800ba12 <_Balloc+0x2e>
 800ba48:	2000      	movs	r0, #0
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	6802      	ldr	r2, [r0, #0]
 800ba4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba52:	2300      	movs	r3, #0
 800ba54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba58:	e7f7      	b.n	800ba4a <_Balloc+0x66>
 800ba5a:	bf00      	nop
 800ba5c:	080106bf 	.word	0x080106bf
 800ba60:	08010742 	.word	0x08010742

0800ba64 <_Bfree>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba68:	4605      	mov	r5, r0
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	b976      	cbnz	r6, 800ba8c <_Bfree+0x28>
 800ba6e:	2010      	movs	r0, #16
 800ba70:	f7fe faee 	bl	800a050 <malloc>
 800ba74:	4602      	mov	r2, r0
 800ba76:	6268      	str	r0, [r5, #36]	; 0x24
 800ba78:	b920      	cbnz	r0, 800ba84 <_Bfree+0x20>
 800ba7a:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <_Bfree+0x3c>)
 800ba7c:	4809      	ldr	r0, [pc, #36]	; (800baa4 <_Bfree+0x40>)
 800ba7e:	218a      	movs	r1, #138	; 0x8a
 800ba80:	f001 f946 	bl	800cd10 <__assert_func>
 800ba84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba88:	6006      	str	r6, [r0, #0]
 800ba8a:	60c6      	str	r6, [r0, #12]
 800ba8c:	b13c      	cbz	r4, 800ba9e <_Bfree+0x3a>
 800ba8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba90:	6862      	ldr	r2, [r4, #4]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba98:	6021      	str	r1, [r4, #0]
 800ba9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	080106bf 	.word	0x080106bf
 800baa4:	08010742 	.word	0x08010742

0800baa8 <__multadd>:
 800baa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baac:	690d      	ldr	r5, [r1, #16]
 800baae:	4607      	mov	r7, r0
 800bab0:	460c      	mov	r4, r1
 800bab2:	461e      	mov	r6, r3
 800bab4:	f101 0c14 	add.w	ip, r1, #20
 800bab8:	2000      	movs	r0, #0
 800baba:	f8dc 3000 	ldr.w	r3, [ip]
 800babe:	b299      	uxth	r1, r3
 800bac0:	fb02 6101 	mla	r1, r2, r1, r6
 800bac4:	0c1e      	lsrs	r6, r3, #16
 800bac6:	0c0b      	lsrs	r3, r1, #16
 800bac8:	fb02 3306 	mla	r3, r2, r6, r3
 800bacc:	b289      	uxth	r1, r1
 800bace:	3001      	adds	r0, #1
 800bad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bad4:	4285      	cmp	r5, r0
 800bad6:	f84c 1b04 	str.w	r1, [ip], #4
 800bada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bade:	dcec      	bgt.n	800baba <__multadd+0x12>
 800bae0:	b30e      	cbz	r6, 800bb26 <__multadd+0x7e>
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dc19      	bgt.n	800bb1c <__multadd+0x74>
 800bae8:	6861      	ldr	r1, [r4, #4]
 800baea:	4638      	mov	r0, r7
 800baec:	3101      	adds	r1, #1
 800baee:	f7ff ff79 	bl	800b9e4 <_Balloc>
 800baf2:	4680      	mov	r8, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <__multadd+0x5a>
 800baf6:	4602      	mov	r2, r0
 800baf8:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <__multadd+0x84>)
 800bafa:	480d      	ldr	r0, [pc, #52]	; (800bb30 <__multadd+0x88>)
 800bafc:	21b5      	movs	r1, #181	; 0xb5
 800bafe:	f001 f907 	bl	800cd10 <__assert_func>
 800bb02:	6922      	ldr	r2, [r4, #16]
 800bb04:	3202      	adds	r2, #2
 800bb06:	f104 010c 	add.w	r1, r4, #12
 800bb0a:	0092      	lsls	r2, r2, #2
 800bb0c:	300c      	adds	r0, #12
 800bb0e:	f7ff ff4f 	bl	800b9b0 <memcpy>
 800bb12:	4621      	mov	r1, r4
 800bb14:	4638      	mov	r0, r7
 800bb16:	f7ff ffa5 	bl	800ba64 <_Bfree>
 800bb1a:	4644      	mov	r4, r8
 800bb1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb20:	3501      	adds	r5, #1
 800bb22:	615e      	str	r6, [r3, #20]
 800bb24:	6125      	str	r5, [r4, #16]
 800bb26:	4620      	mov	r0, r4
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	08010731 	.word	0x08010731
 800bb30:	08010742 	.word	0x08010742

0800bb34 <__hi0bits>:
 800bb34:	0c03      	lsrs	r3, r0, #16
 800bb36:	041b      	lsls	r3, r3, #16
 800bb38:	b9d3      	cbnz	r3, 800bb70 <__hi0bits+0x3c>
 800bb3a:	0400      	lsls	r0, r0, #16
 800bb3c:	2310      	movs	r3, #16
 800bb3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb42:	bf04      	itt	eq
 800bb44:	0200      	lsleq	r0, r0, #8
 800bb46:	3308      	addeq	r3, #8
 800bb48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb4c:	bf04      	itt	eq
 800bb4e:	0100      	lsleq	r0, r0, #4
 800bb50:	3304      	addeq	r3, #4
 800bb52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb56:	bf04      	itt	eq
 800bb58:	0080      	lsleq	r0, r0, #2
 800bb5a:	3302      	addeq	r3, #2
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	db05      	blt.n	800bb6c <__hi0bits+0x38>
 800bb60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb64:	f103 0301 	add.w	r3, r3, #1
 800bb68:	bf08      	it	eq
 800bb6a:	2320      	moveq	r3, #32
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	4770      	bx	lr
 800bb70:	2300      	movs	r3, #0
 800bb72:	e7e4      	b.n	800bb3e <__hi0bits+0xa>

0800bb74 <__lo0bits>:
 800bb74:	6803      	ldr	r3, [r0, #0]
 800bb76:	f013 0207 	ands.w	r2, r3, #7
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	d00b      	beq.n	800bb96 <__lo0bits+0x22>
 800bb7e:	07da      	lsls	r2, r3, #31
 800bb80:	d423      	bmi.n	800bbca <__lo0bits+0x56>
 800bb82:	0798      	lsls	r0, r3, #30
 800bb84:	bf49      	itett	mi
 800bb86:	085b      	lsrmi	r3, r3, #1
 800bb88:	089b      	lsrpl	r3, r3, #2
 800bb8a:	2001      	movmi	r0, #1
 800bb8c:	600b      	strmi	r3, [r1, #0]
 800bb8e:	bf5c      	itt	pl
 800bb90:	600b      	strpl	r3, [r1, #0]
 800bb92:	2002      	movpl	r0, #2
 800bb94:	4770      	bx	lr
 800bb96:	b298      	uxth	r0, r3
 800bb98:	b9a8      	cbnz	r0, 800bbc6 <__lo0bits+0x52>
 800bb9a:	0c1b      	lsrs	r3, r3, #16
 800bb9c:	2010      	movs	r0, #16
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	b90a      	cbnz	r2, 800bba6 <__lo0bits+0x32>
 800bba2:	3008      	adds	r0, #8
 800bba4:	0a1b      	lsrs	r3, r3, #8
 800bba6:	071a      	lsls	r2, r3, #28
 800bba8:	bf04      	itt	eq
 800bbaa:	091b      	lsreq	r3, r3, #4
 800bbac:	3004      	addeq	r0, #4
 800bbae:	079a      	lsls	r2, r3, #30
 800bbb0:	bf04      	itt	eq
 800bbb2:	089b      	lsreq	r3, r3, #2
 800bbb4:	3002      	addeq	r0, #2
 800bbb6:	07da      	lsls	r2, r3, #31
 800bbb8:	d403      	bmi.n	800bbc2 <__lo0bits+0x4e>
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	f100 0001 	add.w	r0, r0, #1
 800bbc0:	d005      	beq.n	800bbce <__lo0bits+0x5a>
 800bbc2:	600b      	str	r3, [r1, #0]
 800bbc4:	4770      	bx	lr
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	e7e9      	b.n	800bb9e <__lo0bits+0x2a>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	4770      	bx	lr
 800bbce:	2020      	movs	r0, #32
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <__i2b>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	2101      	movs	r1, #1
 800bbda:	f7ff ff03 	bl	800b9e4 <_Balloc>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	b928      	cbnz	r0, 800bbee <__i2b+0x1a>
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <__i2b+0x24>)
 800bbe4:	4805      	ldr	r0, [pc, #20]	; (800bbfc <__i2b+0x28>)
 800bbe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bbea:	f001 f891 	bl	800cd10 <__assert_func>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	6144      	str	r4, [r0, #20]
 800bbf2:	6103      	str	r3, [r0, #16]
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop
 800bbf8:	08010731 	.word	0x08010731
 800bbfc:	08010742 	.word	0x08010742

0800bc00 <__multiply>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	4691      	mov	r9, r2
 800bc06:	690a      	ldr	r2, [r1, #16]
 800bc08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	bfb8      	it	lt
 800bc10:	460b      	movlt	r3, r1
 800bc12:	460c      	mov	r4, r1
 800bc14:	bfbc      	itt	lt
 800bc16:	464c      	movlt	r4, r9
 800bc18:	4699      	movlt	r9, r3
 800bc1a:	6927      	ldr	r7, [r4, #16]
 800bc1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	6861      	ldr	r1, [r4, #4]
 800bc24:	eb07 060a 	add.w	r6, r7, sl
 800bc28:	42b3      	cmp	r3, r6
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	bfb8      	it	lt
 800bc2e:	3101      	addlt	r1, #1
 800bc30:	f7ff fed8 	bl	800b9e4 <_Balloc>
 800bc34:	b930      	cbnz	r0, 800bc44 <__multiply+0x44>
 800bc36:	4602      	mov	r2, r0
 800bc38:	4b44      	ldr	r3, [pc, #272]	; (800bd4c <__multiply+0x14c>)
 800bc3a:	4845      	ldr	r0, [pc, #276]	; (800bd50 <__multiply+0x150>)
 800bc3c:	f240 115d 	movw	r1, #349	; 0x15d
 800bc40:	f001 f866 	bl	800cd10 <__assert_func>
 800bc44:	f100 0514 	add.w	r5, r0, #20
 800bc48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4543      	cmp	r3, r8
 800bc52:	d321      	bcc.n	800bc98 <__multiply+0x98>
 800bc54:	f104 0314 	add.w	r3, r4, #20
 800bc58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc5c:	f109 0314 	add.w	r3, r9, #20
 800bc60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc64:	9202      	str	r2, [sp, #8]
 800bc66:	1b3a      	subs	r2, r7, r4
 800bc68:	3a15      	subs	r2, #21
 800bc6a:	f022 0203 	bic.w	r2, r2, #3
 800bc6e:	3204      	adds	r2, #4
 800bc70:	f104 0115 	add.w	r1, r4, #21
 800bc74:	428f      	cmp	r7, r1
 800bc76:	bf38      	it	cc
 800bc78:	2204      	movcc	r2, #4
 800bc7a:	9201      	str	r2, [sp, #4]
 800bc7c:	9a02      	ldr	r2, [sp, #8]
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d80c      	bhi.n	800bc9e <__multiply+0x9e>
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd03      	ble.n	800bc90 <__multiply+0x90>
 800bc88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d05a      	beq.n	800bd46 <__multiply+0x146>
 800bc90:	6106      	str	r6, [r0, #16]
 800bc92:	b005      	add	sp, #20
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	f843 2b04 	str.w	r2, [r3], #4
 800bc9c:	e7d8      	b.n	800bc50 <__multiply+0x50>
 800bc9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bca2:	f1ba 0f00 	cmp.w	sl, #0
 800bca6:	d024      	beq.n	800bcf2 <__multiply+0xf2>
 800bca8:	f104 0e14 	add.w	lr, r4, #20
 800bcac:	46a9      	mov	r9, r5
 800bcae:	f04f 0c00 	mov.w	ip, #0
 800bcb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bcb6:	f8d9 1000 	ldr.w	r1, [r9]
 800bcba:	fa1f fb82 	uxth.w	fp, r2
 800bcbe:	b289      	uxth	r1, r1
 800bcc0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bcc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bcc8:	f8d9 2000 	ldr.w	r2, [r9]
 800bccc:	4461      	add	r1, ip
 800bcce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcd2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bcd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcda:	b289      	uxth	r1, r1
 800bcdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bce0:	4577      	cmp	r7, lr
 800bce2:	f849 1b04 	str.w	r1, [r9], #4
 800bce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcea:	d8e2      	bhi.n	800bcb2 <__multiply+0xb2>
 800bcec:	9a01      	ldr	r2, [sp, #4]
 800bcee:	f845 c002 	str.w	ip, [r5, r2]
 800bcf2:	9a03      	ldr	r2, [sp, #12]
 800bcf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	f1b9 0f00 	cmp.w	r9, #0
 800bcfe:	d020      	beq.n	800bd42 <__multiply+0x142>
 800bd00:	6829      	ldr	r1, [r5, #0]
 800bd02:	f104 0c14 	add.w	ip, r4, #20
 800bd06:	46ae      	mov	lr, r5
 800bd08:	f04f 0a00 	mov.w	sl, #0
 800bd0c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd14:	fb09 220b 	mla	r2, r9, fp, r2
 800bd18:	4492      	add	sl, r2
 800bd1a:	b289      	uxth	r1, r1
 800bd1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bd20:	f84e 1b04 	str.w	r1, [lr], #4
 800bd24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd28:	f8be 1000 	ldrh.w	r1, [lr]
 800bd2c:	0c12      	lsrs	r2, r2, #16
 800bd2e:	fb09 1102 	mla	r1, r9, r2, r1
 800bd32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bd36:	4567      	cmp	r7, ip
 800bd38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd3c:	d8e6      	bhi.n	800bd0c <__multiply+0x10c>
 800bd3e:	9a01      	ldr	r2, [sp, #4]
 800bd40:	50a9      	str	r1, [r5, r2]
 800bd42:	3504      	adds	r5, #4
 800bd44:	e79a      	b.n	800bc7c <__multiply+0x7c>
 800bd46:	3e01      	subs	r6, #1
 800bd48:	e79c      	b.n	800bc84 <__multiply+0x84>
 800bd4a:	bf00      	nop
 800bd4c:	08010731 	.word	0x08010731
 800bd50:	08010742 	.word	0x08010742

0800bd54 <__pow5mult>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	4615      	mov	r5, r2
 800bd5a:	f012 0203 	ands.w	r2, r2, #3
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	d007      	beq.n	800bd74 <__pow5mult+0x20>
 800bd64:	4c25      	ldr	r4, [pc, #148]	; (800bdfc <__pow5mult+0xa8>)
 800bd66:	3a01      	subs	r2, #1
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd6e:	f7ff fe9b 	bl	800baa8 <__multadd>
 800bd72:	4607      	mov	r7, r0
 800bd74:	10ad      	asrs	r5, r5, #2
 800bd76:	d03d      	beq.n	800bdf4 <__pow5mult+0xa0>
 800bd78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd7a:	b97c      	cbnz	r4, 800bd9c <__pow5mult+0x48>
 800bd7c:	2010      	movs	r0, #16
 800bd7e:	f7fe f967 	bl	800a050 <malloc>
 800bd82:	4602      	mov	r2, r0
 800bd84:	6270      	str	r0, [r6, #36]	; 0x24
 800bd86:	b928      	cbnz	r0, 800bd94 <__pow5mult+0x40>
 800bd88:	4b1d      	ldr	r3, [pc, #116]	; (800be00 <__pow5mult+0xac>)
 800bd8a:	481e      	ldr	r0, [pc, #120]	; (800be04 <__pow5mult+0xb0>)
 800bd8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd90:	f000 ffbe 	bl	800cd10 <__assert_func>
 800bd94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd98:	6004      	str	r4, [r0, #0]
 800bd9a:	60c4      	str	r4, [r0, #12]
 800bd9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bda0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bda4:	b94c      	cbnz	r4, 800bdba <__pow5mult+0x66>
 800bda6:	f240 2171 	movw	r1, #625	; 0x271
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ff12 	bl	800bbd4 <__i2b>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	6003      	str	r3, [r0, #0]
 800bdba:	f04f 0900 	mov.w	r9, #0
 800bdbe:	07eb      	lsls	r3, r5, #31
 800bdc0:	d50a      	bpl.n	800bdd8 <__pow5mult+0x84>
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7ff ff1a 	bl	800bc00 <__multiply>
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f7ff fe47 	bl	800ba64 <_Bfree>
 800bdd6:	4647      	mov	r7, r8
 800bdd8:	106d      	asrs	r5, r5, #1
 800bdda:	d00b      	beq.n	800bdf4 <__pow5mult+0xa0>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	b938      	cbnz	r0, 800bdf0 <__pow5mult+0x9c>
 800bde0:	4622      	mov	r2, r4
 800bde2:	4621      	mov	r1, r4
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff ff0b 	bl	800bc00 <__multiply>
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	f8c0 9000 	str.w	r9, [r0]
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	e7e4      	b.n	800bdbe <__pow5mult+0x6a>
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfa:	bf00      	nop
 800bdfc:	08010890 	.word	0x08010890
 800be00:	080106bf 	.word	0x080106bf
 800be04:	08010742 	.word	0x08010742

0800be08 <__lshift>:
 800be08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be0c:	460c      	mov	r4, r1
 800be0e:	6849      	ldr	r1, [r1, #4]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	4607      	mov	r7, r0
 800be1a:	4691      	mov	r9, r2
 800be1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be20:	f108 0601 	add.w	r6, r8, #1
 800be24:	42b3      	cmp	r3, r6
 800be26:	db0b      	blt.n	800be40 <__lshift+0x38>
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff fddb 	bl	800b9e4 <_Balloc>
 800be2e:	4605      	mov	r5, r0
 800be30:	b948      	cbnz	r0, 800be46 <__lshift+0x3e>
 800be32:	4602      	mov	r2, r0
 800be34:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <__lshift+0xd8>)
 800be36:	482b      	ldr	r0, [pc, #172]	; (800bee4 <__lshift+0xdc>)
 800be38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be3c:	f000 ff68 	bl	800cd10 <__assert_func>
 800be40:	3101      	adds	r1, #1
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	e7ee      	b.n	800be24 <__lshift+0x1c>
 800be46:	2300      	movs	r3, #0
 800be48:	f100 0114 	add.w	r1, r0, #20
 800be4c:	f100 0210 	add.w	r2, r0, #16
 800be50:	4618      	mov	r0, r3
 800be52:	4553      	cmp	r3, sl
 800be54:	db37      	blt.n	800bec6 <__lshift+0xbe>
 800be56:	6920      	ldr	r0, [r4, #16]
 800be58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be5c:	f104 0314 	add.w	r3, r4, #20
 800be60:	f019 091f 	ands.w	r9, r9, #31
 800be64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be6c:	d02f      	beq.n	800bece <__lshift+0xc6>
 800be6e:	f1c9 0e20 	rsb	lr, r9, #32
 800be72:	468a      	mov	sl, r1
 800be74:	f04f 0c00 	mov.w	ip, #0
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	fa02 f209 	lsl.w	r2, r2, r9
 800be7e:	ea42 020c 	orr.w	r2, r2, ip
 800be82:	f84a 2b04 	str.w	r2, [sl], #4
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	4298      	cmp	r0, r3
 800be8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be90:	d8f2      	bhi.n	800be78 <__lshift+0x70>
 800be92:	1b03      	subs	r3, r0, r4
 800be94:	3b15      	subs	r3, #21
 800be96:	f023 0303 	bic.w	r3, r3, #3
 800be9a:	3304      	adds	r3, #4
 800be9c:	f104 0215 	add.w	r2, r4, #21
 800bea0:	4290      	cmp	r0, r2
 800bea2:	bf38      	it	cc
 800bea4:	2304      	movcc	r3, #4
 800bea6:	f841 c003 	str.w	ip, [r1, r3]
 800beaa:	f1bc 0f00 	cmp.w	ip, #0
 800beae:	d001      	beq.n	800beb4 <__lshift+0xac>
 800beb0:	f108 0602 	add.w	r6, r8, #2
 800beb4:	3e01      	subs	r6, #1
 800beb6:	4638      	mov	r0, r7
 800beb8:	612e      	str	r6, [r5, #16]
 800beba:	4621      	mov	r1, r4
 800bebc:	f7ff fdd2 	bl	800ba64 <_Bfree>
 800bec0:	4628      	mov	r0, r5
 800bec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec6:	f842 0f04 	str.w	r0, [r2, #4]!
 800beca:	3301      	adds	r3, #1
 800becc:	e7c1      	b.n	800be52 <__lshift+0x4a>
 800bece:	3904      	subs	r1, #4
 800bed0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bed8:	4298      	cmp	r0, r3
 800beda:	d8f9      	bhi.n	800bed0 <__lshift+0xc8>
 800bedc:	e7ea      	b.n	800beb4 <__lshift+0xac>
 800bede:	bf00      	nop
 800bee0:	08010731 	.word	0x08010731
 800bee4:	08010742 	.word	0x08010742

0800bee8 <__mcmp>:
 800bee8:	b530      	push	{r4, r5, lr}
 800beea:	6902      	ldr	r2, [r0, #16]
 800beec:	690c      	ldr	r4, [r1, #16]
 800beee:	1b12      	subs	r2, r2, r4
 800bef0:	d10e      	bne.n	800bf10 <__mcmp+0x28>
 800bef2:	f100 0314 	add.w	r3, r0, #20
 800bef6:	3114      	adds	r1, #20
 800bef8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800befc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf08:	42a5      	cmp	r5, r4
 800bf0a:	d003      	beq.n	800bf14 <__mcmp+0x2c>
 800bf0c:	d305      	bcc.n	800bf1a <__mcmp+0x32>
 800bf0e:	2201      	movs	r2, #1
 800bf10:	4610      	mov	r0, r2
 800bf12:	bd30      	pop	{r4, r5, pc}
 800bf14:	4283      	cmp	r3, r0
 800bf16:	d3f3      	bcc.n	800bf00 <__mcmp+0x18>
 800bf18:	e7fa      	b.n	800bf10 <__mcmp+0x28>
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1e:	e7f7      	b.n	800bf10 <__mcmp+0x28>

0800bf20 <__mdiff>:
 800bf20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	4606      	mov	r6, r0
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4690      	mov	r8, r2
 800bf2e:	f7ff ffdb 	bl	800bee8 <__mcmp>
 800bf32:	1e05      	subs	r5, r0, #0
 800bf34:	d110      	bne.n	800bf58 <__mdiff+0x38>
 800bf36:	4629      	mov	r1, r5
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff fd53 	bl	800b9e4 <_Balloc>
 800bf3e:	b930      	cbnz	r0, 800bf4e <__mdiff+0x2e>
 800bf40:	4b3a      	ldr	r3, [pc, #232]	; (800c02c <__mdiff+0x10c>)
 800bf42:	4602      	mov	r2, r0
 800bf44:	f240 2132 	movw	r1, #562	; 0x232
 800bf48:	4839      	ldr	r0, [pc, #228]	; (800c030 <__mdiff+0x110>)
 800bf4a:	f000 fee1 	bl	800cd10 <__assert_func>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf58:	bfa4      	itt	ge
 800bf5a:	4643      	movge	r3, r8
 800bf5c:	46a0      	movge	r8, r4
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf64:	bfa6      	itte	ge
 800bf66:	461c      	movge	r4, r3
 800bf68:	2500      	movge	r5, #0
 800bf6a:	2501      	movlt	r5, #1
 800bf6c:	f7ff fd3a 	bl	800b9e4 <_Balloc>
 800bf70:	b920      	cbnz	r0, 800bf7c <__mdiff+0x5c>
 800bf72:	4b2e      	ldr	r3, [pc, #184]	; (800c02c <__mdiff+0x10c>)
 800bf74:	4602      	mov	r2, r0
 800bf76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf7a:	e7e5      	b.n	800bf48 <__mdiff+0x28>
 800bf7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf80:	6926      	ldr	r6, [r4, #16]
 800bf82:	60c5      	str	r5, [r0, #12]
 800bf84:	f104 0914 	add.w	r9, r4, #20
 800bf88:	f108 0514 	add.w	r5, r8, #20
 800bf8c:	f100 0e14 	add.w	lr, r0, #20
 800bf90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf98:	f108 0210 	add.w	r2, r8, #16
 800bf9c:	46f2      	mov	sl, lr
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfa8:	fa1f f883 	uxth.w	r8, r3
 800bfac:	fa11 f18b 	uxtah	r1, r1, fp
 800bfb0:	0c1b      	lsrs	r3, r3, #16
 800bfb2:	eba1 0808 	sub.w	r8, r1, r8
 800bfb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfbe:	fa1f f888 	uxth.w	r8, r8
 800bfc2:	1419      	asrs	r1, r3, #16
 800bfc4:	454e      	cmp	r6, r9
 800bfc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bfca:	f84a 3b04 	str.w	r3, [sl], #4
 800bfce:	d8e7      	bhi.n	800bfa0 <__mdiff+0x80>
 800bfd0:	1b33      	subs	r3, r6, r4
 800bfd2:	3b15      	subs	r3, #21
 800bfd4:	f023 0303 	bic.w	r3, r3, #3
 800bfd8:	3304      	adds	r3, #4
 800bfda:	3415      	adds	r4, #21
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	bf38      	it	cc
 800bfe0:	2304      	movcc	r3, #4
 800bfe2:	441d      	add	r5, r3
 800bfe4:	4473      	add	r3, lr
 800bfe6:	469e      	mov	lr, r3
 800bfe8:	462e      	mov	r6, r5
 800bfea:	4566      	cmp	r6, ip
 800bfec:	d30e      	bcc.n	800c00c <__mdiff+0xec>
 800bfee:	f10c 0203 	add.w	r2, ip, #3
 800bff2:	1b52      	subs	r2, r2, r5
 800bff4:	f022 0203 	bic.w	r2, r2, #3
 800bff8:	3d03      	subs	r5, #3
 800bffa:	45ac      	cmp	ip, r5
 800bffc:	bf38      	it	cc
 800bffe:	2200      	movcc	r2, #0
 800c000:	441a      	add	r2, r3
 800c002:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c006:	b17b      	cbz	r3, 800c028 <__mdiff+0x108>
 800c008:	6107      	str	r7, [r0, #16]
 800c00a:	e7a3      	b.n	800bf54 <__mdiff+0x34>
 800c00c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c010:	fa11 f288 	uxtah	r2, r1, r8
 800c014:	1414      	asrs	r4, r2, #16
 800c016:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c01a:	b292      	uxth	r2, r2
 800c01c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c020:	f84e 2b04 	str.w	r2, [lr], #4
 800c024:	1421      	asrs	r1, r4, #16
 800c026:	e7e0      	b.n	800bfea <__mdiff+0xca>
 800c028:	3f01      	subs	r7, #1
 800c02a:	e7ea      	b.n	800c002 <__mdiff+0xe2>
 800c02c:	08010731 	.word	0x08010731
 800c030:	08010742 	.word	0x08010742

0800c034 <__d2b>:
 800c034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c038:	4689      	mov	r9, r1
 800c03a:	2101      	movs	r1, #1
 800c03c:	ec57 6b10 	vmov	r6, r7, d0
 800c040:	4690      	mov	r8, r2
 800c042:	f7ff fccf 	bl	800b9e4 <_Balloc>
 800c046:	4604      	mov	r4, r0
 800c048:	b930      	cbnz	r0, 800c058 <__d2b+0x24>
 800c04a:	4602      	mov	r2, r0
 800c04c:	4b25      	ldr	r3, [pc, #148]	; (800c0e4 <__d2b+0xb0>)
 800c04e:	4826      	ldr	r0, [pc, #152]	; (800c0e8 <__d2b+0xb4>)
 800c050:	f240 310a 	movw	r1, #778	; 0x30a
 800c054:	f000 fe5c 	bl	800cd10 <__assert_func>
 800c058:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c05c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c060:	bb35      	cbnz	r5, 800c0b0 <__d2b+0x7c>
 800c062:	2e00      	cmp	r6, #0
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	d028      	beq.n	800c0ba <__d2b+0x86>
 800c068:	4668      	mov	r0, sp
 800c06a:	9600      	str	r6, [sp, #0]
 800c06c:	f7ff fd82 	bl	800bb74 <__lo0bits>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	b300      	cbz	r0, 800c0b6 <__d2b+0x82>
 800c074:	9a01      	ldr	r2, [sp, #4]
 800c076:	f1c0 0320 	rsb	r3, r0, #32
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	430b      	orrs	r3, r1
 800c080:	40c2      	lsrs	r2, r0
 800c082:	6163      	str	r3, [r4, #20]
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	61a3      	str	r3, [r4, #24]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf14      	ite	ne
 800c08e:	2202      	movne	r2, #2
 800c090:	2201      	moveq	r2, #1
 800c092:	6122      	str	r2, [r4, #16]
 800c094:	b1d5      	cbz	r5, 800c0cc <__d2b+0x98>
 800c096:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c09a:	4405      	add	r5, r0
 800c09c:	f8c9 5000 	str.w	r5, [r9]
 800c0a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0a4:	f8c8 0000 	str.w	r0, [r8]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	b003      	add	sp, #12
 800c0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0b4:	e7d5      	b.n	800c062 <__d2b+0x2e>
 800c0b6:	6161      	str	r1, [r4, #20]
 800c0b8:	e7e5      	b.n	800c086 <__d2b+0x52>
 800c0ba:	a801      	add	r0, sp, #4
 800c0bc:	f7ff fd5a 	bl	800bb74 <__lo0bits>
 800c0c0:	9b01      	ldr	r3, [sp, #4]
 800c0c2:	6163      	str	r3, [r4, #20]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	6122      	str	r2, [r4, #16]
 800c0c8:	3020      	adds	r0, #32
 800c0ca:	e7e3      	b.n	800c094 <__d2b+0x60>
 800c0cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0d4:	f8c9 0000 	str.w	r0, [r9]
 800c0d8:	6918      	ldr	r0, [r3, #16]
 800c0da:	f7ff fd2b 	bl	800bb34 <__hi0bits>
 800c0de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0e2:	e7df      	b.n	800c0a4 <__d2b+0x70>
 800c0e4:	08010731 	.word	0x08010731
 800c0e8:	08010742 	.word	0x08010742

0800c0ec <_calloc_r>:
 800c0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ee:	fba1 2402 	umull	r2, r4, r1, r2
 800c0f2:	b94c      	cbnz	r4, 800c108 <_calloc_r+0x1c>
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	9201      	str	r2, [sp, #4]
 800c0f8:	f7fe f826 	bl	800a148 <_malloc_r>
 800c0fc:	9a01      	ldr	r2, [sp, #4]
 800c0fe:	4605      	mov	r5, r0
 800c100:	b930      	cbnz	r0, 800c110 <_calloc_r+0x24>
 800c102:	4628      	mov	r0, r5
 800c104:	b003      	add	sp, #12
 800c106:	bd30      	pop	{r4, r5, pc}
 800c108:	220c      	movs	r2, #12
 800c10a:	6002      	str	r2, [r0, #0]
 800c10c:	2500      	movs	r5, #0
 800c10e:	e7f8      	b.n	800c102 <_calloc_r+0x16>
 800c110:	4621      	mov	r1, r4
 800c112:	f7fd ffa5 	bl	800a060 <memset>
 800c116:	e7f4      	b.n	800c102 <_calloc_r+0x16>

0800c118 <__ssputs_r>:
 800c118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c11c:	688e      	ldr	r6, [r1, #8]
 800c11e:	429e      	cmp	r6, r3
 800c120:	4682      	mov	sl, r0
 800c122:	460c      	mov	r4, r1
 800c124:	4690      	mov	r8, r2
 800c126:	461f      	mov	r7, r3
 800c128:	d838      	bhi.n	800c19c <__ssputs_r+0x84>
 800c12a:	898a      	ldrh	r2, [r1, #12]
 800c12c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c130:	d032      	beq.n	800c198 <__ssputs_r+0x80>
 800c132:	6825      	ldr	r5, [r4, #0]
 800c134:	6909      	ldr	r1, [r1, #16]
 800c136:	eba5 0901 	sub.w	r9, r5, r1
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c144:	3301      	adds	r3, #1
 800c146:	444b      	add	r3, r9
 800c148:	106d      	asrs	r5, r5, #1
 800c14a:	429d      	cmp	r5, r3
 800c14c:	bf38      	it	cc
 800c14e:	461d      	movcc	r5, r3
 800c150:	0553      	lsls	r3, r2, #21
 800c152:	d531      	bpl.n	800c1b8 <__ssputs_r+0xa0>
 800c154:	4629      	mov	r1, r5
 800c156:	f7fd fff7 	bl	800a148 <_malloc_r>
 800c15a:	4606      	mov	r6, r0
 800c15c:	b950      	cbnz	r0, 800c174 <__ssputs_r+0x5c>
 800c15e:	230c      	movs	r3, #12
 800c160:	f8ca 3000 	str.w	r3, [sl]
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	464a      	mov	r2, r9
 800c178:	f7ff fc1a 	bl	800b9b0 <memcpy>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	6126      	str	r6, [r4, #16]
 800c18a:	6165      	str	r5, [r4, #20]
 800c18c:	444e      	add	r6, r9
 800c18e:	eba5 0509 	sub.w	r5, r5, r9
 800c192:	6026      	str	r6, [r4, #0]
 800c194:	60a5      	str	r5, [r4, #8]
 800c196:	463e      	mov	r6, r7
 800c198:	42be      	cmp	r6, r7
 800c19a:	d900      	bls.n	800c19e <__ssputs_r+0x86>
 800c19c:	463e      	mov	r6, r7
 800c19e:	6820      	ldr	r0, [r4, #0]
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	f000 ffb0 	bl	800d108 <memmove>
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	1b9b      	subs	r3, r3, r6
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	4433      	add	r3, r6
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e7db      	b.n	800c170 <__ssputs_r+0x58>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	f000 ffbf 	bl	800d13c <_realloc_r>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d1e1      	bne.n	800c188 <__ssputs_r+0x70>
 800c1c4:	6921      	ldr	r1, [r4, #16]
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f7fd ff52 	bl	800a070 <_free_r>
 800c1cc:	e7c7      	b.n	800c15e <__ssputs_r+0x46>
	...

0800c1d0 <_svfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4698      	mov	r8, r3
 800c1d6:	898b      	ldrh	r3, [r1, #12]
 800c1d8:	061b      	lsls	r3, r3, #24
 800c1da:	b09d      	sub	sp, #116	; 0x74
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	d50e      	bpl.n	800c202 <_svfiprintf_r+0x32>
 800c1e4:	690b      	ldr	r3, [r1, #16]
 800c1e6:	b963      	cbnz	r3, 800c202 <_svfiprintf_r+0x32>
 800c1e8:	2140      	movs	r1, #64	; 0x40
 800c1ea:	f7fd ffad 	bl	800a148 <_malloc_r>
 800c1ee:	6028      	str	r0, [r5, #0]
 800c1f0:	6128      	str	r0, [r5, #16]
 800c1f2:	b920      	cbnz	r0, 800c1fe <_svfiprintf_r+0x2e>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e0d1      	b.n	800c3a2 <_svfiprintf_r+0x1d2>
 800c1fe:	2340      	movs	r3, #64	; 0x40
 800c200:	616b      	str	r3, [r5, #20]
 800c202:	2300      	movs	r3, #0
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	2320      	movs	r3, #32
 800c208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c210:	2330      	movs	r3, #48	; 0x30
 800c212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3bc <_svfiprintf_r+0x1ec>
 800c216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c21a:	f04f 0901 	mov.w	r9, #1
 800c21e:	4623      	mov	r3, r4
 800c220:	469a      	mov	sl, r3
 800c222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c226:	b10a      	cbz	r2, 800c22c <_svfiprintf_r+0x5c>
 800c228:	2a25      	cmp	r2, #37	; 0x25
 800c22a:	d1f9      	bne.n	800c220 <_svfiprintf_r+0x50>
 800c22c:	ebba 0b04 	subs.w	fp, sl, r4
 800c230:	d00b      	beq.n	800c24a <_svfiprintf_r+0x7a>
 800c232:	465b      	mov	r3, fp
 800c234:	4622      	mov	r2, r4
 800c236:	4629      	mov	r1, r5
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff ff6d 	bl	800c118 <__ssputs_r>
 800c23e:	3001      	adds	r0, #1
 800c240:	f000 80aa 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c246:	445a      	add	r2, fp
 800c248:	9209      	str	r2, [sp, #36]	; 0x24
 800c24a:	f89a 3000 	ldrb.w	r3, [sl]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80a2 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c254:	2300      	movs	r3, #0
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c25e:	f10a 0a01 	add.w	sl, sl, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	9307      	str	r3, [sp, #28]
 800c266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c26a:	931a      	str	r3, [sp, #104]	; 0x68
 800c26c:	4654      	mov	r4, sl
 800c26e:	2205      	movs	r2, #5
 800c270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c274:	4851      	ldr	r0, [pc, #324]	; (800c3bc <_svfiprintf_r+0x1ec>)
 800c276:	f7f3 ffcb 	bl	8000210 <memchr>
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	b9d8      	cbnz	r0, 800c2b6 <_svfiprintf_r+0xe6>
 800c27e:	06d0      	lsls	r0, r2, #27
 800c280:	bf44      	itt	mi
 800c282:	2320      	movmi	r3, #32
 800c284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c288:	0711      	lsls	r1, r2, #28
 800c28a:	bf44      	itt	mi
 800c28c:	232b      	movmi	r3, #43	; 0x2b
 800c28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c292:	f89a 3000 	ldrb.w	r3, [sl]
 800c296:	2b2a      	cmp	r3, #42	; 0x2a
 800c298:	d015      	beq.n	800c2c6 <_svfiprintf_r+0xf6>
 800c29a:	9a07      	ldr	r2, [sp, #28]
 800c29c:	4654      	mov	r4, sl
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f04f 0c0a 	mov.w	ip, #10
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2aa:	3b30      	subs	r3, #48	; 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d94e      	bls.n	800c34e <_svfiprintf_r+0x17e>
 800c2b0:	b1b0      	cbz	r0, 800c2e0 <_svfiprintf_r+0x110>
 800c2b2:	9207      	str	r2, [sp, #28]
 800c2b4:	e014      	b.n	800c2e0 <_svfiprintf_r+0x110>
 800c2b6:	eba0 0308 	sub.w	r3, r0, r8
 800c2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	46a2      	mov	sl, r4
 800c2c4:	e7d2      	b.n	800c26c <_svfiprintf_r+0x9c>
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfbb      	ittet	lt
 800c2d2:	425b      	neglt	r3, r3
 800c2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d8:	9307      	strge	r3, [sp, #28]
 800c2da:	9307      	strlt	r3, [sp, #28]
 800c2dc:	bfb8      	it	lt
 800c2de:	9204      	strlt	r2, [sp, #16]
 800c2e0:	7823      	ldrb	r3, [r4, #0]
 800c2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2e4:	d10c      	bne.n	800c300 <_svfiprintf_r+0x130>
 800c2e6:	7863      	ldrb	r3, [r4, #1]
 800c2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ea:	d135      	bne.n	800c358 <_svfiprintf_r+0x188>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	9203      	str	r2, [sp, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bfb8      	it	lt
 800c2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2fc:	3402      	adds	r4, #2
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3cc <_svfiprintf_r+0x1fc>
 800c304:	7821      	ldrb	r1, [r4, #0]
 800c306:	2203      	movs	r2, #3
 800c308:	4650      	mov	r0, sl
 800c30a:	f7f3 ff81 	bl	8000210 <memchr>
 800c30e:	b140      	cbz	r0, 800c322 <_svfiprintf_r+0x152>
 800c310:	2340      	movs	r3, #64	; 0x40
 800c312:	eba0 000a 	sub.w	r0, r0, sl
 800c316:	fa03 f000 	lsl.w	r0, r3, r0
 800c31a:	9b04      	ldr	r3, [sp, #16]
 800c31c:	4303      	orrs	r3, r0
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4826      	ldr	r0, [pc, #152]	; (800c3c0 <_svfiprintf_r+0x1f0>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff6f 	bl	8000210 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d038      	beq.n	800c3a8 <_svfiprintf_r+0x1d8>
 800c336:	4b23      	ldr	r3, [pc, #140]	; (800c3c4 <_svfiprintf_r+0x1f4>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_svfiprintf_r+0x1b2>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	4433      	add	r3, r6
 800c34a:	9309      	str	r3, [sp, #36]	; 0x24
 800c34c:	e767      	b.n	800c21e <_svfiprintf_r+0x4e>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a5      	b.n	800c2a4 <_svfiprintf_r+0xd4>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	; 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_svfiprintf_r+0x1a8>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c5      	beq.n	800c300 <_svfiprintf_r+0x130>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c3      	b.n	800c300 <_svfiprintf_r+0x130>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_svfiprintf_r+0x194>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7fd ffef 	bl	800a370 <_printf_float>
 800c392:	1c42      	adds	r2, r0, #1
 800c394:	4606      	mov	r6, r0
 800c396:	d1d6      	bne.n	800c346 <_svfiprintf_r+0x176>
 800c398:	89ab      	ldrh	r3, [r5, #12]
 800c39a:	065b      	lsls	r3, r3, #25
 800c39c:	f53f af2c 	bmi.w	800c1f8 <_svfiprintf_r+0x28>
 800c3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3a2:	b01d      	add	sp, #116	; 0x74
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	ab03      	add	r3, sp, #12
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7fe fa80 	bl	800a8b8 <_printf_i>
 800c3b8:	e7eb      	b.n	800c392 <_svfiprintf_r+0x1c2>
 800c3ba:	bf00      	nop
 800c3bc:	0801089c 	.word	0x0801089c
 800c3c0:	080108a6 	.word	0x080108a6
 800c3c4:	0800a371 	.word	0x0800a371
 800c3c8:	0800c119 	.word	0x0800c119
 800c3cc:	080108a2 	.word	0x080108a2

0800c3d0 <_sungetc_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	1c4b      	adds	r3, r1, #1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	d103      	bne.n	800c3e0 <_sungetc_r+0x10>
 800c3d8:	f04f 35ff 	mov.w	r5, #4294967295
 800c3dc:	4628      	mov	r0, r5
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	8993      	ldrh	r3, [r2, #12]
 800c3e2:	f023 0320 	bic.w	r3, r3, #32
 800c3e6:	8193      	strh	r3, [r2, #12]
 800c3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3ea:	6852      	ldr	r2, [r2, #4]
 800c3ec:	b2cd      	uxtb	r5, r1
 800c3ee:	b18b      	cbz	r3, 800c414 <_sungetc_r+0x44>
 800c3f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	dd08      	ble.n	800c408 <_sungetc_r+0x38>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	1e5a      	subs	r2, r3, #1
 800c3fa:	6022      	str	r2, [r4, #0]
 800c3fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	3301      	adds	r3, #1
 800c404:	6063      	str	r3, [r4, #4]
 800c406:	e7e9      	b.n	800c3dc <_sungetc_r+0xc>
 800c408:	4621      	mov	r1, r4
 800c40a:	f000 fc47 	bl	800cc9c <__submore>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0f1      	beq.n	800c3f6 <_sungetc_r+0x26>
 800c412:	e7e1      	b.n	800c3d8 <_sungetc_r+0x8>
 800c414:	6921      	ldr	r1, [r4, #16]
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	b151      	cbz	r1, 800c430 <_sungetc_r+0x60>
 800c41a:	4299      	cmp	r1, r3
 800c41c:	d208      	bcs.n	800c430 <_sungetc_r+0x60>
 800c41e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c422:	42a9      	cmp	r1, r5
 800c424:	d104      	bne.n	800c430 <_sungetc_r+0x60>
 800c426:	3b01      	subs	r3, #1
 800c428:	3201      	adds	r2, #1
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	6062      	str	r2, [r4, #4]
 800c42e:	e7d5      	b.n	800c3dc <_sungetc_r+0xc>
 800c430:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c438:	6363      	str	r3, [r4, #52]	; 0x34
 800c43a:	2303      	movs	r3, #3
 800c43c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c43e:	4623      	mov	r3, r4
 800c440:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	2301      	movs	r3, #1
 800c448:	e7dc      	b.n	800c404 <_sungetc_r+0x34>

0800c44a <__ssrefill_r>:
 800c44a:	b510      	push	{r4, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c450:	b169      	cbz	r1, 800c46e <__ssrefill_r+0x24>
 800c452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c456:	4299      	cmp	r1, r3
 800c458:	d001      	beq.n	800c45e <__ssrefill_r+0x14>
 800c45a:	f7fd fe09 	bl	800a070 <_free_r>
 800c45e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	2000      	movs	r0, #0
 800c464:	6360      	str	r0, [r4, #52]	; 0x34
 800c466:	b113      	cbz	r3, 800c46e <__ssrefill_r+0x24>
 800c468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c46a:	6023      	str	r3, [r4, #0]
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	6923      	ldr	r3, [r4, #16]
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	2300      	movs	r3, #0
 800c474:	6063      	str	r3, [r4, #4]
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f043 0320 	orr.w	r3, r3, #32
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295
 800c482:	e7f3      	b.n	800c46c <__ssrefill_r+0x22>

0800c484 <__ssvfiscanf_r>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c48e:	2100      	movs	r1, #0
 800c490:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c494:	49a6      	ldr	r1, [pc, #664]	; (800c730 <__ssvfiscanf_r+0x2ac>)
 800c496:	91a0      	str	r1, [sp, #640]	; 0x280
 800c498:	f10d 0804 	add.w	r8, sp, #4
 800c49c:	49a5      	ldr	r1, [pc, #660]	; (800c734 <__ssvfiscanf_r+0x2b0>)
 800c49e:	4fa6      	ldr	r7, [pc, #664]	; (800c738 <__ssvfiscanf_r+0x2b4>)
 800c4a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c73c <__ssvfiscanf_r+0x2b8>
 800c4a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	7813      	ldrb	r3, [r2, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 815a 	beq.w	800c76a <__ssvfiscanf_r+0x2e6>
 800c4b6:	5dd9      	ldrb	r1, [r3, r7]
 800c4b8:	f011 0108 	ands.w	r1, r1, #8
 800c4bc:	f102 0501 	add.w	r5, r2, #1
 800c4c0:	d019      	beq.n	800c4f6 <__ssvfiscanf_r+0x72>
 800c4c2:	6863      	ldr	r3, [r4, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	dd0f      	ble.n	800c4e8 <__ssvfiscanf_r+0x64>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	781a      	ldrb	r2, [r3, #0]
 800c4cc:	5cba      	ldrb	r2, [r7, r2]
 800c4ce:	0712      	lsls	r2, r2, #28
 800c4d0:	d401      	bmi.n	800c4d6 <__ssvfiscanf_r+0x52>
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	e7eb      	b.n	800c4ae <__ssvfiscanf_r+0x2a>
 800c4d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c4d8:	3201      	adds	r2, #1
 800c4da:	9245      	str	r2, [sp, #276]	; 0x114
 800c4dc:	6862      	ldr	r2, [r4, #4]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	3a01      	subs	r2, #1
 800c4e2:	6062      	str	r2, [r4, #4]
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	e7ec      	b.n	800c4c2 <__ssvfiscanf_r+0x3e>
 800c4e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4798      	blx	r3
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d0e9      	beq.n	800c4c8 <__ssvfiscanf_r+0x44>
 800c4f4:	e7ed      	b.n	800c4d2 <__ssvfiscanf_r+0x4e>
 800c4f6:	2b25      	cmp	r3, #37	; 0x25
 800c4f8:	d012      	beq.n	800c520 <__ssvfiscanf_r+0x9c>
 800c4fa:	469a      	mov	sl, r3
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f340 8091 	ble.w	800c626 <__ssvfiscanf_r+0x1a2>
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	7813      	ldrb	r3, [r2, #0]
 800c508:	4553      	cmp	r3, sl
 800c50a:	f040 812e 	bne.w	800c76a <__ssvfiscanf_r+0x2e6>
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	3b01      	subs	r3, #1
 800c512:	6063      	str	r3, [r4, #4]
 800c514:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c516:	3201      	adds	r2, #1
 800c518:	3301      	adds	r3, #1
 800c51a:	6022      	str	r2, [r4, #0]
 800c51c:	9345      	str	r3, [sp, #276]	; 0x114
 800c51e:	e7d8      	b.n	800c4d2 <__ssvfiscanf_r+0x4e>
 800c520:	9141      	str	r1, [sp, #260]	; 0x104
 800c522:	9143      	str	r1, [sp, #268]	; 0x10c
 800c524:	7853      	ldrb	r3, [r2, #1]
 800c526:	2b2a      	cmp	r3, #42	; 0x2a
 800c528:	bf02      	ittt	eq
 800c52a:	2310      	moveq	r3, #16
 800c52c:	1c95      	addeq	r5, r2, #2
 800c52e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c530:	220a      	movs	r2, #10
 800c532:	46aa      	mov	sl, r5
 800c534:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c538:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c53c:	2b09      	cmp	r3, #9
 800c53e:	d91d      	bls.n	800c57c <__ssvfiscanf_r+0xf8>
 800c540:	487e      	ldr	r0, [pc, #504]	; (800c73c <__ssvfiscanf_r+0x2b8>)
 800c542:	2203      	movs	r2, #3
 800c544:	f7f3 fe64 	bl	8000210 <memchr>
 800c548:	b140      	cbz	r0, 800c55c <__ssvfiscanf_r+0xd8>
 800c54a:	2301      	movs	r3, #1
 800c54c:	eba0 0009 	sub.w	r0, r0, r9
 800c550:	fa03 f000 	lsl.w	r0, r3, r0
 800c554:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c556:	4318      	orrs	r0, r3
 800c558:	9041      	str	r0, [sp, #260]	; 0x104
 800c55a:	4655      	mov	r5, sl
 800c55c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c560:	2b78      	cmp	r3, #120	; 0x78
 800c562:	d806      	bhi.n	800c572 <__ssvfiscanf_r+0xee>
 800c564:	2b57      	cmp	r3, #87	; 0x57
 800c566:	d810      	bhi.n	800c58a <__ssvfiscanf_r+0x106>
 800c568:	2b25      	cmp	r3, #37	; 0x25
 800c56a:	d0c6      	beq.n	800c4fa <__ssvfiscanf_r+0x76>
 800c56c:	d856      	bhi.n	800c61c <__ssvfiscanf_r+0x198>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d064      	beq.n	800c63c <__ssvfiscanf_r+0x1b8>
 800c572:	2303      	movs	r3, #3
 800c574:	9347      	str	r3, [sp, #284]	; 0x11c
 800c576:	230a      	movs	r3, #10
 800c578:	9342      	str	r3, [sp, #264]	; 0x108
 800c57a:	e071      	b.n	800c660 <__ssvfiscanf_r+0x1dc>
 800c57c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c57e:	fb02 1103 	mla	r1, r2, r3, r1
 800c582:	3930      	subs	r1, #48	; 0x30
 800c584:	9143      	str	r1, [sp, #268]	; 0x10c
 800c586:	4655      	mov	r5, sl
 800c588:	e7d3      	b.n	800c532 <__ssvfiscanf_r+0xae>
 800c58a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c58e:	2a20      	cmp	r2, #32
 800c590:	d8ef      	bhi.n	800c572 <__ssvfiscanf_r+0xee>
 800c592:	a101      	add	r1, pc, #4	; (adr r1, 800c598 <__ssvfiscanf_r+0x114>)
 800c594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c598:	0800c64b 	.word	0x0800c64b
 800c59c:	0800c573 	.word	0x0800c573
 800c5a0:	0800c573 	.word	0x0800c573
 800c5a4:	0800c6a9 	.word	0x0800c6a9
 800c5a8:	0800c573 	.word	0x0800c573
 800c5ac:	0800c573 	.word	0x0800c573
 800c5b0:	0800c573 	.word	0x0800c573
 800c5b4:	0800c573 	.word	0x0800c573
 800c5b8:	0800c573 	.word	0x0800c573
 800c5bc:	0800c573 	.word	0x0800c573
 800c5c0:	0800c573 	.word	0x0800c573
 800c5c4:	0800c6bf 	.word	0x0800c6bf
 800c5c8:	0800c695 	.word	0x0800c695
 800c5cc:	0800c623 	.word	0x0800c623
 800c5d0:	0800c623 	.word	0x0800c623
 800c5d4:	0800c623 	.word	0x0800c623
 800c5d8:	0800c573 	.word	0x0800c573
 800c5dc:	0800c699 	.word	0x0800c699
 800c5e0:	0800c573 	.word	0x0800c573
 800c5e4:	0800c573 	.word	0x0800c573
 800c5e8:	0800c573 	.word	0x0800c573
 800c5ec:	0800c573 	.word	0x0800c573
 800c5f0:	0800c6cf 	.word	0x0800c6cf
 800c5f4:	0800c6a1 	.word	0x0800c6a1
 800c5f8:	0800c643 	.word	0x0800c643
 800c5fc:	0800c573 	.word	0x0800c573
 800c600:	0800c573 	.word	0x0800c573
 800c604:	0800c6cb 	.word	0x0800c6cb
 800c608:	0800c573 	.word	0x0800c573
 800c60c:	0800c695 	.word	0x0800c695
 800c610:	0800c573 	.word	0x0800c573
 800c614:	0800c573 	.word	0x0800c573
 800c618:	0800c64b 	.word	0x0800c64b
 800c61c:	3b45      	subs	r3, #69	; 0x45
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d8a7      	bhi.n	800c572 <__ssvfiscanf_r+0xee>
 800c622:	2305      	movs	r3, #5
 800c624:	e01b      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c626:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c628:	4621      	mov	r1, r4
 800c62a:	4630      	mov	r0, r6
 800c62c:	4798      	blx	r3
 800c62e:	2800      	cmp	r0, #0
 800c630:	f43f af68 	beq.w	800c504 <__ssvfiscanf_r+0x80>
 800c634:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c636:	2800      	cmp	r0, #0
 800c638:	f040 808d 	bne.w	800c756 <__ssvfiscanf_r+0x2d2>
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	e08f      	b.n	800c762 <__ssvfiscanf_r+0x2de>
 800c642:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c644:	f042 0220 	orr.w	r2, r2, #32
 800c648:	9241      	str	r2, [sp, #260]	; 0x104
 800c64a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c650:	9241      	str	r2, [sp, #260]	; 0x104
 800c652:	2210      	movs	r2, #16
 800c654:	2b6f      	cmp	r3, #111	; 0x6f
 800c656:	9242      	str	r2, [sp, #264]	; 0x108
 800c658:	bf34      	ite	cc
 800c65a:	2303      	movcc	r3, #3
 800c65c:	2304      	movcs	r3, #4
 800c65e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c660:	6863      	ldr	r3, [r4, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dd42      	ble.n	800c6ec <__ssvfiscanf_r+0x268>
 800c666:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c668:	0659      	lsls	r1, r3, #25
 800c66a:	d404      	bmi.n	800c676 <__ssvfiscanf_r+0x1f2>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	5cba      	ldrb	r2, [r7, r2]
 800c672:	0712      	lsls	r2, r2, #28
 800c674:	d441      	bmi.n	800c6fa <__ssvfiscanf_r+0x276>
 800c676:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c678:	2b02      	cmp	r3, #2
 800c67a:	dc50      	bgt.n	800c71e <__ssvfiscanf_r+0x29a>
 800c67c:	466b      	mov	r3, sp
 800c67e:	4622      	mov	r2, r4
 800c680:	a941      	add	r1, sp, #260	; 0x104
 800c682:	4630      	mov	r0, r6
 800c684:	f000 f876 	bl	800c774 <_scanf_chars>
 800c688:	2801      	cmp	r0, #1
 800c68a:	d06e      	beq.n	800c76a <__ssvfiscanf_r+0x2e6>
 800c68c:	2802      	cmp	r0, #2
 800c68e:	f47f af20 	bne.w	800c4d2 <__ssvfiscanf_r+0x4e>
 800c692:	e7cf      	b.n	800c634 <__ssvfiscanf_r+0x1b0>
 800c694:	220a      	movs	r2, #10
 800c696:	e7dd      	b.n	800c654 <__ssvfiscanf_r+0x1d0>
 800c698:	2300      	movs	r3, #0
 800c69a:	9342      	str	r3, [sp, #264]	; 0x108
 800c69c:	2303      	movs	r3, #3
 800c69e:	e7de      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800c6a4:	2304      	movs	r3, #4
 800c6a6:	e7da      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	f000 f9c6 	bl	800ca3c <__sccl>
 800c6b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b6:	9341      	str	r3, [sp, #260]	; 0x104
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e7cf      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c6be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c4:	9341      	str	r3, [sp, #260]	; 0x104
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e7c9      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e7c7      	b.n	800c65e <__ssvfiscanf_r+0x1da>
 800c6ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c6d0:	06c3      	lsls	r3, r0, #27
 800c6d2:	f53f aefe 	bmi.w	800c4d2 <__ssvfiscanf_r+0x4e>
 800c6d6:	9b00      	ldr	r3, [sp, #0]
 800c6d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6da:	1d19      	adds	r1, r3, #4
 800c6dc:	9100      	str	r1, [sp, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f010 0f01 	tst.w	r0, #1
 800c6e4:	bf14      	ite	ne
 800c6e6:	801a      	strhne	r2, [r3, #0]
 800c6e8:	601a      	streq	r2, [r3, #0]
 800c6ea:	e6f2      	b.n	800c4d2 <__ssvfiscanf_r+0x4e>
 800c6ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4798      	blx	r3
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d0b6      	beq.n	800c666 <__ssvfiscanf_r+0x1e2>
 800c6f8:	e79c      	b.n	800c634 <__ssvfiscanf_r+0x1b0>
 800c6fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6fc:	3201      	adds	r2, #1
 800c6fe:	9245      	str	r2, [sp, #276]	; 0x114
 800c700:	6862      	ldr	r2, [r4, #4]
 800c702:	3a01      	subs	r2, #1
 800c704:	2a00      	cmp	r2, #0
 800c706:	6062      	str	r2, [r4, #4]
 800c708:	dd02      	ble.n	800c710 <__ssvfiscanf_r+0x28c>
 800c70a:	3301      	adds	r3, #1
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	e7ad      	b.n	800c66c <__ssvfiscanf_r+0x1e8>
 800c710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c712:	4621      	mov	r1, r4
 800c714:	4630      	mov	r0, r6
 800c716:	4798      	blx	r3
 800c718:	2800      	cmp	r0, #0
 800c71a:	d0a7      	beq.n	800c66c <__ssvfiscanf_r+0x1e8>
 800c71c:	e78a      	b.n	800c634 <__ssvfiscanf_r+0x1b0>
 800c71e:	2b04      	cmp	r3, #4
 800c720:	dc0e      	bgt.n	800c740 <__ssvfiscanf_r+0x2bc>
 800c722:	466b      	mov	r3, sp
 800c724:	4622      	mov	r2, r4
 800c726:	a941      	add	r1, sp, #260	; 0x104
 800c728:	4630      	mov	r0, r6
 800c72a:	f000 f87d 	bl	800c828 <_scanf_i>
 800c72e:	e7ab      	b.n	800c688 <__ssvfiscanf_r+0x204>
 800c730:	0800c3d1 	.word	0x0800c3d1
 800c734:	0800c44b 	.word	0x0800c44b
 800c738:	08010905 	.word	0x08010905
 800c73c:	080108a2 	.word	0x080108a2
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <__ssvfiscanf_r+0x2ec>)
 800c742:	2b00      	cmp	r3, #0
 800c744:	f43f aec5 	beq.w	800c4d2 <__ssvfiscanf_r+0x4e>
 800c748:	466b      	mov	r3, sp
 800c74a:	4622      	mov	r2, r4
 800c74c:	a941      	add	r1, sp, #260	; 0x104
 800c74e:	4630      	mov	r0, r6
 800c750:	f3af 8000 	nop.w
 800c754:	e798      	b.n	800c688 <__ssvfiscanf_r+0x204>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c75c:	bf18      	it	ne
 800c75e:	f04f 30ff 	movne.w	r0, #4294967295
 800c762:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c76c:	e7f9      	b.n	800c762 <__ssvfiscanf_r+0x2de>
 800c76e:	bf00      	nop
 800c770:	00000000 	.word	0x00000000

0800c774 <_scanf_chars>:
 800c774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c778:	4615      	mov	r5, r2
 800c77a:	688a      	ldr	r2, [r1, #8]
 800c77c:	4680      	mov	r8, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	b932      	cbnz	r2, 800c790 <_scanf_chars+0x1c>
 800c782:	698a      	ldr	r2, [r1, #24]
 800c784:	2a00      	cmp	r2, #0
 800c786:	bf0c      	ite	eq
 800c788:	2201      	moveq	r2, #1
 800c78a:	f04f 32ff 	movne.w	r2, #4294967295
 800c78e:	608a      	str	r2, [r1, #8]
 800c790:	6822      	ldr	r2, [r4, #0]
 800c792:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c824 <_scanf_chars+0xb0>
 800c796:	06d1      	lsls	r1, r2, #27
 800c798:	bf5f      	itttt	pl
 800c79a:	681a      	ldrpl	r2, [r3, #0]
 800c79c:	1d11      	addpl	r1, r2, #4
 800c79e:	6019      	strpl	r1, [r3, #0]
 800c7a0:	6816      	ldrpl	r6, [r2, #0]
 800c7a2:	2700      	movs	r7, #0
 800c7a4:	69a0      	ldr	r0, [r4, #24]
 800c7a6:	b188      	cbz	r0, 800c7cc <_scanf_chars+0x58>
 800c7a8:	2801      	cmp	r0, #1
 800c7aa:	d107      	bne.n	800c7bc <_scanf_chars+0x48>
 800c7ac:	682a      	ldr	r2, [r5, #0]
 800c7ae:	7811      	ldrb	r1, [r2, #0]
 800c7b0:	6962      	ldr	r2, [r4, #20]
 800c7b2:	5c52      	ldrb	r2, [r2, r1]
 800c7b4:	b952      	cbnz	r2, 800c7cc <_scanf_chars+0x58>
 800c7b6:	2f00      	cmp	r7, #0
 800c7b8:	d031      	beq.n	800c81e <_scanf_chars+0xaa>
 800c7ba:	e022      	b.n	800c802 <_scanf_chars+0x8e>
 800c7bc:	2802      	cmp	r0, #2
 800c7be:	d120      	bne.n	800c802 <_scanf_chars+0x8e>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c7c8:	071b      	lsls	r3, r3, #28
 800c7ca:	d41a      	bmi.n	800c802 <_scanf_chars+0x8e>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	06da      	lsls	r2, r3, #27
 800c7d0:	bf5e      	ittt	pl
 800c7d2:	682b      	ldrpl	r3, [r5, #0]
 800c7d4:	781b      	ldrbpl	r3, [r3, #0]
 800c7d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c7da:	682a      	ldr	r2, [r5, #0]
 800c7dc:	686b      	ldr	r3, [r5, #4]
 800c7de:	3201      	adds	r2, #1
 800c7e0:	602a      	str	r2, [r5, #0]
 800c7e2:	68a2      	ldr	r2, [r4, #8]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	3a01      	subs	r2, #1
 800c7e8:	606b      	str	r3, [r5, #4]
 800c7ea:	3701      	adds	r7, #1
 800c7ec:	60a2      	str	r2, [r4, #8]
 800c7ee:	b142      	cbz	r2, 800c802 <_scanf_chars+0x8e>
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dcd7      	bgt.n	800c7a4 <_scanf_chars+0x30>
 800c7f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4798      	blx	r3
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0d0      	beq.n	800c7a4 <_scanf_chars+0x30>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	f013 0310 	ands.w	r3, r3, #16
 800c808:	d105      	bne.n	800c816 <_scanf_chars+0xa2>
 800c80a:	68e2      	ldr	r2, [r4, #12]
 800c80c:	3201      	adds	r2, #1
 800c80e:	60e2      	str	r2, [r4, #12]
 800c810:	69a2      	ldr	r2, [r4, #24]
 800c812:	b102      	cbz	r2, 800c816 <_scanf_chars+0xa2>
 800c814:	7033      	strb	r3, [r6, #0]
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	443b      	add	r3, r7
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	2000      	movs	r0, #0
 800c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c822:	bf00      	nop
 800c824:	08010905 	.word	0x08010905

0800c828 <_scanf_i>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4698      	mov	r8, r3
 800c82e:	4b76      	ldr	r3, [pc, #472]	; (800ca08 <_scanf_i+0x1e0>)
 800c830:	460c      	mov	r4, r1
 800c832:	4682      	mov	sl, r0
 800c834:	4616      	mov	r6, r2
 800c836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c83a:	b087      	sub	sp, #28
 800c83c:	ab03      	add	r3, sp, #12
 800c83e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c842:	4b72      	ldr	r3, [pc, #456]	; (800ca0c <_scanf_i+0x1e4>)
 800c844:	69a1      	ldr	r1, [r4, #24]
 800c846:	4a72      	ldr	r2, [pc, #456]	; (800ca10 <_scanf_i+0x1e8>)
 800c848:	2903      	cmp	r1, #3
 800c84a:	bf18      	it	ne
 800c84c:	461a      	movne	r2, r3
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	9201      	str	r2, [sp, #4]
 800c852:	1e5a      	subs	r2, r3, #1
 800c854:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c858:	bf88      	it	hi
 800c85a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c85e:	4627      	mov	r7, r4
 800c860:	bf82      	ittt	hi
 800c862:	eb03 0905 	addhi.w	r9, r3, r5
 800c866:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c86a:	60a3      	strhi	r3, [r4, #8]
 800c86c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c870:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c874:	bf98      	it	ls
 800c876:	f04f 0900 	movls.w	r9, #0
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	463d      	mov	r5, r7
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	6831      	ldr	r1, [r6, #0]
 800c884:	ab03      	add	r3, sp, #12
 800c886:	7809      	ldrb	r1, [r1, #0]
 800c888:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c88c:	2202      	movs	r2, #2
 800c88e:	f7f3 fcbf 	bl	8000210 <memchr>
 800c892:	b328      	cbz	r0, 800c8e0 <_scanf_i+0xb8>
 800c894:	f1bb 0f01 	cmp.w	fp, #1
 800c898:	d159      	bne.n	800c94e <_scanf_i+0x126>
 800c89a:	6862      	ldr	r2, [r4, #4]
 800c89c:	b92a      	cbnz	r2, 800c8aa <_scanf_i+0x82>
 800c89e:	6822      	ldr	r2, [r4, #0]
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c8b0:	6022      	str	r2, [r4, #0]
 800c8b2:	68a2      	ldr	r2, [r4, #8]
 800c8b4:	1e51      	subs	r1, r2, #1
 800c8b6:	60a1      	str	r1, [r4, #8]
 800c8b8:	b192      	cbz	r2, 800c8e0 <_scanf_i+0xb8>
 800c8ba:	6832      	ldr	r2, [r6, #0]
 800c8bc:	1c51      	adds	r1, r2, #1
 800c8be:	6031      	str	r1, [r6, #0]
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	f805 2b01 	strb.w	r2, [r5], #1
 800c8c6:	6872      	ldr	r2, [r6, #4]
 800c8c8:	3a01      	subs	r2, #1
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	6072      	str	r2, [r6, #4]
 800c8ce:	dc07      	bgt.n	800c8e0 <_scanf_i+0xb8>
 800c8d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4650      	mov	r0, sl
 800c8d8:	4790      	blx	r2
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	f040 8085 	bne.w	800c9ea <_scanf_i+0x1c2>
 800c8e0:	f10b 0b01 	add.w	fp, fp, #1
 800c8e4:	f1bb 0f03 	cmp.w	fp, #3
 800c8e8:	d1cb      	bne.n	800c882 <_scanf_i+0x5a>
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	b90b      	cbnz	r3, 800c8f2 <_scanf_i+0xca>
 800c8ee:	230a      	movs	r3, #10
 800c8f0:	6063      	str	r3, [r4, #4]
 800c8f2:	6863      	ldr	r3, [r4, #4]
 800c8f4:	4947      	ldr	r1, [pc, #284]	; (800ca14 <_scanf_i+0x1ec>)
 800c8f6:	6960      	ldr	r0, [r4, #20]
 800c8f8:	1ac9      	subs	r1, r1, r3
 800c8fa:	f000 f89f 	bl	800ca3c <__sccl>
 800c8fe:	f04f 0b00 	mov.w	fp, #0
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d03d      	beq.n	800c986 <_scanf_i+0x15e>
 800c90a:	6831      	ldr	r1, [r6, #0]
 800c90c:	6960      	ldr	r0, [r4, #20]
 800c90e:	f891 c000 	ldrb.w	ip, [r1]
 800c912:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c916:	2800      	cmp	r0, #0
 800c918:	d035      	beq.n	800c986 <_scanf_i+0x15e>
 800c91a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c91e:	d124      	bne.n	800c96a <_scanf_i+0x142>
 800c920:	0510      	lsls	r0, r2, #20
 800c922:	d522      	bpl.n	800c96a <_scanf_i+0x142>
 800c924:	f10b 0b01 	add.w	fp, fp, #1
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	d003      	beq.n	800c936 <_scanf_i+0x10e>
 800c92e:	3301      	adds	r3, #1
 800c930:	f109 39ff 	add.w	r9, r9, #4294967295
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6873      	ldr	r3, [r6, #4]
 800c938:	3b01      	subs	r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	6073      	str	r3, [r6, #4]
 800c93e:	dd1b      	ble.n	800c978 <_scanf_i+0x150>
 800c940:	6833      	ldr	r3, [r6, #0]
 800c942:	3301      	adds	r3, #1
 800c944:	6033      	str	r3, [r6, #0]
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	3b01      	subs	r3, #1
 800c94a:	60a3      	str	r3, [r4, #8]
 800c94c:	e7d9      	b.n	800c902 <_scanf_i+0xda>
 800c94e:	f1bb 0f02 	cmp.w	fp, #2
 800c952:	d1ae      	bne.n	800c8b2 <_scanf_i+0x8a>
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c95a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c95e:	d1bf      	bne.n	800c8e0 <_scanf_i+0xb8>
 800c960:	2310      	movs	r3, #16
 800c962:	6063      	str	r3, [r4, #4]
 800c964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c968:	e7a2      	b.n	800c8b0 <_scanf_i+0x88>
 800c96a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c96e:	6022      	str	r2, [r4, #0]
 800c970:	780b      	ldrb	r3, [r1, #0]
 800c972:	f805 3b01 	strb.w	r3, [r5], #1
 800c976:	e7de      	b.n	800c936 <_scanf_i+0x10e>
 800c978:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c97c:	4631      	mov	r1, r6
 800c97e:	4650      	mov	r0, sl
 800c980:	4798      	blx	r3
 800c982:	2800      	cmp	r0, #0
 800c984:	d0df      	beq.n	800c946 <_scanf_i+0x11e>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	05db      	lsls	r3, r3, #23
 800c98a:	d50d      	bpl.n	800c9a8 <_scanf_i+0x180>
 800c98c:	42bd      	cmp	r5, r7
 800c98e:	d909      	bls.n	800c9a4 <_scanf_i+0x17c>
 800c990:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c998:	4632      	mov	r2, r6
 800c99a:	4650      	mov	r0, sl
 800c99c:	4798      	blx	r3
 800c99e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9a2:	464d      	mov	r5, r9
 800c9a4:	42bd      	cmp	r5, r7
 800c9a6:	d02d      	beq.n	800ca04 <_scanf_i+0x1dc>
 800c9a8:	6822      	ldr	r2, [r4, #0]
 800c9aa:	f012 0210 	ands.w	r2, r2, #16
 800c9ae:	d113      	bne.n	800c9d8 <_scanf_i+0x1b0>
 800c9b0:	702a      	strb	r2, [r5, #0]
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	9e01      	ldr	r6, [sp, #4]
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	47b0      	blx	r6
 800c9bc:	6821      	ldr	r1, [r4, #0]
 800c9be:	f8d8 3000 	ldr.w	r3, [r8]
 800c9c2:	f011 0f20 	tst.w	r1, #32
 800c9c6:	d013      	beq.n	800c9f0 <_scanf_i+0x1c8>
 800c9c8:	1d1a      	adds	r2, r3, #4
 800c9ca:	f8c8 2000 	str.w	r2, [r8]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6018      	str	r0, [r3, #0]
 800c9d2:	68e3      	ldr	r3, [r4, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60e3      	str	r3, [r4, #12]
 800c9d8:	1bed      	subs	r5, r5, r7
 800c9da:	44ab      	add	fp, r5
 800c9dc:	6925      	ldr	r5, [r4, #16]
 800c9de:	445d      	add	r5, fp
 800c9e0:	6125      	str	r5, [r4, #16]
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	b007      	add	sp, #28
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	f04f 0b00 	mov.w	fp, #0
 800c9ee:	e7ca      	b.n	800c986 <_scanf_i+0x15e>
 800c9f0:	1d1a      	adds	r2, r3, #4
 800c9f2:	f8c8 2000 	str.w	r2, [r8]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f011 0f01 	tst.w	r1, #1
 800c9fc:	bf14      	ite	ne
 800c9fe:	8018      	strhne	r0, [r3, #0]
 800ca00:	6018      	streq	r0, [r3, #0]
 800ca02:	e7e6      	b.n	800c9d2 <_scanf_i+0x1aa>
 800ca04:	2001      	movs	r0, #1
 800ca06:	e7ed      	b.n	800c9e4 <_scanf_i+0x1bc>
 800ca08:	08010670 	.word	0x08010670
 800ca0c:	0800cc99 	.word	0x0800cc99
 800ca10:	0800cbb1 	.word	0x0800cbb1
 800ca14:	080108c6 	.word	0x080108c6

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	; (800ca38 <_read_r+0x20>)
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f6 fdda 	bl	80035e0 <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20012274 	.word	0x20012274

0800ca3c <__sccl>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	780b      	ldrb	r3, [r1, #0]
 800ca40:	4604      	mov	r4, r0
 800ca42:	2b5e      	cmp	r3, #94	; 0x5e
 800ca44:	bf0b      	itete	eq
 800ca46:	784b      	ldrbeq	r3, [r1, #1]
 800ca48:	1c48      	addne	r0, r1, #1
 800ca4a:	1c88      	addeq	r0, r1, #2
 800ca4c:	2200      	movne	r2, #0
 800ca4e:	bf08      	it	eq
 800ca50:	2201      	moveq	r2, #1
 800ca52:	1e61      	subs	r1, r4, #1
 800ca54:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ca58:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ca5c:	42a9      	cmp	r1, r5
 800ca5e:	d1fb      	bne.n	800ca58 <__sccl+0x1c>
 800ca60:	b90b      	cbnz	r3, 800ca66 <__sccl+0x2a>
 800ca62:	3801      	subs	r0, #1
 800ca64:	bd70      	pop	{r4, r5, r6, pc}
 800ca66:	f082 0201 	eor.w	r2, r2, #1
 800ca6a:	54e2      	strb	r2, [r4, r3]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ca74:	292d      	cmp	r1, #45	; 0x2d
 800ca76:	d006      	beq.n	800ca86 <__sccl+0x4a>
 800ca78:	295d      	cmp	r1, #93	; 0x5d
 800ca7a:	d0f3      	beq.n	800ca64 <__sccl+0x28>
 800ca7c:	b909      	cbnz	r1, 800ca82 <__sccl+0x46>
 800ca7e:	4628      	mov	r0, r5
 800ca80:	e7f0      	b.n	800ca64 <__sccl+0x28>
 800ca82:	460b      	mov	r3, r1
 800ca84:	e7f1      	b.n	800ca6a <__sccl+0x2e>
 800ca86:	786e      	ldrb	r6, [r5, #1]
 800ca88:	2e5d      	cmp	r6, #93	; 0x5d
 800ca8a:	d0fa      	beq.n	800ca82 <__sccl+0x46>
 800ca8c:	42b3      	cmp	r3, r6
 800ca8e:	dcf8      	bgt.n	800ca82 <__sccl+0x46>
 800ca90:	3502      	adds	r5, #2
 800ca92:	4619      	mov	r1, r3
 800ca94:	3101      	adds	r1, #1
 800ca96:	428e      	cmp	r6, r1
 800ca98:	5462      	strb	r2, [r4, r1]
 800ca9a:	dcfb      	bgt.n	800ca94 <__sccl+0x58>
 800ca9c:	1af1      	subs	r1, r6, r3
 800ca9e:	3901      	subs	r1, #1
 800caa0:	1c58      	adds	r0, r3, #1
 800caa2:	42b3      	cmp	r3, r6
 800caa4:	bfa8      	it	ge
 800caa6:	2100      	movge	r1, #0
 800caa8:	1843      	adds	r3, r0, r1
 800caaa:	e7e0      	b.n	800ca6e <__sccl+0x32>

0800caac <_strtol_l.constprop.0>:
 800caac:	2b01      	cmp	r3, #1
 800caae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab2:	d001      	beq.n	800cab8 <_strtol_l.constprop.0+0xc>
 800cab4:	2b24      	cmp	r3, #36	; 0x24
 800cab6:	d906      	bls.n	800cac6 <_strtol_l.constprop.0+0x1a>
 800cab8:	f7fd faa0 	bl	8009ffc <__errno>
 800cabc:	2316      	movs	r3, #22
 800cabe:	6003      	str	r3, [r0, #0]
 800cac0:	2000      	movs	r0, #0
 800cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cbac <_strtol_l.constprop.0+0x100>
 800caca:	460d      	mov	r5, r1
 800cacc:	462e      	mov	r6, r5
 800cace:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cad6:	f017 0708 	ands.w	r7, r7, #8
 800cada:	d1f7      	bne.n	800cacc <_strtol_l.constprop.0+0x20>
 800cadc:	2c2d      	cmp	r4, #45	; 0x2d
 800cade:	d132      	bne.n	800cb46 <_strtol_l.constprop.0+0x9a>
 800cae0:	782c      	ldrb	r4, [r5, #0]
 800cae2:	2701      	movs	r7, #1
 800cae4:	1cb5      	adds	r5, r6, #2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d05b      	beq.n	800cba2 <_strtol_l.constprop.0+0xf6>
 800caea:	2b10      	cmp	r3, #16
 800caec:	d109      	bne.n	800cb02 <_strtol_l.constprop.0+0x56>
 800caee:	2c30      	cmp	r4, #48	; 0x30
 800caf0:	d107      	bne.n	800cb02 <_strtol_l.constprop.0+0x56>
 800caf2:	782c      	ldrb	r4, [r5, #0]
 800caf4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800caf8:	2c58      	cmp	r4, #88	; 0x58
 800cafa:	d14d      	bne.n	800cb98 <_strtol_l.constprop.0+0xec>
 800cafc:	786c      	ldrb	r4, [r5, #1]
 800cafe:	2310      	movs	r3, #16
 800cb00:	3502      	adds	r5, #2
 800cb02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb06:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb0a:	f04f 0c00 	mov.w	ip, #0
 800cb0e:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb12:	4666      	mov	r6, ip
 800cb14:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cb1c:	f1be 0f09 	cmp.w	lr, #9
 800cb20:	d816      	bhi.n	800cb50 <_strtol_l.constprop.0+0xa4>
 800cb22:	4674      	mov	r4, lr
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	dd24      	ble.n	800cb72 <_strtol_l.constprop.0+0xc6>
 800cb28:	f1bc 0f00 	cmp.w	ip, #0
 800cb2c:	db1e      	blt.n	800cb6c <_strtol_l.constprop.0+0xc0>
 800cb2e:	45b1      	cmp	r9, r6
 800cb30:	d31c      	bcc.n	800cb6c <_strtol_l.constprop.0+0xc0>
 800cb32:	d101      	bne.n	800cb38 <_strtol_l.constprop.0+0x8c>
 800cb34:	45a2      	cmp	sl, r4
 800cb36:	db19      	blt.n	800cb6c <_strtol_l.constprop.0+0xc0>
 800cb38:	fb06 4603 	mla	r6, r6, r3, r4
 800cb3c:	f04f 0c01 	mov.w	ip, #1
 800cb40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb44:	e7e8      	b.n	800cb18 <_strtol_l.constprop.0+0x6c>
 800cb46:	2c2b      	cmp	r4, #43	; 0x2b
 800cb48:	bf04      	itt	eq
 800cb4a:	782c      	ldrbeq	r4, [r5, #0]
 800cb4c:	1cb5      	addeq	r5, r6, #2
 800cb4e:	e7ca      	b.n	800cae6 <_strtol_l.constprop.0+0x3a>
 800cb50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb54:	f1be 0f19 	cmp.w	lr, #25
 800cb58:	d801      	bhi.n	800cb5e <_strtol_l.constprop.0+0xb2>
 800cb5a:	3c37      	subs	r4, #55	; 0x37
 800cb5c:	e7e2      	b.n	800cb24 <_strtol_l.constprop.0+0x78>
 800cb5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb62:	f1be 0f19 	cmp.w	lr, #25
 800cb66:	d804      	bhi.n	800cb72 <_strtol_l.constprop.0+0xc6>
 800cb68:	3c57      	subs	r4, #87	; 0x57
 800cb6a:	e7db      	b.n	800cb24 <_strtol_l.constprop.0+0x78>
 800cb6c:	f04f 3cff 	mov.w	ip, #4294967295
 800cb70:	e7e6      	b.n	800cb40 <_strtol_l.constprop.0+0x94>
 800cb72:	f1bc 0f00 	cmp.w	ip, #0
 800cb76:	da05      	bge.n	800cb84 <_strtol_l.constprop.0+0xd8>
 800cb78:	2322      	movs	r3, #34	; 0x22
 800cb7a:	6003      	str	r3, [r0, #0]
 800cb7c:	4646      	mov	r6, r8
 800cb7e:	b942      	cbnz	r2, 800cb92 <_strtol_l.constprop.0+0xe6>
 800cb80:	4630      	mov	r0, r6
 800cb82:	e79e      	b.n	800cac2 <_strtol_l.constprop.0+0x16>
 800cb84:	b107      	cbz	r7, 800cb88 <_strtol_l.constprop.0+0xdc>
 800cb86:	4276      	negs	r6, r6
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	d0f9      	beq.n	800cb80 <_strtol_l.constprop.0+0xd4>
 800cb8c:	f1bc 0f00 	cmp.w	ip, #0
 800cb90:	d000      	beq.n	800cb94 <_strtol_l.constprop.0+0xe8>
 800cb92:	1e69      	subs	r1, r5, #1
 800cb94:	6011      	str	r1, [r2, #0]
 800cb96:	e7f3      	b.n	800cb80 <_strtol_l.constprop.0+0xd4>
 800cb98:	2430      	movs	r4, #48	; 0x30
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1b1      	bne.n	800cb02 <_strtol_l.constprop.0+0x56>
 800cb9e:	2308      	movs	r3, #8
 800cba0:	e7af      	b.n	800cb02 <_strtol_l.constprop.0+0x56>
 800cba2:	2c30      	cmp	r4, #48	; 0x30
 800cba4:	d0a5      	beq.n	800caf2 <_strtol_l.constprop.0+0x46>
 800cba6:	230a      	movs	r3, #10
 800cba8:	e7ab      	b.n	800cb02 <_strtol_l.constprop.0+0x56>
 800cbaa:	bf00      	nop
 800cbac:	08010905 	.word	0x08010905

0800cbb0 <_strtol_r>:
 800cbb0:	f7ff bf7c 	b.w	800caac <_strtol_l.constprop.0>

0800cbb4 <_strtoul_l.constprop.0>:
 800cbb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbb8:	4f36      	ldr	r7, [pc, #216]	; (800cc94 <_strtoul_l.constprop.0+0xe0>)
 800cbba:	4686      	mov	lr, r0
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc4:	5de6      	ldrb	r6, [r4, r7]
 800cbc6:	f016 0608 	ands.w	r6, r6, #8
 800cbca:	d1f8      	bne.n	800cbbe <_strtoul_l.constprop.0+0xa>
 800cbcc:	2c2d      	cmp	r4, #45	; 0x2d
 800cbce:	d12f      	bne.n	800cc30 <_strtoul_l.constprop.0+0x7c>
 800cbd0:	782c      	ldrb	r4, [r5, #0]
 800cbd2:	2601      	movs	r6, #1
 800cbd4:	1c85      	adds	r5, r0, #2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d057      	beq.n	800cc8a <_strtoul_l.constprop.0+0xd6>
 800cbda:	2b10      	cmp	r3, #16
 800cbdc:	d109      	bne.n	800cbf2 <_strtoul_l.constprop.0+0x3e>
 800cbde:	2c30      	cmp	r4, #48	; 0x30
 800cbe0:	d107      	bne.n	800cbf2 <_strtoul_l.constprop.0+0x3e>
 800cbe2:	7828      	ldrb	r0, [r5, #0]
 800cbe4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cbe8:	2858      	cmp	r0, #88	; 0x58
 800cbea:	d149      	bne.n	800cc80 <_strtoul_l.constprop.0+0xcc>
 800cbec:	786c      	ldrb	r4, [r5, #1]
 800cbee:	2310      	movs	r3, #16
 800cbf0:	3502      	adds	r5, #2
 800cbf2:	f04f 38ff 	mov.w	r8, #4294967295
 800cbf6:	2700      	movs	r7, #0
 800cbf8:	fbb8 f8f3 	udiv	r8, r8, r3
 800cbfc:	fb03 f908 	mul.w	r9, r3, r8
 800cc00:	ea6f 0909 	mvn.w	r9, r9
 800cc04:	4638      	mov	r0, r7
 800cc06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc0a:	f1bc 0f09 	cmp.w	ip, #9
 800cc0e:	d814      	bhi.n	800cc3a <_strtoul_l.constprop.0+0x86>
 800cc10:	4664      	mov	r4, ip
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	dd22      	ble.n	800cc5c <_strtoul_l.constprop.0+0xa8>
 800cc16:	2f00      	cmp	r7, #0
 800cc18:	db1d      	blt.n	800cc56 <_strtoul_l.constprop.0+0xa2>
 800cc1a:	4580      	cmp	r8, r0
 800cc1c:	d31b      	bcc.n	800cc56 <_strtoul_l.constprop.0+0xa2>
 800cc1e:	d101      	bne.n	800cc24 <_strtoul_l.constprop.0+0x70>
 800cc20:	45a1      	cmp	r9, r4
 800cc22:	db18      	blt.n	800cc56 <_strtoul_l.constprop.0+0xa2>
 800cc24:	fb00 4003 	mla	r0, r0, r3, r4
 800cc28:	2701      	movs	r7, #1
 800cc2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc2e:	e7ea      	b.n	800cc06 <_strtoul_l.constprop.0+0x52>
 800cc30:	2c2b      	cmp	r4, #43	; 0x2b
 800cc32:	bf04      	itt	eq
 800cc34:	782c      	ldrbeq	r4, [r5, #0]
 800cc36:	1c85      	addeq	r5, r0, #2
 800cc38:	e7cd      	b.n	800cbd6 <_strtoul_l.constprop.0+0x22>
 800cc3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc3e:	f1bc 0f19 	cmp.w	ip, #25
 800cc42:	d801      	bhi.n	800cc48 <_strtoul_l.constprop.0+0x94>
 800cc44:	3c37      	subs	r4, #55	; 0x37
 800cc46:	e7e4      	b.n	800cc12 <_strtoul_l.constprop.0+0x5e>
 800cc48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc4c:	f1bc 0f19 	cmp.w	ip, #25
 800cc50:	d804      	bhi.n	800cc5c <_strtoul_l.constprop.0+0xa8>
 800cc52:	3c57      	subs	r4, #87	; 0x57
 800cc54:	e7dd      	b.n	800cc12 <_strtoul_l.constprop.0+0x5e>
 800cc56:	f04f 37ff 	mov.w	r7, #4294967295
 800cc5a:	e7e6      	b.n	800cc2a <_strtoul_l.constprop.0+0x76>
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	da07      	bge.n	800cc70 <_strtoul_l.constprop.0+0xbc>
 800cc60:	2322      	movs	r3, #34	; 0x22
 800cc62:	f8ce 3000 	str.w	r3, [lr]
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	b932      	cbnz	r2, 800cc7a <_strtoul_l.constprop.0+0xc6>
 800cc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc70:	b106      	cbz	r6, 800cc74 <_strtoul_l.constprop.0+0xc0>
 800cc72:	4240      	negs	r0, r0
 800cc74:	2a00      	cmp	r2, #0
 800cc76:	d0f9      	beq.n	800cc6c <_strtoul_l.constprop.0+0xb8>
 800cc78:	b107      	cbz	r7, 800cc7c <_strtoul_l.constprop.0+0xc8>
 800cc7a:	1e69      	subs	r1, r5, #1
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	e7f5      	b.n	800cc6c <_strtoul_l.constprop.0+0xb8>
 800cc80:	2430      	movs	r4, #48	; 0x30
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1b5      	bne.n	800cbf2 <_strtoul_l.constprop.0+0x3e>
 800cc86:	2308      	movs	r3, #8
 800cc88:	e7b3      	b.n	800cbf2 <_strtoul_l.constprop.0+0x3e>
 800cc8a:	2c30      	cmp	r4, #48	; 0x30
 800cc8c:	d0a9      	beq.n	800cbe2 <_strtoul_l.constprop.0+0x2e>
 800cc8e:	230a      	movs	r3, #10
 800cc90:	e7af      	b.n	800cbf2 <_strtoul_l.constprop.0+0x3e>
 800cc92:	bf00      	nop
 800cc94:	08010905 	.word	0x08010905

0800cc98 <_strtoul_r>:
 800cc98:	f7ff bf8c 	b.w	800cbb4 <_strtoul_l.constprop.0>

0800cc9c <__submore>:
 800cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	460c      	mov	r4, r1
 800cca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca8:	4299      	cmp	r1, r3
 800ccaa:	d11d      	bne.n	800cce8 <__submore+0x4c>
 800ccac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ccb0:	f7fd fa4a 	bl	800a148 <_malloc_r>
 800ccb4:	b918      	cbnz	r0, 800ccbe <__submore+0x22>
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccc2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ccc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ccc8:	6360      	str	r0, [r4, #52]	; 0x34
 800ccca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ccce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ccd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ccd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ccda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ccde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cce2:	6020      	str	r0, [r4, #0]
 800cce4:	2000      	movs	r0, #0
 800cce6:	e7e8      	b.n	800ccba <__submore+0x1e>
 800cce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ccea:	0077      	lsls	r7, r6, #1
 800ccec:	463a      	mov	r2, r7
 800ccee:	f000 fa25 	bl	800d13c <_realloc_r>
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d0de      	beq.n	800ccb6 <__submore+0x1a>
 800ccf8:	eb00 0806 	add.w	r8, r0, r6
 800ccfc:	4601      	mov	r1, r0
 800ccfe:	4632      	mov	r2, r6
 800cd00:	4640      	mov	r0, r8
 800cd02:	f7fe fe55 	bl	800b9b0 <memcpy>
 800cd06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd0a:	f8c4 8000 	str.w	r8, [r4]
 800cd0e:	e7e9      	b.n	800cce4 <__submore+0x48>

0800cd10 <__assert_func>:
 800cd10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd12:	4614      	mov	r4, r2
 800cd14:	461a      	mov	r2, r3
 800cd16:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <__assert_func+0x2c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	68d8      	ldr	r0, [r3, #12]
 800cd1e:	b14c      	cbz	r4, 800cd34 <__assert_func+0x24>
 800cd20:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <__assert_func+0x30>)
 800cd22:	9100      	str	r1, [sp, #0]
 800cd24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd28:	4906      	ldr	r1, [pc, #24]	; (800cd44 <__assert_func+0x34>)
 800cd2a:	462b      	mov	r3, r5
 800cd2c:	f000 f9a6 	bl	800d07c <fiprintf>
 800cd30:	f000 fc5a 	bl	800d5e8 <abort>
 800cd34:	4b04      	ldr	r3, [pc, #16]	; (800cd48 <__assert_func+0x38>)
 800cd36:	461c      	mov	r4, r3
 800cd38:	e7f3      	b.n	800cd22 <__assert_func+0x12>
 800cd3a:	bf00      	nop
 800cd3c:	20000014 	.word	0x20000014
 800cd40:	080108c8 	.word	0x080108c8
 800cd44:	080108d5 	.word	0x080108d5
 800cd48:	08010903 	.word	0x08010903

0800cd4c <__sflush_r>:
 800cd4c:	898a      	ldrh	r2, [r1, #12]
 800cd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd52:	4605      	mov	r5, r0
 800cd54:	0710      	lsls	r0, r2, #28
 800cd56:	460c      	mov	r4, r1
 800cd58:	d458      	bmi.n	800ce0c <__sflush_r+0xc0>
 800cd5a:	684b      	ldr	r3, [r1, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dc05      	bgt.n	800cd6c <__sflush_r+0x20>
 800cd60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	dc02      	bgt.n	800cd6c <__sflush_r+0x20>
 800cd66:	2000      	movs	r0, #0
 800cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd6e:	2e00      	cmp	r6, #0
 800cd70:	d0f9      	beq.n	800cd66 <__sflush_r+0x1a>
 800cd72:	2300      	movs	r3, #0
 800cd74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd78:	682f      	ldr	r7, [r5, #0]
 800cd7a:	602b      	str	r3, [r5, #0]
 800cd7c:	d032      	beq.n	800cde4 <__sflush_r+0x98>
 800cd7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	075a      	lsls	r2, r3, #29
 800cd84:	d505      	bpl.n	800cd92 <__sflush_r+0x46>
 800cd86:	6863      	ldr	r3, [r4, #4]
 800cd88:	1ac0      	subs	r0, r0, r3
 800cd8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd8c:	b10b      	cbz	r3, 800cd92 <__sflush_r+0x46>
 800cd8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd90:	1ac0      	subs	r0, r0, r3
 800cd92:	2300      	movs	r3, #0
 800cd94:	4602      	mov	r2, r0
 800cd96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd98:	6a21      	ldr	r1, [r4, #32]
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	47b0      	blx	r6
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	d106      	bne.n	800cdb2 <__sflush_r+0x66>
 800cda4:	6829      	ldr	r1, [r5, #0]
 800cda6:	291d      	cmp	r1, #29
 800cda8:	d82c      	bhi.n	800ce04 <__sflush_r+0xb8>
 800cdaa:	4a2a      	ldr	r2, [pc, #168]	; (800ce54 <__sflush_r+0x108>)
 800cdac:	40ca      	lsrs	r2, r1
 800cdae:	07d6      	lsls	r6, r2, #31
 800cdb0:	d528      	bpl.n	800ce04 <__sflush_r+0xb8>
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	6062      	str	r2, [r4, #4]
 800cdb6:	04d9      	lsls	r1, r3, #19
 800cdb8:	6922      	ldr	r2, [r4, #16]
 800cdba:	6022      	str	r2, [r4, #0]
 800cdbc:	d504      	bpl.n	800cdc8 <__sflush_r+0x7c>
 800cdbe:	1c42      	adds	r2, r0, #1
 800cdc0:	d101      	bne.n	800cdc6 <__sflush_r+0x7a>
 800cdc2:	682b      	ldr	r3, [r5, #0]
 800cdc4:	b903      	cbnz	r3, 800cdc8 <__sflush_r+0x7c>
 800cdc6:	6560      	str	r0, [r4, #84]	; 0x54
 800cdc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdca:	602f      	str	r7, [r5, #0]
 800cdcc:	2900      	cmp	r1, #0
 800cdce:	d0ca      	beq.n	800cd66 <__sflush_r+0x1a>
 800cdd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdd4:	4299      	cmp	r1, r3
 800cdd6:	d002      	beq.n	800cdde <__sflush_r+0x92>
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f7fd f949 	bl	800a070 <_free_r>
 800cdde:	2000      	movs	r0, #0
 800cde0:	6360      	str	r0, [r4, #52]	; 0x34
 800cde2:	e7c1      	b.n	800cd68 <__sflush_r+0x1c>
 800cde4:	6a21      	ldr	r1, [r4, #32]
 800cde6:	2301      	movs	r3, #1
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b0      	blx	r6
 800cdec:	1c41      	adds	r1, r0, #1
 800cdee:	d1c7      	bne.n	800cd80 <__sflush_r+0x34>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0c4      	beq.n	800cd80 <__sflush_r+0x34>
 800cdf6:	2b1d      	cmp	r3, #29
 800cdf8:	d001      	beq.n	800cdfe <__sflush_r+0xb2>
 800cdfa:	2b16      	cmp	r3, #22
 800cdfc:	d101      	bne.n	800ce02 <__sflush_r+0xb6>
 800cdfe:	602f      	str	r7, [r5, #0]
 800ce00:	e7b1      	b.n	800cd66 <__sflush_r+0x1a>
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	e7ad      	b.n	800cd68 <__sflush_r+0x1c>
 800ce0c:	690f      	ldr	r7, [r1, #16]
 800ce0e:	2f00      	cmp	r7, #0
 800ce10:	d0a9      	beq.n	800cd66 <__sflush_r+0x1a>
 800ce12:	0793      	lsls	r3, r2, #30
 800ce14:	680e      	ldr	r6, [r1, #0]
 800ce16:	bf08      	it	eq
 800ce18:	694b      	ldreq	r3, [r1, #20]
 800ce1a:	600f      	str	r7, [r1, #0]
 800ce1c:	bf18      	it	ne
 800ce1e:	2300      	movne	r3, #0
 800ce20:	eba6 0807 	sub.w	r8, r6, r7
 800ce24:	608b      	str	r3, [r1, #8]
 800ce26:	f1b8 0f00 	cmp.w	r8, #0
 800ce2a:	dd9c      	ble.n	800cd66 <__sflush_r+0x1a>
 800ce2c:	6a21      	ldr	r1, [r4, #32]
 800ce2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce30:	4643      	mov	r3, r8
 800ce32:	463a      	mov	r2, r7
 800ce34:	4628      	mov	r0, r5
 800ce36:	47b0      	blx	r6
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	dc06      	bgt.n	800ce4a <__sflush_r+0xfe>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	f04f 30ff 	mov.w	r0, #4294967295
 800ce48:	e78e      	b.n	800cd68 <__sflush_r+0x1c>
 800ce4a:	4407      	add	r7, r0
 800ce4c:	eba8 0800 	sub.w	r8, r8, r0
 800ce50:	e7e9      	b.n	800ce26 <__sflush_r+0xda>
 800ce52:	bf00      	nop
 800ce54:	20400001 	.word	0x20400001

0800ce58 <_fflush_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	690b      	ldr	r3, [r1, #16]
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	b913      	cbnz	r3, 800ce68 <_fflush_r+0x10>
 800ce62:	2500      	movs	r5, #0
 800ce64:	4628      	mov	r0, r5
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	b118      	cbz	r0, 800ce72 <_fflush_r+0x1a>
 800ce6a:	6983      	ldr	r3, [r0, #24]
 800ce6c:	b90b      	cbnz	r3, 800ce72 <_fflush_r+0x1a>
 800ce6e:	f000 f887 	bl	800cf80 <__sinit>
 800ce72:	4b14      	ldr	r3, [pc, #80]	; (800cec4 <_fflush_r+0x6c>)
 800ce74:	429c      	cmp	r4, r3
 800ce76:	d11b      	bne.n	800ceb0 <_fflush_r+0x58>
 800ce78:	686c      	ldr	r4, [r5, #4]
 800ce7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0ef      	beq.n	800ce62 <_fflush_r+0xa>
 800ce82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce84:	07d0      	lsls	r0, r2, #31
 800ce86:	d404      	bmi.n	800ce92 <_fflush_r+0x3a>
 800ce88:	0599      	lsls	r1, r3, #22
 800ce8a:	d402      	bmi.n	800ce92 <_fflush_r+0x3a>
 800ce8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce8e:	f000 f927 	bl	800d0e0 <__retarget_lock_acquire_recursive>
 800ce92:	4628      	mov	r0, r5
 800ce94:	4621      	mov	r1, r4
 800ce96:	f7ff ff59 	bl	800cd4c <__sflush_r>
 800ce9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce9c:	07da      	lsls	r2, r3, #31
 800ce9e:	4605      	mov	r5, r0
 800cea0:	d4e0      	bmi.n	800ce64 <_fflush_r+0xc>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	059b      	lsls	r3, r3, #22
 800cea6:	d4dd      	bmi.n	800ce64 <_fflush_r+0xc>
 800cea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceaa:	f000 f91a 	bl	800d0e2 <__retarget_lock_release_recursive>
 800ceae:	e7d9      	b.n	800ce64 <_fflush_r+0xc>
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <_fflush_r+0x70>)
 800ceb2:	429c      	cmp	r4, r3
 800ceb4:	d101      	bne.n	800ceba <_fflush_r+0x62>
 800ceb6:	68ac      	ldr	r4, [r5, #8]
 800ceb8:	e7df      	b.n	800ce7a <_fflush_r+0x22>
 800ceba:	4b04      	ldr	r3, [pc, #16]	; (800cecc <_fflush_r+0x74>)
 800cebc:	429c      	cmp	r4, r3
 800cebe:	bf08      	it	eq
 800cec0:	68ec      	ldreq	r4, [r5, #12]
 800cec2:	e7da      	b.n	800ce7a <_fflush_r+0x22>
 800cec4:	08010a28 	.word	0x08010a28
 800cec8:	08010a48 	.word	0x08010a48
 800cecc:	08010a08 	.word	0x08010a08

0800ced0 <std>:
 800ced0:	2300      	movs	r3, #0
 800ced2:	b510      	push	{r4, lr}
 800ced4:	4604      	mov	r4, r0
 800ced6:	e9c0 3300 	strd	r3, r3, [r0]
 800ceda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cede:	6083      	str	r3, [r0, #8]
 800cee0:	8181      	strh	r1, [r0, #12]
 800cee2:	6643      	str	r3, [r0, #100]	; 0x64
 800cee4:	81c2      	strh	r2, [r0, #14]
 800cee6:	6183      	str	r3, [r0, #24]
 800cee8:	4619      	mov	r1, r3
 800ceea:	2208      	movs	r2, #8
 800ceec:	305c      	adds	r0, #92	; 0x5c
 800ceee:	f7fd f8b7 	bl	800a060 <memset>
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <std+0x38>)
 800cef4:	6263      	str	r3, [r4, #36]	; 0x24
 800cef6:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <std+0x3c>)
 800cef8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <std+0x40>)
 800cefc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cefe:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <std+0x44>)
 800cf00:	6224      	str	r4, [r4, #32]
 800cf02:	6323      	str	r3, [r4, #48]	; 0x30
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	bf00      	nop
 800cf08:	0800abbd 	.word	0x0800abbd
 800cf0c:	0800abe3 	.word	0x0800abe3
 800cf10:	0800ac1b 	.word	0x0800ac1b
 800cf14:	0800ac3f 	.word	0x0800ac3f

0800cf18 <_cleanup_r>:
 800cf18:	4901      	ldr	r1, [pc, #4]	; (800cf20 <_cleanup_r+0x8>)
 800cf1a:	f000 b8c1 	b.w	800d0a0 <_fwalk_reent>
 800cf1e:	bf00      	nop
 800cf20:	0800ce59 	.word	0x0800ce59

0800cf24 <__sfmoreglue>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	2268      	movs	r2, #104	; 0x68
 800cf28:	1e4d      	subs	r5, r1, #1
 800cf2a:	4355      	muls	r5, r2
 800cf2c:	460e      	mov	r6, r1
 800cf2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf32:	f7fd f909 	bl	800a148 <_malloc_r>
 800cf36:	4604      	mov	r4, r0
 800cf38:	b140      	cbz	r0, 800cf4c <__sfmoreglue+0x28>
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf40:	300c      	adds	r0, #12
 800cf42:	60a0      	str	r0, [r4, #8]
 800cf44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf48:	f7fd f88a 	bl	800a060 <memset>
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}

0800cf50 <__sfp_lock_acquire>:
 800cf50:	4801      	ldr	r0, [pc, #4]	; (800cf58 <__sfp_lock_acquire+0x8>)
 800cf52:	f000 b8c5 	b.w	800d0e0 <__retarget_lock_acquire_recursive>
 800cf56:	bf00      	nop
 800cf58:	20012279 	.word	0x20012279

0800cf5c <__sfp_lock_release>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	; (800cf64 <__sfp_lock_release+0x8>)
 800cf5e:	f000 b8c0 	b.w	800d0e2 <__retarget_lock_release_recursive>
 800cf62:	bf00      	nop
 800cf64:	20012279 	.word	0x20012279

0800cf68 <__sinit_lock_acquire>:
 800cf68:	4801      	ldr	r0, [pc, #4]	; (800cf70 <__sinit_lock_acquire+0x8>)
 800cf6a:	f000 b8b9 	b.w	800d0e0 <__retarget_lock_acquire_recursive>
 800cf6e:	bf00      	nop
 800cf70:	2001227a 	.word	0x2001227a

0800cf74 <__sinit_lock_release>:
 800cf74:	4801      	ldr	r0, [pc, #4]	; (800cf7c <__sinit_lock_release+0x8>)
 800cf76:	f000 b8b4 	b.w	800d0e2 <__retarget_lock_release_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	2001227a 	.word	0x2001227a

0800cf80 <__sinit>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	4604      	mov	r4, r0
 800cf84:	f7ff fff0 	bl	800cf68 <__sinit_lock_acquire>
 800cf88:	69a3      	ldr	r3, [r4, #24]
 800cf8a:	b11b      	cbz	r3, 800cf94 <__sinit+0x14>
 800cf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf90:	f7ff bff0 	b.w	800cf74 <__sinit_lock_release>
 800cf94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf98:	6523      	str	r3, [r4, #80]	; 0x50
 800cf9a:	4b13      	ldr	r3, [pc, #76]	; (800cfe8 <__sinit+0x68>)
 800cf9c:	4a13      	ldr	r2, [pc, #76]	; (800cfec <__sinit+0x6c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	bf04      	itt	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	61a3      	streq	r3, [r4, #24]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 f820 	bl	800cff0 <__sfp>
 800cfb0:	6060      	str	r0, [r4, #4]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 f81c 	bl	800cff0 <__sfp>
 800cfb8:	60a0      	str	r0, [r4, #8]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 f818 	bl	800cff0 <__sfp>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	60e0      	str	r0, [r4, #12]
 800cfc4:	2104      	movs	r1, #4
 800cfc6:	6860      	ldr	r0, [r4, #4]
 800cfc8:	f7ff ff82 	bl	800ced0 <std>
 800cfcc:	68a0      	ldr	r0, [r4, #8]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	2109      	movs	r1, #9
 800cfd2:	f7ff ff7d 	bl	800ced0 <std>
 800cfd6:	68e0      	ldr	r0, [r4, #12]
 800cfd8:	2202      	movs	r2, #2
 800cfda:	2112      	movs	r1, #18
 800cfdc:	f7ff ff78 	bl	800ced0 <std>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	61a3      	str	r3, [r4, #24]
 800cfe4:	e7d2      	b.n	800cf8c <__sinit+0xc>
 800cfe6:	bf00      	nop
 800cfe8:	0801067c 	.word	0x0801067c
 800cfec:	0800cf19 	.word	0x0800cf19

0800cff0 <__sfp>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	4607      	mov	r7, r0
 800cff4:	f7ff ffac 	bl	800cf50 <__sfp_lock_acquire>
 800cff8:	4b1e      	ldr	r3, [pc, #120]	; (800d074 <__sfp+0x84>)
 800cffa:	681e      	ldr	r6, [r3, #0]
 800cffc:	69b3      	ldr	r3, [r6, #24]
 800cffe:	b913      	cbnz	r3, 800d006 <__sfp+0x16>
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff ffbd 	bl	800cf80 <__sinit>
 800d006:	3648      	adds	r6, #72	; 0x48
 800d008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	d503      	bpl.n	800d018 <__sfp+0x28>
 800d010:	6833      	ldr	r3, [r6, #0]
 800d012:	b30b      	cbz	r3, 800d058 <__sfp+0x68>
 800d014:	6836      	ldr	r6, [r6, #0]
 800d016:	e7f7      	b.n	800d008 <__sfp+0x18>
 800d018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d01c:	b9d5      	cbnz	r5, 800d054 <__sfp+0x64>
 800d01e:	4b16      	ldr	r3, [pc, #88]	; (800d078 <__sfp+0x88>)
 800d020:	60e3      	str	r3, [r4, #12]
 800d022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d026:	6665      	str	r5, [r4, #100]	; 0x64
 800d028:	f000 f859 	bl	800d0de <__retarget_lock_init_recursive>
 800d02c:	f7ff ff96 	bl	800cf5c <__sfp_lock_release>
 800d030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d038:	6025      	str	r5, [r4, #0]
 800d03a:	61a5      	str	r5, [r4, #24]
 800d03c:	2208      	movs	r2, #8
 800d03e:	4629      	mov	r1, r5
 800d040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d044:	f7fd f80c 	bl	800a060 <memset>
 800d048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d04c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d050:	4620      	mov	r0, r4
 800d052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d054:	3468      	adds	r4, #104	; 0x68
 800d056:	e7d9      	b.n	800d00c <__sfp+0x1c>
 800d058:	2104      	movs	r1, #4
 800d05a:	4638      	mov	r0, r7
 800d05c:	f7ff ff62 	bl	800cf24 <__sfmoreglue>
 800d060:	4604      	mov	r4, r0
 800d062:	6030      	str	r0, [r6, #0]
 800d064:	2800      	cmp	r0, #0
 800d066:	d1d5      	bne.n	800d014 <__sfp+0x24>
 800d068:	f7ff ff78 	bl	800cf5c <__sfp_lock_release>
 800d06c:	230c      	movs	r3, #12
 800d06e:	603b      	str	r3, [r7, #0]
 800d070:	e7ee      	b.n	800d050 <__sfp+0x60>
 800d072:	bf00      	nop
 800d074:	0801067c 	.word	0x0801067c
 800d078:	ffff0001 	.word	0xffff0001

0800d07c <fiprintf>:
 800d07c:	b40e      	push	{r1, r2, r3}
 800d07e:	b503      	push	{r0, r1, lr}
 800d080:	4601      	mov	r1, r0
 800d082:	ab03      	add	r3, sp, #12
 800d084:	4805      	ldr	r0, [pc, #20]	; (800d09c <fiprintf+0x20>)
 800d086:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08a:	6800      	ldr	r0, [r0, #0]
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	f000 f8ad 	bl	800d1ec <_vfiprintf_r>
 800d092:	b002      	add	sp, #8
 800d094:	f85d eb04 	ldr.w	lr, [sp], #4
 800d098:	b003      	add	sp, #12
 800d09a:	4770      	bx	lr
 800d09c:	20000014 	.word	0x20000014

0800d0a0 <_fwalk_reent>:
 800d0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	4688      	mov	r8, r1
 800d0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0ac:	2700      	movs	r7, #0
 800d0ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b6:	d505      	bpl.n	800d0c4 <_fwalk_reent+0x24>
 800d0b8:	6824      	ldr	r4, [r4, #0]
 800d0ba:	2c00      	cmp	r4, #0
 800d0bc:	d1f7      	bne.n	800d0ae <_fwalk_reent+0xe>
 800d0be:	4638      	mov	r0, r7
 800d0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	89ab      	ldrh	r3, [r5, #12]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d907      	bls.n	800d0da <_fwalk_reent+0x3a>
 800d0ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	d003      	beq.n	800d0da <_fwalk_reent+0x3a>
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	47c0      	blx	r8
 800d0d8:	4307      	orrs	r7, r0
 800d0da:	3568      	adds	r5, #104	; 0x68
 800d0dc:	e7e9      	b.n	800d0b2 <_fwalk_reent+0x12>

0800d0de <__retarget_lock_init_recursive>:
 800d0de:	4770      	bx	lr

0800d0e0 <__retarget_lock_acquire_recursive>:
 800d0e0:	4770      	bx	lr

0800d0e2 <__retarget_lock_release_recursive>:
 800d0e2:	4770      	bx	lr

0800d0e4 <__ascii_mbtowc>:
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	b901      	cbnz	r1, 800d0ea <__ascii_mbtowc+0x6>
 800d0e8:	a901      	add	r1, sp, #4
 800d0ea:	b142      	cbz	r2, 800d0fe <__ascii_mbtowc+0x1a>
 800d0ec:	b14b      	cbz	r3, 800d102 <__ascii_mbtowc+0x1e>
 800d0ee:	7813      	ldrb	r3, [r2, #0]
 800d0f0:	600b      	str	r3, [r1, #0]
 800d0f2:	7812      	ldrb	r2, [r2, #0]
 800d0f4:	1e10      	subs	r0, r2, #0
 800d0f6:	bf18      	it	ne
 800d0f8:	2001      	movne	r0, #1
 800d0fa:	b002      	add	sp, #8
 800d0fc:	4770      	bx	lr
 800d0fe:	4610      	mov	r0, r2
 800d100:	e7fb      	b.n	800d0fa <__ascii_mbtowc+0x16>
 800d102:	f06f 0001 	mvn.w	r0, #1
 800d106:	e7f8      	b.n	800d0fa <__ascii_mbtowc+0x16>

0800d108 <memmove>:
 800d108:	4288      	cmp	r0, r1
 800d10a:	b510      	push	{r4, lr}
 800d10c:	eb01 0402 	add.w	r4, r1, r2
 800d110:	d902      	bls.n	800d118 <memmove+0x10>
 800d112:	4284      	cmp	r4, r0
 800d114:	4623      	mov	r3, r4
 800d116:	d807      	bhi.n	800d128 <memmove+0x20>
 800d118:	1e43      	subs	r3, r0, #1
 800d11a:	42a1      	cmp	r1, r4
 800d11c:	d008      	beq.n	800d130 <memmove+0x28>
 800d11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d126:	e7f8      	b.n	800d11a <memmove+0x12>
 800d128:	4402      	add	r2, r0
 800d12a:	4601      	mov	r1, r0
 800d12c:	428a      	cmp	r2, r1
 800d12e:	d100      	bne.n	800d132 <memmove+0x2a>
 800d130:	bd10      	pop	{r4, pc}
 800d132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d13a:	e7f7      	b.n	800d12c <memmove+0x24>

0800d13c <_realloc_r>:
 800d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d140:	4680      	mov	r8, r0
 800d142:	4614      	mov	r4, r2
 800d144:	460e      	mov	r6, r1
 800d146:	b921      	cbnz	r1, 800d152 <_realloc_r+0x16>
 800d148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	4611      	mov	r1, r2
 800d14e:	f7fc bffb 	b.w	800a148 <_malloc_r>
 800d152:	b92a      	cbnz	r2, 800d160 <_realloc_r+0x24>
 800d154:	f7fc ff8c 	bl	800a070 <_free_r>
 800d158:	4625      	mov	r5, r4
 800d15a:	4628      	mov	r0, r5
 800d15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d160:	f000 faae 	bl	800d6c0 <_malloc_usable_size_r>
 800d164:	4284      	cmp	r4, r0
 800d166:	4607      	mov	r7, r0
 800d168:	d802      	bhi.n	800d170 <_realloc_r+0x34>
 800d16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d16e:	d812      	bhi.n	800d196 <_realloc_r+0x5a>
 800d170:	4621      	mov	r1, r4
 800d172:	4640      	mov	r0, r8
 800d174:	f7fc ffe8 	bl	800a148 <_malloc_r>
 800d178:	4605      	mov	r5, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0ed      	beq.n	800d15a <_realloc_r+0x1e>
 800d17e:	42bc      	cmp	r4, r7
 800d180:	4622      	mov	r2, r4
 800d182:	4631      	mov	r1, r6
 800d184:	bf28      	it	cs
 800d186:	463a      	movcs	r2, r7
 800d188:	f7fe fc12 	bl	800b9b0 <memcpy>
 800d18c:	4631      	mov	r1, r6
 800d18e:	4640      	mov	r0, r8
 800d190:	f7fc ff6e 	bl	800a070 <_free_r>
 800d194:	e7e1      	b.n	800d15a <_realloc_r+0x1e>
 800d196:	4635      	mov	r5, r6
 800d198:	e7df      	b.n	800d15a <_realloc_r+0x1e>

0800d19a <__sfputc_r>:
 800d19a:	6893      	ldr	r3, [r2, #8]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	b410      	push	{r4}
 800d1a2:	6093      	str	r3, [r2, #8]
 800d1a4:	da08      	bge.n	800d1b8 <__sfputc_r+0x1e>
 800d1a6:	6994      	ldr	r4, [r2, #24]
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	db01      	blt.n	800d1b0 <__sfputc_r+0x16>
 800d1ac:	290a      	cmp	r1, #10
 800d1ae:	d103      	bne.n	800d1b8 <__sfputc_r+0x1e>
 800d1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b4:	f000 b94a 	b.w	800d44c <__swbuf_r>
 800d1b8:	6813      	ldr	r3, [r2, #0]
 800d1ba:	1c58      	adds	r0, r3, #1
 800d1bc:	6010      	str	r0, [r2, #0]
 800d1be:	7019      	strb	r1, [r3, #0]
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <__sfputs_r>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	460f      	mov	r7, r1
 800d1ce:	4614      	mov	r4, r2
 800d1d0:	18d5      	adds	r5, r2, r3
 800d1d2:	42ac      	cmp	r4, r5
 800d1d4:	d101      	bne.n	800d1da <__sfputs_r+0x12>
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	e007      	b.n	800d1ea <__sfputs_r+0x22>
 800d1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1de:	463a      	mov	r2, r7
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7ff ffda 	bl	800d19a <__sfputc_r>
 800d1e6:	1c43      	adds	r3, r0, #1
 800d1e8:	d1f3      	bne.n	800d1d2 <__sfputs_r+0xa>
 800d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1ec <_vfiprintf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	b09d      	sub	sp, #116	; 0x74
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	4698      	mov	r8, r3
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b118      	cbz	r0, 800d204 <_vfiprintf_r+0x18>
 800d1fc:	6983      	ldr	r3, [r0, #24]
 800d1fe:	b90b      	cbnz	r3, 800d204 <_vfiprintf_r+0x18>
 800d200:	f7ff febe 	bl	800cf80 <__sinit>
 800d204:	4b89      	ldr	r3, [pc, #548]	; (800d42c <_vfiprintf_r+0x240>)
 800d206:	429d      	cmp	r5, r3
 800d208:	d11b      	bne.n	800d242 <_vfiprintf_r+0x56>
 800d20a:	6875      	ldr	r5, [r6, #4]
 800d20c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d20e:	07d9      	lsls	r1, r3, #31
 800d210:	d405      	bmi.n	800d21e <_vfiprintf_r+0x32>
 800d212:	89ab      	ldrh	r3, [r5, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d402      	bmi.n	800d21e <_vfiprintf_r+0x32>
 800d218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d21a:	f7ff ff61 	bl	800d0e0 <__retarget_lock_acquire_recursive>
 800d21e:	89ab      	ldrh	r3, [r5, #12]
 800d220:	071b      	lsls	r3, r3, #28
 800d222:	d501      	bpl.n	800d228 <_vfiprintf_r+0x3c>
 800d224:	692b      	ldr	r3, [r5, #16]
 800d226:	b9eb      	cbnz	r3, 800d264 <_vfiprintf_r+0x78>
 800d228:	4629      	mov	r1, r5
 800d22a:	4630      	mov	r0, r6
 800d22c:	f000 f96e 	bl	800d50c <__swsetup_r>
 800d230:	b1c0      	cbz	r0, 800d264 <_vfiprintf_r+0x78>
 800d232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d234:	07dc      	lsls	r4, r3, #31
 800d236:	d50e      	bpl.n	800d256 <_vfiprintf_r+0x6a>
 800d238:	f04f 30ff 	mov.w	r0, #4294967295
 800d23c:	b01d      	add	sp, #116	; 0x74
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	4b7b      	ldr	r3, [pc, #492]	; (800d430 <_vfiprintf_r+0x244>)
 800d244:	429d      	cmp	r5, r3
 800d246:	d101      	bne.n	800d24c <_vfiprintf_r+0x60>
 800d248:	68b5      	ldr	r5, [r6, #8]
 800d24a:	e7df      	b.n	800d20c <_vfiprintf_r+0x20>
 800d24c:	4b79      	ldr	r3, [pc, #484]	; (800d434 <_vfiprintf_r+0x248>)
 800d24e:	429d      	cmp	r5, r3
 800d250:	bf08      	it	eq
 800d252:	68f5      	ldreq	r5, [r6, #12]
 800d254:	e7da      	b.n	800d20c <_vfiprintf_r+0x20>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	0598      	lsls	r0, r3, #22
 800d25a:	d4ed      	bmi.n	800d238 <_vfiprintf_r+0x4c>
 800d25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25e:	f7ff ff40 	bl	800d0e2 <__retarget_lock_release_recursive>
 800d262:	e7e9      	b.n	800d238 <_vfiprintf_r+0x4c>
 800d264:	2300      	movs	r3, #0
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	2320      	movs	r3, #32
 800d26a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d26e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d272:	2330      	movs	r3, #48	; 0x30
 800d274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d438 <_vfiprintf_r+0x24c>
 800d278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d27c:	f04f 0901 	mov.w	r9, #1
 800d280:	4623      	mov	r3, r4
 800d282:	469a      	mov	sl, r3
 800d284:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d288:	b10a      	cbz	r2, 800d28e <_vfiprintf_r+0xa2>
 800d28a:	2a25      	cmp	r2, #37	; 0x25
 800d28c:	d1f9      	bne.n	800d282 <_vfiprintf_r+0x96>
 800d28e:	ebba 0b04 	subs.w	fp, sl, r4
 800d292:	d00b      	beq.n	800d2ac <_vfiprintf_r+0xc0>
 800d294:	465b      	mov	r3, fp
 800d296:	4622      	mov	r2, r4
 800d298:	4629      	mov	r1, r5
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7ff ff94 	bl	800d1c8 <__sfputs_r>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	f000 80aa 	beq.w	800d3fa <_vfiprintf_r+0x20e>
 800d2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a8:	445a      	add	r2, fp
 800d2aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 80a2 	beq.w	800d3fa <_vfiprintf_r+0x20e>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2c0:	f10a 0a01 	add.w	sl, sl, #1
 800d2c4:	9304      	str	r3, [sp, #16]
 800d2c6:	9307      	str	r3, [sp, #28]
 800d2c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d2ce:	4654      	mov	r4, sl
 800d2d0:	2205      	movs	r2, #5
 800d2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d6:	4858      	ldr	r0, [pc, #352]	; (800d438 <_vfiprintf_r+0x24c>)
 800d2d8:	f7f2 ff9a 	bl	8000210 <memchr>
 800d2dc:	9a04      	ldr	r2, [sp, #16]
 800d2de:	b9d8      	cbnz	r0, 800d318 <_vfiprintf_r+0x12c>
 800d2e0:	06d1      	lsls	r1, r2, #27
 800d2e2:	bf44      	itt	mi
 800d2e4:	2320      	movmi	r3, #32
 800d2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ea:	0713      	lsls	r3, r2, #28
 800d2ec:	bf44      	itt	mi
 800d2ee:	232b      	movmi	r3, #43	; 0x2b
 800d2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2fa:	d015      	beq.n	800d328 <_vfiprintf_r+0x13c>
 800d2fc:	9a07      	ldr	r2, [sp, #28]
 800d2fe:	4654      	mov	r4, sl
 800d300:	2000      	movs	r0, #0
 800d302:	f04f 0c0a 	mov.w	ip, #10
 800d306:	4621      	mov	r1, r4
 800d308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d30c:	3b30      	subs	r3, #48	; 0x30
 800d30e:	2b09      	cmp	r3, #9
 800d310:	d94e      	bls.n	800d3b0 <_vfiprintf_r+0x1c4>
 800d312:	b1b0      	cbz	r0, 800d342 <_vfiprintf_r+0x156>
 800d314:	9207      	str	r2, [sp, #28]
 800d316:	e014      	b.n	800d342 <_vfiprintf_r+0x156>
 800d318:	eba0 0308 	sub.w	r3, r0, r8
 800d31c:	fa09 f303 	lsl.w	r3, r9, r3
 800d320:	4313      	orrs	r3, r2
 800d322:	9304      	str	r3, [sp, #16]
 800d324:	46a2      	mov	sl, r4
 800d326:	e7d2      	b.n	800d2ce <_vfiprintf_r+0xe2>
 800d328:	9b03      	ldr	r3, [sp, #12]
 800d32a:	1d19      	adds	r1, r3, #4
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	9103      	str	r1, [sp, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	bfbb      	ittet	lt
 800d334:	425b      	neglt	r3, r3
 800d336:	f042 0202 	orrlt.w	r2, r2, #2
 800d33a:	9307      	strge	r3, [sp, #28]
 800d33c:	9307      	strlt	r3, [sp, #28]
 800d33e:	bfb8      	it	lt
 800d340:	9204      	strlt	r2, [sp, #16]
 800d342:	7823      	ldrb	r3, [r4, #0]
 800d344:	2b2e      	cmp	r3, #46	; 0x2e
 800d346:	d10c      	bne.n	800d362 <_vfiprintf_r+0x176>
 800d348:	7863      	ldrb	r3, [r4, #1]
 800d34a:	2b2a      	cmp	r3, #42	; 0x2a
 800d34c:	d135      	bne.n	800d3ba <_vfiprintf_r+0x1ce>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	1d1a      	adds	r2, r3, #4
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	9203      	str	r2, [sp, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	bfb8      	it	lt
 800d35a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d35e:	3402      	adds	r4, #2
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d448 <_vfiprintf_r+0x25c>
 800d366:	7821      	ldrb	r1, [r4, #0]
 800d368:	2203      	movs	r2, #3
 800d36a:	4650      	mov	r0, sl
 800d36c:	f7f2 ff50 	bl	8000210 <memchr>
 800d370:	b140      	cbz	r0, 800d384 <_vfiprintf_r+0x198>
 800d372:	2340      	movs	r3, #64	; 0x40
 800d374:	eba0 000a 	sub.w	r0, r0, sl
 800d378:	fa03 f000 	lsl.w	r0, r3, r0
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	4303      	orrs	r3, r0
 800d380:	3401      	adds	r4, #1
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d388:	482c      	ldr	r0, [pc, #176]	; (800d43c <_vfiprintf_r+0x250>)
 800d38a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d38e:	2206      	movs	r2, #6
 800d390:	f7f2 ff3e 	bl	8000210 <memchr>
 800d394:	2800      	cmp	r0, #0
 800d396:	d03f      	beq.n	800d418 <_vfiprintf_r+0x22c>
 800d398:	4b29      	ldr	r3, [pc, #164]	; (800d440 <_vfiprintf_r+0x254>)
 800d39a:	bb1b      	cbnz	r3, 800d3e4 <_vfiprintf_r+0x1f8>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	3307      	adds	r3, #7
 800d3a0:	f023 0307 	bic.w	r3, r3, #7
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	9303      	str	r3, [sp, #12]
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	443b      	add	r3, r7
 800d3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ae:	e767      	b.n	800d280 <_vfiprintf_r+0x94>
 800d3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	e7a5      	b.n	800d306 <_vfiprintf_r+0x11a>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	3401      	adds	r4, #1
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	f04f 0c0a 	mov.w	ip, #10
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3cc:	3a30      	subs	r2, #48	; 0x30
 800d3ce:	2a09      	cmp	r2, #9
 800d3d0:	d903      	bls.n	800d3da <_vfiprintf_r+0x1ee>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c5      	beq.n	800d362 <_vfiprintf_r+0x176>
 800d3d6:	9105      	str	r1, [sp, #20]
 800d3d8:	e7c3      	b.n	800d362 <_vfiprintf_r+0x176>
 800d3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3de:	4604      	mov	r4, r0
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e7f0      	b.n	800d3c6 <_vfiprintf_r+0x1da>
 800d3e4:	ab03      	add	r3, sp, #12
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	462a      	mov	r2, r5
 800d3ea:	4b16      	ldr	r3, [pc, #88]	; (800d444 <_vfiprintf_r+0x258>)
 800d3ec:	a904      	add	r1, sp, #16
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7fc ffbe 	bl	800a370 <_printf_float>
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	1c78      	adds	r0, r7, #1
 800d3f8:	d1d6      	bne.n	800d3a8 <_vfiprintf_r+0x1bc>
 800d3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fc:	07d9      	lsls	r1, r3, #31
 800d3fe:	d405      	bmi.n	800d40c <_vfiprintf_r+0x220>
 800d400:	89ab      	ldrh	r3, [r5, #12]
 800d402:	059a      	lsls	r2, r3, #22
 800d404:	d402      	bmi.n	800d40c <_vfiprintf_r+0x220>
 800d406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d408:	f7ff fe6b 	bl	800d0e2 <__retarget_lock_release_recursive>
 800d40c:	89ab      	ldrh	r3, [r5, #12]
 800d40e:	065b      	lsls	r3, r3, #25
 800d410:	f53f af12 	bmi.w	800d238 <_vfiprintf_r+0x4c>
 800d414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d416:	e711      	b.n	800d23c <_vfiprintf_r+0x50>
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4b09      	ldr	r3, [pc, #36]	; (800d444 <_vfiprintf_r+0x258>)
 800d420:	a904      	add	r1, sp, #16
 800d422:	4630      	mov	r0, r6
 800d424:	f7fd fa48 	bl	800a8b8 <_printf_i>
 800d428:	e7e4      	b.n	800d3f4 <_vfiprintf_r+0x208>
 800d42a:	bf00      	nop
 800d42c:	08010a28 	.word	0x08010a28
 800d430:	08010a48 	.word	0x08010a48
 800d434:	08010a08 	.word	0x08010a08
 800d438:	0801089c 	.word	0x0801089c
 800d43c:	080108a6 	.word	0x080108a6
 800d440:	0800a371 	.word	0x0800a371
 800d444:	0800d1c9 	.word	0x0800d1c9
 800d448:	080108a2 	.word	0x080108a2

0800d44c <__swbuf_r>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	4605      	mov	r5, r0
 800d454:	b118      	cbz	r0, 800d45e <__swbuf_r+0x12>
 800d456:	6983      	ldr	r3, [r0, #24]
 800d458:	b90b      	cbnz	r3, 800d45e <__swbuf_r+0x12>
 800d45a:	f7ff fd91 	bl	800cf80 <__sinit>
 800d45e:	4b21      	ldr	r3, [pc, #132]	; (800d4e4 <__swbuf_r+0x98>)
 800d460:	429c      	cmp	r4, r3
 800d462:	d12b      	bne.n	800d4bc <__swbuf_r+0x70>
 800d464:	686c      	ldr	r4, [r5, #4]
 800d466:	69a3      	ldr	r3, [r4, #24]
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	071a      	lsls	r2, r3, #28
 800d46e:	d52f      	bpl.n	800d4d0 <__swbuf_r+0x84>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b36b      	cbz	r3, 800d4d0 <__swbuf_r+0x84>
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	1ac0      	subs	r0, r0, r3
 800d47a:	6963      	ldr	r3, [r4, #20]
 800d47c:	b2f6      	uxtb	r6, r6
 800d47e:	4283      	cmp	r3, r0
 800d480:	4637      	mov	r7, r6
 800d482:	dc04      	bgt.n	800d48e <__swbuf_r+0x42>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f7ff fce6 	bl	800ce58 <_fflush_r>
 800d48c:	bb30      	cbnz	r0, 800d4dc <__swbuf_r+0x90>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	3b01      	subs	r3, #1
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	701e      	strb	r6, [r3, #0]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	3001      	adds	r0, #1
 800d4a0:	4283      	cmp	r3, r0
 800d4a2:	d004      	beq.n	800d4ae <__swbuf_r+0x62>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	07db      	lsls	r3, r3, #31
 800d4a8:	d506      	bpl.n	800d4b8 <__swbuf_r+0x6c>
 800d4aa:	2e0a      	cmp	r6, #10
 800d4ac:	d104      	bne.n	800d4b8 <__swbuf_r+0x6c>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f7ff fcd1 	bl	800ce58 <_fflush_r>
 800d4b6:	b988      	cbnz	r0, 800d4dc <__swbuf_r+0x90>
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <__swbuf_r+0x9c>)
 800d4be:	429c      	cmp	r4, r3
 800d4c0:	d101      	bne.n	800d4c6 <__swbuf_r+0x7a>
 800d4c2:	68ac      	ldr	r4, [r5, #8]
 800d4c4:	e7cf      	b.n	800d466 <__swbuf_r+0x1a>
 800d4c6:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <__swbuf_r+0xa0>)
 800d4c8:	429c      	cmp	r4, r3
 800d4ca:	bf08      	it	eq
 800d4cc:	68ec      	ldreq	r4, [r5, #12]
 800d4ce:	e7ca      	b.n	800d466 <__swbuf_r+0x1a>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f000 f81a 	bl	800d50c <__swsetup_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d0cb      	beq.n	800d474 <__swbuf_r+0x28>
 800d4dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d4e0:	e7ea      	b.n	800d4b8 <__swbuf_r+0x6c>
 800d4e2:	bf00      	nop
 800d4e4:	08010a28 	.word	0x08010a28
 800d4e8:	08010a48 	.word	0x08010a48
 800d4ec:	08010a08 	.word	0x08010a08

0800d4f0 <__ascii_wctomb>:
 800d4f0:	b149      	cbz	r1, 800d506 <__ascii_wctomb+0x16>
 800d4f2:	2aff      	cmp	r2, #255	; 0xff
 800d4f4:	bf85      	ittet	hi
 800d4f6:	238a      	movhi	r3, #138	; 0x8a
 800d4f8:	6003      	strhi	r3, [r0, #0]
 800d4fa:	700a      	strbls	r2, [r1, #0]
 800d4fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d500:	bf98      	it	ls
 800d502:	2001      	movls	r0, #1
 800d504:	4770      	bx	lr
 800d506:	4608      	mov	r0, r1
 800d508:	4770      	bx	lr
	...

0800d50c <__swsetup_r>:
 800d50c:	4b32      	ldr	r3, [pc, #200]	; (800d5d8 <__swsetup_r+0xcc>)
 800d50e:	b570      	push	{r4, r5, r6, lr}
 800d510:	681d      	ldr	r5, [r3, #0]
 800d512:	4606      	mov	r6, r0
 800d514:	460c      	mov	r4, r1
 800d516:	b125      	cbz	r5, 800d522 <__swsetup_r+0x16>
 800d518:	69ab      	ldr	r3, [r5, #24]
 800d51a:	b913      	cbnz	r3, 800d522 <__swsetup_r+0x16>
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7ff fd2f 	bl	800cf80 <__sinit>
 800d522:	4b2e      	ldr	r3, [pc, #184]	; (800d5dc <__swsetup_r+0xd0>)
 800d524:	429c      	cmp	r4, r3
 800d526:	d10f      	bne.n	800d548 <__swsetup_r+0x3c>
 800d528:	686c      	ldr	r4, [r5, #4]
 800d52a:	89a3      	ldrh	r3, [r4, #12]
 800d52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d530:	0719      	lsls	r1, r3, #28
 800d532:	d42c      	bmi.n	800d58e <__swsetup_r+0x82>
 800d534:	06dd      	lsls	r5, r3, #27
 800d536:	d411      	bmi.n	800d55c <__swsetup_r+0x50>
 800d538:	2309      	movs	r3, #9
 800d53a:	6033      	str	r3, [r6, #0]
 800d53c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	e03e      	b.n	800d5c6 <__swsetup_r+0xba>
 800d548:	4b25      	ldr	r3, [pc, #148]	; (800d5e0 <__swsetup_r+0xd4>)
 800d54a:	429c      	cmp	r4, r3
 800d54c:	d101      	bne.n	800d552 <__swsetup_r+0x46>
 800d54e:	68ac      	ldr	r4, [r5, #8]
 800d550:	e7eb      	b.n	800d52a <__swsetup_r+0x1e>
 800d552:	4b24      	ldr	r3, [pc, #144]	; (800d5e4 <__swsetup_r+0xd8>)
 800d554:	429c      	cmp	r4, r3
 800d556:	bf08      	it	eq
 800d558:	68ec      	ldreq	r4, [r5, #12]
 800d55a:	e7e6      	b.n	800d52a <__swsetup_r+0x1e>
 800d55c:	0758      	lsls	r0, r3, #29
 800d55e:	d512      	bpl.n	800d586 <__swsetup_r+0x7a>
 800d560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d562:	b141      	cbz	r1, 800d576 <__swsetup_r+0x6a>
 800d564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d568:	4299      	cmp	r1, r3
 800d56a:	d002      	beq.n	800d572 <__swsetup_r+0x66>
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7fc fd7f 	bl	800a070 <_free_r>
 800d572:	2300      	movs	r3, #0
 800d574:	6363      	str	r3, [r4, #52]	; 0x34
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	2300      	movs	r3, #0
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	6923      	ldr	r3, [r4, #16]
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	f043 0308 	orr.w	r3, r3, #8
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	b94b      	cbnz	r3, 800d5a6 <__swsetup_r+0x9a>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d59c:	d003      	beq.n	800d5a6 <__swsetup_r+0x9a>
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f000 f84d 	bl	800d640 <__smakebuf_r>
 800d5a6:	89a0      	ldrh	r0, [r4, #12]
 800d5a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5ac:	f010 0301 	ands.w	r3, r0, #1
 800d5b0:	d00a      	beq.n	800d5c8 <__swsetup_r+0xbc>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	60a3      	str	r3, [r4, #8]
 800d5b6:	6963      	ldr	r3, [r4, #20]
 800d5b8:	425b      	negs	r3, r3
 800d5ba:	61a3      	str	r3, [r4, #24]
 800d5bc:	6923      	ldr	r3, [r4, #16]
 800d5be:	b943      	cbnz	r3, 800d5d2 <__swsetup_r+0xc6>
 800d5c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5c4:	d1ba      	bne.n	800d53c <__swsetup_r+0x30>
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}
 800d5c8:	0781      	lsls	r1, r0, #30
 800d5ca:	bf58      	it	pl
 800d5cc:	6963      	ldrpl	r3, [r4, #20]
 800d5ce:	60a3      	str	r3, [r4, #8]
 800d5d0:	e7f4      	b.n	800d5bc <__swsetup_r+0xb0>
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	e7f7      	b.n	800d5c6 <__swsetup_r+0xba>
 800d5d6:	bf00      	nop
 800d5d8:	20000014 	.word	0x20000014
 800d5dc:	08010a28 	.word	0x08010a28
 800d5e0:	08010a48 	.word	0x08010a48
 800d5e4:	08010a08 	.word	0x08010a08

0800d5e8 <abort>:
 800d5e8:	b508      	push	{r3, lr}
 800d5ea:	2006      	movs	r0, #6
 800d5ec:	f000 f898 	bl	800d720 <raise>
 800d5f0:	2001      	movs	r0, #1
 800d5f2:	f7f5 ffeb 	bl	80035cc <_exit>

0800d5f6 <__swhatbuf_r>:
 800d5f6:	b570      	push	{r4, r5, r6, lr}
 800d5f8:	460e      	mov	r6, r1
 800d5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fe:	2900      	cmp	r1, #0
 800d600:	b096      	sub	sp, #88	; 0x58
 800d602:	4614      	mov	r4, r2
 800d604:	461d      	mov	r5, r3
 800d606:	da08      	bge.n	800d61a <__swhatbuf_r+0x24>
 800d608:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	602a      	str	r2, [r5, #0]
 800d610:	061a      	lsls	r2, r3, #24
 800d612:	d410      	bmi.n	800d636 <__swhatbuf_r+0x40>
 800d614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d618:	e00e      	b.n	800d638 <__swhatbuf_r+0x42>
 800d61a:	466a      	mov	r2, sp
 800d61c:	f000 f89c 	bl	800d758 <_fstat_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	dbf1      	blt.n	800d608 <__swhatbuf_r+0x12>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d62a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d62e:	425a      	negs	r2, r3
 800d630:	415a      	adcs	r2, r3
 800d632:	602a      	str	r2, [r5, #0]
 800d634:	e7ee      	b.n	800d614 <__swhatbuf_r+0x1e>
 800d636:	2340      	movs	r3, #64	; 0x40
 800d638:	2000      	movs	r0, #0
 800d63a:	6023      	str	r3, [r4, #0]
 800d63c:	b016      	add	sp, #88	; 0x58
 800d63e:	bd70      	pop	{r4, r5, r6, pc}

0800d640 <__smakebuf_r>:
 800d640:	898b      	ldrh	r3, [r1, #12]
 800d642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d644:	079d      	lsls	r5, r3, #30
 800d646:	4606      	mov	r6, r0
 800d648:	460c      	mov	r4, r1
 800d64a:	d507      	bpl.n	800d65c <__smakebuf_r+0x1c>
 800d64c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	2301      	movs	r3, #1
 800d656:	6163      	str	r3, [r4, #20]
 800d658:	b002      	add	sp, #8
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	ab01      	add	r3, sp, #4
 800d65e:	466a      	mov	r2, sp
 800d660:	f7ff ffc9 	bl	800d5f6 <__swhatbuf_r>
 800d664:	9900      	ldr	r1, [sp, #0]
 800d666:	4605      	mov	r5, r0
 800d668:	4630      	mov	r0, r6
 800d66a:	f7fc fd6d 	bl	800a148 <_malloc_r>
 800d66e:	b948      	cbnz	r0, 800d684 <__smakebuf_r+0x44>
 800d670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d674:	059a      	lsls	r2, r3, #22
 800d676:	d4ef      	bmi.n	800d658 <__smakebuf_r+0x18>
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	f043 0302 	orr.w	r3, r3, #2
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	e7e3      	b.n	800d64c <__smakebuf_r+0xc>
 800d684:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <__smakebuf_r+0x7c>)
 800d686:	62b3      	str	r3, [r6, #40]	; 0x28
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	6020      	str	r0, [r4, #0]
 800d68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	9b00      	ldr	r3, [sp, #0]
 800d694:	6163      	str	r3, [r4, #20]
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	6120      	str	r0, [r4, #16]
 800d69a:	b15b      	cbz	r3, 800d6b4 <__smakebuf_r+0x74>
 800d69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 f86b 	bl	800d77c <_isatty_r>
 800d6a6:	b128      	cbz	r0, 800d6b4 <__smakebuf_r+0x74>
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	f023 0303 	bic.w	r3, r3, #3
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	81a3      	strh	r3, [r4, #12]
 800d6b4:	89a0      	ldrh	r0, [r4, #12]
 800d6b6:	4305      	orrs	r5, r0
 800d6b8:	81a5      	strh	r5, [r4, #12]
 800d6ba:	e7cd      	b.n	800d658 <__smakebuf_r+0x18>
 800d6bc:	0800cf19 	.word	0x0800cf19

0800d6c0 <_malloc_usable_size_r>:
 800d6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c4:	1f18      	subs	r0, r3, #4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfbc      	itt	lt
 800d6ca:	580b      	ldrlt	r3, [r1, r0]
 800d6cc:	18c0      	addlt	r0, r0, r3
 800d6ce:	4770      	bx	lr

0800d6d0 <_raise_r>:
 800d6d0:	291f      	cmp	r1, #31
 800d6d2:	b538      	push	{r3, r4, r5, lr}
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	460d      	mov	r5, r1
 800d6d8:	d904      	bls.n	800d6e4 <_raise_r+0x14>
 800d6da:	2316      	movs	r3, #22
 800d6dc:	6003      	str	r3, [r0, #0]
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6e6:	b112      	cbz	r2, 800d6ee <_raise_r+0x1e>
 800d6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6ec:	b94b      	cbnz	r3, 800d702 <_raise_r+0x32>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f830 	bl	800d754 <_getpid_r>
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6fe:	f000 b817 	b.w	800d730 <_kill_r>
 800d702:	2b01      	cmp	r3, #1
 800d704:	d00a      	beq.n	800d71c <_raise_r+0x4c>
 800d706:	1c59      	adds	r1, r3, #1
 800d708:	d103      	bne.n	800d712 <_raise_r+0x42>
 800d70a:	2316      	movs	r3, #22
 800d70c:	6003      	str	r3, [r0, #0]
 800d70e:	2001      	movs	r0, #1
 800d710:	e7e7      	b.n	800d6e2 <_raise_r+0x12>
 800d712:	2400      	movs	r4, #0
 800d714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d718:	4628      	mov	r0, r5
 800d71a:	4798      	blx	r3
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7e0      	b.n	800d6e2 <_raise_r+0x12>

0800d720 <raise>:
 800d720:	4b02      	ldr	r3, [pc, #8]	; (800d72c <raise+0xc>)
 800d722:	4601      	mov	r1, r0
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	f7ff bfd3 	b.w	800d6d0 <_raise_r>
 800d72a:	bf00      	nop
 800d72c:	20000014 	.word	0x20000014

0800d730 <_kill_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4d07      	ldr	r5, [pc, #28]	; (800d750 <_kill_r+0x20>)
 800d734:	2300      	movs	r3, #0
 800d736:	4604      	mov	r4, r0
 800d738:	4608      	mov	r0, r1
 800d73a:	4611      	mov	r1, r2
 800d73c:	602b      	str	r3, [r5, #0]
 800d73e:	f7f5 ff35 	bl	80035ac <_kill>
 800d742:	1c43      	adds	r3, r0, #1
 800d744:	d102      	bne.n	800d74c <_kill_r+0x1c>
 800d746:	682b      	ldr	r3, [r5, #0]
 800d748:	b103      	cbz	r3, 800d74c <_kill_r+0x1c>
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	bd38      	pop	{r3, r4, r5, pc}
 800d74e:	bf00      	nop
 800d750:	20012274 	.word	0x20012274

0800d754 <_getpid_r>:
 800d754:	f7f5 bf22 	b.w	800359c <_getpid>

0800d758 <_fstat_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	; (800d778 <_fstat_r+0x20>)
 800d75c:	2300      	movs	r3, #0
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	4611      	mov	r1, r2
 800d764:	602b      	str	r3, [r5, #0]
 800d766:	f7f5 ff80 	bl	800366a <_fstat>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d102      	bne.n	800d774 <_fstat_r+0x1c>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	b103      	cbz	r3, 800d774 <_fstat_r+0x1c>
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	bd38      	pop	{r3, r4, r5, pc}
 800d776:	bf00      	nop
 800d778:	20012274 	.word	0x20012274

0800d77c <_isatty_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4d06      	ldr	r5, [pc, #24]	; (800d798 <_isatty_r+0x1c>)
 800d780:	2300      	movs	r3, #0
 800d782:	4604      	mov	r4, r0
 800d784:	4608      	mov	r0, r1
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	f7f5 ff7f 	bl	800368a <_isatty>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d102      	bne.n	800d796 <_isatty_r+0x1a>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b103      	cbz	r3, 800d796 <_isatty_r+0x1a>
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	20012274 	.word	0x20012274
 800d79c:	00000000 	.word	0x00000000

0800d7a0 <cos>:
 800d7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7a2:	ec53 2b10 	vmov	r2, r3, d0
 800d7a6:	4826      	ldr	r0, [pc, #152]	; (800d840 <cos+0xa0>)
 800d7a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7ac:	4281      	cmp	r1, r0
 800d7ae:	dc06      	bgt.n	800d7be <cos+0x1e>
 800d7b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d838 <cos+0x98>
 800d7b4:	b005      	add	sp, #20
 800d7b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7ba:	f001 bcd5 	b.w	800f168 <__kernel_cos>
 800d7be:	4821      	ldr	r0, [pc, #132]	; (800d844 <cos+0xa4>)
 800d7c0:	4281      	cmp	r1, r0
 800d7c2:	dd09      	ble.n	800d7d8 <cos+0x38>
 800d7c4:	ee10 0a10 	vmov	r0, s0
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	f7f2 fd75 	bl	80002b8 <__aeabi_dsub>
 800d7ce:	ec41 0b10 	vmov	d0, r0, r1
 800d7d2:	b005      	add	sp, #20
 800d7d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7d8:	4668      	mov	r0, sp
 800d7da:	f001 fa05 	bl	800ebe8 <__ieee754_rem_pio2>
 800d7de:	f000 0003 	and.w	r0, r0, #3
 800d7e2:	2801      	cmp	r0, #1
 800d7e4:	d00b      	beq.n	800d7fe <cos+0x5e>
 800d7e6:	2802      	cmp	r0, #2
 800d7e8:	d016      	beq.n	800d818 <cos+0x78>
 800d7ea:	b9e0      	cbnz	r0, 800d826 <cos+0x86>
 800d7ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7f0:	ed9d 0b00 	vldr	d0, [sp]
 800d7f4:	f001 fcb8 	bl	800f168 <__kernel_cos>
 800d7f8:	ec51 0b10 	vmov	r0, r1, d0
 800d7fc:	e7e7      	b.n	800d7ce <cos+0x2e>
 800d7fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d802:	ed9d 0b00 	vldr	d0, [sp]
 800d806:	f002 f8c7 	bl	800f998 <__kernel_sin>
 800d80a:	ec53 2b10 	vmov	r2, r3, d0
 800d80e:	ee10 0a10 	vmov	r0, s0
 800d812:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d816:	e7da      	b.n	800d7ce <cos+0x2e>
 800d818:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d81c:	ed9d 0b00 	vldr	d0, [sp]
 800d820:	f001 fca2 	bl	800f168 <__kernel_cos>
 800d824:	e7f1      	b.n	800d80a <cos+0x6a>
 800d826:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d82a:	ed9d 0b00 	vldr	d0, [sp]
 800d82e:	2001      	movs	r0, #1
 800d830:	f002 f8b2 	bl	800f998 <__kernel_sin>
 800d834:	e7e0      	b.n	800d7f8 <cos+0x58>
 800d836:	bf00      	nop
	...
 800d840:	3fe921fb 	.word	0x3fe921fb
 800d844:	7fefffff 	.word	0x7fefffff

0800d848 <round>:
 800d848:	ec51 0b10 	vmov	r0, r1, d0
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d852:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d856:	2c13      	cmp	r4, #19
 800d858:	ee10 2a10 	vmov	r2, s0
 800d85c:	460b      	mov	r3, r1
 800d85e:	dc19      	bgt.n	800d894 <round+0x4c>
 800d860:	2c00      	cmp	r4, #0
 800d862:	da09      	bge.n	800d878 <round+0x30>
 800d864:	3401      	adds	r4, #1
 800d866:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d86a:	d103      	bne.n	800d874 <round+0x2c>
 800d86c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d870:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d874:	2200      	movs	r2, #0
 800d876:	e028      	b.n	800d8ca <round+0x82>
 800d878:	4d15      	ldr	r5, [pc, #84]	; (800d8d0 <round+0x88>)
 800d87a:	4125      	asrs	r5, r4
 800d87c:	ea01 0605 	and.w	r6, r1, r5
 800d880:	4332      	orrs	r2, r6
 800d882:	d00e      	beq.n	800d8a2 <round+0x5a>
 800d884:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d888:	fa42 f404 	asr.w	r4, r2, r4
 800d88c:	4423      	add	r3, r4
 800d88e:	ea23 0305 	bic.w	r3, r3, r5
 800d892:	e7ef      	b.n	800d874 <round+0x2c>
 800d894:	2c33      	cmp	r4, #51	; 0x33
 800d896:	dd07      	ble.n	800d8a8 <round+0x60>
 800d898:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d89c:	d101      	bne.n	800d8a2 <round+0x5a>
 800d89e:	f7f2 fd0d 	bl	80002bc <__adddf3>
 800d8a2:	ec41 0b10 	vmov	d0, r0, r1
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d8ac:	f04f 35ff 	mov.w	r5, #4294967295
 800d8b0:	40f5      	lsrs	r5, r6
 800d8b2:	4228      	tst	r0, r5
 800d8b4:	d0f5      	beq.n	800d8a2 <round+0x5a>
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d8bc:	fa01 f404 	lsl.w	r4, r1, r4
 800d8c0:	1912      	adds	r2, r2, r4
 800d8c2:	bf28      	it	cs
 800d8c4:	185b      	addcs	r3, r3, r1
 800d8c6:	ea22 0205 	bic.w	r2, r2, r5
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	e7e8      	b.n	800d8a2 <round+0x5a>
 800d8d0:	000fffff 	.word	0x000fffff
 800d8d4:	00000000 	.word	0x00000000

0800d8d8 <sin>:
 800d8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8da:	ec53 2b10 	vmov	r2, r3, d0
 800d8de:	4828      	ldr	r0, [pc, #160]	; (800d980 <sin+0xa8>)
 800d8e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d8e4:	4281      	cmp	r1, r0
 800d8e6:	dc07      	bgt.n	800d8f8 <sin+0x20>
 800d8e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d978 <sin+0xa0>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	b005      	add	sp, #20
 800d8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f4:	f002 b850 	b.w	800f998 <__kernel_sin>
 800d8f8:	4822      	ldr	r0, [pc, #136]	; (800d984 <sin+0xac>)
 800d8fa:	4281      	cmp	r1, r0
 800d8fc:	dd09      	ble.n	800d912 <sin+0x3a>
 800d8fe:	ee10 0a10 	vmov	r0, s0
 800d902:	4619      	mov	r1, r3
 800d904:	f7f2 fcd8 	bl	80002b8 <__aeabi_dsub>
 800d908:	ec41 0b10 	vmov	d0, r0, r1
 800d90c:	b005      	add	sp, #20
 800d90e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d912:	4668      	mov	r0, sp
 800d914:	f001 f968 	bl	800ebe8 <__ieee754_rem_pio2>
 800d918:	f000 0003 	and.w	r0, r0, #3
 800d91c:	2801      	cmp	r0, #1
 800d91e:	d00c      	beq.n	800d93a <sin+0x62>
 800d920:	2802      	cmp	r0, #2
 800d922:	d011      	beq.n	800d948 <sin+0x70>
 800d924:	b9f0      	cbnz	r0, 800d964 <sin+0x8c>
 800d926:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d92a:	ed9d 0b00 	vldr	d0, [sp]
 800d92e:	2001      	movs	r0, #1
 800d930:	f002 f832 	bl	800f998 <__kernel_sin>
 800d934:	ec51 0b10 	vmov	r0, r1, d0
 800d938:	e7e6      	b.n	800d908 <sin+0x30>
 800d93a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d93e:	ed9d 0b00 	vldr	d0, [sp]
 800d942:	f001 fc11 	bl	800f168 <__kernel_cos>
 800d946:	e7f5      	b.n	800d934 <sin+0x5c>
 800d948:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d94c:	ed9d 0b00 	vldr	d0, [sp]
 800d950:	2001      	movs	r0, #1
 800d952:	f002 f821 	bl	800f998 <__kernel_sin>
 800d956:	ec53 2b10 	vmov	r2, r3, d0
 800d95a:	ee10 0a10 	vmov	r0, s0
 800d95e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d962:	e7d1      	b.n	800d908 <sin+0x30>
 800d964:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d968:	ed9d 0b00 	vldr	d0, [sp]
 800d96c:	f001 fbfc 	bl	800f168 <__kernel_cos>
 800d970:	e7f1      	b.n	800d956 <sin+0x7e>
 800d972:	bf00      	nop
 800d974:	f3af 8000 	nop.w
	...
 800d980:	3fe921fb 	.word	0x3fe921fb
 800d984:	7fefffff 	.word	0x7fefffff

0800d988 <acos>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	ed2d 8b02 	vpush	{d8}
 800d98e:	ec55 4b10 	vmov	r4, r5, d0
 800d992:	f000 f8cd 	bl	800db30 <__ieee754_acos>
 800d996:	4622      	mov	r2, r4
 800d998:	462b      	mov	r3, r5
 800d99a:	4620      	mov	r0, r4
 800d99c:	4629      	mov	r1, r5
 800d99e:	eeb0 8a40 	vmov.f32	s16, s0
 800d9a2:	eef0 8a60 	vmov.f32	s17, s1
 800d9a6:	f7f3 f8d9 	bl	8000b5c <__aeabi_dcmpun>
 800d9aa:	b9a8      	cbnz	r0, 800d9d8 <acos+0x50>
 800d9ac:	ec45 4b10 	vmov	d0, r4, r5
 800d9b0:	f002 fa82 	bl	800feb8 <fabs>
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <acos+0x60>)
 800d9b6:	ec51 0b10 	vmov	r0, r1, d0
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f7f3 f8c4 	bl	8000b48 <__aeabi_dcmpgt>
 800d9c0:	b150      	cbz	r0, 800d9d8 <acos+0x50>
 800d9c2:	f7fc fb1b 	bl	8009ffc <__errno>
 800d9c6:	ecbd 8b02 	vpop	{d8}
 800d9ca:	2321      	movs	r3, #33	; 0x21
 800d9cc:	6003      	str	r3, [r0, #0]
 800d9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d2:	4806      	ldr	r0, [pc, #24]	; (800d9ec <acos+0x64>)
 800d9d4:	f002 bb04 	b.w	800ffe0 <nan>
 800d9d8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9dc:	eef0 0a68 	vmov.f32	s1, s17
 800d9e0:	ecbd 8b02 	vpop	{d8}
 800d9e4:	bd38      	pop	{r3, r4, r5, pc}
 800d9e6:	bf00      	nop
 800d9e8:	3ff00000 	.word	0x3ff00000
 800d9ec:	08010903 	.word	0x08010903

0800d9f0 <atan2>:
 800d9f0:	f000 bafe 	b.w	800dff0 <__ieee754_atan2>

0800d9f4 <pow>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	ed2d 8b02 	vpush	{d8}
 800d9fa:	eeb0 8a40 	vmov.f32	s16, s0
 800d9fe:	eef0 8a60 	vmov.f32	s17, s1
 800da02:	ec55 4b11 	vmov	r4, r5, d1
 800da06:	f000 fbbf 	bl	800e188 <__ieee754_pow>
 800da0a:	4622      	mov	r2, r4
 800da0c:	462b      	mov	r3, r5
 800da0e:	4620      	mov	r0, r4
 800da10:	4629      	mov	r1, r5
 800da12:	ec57 6b10 	vmov	r6, r7, d0
 800da16:	f7f3 f8a1 	bl	8000b5c <__aeabi_dcmpun>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d13b      	bne.n	800da96 <pow+0xa2>
 800da1e:	ec51 0b18 	vmov	r0, r1, d8
 800da22:	2200      	movs	r2, #0
 800da24:	2300      	movs	r3, #0
 800da26:	f7f3 f867 	bl	8000af8 <__aeabi_dcmpeq>
 800da2a:	b1b8      	cbz	r0, 800da5c <pow+0x68>
 800da2c:	2200      	movs	r2, #0
 800da2e:	2300      	movs	r3, #0
 800da30:	4620      	mov	r0, r4
 800da32:	4629      	mov	r1, r5
 800da34:	f7f3 f860 	bl	8000af8 <__aeabi_dcmpeq>
 800da38:	2800      	cmp	r0, #0
 800da3a:	d146      	bne.n	800daca <pow+0xd6>
 800da3c:	ec45 4b10 	vmov	d0, r4, r5
 800da40:	f002 fa43 	bl	800feca <finite>
 800da44:	b338      	cbz	r0, 800da96 <pow+0xa2>
 800da46:	2200      	movs	r2, #0
 800da48:	2300      	movs	r3, #0
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7f3 f85d 	bl	8000b0c <__aeabi_dcmplt>
 800da52:	b300      	cbz	r0, 800da96 <pow+0xa2>
 800da54:	f7fc fad2 	bl	8009ffc <__errno>
 800da58:	2322      	movs	r3, #34	; 0x22
 800da5a:	e01b      	b.n	800da94 <pow+0xa0>
 800da5c:	ec47 6b10 	vmov	d0, r6, r7
 800da60:	f002 fa33 	bl	800feca <finite>
 800da64:	b9e0      	cbnz	r0, 800daa0 <pow+0xac>
 800da66:	eeb0 0a48 	vmov.f32	s0, s16
 800da6a:	eef0 0a68 	vmov.f32	s1, s17
 800da6e:	f002 fa2c 	bl	800feca <finite>
 800da72:	b1a8      	cbz	r0, 800daa0 <pow+0xac>
 800da74:	ec45 4b10 	vmov	d0, r4, r5
 800da78:	f002 fa27 	bl	800feca <finite>
 800da7c:	b180      	cbz	r0, 800daa0 <pow+0xac>
 800da7e:	4632      	mov	r2, r6
 800da80:	463b      	mov	r3, r7
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f3 f869 	bl	8000b5c <__aeabi_dcmpun>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d0e2      	beq.n	800da54 <pow+0x60>
 800da8e:	f7fc fab5 	bl	8009ffc <__errno>
 800da92:	2321      	movs	r3, #33	; 0x21
 800da94:	6003      	str	r3, [r0, #0]
 800da96:	ecbd 8b02 	vpop	{d8}
 800da9a:	ec47 6b10 	vmov	d0, r6, r7
 800da9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa0:	2200      	movs	r2, #0
 800daa2:	2300      	movs	r3, #0
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f3 f826 	bl	8000af8 <__aeabi_dcmpeq>
 800daac:	2800      	cmp	r0, #0
 800daae:	d0f2      	beq.n	800da96 <pow+0xa2>
 800dab0:	eeb0 0a48 	vmov.f32	s0, s16
 800dab4:	eef0 0a68 	vmov.f32	s1, s17
 800dab8:	f002 fa07 	bl	800feca <finite>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d0ea      	beq.n	800da96 <pow+0xa2>
 800dac0:	ec45 4b10 	vmov	d0, r4, r5
 800dac4:	f002 fa01 	bl	800feca <finite>
 800dac8:	e7c3      	b.n	800da52 <pow+0x5e>
 800daca:	4f01      	ldr	r7, [pc, #4]	; (800dad0 <pow+0xdc>)
 800dacc:	2600      	movs	r6, #0
 800dace:	e7e2      	b.n	800da96 <pow+0xa2>
 800dad0:	3ff00000 	.word	0x3ff00000

0800dad4 <sqrt>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	ed2d 8b02 	vpush	{d8}
 800dada:	ec55 4b10 	vmov	r4, r5, d0
 800dade:	f001 fa8f 	bl	800f000 <__ieee754_sqrt>
 800dae2:	4622      	mov	r2, r4
 800dae4:	462b      	mov	r3, r5
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	eeb0 8a40 	vmov.f32	s16, s0
 800daee:	eef0 8a60 	vmov.f32	s17, s1
 800daf2:	f7f3 f833 	bl	8000b5c <__aeabi_dcmpun>
 800daf6:	b990      	cbnz	r0, 800db1e <sqrt+0x4a>
 800daf8:	2200      	movs	r2, #0
 800dafa:	2300      	movs	r3, #0
 800dafc:	4620      	mov	r0, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	f7f3 f804 	bl	8000b0c <__aeabi_dcmplt>
 800db04:	b158      	cbz	r0, 800db1e <sqrt+0x4a>
 800db06:	f7fc fa79 	bl	8009ffc <__errno>
 800db0a:	2321      	movs	r3, #33	; 0x21
 800db0c:	6003      	str	r3, [r0, #0]
 800db0e:	2200      	movs	r2, #0
 800db10:	2300      	movs	r3, #0
 800db12:	4610      	mov	r0, r2
 800db14:	4619      	mov	r1, r3
 800db16:	f7f2 feb1 	bl	800087c <__aeabi_ddiv>
 800db1a:	ec41 0b18 	vmov	d8, r0, r1
 800db1e:	eeb0 0a48 	vmov.f32	s0, s16
 800db22:	eef0 0a68 	vmov.f32	s1, s17
 800db26:	ecbd 8b02 	vpop	{d8}
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	0000      	movs	r0, r0
	...

0800db30 <__ieee754_acos>:
 800db30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	ec55 4b10 	vmov	r4, r5, d0
 800db38:	49b7      	ldr	r1, [pc, #732]	; (800de18 <__ieee754_acos+0x2e8>)
 800db3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db3e:	428b      	cmp	r3, r1
 800db40:	dd1b      	ble.n	800db7a <__ieee754_acos+0x4a>
 800db42:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800db46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800db4a:	4323      	orrs	r3, r4
 800db4c:	d106      	bne.n	800db5c <__ieee754_acos+0x2c>
 800db4e:	2d00      	cmp	r5, #0
 800db50:	f300 8211 	bgt.w	800df76 <__ieee754_acos+0x446>
 800db54:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ddb0 <__ieee754_acos+0x280>
 800db58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	ee10 2a10 	vmov	r2, s0
 800db60:	462b      	mov	r3, r5
 800db62:	ee10 0a10 	vmov	r0, s0
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fba6 	bl	80002b8 <__aeabi_dsub>
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	f7f2 fe84 	bl	800087c <__aeabi_ddiv>
 800db74:	ec41 0b10 	vmov	d0, r0, r1
 800db78:	e7ee      	b.n	800db58 <__ieee754_acos+0x28>
 800db7a:	49a8      	ldr	r1, [pc, #672]	; (800de1c <__ieee754_acos+0x2ec>)
 800db7c:	428b      	cmp	r3, r1
 800db7e:	f300 8087 	bgt.w	800dc90 <__ieee754_acos+0x160>
 800db82:	4aa7      	ldr	r2, [pc, #668]	; (800de20 <__ieee754_acos+0x2f0>)
 800db84:	4293      	cmp	r3, r2
 800db86:	f340 81f9 	ble.w	800df7c <__ieee754_acos+0x44c>
 800db8a:	ee10 2a10 	vmov	r2, s0
 800db8e:	ee10 0a10 	vmov	r0, s0
 800db92:	462b      	mov	r3, r5
 800db94:	4629      	mov	r1, r5
 800db96:	f7f2 fd47 	bl	8000628 <__aeabi_dmul>
 800db9a:	a387      	add	r3, pc, #540	; (adr r3, 800ddb8 <__ieee754_acos+0x288>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	4606      	mov	r6, r0
 800dba2:	460f      	mov	r7, r1
 800dba4:	f7f2 fd40 	bl	8000628 <__aeabi_dmul>
 800dba8:	a385      	add	r3, pc, #532	; (adr r3, 800ddc0 <__ieee754_acos+0x290>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fb85 	bl	80002bc <__adddf3>
 800dbb2:	4632      	mov	r2, r6
 800dbb4:	463b      	mov	r3, r7
 800dbb6:	f7f2 fd37 	bl	8000628 <__aeabi_dmul>
 800dbba:	a383      	add	r3, pc, #524	; (adr r3, 800ddc8 <__ieee754_acos+0x298>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	f7f2 fb7a 	bl	80002b8 <__aeabi_dsub>
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	463b      	mov	r3, r7
 800dbc8:	f7f2 fd2e 	bl	8000628 <__aeabi_dmul>
 800dbcc:	a380      	add	r3, pc, #512	; (adr r3, 800ddd0 <__ieee754_acos+0x2a0>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f7f2 fb73 	bl	80002bc <__adddf3>
 800dbd6:	4632      	mov	r2, r6
 800dbd8:	463b      	mov	r3, r7
 800dbda:	f7f2 fd25 	bl	8000628 <__aeabi_dmul>
 800dbde:	a37e      	add	r3, pc, #504	; (adr r3, 800ddd8 <__ieee754_acos+0x2a8>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fb68 	bl	80002b8 <__aeabi_dsub>
 800dbe8:	4632      	mov	r2, r6
 800dbea:	463b      	mov	r3, r7
 800dbec:	f7f2 fd1c 	bl	8000628 <__aeabi_dmul>
 800dbf0:	a37b      	add	r3, pc, #492	; (adr r3, 800dde0 <__ieee754_acos+0x2b0>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 fb61 	bl	80002bc <__adddf3>
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	463b      	mov	r3, r7
 800dbfe:	f7f2 fd13 	bl	8000628 <__aeabi_dmul>
 800dc02:	a379      	add	r3, pc, #484	; (adr r3, 800dde8 <__ieee754_acos+0x2b8>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	4680      	mov	r8, r0
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f7f2 fd0a 	bl	8000628 <__aeabi_dmul>
 800dc14:	a376      	add	r3, pc, #472	; (adr r3, 800ddf0 <__ieee754_acos+0x2c0>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7f2 fb4d 	bl	80002b8 <__aeabi_dsub>
 800dc1e:	4632      	mov	r2, r6
 800dc20:	463b      	mov	r3, r7
 800dc22:	f7f2 fd01 	bl	8000628 <__aeabi_dmul>
 800dc26:	a374      	add	r3, pc, #464	; (adr r3, 800ddf8 <__ieee754_acos+0x2c8>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f7f2 fb46 	bl	80002bc <__adddf3>
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	f7f2 fcf8 	bl	8000628 <__aeabi_dmul>
 800dc38:	a371      	add	r3, pc, #452	; (adr r3, 800de00 <__ieee754_acos+0x2d0>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7f2 fb3b 	bl	80002b8 <__aeabi_dsub>
 800dc42:	4632      	mov	r2, r6
 800dc44:	463b      	mov	r3, r7
 800dc46:	f7f2 fcef 	bl	8000628 <__aeabi_dmul>
 800dc4a:	4b76      	ldr	r3, [pc, #472]	; (800de24 <__ieee754_acos+0x2f4>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f7f2 fb35 	bl	80002bc <__adddf3>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4640      	mov	r0, r8
 800dc58:	4649      	mov	r1, r9
 800dc5a:	f7f2 fe0f 	bl	800087c <__aeabi_ddiv>
 800dc5e:	4622      	mov	r2, r4
 800dc60:	462b      	mov	r3, r5
 800dc62:	f7f2 fce1 	bl	8000628 <__aeabi_dmul>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	a167      	add	r1, pc, #412	; (adr r1, 800de08 <__ieee754_acos+0x2d8>)
 800dc6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc70:	f7f2 fb22 	bl	80002b8 <__aeabi_dsub>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	4620      	mov	r0, r4
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	f7f2 fb1c 	bl	80002b8 <__aeabi_dsub>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	a162      	add	r1, pc, #392	; (adr r1, 800de10 <__ieee754_acos+0x2e0>)
 800dc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc8a:	f7f2 fb15 	bl	80002b8 <__aeabi_dsub>
 800dc8e:	e771      	b.n	800db74 <__ieee754_acos+0x44>
 800dc90:	2d00      	cmp	r5, #0
 800dc92:	f280 80cb 	bge.w	800de2c <__ieee754_acos+0x2fc>
 800dc96:	ee10 0a10 	vmov	r0, s0
 800dc9a:	4b62      	ldr	r3, [pc, #392]	; (800de24 <__ieee754_acos+0x2f4>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fb0c 	bl	80002bc <__adddf3>
 800dca4:	4b60      	ldr	r3, [pc, #384]	; (800de28 <__ieee754_acos+0x2f8>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	f7f2 fcbe 	bl	8000628 <__aeabi_dmul>
 800dcac:	a342      	add	r3, pc, #264	; (adr r3, 800ddb8 <__ieee754_acos+0x288>)
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	f7f2 fcb7 	bl	8000628 <__aeabi_dmul>
 800dcba:	a341      	add	r3, pc, #260	; (adr r3, 800ddc0 <__ieee754_acos+0x290>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fafc 	bl	80002bc <__adddf3>
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	462b      	mov	r3, r5
 800dcc8:	f7f2 fcae 	bl	8000628 <__aeabi_dmul>
 800dccc:	a33e      	add	r3, pc, #248	; (adr r3, 800ddc8 <__ieee754_acos+0x298>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	f7f2 faf1 	bl	80002b8 <__aeabi_dsub>
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	462b      	mov	r3, r5
 800dcda:	f7f2 fca5 	bl	8000628 <__aeabi_dmul>
 800dcde:	a33c      	add	r3, pc, #240	; (adr r3, 800ddd0 <__ieee754_acos+0x2a0>)
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f7f2 faea 	bl	80002bc <__adddf3>
 800dce8:	4622      	mov	r2, r4
 800dcea:	462b      	mov	r3, r5
 800dcec:	f7f2 fc9c 	bl	8000628 <__aeabi_dmul>
 800dcf0:	a339      	add	r3, pc, #228	; (adr r3, 800ddd8 <__ieee754_acos+0x2a8>)
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	f7f2 fadf 	bl	80002b8 <__aeabi_dsub>
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	f7f2 fc93 	bl	8000628 <__aeabi_dmul>
 800dd02:	a337      	add	r3, pc, #220	; (adr r3, 800dde0 <__ieee754_acos+0x2b0>)
 800dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd08:	f7f2 fad8 	bl	80002bc <__adddf3>
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	462b      	mov	r3, r5
 800dd10:	f7f2 fc8a 	bl	8000628 <__aeabi_dmul>
 800dd14:	ec45 4b10 	vmov	d0, r4, r5
 800dd18:	4680      	mov	r8, r0
 800dd1a:	4689      	mov	r9, r1
 800dd1c:	f001 f970 	bl	800f000 <__ieee754_sqrt>
 800dd20:	a331      	add	r3, pc, #196	; (adr r3, 800dde8 <__ieee754_acos+0x2b8>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	4620      	mov	r0, r4
 800dd28:	4629      	mov	r1, r5
 800dd2a:	ec57 6b10 	vmov	r6, r7, d0
 800dd2e:	f7f2 fc7b 	bl	8000628 <__aeabi_dmul>
 800dd32:	a32f      	add	r3, pc, #188	; (adr r3, 800ddf0 <__ieee754_acos+0x2c0>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 fabe 	bl	80002b8 <__aeabi_dsub>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 fc72 	bl	8000628 <__aeabi_dmul>
 800dd44:	a32c      	add	r3, pc, #176	; (adr r3, 800ddf8 <__ieee754_acos+0x2c8>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f2 fab7 	bl	80002bc <__adddf3>
 800dd4e:	4622      	mov	r2, r4
 800dd50:	462b      	mov	r3, r5
 800dd52:	f7f2 fc69 	bl	8000628 <__aeabi_dmul>
 800dd56:	a32a      	add	r3, pc, #168	; (adr r3, 800de00 <__ieee754_acos+0x2d0>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 faac 	bl	80002b8 <__aeabi_dsub>
 800dd60:	4622      	mov	r2, r4
 800dd62:	462b      	mov	r3, r5
 800dd64:	f7f2 fc60 	bl	8000628 <__aeabi_dmul>
 800dd68:	4b2e      	ldr	r3, [pc, #184]	; (800de24 <__ieee754_acos+0x2f4>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f7f2 faa6 	bl	80002bc <__adddf3>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4640      	mov	r0, r8
 800dd76:	4649      	mov	r1, r9
 800dd78:	f7f2 fd80 	bl	800087c <__aeabi_ddiv>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	f7f2 fc52 	bl	8000628 <__aeabi_dmul>
 800dd84:	a320      	add	r3, pc, #128	; (adr r3, 800de08 <__ieee754_acos+0x2d8>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	f7f2 fa95 	bl	80002b8 <__aeabi_dsub>
 800dd8e:	4632      	mov	r2, r6
 800dd90:	463b      	mov	r3, r7
 800dd92:	f7f2 fa93 	bl	80002bc <__adddf3>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	f7f2 fa8f 	bl	80002bc <__adddf3>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	a103      	add	r1, pc, #12	; (adr r1, 800ddb0 <__ieee754_acos+0x280>)
 800dda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dda8:	e76f      	b.n	800dc8a <__ieee754_acos+0x15a>
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	54442d18 	.word	0x54442d18
 800ddb4:	400921fb 	.word	0x400921fb
 800ddb8:	0dfdf709 	.word	0x0dfdf709
 800ddbc:	3f023de1 	.word	0x3f023de1
 800ddc0:	7501b288 	.word	0x7501b288
 800ddc4:	3f49efe0 	.word	0x3f49efe0
 800ddc8:	b5688f3b 	.word	0xb5688f3b
 800ddcc:	3fa48228 	.word	0x3fa48228
 800ddd0:	0e884455 	.word	0x0e884455
 800ddd4:	3fc9c155 	.word	0x3fc9c155
 800ddd8:	03eb6f7d 	.word	0x03eb6f7d
 800dddc:	3fd4d612 	.word	0x3fd4d612
 800dde0:	55555555 	.word	0x55555555
 800dde4:	3fc55555 	.word	0x3fc55555
 800dde8:	b12e9282 	.word	0xb12e9282
 800ddec:	3fb3b8c5 	.word	0x3fb3b8c5
 800ddf0:	1b8d0159 	.word	0x1b8d0159
 800ddf4:	3fe6066c 	.word	0x3fe6066c
 800ddf8:	9c598ac8 	.word	0x9c598ac8
 800ddfc:	40002ae5 	.word	0x40002ae5
 800de00:	1c8a2d4b 	.word	0x1c8a2d4b
 800de04:	40033a27 	.word	0x40033a27
 800de08:	33145c07 	.word	0x33145c07
 800de0c:	3c91a626 	.word	0x3c91a626
 800de10:	54442d18 	.word	0x54442d18
 800de14:	3ff921fb 	.word	0x3ff921fb
 800de18:	3fefffff 	.word	0x3fefffff
 800de1c:	3fdfffff 	.word	0x3fdfffff
 800de20:	3c600000 	.word	0x3c600000
 800de24:	3ff00000 	.word	0x3ff00000
 800de28:	3fe00000 	.word	0x3fe00000
 800de2c:	ee10 2a10 	vmov	r2, s0
 800de30:	462b      	mov	r3, r5
 800de32:	496d      	ldr	r1, [pc, #436]	; (800dfe8 <__ieee754_acos+0x4b8>)
 800de34:	2000      	movs	r0, #0
 800de36:	f7f2 fa3f 	bl	80002b8 <__aeabi_dsub>
 800de3a:	4b6c      	ldr	r3, [pc, #432]	; (800dfec <__ieee754_acos+0x4bc>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	f7f2 fbf3 	bl	8000628 <__aeabi_dmul>
 800de42:	4604      	mov	r4, r0
 800de44:	460d      	mov	r5, r1
 800de46:	ec45 4b10 	vmov	d0, r4, r5
 800de4a:	f001 f8d9 	bl	800f000 <__ieee754_sqrt>
 800de4e:	a34e      	add	r3, pc, #312	; (adr r3, 800df88 <__ieee754_acos+0x458>)
 800de50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	ec59 8b10 	vmov	r8, r9, d0
 800de5c:	f7f2 fbe4 	bl	8000628 <__aeabi_dmul>
 800de60:	a34b      	add	r3, pc, #300	; (adr r3, 800df90 <__ieee754_acos+0x460>)
 800de62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de66:	f7f2 fa29 	bl	80002bc <__adddf3>
 800de6a:	4622      	mov	r2, r4
 800de6c:	462b      	mov	r3, r5
 800de6e:	f7f2 fbdb 	bl	8000628 <__aeabi_dmul>
 800de72:	a349      	add	r3, pc, #292	; (adr r3, 800df98 <__ieee754_acos+0x468>)
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f7f2 fa1e 	bl	80002b8 <__aeabi_dsub>
 800de7c:	4622      	mov	r2, r4
 800de7e:	462b      	mov	r3, r5
 800de80:	f7f2 fbd2 	bl	8000628 <__aeabi_dmul>
 800de84:	a346      	add	r3, pc, #280	; (adr r3, 800dfa0 <__ieee754_acos+0x470>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	f7f2 fa17 	bl	80002bc <__adddf3>
 800de8e:	4622      	mov	r2, r4
 800de90:	462b      	mov	r3, r5
 800de92:	f7f2 fbc9 	bl	8000628 <__aeabi_dmul>
 800de96:	a344      	add	r3, pc, #272	; (adr r3, 800dfa8 <__ieee754_acos+0x478>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	f7f2 fa0c 	bl	80002b8 <__aeabi_dsub>
 800dea0:	4622      	mov	r2, r4
 800dea2:	462b      	mov	r3, r5
 800dea4:	f7f2 fbc0 	bl	8000628 <__aeabi_dmul>
 800dea8:	a341      	add	r3, pc, #260	; (adr r3, 800dfb0 <__ieee754_acos+0x480>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 fa05 	bl	80002bc <__adddf3>
 800deb2:	4622      	mov	r2, r4
 800deb4:	462b      	mov	r3, r5
 800deb6:	f7f2 fbb7 	bl	8000628 <__aeabi_dmul>
 800deba:	a33f      	add	r3, pc, #252	; (adr r3, 800dfb8 <__ieee754_acos+0x488>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	4682      	mov	sl, r0
 800dec2:	468b      	mov	fp, r1
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fbae 	bl	8000628 <__aeabi_dmul>
 800decc:	a33c      	add	r3, pc, #240	; (adr r3, 800dfc0 <__ieee754_acos+0x490>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 f9f1 	bl	80002b8 <__aeabi_dsub>
 800ded6:	4622      	mov	r2, r4
 800ded8:	462b      	mov	r3, r5
 800deda:	f7f2 fba5 	bl	8000628 <__aeabi_dmul>
 800dede:	a33a      	add	r3, pc, #232	; (adr r3, 800dfc8 <__ieee754_acos+0x498>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	f7f2 f9ea 	bl	80002bc <__adddf3>
 800dee8:	4622      	mov	r2, r4
 800deea:	462b      	mov	r3, r5
 800deec:	f7f2 fb9c 	bl	8000628 <__aeabi_dmul>
 800def0:	a337      	add	r3, pc, #220	; (adr r3, 800dfd0 <__ieee754_acos+0x4a0>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 f9df 	bl	80002b8 <__aeabi_dsub>
 800defa:	4622      	mov	r2, r4
 800defc:	462b      	mov	r3, r5
 800defe:	f7f2 fb93 	bl	8000628 <__aeabi_dmul>
 800df02:	4b39      	ldr	r3, [pc, #228]	; (800dfe8 <__ieee754_acos+0x4b8>)
 800df04:	2200      	movs	r2, #0
 800df06:	f7f2 f9d9 	bl	80002bc <__adddf3>
 800df0a:	4602      	mov	r2, r0
 800df0c:	460b      	mov	r3, r1
 800df0e:	4650      	mov	r0, sl
 800df10:	4659      	mov	r1, fp
 800df12:	f7f2 fcb3 	bl	800087c <__aeabi_ddiv>
 800df16:	4642      	mov	r2, r8
 800df18:	464b      	mov	r3, r9
 800df1a:	f7f2 fb85 	bl	8000628 <__aeabi_dmul>
 800df1e:	2600      	movs	r6, #0
 800df20:	4682      	mov	sl, r0
 800df22:	468b      	mov	fp, r1
 800df24:	4632      	mov	r2, r6
 800df26:	464b      	mov	r3, r9
 800df28:	4630      	mov	r0, r6
 800df2a:	4649      	mov	r1, r9
 800df2c:	f7f2 fb7c 	bl	8000628 <__aeabi_dmul>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4620      	mov	r0, r4
 800df36:	4629      	mov	r1, r5
 800df38:	f7f2 f9be 	bl	80002b8 <__aeabi_dsub>
 800df3c:	4632      	mov	r2, r6
 800df3e:	4604      	mov	r4, r0
 800df40:	460d      	mov	r5, r1
 800df42:	464b      	mov	r3, r9
 800df44:	4640      	mov	r0, r8
 800df46:	4649      	mov	r1, r9
 800df48:	f7f2 f9b8 	bl	80002bc <__adddf3>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4620      	mov	r0, r4
 800df52:	4629      	mov	r1, r5
 800df54:	f7f2 fc92 	bl	800087c <__aeabi_ddiv>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4650      	mov	r0, sl
 800df5e:	4659      	mov	r1, fp
 800df60:	f7f2 f9ac 	bl	80002bc <__adddf3>
 800df64:	4632      	mov	r2, r6
 800df66:	464b      	mov	r3, r9
 800df68:	f7f2 f9a8 	bl	80002bc <__adddf3>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	f7f2 f9a4 	bl	80002bc <__adddf3>
 800df74:	e5fe      	b.n	800db74 <__ieee754_acos+0x44>
 800df76:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dfd8 <__ieee754_acos+0x4a8>
 800df7a:	e5ed      	b.n	800db58 <__ieee754_acos+0x28>
 800df7c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dfe0 <__ieee754_acos+0x4b0>
 800df80:	e5ea      	b.n	800db58 <__ieee754_acos+0x28>
 800df82:	bf00      	nop
 800df84:	f3af 8000 	nop.w
 800df88:	0dfdf709 	.word	0x0dfdf709
 800df8c:	3f023de1 	.word	0x3f023de1
 800df90:	7501b288 	.word	0x7501b288
 800df94:	3f49efe0 	.word	0x3f49efe0
 800df98:	b5688f3b 	.word	0xb5688f3b
 800df9c:	3fa48228 	.word	0x3fa48228
 800dfa0:	0e884455 	.word	0x0e884455
 800dfa4:	3fc9c155 	.word	0x3fc9c155
 800dfa8:	03eb6f7d 	.word	0x03eb6f7d
 800dfac:	3fd4d612 	.word	0x3fd4d612
 800dfb0:	55555555 	.word	0x55555555
 800dfb4:	3fc55555 	.word	0x3fc55555
 800dfb8:	b12e9282 	.word	0xb12e9282
 800dfbc:	3fb3b8c5 	.word	0x3fb3b8c5
 800dfc0:	1b8d0159 	.word	0x1b8d0159
 800dfc4:	3fe6066c 	.word	0x3fe6066c
 800dfc8:	9c598ac8 	.word	0x9c598ac8
 800dfcc:	40002ae5 	.word	0x40002ae5
 800dfd0:	1c8a2d4b 	.word	0x1c8a2d4b
 800dfd4:	40033a27 	.word	0x40033a27
	...
 800dfe0:	54442d18 	.word	0x54442d18
 800dfe4:	3ff921fb 	.word	0x3ff921fb
 800dfe8:	3ff00000 	.word	0x3ff00000
 800dfec:	3fe00000 	.word	0x3fe00000

0800dff0 <__ieee754_atan2>:
 800dff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dff4:	ec57 6b11 	vmov	r6, r7, d1
 800dff8:	4273      	negs	r3, r6
 800dffa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e180 <__ieee754_atan2+0x190>
 800dffe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e002:	4333      	orrs	r3, r6
 800e004:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e008:	4573      	cmp	r3, lr
 800e00a:	ec51 0b10 	vmov	r0, r1, d0
 800e00e:	ee11 8a10 	vmov	r8, s2
 800e012:	d80a      	bhi.n	800e02a <__ieee754_atan2+0x3a>
 800e014:	4244      	negs	r4, r0
 800e016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e01a:	4304      	orrs	r4, r0
 800e01c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e020:	4574      	cmp	r4, lr
 800e022:	ee10 9a10 	vmov	r9, s0
 800e026:	468c      	mov	ip, r1
 800e028:	d907      	bls.n	800e03a <__ieee754_atan2+0x4a>
 800e02a:	4632      	mov	r2, r6
 800e02c:	463b      	mov	r3, r7
 800e02e:	f7f2 f945 	bl	80002bc <__adddf3>
 800e032:	ec41 0b10 	vmov	d0, r0, r1
 800e036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e03a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e03e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e042:	4334      	orrs	r4, r6
 800e044:	d103      	bne.n	800e04e <__ieee754_atan2+0x5e>
 800e046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04a:	f001 bd95 	b.w	800fb78 <atan>
 800e04e:	17bc      	asrs	r4, r7, #30
 800e050:	f004 0402 	and.w	r4, r4, #2
 800e054:	ea53 0909 	orrs.w	r9, r3, r9
 800e058:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e05c:	d107      	bne.n	800e06e <__ieee754_atan2+0x7e>
 800e05e:	2c02      	cmp	r4, #2
 800e060:	d060      	beq.n	800e124 <__ieee754_atan2+0x134>
 800e062:	2c03      	cmp	r4, #3
 800e064:	d1e5      	bne.n	800e032 <__ieee754_atan2+0x42>
 800e066:	a142      	add	r1, pc, #264	; (adr r1, 800e170 <__ieee754_atan2+0x180>)
 800e068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e06c:	e7e1      	b.n	800e032 <__ieee754_atan2+0x42>
 800e06e:	ea52 0808 	orrs.w	r8, r2, r8
 800e072:	d106      	bne.n	800e082 <__ieee754_atan2+0x92>
 800e074:	f1bc 0f00 	cmp.w	ip, #0
 800e078:	da5f      	bge.n	800e13a <__ieee754_atan2+0x14a>
 800e07a:	a13f      	add	r1, pc, #252	; (adr r1, 800e178 <__ieee754_atan2+0x188>)
 800e07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e080:	e7d7      	b.n	800e032 <__ieee754_atan2+0x42>
 800e082:	4572      	cmp	r2, lr
 800e084:	d10f      	bne.n	800e0a6 <__ieee754_atan2+0xb6>
 800e086:	4293      	cmp	r3, r2
 800e088:	f104 34ff 	add.w	r4, r4, #4294967295
 800e08c:	d107      	bne.n	800e09e <__ieee754_atan2+0xae>
 800e08e:	2c02      	cmp	r4, #2
 800e090:	d84c      	bhi.n	800e12c <__ieee754_atan2+0x13c>
 800e092:	4b35      	ldr	r3, [pc, #212]	; (800e168 <__ieee754_atan2+0x178>)
 800e094:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e098:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e09c:	e7c9      	b.n	800e032 <__ieee754_atan2+0x42>
 800e09e:	2c02      	cmp	r4, #2
 800e0a0:	d848      	bhi.n	800e134 <__ieee754_atan2+0x144>
 800e0a2:	4b32      	ldr	r3, [pc, #200]	; (800e16c <__ieee754_atan2+0x17c>)
 800e0a4:	e7f6      	b.n	800e094 <__ieee754_atan2+0xa4>
 800e0a6:	4573      	cmp	r3, lr
 800e0a8:	d0e4      	beq.n	800e074 <__ieee754_atan2+0x84>
 800e0aa:	1a9b      	subs	r3, r3, r2
 800e0ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e0b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e0b4:	da1e      	bge.n	800e0f4 <__ieee754_atan2+0x104>
 800e0b6:	2f00      	cmp	r7, #0
 800e0b8:	da01      	bge.n	800e0be <__ieee754_atan2+0xce>
 800e0ba:	323c      	adds	r2, #60	; 0x3c
 800e0bc:	db1e      	blt.n	800e0fc <__ieee754_atan2+0x10c>
 800e0be:	4632      	mov	r2, r6
 800e0c0:	463b      	mov	r3, r7
 800e0c2:	f7f2 fbdb 	bl	800087c <__aeabi_ddiv>
 800e0c6:	ec41 0b10 	vmov	d0, r0, r1
 800e0ca:	f001 fef5 	bl	800feb8 <fabs>
 800e0ce:	f001 fd53 	bl	800fb78 <atan>
 800e0d2:	ec51 0b10 	vmov	r0, r1, d0
 800e0d6:	2c01      	cmp	r4, #1
 800e0d8:	d013      	beq.n	800e102 <__ieee754_atan2+0x112>
 800e0da:	2c02      	cmp	r4, #2
 800e0dc:	d015      	beq.n	800e10a <__ieee754_atan2+0x11a>
 800e0de:	2c00      	cmp	r4, #0
 800e0e0:	d0a7      	beq.n	800e032 <__ieee754_atan2+0x42>
 800e0e2:	a319      	add	r3, pc, #100	; (adr r3, 800e148 <__ieee754_atan2+0x158>)
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	f7f2 f8e6 	bl	80002b8 <__aeabi_dsub>
 800e0ec:	a318      	add	r3, pc, #96	; (adr r3, 800e150 <__ieee754_atan2+0x160>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	e014      	b.n	800e11e <__ieee754_atan2+0x12e>
 800e0f4:	a118      	add	r1, pc, #96	; (adr r1, 800e158 <__ieee754_atan2+0x168>)
 800e0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0fa:	e7ec      	b.n	800e0d6 <__ieee754_atan2+0xe6>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	2100      	movs	r1, #0
 800e100:	e7e9      	b.n	800e0d6 <__ieee754_atan2+0xe6>
 800e102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e106:	4619      	mov	r1, r3
 800e108:	e793      	b.n	800e032 <__ieee754_atan2+0x42>
 800e10a:	a30f      	add	r3, pc, #60	; (adr r3, 800e148 <__ieee754_atan2+0x158>)
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f7f2 f8d2 	bl	80002b8 <__aeabi_dsub>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	a10d      	add	r1, pc, #52	; (adr r1, 800e150 <__ieee754_atan2+0x160>)
 800e11a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e11e:	f7f2 f8cb 	bl	80002b8 <__aeabi_dsub>
 800e122:	e786      	b.n	800e032 <__ieee754_atan2+0x42>
 800e124:	a10a      	add	r1, pc, #40	; (adr r1, 800e150 <__ieee754_atan2+0x160>)
 800e126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e12a:	e782      	b.n	800e032 <__ieee754_atan2+0x42>
 800e12c:	a10c      	add	r1, pc, #48	; (adr r1, 800e160 <__ieee754_atan2+0x170>)
 800e12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e132:	e77e      	b.n	800e032 <__ieee754_atan2+0x42>
 800e134:	2000      	movs	r0, #0
 800e136:	2100      	movs	r1, #0
 800e138:	e77b      	b.n	800e032 <__ieee754_atan2+0x42>
 800e13a:	a107      	add	r1, pc, #28	; (adr r1, 800e158 <__ieee754_atan2+0x168>)
 800e13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e140:	e777      	b.n	800e032 <__ieee754_atan2+0x42>
 800e142:	bf00      	nop
 800e144:	f3af 8000 	nop.w
 800e148:	33145c07 	.word	0x33145c07
 800e14c:	3ca1a626 	.word	0x3ca1a626
 800e150:	54442d18 	.word	0x54442d18
 800e154:	400921fb 	.word	0x400921fb
 800e158:	54442d18 	.word	0x54442d18
 800e15c:	3ff921fb 	.word	0x3ff921fb
 800e160:	54442d18 	.word	0x54442d18
 800e164:	3fe921fb 	.word	0x3fe921fb
 800e168:	08010a78 	.word	0x08010a78
 800e16c:	08010a90 	.word	0x08010a90
 800e170:	54442d18 	.word	0x54442d18
 800e174:	c00921fb 	.word	0xc00921fb
 800e178:	54442d18 	.word	0x54442d18
 800e17c:	bff921fb 	.word	0xbff921fb
 800e180:	7ff00000 	.word	0x7ff00000
 800e184:	00000000 	.word	0x00000000

0800e188 <__ieee754_pow>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ed2d 8b06 	vpush	{d8-d10}
 800e190:	b089      	sub	sp, #36	; 0x24
 800e192:	ed8d 1b00 	vstr	d1, [sp]
 800e196:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e19a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e19e:	ea58 0102 	orrs.w	r1, r8, r2
 800e1a2:	ec57 6b10 	vmov	r6, r7, d0
 800e1a6:	d115      	bne.n	800e1d4 <__ieee754_pow+0x4c>
 800e1a8:	19b3      	adds	r3, r6, r6
 800e1aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e1ae:	4152      	adcs	r2, r2
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	4b89      	ldr	r3, [pc, #548]	; (800e3d8 <__ieee754_pow+0x250>)
 800e1b4:	4193      	sbcs	r3, r2
 800e1b6:	f080 84d2 	bcs.w	800eb5e <__ieee754_pow+0x9d6>
 800e1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1be:	4630      	mov	r0, r6
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	f7f2 f87b 	bl	80002bc <__adddf3>
 800e1c6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ca:	b009      	add	sp, #36	; 0x24
 800e1cc:	ecbd 8b06 	vpop	{d8-d10}
 800e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d4:	4b81      	ldr	r3, [pc, #516]	; (800e3dc <__ieee754_pow+0x254>)
 800e1d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e1da:	429c      	cmp	r4, r3
 800e1dc:	ee10 aa10 	vmov	sl, s0
 800e1e0:	463d      	mov	r5, r7
 800e1e2:	dc06      	bgt.n	800e1f2 <__ieee754_pow+0x6a>
 800e1e4:	d101      	bne.n	800e1ea <__ieee754_pow+0x62>
 800e1e6:	2e00      	cmp	r6, #0
 800e1e8:	d1e7      	bne.n	800e1ba <__ieee754_pow+0x32>
 800e1ea:	4598      	cmp	r8, r3
 800e1ec:	dc01      	bgt.n	800e1f2 <__ieee754_pow+0x6a>
 800e1ee:	d10f      	bne.n	800e210 <__ieee754_pow+0x88>
 800e1f0:	b172      	cbz	r2, 800e210 <__ieee754_pow+0x88>
 800e1f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e1f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e1fa:	ea55 050a 	orrs.w	r5, r5, sl
 800e1fe:	d1dc      	bne.n	800e1ba <__ieee754_pow+0x32>
 800e200:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e204:	18db      	adds	r3, r3, r3
 800e206:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e20a:	4152      	adcs	r2, r2
 800e20c:	429d      	cmp	r5, r3
 800e20e:	e7d0      	b.n	800e1b2 <__ieee754_pow+0x2a>
 800e210:	2d00      	cmp	r5, #0
 800e212:	da3b      	bge.n	800e28c <__ieee754_pow+0x104>
 800e214:	4b72      	ldr	r3, [pc, #456]	; (800e3e0 <__ieee754_pow+0x258>)
 800e216:	4598      	cmp	r8, r3
 800e218:	dc51      	bgt.n	800e2be <__ieee754_pow+0x136>
 800e21a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e21e:	4598      	cmp	r8, r3
 800e220:	f340 84ac 	ble.w	800eb7c <__ieee754_pow+0x9f4>
 800e224:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e228:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e22c:	2b14      	cmp	r3, #20
 800e22e:	dd0f      	ble.n	800e250 <__ieee754_pow+0xc8>
 800e230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e234:	fa22 f103 	lsr.w	r1, r2, r3
 800e238:	fa01 f303 	lsl.w	r3, r1, r3
 800e23c:	4293      	cmp	r3, r2
 800e23e:	f040 849d 	bne.w	800eb7c <__ieee754_pow+0x9f4>
 800e242:	f001 0101 	and.w	r1, r1, #1
 800e246:	f1c1 0302 	rsb	r3, r1, #2
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	b182      	cbz	r2, 800e270 <__ieee754_pow+0xe8>
 800e24e:	e05f      	b.n	800e310 <__ieee754_pow+0x188>
 800e250:	2a00      	cmp	r2, #0
 800e252:	d15b      	bne.n	800e30c <__ieee754_pow+0x184>
 800e254:	f1c3 0314 	rsb	r3, r3, #20
 800e258:	fa48 f103 	asr.w	r1, r8, r3
 800e25c:	fa01 f303 	lsl.w	r3, r1, r3
 800e260:	4543      	cmp	r3, r8
 800e262:	f040 8488 	bne.w	800eb76 <__ieee754_pow+0x9ee>
 800e266:	f001 0101 	and.w	r1, r1, #1
 800e26a:	f1c1 0302 	rsb	r3, r1, #2
 800e26e:	9304      	str	r3, [sp, #16]
 800e270:	4b5c      	ldr	r3, [pc, #368]	; (800e3e4 <__ieee754_pow+0x25c>)
 800e272:	4598      	cmp	r8, r3
 800e274:	d132      	bne.n	800e2dc <__ieee754_pow+0x154>
 800e276:	f1b9 0f00 	cmp.w	r9, #0
 800e27a:	f280 8478 	bge.w	800eb6e <__ieee754_pow+0x9e6>
 800e27e:	4959      	ldr	r1, [pc, #356]	; (800e3e4 <__ieee754_pow+0x25c>)
 800e280:	4632      	mov	r2, r6
 800e282:	463b      	mov	r3, r7
 800e284:	2000      	movs	r0, #0
 800e286:	f7f2 faf9 	bl	800087c <__aeabi_ddiv>
 800e28a:	e79c      	b.n	800e1c6 <__ieee754_pow+0x3e>
 800e28c:	2300      	movs	r3, #0
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	2a00      	cmp	r2, #0
 800e292:	d13d      	bne.n	800e310 <__ieee754_pow+0x188>
 800e294:	4b51      	ldr	r3, [pc, #324]	; (800e3dc <__ieee754_pow+0x254>)
 800e296:	4598      	cmp	r8, r3
 800e298:	d1ea      	bne.n	800e270 <__ieee754_pow+0xe8>
 800e29a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e29e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e2a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e2a6:	f000 845a 	beq.w	800eb5e <__ieee754_pow+0x9d6>
 800e2aa:	4b4f      	ldr	r3, [pc, #316]	; (800e3e8 <__ieee754_pow+0x260>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	dd08      	ble.n	800e2c2 <__ieee754_pow+0x13a>
 800e2b0:	f1b9 0f00 	cmp.w	r9, #0
 800e2b4:	f2c0 8457 	blt.w	800eb66 <__ieee754_pow+0x9de>
 800e2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2bc:	e783      	b.n	800e1c6 <__ieee754_pow+0x3e>
 800e2be:	2302      	movs	r3, #2
 800e2c0:	e7e5      	b.n	800e28e <__ieee754_pow+0x106>
 800e2c2:	f1b9 0f00 	cmp.w	r9, #0
 800e2c6:	f04f 0000 	mov.w	r0, #0
 800e2ca:	f04f 0100 	mov.w	r1, #0
 800e2ce:	f6bf af7a 	bge.w	800e1c6 <__ieee754_pow+0x3e>
 800e2d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e2d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e2da:	e774      	b.n	800e1c6 <__ieee754_pow+0x3e>
 800e2dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e2e0:	d106      	bne.n	800e2f0 <__ieee754_pow+0x168>
 800e2e2:	4632      	mov	r2, r6
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	4639      	mov	r1, r7
 800e2ea:	f7f2 f99d 	bl	8000628 <__aeabi_dmul>
 800e2ee:	e76a      	b.n	800e1c6 <__ieee754_pow+0x3e>
 800e2f0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ec <__ieee754_pow+0x264>)
 800e2f2:	4599      	cmp	r9, r3
 800e2f4:	d10c      	bne.n	800e310 <__ieee754_pow+0x188>
 800e2f6:	2d00      	cmp	r5, #0
 800e2f8:	db0a      	blt.n	800e310 <__ieee754_pow+0x188>
 800e2fa:	ec47 6b10 	vmov	d0, r6, r7
 800e2fe:	b009      	add	sp, #36	; 0x24
 800e300:	ecbd 8b06 	vpop	{d8-d10}
 800e304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	f000 be7a 	b.w	800f000 <__ieee754_sqrt>
 800e30c:	2300      	movs	r3, #0
 800e30e:	9304      	str	r3, [sp, #16]
 800e310:	ec47 6b10 	vmov	d0, r6, r7
 800e314:	f001 fdd0 	bl	800feb8 <fabs>
 800e318:	ec51 0b10 	vmov	r0, r1, d0
 800e31c:	f1ba 0f00 	cmp.w	sl, #0
 800e320:	d129      	bne.n	800e376 <__ieee754_pow+0x1ee>
 800e322:	b124      	cbz	r4, 800e32e <__ieee754_pow+0x1a6>
 800e324:	4b2f      	ldr	r3, [pc, #188]	; (800e3e4 <__ieee754_pow+0x25c>)
 800e326:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d123      	bne.n	800e376 <__ieee754_pow+0x1ee>
 800e32e:	f1b9 0f00 	cmp.w	r9, #0
 800e332:	da05      	bge.n	800e340 <__ieee754_pow+0x1b8>
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	2000      	movs	r0, #0
 800e33a:	492a      	ldr	r1, [pc, #168]	; (800e3e4 <__ieee754_pow+0x25c>)
 800e33c:	f7f2 fa9e 	bl	800087c <__aeabi_ddiv>
 800e340:	2d00      	cmp	r5, #0
 800e342:	f6bf af40 	bge.w	800e1c6 <__ieee754_pow+0x3e>
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e34c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e350:	4323      	orrs	r3, r4
 800e352:	d108      	bne.n	800e366 <__ieee754_pow+0x1de>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4610      	mov	r0, r2
 800e35a:	4619      	mov	r1, r3
 800e35c:	f7f1 ffac 	bl	80002b8 <__aeabi_dsub>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	e78f      	b.n	800e286 <__ieee754_pow+0xfe>
 800e366:	9b04      	ldr	r3, [sp, #16]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	f47f af2c 	bne.w	800e1c6 <__ieee754_pow+0x3e>
 800e36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e372:	4619      	mov	r1, r3
 800e374:	e727      	b.n	800e1c6 <__ieee754_pow+0x3e>
 800e376:	0feb      	lsrs	r3, r5, #31
 800e378:	3b01      	subs	r3, #1
 800e37a:	9306      	str	r3, [sp, #24]
 800e37c:	9a06      	ldr	r2, [sp, #24]
 800e37e:	9b04      	ldr	r3, [sp, #16]
 800e380:	4313      	orrs	r3, r2
 800e382:	d102      	bne.n	800e38a <__ieee754_pow+0x202>
 800e384:	4632      	mov	r2, r6
 800e386:	463b      	mov	r3, r7
 800e388:	e7e6      	b.n	800e358 <__ieee754_pow+0x1d0>
 800e38a:	4b19      	ldr	r3, [pc, #100]	; (800e3f0 <__ieee754_pow+0x268>)
 800e38c:	4598      	cmp	r8, r3
 800e38e:	f340 80fb 	ble.w	800e588 <__ieee754_pow+0x400>
 800e392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e396:	4598      	cmp	r8, r3
 800e398:	4b13      	ldr	r3, [pc, #76]	; (800e3e8 <__ieee754_pow+0x260>)
 800e39a:	dd0c      	ble.n	800e3b6 <__ieee754_pow+0x22e>
 800e39c:	429c      	cmp	r4, r3
 800e39e:	dc0f      	bgt.n	800e3c0 <__ieee754_pow+0x238>
 800e3a0:	f1b9 0f00 	cmp.w	r9, #0
 800e3a4:	da0f      	bge.n	800e3c6 <__ieee754_pow+0x23e>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	b009      	add	sp, #36	; 0x24
 800e3aa:	ecbd 8b06 	vpop	{d8-d10}
 800e3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b2:	f001 bbd6 	b.w	800fb62 <__math_oflow>
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	dbf2      	blt.n	800e3a0 <__ieee754_pow+0x218>
 800e3ba:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <__ieee754_pow+0x25c>)
 800e3bc:	429c      	cmp	r4, r3
 800e3be:	dd19      	ble.n	800e3f4 <__ieee754_pow+0x26c>
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	dcef      	bgt.n	800e3a6 <__ieee754_pow+0x21e>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	b009      	add	sp, #36	; 0x24
 800e3ca:	ecbd 8b06 	vpop	{d8-d10}
 800e3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d2:	f001 bbbd 	b.w	800fb50 <__math_uflow>
 800e3d6:	bf00      	nop
 800e3d8:	fff00000 	.word	0xfff00000
 800e3dc:	7ff00000 	.word	0x7ff00000
 800e3e0:	433fffff 	.word	0x433fffff
 800e3e4:	3ff00000 	.word	0x3ff00000
 800e3e8:	3fefffff 	.word	0x3fefffff
 800e3ec:	3fe00000 	.word	0x3fe00000
 800e3f0:	41e00000 	.word	0x41e00000
 800e3f4:	4b60      	ldr	r3, [pc, #384]	; (800e578 <__ieee754_pow+0x3f0>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f7f1 ff5e 	bl	80002b8 <__aeabi_dsub>
 800e3fc:	a354      	add	r3, pc, #336	; (adr r3, 800e550 <__ieee754_pow+0x3c8>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	4604      	mov	r4, r0
 800e404:	460d      	mov	r5, r1
 800e406:	f7f2 f90f 	bl	8000628 <__aeabi_dmul>
 800e40a:	a353      	add	r3, pc, #332	; (adr r3, 800e558 <__ieee754_pow+0x3d0>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	4606      	mov	r6, r0
 800e412:	460f      	mov	r7, r1
 800e414:	4620      	mov	r0, r4
 800e416:	4629      	mov	r1, r5
 800e418:	f7f2 f906 	bl	8000628 <__aeabi_dmul>
 800e41c:	4b57      	ldr	r3, [pc, #348]	; (800e57c <__ieee754_pow+0x3f4>)
 800e41e:	4682      	mov	sl, r0
 800e420:	468b      	mov	fp, r1
 800e422:	2200      	movs	r2, #0
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f2 f8fe 	bl	8000628 <__aeabi_dmul>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	a14b      	add	r1, pc, #300	; (adr r1, 800e560 <__ieee754_pow+0x3d8>)
 800e432:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e436:	f7f1 ff3f 	bl	80002b8 <__aeabi_dsub>
 800e43a:	4622      	mov	r2, r4
 800e43c:	462b      	mov	r3, r5
 800e43e:	f7f2 f8f3 	bl	8000628 <__aeabi_dmul>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	2000      	movs	r0, #0
 800e448:	494d      	ldr	r1, [pc, #308]	; (800e580 <__ieee754_pow+0x3f8>)
 800e44a:	f7f1 ff35 	bl	80002b8 <__aeabi_dsub>
 800e44e:	4622      	mov	r2, r4
 800e450:	4680      	mov	r8, r0
 800e452:	4689      	mov	r9, r1
 800e454:	462b      	mov	r3, r5
 800e456:	4620      	mov	r0, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	f7f2 f8e5 	bl	8000628 <__aeabi_dmul>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	4640      	mov	r0, r8
 800e464:	4649      	mov	r1, r9
 800e466:	f7f2 f8df 	bl	8000628 <__aeabi_dmul>
 800e46a:	a33f      	add	r3, pc, #252	; (adr r3, 800e568 <__ieee754_pow+0x3e0>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	f7f2 f8da 	bl	8000628 <__aeabi_dmul>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4650      	mov	r0, sl
 800e47a:	4659      	mov	r1, fp
 800e47c:	f7f1 ff1c 	bl	80002b8 <__aeabi_dsub>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4680      	mov	r8, r0
 800e486:	4689      	mov	r9, r1
 800e488:	4630      	mov	r0, r6
 800e48a:	4639      	mov	r1, r7
 800e48c:	f7f1 ff16 	bl	80002bc <__adddf3>
 800e490:	2000      	movs	r0, #0
 800e492:	4632      	mov	r2, r6
 800e494:	463b      	mov	r3, r7
 800e496:	4604      	mov	r4, r0
 800e498:	460d      	mov	r5, r1
 800e49a:	f7f1 ff0d 	bl	80002b8 <__aeabi_dsub>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	f7f1 ff07 	bl	80002b8 <__aeabi_dsub>
 800e4aa:	9b04      	ldr	r3, [sp, #16]
 800e4ac:	9a06      	ldr	r2, [sp, #24]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	4682      	mov	sl, r0
 800e4b4:	468b      	mov	fp, r1
 800e4b6:	f040 81e7 	bne.w	800e888 <__ieee754_pow+0x700>
 800e4ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e570 <__ieee754_pow+0x3e8>
 800e4be:	eeb0 8a47 	vmov.f32	s16, s14
 800e4c2:	eef0 8a67 	vmov.f32	s17, s15
 800e4c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e4ca:	2600      	movs	r6, #0
 800e4cc:	4632      	mov	r2, r6
 800e4ce:	463b      	mov	r3, r7
 800e4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4d4:	f7f1 fef0 	bl	80002b8 <__aeabi_dsub>
 800e4d8:	4622      	mov	r2, r4
 800e4da:	462b      	mov	r3, r5
 800e4dc:	f7f2 f8a4 	bl	8000628 <__aeabi_dmul>
 800e4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4e4:	4680      	mov	r8, r0
 800e4e6:	4689      	mov	r9, r1
 800e4e8:	4650      	mov	r0, sl
 800e4ea:	4659      	mov	r1, fp
 800e4ec:	f7f2 f89c 	bl	8000628 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4640      	mov	r0, r8
 800e4f6:	4649      	mov	r1, r9
 800e4f8:	f7f1 fee0 	bl	80002bc <__adddf3>
 800e4fc:	4632      	mov	r2, r6
 800e4fe:	463b      	mov	r3, r7
 800e500:	4680      	mov	r8, r0
 800e502:	4689      	mov	r9, r1
 800e504:	4620      	mov	r0, r4
 800e506:	4629      	mov	r1, r5
 800e508:	f7f2 f88e 	bl	8000628 <__aeabi_dmul>
 800e50c:	460b      	mov	r3, r1
 800e50e:	4604      	mov	r4, r0
 800e510:	460d      	mov	r5, r1
 800e512:	4602      	mov	r2, r0
 800e514:	4649      	mov	r1, r9
 800e516:	4640      	mov	r0, r8
 800e518:	f7f1 fed0 	bl	80002bc <__adddf3>
 800e51c:	4b19      	ldr	r3, [pc, #100]	; (800e584 <__ieee754_pow+0x3fc>)
 800e51e:	4299      	cmp	r1, r3
 800e520:	ec45 4b19 	vmov	d9, r4, r5
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	468b      	mov	fp, r1
 800e52a:	f340 82f1 	ble.w	800eb10 <__ieee754_pow+0x988>
 800e52e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e536:	4303      	orrs	r3, r0
 800e538:	f000 81e4 	beq.w	800e904 <__ieee754_pow+0x77c>
 800e53c:	ec51 0b18 	vmov	r0, r1, d8
 800e540:	2200      	movs	r2, #0
 800e542:	2300      	movs	r3, #0
 800e544:	f7f2 fae2 	bl	8000b0c <__aeabi_dcmplt>
 800e548:	3800      	subs	r0, #0
 800e54a:	bf18      	it	ne
 800e54c:	2001      	movne	r0, #1
 800e54e:	e72b      	b.n	800e3a8 <__ieee754_pow+0x220>
 800e550:	60000000 	.word	0x60000000
 800e554:	3ff71547 	.word	0x3ff71547
 800e558:	f85ddf44 	.word	0xf85ddf44
 800e55c:	3e54ae0b 	.word	0x3e54ae0b
 800e560:	55555555 	.word	0x55555555
 800e564:	3fd55555 	.word	0x3fd55555
 800e568:	652b82fe 	.word	0x652b82fe
 800e56c:	3ff71547 	.word	0x3ff71547
 800e570:	00000000 	.word	0x00000000
 800e574:	bff00000 	.word	0xbff00000
 800e578:	3ff00000 	.word	0x3ff00000
 800e57c:	3fd00000 	.word	0x3fd00000
 800e580:	3fe00000 	.word	0x3fe00000
 800e584:	408fffff 	.word	0x408fffff
 800e588:	4bd5      	ldr	r3, [pc, #852]	; (800e8e0 <__ieee754_pow+0x758>)
 800e58a:	402b      	ands	r3, r5
 800e58c:	2200      	movs	r2, #0
 800e58e:	b92b      	cbnz	r3, 800e59c <__ieee754_pow+0x414>
 800e590:	4bd4      	ldr	r3, [pc, #848]	; (800e8e4 <__ieee754_pow+0x75c>)
 800e592:	f7f2 f849 	bl	8000628 <__aeabi_dmul>
 800e596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e59a:	460c      	mov	r4, r1
 800e59c:	1523      	asrs	r3, r4, #20
 800e59e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5a2:	4413      	add	r3, r2
 800e5a4:	9305      	str	r3, [sp, #20]
 800e5a6:	4bd0      	ldr	r3, [pc, #832]	; (800e8e8 <__ieee754_pow+0x760>)
 800e5a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e5ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e5b0:	429c      	cmp	r4, r3
 800e5b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5b6:	dd08      	ble.n	800e5ca <__ieee754_pow+0x442>
 800e5b8:	4bcc      	ldr	r3, [pc, #816]	; (800e8ec <__ieee754_pow+0x764>)
 800e5ba:	429c      	cmp	r4, r3
 800e5bc:	f340 8162 	ble.w	800e884 <__ieee754_pow+0x6fc>
 800e5c0:	9b05      	ldr	r3, [sp, #20]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	9305      	str	r3, [sp, #20]
 800e5c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e5ca:	2400      	movs	r4, #0
 800e5cc:	00e3      	lsls	r3, r4, #3
 800e5ce:	9307      	str	r3, [sp, #28]
 800e5d0:	4bc7      	ldr	r3, [pc, #796]	; (800e8f0 <__ieee754_pow+0x768>)
 800e5d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5d6:	ed93 7b00 	vldr	d7, [r3]
 800e5da:	4629      	mov	r1, r5
 800e5dc:	ec53 2b17 	vmov	r2, r3, d7
 800e5e0:	eeb0 9a47 	vmov.f32	s18, s14
 800e5e4:	eef0 9a67 	vmov.f32	s19, s15
 800e5e8:	4682      	mov	sl, r0
 800e5ea:	f7f1 fe65 	bl	80002b8 <__aeabi_dsub>
 800e5ee:	4652      	mov	r2, sl
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	460f      	mov	r7, r1
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	ec51 0b19 	vmov	r0, r1, d9
 800e5fa:	f7f1 fe5f 	bl	80002bc <__adddf3>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	2000      	movs	r0, #0
 800e604:	49bb      	ldr	r1, [pc, #748]	; (800e8f4 <__ieee754_pow+0x76c>)
 800e606:	f7f2 f939 	bl	800087c <__aeabi_ddiv>
 800e60a:	ec41 0b1a 	vmov	d10, r0, r1
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	f7f2 f807 	bl	8000628 <__aeabi_dmul>
 800e61a:	2300      	movs	r3, #0
 800e61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e620:	9302      	str	r3, [sp, #8]
 800e622:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e626:	46ab      	mov	fp, r5
 800e628:	106d      	asrs	r5, r5, #1
 800e62a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e62e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e632:	ec41 0b18 	vmov	d8, r0, r1
 800e636:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e63a:	2200      	movs	r2, #0
 800e63c:	4640      	mov	r0, r8
 800e63e:	4649      	mov	r1, r9
 800e640:	4614      	mov	r4, r2
 800e642:	461d      	mov	r5, r3
 800e644:	f7f1 fff0 	bl	8000628 <__aeabi_dmul>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f1 fe32 	bl	80002b8 <__aeabi_dsub>
 800e654:	ec53 2b19 	vmov	r2, r3, d9
 800e658:	4606      	mov	r6, r0
 800e65a:	460f      	mov	r7, r1
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f7f1 fe2a 	bl	80002b8 <__aeabi_dsub>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4650      	mov	r0, sl
 800e66a:	4659      	mov	r1, fp
 800e66c:	f7f1 fe24 	bl	80002b8 <__aeabi_dsub>
 800e670:	4642      	mov	r2, r8
 800e672:	464b      	mov	r3, r9
 800e674:	f7f1 ffd8 	bl	8000628 <__aeabi_dmul>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4630      	mov	r0, r6
 800e67e:	4639      	mov	r1, r7
 800e680:	f7f1 fe1a 	bl	80002b8 <__aeabi_dsub>
 800e684:	ec53 2b1a 	vmov	r2, r3, d10
 800e688:	f7f1 ffce 	bl	8000628 <__aeabi_dmul>
 800e68c:	ec53 2b18 	vmov	r2, r3, d8
 800e690:	ec41 0b19 	vmov	d9, r0, r1
 800e694:	ec51 0b18 	vmov	r0, r1, d8
 800e698:	f7f1 ffc6 	bl	8000628 <__aeabi_dmul>
 800e69c:	a37c      	add	r3, pc, #496	; (adr r3, 800e890 <__ieee754_pow+0x708>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	460d      	mov	r5, r1
 800e6a6:	f7f1 ffbf 	bl	8000628 <__aeabi_dmul>
 800e6aa:	a37b      	add	r3, pc, #492	; (adr r3, 800e898 <__ieee754_pow+0x710>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 fe04 	bl	80002bc <__adddf3>
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	462b      	mov	r3, r5
 800e6b8:	f7f1 ffb6 	bl	8000628 <__aeabi_dmul>
 800e6bc:	a378      	add	r3, pc, #480	; (adr r3, 800e8a0 <__ieee754_pow+0x718>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 fdfb 	bl	80002bc <__adddf3>
 800e6c6:	4622      	mov	r2, r4
 800e6c8:	462b      	mov	r3, r5
 800e6ca:	f7f1 ffad 	bl	8000628 <__aeabi_dmul>
 800e6ce:	a376      	add	r3, pc, #472	; (adr r3, 800e8a8 <__ieee754_pow+0x720>)
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 fdf2 	bl	80002bc <__adddf3>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	462b      	mov	r3, r5
 800e6dc:	f7f1 ffa4 	bl	8000628 <__aeabi_dmul>
 800e6e0:	a373      	add	r3, pc, #460	; (adr r3, 800e8b0 <__ieee754_pow+0x728>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 fde9 	bl	80002bc <__adddf3>
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	f7f1 ff9b 	bl	8000628 <__aeabi_dmul>
 800e6f2:	a371      	add	r3, pc, #452	; (adr r3, 800e8b8 <__ieee754_pow+0x730>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 fde0 	bl	80002bc <__adddf3>
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	462b      	mov	r3, r5
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f1 ff8e 	bl	8000628 <__aeabi_dmul>
 800e70c:	4602      	mov	r2, r0
 800e70e:	460b      	mov	r3, r1
 800e710:	4630      	mov	r0, r6
 800e712:	4639      	mov	r1, r7
 800e714:	f7f1 ff88 	bl	8000628 <__aeabi_dmul>
 800e718:	4642      	mov	r2, r8
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	464b      	mov	r3, r9
 800e720:	ec51 0b18 	vmov	r0, r1, d8
 800e724:	f7f1 fdca 	bl	80002bc <__adddf3>
 800e728:	ec53 2b19 	vmov	r2, r3, d9
 800e72c:	f7f1 ff7c 	bl	8000628 <__aeabi_dmul>
 800e730:	4622      	mov	r2, r4
 800e732:	462b      	mov	r3, r5
 800e734:	f7f1 fdc2 	bl	80002bc <__adddf3>
 800e738:	4642      	mov	r2, r8
 800e73a:	4682      	mov	sl, r0
 800e73c:	468b      	mov	fp, r1
 800e73e:	464b      	mov	r3, r9
 800e740:	4640      	mov	r0, r8
 800e742:	4649      	mov	r1, r9
 800e744:	f7f1 ff70 	bl	8000628 <__aeabi_dmul>
 800e748:	4b6b      	ldr	r3, [pc, #428]	; (800e8f8 <__ieee754_pow+0x770>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	f7f1 fdb4 	bl	80002bc <__adddf3>
 800e754:	4652      	mov	r2, sl
 800e756:	465b      	mov	r3, fp
 800e758:	f7f1 fdb0 	bl	80002bc <__adddf3>
 800e75c:	2000      	movs	r0, #0
 800e75e:	4604      	mov	r4, r0
 800e760:	460d      	mov	r5, r1
 800e762:	4602      	mov	r2, r0
 800e764:	460b      	mov	r3, r1
 800e766:	4640      	mov	r0, r8
 800e768:	4649      	mov	r1, r9
 800e76a:	f7f1 ff5d 	bl	8000628 <__aeabi_dmul>
 800e76e:	4b62      	ldr	r3, [pc, #392]	; (800e8f8 <__ieee754_pow+0x770>)
 800e770:	4680      	mov	r8, r0
 800e772:	4689      	mov	r9, r1
 800e774:	2200      	movs	r2, #0
 800e776:	4620      	mov	r0, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	f7f1 fd9d 	bl	80002b8 <__aeabi_dsub>
 800e77e:	4632      	mov	r2, r6
 800e780:	463b      	mov	r3, r7
 800e782:	f7f1 fd99 	bl	80002b8 <__aeabi_dsub>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	4650      	mov	r0, sl
 800e78c:	4659      	mov	r1, fp
 800e78e:	f7f1 fd93 	bl	80002b8 <__aeabi_dsub>
 800e792:	ec53 2b18 	vmov	r2, r3, d8
 800e796:	f7f1 ff47 	bl	8000628 <__aeabi_dmul>
 800e79a:	4622      	mov	r2, r4
 800e79c:	4606      	mov	r6, r0
 800e79e:	460f      	mov	r7, r1
 800e7a0:	462b      	mov	r3, r5
 800e7a2:	ec51 0b19 	vmov	r0, r1, d9
 800e7a6:	f7f1 ff3f 	bl	8000628 <__aeabi_dmul>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	f7f1 fd83 	bl	80002bc <__adddf3>
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	460f      	mov	r7, r1
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f1 fd7b 	bl	80002bc <__adddf3>
 800e7c6:	a33e      	add	r3, pc, #248	; (adr r3, 800e8c0 <__ieee754_pow+0x738>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	f7f1 ff29 	bl	8000628 <__aeabi_dmul>
 800e7d6:	4642      	mov	r2, r8
 800e7d8:	ec41 0b18 	vmov	d8, r0, r1
 800e7dc:	464b      	mov	r3, r9
 800e7de:	4620      	mov	r0, r4
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	f7f1 fd69 	bl	80002b8 <__aeabi_dsub>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	f7f1 fd63 	bl	80002b8 <__aeabi_dsub>
 800e7f2:	a335      	add	r3, pc, #212	; (adr r3, 800e8c8 <__ieee754_pow+0x740>)
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	f7f1 ff16 	bl	8000628 <__aeabi_dmul>
 800e7fc:	a334      	add	r3, pc, #208	; (adr r3, 800e8d0 <__ieee754_pow+0x748>)
 800e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e802:	4606      	mov	r6, r0
 800e804:	460f      	mov	r7, r1
 800e806:	4620      	mov	r0, r4
 800e808:	4629      	mov	r1, r5
 800e80a:	f7f1 ff0d 	bl	8000628 <__aeabi_dmul>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4630      	mov	r0, r6
 800e814:	4639      	mov	r1, r7
 800e816:	f7f1 fd51 	bl	80002bc <__adddf3>
 800e81a:	9a07      	ldr	r2, [sp, #28]
 800e81c:	4b37      	ldr	r3, [pc, #220]	; (800e8fc <__ieee754_pow+0x774>)
 800e81e:	4413      	add	r3, r2
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	f7f1 fd4a 	bl	80002bc <__adddf3>
 800e828:	4682      	mov	sl, r0
 800e82a:	9805      	ldr	r0, [sp, #20]
 800e82c:	468b      	mov	fp, r1
 800e82e:	f7f1 fe91 	bl	8000554 <__aeabi_i2d>
 800e832:	9a07      	ldr	r2, [sp, #28]
 800e834:	4b32      	ldr	r3, [pc, #200]	; (800e900 <__ieee754_pow+0x778>)
 800e836:	4413      	add	r3, r2
 800e838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e83c:	4606      	mov	r6, r0
 800e83e:	460f      	mov	r7, r1
 800e840:	4652      	mov	r2, sl
 800e842:	465b      	mov	r3, fp
 800e844:	ec51 0b18 	vmov	r0, r1, d8
 800e848:	f7f1 fd38 	bl	80002bc <__adddf3>
 800e84c:	4642      	mov	r2, r8
 800e84e:	464b      	mov	r3, r9
 800e850:	f7f1 fd34 	bl	80002bc <__adddf3>
 800e854:	4632      	mov	r2, r6
 800e856:	463b      	mov	r3, r7
 800e858:	f7f1 fd30 	bl	80002bc <__adddf3>
 800e85c:	2000      	movs	r0, #0
 800e85e:	4632      	mov	r2, r6
 800e860:	463b      	mov	r3, r7
 800e862:	4604      	mov	r4, r0
 800e864:	460d      	mov	r5, r1
 800e866:	f7f1 fd27 	bl	80002b8 <__aeabi_dsub>
 800e86a:	4642      	mov	r2, r8
 800e86c:	464b      	mov	r3, r9
 800e86e:	f7f1 fd23 	bl	80002b8 <__aeabi_dsub>
 800e872:	ec53 2b18 	vmov	r2, r3, d8
 800e876:	f7f1 fd1f 	bl	80002b8 <__aeabi_dsub>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	4650      	mov	r0, sl
 800e880:	4659      	mov	r1, fp
 800e882:	e610      	b.n	800e4a6 <__ieee754_pow+0x31e>
 800e884:	2401      	movs	r4, #1
 800e886:	e6a1      	b.n	800e5cc <__ieee754_pow+0x444>
 800e888:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e8d8 <__ieee754_pow+0x750>
 800e88c:	e617      	b.n	800e4be <__ieee754_pow+0x336>
 800e88e:	bf00      	nop
 800e890:	4a454eef 	.word	0x4a454eef
 800e894:	3fca7e28 	.word	0x3fca7e28
 800e898:	93c9db65 	.word	0x93c9db65
 800e89c:	3fcd864a 	.word	0x3fcd864a
 800e8a0:	a91d4101 	.word	0xa91d4101
 800e8a4:	3fd17460 	.word	0x3fd17460
 800e8a8:	518f264d 	.word	0x518f264d
 800e8ac:	3fd55555 	.word	0x3fd55555
 800e8b0:	db6fabff 	.word	0xdb6fabff
 800e8b4:	3fdb6db6 	.word	0x3fdb6db6
 800e8b8:	33333303 	.word	0x33333303
 800e8bc:	3fe33333 	.word	0x3fe33333
 800e8c0:	e0000000 	.word	0xe0000000
 800e8c4:	3feec709 	.word	0x3feec709
 800e8c8:	dc3a03fd 	.word	0xdc3a03fd
 800e8cc:	3feec709 	.word	0x3feec709
 800e8d0:	145b01f5 	.word	0x145b01f5
 800e8d4:	be3e2fe0 	.word	0xbe3e2fe0
 800e8d8:	00000000 	.word	0x00000000
 800e8dc:	3ff00000 	.word	0x3ff00000
 800e8e0:	7ff00000 	.word	0x7ff00000
 800e8e4:	43400000 	.word	0x43400000
 800e8e8:	0003988e 	.word	0x0003988e
 800e8ec:	000bb679 	.word	0x000bb679
 800e8f0:	08010aa8 	.word	0x08010aa8
 800e8f4:	3ff00000 	.word	0x3ff00000
 800e8f8:	40080000 	.word	0x40080000
 800e8fc:	08010ac8 	.word	0x08010ac8
 800e900:	08010ab8 	.word	0x08010ab8
 800e904:	a3b5      	add	r3, pc, #724	; (adr r3, 800ebdc <__ieee754_pow+0xa54>)
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	4640      	mov	r0, r8
 800e90c:	4649      	mov	r1, r9
 800e90e:	f7f1 fcd5 	bl	80002bc <__adddf3>
 800e912:	4622      	mov	r2, r4
 800e914:	ec41 0b1a 	vmov	d10, r0, r1
 800e918:	462b      	mov	r3, r5
 800e91a:	4630      	mov	r0, r6
 800e91c:	4639      	mov	r1, r7
 800e91e:	f7f1 fccb 	bl	80002b8 <__aeabi_dsub>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	ec51 0b1a 	vmov	r0, r1, d10
 800e92a:	f7f2 f90d 	bl	8000b48 <__aeabi_dcmpgt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	f47f ae04 	bne.w	800e53c <__ieee754_pow+0x3b4>
 800e934:	4aa4      	ldr	r2, [pc, #656]	; (800ebc8 <__ieee754_pow+0xa40>)
 800e936:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e93a:	4293      	cmp	r3, r2
 800e93c:	f340 8108 	ble.w	800eb50 <__ieee754_pow+0x9c8>
 800e940:	151b      	asrs	r3, r3, #20
 800e942:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e946:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e94a:	fa4a f303 	asr.w	r3, sl, r3
 800e94e:	445b      	add	r3, fp
 800e950:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e954:	4e9d      	ldr	r6, [pc, #628]	; (800ebcc <__ieee754_pow+0xa44>)
 800e956:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e95a:	4116      	asrs	r6, r2
 800e95c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e960:	2000      	movs	r0, #0
 800e962:	ea23 0106 	bic.w	r1, r3, r6
 800e966:	f1c2 0214 	rsb	r2, r2, #20
 800e96a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e96e:	fa4a fa02 	asr.w	sl, sl, r2
 800e972:	f1bb 0f00 	cmp.w	fp, #0
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	bfb8      	it	lt
 800e980:	f1ca 0a00 	rsblt	sl, sl, #0
 800e984:	f7f1 fc98 	bl	80002b8 <__aeabi_dsub>
 800e988:	ec41 0b19 	vmov	d9, r0, r1
 800e98c:	4642      	mov	r2, r8
 800e98e:	464b      	mov	r3, r9
 800e990:	ec51 0b19 	vmov	r0, r1, d9
 800e994:	f7f1 fc92 	bl	80002bc <__adddf3>
 800e998:	a37b      	add	r3, pc, #492	; (adr r3, 800eb88 <__ieee754_pow+0xa00>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	2000      	movs	r0, #0
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	f7f1 fe40 	bl	8000628 <__aeabi_dmul>
 800e9a8:	ec53 2b19 	vmov	r2, r3, d9
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	460f      	mov	r7, r1
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	f7f1 fc80 	bl	80002b8 <__aeabi_dsub>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4640      	mov	r0, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f7f1 fc7a 	bl	80002b8 <__aeabi_dsub>
 800e9c4:	a372      	add	r3, pc, #456	; (adr r3, 800eb90 <__ieee754_pow+0xa08>)
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	f7f1 fe2d 	bl	8000628 <__aeabi_dmul>
 800e9ce:	a372      	add	r3, pc, #456	; (adr r3, 800eb98 <__ieee754_pow+0xa10>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	4680      	mov	r8, r0
 800e9d6:	4689      	mov	r9, r1
 800e9d8:	4620      	mov	r0, r4
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7f1 fe24 	bl	8000628 <__aeabi_dmul>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	f7f1 fc68 	bl	80002bc <__adddf3>
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f1 fc60 	bl	80002bc <__adddf3>
 800e9fc:	4632      	mov	r2, r6
 800e9fe:	463b      	mov	r3, r7
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	f7f1 fc58 	bl	80002b8 <__aeabi_dsub>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	4629      	mov	r1, r5
 800ea10:	f7f1 fc52 	bl	80002b8 <__aeabi_dsub>
 800ea14:	4642      	mov	r2, r8
 800ea16:	4606      	mov	r6, r0
 800ea18:	460f      	mov	r7, r1
 800ea1a:	464b      	mov	r3, r9
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fe02 	bl	8000628 <__aeabi_dmul>
 800ea24:	a35e      	add	r3, pc, #376	; (adr r3, 800eba0 <__ieee754_pow+0xa18>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	460d      	mov	r5, r1
 800ea2e:	f7f1 fdfb 	bl	8000628 <__aeabi_dmul>
 800ea32:	a35d      	add	r3, pc, #372	; (adr r3, 800eba8 <__ieee754_pow+0xa20>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fc3e 	bl	80002b8 <__aeabi_dsub>
 800ea3c:	4622      	mov	r2, r4
 800ea3e:	462b      	mov	r3, r5
 800ea40:	f7f1 fdf2 	bl	8000628 <__aeabi_dmul>
 800ea44:	a35a      	add	r3, pc, #360	; (adr r3, 800ebb0 <__ieee754_pow+0xa28>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f1 fc37 	bl	80002bc <__adddf3>
 800ea4e:	4622      	mov	r2, r4
 800ea50:	462b      	mov	r3, r5
 800ea52:	f7f1 fde9 	bl	8000628 <__aeabi_dmul>
 800ea56:	a358      	add	r3, pc, #352	; (adr r3, 800ebb8 <__ieee754_pow+0xa30>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	f7f1 fc2c 	bl	80002b8 <__aeabi_dsub>
 800ea60:	4622      	mov	r2, r4
 800ea62:	462b      	mov	r3, r5
 800ea64:	f7f1 fde0 	bl	8000628 <__aeabi_dmul>
 800ea68:	a355      	add	r3, pc, #340	; (adr r3, 800ebc0 <__ieee754_pow+0xa38>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f7f1 fc25 	bl	80002bc <__adddf3>
 800ea72:	4622      	mov	r2, r4
 800ea74:	462b      	mov	r3, r5
 800ea76:	f7f1 fdd7 	bl	8000628 <__aeabi_dmul>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4640      	mov	r0, r8
 800ea80:	4649      	mov	r1, r9
 800ea82:	f7f1 fc19 	bl	80002b8 <__aeabi_dsub>
 800ea86:	4604      	mov	r4, r0
 800ea88:	460d      	mov	r5, r1
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	4640      	mov	r0, r8
 800ea90:	4649      	mov	r1, r9
 800ea92:	f7f1 fdc9 	bl	8000628 <__aeabi_dmul>
 800ea96:	2200      	movs	r2, #0
 800ea98:	ec41 0b19 	vmov	d9, r0, r1
 800ea9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	f7f1 fc08 	bl	80002b8 <__aeabi_dsub>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	ec51 0b19 	vmov	r0, r1, d9
 800eab0:	f7f1 fee4 	bl	800087c <__aeabi_ddiv>
 800eab4:	4632      	mov	r2, r6
 800eab6:	4604      	mov	r4, r0
 800eab8:	460d      	mov	r5, r1
 800eaba:	463b      	mov	r3, r7
 800eabc:	4640      	mov	r0, r8
 800eabe:	4649      	mov	r1, r9
 800eac0:	f7f1 fdb2 	bl	8000628 <__aeabi_dmul>
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	f7f1 fbf8 	bl	80002bc <__adddf3>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	4620      	mov	r0, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 fbf0 	bl	80002b8 <__aeabi_dsub>
 800ead8:	4642      	mov	r2, r8
 800eada:	464b      	mov	r3, r9
 800eadc:	f7f1 fbec 	bl	80002b8 <__aeabi_dsub>
 800eae0:	460b      	mov	r3, r1
 800eae2:	4602      	mov	r2, r0
 800eae4:	493a      	ldr	r1, [pc, #232]	; (800ebd0 <__ieee754_pow+0xa48>)
 800eae6:	2000      	movs	r0, #0
 800eae8:	f7f1 fbe6 	bl	80002b8 <__aeabi_dsub>
 800eaec:	ec41 0b10 	vmov	d0, r0, r1
 800eaf0:	ee10 3a90 	vmov	r3, s1
 800eaf4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eaf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eafc:	da2b      	bge.n	800eb56 <__ieee754_pow+0x9ce>
 800eafe:	4650      	mov	r0, sl
 800eb00:	f001 fa76 	bl	800fff0 <scalbn>
 800eb04:	ec51 0b10 	vmov	r0, r1, d0
 800eb08:	ec53 2b18 	vmov	r2, r3, d8
 800eb0c:	f7ff bbed 	b.w	800e2ea <__ieee754_pow+0x162>
 800eb10:	4b30      	ldr	r3, [pc, #192]	; (800ebd4 <__ieee754_pow+0xa4c>)
 800eb12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eb16:	429e      	cmp	r6, r3
 800eb18:	f77f af0c 	ble.w	800e934 <__ieee754_pow+0x7ac>
 800eb1c:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <__ieee754_pow+0xa50>)
 800eb1e:	440b      	add	r3, r1
 800eb20:	4303      	orrs	r3, r0
 800eb22:	d009      	beq.n	800eb38 <__ieee754_pow+0x9b0>
 800eb24:	ec51 0b18 	vmov	r0, r1, d8
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f7f1 ffee 	bl	8000b0c <__aeabi_dcmplt>
 800eb30:	3800      	subs	r0, #0
 800eb32:	bf18      	it	ne
 800eb34:	2001      	movne	r0, #1
 800eb36:	e447      	b.n	800e3c8 <__ieee754_pow+0x240>
 800eb38:	4622      	mov	r2, r4
 800eb3a:	462b      	mov	r3, r5
 800eb3c:	f7f1 fbbc 	bl	80002b8 <__aeabi_dsub>
 800eb40:	4642      	mov	r2, r8
 800eb42:	464b      	mov	r3, r9
 800eb44:	f7f1 fff6 	bl	8000b34 <__aeabi_dcmpge>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f43f aef3 	beq.w	800e934 <__ieee754_pow+0x7ac>
 800eb4e:	e7e9      	b.n	800eb24 <__ieee754_pow+0x99c>
 800eb50:	f04f 0a00 	mov.w	sl, #0
 800eb54:	e71a      	b.n	800e98c <__ieee754_pow+0x804>
 800eb56:	ec51 0b10 	vmov	r0, r1, d0
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	e7d4      	b.n	800eb08 <__ieee754_pow+0x980>
 800eb5e:	491c      	ldr	r1, [pc, #112]	; (800ebd0 <__ieee754_pow+0xa48>)
 800eb60:	2000      	movs	r0, #0
 800eb62:	f7ff bb30 	b.w	800e1c6 <__ieee754_pow+0x3e>
 800eb66:	2000      	movs	r0, #0
 800eb68:	2100      	movs	r1, #0
 800eb6a:	f7ff bb2c 	b.w	800e1c6 <__ieee754_pow+0x3e>
 800eb6e:	4630      	mov	r0, r6
 800eb70:	4639      	mov	r1, r7
 800eb72:	f7ff bb28 	b.w	800e1c6 <__ieee754_pow+0x3e>
 800eb76:	9204      	str	r2, [sp, #16]
 800eb78:	f7ff bb7a 	b.w	800e270 <__ieee754_pow+0xe8>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f7ff bb64 	b.w	800e24a <__ieee754_pow+0xc2>
 800eb82:	bf00      	nop
 800eb84:	f3af 8000 	nop.w
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	3fe62e43 	.word	0x3fe62e43
 800eb90:	fefa39ef 	.word	0xfefa39ef
 800eb94:	3fe62e42 	.word	0x3fe62e42
 800eb98:	0ca86c39 	.word	0x0ca86c39
 800eb9c:	be205c61 	.word	0xbe205c61
 800eba0:	72bea4d0 	.word	0x72bea4d0
 800eba4:	3e663769 	.word	0x3e663769
 800eba8:	c5d26bf1 	.word	0xc5d26bf1
 800ebac:	3ebbbd41 	.word	0x3ebbbd41
 800ebb0:	af25de2c 	.word	0xaf25de2c
 800ebb4:	3f11566a 	.word	0x3f11566a
 800ebb8:	16bebd93 	.word	0x16bebd93
 800ebbc:	3f66c16c 	.word	0x3f66c16c
 800ebc0:	5555553e 	.word	0x5555553e
 800ebc4:	3fc55555 	.word	0x3fc55555
 800ebc8:	3fe00000 	.word	0x3fe00000
 800ebcc:	000fffff 	.word	0x000fffff
 800ebd0:	3ff00000 	.word	0x3ff00000
 800ebd4:	4090cbff 	.word	0x4090cbff
 800ebd8:	3f6f3400 	.word	0x3f6f3400
 800ebdc:	652b82fe 	.word	0x652b82fe
 800ebe0:	3c971547 	.word	0x3c971547
 800ebe4:	00000000 	.word	0x00000000

0800ebe8 <__ieee754_rem_pio2>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	ed2d 8b02 	vpush	{d8}
 800ebf0:	ec55 4b10 	vmov	r4, r5, d0
 800ebf4:	4bca      	ldr	r3, [pc, #808]	; (800ef20 <__ieee754_rem_pio2+0x338>)
 800ebf6:	b08b      	sub	sp, #44	; 0x2c
 800ebf8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ebfc:	4598      	cmp	r8, r3
 800ebfe:	4682      	mov	sl, r0
 800ec00:	9502      	str	r5, [sp, #8]
 800ec02:	dc08      	bgt.n	800ec16 <__ieee754_rem_pio2+0x2e>
 800ec04:	2200      	movs	r2, #0
 800ec06:	2300      	movs	r3, #0
 800ec08:	ed80 0b00 	vstr	d0, [r0]
 800ec0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec10:	f04f 0b00 	mov.w	fp, #0
 800ec14:	e028      	b.n	800ec68 <__ieee754_rem_pio2+0x80>
 800ec16:	4bc3      	ldr	r3, [pc, #780]	; (800ef24 <__ieee754_rem_pio2+0x33c>)
 800ec18:	4598      	cmp	r8, r3
 800ec1a:	dc78      	bgt.n	800ed0e <__ieee754_rem_pio2+0x126>
 800ec1c:	9b02      	ldr	r3, [sp, #8]
 800ec1e:	4ec2      	ldr	r6, [pc, #776]	; (800ef28 <__ieee754_rem_pio2+0x340>)
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	ee10 0a10 	vmov	r0, s0
 800ec26:	a3b0      	add	r3, pc, #704	; (adr r3, 800eee8 <__ieee754_rem_pio2+0x300>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	dd39      	ble.n	800eca4 <__ieee754_rem_pio2+0xbc>
 800ec30:	f7f1 fb42 	bl	80002b8 <__aeabi_dsub>
 800ec34:	45b0      	cmp	r8, r6
 800ec36:	4604      	mov	r4, r0
 800ec38:	460d      	mov	r5, r1
 800ec3a:	d01b      	beq.n	800ec74 <__ieee754_rem_pio2+0x8c>
 800ec3c:	a3ac      	add	r3, pc, #688	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x308>)
 800ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec42:	f7f1 fb39 	bl	80002b8 <__aeabi_dsub>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	e9ca 2300 	strd	r2, r3, [sl]
 800ec4e:	4620      	mov	r0, r4
 800ec50:	4629      	mov	r1, r5
 800ec52:	f7f1 fb31 	bl	80002b8 <__aeabi_dsub>
 800ec56:	a3a6      	add	r3, pc, #664	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x308>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	f7f1 fb2c 	bl	80002b8 <__aeabi_dsub>
 800ec60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec64:	f04f 0b01 	mov.w	fp, #1
 800ec68:	4658      	mov	r0, fp
 800ec6a:	b00b      	add	sp, #44	; 0x2c
 800ec6c:	ecbd 8b02 	vpop	{d8}
 800ec70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec74:	a3a0      	add	r3, pc, #640	; (adr r3, 800eef8 <__ieee754_rem_pio2+0x310>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	f7f1 fb1d 	bl	80002b8 <__aeabi_dsub>
 800ec7e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x318>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	f7f1 fb16 	bl	80002b8 <__aeabi_dsub>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e9ca 2300 	strd	r2, r3, [sl]
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 fb0e 	bl	80002b8 <__aeabi_dsub>
 800ec9c:	a398      	add	r3, pc, #608	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x318>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	e7db      	b.n	800ec5c <__ieee754_rem_pio2+0x74>
 800eca4:	f7f1 fb0a 	bl	80002bc <__adddf3>
 800eca8:	45b0      	cmp	r8, r6
 800ecaa:	4604      	mov	r4, r0
 800ecac:	460d      	mov	r5, r1
 800ecae:	d016      	beq.n	800ecde <__ieee754_rem_pio2+0xf6>
 800ecb0:	a38f      	add	r3, pc, #572	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x308>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fb01 	bl	80002bc <__adddf3>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	e9ca 2300 	strd	r2, r3, [sl]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	f7f1 faf7 	bl	80002b8 <__aeabi_dsub>
 800ecca:	a389      	add	r3, pc, #548	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x308>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	f7f1 faf4 	bl	80002bc <__adddf3>
 800ecd4:	f04f 3bff 	mov.w	fp, #4294967295
 800ecd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ecdc:	e7c4      	b.n	800ec68 <__ieee754_rem_pio2+0x80>
 800ecde:	a386      	add	r3, pc, #536	; (adr r3, 800eef8 <__ieee754_rem_pio2+0x310>)
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	f7f1 faea 	bl	80002bc <__adddf3>
 800ece8:	a385      	add	r3, pc, #532	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x318>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	4604      	mov	r4, r0
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	f7f1 fae3 	bl	80002bc <__adddf3>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	e9ca 2300 	strd	r2, r3, [sl]
 800ecfe:	4620      	mov	r0, r4
 800ed00:	4629      	mov	r1, r5
 800ed02:	f7f1 fad9 	bl	80002b8 <__aeabi_dsub>
 800ed06:	a37e      	add	r3, pc, #504	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x318>)
 800ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0c:	e7e0      	b.n	800ecd0 <__ieee754_rem_pio2+0xe8>
 800ed0e:	4b87      	ldr	r3, [pc, #540]	; (800ef2c <__ieee754_rem_pio2+0x344>)
 800ed10:	4598      	cmp	r8, r3
 800ed12:	f300 80d9 	bgt.w	800eec8 <__ieee754_rem_pio2+0x2e0>
 800ed16:	f001 f8cf 	bl	800feb8 <fabs>
 800ed1a:	ec55 4b10 	vmov	r4, r5, d0
 800ed1e:	ee10 0a10 	vmov	r0, s0
 800ed22:	a379      	add	r3, pc, #484	; (adr r3, 800ef08 <__ieee754_rem_pio2+0x320>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f7f1 fc7d 	bl	8000628 <__aeabi_dmul>
 800ed2e:	4b80      	ldr	r3, [pc, #512]	; (800ef30 <__ieee754_rem_pio2+0x348>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	f7f1 fac3 	bl	80002bc <__adddf3>
 800ed36:	f7f1 ff27 	bl	8000b88 <__aeabi_d2iz>
 800ed3a:	4683      	mov	fp, r0
 800ed3c:	f7f1 fc0a 	bl	8000554 <__aeabi_i2d>
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	ec43 2b18 	vmov	d8, r2, r3
 800ed48:	a367      	add	r3, pc, #412	; (adr r3, 800eee8 <__ieee754_rem_pio2+0x300>)
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	f7f1 fc6b 	bl	8000628 <__aeabi_dmul>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4620      	mov	r0, r4
 800ed58:	4629      	mov	r1, r5
 800ed5a:	f7f1 faad 	bl	80002b8 <__aeabi_dsub>
 800ed5e:	a364      	add	r3, pc, #400	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x308>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4606      	mov	r6, r0
 800ed66:	460f      	mov	r7, r1
 800ed68:	ec51 0b18 	vmov	r0, r1, d8
 800ed6c:	f7f1 fc5c 	bl	8000628 <__aeabi_dmul>
 800ed70:	f1bb 0f1f 	cmp.w	fp, #31
 800ed74:	4604      	mov	r4, r0
 800ed76:	460d      	mov	r5, r1
 800ed78:	dc0d      	bgt.n	800ed96 <__ieee754_rem_pio2+0x1ae>
 800ed7a:	4b6e      	ldr	r3, [pc, #440]	; (800ef34 <__ieee754_rem_pio2+0x34c>)
 800ed7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ed80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed84:	4543      	cmp	r3, r8
 800ed86:	d006      	beq.n	800ed96 <__ieee754_rem_pio2+0x1ae>
 800ed88:	4622      	mov	r2, r4
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	4639      	mov	r1, r7
 800ed90:	f7f1 fa92 	bl	80002b8 <__aeabi_dsub>
 800ed94:	e00f      	b.n	800edb6 <__ieee754_rem_pio2+0x1ce>
 800ed96:	462b      	mov	r3, r5
 800ed98:	4622      	mov	r2, r4
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	f7f1 fa8b 	bl	80002b8 <__aeabi_dsub>
 800eda2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eda6:	9303      	str	r3, [sp, #12]
 800eda8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800edac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800edb0:	f1b8 0f10 	cmp.w	r8, #16
 800edb4:	dc02      	bgt.n	800edbc <__ieee754_rem_pio2+0x1d4>
 800edb6:	e9ca 0100 	strd	r0, r1, [sl]
 800edba:	e039      	b.n	800ee30 <__ieee754_rem_pio2+0x248>
 800edbc:	a34e      	add	r3, pc, #312	; (adr r3, 800eef8 <__ieee754_rem_pio2+0x310>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	ec51 0b18 	vmov	r0, r1, d8
 800edc6:	f7f1 fc2f 	bl	8000628 <__aeabi_dmul>
 800edca:	4604      	mov	r4, r0
 800edcc:	460d      	mov	r5, r1
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 fa6f 	bl	80002b8 <__aeabi_dsub>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4680      	mov	r8, r0
 800ede0:	4689      	mov	r9, r1
 800ede2:	4630      	mov	r0, r6
 800ede4:	4639      	mov	r1, r7
 800ede6:	f7f1 fa67 	bl	80002b8 <__aeabi_dsub>
 800edea:	4622      	mov	r2, r4
 800edec:	462b      	mov	r3, r5
 800edee:	f7f1 fa63 	bl	80002b8 <__aeabi_dsub>
 800edf2:	a343      	add	r3, pc, #268	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x318>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	ec51 0b18 	vmov	r0, r1, d8
 800ee00:	f7f1 fc12 	bl	8000628 <__aeabi_dmul>
 800ee04:	4622      	mov	r2, r4
 800ee06:	462b      	mov	r3, r5
 800ee08:	f7f1 fa56 	bl	80002b8 <__aeabi_dsub>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	4640      	mov	r0, r8
 800ee16:	4649      	mov	r1, r9
 800ee18:	f7f1 fa4e 	bl	80002b8 <__aeabi_dsub>
 800ee1c:	9a03      	ldr	r2, [sp, #12]
 800ee1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	2b31      	cmp	r3, #49	; 0x31
 800ee26:	dc24      	bgt.n	800ee72 <__ieee754_rem_pio2+0x28a>
 800ee28:	e9ca 0100 	strd	r0, r1, [sl]
 800ee2c:	4646      	mov	r6, r8
 800ee2e:	464f      	mov	r7, r9
 800ee30:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee34:	4630      	mov	r0, r6
 800ee36:	4642      	mov	r2, r8
 800ee38:	464b      	mov	r3, r9
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	f7f1 fa3c 	bl	80002b8 <__aeabi_dsub>
 800ee40:	462b      	mov	r3, r5
 800ee42:	4622      	mov	r2, r4
 800ee44:	f7f1 fa38 	bl	80002b8 <__aeabi_dsub>
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee50:	f6bf af0a 	bge.w	800ec68 <__ieee754_rem_pio2+0x80>
 800ee54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee58:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee60:	f8ca 8000 	str.w	r8, [sl]
 800ee64:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee68:	f8ca 300c 	str.w	r3, [sl, #12]
 800ee6c:	f1cb 0b00 	rsb	fp, fp, #0
 800ee70:	e6fa      	b.n	800ec68 <__ieee754_rem_pio2+0x80>
 800ee72:	a327      	add	r3, pc, #156	; (adr r3, 800ef10 <__ieee754_rem_pio2+0x328>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	ec51 0b18 	vmov	r0, r1, d8
 800ee7c:	f7f1 fbd4 	bl	8000628 <__aeabi_dmul>
 800ee80:	4604      	mov	r4, r0
 800ee82:	460d      	mov	r5, r1
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	4640      	mov	r0, r8
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	f7f1 fa14 	bl	80002b8 <__aeabi_dsub>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4606      	mov	r6, r0
 800ee96:	460f      	mov	r7, r1
 800ee98:	4640      	mov	r0, r8
 800ee9a:	4649      	mov	r1, r9
 800ee9c:	f7f1 fa0c 	bl	80002b8 <__aeabi_dsub>
 800eea0:	4622      	mov	r2, r4
 800eea2:	462b      	mov	r3, r5
 800eea4:	f7f1 fa08 	bl	80002b8 <__aeabi_dsub>
 800eea8:	a31b      	add	r3, pc, #108	; (adr r3, 800ef18 <__ieee754_rem_pio2+0x330>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	ec51 0b18 	vmov	r0, r1, d8
 800eeb6:	f7f1 fbb7 	bl	8000628 <__aeabi_dmul>
 800eeba:	4622      	mov	r2, r4
 800eebc:	462b      	mov	r3, r5
 800eebe:	f7f1 f9fb 	bl	80002b8 <__aeabi_dsub>
 800eec2:	4604      	mov	r4, r0
 800eec4:	460d      	mov	r5, r1
 800eec6:	e75f      	b.n	800ed88 <__ieee754_rem_pio2+0x1a0>
 800eec8:	4b1b      	ldr	r3, [pc, #108]	; (800ef38 <__ieee754_rem_pio2+0x350>)
 800eeca:	4598      	cmp	r8, r3
 800eecc:	dd36      	ble.n	800ef3c <__ieee754_rem_pio2+0x354>
 800eece:	ee10 2a10 	vmov	r2, s0
 800eed2:	462b      	mov	r3, r5
 800eed4:	4620      	mov	r0, r4
 800eed6:	4629      	mov	r1, r5
 800eed8:	f7f1 f9ee 	bl	80002b8 <__aeabi_dsub>
 800eedc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eee0:	e9ca 0100 	strd	r0, r1, [sl]
 800eee4:	e694      	b.n	800ec10 <__ieee754_rem_pio2+0x28>
 800eee6:	bf00      	nop
 800eee8:	54400000 	.word	0x54400000
 800eeec:	3ff921fb 	.word	0x3ff921fb
 800eef0:	1a626331 	.word	0x1a626331
 800eef4:	3dd0b461 	.word	0x3dd0b461
 800eef8:	1a600000 	.word	0x1a600000
 800eefc:	3dd0b461 	.word	0x3dd0b461
 800ef00:	2e037073 	.word	0x2e037073
 800ef04:	3ba3198a 	.word	0x3ba3198a
 800ef08:	6dc9c883 	.word	0x6dc9c883
 800ef0c:	3fe45f30 	.word	0x3fe45f30
 800ef10:	2e000000 	.word	0x2e000000
 800ef14:	3ba3198a 	.word	0x3ba3198a
 800ef18:	252049c1 	.word	0x252049c1
 800ef1c:	397b839a 	.word	0x397b839a
 800ef20:	3fe921fb 	.word	0x3fe921fb
 800ef24:	4002d97b 	.word	0x4002d97b
 800ef28:	3ff921fb 	.word	0x3ff921fb
 800ef2c:	413921fb 	.word	0x413921fb
 800ef30:	3fe00000 	.word	0x3fe00000
 800ef34:	08010ad8 	.word	0x08010ad8
 800ef38:	7fefffff 	.word	0x7fefffff
 800ef3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ef40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ef44:	ee10 0a10 	vmov	r0, s0
 800ef48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ef4c:	ee10 6a10 	vmov	r6, s0
 800ef50:	460f      	mov	r7, r1
 800ef52:	f7f1 fe19 	bl	8000b88 <__aeabi_d2iz>
 800ef56:	f7f1 fafd 	bl	8000554 <__aeabi_i2d>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4630      	mov	r0, r6
 800ef60:	4639      	mov	r1, r7
 800ef62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef66:	f7f1 f9a7 	bl	80002b8 <__aeabi_dsub>
 800ef6a:	4b23      	ldr	r3, [pc, #140]	; (800eff8 <__ieee754_rem_pio2+0x410>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f7f1 fb5b 	bl	8000628 <__aeabi_dmul>
 800ef72:	460f      	mov	r7, r1
 800ef74:	4606      	mov	r6, r0
 800ef76:	f7f1 fe07 	bl	8000b88 <__aeabi_d2iz>
 800ef7a:	f7f1 faeb 	bl	8000554 <__aeabi_i2d>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef8a:	f7f1 f995 	bl	80002b8 <__aeabi_dsub>
 800ef8e:	4b1a      	ldr	r3, [pc, #104]	; (800eff8 <__ieee754_rem_pio2+0x410>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	f7f1 fb49 	bl	8000628 <__aeabi_dmul>
 800ef96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef9a:	ad04      	add	r5, sp, #16
 800ef9c:	f04f 0803 	mov.w	r8, #3
 800efa0:	46a9      	mov	r9, r5
 800efa2:	2600      	movs	r6, #0
 800efa4:	2700      	movs	r7, #0
 800efa6:	4632      	mov	r2, r6
 800efa8:	463b      	mov	r3, r7
 800efaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800efae:	46c3      	mov	fp, r8
 800efb0:	3d08      	subs	r5, #8
 800efb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800efb6:	f7f1 fd9f 	bl	8000af8 <__aeabi_dcmpeq>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1f3      	bne.n	800efa6 <__ieee754_rem_pio2+0x3be>
 800efbe:	4b0f      	ldr	r3, [pc, #60]	; (800effc <__ieee754_rem_pio2+0x414>)
 800efc0:	9301      	str	r3, [sp, #4]
 800efc2:	2302      	movs	r3, #2
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	4622      	mov	r2, r4
 800efc8:	465b      	mov	r3, fp
 800efca:	4651      	mov	r1, sl
 800efcc:	4648      	mov	r0, r9
 800efce:	f000 f993 	bl	800f2f8 <__kernel_rem_pio2>
 800efd2:	9b02      	ldr	r3, [sp, #8]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	4683      	mov	fp, r0
 800efd8:	f6bf ae46 	bge.w	800ec68 <__ieee754_rem_pio2+0x80>
 800efdc:	e9da 2100 	ldrd	r2, r1, [sl]
 800efe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efe4:	e9ca 2300 	strd	r2, r3, [sl]
 800efe8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800efec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eff0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800eff4:	e73a      	b.n	800ee6c <__ieee754_rem_pio2+0x284>
 800eff6:	bf00      	nop
 800eff8:	41700000 	.word	0x41700000
 800effc:	08010b58 	.word	0x08010b58

0800f000 <__ieee754_sqrt>:
 800f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	ec55 4b10 	vmov	r4, r5, d0
 800f008:	4e55      	ldr	r6, [pc, #340]	; (800f160 <__ieee754_sqrt+0x160>)
 800f00a:	43ae      	bics	r6, r5
 800f00c:	ee10 0a10 	vmov	r0, s0
 800f010:	ee10 3a10 	vmov	r3, s0
 800f014:	462a      	mov	r2, r5
 800f016:	4629      	mov	r1, r5
 800f018:	d110      	bne.n	800f03c <__ieee754_sqrt+0x3c>
 800f01a:	ee10 2a10 	vmov	r2, s0
 800f01e:	462b      	mov	r3, r5
 800f020:	f7f1 fb02 	bl	8000628 <__aeabi_dmul>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4620      	mov	r0, r4
 800f02a:	4629      	mov	r1, r5
 800f02c:	f7f1 f946 	bl	80002bc <__adddf3>
 800f030:	4604      	mov	r4, r0
 800f032:	460d      	mov	r5, r1
 800f034:	ec45 4b10 	vmov	d0, r4, r5
 800f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03c:	2d00      	cmp	r5, #0
 800f03e:	dc10      	bgt.n	800f062 <__ieee754_sqrt+0x62>
 800f040:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f044:	4330      	orrs	r0, r6
 800f046:	d0f5      	beq.n	800f034 <__ieee754_sqrt+0x34>
 800f048:	b15d      	cbz	r5, 800f062 <__ieee754_sqrt+0x62>
 800f04a:	ee10 2a10 	vmov	r2, s0
 800f04e:	462b      	mov	r3, r5
 800f050:	ee10 0a10 	vmov	r0, s0
 800f054:	f7f1 f930 	bl	80002b8 <__aeabi_dsub>
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	f7f1 fc0e 	bl	800087c <__aeabi_ddiv>
 800f060:	e7e6      	b.n	800f030 <__ieee754_sqrt+0x30>
 800f062:	1512      	asrs	r2, r2, #20
 800f064:	d074      	beq.n	800f150 <__ieee754_sqrt+0x150>
 800f066:	07d4      	lsls	r4, r2, #31
 800f068:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f06c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f070:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f074:	bf5e      	ittt	pl
 800f076:	0fda      	lsrpl	r2, r3, #31
 800f078:	005b      	lslpl	r3, r3, #1
 800f07a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f07e:	2400      	movs	r4, #0
 800f080:	0fda      	lsrs	r2, r3, #31
 800f082:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f086:	107f      	asrs	r7, r7, #1
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	2516      	movs	r5, #22
 800f08c:	4620      	mov	r0, r4
 800f08e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f092:	1886      	adds	r6, r0, r2
 800f094:	428e      	cmp	r6, r1
 800f096:	bfde      	ittt	le
 800f098:	1b89      	suble	r1, r1, r6
 800f09a:	18b0      	addle	r0, r6, r2
 800f09c:	18a4      	addle	r4, r4, r2
 800f09e:	0049      	lsls	r1, r1, #1
 800f0a0:	3d01      	subs	r5, #1
 800f0a2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f0a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f0aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0ae:	d1f0      	bne.n	800f092 <__ieee754_sqrt+0x92>
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	f04f 0e20 	mov.w	lr, #32
 800f0b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f0ba:	4281      	cmp	r1, r0
 800f0bc:	eb06 0c05 	add.w	ip, r6, r5
 800f0c0:	dc02      	bgt.n	800f0c8 <__ieee754_sqrt+0xc8>
 800f0c2:	d113      	bne.n	800f0ec <__ieee754_sqrt+0xec>
 800f0c4:	459c      	cmp	ip, r3
 800f0c6:	d811      	bhi.n	800f0ec <__ieee754_sqrt+0xec>
 800f0c8:	f1bc 0f00 	cmp.w	ip, #0
 800f0cc:	eb0c 0506 	add.w	r5, ip, r6
 800f0d0:	da43      	bge.n	800f15a <__ieee754_sqrt+0x15a>
 800f0d2:	2d00      	cmp	r5, #0
 800f0d4:	db41      	blt.n	800f15a <__ieee754_sqrt+0x15a>
 800f0d6:	f100 0801 	add.w	r8, r0, #1
 800f0da:	1a09      	subs	r1, r1, r0
 800f0dc:	459c      	cmp	ip, r3
 800f0de:	bf88      	it	hi
 800f0e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f0e4:	eba3 030c 	sub.w	r3, r3, ip
 800f0e8:	4432      	add	r2, r6
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f0f0:	f1be 0e01 	subs.w	lr, lr, #1
 800f0f4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f0f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f100:	d1db      	bne.n	800f0ba <__ieee754_sqrt+0xba>
 800f102:	430b      	orrs	r3, r1
 800f104:	d006      	beq.n	800f114 <__ieee754_sqrt+0x114>
 800f106:	1c50      	adds	r0, r2, #1
 800f108:	bf13      	iteet	ne
 800f10a:	3201      	addne	r2, #1
 800f10c:	3401      	addeq	r4, #1
 800f10e:	4672      	moveq	r2, lr
 800f110:	f022 0201 	bicne.w	r2, r2, #1
 800f114:	1063      	asrs	r3, r4, #1
 800f116:	0852      	lsrs	r2, r2, #1
 800f118:	07e1      	lsls	r1, r4, #31
 800f11a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f11e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f122:	bf48      	it	mi
 800f124:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f128:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f12c:	4614      	mov	r4, r2
 800f12e:	e781      	b.n	800f034 <__ieee754_sqrt+0x34>
 800f130:	0ad9      	lsrs	r1, r3, #11
 800f132:	3815      	subs	r0, #21
 800f134:	055b      	lsls	r3, r3, #21
 800f136:	2900      	cmp	r1, #0
 800f138:	d0fa      	beq.n	800f130 <__ieee754_sqrt+0x130>
 800f13a:	02cd      	lsls	r5, r1, #11
 800f13c:	d50a      	bpl.n	800f154 <__ieee754_sqrt+0x154>
 800f13e:	f1c2 0420 	rsb	r4, r2, #32
 800f142:	fa23 f404 	lsr.w	r4, r3, r4
 800f146:	1e55      	subs	r5, r2, #1
 800f148:	4093      	lsls	r3, r2
 800f14a:	4321      	orrs	r1, r4
 800f14c:	1b42      	subs	r2, r0, r5
 800f14e:	e78a      	b.n	800f066 <__ieee754_sqrt+0x66>
 800f150:	4610      	mov	r0, r2
 800f152:	e7f0      	b.n	800f136 <__ieee754_sqrt+0x136>
 800f154:	0049      	lsls	r1, r1, #1
 800f156:	3201      	adds	r2, #1
 800f158:	e7ef      	b.n	800f13a <__ieee754_sqrt+0x13a>
 800f15a:	4680      	mov	r8, r0
 800f15c:	e7bd      	b.n	800f0da <__ieee754_sqrt+0xda>
 800f15e:	bf00      	nop
 800f160:	7ff00000 	.word	0x7ff00000
 800f164:	00000000 	.word	0x00000000

0800f168 <__kernel_cos>:
 800f168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	ec57 6b10 	vmov	r6, r7, d0
 800f170:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f174:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f178:	ed8d 1b00 	vstr	d1, [sp]
 800f17c:	da07      	bge.n	800f18e <__kernel_cos+0x26>
 800f17e:	ee10 0a10 	vmov	r0, s0
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 fd00 	bl	8000b88 <__aeabi_d2iz>
 800f188:	2800      	cmp	r0, #0
 800f18a:	f000 8088 	beq.w	800f29e <__kernel_cos+0x136>
 800f18e:	4632      	mov	r2, r6
 800f190:	463b      	mov	r3, r7
 800f192:	4630      	mov	r0, r6
 800f194:	4639      	mov	r1, r7
 800f196:	f7f1 fa47 	bl	8000628 <__aeabi_dmul>
 800f19a:	4b51      	ldr	r3, [pc, #324]	; (800f2e0 <__kernel_cos+0x178>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	f7f1 fa41 	bl	8000628 <__aeabi_dmul>
 800f1a6:	a340      	add	r3, pc, #256	; (adr r3, 800f2a8 <__kernel_cos+0x140>)
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	4682      	mov	sl, r0
 800f1ae:	468b      	mov	fp, r1
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	f7f1 fa38 	bl	8000628 <__aeabi_dmul>
 800f1b8:	a33d      	add	r3, pc, #244	; (adr r3, 800f2b0 <__kernel_cos+0x148>)
 800f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1be:	f7f1 f87d 	bl	80002bc <__adddf3>
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	f7f1 fa2f 	bl	8000628 <__aeabi_dmul>
 800f1ca:	a33b      	add	r3, pc, #236	; (adr r3, 800f2b8 <__kernel_cos+0x150>)
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f872 	bl	80002b8 <__aeabi_dsub>
 800f1d4:	4622      	mov	r2, r4
 800f1d6:	462b      	mov	r3, r5
 800f1d8:	f7f1 fa26 	bl	8000628 <__aeabi_dmul>
 800f1dc:	a338      	add	r3, pc, #224	; (adr r3, 800f2c0 <__kernel_cos+0x158>)
 800f1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e2:	f7f1 f86b 	bl	80002bc <__adddf3>
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	f7f1 fa1d 	bl	8000628 <__aeabi_dmul>
 800f1ee:	a336      	add	r3, pc, #216	; (adr r3, 800f2c8 <__kernel_cos+0x160>)
 800f1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f4:	f7f1 f860 	bl	80002b8 <__aeabi_dsub>
 800f1f8:	4622      	mov	r2, r4
 800f1fa:	462b      	mov	r3, r5
 800f1fc:	f7f1 fa14 	bl	8000628 <__aeabi_dmul>
 800f200:	a333      	add	r3, pc, #204	; (adr r3, 800f2d0 <__kernel_cos+0x168>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f1 f859 	bl	80002bc <__adddf3>
 800f20a:	4622      	mov	r2, r4
 800f20c:	462b      	mov	r3, r5
 800f20e:	f7f1 fa0b 	bl	8000628 <__aeabi_dmul>
 800f212:	4622      	mov	r2, r4
 800f214:	462b      	mov	r3, r5
 800f216:	f7f1 fa07 	bl	8000628 <__aeabi_dmul>
 800f21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f21e:	4604      	mov	r4, r0
 800f220:	460d      	mov	r5, r1
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 f9ff 	bl	8000628 <__aeabi_dmul>
 800f22a:	460b      	mov	r3, r1
 800f22c:	4602      	mov	r2, r0
 800f22e:	4629      	mov	r1, r5
 800f230:	4620      	mov	r0, r4
 800f232:	f7f1 f841 	bl	80002b8 <__aeabi_dsub>
 800f236:	4b2b      	ldr	r3, [pc, #172]	; (800f2e4 <__kernel_cos+0x17c>)
 800f238:	4598      	cmp	r8, r3
 800f23a:	4606      	mov	r6, r0
 800f23c:	460f      	mov	r7, r1
 800f23e:	dc10      	bgt.n	800f262 <__kernel_cos+0xfa>
 800f240:	4602      	mov	r2, r0
 800f242:	460b      	mov	r3, r1
 800f244:	4650      	mov	r0, sl
 800f246:	4659      	mov	r1, fp
 800f248:	f7f1 f836 	bl	80002b8 <__aeabi_dsub>
 800f24c:	460b      	mov	r3, r1
 800f24e:	4926      	ldr	r1, [pc, #152]	; (800f2e8 <__kernel_cos+0x180>)
 800f250:	4602      	mov	r2, r0
 800f252:	2000      	movs	r0, #0
 800f254:	f7f1 f830 	bl	80002b8 <__aeabi_dsub>
 800f258:	ec41 0b10 	vmov	d0, r0, r1
 800f25c:	b003      	add	sp, #12
 800f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f262:	4b22      	ldr	r3, [pc, #136]	; (800f2ec <__kernel_cos+0x184>)
 800f264:	4920      	ldr	r1, [pc, #128]	; (800f2e8 <__kernel_cos+0x180>)
 800f266:	4598      	cmp	r8, r3
 800f268:	bfcc      	ite	gt
 800f26a:	4d21      	ldrgt	r5, [pc, #132]	; (800f2f0 <__kernel_cos+0x188>)
 800f26c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f270:	2400      	movs	r4, #0
 800f272:	4622      	mov	r2, r4
 800f274:	462b      	mov	r3, r5
 800f276:	2000      	movs	r0, #0
 800f278:	f7f1 f81e 	bl	80002b8 <__aeabi_dsub>
 800f27c:	4622      	mov	r2, r4
 800f27e:	4680      	mov	r8, r0
 800f280:	4689      	mov	r9, r1
 800f282:	462b      	mov	r3, r5
 800f284:	4650      	mov	r0, sl
 800f286:	4659      	mov	r1, fp
 800f288:	f7f1 f816 	bl	80002b8 <__aeabi_dsub>
 800f28c:	4632      	mov	r2, r6
 800f28e:	463b      	mov	r3, r7
 800f290:	f7f1 f812 	bl	80002b8 <__aeabi_dsub>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4640      	mov	r0, r8
 800f29a:	4649      	mov	r1, r9
 800f29c:	e7da      	b.n	800f254 <__kernel_cos+0xec>
 800f29e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f2d8 <__kernel_cos+0x170>
 800f2a2:	e7db      	b.n	800f25c <__kernel_cos+0xf4>
 800f2a4:	f3af 8000 	nop.w
 800f2a8:	be8838d4 	.word	0xbe8838d4
 800f2ac:	bda8fae9 	.word	0xbda8fae9
 800f2b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f2b4:	3e21ee9e 	.word	0x3e21ee9e
 800f2b8:	809c52ad 	.word	0x809c52ad
 800f2bc:	3e927e4f 	.word	0x3e927e4f
 800f2c0:	19cb1590 	.word	0x19cb1590
 800f2c4:	3efa01a0 	.word	0x3efa01a0
 800f2c8:	16c15177 	.word	0x16c15177
 800f2cc:	3f56c16c 	.word	0x3f56c16c
 800f2d0:	5555554c 	.word	0x5555554c
 800f2d4:	3fa55555 	.word	0x3fa55555
 800f2d8:	00000000 	.word	0x00000000
 800f2dc:	3ff00000 	.word	0x3ff00000
 800f2e0:	3fe00000 	.word	0x3fe00000
 800f2e4:	3fd33332 	.word	0x3fd33332
 800f2e8:	3ff00000 	.word	0x3ff00000
 800f2ec:	3fe90000 	.word	0x3fe90000
 800f2f0:	3fd20000 	.word	0x3fd20000
 800f2f4:	00000000 	.word	0x00000000

0800f2f8 <__kernel_rem_pio2>:
 800f2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fc:	ed2d 8b02 	vpush	{d8}
 800f300:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f304:	f112 0f14 	cmn.w	r2, #20
 800f308:	9308      	str	r3, [sp, #32]
 800f30a:	9101      	str	r1, [sp, #4]
 800f30c:	4bc4      	ldr	r3, [pc, #784]	; (800f620 <__kernel_rem_pio2+0x328>)
 800f30e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f310:	900b      	str	r0, [sp, #44]	; 0x2c
 800f312:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f316:	9302      	str	r3, [sp, #8]
 800f318:	9b08      	ldr	r3, [sp, #32]
 800f31a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f31e:	bfa8      	it	ge
 800f320:	1ed4      	subge	r4, r2, #3
 800f322:	9306      	str	r3, [sp, #24]
 800f324:	bfb2      	itee	lt
 800f326:	2400      	movlt	r4, #0
 800f328:	2318      	movge	r3, #24
 800f32a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f32e:	f06f 0317 	mvn.w	r3, #23
 800f332:	fb04 3303 	mla	r3, r4, r3, r3
 800f336:	eb03 0a02 	add.w	sl, r3, r2
 800f33a:	9b02      	ldr	r3, [sp, #8]
 800f33c:	9a06      	ldr	r2, [sp, #24]
 800f33e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f610 <__kernel_rem_pio2+0x318>
 800f342:	eb03 0802 	add.w	r8, r3, r2
 800f346:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f348:	1aa7      	subs	r7, r4, r2
 800f34a:	ae22      	add	r6, sp, #136	; 0x88
 800f34c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f350:	2500      	movs	r5, #0
 800f352:	4545      	cmp	r5, r8
 800f354:	dd13      	ble.n	800f37e <__kernel_rem_pio2+0x86>
 800f356:	9b08      	ldr	r3, [sp, #32]
 800f358:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f610 <__kernel_rem_pio2+0x318>
 800f35c:	aa22      	add	r2, sp, #136	; 0x88
 800f35e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f362:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f366:	f04f 0800 	mov.w	r8, #0
 800f36a:	9b02      	ldr	r3, [sp, #8]
 800f36c:	4598      	cmp	r8, r3
 800f36e:	dc2f      	bgt.n	800f3d0 <__kernel_rem_pio2+0xd8>
 800f370:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f374:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f378:	462f      	mov	r7, r5
 800f37a:	2600      	movs	r6, #0
 800f37c:	e01b      	b.n	800f3b6 <__kernel_rem_pio2+0xbe>
 800f37e:	42ef      	cmn	r7, r5
 800f380:	d407      	bmi.n	800f392 <__kernel_rem_pio2+0x9a>
 800f382:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f386:	f7f1 f8e5 	bl	8000554 <__aeabi_i2d>
 800f38a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f38e:	3501      	adds	r5, #1
 800f390:	e7df      	b.n	800f352 <__kernel_rem_pio2+0x5a>
 800f392:	ec51 0b18 	vmov	r0, r1, d8
 800f396:	e7f8      	b.n	800f38a <__kernel_rem_pio2+0x92>
 800f398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f39c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f3a0:	f7f1 f942 	bl	8000628 <__aeabi_dmul>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3ac:	f7f0 ff86 	bl	80002bc <__adddf3>
 800f3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3b4:	3601      	adds	r6, #1
 800f3b6:	9b06      	ldr	r3, [sp, #24]
 800f3b8:	429e      	cmp	r6, r3
 800f3ba:	f1a7 0708 	sub.w	r7, r7, #8
 800f3be:	ddeb      	ble.n	800f398 <__kernel_rem_pio2+0xa0>
 800f3c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f3c4:	f108 0801 	add.w	r8, r8, #1
 800f3c8:	ecab 7b02 	vstmia	fp!, {d7}
 800f3cc:	3508      	adds	r5, #8
 800f3ce:	e7cc      	b.n	800f36a <__kernel_rem_pio2+0x72>
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	aa0e      	add	r2, sp, #56	; 0x38
 800f3d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f3d8:	930d      	str	r3, [sp, #52]	; 0x34
 800f3da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f3dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f3e0:	9c02      	ldr	r4, [sp, #8]
 800f3e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f3e4:	00e3      	lsls	r3, r4, #3
 800f3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3e8:	ab9a      	add	r3, sp, #616	; 0x268
 800f3ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f3f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f3f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f3f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f3fc:	46c3      	mov	fp, r8
 800f3fe:	46a1      	mov	r9, r4
 800f400:	f1b9 0f00 	cmp.w	r9, #0
 800f404:	f1a5 0508 	sub.w	r5, r5, #8
 800f408:	dc77      	bgt.n	800f4fa <__kernel_rem_pio2+0x202>
 800f40a:	ec47 6b10 	vmov	d0, r6, r7
 800f40e:	4650      	mov	r0, sl
 800f410:	f000 fdee 	bl	800fff0 <scalbn>
 800f414:	ec57 6b10 	vmov	r6, r7, d0
 800f418:	2200      	movs	r2, #0
 800f41a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f41e:	ee10 0a10 	vmov	r0, s0
 800f422:	4639      	mov	r1, r7
 800f424:	f7f1 f900 	bl	8000628 <__aeabi_dmul>
 800f428:	ec41 0b10 	vmov	d0, r0, r1
 800f42c:	f000 fd58 	bl	800fee0 <floor>
 800f430:	4b7c      	ldr	r3, [pc, #496]	; (800f624 <__kernel_rem_pio2+0x32c>)
 800f432:	ec51 0b10 	vmov	r0, r1, d0
 800f436:	2200      	movs	r2, #0
 800f438:	f7f1 f8f6 	bl	8000628 <__aeabi_dmul>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	4630      	mov	r0, r6
 800f442:	4639      	mov	r1, r7
 800f444:	f7f0 ff38 	bl	80002b8 <__aeabi_dsub>
 800f448:	460f      	mov	r7, r1
 800f44a:	4606      	mov	r6, r0
 800f44c:	f7f1 fb9c 	bl	8000b88 <__aeabi_d2iz>
 800f450:	9004      	str	r0, [sp, #16]
 800f452:	f7f1 f87f 	bl	8000554 <__aeabi_i2d>
 800f456:	4602      	mov	r2, r0
 800f458:	460b      	mov	r3, r1
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f0 ff2b 	bl	80002b8 <__aeabi_dsub>
 800f462:	f1ba 0f00 	cmp.w	sl, #0
 800f466:	4606      	mov	r6, r0
 800f468:	460f      	mov	r7, r1
 800f46a:	dd6d      	ble.n	800f548 <__kernel_rem_pio2+0x250>
 800f46c:	1e62      	subs	r2, r4, #1
 800f46e:	ab0e      	add	r3, sp, #56	; 0x38
 800f470:	9d04      	ldr	r5, [sp, #16]
 800f472:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f476:	f1ca 0118 	rsb	r1, sl, #24
 800f47a:	fa40 f301 	asr.w	r3, r0, r1
 800f47e:	441d      	add	r5, r3
 800f480:	408b      	lsls	r3, r1
 800f482:	1ac0      	subs	r0, r0, r3
 800f484:	ab0e      	add	r3, sp, #56	; 0x38
 800f486:	9504      	str	r5, [sp, #16]
 800f488:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f48c:	f1ca 0317 	rsb	r3, sl, #23
 800f490:	fa40 fb03 	asr.w	fp, r0, r3
 800f494:	f1bb 0f00 	cmp.w	fp, #0
 800f498:	dd65      	ble.n	800f566 <__kernel_rem_pio2+0x26e>
 800f49a:	9b04      	ldr	r3, [sp, #16]
 800f49c:	2200      	movs	r2, #0
 800f49e:	3301      	adds	r3, #1
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	4615      	mov	r5, r2
 800f4a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f4a8:	4294      	cmp	r4, r2
 800f4aa:	f300 809c 	bgt.w	800f5e6 <__kernel_rem_pio2+0x2ee>
 800f4ae:	f1ba 0f00 	cmp.w	sl, #0
 800f4b2:	dd07      	ble.n	800f4c4 <__kernel_rem_pio2+0x1cc>
 800f4b4:	f1ba 0f01 	cmp.w	sl, #1
 800f4b8:	f000 80c0 	beq.w	800f63c <__kernel_rem_pio2+0x344>
 800f4bc:	f1ba 0f02 	cmp.w	sl, #2
 800f4c0:	f000 80c6 	beq.w	800f650 <__kernel_rem_pio2+0x358>
 800f4c4:	f1bb 0f02 	cmp.w	fp, #2
 800f4c8:	d14d      	bne.n	800f566 <__kernel_rem_pio2+0x26e>
 800f4ca:	4632      	mov	r2, r6
 800f4cc:	463b      	mov	r3, r7
 800f4ce:	4956      	ldr	r1, [pc, #344]	; (800f628 <__kernel_rem_pio2+0x330>)
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	f7f0 fef1 	bl	80002b8 <__aeabi_dsub>
 800f4d6:	4606      	mov	r6, r0
 800f4d8:	460f      	mov	r7, r1
 800f4da:	2d00      	cmp	r5, #0
 800f4dc:	d043      	beq.n	800f566 <__kernel_rem_pio2+0x26e>
 800f4de:	4650      	mov	r0, sl
 800f4e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f618 <__kernel_rem_pio2+0x320>
 800f4e4:	f000 fd84 	bl	800fff0 <scalbn>
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	ec53 2b10 	vmov	r2, r3, d0
 800f4f0:	f7f0 fee2 	bl	80002b8 <__aeabi_dsub>
 800f4f4:	4606      	mov	r6, r0
 800f4f6:	460f      	mov	r7, r1
 800f4f8:	e035      	b.n	800f566 <__kernel_rem_pio2+0x26e>
 800f4fa:	4b4c      	ldr	r3, [pc, #304]	; (800f62c <__kernel_rem_pio2+0x334>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	4630      	mov	r0, r6
 800f500:	4639      	mov	r1, r7
 800f502:	f7f1 f891 	bl	8000628 <__aeabi_dmul>
 800f506:	f7f1 fb3f 	bl	8000b88 <__aeabi_d2iz>
 800f50a:	f7f1 f823 	bl	8000554 <__aeabi_i2d>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	ec43 2b18 	vmov	d8, r2, r3
 800f516:	4b46      	ldr	r3, [pc, #280]	; (800f630 <__kernel_rem_pio2+0x338>)
 800f518:	2200      	movs	r2, #0
 800f51a:	f7f1 f885 	bl	8000628 <__aeabi_dmul>
 800f51e:	4602      	mov	r2, r0
 800f520:	460b      	mov	r3, r1
 800f522:	4630      	mov	r0, r6
 800f524:	4639      	mov	r1, r7
 800f526:	f7f0 fec7 	bl	80002b8 <__aeabi_dsub>
 800f52a:	f7f1 fb2d 	bl	8000b88 <__aeabi_d2iz>
 800f52e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f532:	f84b 0b04 	str.w	r0, [fp], #4
 800f536:	ec51 0b18 	vmov	r0, r1, d8
 800f53a:	f7f0 febf 	bl	80002bc <__adddf3>
 800f53e:	f109 39ff 	add.w	r9, r9, #4294967295
 800f542:	4606      	mov	r6, r0
 800f544:	460f      	mov	r7, r1
 800f546:	e75b      	b.n	800f400 <__kernel_rem_pio2+0x108>
 800f548:	d106      	bne.n	800f558 <__kernel_rem_pio2+0x260>
 800f54a:	1e63      	subs	r3, r4, #1
 800f54c:	aa0e      	add	r2, sp, #56	; 0x38
 800f54e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f552:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f556:	e79d      	b.n	800f494 <__kernel_rem_pio2+0x19c>
 800f558:	4b36      	ldr	r3, [pc, #216]	; (800f634 <__kernel_rem_pio2+0x33c>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	f7f1 faea 	bl	8000b34 <__aeabi_dcmpge>
 800f560:	2800      	cmp	r0, #0
 800f562:	d13d      	bne.n	800f5e0 <__kernel_rem_pio2+0x2e8>
 800f564:	4683      	mov	fp, r0
 800f566:	2200      	movs	r2, #0
 800f568:	2300      	movs	r3, #0
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	f7f1 fac3 	bl	8000af8 <__aeabi_dcmpeq>
 800f572:	2800      	cmp	r0, #0
 800f574:	f000 80c0 	beq.w	800f6f8 <__kernel_rem_pio2+0x400>
 800f578:	1e65      	subs	r5, r4, #1
 800f57a:	462b      	mov	r3, r5
 800f57c:	2200      	movs	r2, #0
 800f57e:	9902      	ldr	r1, [sp, #8]
 800f580:	428b      	cmp	r3, r1
 800f582:	da6c      	bge.n	800f65e <__kernel_rem_pio2+0x366>
 800f584:	2a00      	cmp	r2, #0
 800f586:	f000 8089 	beq.w	800f69c <__kernel_rem_pio2+0x3a4>
 800f58a:	ab0e      	add	r3, sp, #56	; 0x38
 800f58c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f590:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f594:	2b00      	cmp	r3, #0
 800f596:	f000 80ad 	beq.w	800f6f4 <__kernel_rem_pio2+0x3fc>
 800f59a:	4650      	mov	r0, sl
 800f59c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f618 <__kernel_rem_pio2+0x320>
 800f5a0:	f000 fd26 	bl	800fff0 <scalbn>
 800f5a4:	ab9a      	add	r3, sp, #616	; 0x268
 800f5a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f5aa:	ec57 6b10 	vmov	r6, r7, d0
 800f5ae:	00ec      	lsls	r4, r5, #3
 800f5b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f5b4:	46aa      	mov	sl, r5
 800f5b6:	f1ba 0f00 	cmp.w	sl, #0
 800f5ba:	f280 80d6 	bge.w	800f76a <__kernel_rem_pio2+0x472>
 800f5be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f610 <__kernel_rem_pio2+0x318>
 800f5c2:	462e      	mov	r6, r5
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	f2c0 8104 	blt.w	800f7d2 <__kernel_rem_pio2+0x4da>
 800f5ca:	ab72      	add	r3, sp, #456	; 0x1c8
 800f5cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f5d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f638 <__kernel_rem_pio2+0x340>
 800f5d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f5d8:	f04f 0800 	mov.w	r8, #0
 800f5dc:	1baf      	subs	r7, r5, r6
 800f5de:	e0ea      	b.n	800f7b6 <__kernel_rem_pio2+0x4be>
 800f5e0:	f04f 0b02 	mov.w	fp, #2
 800f5e4:	e759      	b.n	800f49a <__kernel_rem_pio2+0x1a2>
 800f5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f5ea:	b955      	cbnz	r5, 800f602 <__kernel_rem_pio2+0x30a>
 800f5ec:	b123      	cbz	r3, 800f5f8 <__kernel_rem_pio2+0x300>
 800f5ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f5f2:	f8c8 3000 	str.w	r3, [r8]
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	3201      	adds	r2, #1
 800f5fa:	f108 0804 	add.w	r8, r8, #4
 800f5fe:	461d      	mov	r5, r3
 800f600:	e752      	b.n	800f4a8 <__kernel_rem_pio2+0x1b0>
 800f602:	1acb      	subs	r3, r1, r3
 800f604:	f8c8 3000 	str.w	r3, [r8]
 800f608:	462b      	mov	r3, r5
 800f60a:	e7f5      	b.n	800f5f8 <__kernel_rem_pio2+0x300>
 800f60c:	f3af 8000 	nop.w
	...
 800f61c:	3ff00000 	.word	0x3ff00000
 800f620:	08010ca0 	.word	0x08010ca0
 800f624:	40200000 	.word	0x40200000
 800f628:	3ff00000 	.word	0x3ff00000
 800f62c:	3e700000 	.word	0x3e700000
 800f630:	41700000 	.word	0x41700000
 800f634:	3fe00000 	.word	0x3fe00000
 800f638:	08010c60 	.word	0x08010c60
 800f63c:	1e62      	subs	r2, r4, #1
 800f63e:	ab0e      	add	r3, sp, #56	; 0x38
 800f640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f644:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f648:	a90e      	add	r1, sp, #56	; 0x38
 800f64a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f64e:	e739      	b.n	800f4c4 <__kernel_rem_pio2+0x1cc>
 800f650:	1e62      	subs	r2, r4, #1
 800f652:	ab0e      	add	r3, sp, #56	; 0x38
 800f654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f658:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f65c:	e7f4      	b.n	800f648 <__kernel_rem_pio2+0x350>
 800f65e:	a90e      	add	r1, sp, #56	; 0x38
 800f660:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f664:	3b01      	subs	r3, #1
 800f666:	430a      	orrs	r2, r1
 800f668:	e789      	b.n	800f57e <__kernel_rem_pio2+0x286>
 800f66a:	3301      	adds	r3, #1
 800f66c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f670:	2900      	cmp	r1, #0
 800f672:	d0fa      	beq.n	800f66a <__kernel_rem_pio2+0x372>
 800f674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f676:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f67a:	446a      	add	r2, sp
 800f67c:	3a98      	subs	r2, #152	; 0x98
 800f67e:	920a      	str	r2, [sp, #40]	; 0x28
 800f680:	9a08      	ldr	r2, [sp, #32]
 800f682:	18e3      	adds	r3, r4, r3
 800f684:	18a5      	adds	r5, r4, r2
 800f686:	aa22      	add	r2, sp, #136	; 0x88
 800f688:	f104 0801 	add.w	r8, r4, #1
 800f68c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f690:	9304      	str	r3, [sp, #16]
 800f692:	9b04      	ldr	r3, [sp, #16]
 800f694:	4543      	cmp	r3, r8
 800f696:	da04      	bge.n	800f6a2 <__kernel_rem_pio2+0x3aa>
 800f698:	461c      	mov	r4, r3
 800f69a:	e6a3      	b.n	800f3e4 <__kernel_rem_pio2+0xec>
 800f69c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e7e4      	b.n	800f66c <__kernel_rem_pio2+0x374>
 800f6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f6a8:	f7f0 ff54 	bl	8000554 <__aeabi_i2d>
 800f6ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6b2:	46ab      	mov	fp, r5
 800f6b4:	461c      	mov	r4, r3
 800f6b6:	f04f 0900 	mov.w	r9, #0
 800f6ba:	2600      	movs	r6, #0
 800f6bc:	2700      	movs	r7, #0
 800f6be:	9b06      	ldr	r3, [sp, #24]
 800f6c0:	4599      	cmp	r9, r3
 800f6c2:	dd06      	ble.n	800f6d2 <__kernel_rem_pio2+0x3da>
 800f6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f6ca:	f108 0801 	add.w	r8, r8, #1
 800f6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f6d0:	e7df      	b.n	800f692 <__kernel_rem_pio2+0x39a>
 800f6d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f6d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f6da:	f7f0 ffa5 	bl	8000628 <__aeabi_dmul>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	f7f0 fde9 	bl	80002bc <__adddf3>
 800f6ea:	f109 0901 	add.w	r9, r9, #1
 800f6ee:	4606      	mov	r6, r0
 800f6f0:	460f      	mov	r7, r1
 800f6f2:	e7e4      	b.n	800f6be <__kernel_rem_pio2+0x3c6>
 800f6f4:	3d01      	subs	r5, #1
 800f6f6:	e748      	b.n	800f58a <__kernel_rem_pio2+0x292>
 800f6f8:	ec47 6b10 	vmov	d0, r6, r7
 800f6fc:	f1ca 0000 	rsb	r0, sl, #0
 800f700:	f000 fc76 	bl	800fff0 <scalbn>
 800f704:	ec57 6b10 	vmov	r6, r7, d0
 800f708:	4ba0      	ldr	r3, [pc, #640]	; (800f98c <__kernel_rem_pio2+0x694>)
 800f70a:	ee10 0a10 	vmov	r0, s0
 800f70e:	2200      	movs	r2, #0
 800f710:	4639      	mov	r1, r7
 800f712:	f7f1 fa0f 	bl	8000b34 <__aeabi_dcmpge>
 800f716:	b1f8      	cbz	r0, 800f758 <__kernel_rem_pio2+0x460>
 800f718:	4b9d      	ldr	r3, [pc, #628]	; (800f990 <__kernel_rem_pio2+0x698>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	4630      	mov	r0, r6
 800f71e:	4639      	mov	r1, r7
 800f720:	f7f0 ff82 	bl	8000628 <__aeabi_dmul>
 800f724:	f7f1 fa30 	bl	8000b88 <__aeabi_d2iz>
 800f728:	4680      	mov	r8, r0
 800f72a:	f7f0 ff13 	bl	8000554 <__aeabi_i2d>
 800f72e:	4b97      	ldr	r3, [pc, #604]	; (800f98c <__kernel_rem_pio2+0x694>)
 800f730:	2200      	movs	r2, #0
 800f732:	f7f0 ff79 	bl	8000628 <__aeabi_dmul>
 800f736:	460b      	mov	r3, r1
 800f738:	4602      	mov	r2, r0
 800f73a:	4639      	mov	r1, r7
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7f0 fdbb 	bl	80002b8 <__aeabi_dsub>
 800f742:	f7f1 fa21 	bl	8000b88 <__aeabi_d2iz>
 800f746:	1c65      	adds	r5, r4, #1
 800f748:	ab0e      	add	r3, sp, #56	; 0x38
 800f74a:	f10a 0a18 	add.w	sl, sl, #24
 800f74e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f752:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f756:	e720      	b.n	800f59a <__kernel_rem_pio2+0x2a2>
 800f758:	4630      	mov	r0, r6
 800f75a:	4639      	mov	r1, r7
 800f75c:	f7f1 fa14 	bl	8000b88 <__aeabi_d2iz>
 800f760:	ab0e      	add	r3, sp, #56	; 0x38
 800f762:	4625      	mov	r5, r4
 800f764:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f768:	e717      	b.n	800f59a <__kernel_rem_pio2+0x2a2>
 800f76a:	ab0e      	add	r3, sp, #56	; 0x38
 800f76c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f770:	f7f0 fef0 	bl	8000554 <__aeabi_i2d>
 800f774:	4632      	mov	r2, r6
 800f776:	463b      	mov	r3, r7
 800f778:	f7f0 ff56 	bl	8000628 <__aeabi_dmul>
 800f77c:	4b84      	ldr	r3, [pc, #528]	; (800f990 <__kernel_rem_pio2+0x698>)
 800f77e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f782:	2200      	movs	r2, #0
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	f7f0 ff4e 	bl	8000628 <__aeabi_dmul>
 800f78c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f790:	4606      	mov	r6, r0
 800f792:	460f      	mov	r7, r1
 800f794:	e70f      	b.n	800f5b6 <__kernel_rem_pio2+0x2be>
 800f796:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f79a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f79e:	f7f0 ff43 	bl	8000628 <__aeabi_dmul>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7aa:	f7f0 fd87 	bl	80002bc <__adddf3>
 800f7ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7b2:	f108 0801 	add.w	r8, r8, #1
 800f7b6:	9b02      	ldr	r3, [sp, #8]
 800f7b8:	4598      	cmp	r8, r3
 800f7ba:	dc01      	bgt.n	800f7c0 <__kernel_rem_pio2+0x4c8>
 800f7bc:	45b8      	cmp	r8, r7
 800f7be:	ddea      	ble.n	800f796 <__kernel_rem_pio2+0x49e>
 800f7c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f7c4:	ab4a      	add	r3, sp, #296	; 0x128
 800f7c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f7ca:	ed87 7b00 	vstr	d7, [r7]
 800f7ce:	3e01      	subs	r6, #1
 800f7d0:	e6f8      	b.n	800f5c4 <__kernel_rem_pio2+0x2cc>
 800f7d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	dc0b      	bgt.n	800f7f0 <__kernel_rem_pio2+0x4f8>
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	dc35      	bgt.n	800f848 <__kernel_rem_pio2+0x550>
 800f7dc:	d059      	beq.n	800f892 <__kernel_rem_pio2+0x59a>
 800f7de:	9b04      	ldr	r3, [sp, #16]
 800f7e0:	f003 0007 	and.w	r0, r3, #7
 800f7e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f7e8:	ecbd 8b02 	vpop	{d8}
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d1f3      	bne.n	800f7de <__kernel_rem_pio2+0x4e6>
 800f7f6:	ab4a      	add	r3, sp, #296	; 0x128
 800f7f8:	4423      	add	r3, r4
 800f7fa:	9306      	str	r3, [sp, #24]
 800f7fc:	461c      	mov	r4, r3
 800f7fe:	469a      	mov	sl, r3
 800f800:	9502      	str	r5, [sp, #8]
 800f802:	9b02      	ldr	r3, [sp, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	f1aa 0a08 	sub.w	sl, sl, #8
 800f80a:	dc6b      	bgt.n	800f8e4 <__kernel_rem_pio2+0x5ec>
 800f80c:	46aa      	mov	sl, r5
 800f80e:	f1ba 0f01 	cmp.w	sl, #1
 800f812:	f1a4 0408 	sub.w	r4, r4, #8
 800f816:	f300 8085 	bgt.w	800f924 <__kernel_rem_pio2+0x62c>
 800f81a:	9c06      	ldr	r4, [sp, #24]
 800f81c:	2000      	movs	r0, #0
 800f81e:	3408      	adds	r4, #8
 800f820:	2100      	movs	r1, #0
 800f822:	2d01      	cmp	r5, #1
 800f824:	f300 809d 	bgt.w	800f962 <__kernel_rem_pio2+0x66a>
 800f828:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f82c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f830:	f1bb 0f00 	cmp.w	fp, #0
 800f834:	f040 809b 	bne.w	800f96e <__kernel_rem_pio2+0x676>
 800f838:	9b01      	ldr	r3, [sp, #4]
 800f83a:	e9c3 5600 	strd	r5, r6, [r3]
 800f83e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f842:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f846:	e7ca      	b.n	800f7de <__kernel_rem_pio2+0x4e6>
 800f848:	3408      	adds	r4, #8
 800f84a:	ab4a      	add	r3, sp, #296	; 0x128
 800f84c:	441c      	add	r4, r3
 800f84e:	462e      	mov	r6, r5
 800f850:	2000      	movs	r0, #0
 800f852:	2100      	movs	r1, #0
 800f854:	2e00      	cmp	r6, #0
 800f856:	da36      	bge.n	800f8c6 <__kernel_rem_pio2+0x5ce>
 800f858:	f1bb 0f00 	cmp.w	fp, #0
 800f85c:	d039      	beq.n	800f8d2 <__kernel_rem_pio2+0x5da>
 800f85e:	4602      	mov	r2, r0
 800f860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f864:	9c01      	ldr	r4, [sp, #4]
 800f866:	e9c4 2300 	strd	r2, r3, [r4]
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f872:	f7f0 fd21 	bl	80002b8 <__aeabi_dsub>
 800f876:	ae4c      	add	r6, sp, #304	; 0x130
 800f878:	2401      	movs	r4, #1
 800f87a:	42a5      	cmp	r5, r4
 800f87c:	da2c      	bge.n	800f8d8 <__kernel_rem_pio2+0x5e0>
 800f87e:	f1bb 0f00 	cmp.w	fp, #0
 800f882:	d002      	beq.n	800f88a <__kernel_rem_pio2+0x592>
 800f884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f888:	4619      	mov	r1, r3
 800f88a:	9b01      	ldr	r3, [sp, #4]
 800f88c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f890:	e7a5      	b.n	800f7de <__kernel_rem_pio2+0x4e6>
 800f892:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f896:	eb0d 0403 	add.w	r4, sp, r3
 800f89a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f89e:	2000      	movs	r0, #0
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	2d00      	cmp	r5, #0
 800f8a4:	da09      	bge.n	800f8ba <__kernel_rem_pio2+0x5c2>
 800f8a6:	f1bb 0f00 	cmp.w	fp, #0
 800f8aa:	d002      	beq.n	800f8b2 <__kernel_rem_pio2+0x5ba>
 800f8ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	e9c3 0100 	strd	r0, r1, [r3]
 800f8b8:	e791      	b.n	800f7de <__kernel_rem_pio2+0x4e6>
 800f8ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f8be:	f7f0 fcfd 	bl	80002bc <__adddf3>
 800f8c2:	3d01      	subs	r5, #1
 800f8c4:	e7ed      	b.n	800f8a2 <__kernel_rem_pio2+0x5aa>
 800f8c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f8ca:	f7f0 fcf7 	bl	80002bc <__adddf3>
 800f8ce:	3e01      	subs	r6, #1
 800f8d0:	e7c0      	b.n	800f854 <__kernel_rem_pio2+0x55c>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	e7c5      	b.n	800f864 <__kernel_rem_pio2+0x56c>
 800f8d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f8dc:	f7f0 fcee 	bl	80002bc <__adddf3>
 800f8e0:	3401      	adds	r4, #1
 800f8e2:	e7ca      	b.n	800f87a <__kernel_rem_pio2+0x582>
 800f8e4:	e9da 8900 	ldrd	r8, r9, [sl]
 800f8e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f8ec:	9b02      	ldr	r3, [sp, #8]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	9302      	str	r3, [sp, #8]
 800f8f2:	4632      	mov	r2, r6
 800f8f4:	463b      	mov	r3, r7
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	f7f0 fcdf 	bl	80002bc <__adddf3>
 800f8fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f902:	4602      	mov	r2, r0
 800f904:	460b      	mov	r3, r1
 800f906:	4640      	mov	r0, r8
 800f908:	4649      	mov	r1, r9
 800f90a:	f7f0 fcd5 	bl	80002b8 <__aeabi_dsub>
 800f90e:	4632      	mov	r2, r6
 800f910:	463b      	mov	r3, r7
 800f912:	f7f0 fcd3 	bl	80002bc <__adddf3>
 800f916:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f91a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f91e:	ed8a 7b00 	vstr	d7, [sl]
 800f922:	e76e      	b.n	800f802 <__kernel_rem_pio2+0x50a>
 800f924:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f928:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f92c:	4640      	mov	r0, r8
 800f92e:	4632      	mov	r2, r6
 800f930:	463b      	mov	r3, r7
 800f932:	4649      	mov	r1, r9
 800f934:	f7f0 fcc2 	bl	80002bc <__adddf3>
 800f938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f93c:	4602      	mov	r2, r0
 800f93e:	460b      	mov	r3, r1
 800f940:	4640      	mov	r0, r8
 800f942:	4649      	mov	r1, r9
 800f944:	f7f0 fcb8 	bl	80002b8 <__aeabi_dsub>
 800f948:	4632      	mov	r2, r6
 800f94a:	463b      	mov	r3, r7
 800f94c:	f7f0 fcb6 	bl	80002bc <__adddf3>
 800f950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f954:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f958:	ed84 7b00 	vstr	d7, [r4]
 800f95c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f960:	e755      	b.n	800f80e <__kernel_rem_pio2+0x516>
 800f962:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f966:	f7f0 fca9 	bl	80002bc <__adddf3>
 800f96a:	3d01      	subs	r5, #1
 800f96c:	e759      	b.n	800f822 <__kernel_rem_pio2+0x52a>
 800f96e:	9b01      	ldr	r3, [sp, #4]
 800f970:	9a01      	ldr	r2, [sp, #4]
 800f972:	601d      	str	r5, [r3, #0]
 800f974:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f978:	605c      	str	r4, [r3, #4]
 800f97a:	609f      	str	r7, [r3, #8]
 800f97c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f980:	60d3      	str	r3, [r2, #12]
 800f982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f986:	6110      	str	r0, [r2, #16]
 800f988:	6153      	str	r3, [r2, #20]
 800f98a:	e728      	b.n	800f7de <__kernel_rem_pio2+0x4e6>
 800f98c:	41700000 	.word	0x41700000
 800f990:	3e700000 	.word	0x3e700000
 800f994:	00000000 	.word	0x00000000

0800f998 <__kernel_sin>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	ed2d 8b04 	vpush	{d8-d9}
 800f9a0:	eeb0 8a41 	vmov.f32	s16, s2
 800f9a4:	eef0 8a61 	vmov.f32	s17, s3
 800f9a8:	ec55 4b10 	vmov	r4, r5, d0
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f9b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f9b6:	9001      	str	r0, [sp, #4]
 800f9b8:	da06      	bge.n	800f9c8 <__kernel_sin+0x30>
 800f9ba:	ee10 0a10 	vmov	r0, s0
 800f9be:	4629      	mov	r1, r5
 800f9c0:	f7f1 f8e2 	bl	8000b88 <__aeabi_d2iz>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d051      	beq.n	800fa6c <__kernel_sin+0xd4>
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	f7f0 fe2a 	bl	8000628 <__aeabi_dmul>
 800f9d4:	4682      	mov	sl, r0
 800f9d6:	468b      	mov	fp, r1
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4620      	mov	r0, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	f7f0 fe22 	bl	8000628 <__aeabi_dmul>
 800f9e4:	a341      	add	r3, pc, #260	; (adr r3, 800faec <__kernel_sin+0x154>)
 800f9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ea:	4680      	mov	r8, r0
 800f9ec:	4689      	mov	r9, r1
 800f9ee:	4650      	mov	r0, sl
 800f9f0:	4659      	mov	r1, fp
 800f9f2:	f7f0 fe19 	bl	8000628 <__aeabi_dmul>
 800f9f6:	a33f      	add	r3, pc, #252	; (adr r3, 800faf4 <__kernel_sin+0x15c>)
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	f7f0 fc5c 	bl	80002b8 <__aeabi_dsub>
 800fa00:	4652      	mov	r2, sl
 800fa02:	465b      	mov	r3, fp
 800fa04:	f7f0 fe10 	bl	8000628 <__aeabi_dmul>
 800fa08:	a33c      	add	r3, pc, #240	; (adr r3, 800fafc <__kernel_sin+0x164>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f0 fc55 	bl	80002bc <__adddf3>
 800fa12:	4652      	mov	r2, sl
 800fa14:	465b      	mov	r3, fp
 800fa16:	f7f0 fe07 	bl	8000628 <__aeabi_dmul>
 800fa1a:	a33a      	add	r3, pc, #232	; (adr r3, 800fb04 <__kernel_sin+0x16c>)
 800fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa20:	f7f0 fc4a 	bl	80002b8 <__aeabi_dsub>
 800fa24:	4652      	mov	r2, sl
 800fa26:	465b      	mov	r3, fp
 800fa28:	f7f0 fdfe 	bl	8000628 <__aeabi_dmul>
 800fa2c:	a337      	add	r3, pc, #220	; (adr r3, 800fb0c <__kernel_sin+0x174>)
 800fa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa32:	f7f0 fc43 	bl	80002bc <__adddf3>
 800fa36:	9b01      	ldr	r3, [sp, #4]
 800fa38:	4606      	mov	r6, r0
 800fa3a:	460f      	mov	r7, r1
 800fa3c:	b9eb      	cbnz	r3, 800fa7a <__kernel_sin+0xe2>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4650      	mov	r0, sl
 800fa44:	4659      	mov	r1, fp
 800fa46:	f7f0 fdef 	bl	8000628 <__aeabi_dmul>
 800fa4a:	a325      	add	r3, pc, #148	; (adr r3, 800fae0 <__kernel_sin+0x148>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	f7f0 fc32 	bl	80002b8 <__aeabi_dsub>
 800fa54:	4642      	mov	r2, r8
 800fa56:	464b      	mov	r3, r9
 800fa58:	f7f0 fde6 	bl	8000628 <__aeabi_dmul>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	4620      	mov	r0, r4
 800fa62:	4629      	mov	r1, r5
 800fa64:	f7f0 fc2a 	bl	80002bc <__adddf3>
 800fa68:	4604      	mov	r4, r0
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	ec45 4b10 	vmov	d0, r4, r5
 800fa70:	b003      	add	sp, #12
 800fa72:	ecbd 8b04 	vpop	{d8-d9}
 800fa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7a:	4b1b      	ldr	r3, [pc, #108]	; (800fae8 <__kernel_sin+0x150>)
 800fa7c:	ec51 0b18 	vmov	r0, r1, d8
 800fa80:	2200      	movs	r2, #0
 800fa82:	f7f0 fdd1 	bl	8000628 <__aeabi_dmul>
 800fa86:	4632      	mov	r2, r6
 800fa88:	ec41 0b19 	vmov	d9, r0, r1
 800fa8c:	463b      	mov	r3, r7
 800fa8e:	4640      	mov	r0, r8
 800fa90:	4649      	mov	r1, r9
 800fa92:	f7f0 fdc9 	bl	8000628 <__aeabi_dmul>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	ec51 0b19 	vmov	r0, r1, d9
 800fa9e:	f7f0 fc0b 	bl	80002b8 <__aeabi_dsub>
 800faa2:	4652      	mov	r2, sl
 800faa4:	465b      	mov	r3, fp
 800faa6:	f7f0 fdbf 	bl	8000628 <__aeabi_dmul>
 800faaa:	ec53 2b18 	vmov	r2, r3, d8
 800faae:	f7f0 fc03 	bl	80002b8 <__aeabi_dsub>
 800fab2:	a30b      	add	r3, pc, #44	; (adr r3, 800fae0 <__kernel_sin+0x148>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	4606      	mov	r6, r0
 800faba:	460f      	mov	r7, r1
 800fabc:	4640      	mov	r0, r8
 800fabe:	4649      	mov	r1, r9
 800fac0:	f7f0 fdb2 	bl	8000628 <__aeabi_dmul>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4630      	mov	r0, r6
 800faca:	4639      	mov	r1, r7
 800facc:	f7f0 fbf6 	bl	80002bc <__adddf3>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fbee 	bl	80002b8 <__aeabi_dsub>
 800fadc:	e7c4      	b.n	800fa68 <__kernel_sin+0xd0>
 800fade:	bf00      	nop
 800fae0:	55555549 	.word	0x55555549
 800fae4:	3fc55555 	.word	0x3fc55555
 800fae8:	3fe00000 	.word	0x3fe00000
 800faec:	5acfd57c 	.word	0x5acfd57c
 800faf0:	3de5d93a 	.word	0x3de5d93a
 800faf4:	8a2b9ceb 	.word	0x8a2b9ceb
 800faf8:	3e5ae5e6 	.word	0x3e5ae5e6
 800fafc:	57b1fe7d 	.word	0x57b1fe7d
 800fb00:	3ec71de3 	.word	0x3ec71de3
 800fb04:	19c161d5 	.word	0x19c161d5
 800fb08:	3f2a01a0 	.word	0x3f2a01a0
 800fb0c:	1110f8a6 	.word	0x1110f8a6
 800fb10:	3f811111 	.word	0x3f811111

0800fb14 <with_errno>:
 800fb14:	b570      	push	{r4, r5, r6, lr}
 800fb16:	4604      	mov	r4, r0
 800fb18:	460d      	mov	r5, r1
 800fb1a:	4616      	mov	r6, r2
 800fb1c:	f7fa fa6e 	bl	8009ffc <__errno>
 800fb20:	4629      	mov	r1, r5
 800fb22:	6006      	str	r6, [r0, #0]
 800fb24:	4620      	mov	r0, r4
 800fb26:	bd70      	pop	{r4, r5, r6, pc}

0800fb28 <xflow>:
 800fb28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb2a:	4614      	mov	r4, r2
 800fb2c:	461d      	mov	r5, r3
 800fb2e:	b108      	cbz	r0, 800fb34 <xflow+0xc>
 800fb30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb34:	e9cd 2300 	strd	r2, r3, [sp]
 800fb38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fd72 	bl	8000628 <__aeabi_dmul>
 800fb44:	2222      	movs	r2, #34	; 0x22
 800fb46:	b003      	add	sp, #12
 800fb48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb4c:	f7ff bfe2 	b.w	800fb14 <with_errno>

0800fb50 <__math_uflow>:
 800fb50:	b508      	push	{r3, lr}
 800fb52:	2200      	movs	r2, #0
 800fb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fb58:	f7ff ffe6 	bl	800fb28 <xflow>
 800fb5c:	ec41 0b10 	vmov	d0, r0, r1
 800fb60:	bd08      	pop	{r3, pc}

0800fb62 <__math_oflow>:
 800fb62:	b508      	push	{r3, lr}
 800fb64:	2200      	movs	r2, #0
 800fb66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fb6a:	f7ff ffdd 	bl	800fb28 <xflow>
 800fb6e:	ec41 0b10 	vmov	d0, r0, r1
 800fb72:	bd08      	pop	{r3, pc}
 800fb74:	0000      	movs	r0, r0
	...

0800fb78 <atan>:
 800fb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	ec55 4b10 	vmov	r4, r5, d0
 800fb80:	4bc3      	ldr	r3, [pc, #780]	; (800fe90 <atan+0x318>)
 800fb82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb86:	429e      	cmp	r6, r3
 800fb88:	46ab      	mov	fp, r5
 800fb8a:	dd18      	ble.n	800fbbe <atan+0x46>
 800fb8c:	4bc1      	ldr	r3, [pc, #772]	; (800fe94 <atan+0x31c>)
 800fb8e:	429e      	cmp	r6, r3
 800fb90:	dc01      	bgt.n	800fb96 <atan+0x1e>
 800fb92:	d109      	bne.n	800fba8 <atan+0x30>
 800fb94:	b144      	cbz	r4, 800fba8 <atan+0x30>
 800fb96:	4622      	mov	r2, r4
 800fb98:	462b      	mov	r3, r5
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	f7f0 fb8d 	bl	80002bc <__adddf3>
 800fba2:	4604      	mov	r4, r0
 800fba4:	460d      	mov	r5, r1
 800fba6:	e006      	b.n	800fbb6 <atan+0x3e>
 800fba8:	f1bb 0f00 	cmp.w	fp, #0
 800fbac:	f300 8131 	bgt.w	800fe12 <atan+0x29a>
 800fbb0:	a59b      	add	r5, pc, #620	; (adr r5, 800fe20 <atan+0x2a8>)
 800fbb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fbb6:	ec45 4b10 	vmov	d0, r4, r5
 800fbba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	4bb6      	ldr	r3, [pc, #728]	; (800fe98 <atan+0x320>)
 800fbc0:	429e      	cmp	r6, r3
 800fbc2:	dc14      	bgt.n	800fbee <atan+0x76>
 800fbc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fbc8:	429e      	cmp	r6, r3
 800fbca:	dc0d      	bgt.n	800fbe8 <atan+0x70>
 800fbcc:	a396      	add	r3, pc, #600	; (adr r3, 800fe28 <atan+0x2b0>)
 800fbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd2:	ee10 0a10 	vmov	r0, s0
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7f0 fb70 	bl	80002bc <__adddf3>
 800fbdc:	4baf      	ldr	r3, [pc, #700]	; (800fe9c <atan+0x324>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f7f0 ffb2 	bl	8000b48 <__aeabi_dcmpgt>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d1e6      	bne.n	800fbb6 <atan+0x3e>
 800fbe8:	f04f 3aff 	mov.w	sl, #4294967295
 800fbec:	e02b      	b.n	800fc46 <atan+0xce>
 800fbee:	f000 f963 	bl	800feb8 <fabs>
 800fbf2:	4bab      	ldr	r3, [pc, #684]	; (800fea0 <atan+0x328>)
 800fbf4:	429e      	cmp	r6, r3
 800fbf6:	ec55 4b10 	vmov	r4, r5, d0
 800fbfa:	f300 80bf 	bgt.w	800fd7c <atan+0x204>
 800fbfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fc02:	429e      	cmp	r6, r3
 800fc04:	f300 80a0 	bgt.w	800fd48 <atan+0x1d0>
 800fc08:	ee10 2a10 	vmov	r2, s0
 800fc0c:	ee10 0a10 	vmov	r0, s0
 800fc10:	462b      	mov	r3, r5
 800fc12:	4629      	mov	r1, r5
 800fc14:	f7f0 fb52 	bl	80002bc <__adddf3>
 800fc18:	4ba0      	ldr	r3, [pc, #640]	; (800fe9c <atan+0x324>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f7f0 fb4c 	bl	80002b8 <__aeabi_dsub>
 800fc20:	2200      	movs	r2, #0
 800fc22:	4606      	mov	r6, r0
 800fc24:	460f      	mov	r7, r1
 800fc26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	f7f0 fb45 	bl	80002bc <__adddf3>
 800fc32:	4602      	mov	r2, r0
 800fc34:	460b      	mov	r3, r1
 800fc36:	4630      	mov	r0, r6
 800fc38:	4639      	mov	r1, r7
 800fc3a:	f7f0 fe1f 	bl	800087c <__aeabi_ddiv>
 800fc3e:	f04f 0a00 	mov.w	sl, #0
 800fc42:	4604      	mov	r4, r0
 800fc44:	460d      	mov	r5, r1
 800fc46:	4622      	mov	r2, r4
 800fc48:	462b      	mov	r3, r5
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7f0 fceb 	bl	8000628 <__aeabi_dmul>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	4680      	mov	r8, r0
 800fc58:	4689      	mov	r9, r1
 800fc5a:	f7f0 fce5 	bl	8000628 <__aeabi_dmul>
 800fc5e:	a374      	add	r3, pc, #464	; (adr r3, 800fe30 <atan+0x2b8>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	4606      	mov	r6, r0
 800fc66:	460f      	mov	r7, r1
 800fc68:	f7f0 fcde 	bl	8000628 <__aeabi_dmul>
 800fc6c:	a372      	add	r3, pc, #456	; (adr r3, 800fe38 <atan+0x2c0>)
 800fc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc72:	f7f0 fb23 	bl	80002bc <__adddf3>
 800fc76:	4632      	mov	r2, r6
 800fc78:	463b      	mov	r3, r7
 800fc7a:	f7f0 fcd5 	bl	8000628 <__aeabi_dmul>
 800fc7e:	a370      	add	r3, pc, #448	; (adr r3, 800fe40 <atan+0x2c8>)
 800fc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc84:	f7f0 fb1a 	bl	80002bc <__adddf3>
 800fc88:	4632      	mov	r2, r6
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	f7f0 fccc 	bl	8000628 <__aeabi_dmul>
 800fc90:	a36d      	add	r3, pc, #436	; (adr r3, 800fe48 <atan+0x2d0>)
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	f7f0 fb11 	bl	80002bc <__adddf3>
 800fc9a:	4632      	mov	r2, r6
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	f7f0 fcc3 	bl	8000628 <__aeabi_dmul>
 800fca2:	a36b      	add	r3, pc, #428	; (adr r3, 800fe50 <atan+0x2d8>)
 800fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca8:	f7f0 fb08 	bl	80002bc <__adddf3>
 800fcac:	4632      	mov	r2, r6
 800fcae:	463b      	mov	r3, r7
 800fcb0:	f7f0 fcba 	bl	8000628 <__aeabi_dmul>
 800fcb4:	a368      	add	r3, pc, #416	; (adr r3, 800fe58 <atan+0x2e0>)
 800fcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcba:	f7f0 faff 	bl	80002bc <__adddf3>
 800fcbe:	4642      	mov	r2, r8
 800fcc0:	464b      	mov	r3, r9
 800fcc2:	f7f0 fcb1 	bl	8000628 <__aeabi_dmul>
 800fcc6:	a366      	add	r3, pc, #408	; (adr r3, 800fe60 <atan+0x2e8>)
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	4680      	mov	r8, r0
 800fcce:	4689      	mov	r9, r1
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	4639      	mov	r1, r7
 800fcd4:	f7f0 fca8 	bl	8000628 <__aeabi_dmul>
 800fcd8:	a363      	add	r3, pc, #396	; (adr r3, 800fe68 <atan+0x2f0>)
 800fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcde:	f7f0 faeb 	bl	80002b8 <__aeabi_dsub>
 800fce2:	4632      	mov	r2, r6
 800fce4:	463b      	mov	r3, r7
 800fce6:	f7f0 fc9f 	bl	8000628 <__aeabi_dmul>
 800fcea:	a361      	add	r3, pc, #388	; (adr r3, 800fe70 <atan+0x2f8>)
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	f7f0 fae2 	bl	80002b8 <__aeabi_dsub>
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	463b      	mov	r3, r7
 800fcf8:	f7f0 fc96 	bl	8000628 <__aeabi_dmul>
 800fcfc:	a35e      	add	r3, pc, #376	; (adr r3, 800fe78 <atan+0x300>)
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	f7f0 fad9 	bl	80002b8 <__aeabi_dsub>
 800fd06:	4632      	mov	r2, r6
 800fd08:	463b      	mov	r3, r7
 800fd0a:	f7f0 fc8d 	bl	8000628 <__aeabi_dmul>
 800fd0e:	a35c      	add	r3, pc, #368	; (adr r3, 800fe80 <atan+0x308>)
 800fd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd14:	f7f0 fad0 	bl	80002b8 <__aeabi_dsub>
 800fd18:	4632      	mov	r2, r6
 800fd1a:	463b      	mov	r3, r7
 800fd1c:	f7f0 fc84 	bl	8000628 <__aeabi_dmul>
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4640      	mov	r0, r8
 800fd26:	4649      	mov	r1, r9
 800fd28:	f7f0 fac8 	bl	80002bc <__adddf3>
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f7f0 fc7a 	bl	8000628 <__aeabi_dmul>
 800fd34:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	d14b      	bne.n	800fdd6 <atan+0x25e>
 800fd3e:	4620      	mov	r0, r4
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 fab9 	bl	80002b8 <__aeabi_dsub>
 800fd46:	e72c      	b.n	800fba2 <atan+0x2a>
 800fd48:	ee10 0a10 	vmov	r0, s0
 800fd4c:	4b53      	ldr	r3, [pc, #332]	; (800fe9c <atan+0x324>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 fab1 	bl	80002b8 <__aeabi_dsub>
 800fd56:	4b51      	ldr	r3, [pc, #324]	; (800fe9c <atan+0x324>)
 800fd58:	4606      	mov	r6, r0
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	4620      	mov	r0, r4
 800fd60:	4629      	mov	r1, r5
 800fd62:	f7f0 faab 	bl	80002bc <__adddf3>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	f7f0 fd85 	bl	800087c <__aeabi_ddiv>
 800fd72:	f04f 0a01 	mov.w	sl, #1
 800fd76:	4604      	mov	r4, r0
 800fd78:	460d      	mov	r5, r1
 800fd7a:	e764      	b.n	800fc46 <atan+0xce>
 800fd7c:	4b49      	ldr	r3, [pc, #292]	; (800fea4 <atan+0x32c>)
 800fd7e:	429e      	cmp	r6, r3
 800fd80:	da1d      	bge.n	800fdbe <atan+0x246>
 800fd82:	ee10 0a10 	vmov	r0, s0
 800fd86:	4b48      	ldr	r3, [pc, #288]	; (800fea8 <atan+0x330>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	f7f0 fa94 	bl	80002b8 <__aeabi_dsub>
 800fd90:	4b45      	ldr	r3, [pc, #276]	; (800fea8 <atan+0x330>)
 800fd92:	4606      	mov	r6, r0
 800fd94:	460f      	mov	r7, r1
 800fd96:	2200      	movs	r2, #0
 800fd98:	4620      	mov	r0, r4
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	f7f0 fc44 	bl	8000628 <__aeabi_dmul>
 800fda0:	4b3e      	ldr	r3, [pc, #248]	; (800fe9c <atan+0x324>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	f7f0 fa8a 	bl	80002bc <__adddf3>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4630      	mov	r0, r6
 800fdae:	4639      	mov	r1, r7
 800fdb0:	f7f0 fd64 	bl	800087c <__aeabi_ddiv>
 800fdb4:	f04f 0a02 	mov.w	sl, #2
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	e743      	b.n	800fc46 <atan+0xce>
 800fdbe:	462b      	mov	r3, r5
 800fdc0:	ee10 2a10 	vmov	r2, s0
 800fdc4:	4939      	ldr	r1, [pc, #228]	; (800feac <atan+0x334>)
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f7f0 fd58 	bl	800087c <__aeabi_ddiv>
 800fdcc:	f04f 0a03 	mov.w	sl, #3
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	460d      	mov	r5, r1
 800fdd4:	e737      	b.n	800fc46 <atan+0xce>
 800fdd6:	4b36      	ldr	r3, [pc, #216]	; (800feb0 <atan+0x338>)
 800fdd8:	4e36      	ldr	r6, [pc, #216]	; (800feb4 <atan+0x33c>)
 800fdda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fdde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fde2:	e9da 2300 	ldrd	r2, r3, [sl]
 800fde6:	f7f0 fa67 	bl	80002b8 <__aeabi_dsub>
 800fdea:	4622      	mov	r2, r4
 800fdec:	462b      	mov	r3, r5
 800fdee:	f7f0 fa63 	bl	80002b8 <__aeabi_dsub>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fdfa:	f7f0 fa5d 	bl	80002b8 <__aeabi_dsub>
 800fdfe:	f1bb 0f00 	cmp.w	fp, #0
 800fe02:	4604      	mov	r4, r0
 800fe04:	460d      	mov	r5, r1
 800fe06:	f6bf aed6 	bge.w	800fbb6 <atan+0x3e>
 800fe0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe0e:	461d      	mov	r5, r3
 800fe10:	e6d1      	b.n	800fbb6 <atan+0x3e>
 800fe12:	a51d      	add	r5, pc, #116	; (adr r5, 800fe88 <atan+0x310>)
 800fe14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe18:	e6cd      	b.n	800fbb6 <atan+0x3e>
 800fe1a:	bf00      	nop
 800fe1c:	f3af 8000 	nop.w
 800fe20:	54442d18 	.word	0x54442d18
 800fe24:	bff921fb 	.word	0xbff921fb
 800fe28:	8800759c 	.word	0x8800759c
 800fe2c:	7e37e43c 	.word	0x7e37e43c
 800fe30:	e322da11 	.word	0xe322da11
 800fe34:	3f90ad3a 	.word	0x3f90ad3a
 800fe38:	24760deb 	.word	0x24760deb
 800fe3c:	3fa97b4b 	.word	0x3fa97b4b
 800fe40:	a0d03d51 	.word	0xa0d03d51
 800fe44:	3fb10d66 	.word	0x3fb10d66
 800fe48:	c54c206e 	.word	0xc54c206e
 800fe4c:	3fb745cd 	.word	0x3fb745cd
 800fe50:	920083ff 	.word	0x920083ff
 800fe54:	3fc24924 	.word	0x3fc24924
 800fe58:	5555550d 	.word	0x5555550d
 800fe5c:	3fd55555 	.word	0x3fd55555
 800fe60:	2c6a6c2f 	.word	0x2c6a6c2f
 800fe64:	bfa2b444 	.word	0xbfa2b444
 800fe68:	52defd9a 	.word	0x52defd9a
 800fe6c:	3fadde2d 	.word	0x3fadde2d
 800fe70:	af749a6d 	.word	0xaf749a6d
 800fe74:	3fb3b0f2 	.word	0x3fb3b0f2
 800fe78:	fe231671 	.word	0xfe231671
 800fe7c:	3fbc71c6 	.word	0x3fbc71c6
 800fe80:	9998ebc4 	.word	0x9998ebc4
 800fe84:	3fc99999 	.word	0x3fc99999
 800fe88:	54442d18 	.word	0x54442d18
 800fe8c:	3ff921fb 	.word	0x3ff921fb
 800fe90:	440fffff 	.word	0x440fffff
 800fe94:	7ff00000 	.word	0x7ff00000
 800fe98:	3fdbffff 	.word	0x3fdbffff
 800fe9c:	3ff00000 	.word	0x3ff00000
 800fea0:	3ff2ffff 	.word	0x3ff2ffff
 800fea4:	40038000 	.word	0x40038000
 800fea8:	3ff80000 	.word	0x3ff80000
 800feac:	bff00000 	.word	0xbff00000
 800feb0:	08010cd0 	.word	0x08010cd0
 800feb4:	08010cb0 	.word	0x08010cb0

0800feb8 <fabs>:
 800feb8:	ec51 0b10 	vmov	r0, r1, d0
 800febc:	ee10 2a10 	vmov	r2, s0
 800fec0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fec4:	ec43 2b10 	vmov	d0, r2, r3
 800fec8:	4770      	bx	lr

0800feca <finite>:
 800feca:	b082      	sub	sp, #8
 800fecc:	ed8d 0b00 	vstr	d0, [sp]
 800fed0:	9801      	ldr	r0, [sp, #4]
 800fed2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fed6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800feda:	0fc0      	lsrs	r0, r0, #31
 800fedc:	b002      	add	sp, #8
 800fede:	4770      	bx	lr

0800fee0 <floor>:
 800fee0:	ec51 0b10 	vmov	r0, r1, d0
 800fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800feec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fef0:	2e13      	cmp	r6, #19
 800fef2:	ee10 5a10 	vmov	r5, s0
 800fef6:	ee10 8a10 	vmov	r8, s0
 800fefa:	460c      	mov	r4, r1
 800fefc:	dc32      	bgt.n	800ff64 <floor+0x84>
 800fefe:	2e00      	cmp	r6, #0
 800ff00:	da14      	bge.n	800ff2c <floor+0x4c>
 800ff02:	a333      	add	r3, pc, #204	; (adr r3, 800ffd0 <floor+0xf0>)
 800ff04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff08:	f7f0 f9d8 	bl	80002bc <__adddf3>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	2300      	movs	r3, #0
 800ff10:	f7f0 fe1a 	bl	8000b48 <__aeabi_dcmpgt>
 800ff14:	b138      	cbz	r0, 800ff26 <floor+0x46>
 800ff16:	2c00      	cmp	r4, #0
 800ff18:	da57      	bge.n	800ffca <floor+0xea>
 800ff1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ff1e:	431d      	orrs	r5, r3
 800ff20:	d001      	beq.n	800ff26 <floor+0x46>
 800ff22:	4c2d      	ldr	r4, [pc, #180]	; (800ffd8 <floor+0xf8>)
 800ff24:	2500      	movs	r5, #0
 800ff26:	4621      	mov	r1, r4
 800ff28:	4628      	mov	r0, r5
 800ff2a:	e025      	b.n	800ff78 <floor+0x98>
 800ff2c:	4f2b      	ldr	r7, [pc, #172]	; (800ffdc <floor+0xfc>)
 800ff2e:	4137      	asrs	r7, r6
 800ff30:	ea01 0307 	and.w	r3, r1, r7
 800ff34:	4303      	orrs	r3, r0
 800ff36:	d01f      	beq.n	800ff78 <floor+0x98>
 800ff38:	a325      	add	r3, pc, #148	; (adr r3, 800ffd0 <floor+0xf0>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f7f0 f9bd 	bl	80002bc <__adddf3>
 800ff42:	2200      	movs	r2, #0
 800ff44:	2300      	movs	r3, #0
 800ff46:	f7f0 fdff 	bl	8000b48 <__aeabi_dcmpgt>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d0eb      	beq.n	800ff26 <floor+0x46>
 800ff4e:	2c00      	cmp	r4, #0
 800ff50:	bfbe      	ittt	lt
 800ff52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ff56:	fa43 f606 	asrlt.w	r6, r3, r6
 800ff5a:	19a4      	addlt	r4, r4, r6
 800ff5c:	ea24 0407 	bic.w	r4, r4, r7
 800ff60:	2500      	movs	r5, #0
 800ff62:	e7e0      	b.n	800ff26 <floor+0x46>
 800ff64:	2e33      	cmp	r6, #51	; 0x33
 800ff66:	dd0b      	ble.n	800ff80 <floor+0xa0>
 800ff68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ff6c:	d104      	bne.n	800ff78 <floor+0x98>
 800ff6e:	ee10 2a10 	vmov	r2, s0
 800ff72:	460b      	mov	r3, r1
 800ff74:	f7f0 f9a2 	bl	80002bc <__adddf3>
 800ff78:	ec41 0b10 	vmov	d0, r0, r1
 800ff7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295
 800ff88:	fa23 f707 	lsr.w	r7, r3, r7
 800ff8c:	4207      	tst	r7, r0
 800ff8e:	d0f3      	beq.n	800ff78 <floor+0x98>
 800ff90:	a30f      	add	r3, pc, #60	; (adr r3, 800ffd0 <floor+0xf0>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	f7f0 f991 	bl	80002bc <__adddf3>
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	f7f0 fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d0bf      	beq.n	800ff26 <floor+0x46>
 800ffa6:	2c00      	cmp	r4, #0
 800ffa8:	da02      	bge.n	800ffb0 <floor+0xd0>
 800ffaa:	2e14      	cmp	r6, #20
 800ffac:	d103      	bne.n	800ffb6 <floor+0xd6>
 800ffae:	3401      	adds	r4, #1
 800ffb0:	ea25 0507 	bic.w	r5, r5, r7
 800ffb4:	e7b7      	b.n	800ff26 <floor+0x46>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ffbc:	fa03 f606 	lsl.w	r6, r3, r6
 800ffc0:	4435      	add	r5, r6
 800ffc2:	4545      	cmp	r5, r8
 800ffc4:	bf38      	it	cc
 800ffc6:	18e4      	addcc	r4, r4, r3
 800ffc8:	e7f2      	b.n	800ffb0 <floor+0xd0>
 800ffca:	2500      	movs	r5, #0
 800ffcc:	462c      	mov	r4, r5
 800ffce:	e7aa      	b.n	800ff26 <floor+0x46>
 800ffd0:	8800759c 	.word	0x8800759c
 800ffd4:	7e37e43c 	.word	0x7e37e43c
 800ffd8:	bff00000 	.word	0xbff00000
 800ffdc:	000fffff 	.word	0x000fffff

0800ffe0 <nan>:
 800ffe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ffe8 <nan+0x8>
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	00000000 	.word	0x00000000
 800ffec:	7ff80000 	.word	0x7ff80000

0800fff0 <scalbn>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	ec55 4b10 	vmov	r4, r5, d0
 800fff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fffa:	4606      	mov	r6, r0
 800fffc:	462b      	mov	r3, r5
 800fffe:	b99a      	cbnz	r2, 8010028 <scalbn+0x38>
 8010000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010004:	4323      	orrs	r3, r4
 8010006:	d036      	beq.n	8010076 <scalbn+0x86>
 8010008:	4b39      	ldr	r3, [pc, #228]	; (80100f0 <scalbn+0x100>)
 801000a:	4629      	mov	r1, r5
 801000c:	ee10 0a10 	vmov	r0, s0
 8010010:	2200      	movs	r2, #0
 8010012:	f7f0 fb09 	bl	8000628 <__aeabi_dmul>
 8010016:	4b37      	ldr	r3, [pc, #220]	; (80100f4 <scalbn+0x104>)
 8010018:	429e      	cmp	r6, r3
 801001a:	4604      	mov	r4, r0
 801001c:	460d      	mov	r5, r1
 801001e:	da10      	bge.n	8010042 <scalbn+0x52>
 8010020:	a32b      	add	r3, pc, #172	; (adr r3, 80100d0 <scalbn+0xe0>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	e03a      	b.n	801009e <scalbn+0xae>
 8010028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801002c:	428a      	cmp	r2, r1
 801002e:	d10c      	bne.n	801004a <scalbn+0x5a>
 8010030:	ee10 2a10 	vmov	r2, s0
 8010034:	4620      	mov	r0, r4
 8010036:	4629      	mov	r1, r5
 8010038:	f7f0 f940 	bl	80002bc <__adddf3>
 801003c:	4604      	mov	r4, r0
 801003e:	460d      	mov	r5, r1
 8010040:	e019      	b.n	8010076 <scalbn+0x86>
 8010042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010046:	460b      	mov	r3, r1
 8010048:	3a36      	subs	r2, #54	; 0x36
 801004a:	4432      	add	r2, r6
 801004c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010050:	428a      	cmp	r2, r1
 8010052:	dd08      	ble.n	8010066 <scalbn+0x76>
 8010054:	2d00      	cmp	r5, #0
 8010056:	a120      	add	r1, pc, #128	; (adr r1, 80100d8 <scalbn+0xe8>)
 8010058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801005c:	da1c      	bge.n	8010098 <scalbn+0xa8>
 801005e:	a120      	add	r1, pc, #128	; (adr r1, 80100e0 <scalbn+0xf0>)
 8010060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010064:	e018      	b.n	8010098 <scalbn+0xa8>
 8010066:	2a00      	cmp	r2, #0
 8010068:	dd08      	ble.n	801007c <scalbn+0x8c>
 801006a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801006e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010076:	ec45 4b10 	vmov	d0, r4, r5
 801007a:	bd70      	pop	{r4, r5, r6, pc}
 801007c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010080:	da19      	bge.n	80100b6 <scalbn+0xc6>
 8010082:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010086:	429e      	cmp	r6, r3
 8010088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801008c:	dd0a      	ble.n	80100a4 <scalbn+0xb4>
 801008e:	a112      	add	r1, pc, #72	; (adr r1, 80100d8 <scalbn+0xe8>)
 8010090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1e2      	bne.n	801005e <scalbn+0x6e>
 8010098:	a30f      	add	r3, pc, #60	; (adr r3, 80100d8 <scalbn+0xe8>)
 801009a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009e:	f7f0 fac3 	bl	8000628 <__aeabi_dmul>
 80100a2:	e7cb      	b.n	801003c <scalbn+0x4c>
 80100a4:	a10a      	add	r1, pc, #40	; (adr r1, 80100d0 <scalbn+0xe0>)
 80100a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d0b8      	beq.n	8010020 <scalbn+0x30>
 80100ae:	a10e      	add	r1, pc, #56	; (adr r1, 80100e8 <scalbn+0xf8>)
 80100b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100b4:	e7b4      	b.n	8010020 <scalbn+0x30>
 80100b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100ba:	3236      	adds	r2, #54	; 0x36
 80100bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80100c4:	4620      	mov	r0, r4
 80100c6:	4b0c      	ldr	r3, [pc, #48]	; (80100f8 <scalbn+0x108>)
 80100c8:	2200      	movs	r2, #0
 80100ca:	e7e8      	b.n	801009e <scalbn+0xae>
 80100cc:	f3af 8000 	nop.w
 80100d0:	c2f8f359 	.word	0xc2f8f359
 80100d4:	01a56e1f 	.word	0x01a56e1f
 80100d8:	8800759c 	.word	0x8800759c
 80100dc:	7e37e43c 	.word	0x7e37e43c
 80100e0:	8800759c 	.word	0x8800759c
 80100e4:	fe37e43c 	.word	0xfe37e43c
 80100e8:	c2f8f359 	.word	0xc2f8f359
 80100ec:	81a56e1f 	.word	0x81a56e1f
 80100f0:	43500000 	.word	0x43500000
 80100f4:	ffff3cb0 	.word	0xffff3cb0
 80100f8:	3c900000 	.word	0x3c900000

080100fc <_sbrk>:
 80100fc:	4a04      	ldr	r2, [pc, #16]	; (8010110 <_sbrk+0x14>)
 80100fe:	6811      	ldr	r1, [r2, #0]
 8010100:	4603      	mov	r3, r0
 8010102:	b909      	cbnz	r1, 8010108 <_sbrk+0xc>
 8010104:	4903      	ldr	r1, [pc, #12]	; (8010114 <_sbrk+0x18>)
 8010106:	6011      	str	r1, [r2, #0]
 8010108:	6810      	ldr	r0, [r2, #0]
 801010a:	4403      	add	r3, r0
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	4770      	bx	lr
 8010110:	2001227c 	.word	0x2001227c
 8010114:	20012280 	.word	0x20012280

08010118 <_init>:
 8010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011a:	bf00      	nop
 801011c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011e:	bc08      	pop	{r3}
 8010120:	469e      	mov	lr, r3
 8010122:	4770      	bx	lr

08010124 <_fini>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	bf00      	nop
 8010128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801012a:	bc08      	pop	{r3}
 801012c:	469e      	mov	lr, r3
 801012e:	4770      	bx	lr
