
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e490  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800e630  0800e630  0001e630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0a0  0800f0a0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0a0  0800f0a0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0a0  0800f0a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0a0  0800f0a0  0001f0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011b68  200001e8  0800f28c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011d50  0800f28c  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008405  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001851  00000000  00000000  00028619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00029e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011365  00000000  00000000  0002ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097cd  00000000  00000000  0003bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059315  00000000  00000000  00045772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009ea87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  0009ead8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e618 	.word	0x0800e618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800e618 	.word	0x0800e618

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b98      	ldr	r3, [pc, #608]	; (8000f20 <main+0x268>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a96      	ldr	r2, [pc, #600]	; (8000f20 <main+0x268>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f006 fda4 	bl	800781c <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd4:	f000 f9ec 	bl	80010b0 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cd8:	4b92      	ldr	r3, [pc, #584]	; (8000f24 <main+0x26c>)
 8000cda:	4a93      	ldr	r2, [pc, #588]	; (8000f28 <main+0x270>)
 8000cdc:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
//	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos

	double angleToGo_Relative = 0;
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double angle_start = 0;
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2300 	strd	r2, r3, [r7]

    /* Loop forever */
	while(1){

		if (!flag_Astar){
 8000cf6:	4b8d      	ldr	r3, [pc, #564]	; (8000f2c <main+0x274>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <main+0x4a>
			fillComand(); // Se puede leer cualquier comando excepto cuando se esta lleyendo el grid de Astar
 8000cfe:	f002 f84b 	bl	8002d98 <fillComand>
		}

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d02:	4b8b      	ldr	r3, [pc, #556]	; (8000f30 <main+0x278>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d01d      	beq.n	8000d46 <main+0x8e>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <main+0x27c>)
 8000d0c:	ed93 7b00 	vldr	d7, [r3]
 8000d10:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <main+0x280>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4a89      	ldr	r2, [pc, #548]	; (8000f3c <main+0x284>)
 8000d16:	8812      	ldrh	r2, [r2, #0]
 8000d18:	f8ad 2018 	strh.w	r2, [sp, #24]
 8000d1c:	4a88      	ldr	r2, [pc, #544]	; (8000f40 <main+0x288>)
 8000d1e:	9205      	str	r2, [sp, #20]
 8000d20:	4a88      	ldr	r2, [pc, #544]	; (8000f44 <main+0x28c>)
 8000d22:	9204      	str	r2, [sp, #16]
 8000d24:	4a88      	ldr	r2, [pc, #544]	; (8000f48 <main+0x290>)
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	4a88      	ldr	r2, [pc, #544]	; (8000f4c <main+0x294>)
 8000d2a:	9202      	str	r2, [sp, #8]
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <main+0x298>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	eeb0 0a47 	vmov.f32	s0, s14
 8000d36:	eef0 0a67 	vmov.f32	s1, s15
 8000d3a:	4b86      	ldr	r3, [pc, #536]	; (8000f54 <main+0x29c>)
 8000d3c:	4a86      	ldr	r2, [pc, #536]	; (8000f58 <main+0x2a0>)
 8000d3e:	4987      	ldr	r1, [pc, #540]	; (8000f5c <main+0x2a4>)
 8000d40:	4887      	ldr	r0, [pc, #540]	; (8000f60 <main+0x2a8>)
 8000d42:	f001 ff51 	bl	8002be8 <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d46:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <main+0x2ac>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d02c      	beq.n	8000da8 <main+0xf0>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			Done = goTo(handler_Motor_Array,
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <main+0x27c>)
 8000d50:	ed93 7b00 	vldr	d7, [r3]
 8000d54:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <main+0x280>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
					    Mode,
					    &flag_angulo,
					    &flag_measurements,
					    &flag_control,
					    data,
					    parameters_Path_Robot.line_Distance,
 8000d58:	4a7e      	ldr	r2, [pc, #504]	; (8000f54 <main+0x29c>)
 8000d5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
			Done = goTo(handler_Motor_Array,
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4a77      	ldr	r2, [pc, #476]	; (8000f3c <main+0x284>)
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	f8ad 201c 	strh.w	r2, [sp, #28]
 8000d66:	9106      	str	r1, [sp, #24]
 8000d68:	4a75      	ldr	r2, [pc, #468]	; (8000f40 <main+0x288>)
 8000d6a:	9205      	str	r2, [sp, #20]
 8000d6c:	4a75      	ldr	r2, [pc, #468]	; (8000f44 <main+0x28c>)
 8000d6e:	9204      	str	r2, [sp, #16]
 8000d70:	4a75      	ldr	r2, [pc, #468]	; (8000f48 <main+0x290>)
 8000d72:	9203      	str	r2, [sp, #12]
 8000d74:	4a75      	ldr	r2, [pc, #468]	; (8000f4c <main+0x294>)
 8000d76:	9202      	str	r2, [sp, #8]
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	4b75      	ldr	r3, [pc, #468]	; (8000f50 <main+0x298>)
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d82:	eef0 0a67 	vmov.f32	s1, s15
 8000d86:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <main+0x29c>)
 8000d88:	4a73      	ldr	r2, [pc, #460]	; (8000f58 <main+0x2a0>)
 8000d8a:	4974      	ldr	r1, [pc, #464]	; (8000f5c <main+0x2a4>)
 8000d8c:	4874      	ldr	r0, [pc, #464]	; (8000f60 <main+0x2a8>)
 8000d8e:	f001 fd0d 	bl	80027ac <goTo>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b74      	ldr	r3, [pc, #464]	; (8000f68 <main+0x2b0>)
 8000d98:	701a      	strb	r2, [r3, #0]
					    Mode_dir);

			if (Done){parseCommands("stop");}
 8000d9a:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <main+0x2b0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <main+0xf0>
 8000da2:	4872      	ldr	r0, [pc, #456]	; (8000f6c <main+0x2b4>)
 8000da4:	f000 fbda 	bl	800155c <parseCommands>

		}

		if (flag_Roll){
 8000da8:	4b71      	ldr	r3, [pc, #452]	; (8000f70 <main+0x2b8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d01b      	beq.n	8000de8 <main+0x130>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			roll(handler_Motor_Array,
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <main+0x27c>)
 8000db2:	ed93 7b00 	vldr	d7, [r3]
 8000db6:	4b60      	ldr	r3, [pc, #384]	; (8000f38 <main+0x280>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <main+0x284>)
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000dc2:	4a5f      	ldr	r2, [pc, #380]	; (8000f40 <main+0x288>)
 8000dc4:	9204      	str	r2, [sp, #16]
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	; (8000f44 <main+0x28c>)
 8000dc8:	9203      	str	r2, [sp, #12]
 8000dca:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <main+0x290>)
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	4a5f      	ldr	r2, [pc, #380]	; (8000f4c <main+0x294>)
 8000dd0:	9201      	str	r2, [sp, #4]
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd8:	eef0 0a67 	vmov.f32	s1, s15
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <main+0x29c>)
 8000dde:	4a5e      	ldr	r2, [pc, #376]	; (8000f58 <main+0x2a0>)
 8000de0:	495e      	ldr	r1, [pc, #376]	; (8000f5c <main+0x2a4>)
 8000de2:	485f      	ldr	r0, [pc, #380]	; (8000f60 <main+0x2a8>)
 8000de4:	f001 ffac 	bl	8002d40 <roll>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <main+0x2bc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d072      	beq.n	8000ed6 <main+0x21e>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000df0:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <main+0x2b0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <main+0x2a0>)
 8000df8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000dfc:	e9c7 2300 	strd	r2, r3, [r7]

			while (!Done){
 8000e00:	e055      	b.n	8000eae <main+0x1f6>

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000e02:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <main+0x2a0>)
 8000e04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e0c:	f7ff fa54 	bl	80002b8 <__aeabi_dsub>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff feb6 	bl	8000b88 <__aeabi_d2iz>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bfb8      	it	lt
 8000e22:	425b      	neglt	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb95 	bl	8000554 <__aeabi_i2d>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				roll(handler_Motor_Array,
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <main+0x27c>)
 8000e34:	ed93 7b00 	vldr	d7, [r3]
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <main+0x280>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4a3f      	ldr	r2, [pc, #252]	; (8000f3c <main+0x284>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000e44:	4a3e      	ldr	r2, [pc, #248]	; (8000f40 <main+0x288>)
 8000e46:	9204      	str	r2, [sp, #16]
 8000e48:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <main+0x28c>)
 8000e4a:	9203      	str	r2, [sp, #12]
 8000e4c:	4a3e      	ldr	r2, [pc, #248]	; (8000f48 <main+0x290>)
 8000e4e:	9202      	str	r2, [sp, #8]
 8000e50:	4a3e      	ldr	r2, [pc, #248]	; (8000f4c <main+0x294>)
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	eeb0 0a47 	vmov.f32	s0, s14
 8000e5a:	eef0 0a67 	vmov.f32	s1, s15
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <main+0x29c>)
 8000e60:	4a3d      	ldr	r2, [pc, #244]	; (8000f58 <main+0x2a0>)
 8000e62:	493e      	ldr	r1, [pc, #248]	; (8000f5c <main+0x2a4>)
 8000e64:	483e      	ldr	r0, [pc, #248]	; (8000f60 <main+0x2a8>)
 8000e66:	f001 ff6b 	bl	8002d40 <roll>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <main+0x29c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb70 	bl	8000554 <__aeabi_i2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e80:	f7ff fe44 	bl	8000b0c <__aeabi_dcmplt>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <main+0x1d6>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	461c      	mov	r4, r3
 8000e8e:	b2e3      	uxtb	r3, r4
 8000e90:	f083 0301 	eor.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <main+0x1f6>
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <main+0x2b0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2301      	moveq	r3, #1
 8000ea4:	2300      	movne	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x2b0>)
 8000eac:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <main+0x2b0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0a5      	beq.n	8000e02 <main+0x14a>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <main+0x2b0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <main+0x20c>
 8000ebe:	482b      	ldr	r0, [pc, #172]	; (8000f6c <main+0x2b4>)
 8000ec0:	f000 fb4c 	bl	800155c <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Done = RESET; // Reseteamos la bandera
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <main+0x2b0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		}

		if (flag_Astar){
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <main+0x274>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f43f af0b 	beq.w	8000cf6 <main+0x3e>

			if (rxData != '\0'){
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <main+0x2c0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 808e 	beq.w	8001006 <main+0x34e>

				if (rxData != '\r'){
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <main+0x2c0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b0d      	cmp	r3, #13
 8000ef0:	d04a      	beq.n	8000f88 <main+0x2d0>
					stringMatrix[stringRow][stringColumn] = rxData;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <main+0x2c4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <main+0x2c8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <main+0x2c0>)
 8000f00:	7819      	ldrb	r1, [r3, #0]
 8000f02:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <main+0x2cc>)
 8000f04:	2334      	movs	r3, #52	; 0x34
 8000f06:	fb04 f303 	mul.w	r3, r4, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4403      	add	r3, r0
 8000f0e:	460a      	mov	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
					stringColumn++;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <main+0x2c8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <main+0x2c8>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e03c      	b.n	8000f9a <main+0x2e2>
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	20001110 	.word	0x20001110
 8000f28:	3ddfaebc 	.word	0x3ddfaebc
 8000f2c:	20001023 	.word	0x20001023
 8000f30:	2000101d 	.word	0x2000101d
 8000f34:	20001100 	.word	0x20001100
 8000f38:	2000101a 	.word	0x2000101a
 8000f3c:	20001018 	.word	0x20001018
 8000f40:	20000504 	.word	0x20000504
 8000f44:	2000101f 	.word	0x2000101f
 8000f48:	2000101c 	.word	0x2000101c
 8000f4c:	2000101b 	.word	0x2000101b
 8000f50:	2000102c 	.word	0x2000102c
 8000f54:	20001048 	.word	0x20001048
 8000f58:	200010b0 	.word	0x200010b0
 8000f5c:	200003d0 	.word	0x200003d0
 8000f60:	200003e0 	.word	0x200003e0
 8000f64:	2000101e 	.word	0x2000101e
 8000f68:	20001022 	.word	0x20001022
 8000f6c:	0800e698 	.word	0x0800e698
 8000f70:	20001020 	.word	0x20001020
 8000f74:	20001021 	.word	0x20001021
 8000f78:	200004d6 	.word	0x200004d6
 8000f7c:	20001015 	.word	0x20001015
 8000f80:	20001014 	.word	0x20001014
 8000f84:	20000584 	.word	0x20000584
				}else{
					stringRow++;
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <main+0x3b8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <main+0x3b8>)
 8000f92:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <main+0x3bc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				}

				if (rxData == '@'){
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <main+0x3c0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b40      	cmp	r3, #64	; 0x40
 8000fa0:	d114      	bne.n	8000fcc <main+0x314>
					doneTransaction = SET;
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <main+0x3c4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <main+0x3b8>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <main+0x3bc>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	4932      	ldr	r1, [pc, #200]	; (8001080 <main+0x3c8>)
 8000fb6:	2234      	movs	r2, #52	; 0x34
 8000fb8:	fb00 f202 	mul.w	r2, r0, r2
 8000fbc:	440a      	add	r2, r1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <main+0x3bc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e019      	b.n	8001000 <main+0x348>

				}else if (rxData == 'z'){
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <main+0x3c0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b7a      	cmp	r3, #122	; 0x7a
 8000fd2:	d115      	bne.n	8001000 <main+0x348>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 8000fd4:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4829      	ldr	r0, [pc, #164]	; (8001080 <main+0x3c8>)
 8000fdc:	f007 fd5c 	bl	8008a98 <memset>
					stringRow    = 0;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <main+0x3b8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <main+0x3bc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8000fec:	4925      	ldr	r1, [pc, #148]	; (8001084 <main+0x3cc>)
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <main+0x3d0>)
 8000ff0:	f007 fb80 	bl	80086f4 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <main+0x3d4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <main+0x3d0>)
 8000ffc:	f007 fb7a 	bl	80086f4 <writeMsg>
				}

				rxData = '\0';
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <main+0x3c0>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]

			}

			// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
			if (doneTransaction){
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <main+0x3c4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f43f ae73 	beq.w	8000cf6 <main+0x3e>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <main+0x3d8>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <main+0x3dc>)
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <main+0x3e0>)
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <main+0x3e4>)
 800101c:	4920      	ldr	r1, [pc, #128]	; (80010a0 <main+0x3e8>)
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <main+0x3c8>)
 8001020:	f001 ffee 	bl	8003000 <findShorterWay>
 8001024:	4603      	mov	r3, r0
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <main+0x3ec>)
 800102a:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <main+0x3ec>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <main+0x388>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <main+0x3f0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <main+0x3d0>)
 800103c:	f007 fb5a 	bl	80086f4 <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8001040:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8001044:	2100      	movs	r1, #0
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <main+0x3c8>)
 8001048:	f007 fd26 	bl	8008a98 <memset>
				stringRow    = 0;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <main+0x3b8>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <main+0x3bc>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8001058:	490a      	ldr	r1, [pc, #40]	; (8001084 <main+0x3cc>)
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <main+0x3d0>)
 800105c:	f007 fb4a 	bl	80086f4 <writeMsg>

				flagAstar = RESET;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <main+0x3f4>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

				doneTransaction = RESET;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <main+0x3c4>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
		if (!flag_Astar){
 800106c:	e643      	b.n	8000cf6 <main+0x3e>
 800106e:	bf00      	nop
 8001070:	20001015 	.word	0x20001015
 8001074:	20001014 	.word	0x20001014
 8001078:	200004d6 	.word	0x200004d6
 800107c:	200004d5 	.word	0x200004d5
 8001080:	20000584 	.word	0x20000584
 8001084:	0800e6a0 	.word	0x0800e6a0
 8001088:	20000330 	.word	0x20000330
 800108c:	20000004 	.word	0x20000004
 8001090:	20011a00 	.word	0x20011a00
 8001094:	2000044c 	.word	0x2000044c
 8001098:	20000440 	.word	0x20000440
 800109c:	200011f0 	.word	0x200011f0
 80010a0:	20010f70 	.word	0x20010f70
 80010a4:	20001017 	.word	0x20001017
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20001016 	.word	0x20001016

080010b0 <inSystem>:
}




void inSystem (void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80010b4:	4bae      	ldr	r3, [pc, #696]	; (8001370 <inSystem+0x2c0>)
 80010b6:	4aaf      	ldr	r2, [pc, #700]	; (8001374 <inSystem+0x2c4>)
 80010b8:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80010ba:	4bad      	ldr	r3, [pc, #692]	; (8001370 <inSystem+0x2c0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010c0:	4bab      	ldr	r3, [pc, #684]	; (8001370 <inSystem+0x2c0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80010c6:	4baa      	ldr	r3, [pc, #680]	; (8001370 <inSystem+0x2c0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <inSystem+0x2c0>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010d2:	4ba7      	ldr	r3, [pc, #668]	; (8001370 <inSystem+0x2c0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <inSystem+0x2c0>)
 80010da:	2202      	movs	r2, #2
 80010dc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80010de:	48a4      	ldr	r0, [pc, #656]	; (8001370 <inSystem+0x2c0>)
 80010e0:	f005 fadc 	bl	800669c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80010e4:	2101      	movs	r1, #1
 80010e6:	48a2      	ldr	r0, [pc, #648]	; (8001370 <inSystem+0x2c0>)
 80010e8:	f005 fc02 	bl	80068f0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 80010ec:	4ba2      	ldr	r3, [pc, #648]	; (8001378 <inSystem+0x2c8>)
 80010ee:	4aa3      	ldr	r2, [pc, #652]	; (800137c <inSystem+0x2cc>)
 80010f0:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80010f2:	4ba1      	ldr	r3, [pc, #644]	; (8001378 <inSystem+0x2c8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80010f8:	4b9f      	ldr	r3, [pc, #636]	; (8001378 <inSystem+0x2c8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80010fe:	4b9e      	ldr	r3, [pc, #632]	; (8001378 <inSystem+0x2c8>)
 8001100:	f242 7210 	movw	r2, #10000	; 0x2710
 8001104:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8001106:	4b9c      	ldr	r3, [pc, #624]	; (8001378 <inSystem+0x2c8>)
 8001108:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800110c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 800110e:	489a      	ldr	r0, [pc, #616]	; (8001378 <inSystem+0x2c8>)
 8001110:	f003 fe90 	bl	8004e34 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8001114:	4898      	ldr	r0, [pc, #608]	; (8001378 <inSystem+0x2c8>)
 8001116:	f004 fa51 	bl	80055bc <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 800111a:	f003 fe6f 	bl	8004dfc <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 800111e:	4b98      	ldr	r3, [pc, #608]	; (8001380 <inSystem+0x2d0>)
 8001120:	4a98      	ldr	r2, [pc, #608]	; (8001384 <inSystem+0x2d4>)
 8001122:	4999      	ldr	r1, [pc, #612]	; (8001388 <inSystem+0x2d8>)
 8001124:	4899      	ldr	r0, [pc, #612]	; (800138c <inSystem+0x2dc>)
 8001126:	f001 fa19 	bl	800255c <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800112a:	4b99      	ldr	r3, [pc, #612]	; (8001390 <inSystem+0x2e0>)
 800112c:	4a91      	ldr	r2, [pc, #580]	; (8001374 <inSystem+0x2c4>)
 800112e:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001130:	4b97      	ldr	r3, [pc, #604]	; (8001390 <inSystem+0x2e0>)
 8001132:	2202      	movs	r2, #2
 8001134:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001136:	4b96      	ldr	r3, [pc, #600]	; (8001390 <inSystem+0x2e0>)
 8001138:	2202      	movs	r2, #2
 800113a:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800113c:	4b94      	ldr	r3, [pc, #592]	; (8001390 <inSystem+0x2e0>)
 800113e:	2200      	movs	r2, #0
 8001140:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001142:	4b93      	ldr	r3, [pc, #588]	; (8001390 <inSystem+0x2e0>)
 8001144:	2200      	movs	r2, #0
 8001146:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001148:	4b91      	ldr	r3, [pc, #580]	; (8001390 <inSystem+0x2e0>)
 800114a:	2200      	movs	r2, #0
 800114c:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800114e:	4b90      	ldr	r3, [pc, #576]	; (8001390 <inSystem+0x2e0>)
 8001150:	2202      	movs	r2, #2
 8001152:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001154:	488e      	ldr	r0, [pc, #568]	; (8001390 <inSystem+0x2e0>)
 8001156:	f005 faa1 	bl	800669c <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 800115a:	4b8e      	ldr	r3, [pc, #568]	; (8001394 <inSystem+0x2e4>)
 800115c:	4a8e      	ldr	r2, [pc, #568]	; (8001398 <inSystem+0x2e8>)
 800115e:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001160:	4b8c      	ldr	r3, [pc, #560]	; (8001394 <inSystem+0x2e4>)
 8001162:	2200      	movs	r2, #0
 8001164:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001166:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <inSystem+0x2e4>)
 8001168:	4a8c      	ldr	r2, [pc, #560]	; (800139c <inSystem+0x2ec>)
 800116a:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 800116c:	4989      	ldr	r1, [pc, #548]	; (8001394 <inSystem+0x2e4>)
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <inSystem+0x2f0>)
 8001174:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001178:	4b86      	ldr	r3, [pc, #536]	; (8001394 <inSystem+0x2e4>)
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 800117e:	4b85      	ldr	r3, [pc, #532]	; (8001394 <inSystem+0x2e4>)
 8001180:	2201      	movs	r2, #1
 8001182:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001184:	4b83      	ldr	r3, [pc, #524]	; (8001394 <inSystem+0x2e4>)
 8001186:	2201      	movs	r2, #1
 8001188:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 800118a:	4882      	ldr	r0, [pc, #520]	; (8001394 <inSystem+0x2e4>)
 800118c:	f005 fe4a 	bl	8006e24 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001190:	4880      	ldr	r0, [pc, #512]	; (8001394 <inSystem+0x2e4>)
 8001192:	f005 ff31 	bl	8006ff8 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001196:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <inSystem+0x2f4>)
 8001198:	4a76      	ldr	r2, [pc, #472]	; (8001374 <inSystem+0x2c4>)
 800119a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800119c:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <inSystem+0x2f4>)
 800119e:	2202      	movs	r2, #2
 80011a0:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011a2:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <inSystem+0x2f4>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011a8:	4b7e      	ldr	r3, [pc, #504]	; (80013a4 <inSystem+0x2f4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80011ae:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <inSystem+0x2f4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011b4:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <inSystem+0x2f4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011ba:	4b7a      	ldr	r3, [pc, #488]	; (80013a4 <inSystem+0x2f4>)
 80011bc:	2202      	movs	r2, #2
 80011be:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80011c0:	4878      	ldr	r0, [pc, #480]	; (80013a4 <inSystem+0x2f4>)
 80011c2:	f005 fa6b 	bl	800669c <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80011c6:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <inSystem+0x2f8>)
 80011c8:	4a73      	ldr	r2, [pc, #460]	; (8001398 <inSystem+0x2e8>)
 80011ca:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80011cc:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <inSystem+0x2f8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <inSystem+0x2f8>)
 80011d4:	4a71      	ldr	r2, [pc, #452]	; (800139c <inSystem+0x2ec>)
 80011d6:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80011d8:	4973      	ldr	r1, [pc, #460]	; (80013a8 <inSystem+0x2f8>)
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b70      	ldr	r3, [pc, #448]	; (80013a0 <inSystem+0x2f0>)
 80011e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <inSystem+0x2f8>)
 80011e6:	2264      	movs	r2, #100	; 0x64
 80011e8:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80011ea:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <inSystem+0x2f8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80011f0:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <inSystem+0x2f8>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80011f6:	486c      	ldr	r0, [pc, #432]	; (80013a8 <inSystem+0x2f8>)
 80011f8:	f005 fe14 	bl	8006e24 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80011fc:	486a      	ldr	r0, [pc, #424]	; (80013a8 <inSystem+0x2f8>)
 80011fe:	f005 fefb 	bl	8006ff8 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8001202:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <inSystem+0x2fc>)
 8001204:	4a6a      	ldr	r2, [pc, #424]	; (80013b0 <inSystem+0x300>)
 8001206:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <inSystem+0x2fc>)
 800120a:	2200      	movs	r2, #0
 800120c:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <inSystem+0x2fc>)
 8001210:	2201      	movs	r2, #1
 8001212:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <inSystem+0x2fc>)
 8001216:	220a      	movs	r2, #10
 8001218:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800121a:	4b64      	ldr	r3, [pc, #400]	; (80013ac <inSystem+0x2fc>)
 800121c:	2200      	movs	r2, #0
 800121e:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001220:	4b62      	ldr	r3, [pc, #392]	; (80013ac <inSystem+0x2fc>)
 8001222:	2200      	movs	r2, #0
 8001224:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001226:	4b61      	ldr	r3, [pc, #388]	; (80013ac <inSystem+0x2fc>)
 8001228:	2202      	movs	r2, #2
 800122a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 800122c:	485f      	ldr	r0, [pc, #380]	; (80013ac <inSystem+0x2fc>)
 800122e:	f005 fa35 	bl	800669c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001232:	2100      	movs	r1, #0
 8001234:	485d      	ldr	r0, [pc, #372]	; (80013ac <inSystem+0x2fc>)
 8001236:	f005 fb86 	bl	8006946 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800123a:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <inSystem+0x304>)
 800123c:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <inSystem+0x300>)
 800123e:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001240:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <inSystem+0x304>)
 8001242:	2200      	movs	r2, #0
 8001244:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <inSystem+0x304>)
 8001248:	2201      	movs	r2, #1
 800124a:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <inSystem+0x304>)
 800124e:	220b      	movs	r2, #11
 8001250:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001252:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <inSystem+0x304>)
 8001254:	2200      	movs	r2, #0
 8001256:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <inSystem+0x304>)
 800125a:	2200      	movs	r2, #0
 800125c:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <inSystem+0x304>)
 8001260:	2202      	movs	r2, #2
 8001262:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001264:	4853      	ldr	r0, [pc, #332]	; (80013b4 <inSystem+0x304>)
 8001266:	f005 fa19 	bl	800669c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800126a:	2100      	movs	r1, #0
 800126c:	4851      	ldr	r0, [pc, #324]	; (80013b4 <inSystem+0x304>)
 800126e:	f005 fb6a 	bl	8006946 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <inSystem+0x308>)
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <inSystem+0x300>)
 8001276:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <inSystem+0x308>)
 800127a:	2200      	movs	r2, #0
 800127c:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <inSystem+0x308>)
 8001280:	2201      	movs	r2, #1
 8001282:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001284:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <inSystem+0x308>)
 8001286:	220c      	movs	r2, #12
 8001288:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800128a:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <inSystem+0x308>)
 800128c:	2200      	movs	r2, #0
 800128e:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001290:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <inSystem+0x308>)
 8001292:	2200      	movs	r2, #0
 8001294:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <inSystem+0x308>)
 8001298:	2202      	movs	r2, #2
 800129a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <inSystem+0x308>)
 800129e:	f005 f9fd 	bl	800669c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 80012a2:	2100      	movs	r1, #0
 80012a4:	4844      	ldr	r0, [pc, #272]	; (80013b8 <inSystem+0x308>)
 80012a6:	f005 fb4e 	bl	8006946 <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <inSystem+0x2dc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2201      	movs	r2, #1
 80012b0:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 80012b2:	4b42      	ldr	r3, [pc, #264]	; (80013bc <inSystem+0x30c>)
 80012b4:	4a42      	ldr	r2, [pc, #264]	; (80013c0 <inSystem+0x310>)
 80012b6:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <inSystem+0x30c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <inSystem+0x30c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <inSystem+0x30c>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <inSystem+0x30c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012d0:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <inSystem+0x30c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <inSystem+0x30c>)
 80012d8:	2202      	movs	r2, #2
 80012da:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80012dc:	4837      	ldr	r0, [pc, #220]	; (80013bc <inSystem+0x30c>)
 80012de:	f005 f9dd 	bl	800669c <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80012e2:	2100      	movs	r1, #0
 80012e4:	4835      	ldr	r0, [pc, #212]	; (80013bc <inSystem+0x30c>)
 80012e6:	f005 fb2e 	bl	8006946 <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <inSystem+0x2dc>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <inSystem+0x314>)
 80012f4:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <inSystem+0x300>)
 80012f6:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <inSystem+0x314>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <inSystem+0x314>)
 8001300:	2200      	movs	r2, #0
 8001302:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <inSystem+0x314>)
 8001306:	2201      	movs	r2, #1
 8001308:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <inSystem+0x314>)
 800130c:	2200      	movs	r2, #0
 800130e:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <inSystem+0x314>)
 8001312:	2200      	movs	r2, #0
 8001314:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <inSystem+0x314>)
 8001318:	2202      	movs	r2, #2
 800131a:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <inSystem+0x318>)
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <inSystem+0x314>)
 8001320:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <inSystem+0x318>)
 8001324:	2202      	movs	r2, #2
 8001326:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001328:	4827      	ldr	r0, [pc, #156]	; (80013c8 <inSystem+0x318>)
 800132a:	f004 f989 	bl	8005640 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <inSystem+0x31c>)
 8001330:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <inSystem+0x300>)
 8001332:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <inSystem+0x31c>)
 8001336:	2200      	movs	r2, #0
 8001338:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <inSystem+0x31c>)
 800133c:	2200      	movs	r2, #0
 800133e:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <inSystem+0x31c>)
 8001342:	2203      	movs	r2, #3
 8001344:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <inSystem+0x31c>)
 8001348:	2200      	movs	r2, #0
 800134a:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <inSystem+0x31c>)
 800134e:	2200      	movs	r2, #0
 8001350:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <inSystem+0x31c>)
 8001354:	2202      	movs	r2, #2
 8001356:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <inSystem+0x320>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <inSystem+0x31c>)
 800135c:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <inSystem+0x320>)
 8001360:	2202      	movs	r2, #2
 8001362:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <inSystem+0x320>)
 8001366:	f004 f96b 	bl	8005640 <extInt_Config>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <inSystem+0x324>)
 800136c:	e034      	b.n	80013d8 <inSystem+0x328>
 800136e:	bf00      	nop
 8001370:	20000204 	.word	0x20000204
 8001374:	40020000 	.word	0x40020000
 8001378:	200002b0 	.word	0x200002b0
 800137c:	40000400 	.word	0x40000400
 8001380:	2000102c 	.word	0x2000102c
 8001384:	20001048 	.word	0x20001048
 8001388:	200010b0 	.word	0x200010b0
 800138c:	200003e0 	.word	0x200003e0
 8001390:	20000210 	.word	0x20000210
 8001394:	200002f0 	.word	0x200002f0
 8001398:	40000c00 	.word	0x40000c00
 800139c:	41e00000 	.word	0x41e00000
 80013a0:	40408000 	.word	0x40408000
 80013a4:	2000021c 	.word	0x2000021c
 80013a8:	20000310 	.word	0x20000310
 80013ac:	2000024c 	.word	0x2000024c
 80013b0:	40020800 	.word	0x40020800
 80013b4:	20000240 	.word	0x20000240
 80013b8:	20000264 	.word	0x20000264
 80013bc:	20000258 	.word	0x20000258
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	20000270 	.word	0x20000270
 80013c8:	200002a0 	.word	0x200002a0
 80013cc:	2000027c 	.word	0x2000027c
 80013d0:	200002a8 	.word	0x200002a8
 80013d4:	20000234 	.word	0x20000234
 80013d8:	4a53      	ldr	r2, [pc, #332]	; (8001528 <inSystem+0x478>)
 80013da:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <inSystem+0x47c>)
 80013de:	2207      	movs	r2, #7
 80013e0:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013e2:	4b52      	ldr	r3, [pc, #328]	; (800152c <inSystem+0x47c>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <inSystem+0x47c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <inSystem+0x47c>)
 80013f0:	2209      	movs	r2, #9
 80013f2:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f4:	4b4d      	ldr	r3, [pc, #308]	; (800152c <inSystem+0x47c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <inSystem+0x47c>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001400:	484a      	ldr	r0, [pc, #296]	; (800152c <inSystem+0x47c>)
 8001402:	f005 f94b 	bl	800669c <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <inSystem+0x480>)
 8001408:	4a47      	ldr	r2, [pc, #284]	; (8001528 <inSystem+0x478>)
 800140a:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <inSystem+0x480>)
 800140e:	2207      	movs	r2, #7
 8001410:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <inSystem+0x480>)
 8001414:	2202      	movs	r2, #2
 8001416:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <inSystem+0x480>)
 800141a:	2200      	movs	r2, #0
 800141c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <inSystem+0x480>)
 8001420:	220a      	movs	r2, #10
 8001422:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <inSystem+0x480>)
 8001426:	2200      	movs	r2, #0
 8001428:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <inSystem+0x480>)
 800142c:	2203      	movs	r2, #3
 800142e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001430:	483f      	ldr	r0, [pc, #252]	; (8001530 <inSystem+0x480>)
 8001432:	f005 f933 	bl	800669c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <inSystem+0x484>)
 8001438:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <inSystem+0x488>)
 800143a:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <inSystem+0x484>)
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <inSystem+0x48c>)
 8001440:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <inSystem+0x484>)
 8001444:	2201      	movs	r2, #1
 8001446:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <inSystem+0x484>)
 800144a:	2201      	movs	r2, #1
 800144c:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <inSystem+0x484>)
 8001450:	2200      	movs	r2, #0
 8001452:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <inSystem+0x484>)
 8001456:	2202      	movs	r2, #2
 8001458:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <inSystem+0x484>)
 800145c:	2200      	movs	r2, #0
 800145e:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <inSystem+0x484>)
 8001462:	2200      	movs	r2, #0
 8001464:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <inSystem+0x484>)
 8001468:	2200      	movs	r2, #0
 800146a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800146c:	4831      	ldr	r0, [pc, #196]	; (8001534 <inSystem+0x484>)
 800146e:	f006 fd53 	bl	8007f18 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <inSystem+0x490>)
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <inSystem+0x490>)
 800147c:	2201      	movs	r2, #1
 800147e:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <inSystem+0x490>)
 8001482:	2200      	movs	r2, #0
 8001484:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <inSystem+0x490>)
 8001488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148c:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <inSystem+0x490>)
 8001490:	2210      	movs	r2, #16
 8001492:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001494:	482a      	ldr	r0, [pc, #168]	; (8001540 <inSystem+0x490>)
 8001496:	f003 fccd 	bl	8004e34 <BasicTimer_Config>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <inSystem+0x494>)
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <inSystem+0x498>)
 800149e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <inSystem+0x494>)
 80014a2:	2204      	movs	r2, #4
 80014a4:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <inSystem+0x494>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <inSystem+0x494>)
 80014ae:	2208      	movs	r2, #8
 80014b0:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <inSystem+0x494>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <inSystem+0x494>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <inSystem+0x494>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <inSystem+0x49c>)
 80014c6:	4a20      	ldr	r2, [pc, #128]	; (8001548 <inSystem+0x498>)
 80014c8:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <inSystem+0x49c>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <inSystem+0x49c>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <inSystem+0x49c>)
 80014d8:	2209      	movs	r2, #9
 80014da:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <inSystem+0x49c>)
 80014de:	2201      	movs	r2, #1
 80014e0:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <inSystem+0x49c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <inSystem+0x49c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <inSystem+0x4a0>)
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <inSystem+0x4a4>)
 80014f2:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <inSystem+0x4a0>)
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <inSystem+0x4a0>)
 80014fc:	2268      	movs	r2, #104	; 0x68
 80014fe:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <inSystem+0x4a0>)
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <inSystem+0x4a8>)
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <inSystem+0x494>)
 800150a:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <inSystem+0x4a8>)
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <inSystem+0x49c>)
 8001510:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <inSystem+0x4a8>)
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <inSystem+0x4a0>)
 8001516:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <inSystem+0x4a8>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <inSystem+0x4a8>)
 8001520:	2200      	movs	r2, #0
 8001522:	705a      	strb	r2, [r3, #1]
//	configMPUAccel(&handler_MPUAccel_6050);

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020000 	.word	0x40020000
 800152c:	20000234 	.word	0x20000234
 8001530:	20000228 	.word	0x20000228
 8001534:	20000330 	.word	0x20000330
 8001538:	40011000 	.word	0x40011000
 800153c:	05f5e100 	.word	0x05f5e100
 8001540:	200002c4 	.word	0x200002c4
 8001544:	20000288 	.word	0x20000288
 8001548:	40020400 	.word	0x40020400
 800154c:	20000294 	.word	0x20000294
 8001550:	200003c4 	.word	0x200003c4
 8001554:	40005400 	.word	0x40005400
 8001558:	200003d0 	.word	0x200003d0

0800155c <parseCommands>:


void parseCommands(char *stringVector){
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af04      	add	r7, sp, #16
 8001562:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001564:	4b9e      	ldr	r3, [pc, #632]	; (80017e0 <parseCommands+0x284>)
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	4b9e      	ldr	r3, [pc, #632]	; (80017e4 <parseCommands+0x288>)
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	4b9e      	ldr	r3, [pc, #632]	; (80017e8 <parseCommands+0x28c>)
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <parseCommands+0x290>)
 8001572:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <parseCommands+0x294>)
 8001574:	499f      	ldr	r1, [pc, #636]	; (80017f4 <parseCommands+0x298>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f008 f810 	bl	800959c <siscanf>


	if (strcmp(cmd, "help") == 0){
 800157c:	499e      	ldr	r1, [pc, #632]	; (80017f8 <parseCommands+0x29c>)
 800157e:	489c      	ldr	r0, [pc, #624]	; (80017f0 <parseCommands+0x294>)
 8001580:	f7fe fe2e 	bl	80001e0 <strcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d128      	bne.n	80015dc <parseCommands+0x80>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 800158a:	499c      	ldr	r1, [pc, #624]	; (80017fc <parseCommands+0x2a0>)
 800158c:	489c      	ldr	r0, [pc, #624]	; (8001800 <parseCommands+0x2a4>)
 800158e:	f007 f8b1 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 8001592:	499c      	ldr	r1, [pc, #624]	; (8001804 <parseCommands+0x2a8>)
 8001594:	489a      	ldr	r0, [pc, #616]	; (8001800 <parseCommands+0x2a4>)
 8001596:	f007 f8ad 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 800159a:	499b      	ldr	r1, [pc, #620]	; (8001808 <parseCommands+0x2ac>)
 800159c:	4898      	ldr	r0, [pc, #608]	; (8001800 <parseCommands+0x2a4>)
 800159e:	f007 f8a9 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 80015a2:	499a      	ldr	r1, [pc, #616]	; (800180c <parseCommands+0x2b0>)
 80015a4:	4896      	ldr	r0, [pc, #600]	; (8001800 <parseCommands+0x2a4>)
 80015a6:	f007 f8a5 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 80015aa:	4999      	ldr	r1, [pc, #612]	; (8001810 <parseCommands+0x2b4>)
 80015ac:	4894      	ldr	r0, [pc, #592]	; (8001800 <parseCommands+0x2a4>)
 80015ae:	f007 f8a1 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 80015b2:	4998      	ldr	r1, [pc, #608]	; (8001814 <parseCommands+0x2b8>)
 80015b4:	4892      	ldr	r0, [pc, #584]	; (8001800 <parseCommands+0x2a4>)
 80015b6:	f007 f89d 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "6)  square #dir_roll #side_distance  \n");
 80015ba:	4997      	ldr	r1, [pc, #604]	; (8001818 <parseCommands+0x2bc>)
 80015bc:	4890      	ldr	r0, [pc, #576]	; (8001800 <parseCommands+0x2a4>)
 80015be:	f007 f899 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "7)  Astar  \n");
 80015c2:	4996      	ldr	r1, [pc, #600]	; (800181c <parseCommands+0x2c0>)
 80015c4:	488e      	ldr	r0, [pc, #568]	; (8001800 <parseCommands+0x2a4>)
 80015c6:	f007 f895 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, "8)  reinit  \n");
 80015ca:	4995      	ldr	r1, [pc, #596]	; (8001820 <parseCommands+0x2c4>)
 80015cc:	488c      	ldr	r0, [pc, #560]	; (8001800 <parseCommands+0x2a4>)
 80015ce:	f007 f891 	bl	80086f4 <writeMsg>
		writeMsg(&handlerUSART, " \n");
 80015d2:	4994      	ldr	r1, [pc, #592]	; (8001824 <parseCommands+0x2c8>)
 80015d4:	488a      	ldr	r0, [pc, #552]	; (8001800 <parseCommands+0x2a4>)
 80015d6:	f007 f88d 	bl	80086f4 <writeMsg>
	else {
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
	}


}
 80015da:	e0fc      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "go") == 0){
 80015dc:	4992      	ldr	r1, [pc, #584]	; (8001828 <parseCommands+0x2cc>)
 80015de:	4884      	ldr	r0, [pc, #528]	; (80017f0 <parseCommands+0x294>)
 80015e0:	f7fe fdfe 	bl	80001e0 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11b      	bne.n	8001622 <parseCommands+0xc6>
		Mode_dir.Mode = Mode = sLine;
 80015ea:	4b90      	ldr	r3, [pc, #576]	; (800182c <parseCommands+0x2d0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	4b8e      	ldr	r3, [pc, #568]	; (800182c <parseCommands+0x2d0>)
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b8e      	ldr	r3, [pc, #568]	; (8001830 <parseCommands+0x2d4>)
 80015f6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80015f8:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <parseCommands+0x290>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <parseCommands+0x2d4>)
 8001600:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <parseCommands+0x2d4>)
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	488b      	ldr	r0, [pc, #556]	; (8001834 <parseCommands+0x2d8>)
 8001608:	f000 fdc2 	bl	8002190 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800160c:	488a      	ldr	r0, [pc, #552]	; (8001838 <parseCommands+0x2dc>)
 800160e:	f003 ffd5 	bl	80055bc <startTimer>
		flag_Go_Straigh = SET;
 8001612:	4b8a      	ldr	r3, [pc, #552]	; (800183c <parseCommands+0x2e0>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 8001618:	4989      	ldr	r1, [pc, #548]	; (8001840 <parseCommands+0x2e4>)
 800161a:	4879      	ldr	r0, [pc, #484]	; (8001800 <parseCommands+0x2a4>)
 800161c:	f007 f86a 	bl	80086f4 <writeMsg>
}
 8001620:	e0d9      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "goto") == 0){
 8001622:	4988      	ldr	r1, [pc, #544]	; (8001844 <parseCommands+0x2e8>)
 8001624:	4872      	ldr	r0, [pc, #456]	; (80017f0 <parseCommands+0x294>)
 8001626:	f7fe fddb 	bl	80001e0 <strcmp>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d120      	bne.n	8001672 <parseCommands+0x116>
		Mode_dir.Mode = Mode = sLine ;
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <parseCommands+0x2d0>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	4b7d      	ldr	r3, [pc, #500]	; (800182c <parseCommands+0x2d0>)
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <parseCommands+0x2d4>)
 800163c:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800163e:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <parseCommands+0x290>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b7a      	ldr	r3, [pc, #488]	; (8001830 <parseCommands+0x2d4>)
 8001646:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <parseCommands+0x2d4>)
 800164a:	6819      	ldr	r1, [r3, #0]
 800164c:	4879      	ldr	r0, [pc, #484]	; (8001834 <parseCommands+0x2d8>)
 800164e:	f000 fd9f 	bl	8002190 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001652:	4879      	ldr	r0, [pc, #484]	; (8001838 <parseCommands+0x2dc>)
 8001654:	f003 ffb2 	bl	80055bc <startTimer>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 8001658:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <parseCommands+0x28c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <parseCommands+0x2ec>)
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <parseCommands+0x2f0>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 8001668:	4979      	ldr	r1, [pc, #484]	; (8001850 <parseCommands+0x2f4>)
 800166a:	4865      	ldr	r0, [pc, #404]	; (8001800 <parseCommands+0x2a4>)
 800166c:	f007 f842 	bl	80086f4 <writeMsg>
}
 8001670:	e0b1      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "roll") == 0){
 8001672:	4978      	ldr	r1, [pc, #480]	; (8001854 <parseCommands+0x2f8>)
 8001674:	485e      	ldr	r0, [pc, #376]	; (80017f0 <parseCommands+0x294>)
 8001676:	f7fe fdb3 	bl	80001e0 <strcmp>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11b      	bne.n	80016b8 <parseCommands+0x15c>
		Mode_dir.Mode = Mode = sRoll;
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <parseCommands+0x2d0>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	4b69      	ldr	r3, [pc, #420]	; (800182c <parseCommands+0x2d0>)
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	4b69      	ldr	r3, [pc, #420]	; (8001830 <parseCommands+0x2d4>)
 800168c:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800168e:	4b57      	ldr	r3, [pc, #348]	; (80017ec <parseCommands+0x290>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <parseCommands+0x2d4>)
 8001696:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001698:	4b65      	ldr	r3, [pc, #404]	; (8001830 <parseCommands+0x2d4>)
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	4865      	ldr	r0, [pc, #404]	; (8001834 <parseCommands+0x2d8>)
 800169e:	f000 fd77 	bl	8002190 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80016a2:	4865      	ldr	r0, [pc, #404]	; (8001838 <parseCommands+0x2dc>)
 80016a4:	f003 ff8a 	bl	80055bc <startTimer>
		flag_Roll = SET;
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <parseCommands+0x2fc>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 80016ae:	496b      	ldr	r1, [pc, #428]	; (800185c <parseCommands+0x300>)
 80016b0:	4853      	ldr	r0, [pc, #332]	; (8001800 <parseCommands+0x2a4>)
 80016b2:	f007 f81f 	bl	80086f4 <writeMsg>
}
 80016b6:	e08e      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "rollto") == 0){
 80016b8:	4969      	ldr	r1, [pc, #420]	; (8001860 <parseCommands+0x304>)
 80016ba:	484d      	ldr	r0, [pc, #308]	; (80017f0 <parseCommands+0x294>)
 80016bc:	f7fe fd90 	bl	80001e0 <strcmp>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d120      	bne.n	8001708 <parseCommands+0x1ac>
		Mode_dir.Mode = Mode = sRoll;
 80016c6:	4b59      	ldr	r3, [pc, #356]	; (800182c <parseCommands+0x2d0>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <parseCommands+0x2d0>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <parseCommands+0x2d4>)
 80016d2:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <parseCommands+0x290>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <parseCommands+0x2d4>)
 80016dc:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <parseCommands+0x2d4>)
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	4854      	ldr	r0, [pc, #336]	; (8001834 <parseCommands+0x2d8>)
 80016e4:	f000 fd54 	bl	8002190 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80016e8:	4853      	ldr	r0, [pc, #332]	; (8001838 <parseCommands+0x2dc>)
 80016ea:	f003 ff67 	bl	80055bc <startTimer>
		parameters_Path_Robot.angle = secondParameter;
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <parseCommands+0x28c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <parseCommands+0x2ec>)
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
		flag_RollTo = SET;
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <parseCommands+0x308>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 80016fe:	495a      	ldr	r1, [pc, #360]	; (8001868 <parseCommands+0x30c>)
 8001700:	483f      	ldr	r0, [pc, #252]	; (8001800 <parseCommands+0x2a4>)
 8001702:	f006 fff7 	bl	80086f4 <writeMsg>
}
 8001706:	e066      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "reinit") == 0){
 8001708:	4958      	ldr	r1, [pc, #352]	; (800186c <parseCommands+0x310>)
 800170a:	4839      	ldr	r0, [pc, #228]	; (80017f0 <parseCommands+0x294>)
 800170c:	f7fe fd68 	bl	80001e0 <strcmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10a      	bne.n	800172c <parseCommands+0x1d0>
		int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <parseCommands+0x314>)
 8001718:	4a4b      	ldr	r2, [pc, #300]	; (8001848 <parseCommands+0x2ec>)
 800171a:	4956      	ldr	r1, [pc, #344]	; (8001874 <parseCommands+0x318>)
 800171c:	4845      	ldr	r0, [pc, #276]	; (8001834 <parseCommands+0x2d8>)
 800171e:	f000 ff1d 	bl	800255c <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001722:	4955      	ldr	r1, [pc, #340]	; (8001878 <parseCommands+0x31c>)
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <parseCommands+0x2a4>)
 8001726:	f006 ffe5 	bl	80086f4 <writeMsg>
}
 800172a:	e054      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "change") == 0){
 800172c:	4953      	ldr	r1, [pc, #332]	; (800187c <parseCommands+0x320>)
 800172e:	4830      	ldr	r0, [pc, #192]	; (80017f0 <parseCommands+0x294>)
 8001730:	f7fe fd56 	bl	80001e0 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d121      	bne.n	800177e <parseCommands+0x222>
		if (Mode == sLine ){
 800173a:	4b3c      	ldr	r3, [pc, #240]	; (800182c <parseCommands+0x2d0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <parseCommands+0x1fc>
			Mode_dir.direction_s_r = firstParameter;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <parseCommands+0x290>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b39      	ldr	r3, [pc, #228]	; (8001830 <parseCommands+0x2d4>)
 800174a:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <parseCommands+0x2d4>)
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	4838      	ldr	r0, [pc, #224]	; (8001834 <parseCommands+0x2d8>)
 8001752:	f000 fe08 	bl	8002366 <change_dir_straigh_Roll>
 8001756:	e00d      	b.n	8001774 <parseCommands+0x218>
		}else if (Mode == sRoll ){
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <parseCommands+0x2d0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <parseCommands+0x218>
			Mode_dir.direction_s_r = firstParameter;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <parseCommands+0x290>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <parseCommands+0x2d4>)
 8001768:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <parseCommands+0x2d4>)
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	4831      	ldr	r0, [pc, #196]	; (8001834 <parseCommands+0x2d8>)
 8001770:	f000 fdf9 	bl	8002366 <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001774:	4940      	ldr	r1, [pc, #256]	; (8001878 <parseCommands+0x31c>)
 8001776:	4822      	ldr	r0, [pc, #136]	; (8001800 <parseCommands+0x2a4>)
 8001778:	f006 ffbc 	bl	80086f4 <writeMsg>
}
 800177c:	e02b      	b.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "square") == 0){
 800177e:	4940      	ldr	r1, [pc, #256]	; (8001880 <parseCommands+0x324>)
 8001780:	481b      	ldr	r0, [pc, #108]	; (80017f0 <parseCommands+0x294>)
 8001782:	f7fe fd2d 	bl	80001e0 <strcmp>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d024      	beq.n	80017d6 <parseCommands+0x27a>
	}else if (strcmp(cmd, "Astar") == 0){
 800178c:	493d      	ldr	r1, [pc, #244]	; (8001884 <parseCommands+0x328>)
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <parseCommands+0x294>)
 8001790:	f7fe fd26 	bl	80001e0 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01d      	beq.n	80017d6 <parseCommands+0x27a>
	else if (strcmp(cmd, "stop") == 0){
 800179a:	493b      	ldr	r1, [pc, #236]	; (8001888 <parseCommands+0x32c>)
 800179c:	4814      	ldr	r0, [pc, #80]	; (80017f0 <parseCommands+0x294>)
 800179e:	f7fe fd1f 	bl	80001e0 <strcmp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d112      	bne.n	80017ce <parseCommands+0x272>
		stop(handler_Motor_Array); // Apagamos los motores
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <parseCommands+0x2d8>)
 80017aa:	f000 feb3 	bl	8002514 <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <parseCommands+0x2dc>)
 80017b0:	f003 ff16 	bl	80055e0 <stopTimer>
		flag_Go_Straigh   = RESET;
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <parseCommands+0x2e0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <parseCommands+0x2f0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <parseCommands+0x2fc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <parseCommands+0x308>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
}
 80017cc:	e003      	b.n	80017d6 <parseCommands+0x27a>
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
 80017ce:	492f      	ldr	r1, [pc, #188]	; (800188c <parseCommands+0x330>)
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <parseCommands+0x2a4>)
 80017d2:	f006 ff8f 	bl	80086f4 <writeMsg>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000544 	.word	0x20000544
 80017e4:	20000500 	.word	0x20000500
 80017e8:	200004fc 	.word	0x200004fc
 80017ec:	200004f8 	.word	0x200004f8
 80017f0:	200004d8 	.word	0x200004d8
 80017f4:	0800e6c0 	.word	0x0800e6c0
 80017f8:	0800e6d0 	.word	0x0800e6d0
 80017fc:	0800e6d8 	.word	0x0800e6d8
 8001800:	20000330 	.word	0x20000330
 8001804:	0800e6ec 	.word	0x0800e6ec
 8001808:	0800e714 	.word	0x0800e714
 800180c:	0800e730 	.word	0x0800e730
 8001810:	0800e758 	.word	0x0800e758
 8001814:	0800e778 	.word	0x0800e778
 8001818:	0800e7ac 	.word	0x0800e7ac
 800181c:	0800e7d4 	.word	0x0800e7d4
 8001820:	0800e7e4 	.word	0x0800e7e4
 8001824:	0800e7f4 	.word	0x0800e7f4
 8001828:	0800e7f8 	.word	0x0800e7f8
 800182c:	2000101a 	.word	0x2000101a
 8001830:	20001018 	.word	0x20001018
 8001834:	200003e0 	.word	0x200003e0
 8001838:	200002c4 	.word	0x200002c4
 800183c:	2000101d 	.word	0x2000101d
 8001840:	0800e7fc 	.word	0x0800e7fc
 8001844:	0800e81c 	.word	0x0800e81c
 8001848:	20001048 	.word	0x20001048
 800184c:	2000101e 	.word	0x2000101e
 8001850:	0800e824 	.word	0x0800e824
 8001854:	0800e848 	.word	0x0800e848
 8001858:	20001020 	.word	0x20001020
 800185c:	0800e850 	.word	0x0800e850
 8001860:	0800e874 	.word	0x0800e874
 8001864:	20001021 	.word	0x20001021
 8001868:	0800e87c 	.word	0x0800e87c
 800186c:	0800e8a0 	.word	0x0800e8a0
 8001870:	2000102c 	.word	0x2000102c
 8001874:	200010b0 	.word	0x200010b0
 8001878:	0800e8a8 	.word	0x0800e8a8
 800187c:	0800e8cc 	.word	0x0800e8cc
 8001880:	0800e8d4 	.word	0x0800e8d4
 8001884:	0800e8dc 	.word	0x0800e8dc
 8001888:	0800e698 	.word	0x0800e698
 800188c:	0800e8e4 	.word	0x0800e8e4

08001890 <usart1Rx_Callback>:


// Interrupcion usart 1
void usart1Rx_Callback(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001894:	f006 ff56 	bl	8008744 <getRxData>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <usart1Rx_Callback+0x14>)
 800189e:	701a      	strb	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200004d6 	.word	0x200004d6

080018a8 <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <BasicTimer3_Callback+0x10>)
 80018ae:	f005 f896 	bl	80069de <GPIOxTooglePin>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000204 	.word	0x20000204

080018bc <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <BasicTimer2_Callback+0x38>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <BasicTimer2_Callback+0x3c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <BasicTimer2_Callback+0x40>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d803      	bhi.n	80018dc <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <BasicTimer2_Callback+0x44>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
	}else{ counting_action++; }

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 80018da:	e005      	b.n	80018e8 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <BasicTimer2_Callback+0x40>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <BasicTimer2_Callback+0x40>)
 80018e6:	801a      	strh	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000101b 	.word	0x2000101b
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20001026 	.word	0x20001026
 8001900:	2000101c 	.word	0x2000101c

08001904 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <callback_extInt1+0x1c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	791a      	ldrb	r2, [r3, #4]
 800190e:	3201      	adds	r2, #1
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	711a      	strb	r2, [r3, #4]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200003e0 	.word	0x200003e0

08001924 <callback_extInt3>:

void callback_extInt3(void){
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <callback_extInt3+0x1c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	791a      	ldrb	r2, [r3, #4]
 800192e:	3201      	adds	r2, #1
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	711a      	strb	r2, [r3, #4]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200003e0 	.word	0x200003e0

08001944 <getAngle>:

	return promedio;
}


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6178      	str	r0, [r7, #20]
 800194c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001950:	ed87 1b02 	vstr	d1, [r7, #8]
 8001954:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f005 f8ae 	bl	8006ab8 <readGyro_Z>
 800195c:	ee10 3a10 	vmov	r3, s0
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe09 	bl	8000578 <__aeabi_f2d>
 8001966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800196a:	f7fe fca5 	bl	80002b8 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f94f 	bl	8000c18 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 800197e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001982:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001986:	ee27 7a87 	vmul.f32	s14, s15, s14
 800198a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80019f0 <getAngle+0xac>
 800198e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001992:	ed97 7a04 	vldr	s14, [r7, #16]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 800199e:	69b8      	ldr	r0, [r7, #24]
 80019a0:	f7fe fdea 	bl	8000578 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <getAngle+0xb0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fde0 	bl	8000578 <__aeabi_f2d>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fc7d 	bl	80002bc <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f925 	bl	8000c18 <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <getAngle+0xb0>)
 80019d2:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <getAngle+0xb4>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <getAngle+0xb8>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <getAngle+0xb8>)
 80019e4:	801a      	strh	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	447a0000 	.word	0x447a0000
 80019f4:	20001108 	.word	0x20001108
 80019f8:	200002c4 	.word	0x200002c4
 80019fc:	20001024 	.word	0x20001024

08001a00 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_t operation_mode){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	ed2d 8b02 	vpush	{d8}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	71fb      	strb	r3, [r7, #7]

	//Verificamos el modo
	if(operation_mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 81d5 	bne.w	8001dc4 <get_measuremets_parameters+0x3c4>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001a1a:	4bab      	ldr	r3, [pc, #684]	; (8001cc8 <get_measuremets_parameters+0x2c8>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4baa      	ldr	r3, [pc, #680]	; (8001ccc <get_measuremets_parameters+0x2cc>)
 8001a22:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001a24:	4baa      	ldr	r3, [pc, #680]	; (8001cd0 <get_measuremets_parameters+0x2d0>)
 8001a26:	edd3 6a00 	vldr	s13, [r3]
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <get_measuremets_parameters+0x2d4>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3a:	4ba7      	ldr	r3, [pc, #668]	; (8001cd8 <get_measuremets_parameters+0x2d8>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001a40:	4ba5      	ldr	r3, [pc, #660]	; (8001cd8 <get_measuremets_parameters+0x2d8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd97 	bl	8000578 <__aeabi_f2d>
 8001a4a:	a39b      	add	r3, pc, #620	; (adr r3, 8001cb8 <get_measuremets_parameters+0x2b8>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fdea 	bl	8000628 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <get_measuremets_parameters+0x2dc>)
 8001a62:	f7fe ff0b 	bl	800087c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001a70:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <get_measuremets_parameters+0x2d0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd7f 	bl	8000578 <__aeabi_f2d>
 8001a7a:	a38f      	add	r3, pc, #572	; (adr r3, 8001cb8 <get_measuremets_parameters+0x2b8>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdd2 	bl	8000628 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <get_measuremets_parameters+0x2dc>)
 8001a92:	f7fe fef3 	bl	800087c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ec43 2b17 	vmov	d7, r2, r3
 8001a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa2:	eef0 0a67 	vmov.f32	s1, s15
 8001aa6:	f00a fc33 	bl	800c310 <sin>
 8001aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8001aae:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <get_measuremets_parameters+0x2d0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd5e 	bl	8000578 <__aeabi_f2d>
 8001abc:	a37e      	add	r3, pc, #504	; (adr r3, 8001cb8 <get_measuremets_parameters+0x2b8>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fdb1 	bl	8000628 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <get_measuremets_parameters+0x2dc>)
 8001ad4:	f7fe fed2 	bl	800087c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	ec43 2b17 	vmov	d7, r2, r3
 8001ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae4:	eef0 0a67 	vmov.f32	s1, s15
 8001ae8:	f00a fb76 	bl	800c1d8 <cos>
 8001aec:	eeb0 7a40 	vmov.f32	s14, s0
 8001af0:	eef0 7a60 	vmov.f32	s15, s1
 8001af4:	eeb0 1a47 	vmov.f32	s2, s14
 8001af8:	eef0 1a67 	vmov.f32	s3, s15
 8001afc:	eeb0 0a48 	vmov.f32	s0, s16
 8001b00:	eef0 0a68 	vmov.f32	s1, s17
 8001b04:	f00a fc5c 	bl	800c3c0 <atan2>
 8001b08:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001b0c:	a36c      	add	r3, pc, #432	; (adr r3, 8001cc0 <get_measuremets_parameters+0x2c0>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd89 	bl	8000628 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b24:	f7fe fbca 	bl	80002bc <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b38:	a35f      	add	r3, pc, #380	; (adr r3, 8001cb8 <get_measuremets_parameters+0x2b8>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd73 	bl	8000628 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <get_measuremets_parameters+0x2dc>)
 8001b50:	f7fe fe94 	bl	800087c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	ec43 2b17 	vmov	d7, r2, r3
 8001b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b60:	eef0 0a67 	vmov.f32	s1, s15
 8001b64:	f00a fbd4 	bl	800c310 <sin>
 8001b68:	eeb0 8a40 	vmov.f32	s16, s0
 8001b6c:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b76:	a350      	add	r3, pc, #320	; (adr r3, 8001cb8 <get_measuremets_parameters+0x2b8>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fd54 	bl	8000628 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <get_measuremets_parameters+0x2dc>)
 8001b8e:	f7fe fe75 	bl	800087c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b17 	vmov	d7, r2, r3
 8001b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ba2:	f00a fb19 	bl	800c1d8 <cos>
 8001ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8001baa:	eef0 7a60 	vmov.f32	s15, s1
 8001bae:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb2:	eef0 1a67 	vmov.f32	s3, s15
 8001bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8001bba:	eef0 0a68 	vmov.f32	s1, s17
 8001bbe:	f00a fbff 	bl	800c3c0 <atan2>
 8001bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc6:	eef0 7a60 	vmov.f32	s15, s1
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	ed93 7b02 	vldr	d7, [r3, #8]
 8001bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bda:	eef0 0a67 	vmov.f32	s1, s15
 8001bde:	f00a fb97 	bl	800c310 <sin>
 8001be2:	eeb0 8a40 	vmov.f32	s16, s0
 8001be6:	eef0 8a60 	vmov.f32	s17, s1
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	ed93 7b02 	vldr	d7, [r3, #8]
 8001bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf4:	eef0 0a67 	vmov.f32	s1, s15
 8001bf8:	f00a faee 	bl	800c1d8 <cos>
 8001bfc:	eeb0 7a40 	vmov.f32	s14, s0
 8001c00:	eef0 7a60 	vmov.f32	s15, s1
 8001c04:	eeb0 1a47 	vmov.f32	s2, s14
 8001c08:	eef0 1a67 	vmov.f32	s3, s15
 8001c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c10:	eef0 0a68 	vmov.f32	s1, s17
 8001c14:	f00a fbd4 	bl	800c3c0 <atan2>
 8001c18:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1c:	eef0 7a60 	vmov.f32	s15, s1
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (Mode_dir.direction_s_r == SET){
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <get_measuremets_parameters+0x2e0>)
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d15e      	bne.n	8001cec <get_measuremets_parameters+0x2ec>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <get_measuremets_parameters+0x2e4>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <get_measuremets_parameters+0x2e8>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3304      	adds	r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <get_measuremets_parameters+0x2cc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8e:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <get_measuremets_parameters+0x2cc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	edc3 7a02 	vstr	s15, [r3, #8]
 8001cb6:	e065      	b.n	8001d84 <get_measuremets_parameters+0x384>
 8001cb8:	54442d18 	.word	0x54442d18
 8001cbc:	400921fb 	.word	0x400921fb
 8001cc0:	1a63c1f8 	.word	0x1a63c1f8
 8001cc4:	404ca5dc 	.word	0x404ca5dc
 8001cc8:	20001024 	.word	0x20001024
 8001ccc:	20001028 	.word	0x20001028
 8001cd0:	20001108 	.word	0x20001108
 8001cd4:	20001026 	.word	0x20001026
 8001cd8:	2000110c 	.word	0x2000110c
 8001cdc:	40668000 	.word	0x40668000
 8001ce0:	20001018 	.word	0x20001018
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	20000010 	.word	0x20000010

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	791b      	ldrb	r3, [r3, #4]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <get_measuremets_parameters+0x3ac>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	eef1 7a67 	vneg.f32	s15, s15
 8001d0c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <get_measuremets_parameters+0x3b0>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	eef1 7a67 	vneg.f32	s15, s15
 8001d34:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d40:	eef1 6a67 	vneg.f32	s13, s15
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <get_measuremets_parameters+0x3b4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d58:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d66:	eef1 6a67 	vneg.f32	s13, s15
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <get_measuremets_parameters+0x3b4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <get_measuremets_parameters+0x3b8>)
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <get_measuremets_parameters+0x3bc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <get_measuremets_parameters+0x3c0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001daa:	e1de      	b.n	800216a <get_measuremets_parameters+0x76a>
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	20000010 	.word	0x20000010
 8001db4:	20001028 	.word	0x20001028
 8001db8:	20001108 	.word	0x20001108
 8001dbc:	20001024 	.word	0x20001024
 8001dc0:	20001026 	.word	0x20001026
	else if(Mode == sRoll)
 8001dc4:	4bb0      	ldr	r3, [pc, #704]	; (8002088 <get_measuremets_parameters+0x688>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f040 81cd 	bne.w	8002168 <get_measuremets_parameters+0x768>
			time_accion = time_accumulated;
 8001dce:	4baf      	ldr	r3, [pc, #700]	; (800208c <get_measuremets_parameters+0x68c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4bae      	ldr	r3, [pc, #696]	; (8002090 <get_measuremets_parameters+0x690>)
 8001dd6:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8001dd8:	4bae      	ldr	r3, [pc, #696]	; (8002094 <get_measuremets_parameters+0x694>)
 8001dda:	edd3 6a00 	vldr	s13, [r3]
 8001dde:	4bae      	ldr	r3, [pc, #696]	; (8002098 <get_measuremets_parameters+0x698>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dee:	4bab      	ldr	r3, [pc, #684]	; (800209c <get_measuremets_parameters+0x69c>)
 8001df0:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001df4:	4ba9      	ldr	r3, [pc, #676]	; (800209c <get_measuremets_parameters+0x69c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbbd 	bl	8000578 <__aeabi_f2d>
 8001dfe:	a39e      	add	r3, pc, #632	; (adr r3, 8002078 <get_measuremets_parameters+0x678>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc10 	bl	8000628 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4ba2      	ldr	r3, [pc, #648]	; (80020a0 <get_measuremets_parameters+0x6a0>)
 8001e16:	f7fe fd31 	bl	800087c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001e24:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <get_measuremets_parameters+0x694>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fba5 	bl	8000578 <__aeabi_f2d>
 8001e2e:	a392      	add	r3, pc, #584	; (adr r3, 8002078 <get_measuremets_parameters+0x678>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fbf8 	bl	8000628 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b96      	ldr	r3, [pc, #600]	; (80020a0 <get_measuremets_parameters+0x6a0>)
 8001e46:	f7fe fd19 	bl	800087c <__aeabi_ddiv>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	ec43 2b17 	vmov	d7, r2, r3
 8001e52:	eeb0 0a47 	vmov.f32	s0, s14
 8001e56:	eef0 0a67 	vmov.f32	s1, s15
 8001e5a:	f00a fa59 	bl	800c310 <sin>
 8001e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8001e62:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <get_measuremets_parameters+0x694>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb84 	bl	8000578 <__aeabi_f2d>
 8001e70:	a381      	add	r3, pc, #516	; (adr r3, 8002078 <get_measuremets_parameters+0x678>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbd7 	bl	8000628 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <get_measuremets_parameters+0x6a0>)
 8001e88:	f7fe fcf8 	bl	800087c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	ec43 2b17 	vmov	d7, r2, r3
 8001e94:	eeb0 0a47 	vmov.f32	s0, s14
 8001e98:	eef0 0a67 	vmov.f32	s1, s15
 8001e9c:	f00a f99c 	bl	800c1d8 <cos>
 8001ea0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea4:	eef0 7a60 	vmov.f32	s15, s1
 8001ea8:	eeb0 1a47 	vmov.f32	s2, s14
 8001eac:	eef0 1a67 	vmov.f32	s3, s15
 8001eb0:	eeb0 0a48 	vmov.f32	s0, s16
 8001eb4:	eef0 0a68 	vmov.f32	s1, s17
 8001eb8:	f00a fa82 	bl	800c3c0 <atan2>
 8001ebc:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ec0:	a36f      	add	r3, pc, #444	; (adr r3, 8002080 <get_measuremets_parameters+0x680>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fbaf 	bl	8000628 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ed8:	f7fe f9f0 	bl	80002bc <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001eec:	a362      	add	r3, pc, #392	; (adr r3, 8002078 <get_measuremets_parameters+0x678>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fb99 	bl	8000628 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <get_measuremets_parameters+0x6a0>)
 8001f04:	f7fe fcba 	bl	800087c <__aeabi_ddiv>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	ec43 2b17 	vmov	d7, r2, r3
 8001f10:	eeb0 0a47 	vmov.f32	s0, s14
 8001f14:	eef0 0a67 	vmov.f32	s1, s15
 8001f18:	f00a f9fa 	bl	800c310 <sin>
 8001f1c:	eeb0 8a40 	vmov.f32	s16, s0
 8001f20:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f2a:	a353      	add	r3, pc, #332	; (adr r3, 8002078 <get_measuremets_parameters+0x678>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb7a 	bl	8000628 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <get_measuremets_parameters+0x6a0>)
 8001f42:	f7fe fc9b 	bl	800087c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ec43 2b17 	vmov	d7, r2, r3
 8001f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f52:	eef0 0a67 	vmov.f32	s1, s15
 8001f56:	f00a f93f 	bl	800c1d8 <cos>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	eef0 7a60 	vmov.f32	s15, s1
 8001f62:	eeb0 1a47 	vmov.f32	s2, s14
 8001f66:	eef0 1a67 	vmov.f32	s3, s15
 8001f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f6e:	eef0 0a68 	vmov.f32	s1, s17
 8001f72:	f00a fa25 	bl	800c3c0 <atan2>
 8001f76:	eeb0 7a40 	vmov.f32	s14, s0
 8001f7a:	eef0 7a60 	vmov.f32	s15, s1
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8e:	eef0 0a67 	vmov.f32	s1, s15
 8001f92:	f00a f9bd 	bl	800c310 <sin>
 8001f96:	eeb0 8a40 	vmov.f32	s16, s0
 8001f9a:	eef0 8a60 	vmov.f32	s17, s1
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa8:	eef0 0a67 	vmov.f32	s1, s15
 8001fac:	f00a f914 	bl	800c1d8 <cos>
 8001fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fb4:	eef0 7a60 	vmov.f32	s15, s1
 8001fb8:	eeb0 1a47 	vmov.f32	s2, s14
 8001fbc:	eef0 1a67 	vmov.f32	s3, s15
 8001fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8001fc4:	eef0 0a68 	vmov.f32	s1, s17
 8001fc8:	f00a f9fa 	bl	800c3c0 <atan2>
 8001fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd0:	eef0 7a60 	vmov.f32	s15, s1
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	ed83 7b02 	vstr	d7, [r3, #8]
			if (Mode_dir.direction_s_r == SET){
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <get_measuremets_parameters+0x6a4>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d166      	bne.n	80020b0 <get_measuremets_parameters+0x6b0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <get_measuremets_parameters+0x6a8>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3304      	adds	r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <get_measuremets_parameters+0x6ac>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3304      	adds	r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	eef1 7a67 	vneg.f32	s15, s15
 8002026:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <get_measuremets_parameters+0x690>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002046:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	edd3 7a03 	vldr	s15, [r3, #12]
 8002054:	eef1 6a67 	vneg.f32	s13, s15
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <get_measuremets_parameters+0x690>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3304      	adds	r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002072:	e065      	b.n	8002140 <get_measuremets_parameters+0x740>
 8002074:	f3af 8000 	nop.w
 8002078:	54442d18 	.word	0x54442d18
 800207c:	400921fb 	.word	0x400921fb
 8002080:	1a63c1f8 	.word	0x1a63c1f8
 8002084:	404ca5dc 	.word	0x404ca5dc
 8002088:	2000101a 	.word	0x2000101a
 800208c:	20001024 	.word	0x20001024
 8002090:	20001028 	.word	0x20001028
 8002094:	20001108 	.word	0x20001108
 8002098:	20001026 	.word	0x20001026
 800209c:	2000110c 	.word	0x2000110c
 80020a0:	40668000 	.word	0x40668000
 80020a4:	20001018 	.word	0x20001018
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	20000010 	.word	0x20000010
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <get_measuremets_parameters+0x778>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	eef1 7a67 	vneg.f32	s15, s15
 80020d0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3304      	adds	r3, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	791b      	ldrb	r3, [r3, #4]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <get_measuremets_parameters+0x77c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3304      	adds	r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002100:	eef1 6a67 	vneg.f32	s13, s15
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <get_measuremets_parameters+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002118:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3304      	adds	r3, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	edd3 6a03 	vldr	s13, [r3, #12]
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <get_measuremets_parameters+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800213c:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <get_measuremets_parameters+0x784>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <get_measuremets_parameters+0x788>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <get_measuremets_parameters+0x78c>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
}
 8002166:	e000      	b.n	800216a <get_measuremets_parameters+0x76a>
	else{  __NOP(); }
 8002168:	bf00      	nop
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	ecbd 8b02 	vpop	{d8}
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	20000010 	.word	0x20000010
 8002180:	20001028 	.word	0x20001028
 8002184:	20001108 	.word	0x20001108
 8002188:	20001024 	.word	0x20001024
 800218c:	20001026 	.word	0x20001026

08002190 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 800219a:	783b      	ldrb	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d120      	bne.n	80021e2 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f844 	bl	8002230 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 ff34 	bl	800701c <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2101      	movs	r1, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fbc2 	bl	8006946 <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 ff26 	bl	800701c <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fbb3 	bl	8006946 <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 80021e0:	e022      	b.n	8002228 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 80021e2:	783b      	ldrb	r3, [r7, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d11f      	bne.n	8002228 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f820 	bl	8002230 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 ff10 	bl	800701c <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fb9e 	bl	8006946 <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4618      	mov	r0, r3
 8002214:	f004 ff02 	bl	800701c <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fb8f 	bl	8006946 <GPIO_WritePin_Afopt>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 800223a:	783b      	ldrb	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d143      	bne.n	80022c8 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	7f1a      	ldrb	r2, [r3, #28]
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	429a      	cmp	r2, r3
 800224a:	d018      	beq.n	800227e <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	787a      	ldrb	r2, [r7, #1]
 8002252:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f004 fb6a 	bl	8006946 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	4618      	mov	r0, r3
 800227a:	f005 fa8f 	bl	800779c <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	7f1a      	ldrb	r2, [r3, #28]
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	429a      	cmp	r2, r3
 800228a:	d068      	beq.n	800235e <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	787a      	ldrb	r2, [r7, #1]
 8002294:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f004 fb47 	bl	8006946 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 fa6b 	bl	800779c <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80022c6:	e04a      	b.n	800235e <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 80022c8:	783b      	ldrb	r3, [r7, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d147      	bne.n	800235e <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	7f1a      	ldrb	r2, [r3, #28]
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d11d      	bne.n	8002316 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 80022da:	787b      	ldrb	r3, [r7, #1]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f004 fb1e 	bl	8006946 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f005 fa43 	bl	800779c <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	7f1a      	ldrb	r2, [r3, #28]
 800231e:	787b      	ldrb	r3, [r7, #1]
 8002320:	429a      	cmp	r2, r3
 8002322:	d01c      	beq.n	800235e <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	787a      	ldrb	r2, [r7, #1]
 800232c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f004 fafb 	bl	8006946 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	4618      	mov	r0, r3
 800235a:	f005 fa1f 	bl	800779c <PWMx_Toggle>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002370:	783b      	ldrb	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d161      	bne.n	800243a <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fae1 	bl	8006946 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f004 fad9 	bl	8006946 <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	7f1a      	ldrb	r2, [r3, #28]
 800239a:	787b      	ldrb	r3, [r7, #1]
 800239c:	429a      	cmp	r2, r3
 800239e:	d018      	beq.n	80023d2 <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	787a      	ldrb	r2, [r7, #1]
 80023a6:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	7f1b      	ldrb	r3, [r3, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f004 fac0 	bl	8006946 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	4618      	mov	r0, r3
 80023ce:	f005 f9e5 	bl	800779c <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	7f1a      	ldrb	r2, [r3, #28]
 80023da:	787b      	ldrb	r3, [r7, #1]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d01c      	beq.n	800241a <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f004 fa9d 	bl	8006946 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	4618      	mov	r0, r3
 8002416:	f005 f9c1 	bl	800779c <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fa8f 	bl	8006946 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2101      	movs	r1, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fa87 	bl	8006946 <GPIO_WritePin_Afopt>
			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);

	}
}
 8002438:	e068      	b.n	800250c <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 800243a:	783b      	ldrb	r3, [r7, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d165      	bne.n	800250c <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f004 fa7c 	bl	8006946 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fa74 	bl	8006946 <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	7f1a      	ldrb	r2, [r3, #28]
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	429a      	cmp	r2, r3
 8002468:	d11d      	bne.n	80024a6 <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 800246a:	787b      	ldrb	r3, [r7, #1]
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2da      	uxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	7f1b      	ldrb	r3, [r3, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f004 fa56 	bl	8006946 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 f97b 	bl	800779c <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	7f1a      	ldrb	r2, [r3, #28]
 80024ae:	787b      	ldrb	r3, [r7, #1]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d01c      	beq.n	80024ee <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	787a      	ldrb	r2, [r7, #1]
 80024bc:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	7f1b      	ldrb	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f004 fa33 	bl	8006946 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 f957 	bl	800779c <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 fa25 	bl	8006946 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f004 fa1d 	bl	8006946 <GPIO_WritePin_Afopt>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	4618      	mov	r0, r3
 8002524:	f005 f8fa 	bl	800771c <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fa08 	bl	8006946 <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4618      	mov	r0, r3
 8002540:	f005 f8ec 	bl	800771c <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f9f9 	bl	8006946 <GPIO_WritePin_Afopt>


}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a82      	ldr	r2, [pc, #520]	; (8002778 <int_Config_Motor+0x21c>)
 800256e:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a81      	ldr	r2, [pc, #516]	; (800277c <int_Config_Motor+0x220>)
 8002576:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a80      	ldr	r2, [pc, #512]	; (8002780 <int_Config_Motor+0x224>)
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <int_Config_Motor+0x228>)
 8002586:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <int_Config_Motor+0x22c>)
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a71      	ldr	r2, [pc, #452]	; (800278c <int_Config_Motor+0x230>)
 80025c8:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6c      	ldr	r2, [pc, #432]	; (8002790 <int_Config_Motor+0x234>)
 80025de:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4a6b      	ldr	r2, [pc, #428]	; (8002794 <int_Config_Motor+0x238>)
 80025e6:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3304      	adds	r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a63      	ldr	r2, [pc, #396]	; (800277c <int_Config_Motor+0x220>)
 80025f0:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	; (8002798 <int_Config_Motor+0x23c>)
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3304      	adds	r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <int_Config_Motor+0x240>)
 8002604:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3304      	adds	r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a64      	ldr	r2, [pc, #400]	; (80027a0 <int_Config_Motor+0x244>)
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3304      	adds	r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3304      	adds	r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3304      	adds	r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a4e      	ldr	r2, [pc, #312]	; (800278c <int_Config_Motor+0x230>)
 8002652:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a49      	ldr	r2, [pc, #292]	; (8002790 <int_Config_Motor+0x234>)
 800266c:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002694:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4a42      	ldr	r2, [pc, #264]	; (80027a4 <int_Config_Motor+0x248>)
 800269a:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4a42      	ldr	r2, [pc, #264]	; (80027a8 <int_Config_Motor+0x24c>)
 80026a0:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	200003e8 	.word	0x200003e8
 800277c:	41e00000 	.word	0x41e00000
 8002780:	2000024c 	.word	0x2000024c
 8002784:	20000264 	.word	0x20000264
 8002788:	200002f0 	.word	0x200002f0
 800278c:	437a0000 	.word	0x437a0000
 8002790:	42c80000 	.word	0x42c80000
 8002794:	20000414 	.word	0x20000414
 8002798:	20000240 	.word	0x20000240
 800279c:	20000258 	.word	0x20000258
 80027a0:	20000310 	.word	0x20000310
 80027a4:	3dcccccd 	.word	0x3dcccccd
 80027a8:	3f4ccccd 	.word	0x3f4ccccd

080027ac <goTo>:
		 uint8_t *fAnglulo,
		 uint8_t *fMeasurements,
		 uint8_t *fcontrol,
		 char buff[64],
		 uint32_t distance_mm ,
		 state_dir_t operation_mode_dir){
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b092      	sub	sp, #72	; 0x48
 80027b0:	af08      	add	r7, sp, #32
 80027b2:	6178      	str	r0, [r7, #20]
 80027b4:	6139      	str	r1, [r7, #16]
 80027b6:	60fa      	str	r2, [r7, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t done = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 80027e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80027ea:	f7fd fea3 	bl	8000534 <__aeabi_ui2d>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80027f8:	eeb0 0a47 	vmov.f32	s0, s14
 80027fc:	eef0 0a67 	vmov.f32	s1, s15
 8002800:	f009 fcea 	bl	800c1d8 <cos>
 8002804:	ec53 2b10 	vmov	r2, r3, d0
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd ff0c 	bl	8000628 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800281e:	f7fd fd4d 	bl	80002bc <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 800282c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800282e:	f7fd fe81 	bl	8000534 <__aeabi_ui2d>
 8002832:	4604      	mov	r4, r0
 8002834:	460d      	mov	r5, r1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	ed93 7b04 	vldr	d7, [r3, #16]
 800283c:	eeb0 0a47 	vmov.f32	s0, s14
 8002840:	eef0 0a67 	vmov.f32	s1, s15
 8002844:	f009 fd64 	bl	800c310 <sin>
 8002848:	ec53 2b10 	vmov	r2, r3, d0
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd feea 	bl	8000628 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002862:	f7fd fd2b 	bl	80002bc <__adddf3>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f004 f9a9 	bl	8006bc8 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 8002876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7ff fc89 	bl	8002190 <On_motor_Straigh_Roll>

	while(!done){
 800287e:	e04c      	b.n	800291a <goTo+0x16e>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800288c:	eeb0 1a46 	vmov.f32	s2, s12
 8002890:	eef0 1a66 	vmov.f32	s3, s13
 8002894:	eeb0 0a47 	vmov.f32	s0, s14
 8002898:	eef0 0a67 	vmov.f32	s1, s15
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f004 fa7f 	bl	8006da0 <distance_traveled>
 80028a2:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 80028a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80028aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80028ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b0:	9305      	str	r3, [sp, #20]
 80028b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b4:	9304      	str	r3, [sp, #16]
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	9303      	str	r3, [sp, #12]
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	ed97 0b00 	vldr	d0, [r7]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6939      	ldr	r1, [r7, #16]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f000 f988 	bl	8002be8 <go>
		   fMeasurements,
		   fcontrol,
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

		if (!(distance_to_go < distance_mm)){
 80028d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028da:	f7fd fe2b 	bl	8000534 <__aeabi_ui2d>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	2101      	movs	r1, #1
 80028e4:	460c      	mov	r4, r1
 80028e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ea:	f7fe f90f 	bl	8000b0c <__aeabi_dcmplt>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <goTo+0x14c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	461c      	mov	r4, r3
 80028f8:	b2e3      	uxtb	r3, r4
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <goTo+0x16a>
			// Paramos el proceso
			done = !done;
 8002904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Observamos si hay algun comando en espera
		fillComand();
 8002916:	f000 fa3f 	bl	8002d98 <fillComand>
	while(!done){
 800291a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ae      	beq.n	8002880 <goTo+0xd4>

	}


	return done;
 8002922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002926:	4618      	mov	r0, r3
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002930 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <PID_control+0x1cc>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a6f      	ldr	r2, [pc, #444]	; (8002b00 <PID_control+0x1d0>)
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002952:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b04 <PID_control+0x1d4>
 8002956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800295a:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800296a:	eeb0 1a46 	vmov.f32	s2, s12
 800296e:	eef0 1a66 	vmov.f32	s3, s13
 8002972:	eeb0 0a47 	vmov.f32	s0, s14
 8002976:	eef0 0a67 	vmov.f32	s1, s15
 800297a:	68b8      	ldr	r0, [r7, #8]
 800297c:	f004 f9cc 	bl	8006d18 <distance_to_straight_line>
 8002980:	ec51 0b10 	vmov	r0, r1, d0
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <PID_control+0x1d8>)
 800298a:	f7fd ff77 	bl	800087c <__aeabi_ddiv>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f93f 	bl	8000c18 <__aeabi_d2f>
 800299a:	4603      	mov	r3, r0
 800299c:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 800299e:	ed97 1a04 	vldr	s2, [r7, #16]
 80029a2:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002b0c <PID_control+0x1dc>
 80029a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f000 f8bc 	bl	8002b28 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 80029b0:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <PID_control+0x1e0>)
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <PID_control+0x1e4>)
 80029c2:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	ed93 7a00 	vldr	s14, [r3]
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <PID_control+0x1e0>)
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <PID_control+0x1e8>)
 80029d8:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <PID_control+0x1e4>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80029f0:	eeb0 1a47 	vmov.f32	s2, s14
 80029f4:	eef0 0a67 	vmov.f32	s1, s15
 80029f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 f893 	bl	8002b28 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3304      	adds	r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <PID_control+0x1e8>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a1a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a1e:	eef0 0a67 	vmov.f32	s1, s15
 8002a22:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 f87e 	bl	8002b28 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a46:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a76:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002b1c <PID_control+0x1ec>
 8002a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	db04      	blt.n	8002a8e <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <PID_control+0x1f0>)
 8002a8a:	615a      	str	r2, [r3, #20]
 8002a8c:	e00e      	b.n	8002aac <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a96:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	d803      	bhi.n	8002aac <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <PID_control+0x1f4>)
 8002aaa:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ab6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002b1c <PID_control+0x1ec>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	db05      	blt.n	8002ad0 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <PID_control+0x1f0>)
 8002acc:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002ace:	e011      	b.n	8002af4 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ada:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d900      	bls.n	8002aea <PID_control+0x1ba>
}
 8002ae8:	e004      	b.n	8002af4 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <PID_control+0x1f4>)
 8002af2:	615a      	str	r2, [r3, #20]
}
 8002af4:	bf00      	nop
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200002c4 	.word	0x200002c4
 8002b00:	20000008 	.word	0x20000008
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	408f4000 	.word	0x408f4000
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	20001110 	.word	0x20001110
 8002b14:	20001114 	.word	0x20001114
 8002b18:	20001118 	.word	0x20001118
 8002b1c:	42700000 	.word	0x42700000
 8002b20:	42700000 	.word	0x42700000
 8002b24:	41b80000 	.word	0x41b80000

08002b28 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b34:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b38:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002b3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b40:	edd7 7a00 	vldr	s15, [r7]
 8002b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5e:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b90:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ba6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002baa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002bae:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb6:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002bba:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	60da      	str	r2, [r3, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3724      	adds	r7, #36	; 0x24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <go>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	6178      	str	r0, [r7, #20]
 8002bf0:	6139      	str	r1, [r7, #16]
 8002bf2:	60fa      	str	r2, [r7, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	ed97 1b00 	vldr	d1, [r7]
 8002c08:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8002d34 <go+0x14c>
 8002c0c:	6938      	ldr	r0, [r7, #16]
 8002c0e:	f7fe fe99 	bl	8001944 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <go+0x52>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002c20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c24:	461a      	mov	r2, r3
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7fe fee9 	bl	8001a00 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d073      	beq.n	8002d2a <go+0x142>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3304      	adds	r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c60:	ee16 0a90 	vmov	r0, s13
 8002c64:	f7fd fc88 	bl	8000578 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c76:	eeb0 0a47 	vmov.f32	s0, s14
 8002c7a:	eef0 0a67 	vmov.f32	s1, s15
 8002c7e:	f009 faab 	bl	800c1d8 <cos>
 8002c82:	ec51 0b10 	vmov	r0, r1, d0
 8002c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c8a:	f7fd fccd 	bl	8000628 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca2:	eef0 0a67 	vmov.f32	s1, s15
 8002ca6:	f009 fb33 	bl	800c310 <sin>
 8002caa:	ec51 0b10 	vmov	r0, r1, d0
 8002cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb2:	f7fd fcb9 	bl	8000628 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ccc:	f7fd faf6 	bl	80002bc <__adddf3>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ce6:	f7fd fae9 	bl	80002bc <__adddf3>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002d00:	e9cd 2300 	strd	r2, r3, [sp]
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	490b      	ldr	r1, [pc, #44]	; (8002d38 <go+0x150>)
 8002d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d0c:	f006 fc26 	bl	800955c <siprintf>

		writeMsg(&handlerUSART, buff);
 8002d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d12:	480a      	ldr	r0, [pc, #40]	; (8002d3c <go+0x154>)
 8002d14:	f005 fcee 	bl	80086f4 <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff fe06 	bl	8002930 <PID_control>

		*fcontrol = RESET;
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	}
}
 8002d2a:	bf00      	nop
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	00000000 	.word	0x00000000
 8002d38:	0800e8fc 	.word	0x0800e8fc
 8002d3c:	20000330 	.word	0x20000330

08002d40 <roll>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6178      	str	r0, [r7, #20]
 8002d48:	6139      	str	r1, [r7, #16]
 8002d4a:	60fa      	str	r2, [r7, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <roll+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	ed97 1b00 	vldr	d1, [r7]
 8002d60:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002d94 <roll+0x54>
 8002d64:	6938      	ldr	r0, [r7, #16]
 8002d66:	f7fe fded 	bl	8001944 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <roll+0x4c>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7fe fe3d 	bl	8001a00 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
	}

}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	00000000 	.word	0x00000000

08002d98 <fillComand>:



void fillComand(void){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 8002d9c:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <fillComand+0x8c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03c      	beq.n	8002e1e <fillComand+0x86>
		writeChar(&handlerUSART, rxData);
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <fillComand+0x8c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	481f      	ldr	r0, [pc, #124]	; (8002e28 <fillComand+0x90>)
 8002dac:	f005 fc8a 	bl	80086c4 <writeChar>
		bufferReception[counterReception] = rxData;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <fillComand+0x94>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <fillComand+0x8c>)
 8002db8:	7819      	ldrb	r1, [r3, #0]
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <fillComand+0x98>)
 8002dbc:	5499      	strb	r1, [r3, r2]
		counterReception++;
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <fillComand+0x94>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <fillComand+0x94>)
 8002dc8:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <fillComand+0x8c>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d10f      	bne.n	8002df2 <fillComand+0x5a>
			doneTransaction = SET;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <fillComand+0x9c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <fillComand+0x94>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <fillComand+0x98>)
 8002de0:	2100      	movs	r1, #0
 8002de2:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <fillComand+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 8002dea:	4811      	ldr	r0, [pc, #68]	; (8002e30 <fillComand+0x98>)
 8002dec:	f7fe fbb6 	bl	800155c <parseCommands>
 8002df0:	e012      	b.n	8002e18 <fillComand+0x80>

		}else if (rxData == 'z'){
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <fillComand+0x8c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b7a      	cmp	r3, #122	; 0x7a
 8002df8:	d10e      	bne.n	8002e18 <fillComand+0x80>

			memset(bufferReception, 0, sizeof(bufferReception));
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <fillComand+0x98>)
 8002e00:	f005 fe4a 	bl	8008a98 <memset>
			counterReception = 0;
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <fillComand+0x94>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 8002e0a:	490b      	ldr	r1, [pc, #44]	; (8002e38 <fillComand+0xa0>)
 8002e0c:	4806      	ldr	r0, [pc, #24]	; (8002e28 <fillComand+0x90>)
 8002e0e:	f005 fc71 	bl	80086f4 <writeMsg>
			rxData = '\0';
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <fillComand+0x8c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <fillComand+0x8c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
	}

}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200004d6 	.word	0x200004d6
 8002e28:	20000330 	.word	0x20000330
 8002e2c:	200004d4 	.word	0x200004d4
 8002e30:	20000494 	.word	0x20000494
 8002e34:	200004d5 	.word	0x200004d5
 8002e38:	0800e90c 	.word	0x0800e90c

08002e3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <ITM_SendChar+0x48>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <ITM_SendChar+0x48>)
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e50:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <ITM_SendChar+0x4c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <ITM_SendChar+0x4c>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002e5e:	bf00      	nop
 8002e60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f8      	beq.n	8002e60 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002e6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000edfc 	.word	0xe000edfc
 8002e88:	e0000e00 	.word	0xe0000e00

08002e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
	return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_kill>:

int _kill(int pid, int sig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ea6:	f005 fdc5 	bl	8008a34 <__errno>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2216      	movs	r2, #22
 8002eae:	601a      	str	r2, [r3, #0]
	return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_exit>:

void _exit (int status)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ffe7 	bl	8002e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ece:	e7fe      	b.n	8002ece <_exit+0x12>

08002ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e00a      	b.n	8002ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ee2:	f3af 8000 	nop.w
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	60ba      	str	r2, [r7, #8]
 8002eee:	b2ca      	uxtb	r2, r1
 8002ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	dbf0      	blt.n	8002ee2 <_read+0x12>
	}

return len;
 8002f00:	687b      	ldr	r3, [r7, #4]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e009      	b.n	8002f30 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	60ba      	str	r2, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff89 	bl	8002e3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dbf1      	blt.n	8002f1c <_write+0x12>
	}
	return len;
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_close>:

int _close(int file)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
	return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <_isatty>:

int _isatty(int file)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	return 1;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb4:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fb6:	490d      	ldr	r1, [pc, #52]	; (8002fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <LoopForever+0xe>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fcc:	4c0a      	ldr	r4, [pc, #40]	; (8002ff8 <LoopForever+0x16>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fda:	f005 fd31 	bl	8008a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fde:	f7fd fe6b 	bl	8000cb8 <main>

08002fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fe2:	e7fe      	b.n	8002fe2 <LoopForever>
  ldr   r0, =_estack
 8002fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ff0:	0800f0a8 	.word	0x0800f0a8
  ldr r2, =_sbss
 8002ff4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ff8:	20011d50 	.word	0x20011d50

08002ffc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ffc:	e7fe      	b.n	8002ffc <ADC_IRQHandler>
	...

08003000 <findShorterWay>:
int shorterWay[100][2]     = {0};



int findShorterWay(char terminalGrid[52][52],char Gridcopy[52][52], float matrixCosts[52][52][6] ,
		AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int shorterWay[100][2]){
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 800300e:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 8003012:	6020      	str	r0, [r4, #0]
 8003014:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 8003018:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 800301c:	6001      	str	r1, [r0, #0]
 800301e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003022:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003026:	600a      	str	r2, [r1, #0]
 8003028:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800302c:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003030:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8003032:	49b5      	ldr	r1, [pc, #724]	; (8003308 <findShorterWay+0x308>)
 8003034:	48b5      	ldr	r0, [pc, #724]	; (800330c <findShorterWay+0x30c>)
 8003036:	f005 fb5d 	bl	80086f4 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 800303a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800303e:	f103 031c 	add.w	r3, r3, #28
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003050:	f102 020f 	add.w	r2, r2, #15
 8003054:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800305c:	f102 020e 	add.w	r2, r2, #14
 8003060:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003068:	f102 020d 	add.w	r2, r2, #13
 800306c:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003074:	f102 020c 	add.w	r2, r2, #12
 8003078:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003080:	f102 020b 	add.w	r2, r2, #11
 8003084:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800308c:	f102 020a 	add.w	r2, r2, #10
 8003090:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 8003092:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003096:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800309a:	4618      	mov	r0, r3
 800309c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80030a0:	461a      	mov	r2, r3
 80030a2:	2100      	movs	r1, #0
 80030a4:	f005 fcf8 	bl	8008a98 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80030a8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030ac:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f001 fd65 	bl	8004b80 <getRows>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030be:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80030c6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030ca:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	f001 fd7a 	bl	8004bc8 <getColums>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030dc:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80030e4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030e8:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 80030ec:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030f0:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 80030f4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80030f8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	6809      	ldr	r1, [r1, #0]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	f001 fcea 	bl	8004ada <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8003106:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800310a:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 800310e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003112:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003116:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800311a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	6800      	ldr	r0, [r0, #0]
 800312a:	f001 fa4d 	bl	80045c8 <setHeuristic>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8003134:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8003136:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800313a:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 800313e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003142:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003146:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	6809      	ldr	r1, [r1, #0]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	f001 fc57 	bl	8004a02 <findStart>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d026      	beq.n	80031a8 <findShorterWay+0x1a8>
 800315a:	e002      	b.n	8003162 <findShorterWay+0x162>
    	return 0;
 800315c:	2300      	movs	r3, #0
 800315e:	f001 b970 	b.w	8004442 <findShorterWay+0x1442>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8003162:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8003164:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8003174:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8003184:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8003194:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 80031a4:	f001 b802 	b.w	80041ac <findShorterWay+0x11ac>
    	return 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f001 b94a 	b.w	8004442 <findShorterWay+0x1442>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 80031ae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80031be:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80031ce:	2300      	movs	r3, #0
 80031d0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80031d4:	f102 020e 	add.w	r2, r2, #14
 80031d8:	7013      	strb	r3, [r2, #0]
 80031da:	e0ee      	b.n	80033ba <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 80031dc:	2300      	movs	r3, #0
 80031de:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80031e2:	f102 020d 	add.w	r2, r2, #13
 80031e6:	7013      	strb	r3, [r2, #0]
 80031e8:	e0d4      	b.n	8003394 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80031ea:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80031f6:	f103 030e 	add.w	r3, r3, #14
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dd0b      	ble.n	800321a <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8003202:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800320e:	f103 030d 	add.w	r3, r3, #13
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4413      	add	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	dc16      	bgt.n	8003248 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 800321a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800321e:	f103 030e 	add.w	r3, r3, #14
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003228:	f103 030d 	add.w	r3, r3, #13
 800322c:	7819      	ldrb	r1, [r3, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003238:	f103 0310 	add.w	r3, r3, #16
 800323c:	443b      	add	r3, r7
 800323e:	440b      	add	r3, r1
 8003240:	3b14      	subs	r3, #20
 8003242:	2230      	movs	r2, #48	; 0x30
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e09a      	b.n	800337e <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8003248:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003254:	f103 030e 	add.w	r3, r3, #14
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003260:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	7a12      	ldrb	r2, [r2, #8]
 8003268:	4293      	cmp	r3, r2
 800326a:	dc11      	bgt.n	8003290 <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 800326c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003278:	f103 030d 	add.w	r3, r3, #13
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4413      	add	r3, r2
 8003280:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003284:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	7a52      	ldrb	r2, [r2, #9]
 800328c:	4293      	cmp	r3, r2
 800328e:	dd16      	ble.n	80032be <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8003290:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003294:	f103 030e 	add.w	r3, r3, #14
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800329e:	f103 030d 	add.w	r3, r3, #13
 80032a2:	7819      	ldrb	r1, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80032ae:	f103 0310 	add.w	r3, r3, #16
 80032b2:	443b      	add	r3, r7
 80032b4:	440b      	add	r3, r1
 80032b6:	3b14      	subs	r3, #20
 80032b8:	2230      	movs	r2, #48	; 0x30
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e05f      	b.n	800337e <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 80032be:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80032c2:	f103 030e 	add.w	r3, r3, #14
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d121      	bne.n	8003310 <findShorterWay+0x310>
 80032cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80032d0:	f103 030d 	add.w	r3, r3, #13
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d11a      	bne.n	8003310 <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 80032da:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80032de:	f103 030e 	add.w	r3, r3, #14
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80032e8:	f103 030d 	add.w	r3, r3, #13
 80032ec:	7819      	ldrb	r1, [r3, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80032f8:	f103 0310 	add.w	r3, r3, #16
 80032fc:	443b      	add	r3, r7
 80032fe:	440b      	add	r3, r1
 8003300:	3b14      	subs	r3, #20
 8003302:	2250      	movs	r2, #80	; 0x50
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e03a      	b.n	800337e <findShorterWay+0x37e>
 8003308:	0800e928 	.word	0x0800e928
 800330c:	2000111c 	.word	0x2000111c
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8003310:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800331c:	f103 030e 	add.w	r3, r3, #14
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	461a      	mov	r2, r3
 8003326:	2334      	movs	r3, #52	; 0x34
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	3b34      	subs	r3, #52	; 0x34
 800332e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003332:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	18d0      	adds	r0, r2, r3
 800333a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003346:	f103 030d 	add.w	r3, r3, #13
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4413      	add	r3, r2
 800334e:	3b01      	subs	r3, #1
 8003350:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003354:	f102 020e 	add.w	r2, r2, #14
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 800335e:	f101 010d 	add.w	r1, r1, #13
 8003362:	7809      	ldrb	r1, [r1, #0]
 8003364:	5cc0      	ldrb	r0, [r0, r3]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003370:	f103 0310 	add.w	r3, r3, #16
 8003374:	443b      	add	r3, r7
 8003376:	440b      	add	r3, r1
 8003378:	3b14      	subs	r3, #20
 800337a:	4602      	mov	r2, r0
 800337c:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 800337e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003382:	f103 030d 	add.w	r3, r3, #13
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800338e:	f102 020d 	add.w	r2, r2, #13
 8003392:	7013      	strb	r3, [r2, #0]
 8003394:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003398:	f103 030d 	add.w	r3, r3, #13
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	f67f af23 	bls.w	80031ea <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 80033a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80033a8:	f103 030e 	add.w	r3, r3, #14
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80033b4:	f102 020e 	add.w	r2, r2, #14
 80033b8:	7013      	strb	r3, [r2, #0]
 80033ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80033be:	f103 030e 	add.w	r3, r3, #14
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f67f af09 	bls.w	80031dc <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 80033ca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80033ce:	f103 030a 	add.w	r3, r3, #10
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	49c9      	ldr	r1, [pc, #804]	; (80036fc <findShorterWay+0x6fc>)
 80033d8:	48c9      	ldr	r0, [pc, #804]	; (8003700 <findShorterWay+0x700>)
 80033da:	f006 f8bf 	bl	800955c <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80033de:	49c8      	ldr	r1, [pc, #800]	; (8003700 <findShorterWay+0x700>)
 80033e0:	48c8      	ldr	r0, [pc, #800]	; (8003704 <findShorterWay+0x704>)
 80033e2:	f005 f987 	bl	80086f4 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80033e6:	2300      	movs	r3, #0
 80033e8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80033ec:	f102 020e 	add.w	r2, r2, #14
 80033f0:	7013      	strb	r3, [r2, #0]
 80033f2:	e040      	b.n	8003476 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 80033f4:	2300      	movs	r3, #0
 80033f6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80033fa:	f102 020d 	add.w	r2, r2, #13
 80033fe:	7013      	strb	r3, [r2, #0]
 8003400:	e023      	b.n	800344a <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 8003402:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003406:	f103 030e 	add.w	r3, r3, #14
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003410:	f103 030d 	add.w	r3, r3, #13
 8003414:	7819      	ldrb	r1, [r3, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003420:	f103 0310 	add.w	r3, r3, #16
 8003424:	443b      	add	r3, r7
 8003426:	440b      	add	r3, r1
 8003428:	3b14      	subs	r3, #20
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	48b5      	ldr	r0, [pc, #724]	; (8003704 <findShorterWay+0x704>)
 8003430:	f005 f948 	bl	80086c4 <writeChar>
			for (j = 0; j < 3; j++){
 8003434:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003438:	f103 030d 	add.w	r3, r3, #13
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003444:	f102 020d 	add.w	r2, r2, #13
 8003448:	7013      	strb	r3, [r2, #0]
 800344a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800344e:	f103 030d 	add.w	r3, r3, #13
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d9d4      	bls.n	8003402 <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 8003458:	210d      	movs	r1, #13
 800345a:	48aa      	ldr	r0, [pc, #680]	; (8003704 <findShorterWay+0x704>)
 800345c:	f005 f932 	bl	80086c4 <writeChar>
    	for(i = 0; i < 3; i++){
 8003460:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003464:	f103 030e 	add.w	r3, r3, #14
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003470:	f102 020e 	add.w	r2, r2, #14
 8003474:	7013      	strb	r3, [r2, #0]
 8003476:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800347a:	f103 030e 	add.w	r3, r3, #14
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d9b7      	bls.n	80033f4 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8003484:	210d      	movs	r1, #13
 8003486:	489f      	ldr	r0, [pc, #636]	; (8003704 <findShorterWay+0x704>)
 8003488:	f005 f91c 	bl	80086c4 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800348c:	2300      	movs	r3, #0
 800348e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003492:	f102 0209 	add.w	r2, r2, #9
 8003496:	7013      	strb	r3, [r2, #0]
 8003498:	e01c      	b.n	80034d4 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 800349a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800349e:	f103 0309 	add.w	r3, r3, #9
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2234      	movs	r2, #52	; 0x34
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80034ae:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	4892      	ldr	r0, [pc, #584]	; (8003704 <findShorterWay+0x704>)
 80034ba:	f005 f91b 	bl	80086f4 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80034be:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80034c2:	f103 0309 	add.w	r3, r3, #9
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80034ce:	f102 0209 	add.w	r2, r2, #9
 80034d2:	7013      	strb	r3, [r2, #0]
 80034d4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80034d8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	7a1b      	ldrb	r3, [r3, #8]
 80034e0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80034e4:	f102 0209 	add.w	r2, r2, #9
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3d5      	bcc.n	800349a <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80034ee:	210d      	movs	r1, #13
 80034f0:	4884      	ldr	r0, [pc, #528]	; (8003704 <findShorterWay+0x704>)
 80034f2:	f005 f8e7 	bl	80086c4 <writeChar>


    	for(i = 0; i < 3; i++){
 80034f6:	2300      	movs	r3, #0
 80034f8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80034fc:	f102 020e 	add.w	r2, r2, #14
 8003500:	7013      	strb	r3, [r2, #0]
 8003502:	e33c      	b.n	8003b7e <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8003504:	2300      	movs	r3, #0
 8003506:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800350a:	f102 020d 	add.w	r2, r2, #13
 800350e:	7013      	strb	r3, [r2, #0]
 8003510:	e319      	b.n	8003b46 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 8003512:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003516:	f103 030e 	add.w	r3, r3, #14
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003520:	f103 030d 	add.w	r3, r3, #13
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003530:	f103 0310 	add.w	r3, r3, #16
 8003534:	443b      	add	r3, r7
 8003536:	440b      	add	r3, r1
 8003538:	3b14      	subs	r3, #20
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b73      	cmp	r3, #115	; 0x73
 800353e:	d075      	beq.n	800362c <findShorterWay+0x62c>
 8003540:	2b73      	cmp	r3, #115	; 0x73
 8003542:	f300 82eb 	bgt.w	8003b1c <findShorterWay+0xb1c>
 8003546:	2b50      	cmp	r3, #80	; 0x50
 8003548:	dc66      	bgt.n	8003618 <findShorterWay+0x618>
 800354a:	2b23      	cmp	r3, #35	; 0x23
 800354c:	f2c0 82e6 	blt.w	8003b1c <findShorterWay+0xb1c>
 8003550:	3b23      	subs	r3, #35	; 0x23
 8003552:	2b2d      	cmp	r3, #45	; 0x2d
 8003554:	f200 82e2 	bhi.w	8003b1c <findShorterWay+0xb1c>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <findShorterWay+0x560>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003621 	.word	0x08003621
 8003564:	08003b1d 	.word	0x08003b1d
 8003568:	08003b1d 	.word	0x08003b1d
 800356c:	08003b1d 	.word	0x08003b1d
 8003570:	08003b1d 	.word	0x08003b1d
 8003574:	08003b1d 	.word	0x08003b1d
 8003578:	08003b1d 	.word	0x08003b1d
 800357c:	0800382f 	.word	0x0800382f
 8003580:	08003b1d 	.word	0x08003b1d
 8003584:	08003b1d 	.word	0x08003b1d
 8003588:	08003b1d 	.word	0x08003b1d
 800358c:	08003b1d 	.word	0x08003b1d
 8003590:	08003b1d 	.word	0x08003b1d
 8003594:	08003629 	.word	0x08003629
 8003598:	08003b1d 	.word	0x08003b1d
 800359c:	08003b1d 	.word	0x08003b1d
 80035a0:	08003b1d 	.word	0x08003b1d
 80035a4:	08003b1d 	.word	0x08003b1d
 80035a8:	08003b1d 	.word	0x08003b1d
 80035ac:	08003b1d 	.word	0x08003b1d
 80035b0:	08003b1d 	.word	0x08003b1d
 80035b4:	08003b1d 	.word	0x08003b1d
 80035b8:	08003b1d 	.word	0x08003b1d
 80035bc:	08003b1d 	.word	0x08003b1d
 80035c0:	08003b1d 	.word	0x08003b1d
 80035c4:	08003b1d 	.word	0x08003b1d
 80035c8:	08003b1d 	.word	0x08003b1d
 80035cc:	08003b1d 	.word	0x08003b1d
 80035d0:	08003b1d 	.word	0x08003b1d
 80035d4:	08003b1d 	.word	0x08003b1d
 80035d8:	08003b1d 	.word	0x08003b1d
 80035dc:	08003b1d 	.word	0x08003b1d
 80035e0:	08003b1d 	.word	0x08003b1d
 80035e4:	08003625 	.word	0x08003625
 80035e8:	08003b1d 	.word	0x08003b1d
 80035ec:	08003b1d 	.word	0x08003b1d
 80035f0:	08003b1d 	.word	0x08003b1d
 80035f4:	08003b1d 	.word	0x08003b1d
 80035f8:	08003b1d 	.word	0x08003b1d
 80035fc:	08003b1d 	.word	0x08003b1d
 8003600:	08003b1d 	.word	0x08003b1d
 8003604:	08003b1d 	.word	0x08003b1d
 8003608:	08003b1d 	.word	0x08003b1d
 800360c:	08003b1d 	.word	0x08003b1d
 8003610:	08003635 	.word	0x08003635
 8003614:	08003631 	.word	0x08003631
 8003618:	2b65      	cmp	r3, #101	; 0x65
 800361a:	f000 8256 	beq.w	8003aca <findShorterWay+0xaca>
 800361e:	e27d      	b.n	8003b1c <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8003620:	bf00      	nop
						break;
 8003622:	e27e      	b.n	8003b22 <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003624:	bf00      	nop
						break;
 8003626:	e27c      	b.n	8003b22 <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003628:	bf00      	nop
						break;
 800362a:	e27a      	b.n	8003b22 <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 800362c:	bf00      	nop
						break;
 800362e:	e278      	b.n	8003b22 <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8003630:	bf00      	nop
						break;
 8003632:	e276      	b.n	8003b22 <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8003634:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003638:	f103 030e 	add.w	r3, r3, #14
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003642:	f102 0214 	add.w	r2, r2, #20
 8003646:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003648:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800364c:	f103 030d 	add.w	r3, r3, #13
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003656:	f102 0218 	add.w	r2, r2, #24
 800365a:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 800365c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003660:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003664:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003668:	f102 0214 	add.w	r2, r2, #20
 800366c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003670:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800367a:	6809      	ldr	r1, [r1, #0]
 800367c:	6800      	ldr	r0, [r0, #0]
 800367e:	f001 f952 	bl	8004926 <setFcost>
 8003682:	eef0 7a40 	vmov.f32	s15, s0
 8003686:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8003690:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	ed93 7a01 	vldr	s14, [r3, #4]
 800369a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80036a6:	f103 030e 	add.w	r3, r3, #14
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	461a      	mov	r2, r3
 80036b0:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80036bc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80036c0:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	18d1      	adds	r1, r2, r3
 80036c8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80036d4:	f103 030d 	add.w	r3, r3, #13
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	3304      	adds	r3, #4
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	db07      	blt.n	8003708 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 80036f8:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 80036fa:	e212      	b.n	8003b22 <findShorterWay+0xb22>
 80036fc:	0800e95c 	.word	0x0800e95c
 8003700:	200011b0 	.word	0x200011b0
 8003704:	2000111c 	.word	0x2000111c
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003708:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800370c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003710:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003714:	f102 0214 	add.w	r2, r2, #20
 8003718:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800371c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003726:	6809      	ldr	r1, [r1, #0]
 8003728:	6800      	ldr	r0, [r0, #0]
 800372a:	f000 feef 	bl	800450c <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 800372e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003732:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003736:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800373a:	f102 0214 	add.w	r2, r2, #20
 800373e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003742:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800374c:	6809      	ldr	r1, [r1, #0]
 800374e:	6800      	ldr	r0, [r0, #0]
 8003750:	f000 ff0a 	bl	8004568 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8003754:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003758:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800375c:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003760:	f101 0114 	add.w	r1, r1, #20
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	f000 fe76 	bl	800445c <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003770:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800377c:	f103 030e 	add.w	r3, r3, #14
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	461a      	mov	r2, r3
 8003786:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003792:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003796:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	18d0      	adds	r0, r2, r3
 800379e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037aa:	f103 030d 	add.w	r3, r3, #13
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 80037b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037c0:	f103 030e 	add.w	r3, r3, #14
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	440b      	add	r3, r1
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80037d6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80037da:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 80037de:	6809      	ldr	r1, [r1, #0]
 80037e0:	18cc      	adds	r4, r1, r3
 80037e2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68d9      	ldr	r1, [r3, #12]
 80037ea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037ee:	f103 030d 	add.w	r3, r3, #13
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	440b      	add	r3, r1
 80037f6:	1e59      	subs	r1, r3, #1
 80037f8:	460b      	mov	r3, r1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	440b      	add	r3, r1
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4423      	add	r3, r4
 8003802:	3314      	adds	r3, #20
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800380c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4403      	add	r3, r0
 800381a:	3304      	adds	r3, #4
 800381c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 800381e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003822:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8003826:	0123      	lsls	r3, r4, #4
 8003828:	440b      	add	r3, r1
 800382a:	601a      	str	r2, [r3, #0]
						break;
 800382c:	e179      	b.n	8003b22 <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 800382e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003832:	f103 030e 	add.w	r3, r3, #14
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800383c:	f102 0214 	add.w	r2, r2, #20
 8003840:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003842:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003846:	f103 030d 	add.w	r3, r3, #13
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003850:	f102 0218 	add.w	r2, r2, #24
 8003854:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003856:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800385a:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800385e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003862:	f102 0214 	add.w	r2, r2, #20
 8003866:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800386a:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003874:	6809      	ldr	r1, [r1, #0]
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	f000 fe48 	bl	800450c <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 800387c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003880:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003884:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003888:	f102 0214 	add.w	r2, r2, #20
 800388c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003890:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800389a:	6809      	ldr	r1, [r1, #0]
 800389c:	6800      	ldr	r0, [r0, #0]
 800389e:	f000 fe63 	bl	8004568 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 80038a2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80038a6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80038aa:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 80038ae:	f101 0114 	add.w	r1, r1, #20
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 fdcf 	bl	800445c <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 80038be:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80038ca:	f103 030e 	add.w	r3, r3, #14
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	461a      	mov	r2, r3
 80038d4:	2334      	movs	r3, #52	; 0x34
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	3b34      	subs	r3, #52	; 0x34
 80038dc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80038e0:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	441a      	add	r2, r3
 80038e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68d9      	ldr	r1, [r3, #12]
 80038f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80038f4:	f103 030d 	add.w	r3, r3, #13
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	440b      	add	r3, r1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	214f      	movs	r1, #79	; 0x4f
 8003900:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8003902:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800390e:	f103 030e 	add.w	r3, r3, #14
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4413      	add	r3, r2
 8003916:	461a      	mov	r2, r3
 8003918:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003924:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003928:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	18d1      	adds	r1, r2, r3
 8003930:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800393c:	f103 030d 	add.w	r3, r3, #13
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800394a:	f103 030b 	add.w	r3, r3, #11
 800394e:	7818      	ldrb	r0, [r3, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3304      	adds	r3, #4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003962:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8003966:	0103      	lsls	r3, r0, #4
 8003968:	440b      	add	r3, r1
 800396a:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 800396c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003978:	f103 030e 	add.w	r3, r3, #14
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	461a      	mov	r2, r3
 8003982:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800398e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003992:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	18d1      	adds	r1, r2, r3
 800399a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039a6:	f103 030d 	add.w	r3, r3, #13
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039b4:	f103 030b 	add.w	r3, r3, #11
 80039b8:	7818      	ldrb	r0, [r3, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3308      	adds	r3, #8
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80039cc:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 80039d0:	0103      	lsls	r3, r0, #4
 80039d2:	440b      	add	r3, r1
 80039d4:	3304      	adds	r3, #4
 80039d6:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 80039d8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039e4:	f103 030e 	add.w	r3, r3, #14
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039f2:	f103 030b 	add.w	r3, r3, #11
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	ee07 2a90 	vmov	s15, r2
 80039fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a00:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003a04:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8003a12:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a1e:	f103 030d 	add.w	r3, r3, #13
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	1e5a      	subs	r2, r3, #1
 8003a28:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a2c:	f103 030b 	add.w	r3, r3, #11
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	ee07 2a90 	vmov	s15, r2
 8003a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003a3e:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	330c      	adds	r3, #12
 8003a48:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8003a4c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a58:	f103 030e 	add.w	r3, r3, #14
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003a6e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003a72:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	18d1      	adds	r1, r2, r3
 8003a7a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a86:	f103 030d 	add.w	r3, r3, #13
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	1e5a      	subs	r2, r3, #1
 8003a90:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a94:	f103 030b 	add.w	r3, r3, #11
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3314      	adds	r3, #20
 8003aae:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8003ab2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ab6:	f103 030b 	add.w	r3, r3, #11
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ac2:	f102 020b 	add.w	r2, r2, #11
 8003ac6:	7013      	strb	r3, [r2, #0]

						break;
 8003ac8:	e02b      	b.n	8003b22 <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8003aca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ace:	f103 030e 	add.w	r3, r3, #14
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003ad8:	f102 0214 	add.w	r2, r2, #20
 8003adc:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003ade:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ae2:	f103 030d 	add.w	r3, r3, #13
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003aec:	f102 0218 	add.w	r2, r2, #24
 8003af0:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8003af2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003af6:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003afa:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003afe:	f101 0114 	add.w	r1, r1, #20
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f000 fca7 	bl	800445c <updateParent>
						shorterWayFound = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b14:	f102 020f 	add.w	r2, r2, #15
 8003b18:	7013      	strb	r3, [r2, #0]
						break;
 8003b1a:	e002      	b.n	8003b22 <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f000 bc90 	b.w	8004442 <findShorterWay+0x1442>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8003b22:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b26:	f103 030f 	add.w	r3, r3, #15
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 8003b30:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b34:	f103 030d 	add.w	r3, r3, #13
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b40:	f102 020d 	add.w	r2, r2, #13
 8003b44:	7013      	strb	r3, [r2, #0]
 8003b46:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b4a:	f103 030d 	add.w	r3, r3, #13
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f67f acde 	bls.w	8003512 <findShorterWay+0x512>
 8003b56:	e000      	b.n	8003b5a <findShorterWay+0xb5a>
					break;
 8003b58:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8003b5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b5e:	f103 030f 	add.w	r3, r3, #15
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d113      	bne.n	8003b90 <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8003b68:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b6c:	f103 030e 	add.w	r3, r3, #14
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	3301      	adds	r3, #1
 8003b74:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b78:	f102 020e 	add.w	r2, r2, #14
 8003b7c:	7013      	strb	r3, [r2, #0]
 8003b7e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b82:	f103 030e 	add.w	r3, r3, #14
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f67f acbb 	bls.w	8003504 <findShorterWay+0x504>
 8003b8e:	e000      	b.n	8003b92 <findShorterWay+0xb92>
				break;
 8003b90:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8003b92:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b96:	f103 030f 	add.w	r3, r3, #15
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 8273 	bne.w	8004088 <findShorterWay+0x1088>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8003ba2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ba6:	f103 030b 	add.w	r3, r3, #11
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb0:	3b1c      	subs	r3, #28
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	f001 f81b 	bl	8004bf4 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8003bbe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 812c 	beq.w	8003e26 <findShorterWay+0xe26>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8003bce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8003bde:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8003bee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2334      	movs	r3, #52	; 0x34
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c02:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	441a      	add	r2, r3
 8003c0a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	2b73      	cmp	r3, #115	; 0x73
 8003c16:	d101      	bne.n	8003c1c <findShorterWay+0xc1c>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8003c18:	bf00      	nop
 8003c1a:	e013      	b.n	8003c44 <findShorterWay+0xc44>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8003c1c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	461a      	mov	r2, r3
 8003c26:	2334      	movs	r3, #52	; 0x34
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c30:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	441a      	add	r2, r3
 8003c38:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2144      	movs	r1, #68	; 0x44
 8003c42:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8003c44:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c50:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	3308      	adds	r3, #8
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c62:	ee17 2a90 	vmov	r2, s15
 8003c66:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8003c6e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c7a:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4413      	add	r3, r2
 8003c82:	330c      	adds	r3, #12
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c8c:	ee17 2a90 	vmov	r2, s15
 8003c90:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003c9e:	f102 020e 	add.w	r2, r2, #14
 8003ca2:	7013      	strb	r3, [r2, #0]
 8003ca4:	e01e      	b.n	8003ce4 <findShorterWay+0xce4>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8003ca6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003cae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cb2:	f103 030e 	add.w	r3, r3, #14
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003cbc:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003cc0:	0089      	lsls	r1, r1, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8003cce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cd2:	f103 030e 	add.w	r3, r3, #14
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003cde:	f102 020e 	add.w	r2, r2, #14
 8003ce2:	7013      	strb	r3, [r2, #0]
 8003ce4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ce8:	f103 030e 	add.w	r3, r3, #14
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d9d9      	bls.n	8003ca6 <findShorterWay+0xca6>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8003cf2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003d02:	f102 020e 	add.w	r2, r2, #14
 8003d06:	7013      	strb	r3, [r2, #0]
 8003d08:	e05f      	b.n	8003dca <findShorterWay+0xdca>
					for (j = 0 ; j < 4 ; j++){
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003d10:	f102 020d 	add.w	r2, r2, #13
 8003d14:	7013      	strb	r3, [r2, #0]
 8003d16:	e046      	b.n	8003da6 <findShorterWay+0xda6>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8003d18:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d1c:	f103 030e 	add.w	r3, r3, #14
 8003d20:	781c      	ldrb	r4, [r3, #0]
 8003d22:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d26:	f103 030d 	add.w	r3, r3, #13
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d30:	f103 030e 	add.w	r3, r3, #14
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d3c:	f103 030d 	add.w	r3, r3, #13
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003d46:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8003d4a:	00a4      	lsls	r4, r4, #2
 8003d4c:	4422      	add	r2, r4
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	440a      	add	r2, r1
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003d58:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8003d5c:	0080      	lsls	r0, r0, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8003d66:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d6a:	f103 030e 	add.w	r3, r3, #14
 8003d6e:	7819      	ldrb	r1, [r3, #0]
 8003d70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d74:	f103 030d 	add.w	r3, r3, #13
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003d7e:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003d82:	0089      	lsls	r1, r1, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8003d90:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d94:	f103 030d 	add.w	r3, r3, #13
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003da0:	f102 020d 	add.w	r2, r2, #13
 8003da4:	7013      	strb	r3, [r2, #0]
 8003da6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003daa:	f103 030d 	add.w	r3, r3, #13
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d9b1      	bls.n	8003d18 <findShorterWay+0xd18>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8003db4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003db8:	f103 030e 	add.w	r3, r3, #14
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003dc4:	f102 020e 	add.w	r2, r2, #14
 8003dc8:	7013      	strb	r3, [r2, #0]
 8003dca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dce:	f103 030e 	add.w	r3, r3, #14
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dd8:	f103 030b 	add.w	r3, r3, #11
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d393      	bcc.n	8003d0a <findShorterWay+0xd0a>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8003de2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003de6:	f103 030b 	add.w	r3, r3, #11
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003df2:	f102 020b 	add.w	r2, r2, #11
 8003df6:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8003df8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8003e08:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8003e18:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e24:	e124      	b.n	8004070 <findShorterWay+0x1070>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8003e26:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8003e36:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8003e46:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2334      	movs	r3, #52	; 0x34
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003e5a:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	441a      	add	r2, r3
 8003e62:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	2b73      	cmp	r3, #115	; 0x73
 8003e6e:	d101      	bne.n	8003e74 <findShorterWay+0xe74>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8003e70:	bf00      	nop
 8003e72:	e013      	b.n	8003e9c <findShorterWay+0xe9c>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8003e74:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2334      	movs	r3, #52	; 0x34
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003e88:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	441a      	add	r2, r3
 8003e90:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2144      	movs	r1, #68	; 0x44
 8003e9a:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8003e9c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ea8:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	4413      	add	r3, r2
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	edd3 7a00 	vldr	s15, [r3]
 8003eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eba:	ee17 2a90 	vmov	r2, s15
 8003ebe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8003ec6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ed2:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	330c      	adds	r3, #12
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee4:	ee17 2a90 	vmov	r2, s15
 8003ee8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ef6:	f102 020e 	add.w	r2, r2, #14
 8003efa:	7013      	strb	r3, [r2, #0]
 8003efc:	e01e      	b.n	8003f3c <findShorterWay+0xf3c>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8003efe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f0a:	f103 030e 	add.w	r3, r3, #14
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003f14:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003f18:	0089      	lsls	r1, r1, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8003f26:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f2a:	f103 030e 	add.w	r3, r3, #14
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f36:	f102 020e 	add.w	r2, r2, #14
 8003f3a:	7013      	strb	r3, [r2, #0]
 8003f3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f40:	f103 030e 	add.w	r3, r3, #14
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d9d9      	bls.n	8003efe <findShorterWay+0xefe>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8003f4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f5a:	f102 020e 	add.w	r2, r2, #14
 8003f5e:	7013      	strb	r3, [r2, #0]
 8003f60:	e05f      	b.n	8004022 <findShorterWay+0x1022>
					for (j = 0 ; j < 4 ; j++){
 8003f62:	2300      	movs	r3, #0
 8003f64:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f68:	f102 020d 	add.w	r2, r2, #13
 8003f6c:	7013      	strb	r3, [r2, #0]
 8003f6e:	e046      	b.n	8003ffe <findShorterWay+0xffe>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8003f70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f74:	f103 030e 	add.w	r3, r3, #14
 8003f78:	781c      	ldrb	r4, [r3, #0]
 8003f7a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f7e:	f103 030d 	add.w	r3, r3, #13
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f88:	f103 030e 	add.w	r3, r3, #14
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f94:	f103 030d 	add.w	r3, r3, #13
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003f9e:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8003fa2:	00a4      	lsls	r4, r4, #2
 8003fa4:	4422      	add	r2, r4
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	440a      	add	r2, r1
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003fb0:	f6a1 715c 	subw	r1, r1, #3932	; 0xf5c
 8003fb4:	0080      	lsls	r0, r0, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8003fbe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fc2:	f103 030e 	add.w	r3, r3, #14
 8003fc6:	7819      	ldrb	r1, [r3, #0]
 8003fc8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fcc:	f103 030d 	add.w	r3, r3, #13
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003fd6:	f6a2 725c 	subw	r2, r2, #3932	; 0xf5c
 8003fda:	0089      	lsls	r1, r1, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8003fe8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fec:	f103 030d 	add.w	r3, r3, #13
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ff8:	f102 020d 	add.w	r2, r2, #13
 8003ffc:	7013      	strb	r3, [r2, #0]
 8003ffe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004002:	f103 030d 	add.w	r3, r3, #13
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d9b1      	bls.n	8003f70 <findShorterWay+0xf70>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 800400c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004010:	f103 030e 	add.w	r3, r3, #14
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	3301      	adds	r3, #1
 8004018:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800401c:	f102 020e 	add.w	r2, r2, #14
 8004020:	7013      	strb	r3, [r2, #0]
 8004022:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004026:	f103 030e 	add.w	r3, r3, #14
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004030:	f103 030b 	add.w	r3, r3, #11
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d393      	bcc.n	8003f62 <findShorterWay+0xf62>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 800403a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800403e:	f103 030b 	add.w	r3, r3, #11
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800404a:	f102 020b 	add.w	r2, r2, #11
 800404e:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004050:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004060:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8004070:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004074:	f103 030a 	add.w	r3, r3, #10
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004080:	f102 020a 	add.w	r2, r2, #10
 8004084:	7013      	strb	r3, [r2, #0]
 8004086:	e091      	b.n	80041ac <findShorterWay+0x11ac>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8004088:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004094:	f102 020e 	add.w	r2, r2, #14
 8004098:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 800409a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80040a6:	f102 020d 	add.w	r2, r2, #13
 80040aa:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 80040ac:	e068      	b.n	8004180 <findShorterWay+0x1180>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 80040ae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040b2:	f103 030e 	add.w	r3, r3, #14
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80040c4:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	18d1      	adds	r1, r2, r3
 80040cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040d0:	f103 030d 	add.w	r3, r3, #13
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	330c      	adds	r3, #12
 80040e2:	edd3 7a00 	vldr	s15, [r3]
 80040e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ea:	ee17 3a90 	vmov	r3, s15
 80040ee:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80040f2:	f102 0214 	add.w	r2, r2, #20
 80040f6:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 80040f8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040fc:	f103 030e 	add.w	r3, r3, #14
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800410e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	18d1      	adds	r1, r2, r3
 8004116:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800411a:	f103 030d 	add.w	r3, r3, #13
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	3310      	adds	r3, #16
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004134:	ee17 3a90 	vmov	r3, s15
 8004138:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800413c:	f102 0218 	add.w	r2, r2, #24
 8004140:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 8004142:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004146:	f103 0314 	add.w	r3, r3, #20
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004150:	f102 020e 	add.w	r2, r2, #14
 8004154:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8004156:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800415a:	f103 0318 	add.w	r3, r3, #24
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004164:	f102 020d 	add.w	r2, r2, #13
 8004168:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 800416a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800416e:	f103 030c 	add.w	r3, r3, #12
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800417a:	f102 020c 	add.w	r2, r2, #12
 800417e:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8004180:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004184:	f103 030e 	add.w	r3, r3, #14
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2234      	movs	r2, #52	; 0x34
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004194:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	441a      	add	r2, r3
 800419c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041a0:	f103 030d 	add.w	r3, r3, #13
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	2b73      	cmp	r3, #115	; 0x73
 80041aa:	d180      	bne.n	80040ae <findShorterWay+0x10ae>
    while(!shorterWayFound){
 80041ac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041b0:	f103 030f 	add.w	r3, r3, #15
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f43e aff9 	beq.w	80031ae <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 80041bc:	49a4      	ldr	r1, [pc, #656]	; (8004450 <findShorterWay+0x1450>)
 80041be:	48a5      	ldr	r0, [pc, #660]	; (8004454 <findShorterWay+0x1454>)
 80041c0:	f004 fa98 	bl	80086f4 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 80041c4:	210d      	movs	r1, #13
 80041c6:	48a3      	ldr	r0, [pc, #652]	; (8004454 <findShorterWay+0x1454>)
 80041c8:	f004 fa7c 	bl	80086c4 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 80041cc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041d0:	f103 030c 	add.w	r3, r3, #12
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80041de:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 80041e6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80041f2:	f102 020e 	add.w	r2, r2, #14
 80041f6:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 80041f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004204:	f102 020d 	add.w	r2, r2, #13
 8004208:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 800420a:	2300      	movs	r3, #0
 800420c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004210:	f102 0208 	add.w	r2, r2, #8
 8004214:	7013      	strb	r3, [r2, #0]
 8004216:	e0d1      	b.n	80043bc <findShorterWay+0x13bc>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8004218:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800421c:	f103 030e 	add.w	r3, r3, #14
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2234      	movs	r2, #52	; 0x34
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800422c:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	441a      	add	r2, r3
 8004234:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004238:	f103 030d 	add.w	r3, r3, #13
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	2b65      	cmp	r3, #101	; 0x65
 8004242:	d101      	bne.n	8004248 <findShorterWay+0x1248>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8004244:	bf00      	nop
 8004246:	e02c      	b.n	80042a2 <findShorterWay+0x12a2>
    	}else if (Gridcopy[i][j] == 's'){
 8004248:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800424c:	f103 030e 	add.w	r3, r3, #14
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2234      	movs	r2, #52	; 0x34
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800425c:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	441a      	add	r2, r3
 8004264:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004268:	f103 030d 	add.w	r3, r3, #13
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	2b73      	cmp	r3, #115	; 0x73
 8004272:	d101      	bne.n	8004278 <findShorterWay+0x1278>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8004274:	bf00      	nop
 8004276:	e014      	b.n	80042a2 <findShorterWay+0x12a2>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8004278:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800427c:	f103 030e 	add.w	r3, r3, #14
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2234      	movs	r2, #52	; 0x34
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800428c:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	441a      	add	r2, r3
 8004294:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004298:	f103 030d 	add.w	r3, r3, #13
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2149      	movs	r1, #73	; 0x49
 80042a0:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 80042a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042a6:	f103 0308 	add.w	r3, r3, #8
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80042b2:	f102 0204 	add.w	r2, r2, #4
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80042be:	f102 020e 	add.w	r2, r2, #14
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 80042c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042ca:	f103 0308 	add.w	r3, r3, #8
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80042d6:	f102 0204 	add.w	r2, r2, #4
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80042e2:	f102 020d 	add.w	r2, r2, #13
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 80042ea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042ee:	f103 030e 	add.w	r3, r3, #14
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004300:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	18d1      	adds	r1, r2, r3
 8004308:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800430c:	f103 030d 	add.w	r3, r3, #13
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	330c      	adds	r3, #12
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004326:	ee17 3a90 	vmov	r3, s15
 800432a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800432e:	f102 0214 	add.w	r2, r2, #20
 8004332:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 8004334:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004338:	f103 030e 	add.w	r3, r3, #14
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800434a:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	18d1      	adds	r1, r2, r3
 8004352:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004356:	f103 030d 	add.w	r3, r3, #13
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	3310      	adds	r3, #16
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004370:	ee17 3a90 	vmov	r3, s15
 8004374:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004378:	f102 0218 	add.w	r2, r2, #24
 800437c:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 800437e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004382:	f103 0314 	add.w	r3, r3, #20
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800438c:	f102 020e 	add.w	r2, r2, #14
 8004390:	7013      	strb	r3, [r2, #0]
		j = position[1];
 8004392:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004396:	f103 0318 	add.w	r3, r3, #24
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043a0:	f102 020d 	add.w	r2, r2, #13
 80043a4:	7013      	strb	r3, [r2, #0]
    for (uint8_t  k = 0 ; k < numberOfPositions + 1 ; k++){
 80043a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043aa:	f103 0308 	add.w	r3, r3, #8
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043b6:	f102 0208 	add.w	r2, r2, #8
 80043ba:	7013      	strb	r3, [r2, #0]
 80043bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043c0:	f103 030c 	add.w	r3, r3, #12
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043ca:	f103 0308 	add.w	r3, r3, #8
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f4bf af21 	bcs.w	8004218 <findShorterWay+0x1218>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80043d6:	2300      	movs	r3, #0
 80043d8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043dc:	f102 0207 	add.w	r2, r2, #7
 80043e0:	7013      	strb	r3, [r2, #0]
 80043e2:	e01c      	b.n	800441e <findShorterWay+0x141e>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80043e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043e8:	f103 0307 	add.w	r3, r3, #7
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2234      	movs	r2, #52	; 0x34
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043f8:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4814      	ldr	r0, [pc, #80]	; (8004454 <findShorterWay+0x1454>)
 8004404:	f004 f976 	bl	80086f4 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004408:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800440c:	f103 0307 	add.w	r3, r3, #7
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004418:	f102 0207 	add.w	r2, r2, #7
 800441c:	7013      	strb	r3, [r2, #0]
 800441e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004422:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	7a1b      	ldrb	r3, [r3, #8]
 800442a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800442e:	f102 0207 	add.w	r2, r2, #7
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d3d5      	bcc.n	80043e4 <findShorterWay+0x13e4>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n_______________Gracias por viajar con nuestra linea Astarlines____________________\n");
 8004438:	4907      	ldr	r1, [pc, #28]	; (8004458 <findShorterWay+0x1458>)
 800443a:	4806      	ldr	r0, [pc, #24]	; (8004454 <findShorterWay+0x1454>)
 800443c:	f004 f95a 	bl	80086f4 <writeMsg>

    return 1;
 8004440:	2301      	movs	r3, #1


}
 8004442:	4618      	mov	r0, r3
 8004444:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bd90      	pop	{r4, r7, pc}
 800444e:	bf00      	nop
 8004450:	0800e984 	.word	0x0800e984
 8004454:	2000111c 	.word	0x2000111c
 8004458:	0800e9c4 	.word	0x0800e9c4

0800445c <updateParent>:

// esta funcion actuazliza en la matriz de costs el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa9a 	bl	80049a4 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4413      	add	r3, r2
 8004482:	461a      	mov	r2, r3
 8004484:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	18d1      	adds	r1, r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3304      	adds	r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	ee07 0a90 	vmov	s15, r0
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	440b      	add	r3, r1
 80044b4:	330c      	adds	r3, #12
 80044b6:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c0:	b2d8      	uxtb	r0, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	18d1      	adds	r1, r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3304      	adds	r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	1e5a      	subs	r2, r3, #1
 80044ec:	ee07 0a90 	vmov	s15, r0
 80044f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	3310      	adds	r3, #16
 8004500:	edc3 7a00 	vstr	s15, [r3]

}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 800450c:	b5b0      	push	{r4, r5, r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4413      	add	r3, r2
 8004524:	461a      	mov	r2, r3
 8004526:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	18d5      	adds	r5, r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4413      	add	r3, r2
 8004542:	1e5c      	subs	r4, r3, #1
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f905 	bl	8004758 <setGcost>
 800454e:	eef0 7a40 	vmov.f32	s15, s0
 8004552:	4623      	mov	r3, r4
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4423      	add	r3, r4
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	442b      	add	r3, r5
 800455c:	edc3 7a00 	vstr	s15, [r3]
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bdb0      	pop	{r4, r5, r7, pc}

08004568 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4413      	add	r3, r2
 8004580:	461a      	mov	r2, r3
 8004582:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	18d5      	adds	r5, r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4413      	add	r3, r2
 800459e:	1e5c      	subs	r4, r3, #1
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f9bd 	bl	8004926 <setFcost>
 80045ac:	eef0 7a40 	vmov.f32	s15, s0
 80045b0:	4623      	mov	r3, r4
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4423      	add	r3, r4
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	442b      	add	r3, r5
 80045ba:	3304      	adds	r3, #4
 80045bc:	edc3 7a00 	vstr	s15, [r3]

}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdb0      	pop	{r4, r5, r7, pc}

080045c8 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	6838      	ldr	r0, [r7, #0]
 80045e8:	f000 fa41 	bl	8004a6e <findEnd>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 80045f2:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80045f4:	2300      	movs	r3, #0
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e0a3      	b.n	8004742 <setHeuristic+0x17a>
		return RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e0a8      	b.n	8004750 <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80045fe:	2300      	movs	r3, #0
 8004600:	77bb      	strb	r3, [r7, #30]
 8004602:	e095      	b.n	8004730 <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8004604:	7ffa      	ldrb	r2, [r7, #31]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bfb8      	it	lt
 8004610:	425b      	neglt	r3, r3
 8004612:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8004614:	7fba      	ldrb	r2, [r7, #30]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfb8      	it	lt
 8004620:	425b      	neglt	r3, r3
 8004622:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	dc3f      	bgt.n	80046ac <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004644:	ee17 3a90 	vmov	r3, s15
 8004648:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	edd3 6a00 	vldr	s13, [r3]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	bfb8      	it	lt
 8004664:	425b      	neglt	r3, r3
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467a:	ee17 3a90 	vmov	r3, s15
 800467e:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8004680:	7ffb      	ldrb	r3, [r7, #31]
 8004682:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	18d1      	adds	r1, r2, r3
 800468e:	7fba      	ldrb	r2, [r7, #30]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	440b      	add	r3, r1
 80046a4:	3308      	adds	r3, #8
 80046a6:	edc3 7a00 	vstr	s15, [r3]
 80046aa:	e03e      	b.n	800472a <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046c4:	ee17 3a90 	vmov	r3, s15
 80046c8:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	edd3 6a00 	vldr	s13, [r3]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfb8      	it	lt
 80046e4:	425b      	neglt	r3, r3
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fa:	ee17 3a90 	vmov	r3, s15
 80046fe:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8004700:	7ffb      	ldrb	r3, [r7, #31]
 8004702:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	18d1      	adds	r1, r2, r3
 800470e:	7fba      	ldrb	r2, [r7, #30]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	3308      	adds	r3, #8
 8004726:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800472a:	7fbb      	ldrb	r3, [r7, #30]
 800472c:	3301      	adds	r3, #1
 800472e:	77bb      	strb	r3, [r7, #30]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	7a5b      	ldrb	r3, [r3, #9]
 8004734:	7fba      	ldrb	r2, [r7, #30]
 8004736:	429a      	cmp	r2, r3
 8004738:	f4ff af64 	bcc.w	8004604 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800473c:	7ffb      	ldrb	r3, [r7, #31]
 800473e:	3301      	adds	r3, #1
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	7a1b      	ldrb	r3, [r3, #8]
 8004746:	7ffa      	ldrb	r2, [r7, #31]
 8004748:	429a      	cmp	r2, r3
 800474a:	f4ff af58 	bcc.w	80045fe <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 800474e:	2301      	movs	r3, #1

}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	bfb8      	it	lt
 8004780:	425b      	neglt	r3, r3
 8004782:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfb8      	it	lt
 8004792:	425b      	neglt	r3, r3
 8004794:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d05d      	beq.n	8004866 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	1e5a      	subs	r2, r3, #1
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d052      	beq.n	8004866 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	dc25      	bgt.n	800481a <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80047e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	ed93 7a00 	vldr	s14, [r3]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bfb8      	it	lt
 80047fe:	425b      	neglt	r3, r3
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004814:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004818:	e077      	b.n	800490a <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	ed93 7a00 	vldr	s14, [r3]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	425b      	neglt	r3, r3
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004858:	ed97 7a07 	vldr	s14, [r7, #28]
 800485c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004860:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004864:	e051      	b.n	800490a <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	dc25      	bgt.n	80048c0 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	ed93 7a01 	vldr	s14, [r3, #4]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004888:	ed97 7a07 	vldr	s14, [r7, #28]
 800488c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004890:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	ed93 7a00 	vldr	s14, [r3]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bfb8      	it	lt
 80048a4:	425b      	neglt	r3, r3
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80048b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
 80048be:	e024      	b.n	800490a <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80048d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048dc:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	ed93 7a00 	vldr	s14, [r3]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bfb8      	it	lt
 80048f0:	425b      	neglt	r3, r3
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8004902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	ee07 3a90 	vmov	s15, r3
}
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ff0d 	bl	8004758 <setGcost>
 800493e:	eef0 7a40 	vmov.f32	s15, s0
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4413      	add	r3, r2
 8004958:	461a      	mov	r2, r3
 800495a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	18d1      	adds	r1, r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4413      	add	r3, r2
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	440b      	add	r3, r1
 8004982:	3308      	adds	r3, #8
 8004984:	edd3 7a00 	vldr	s15, [r3]
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	ee07 3a90 	vmov	s15, r3

}
 800499a:	eeb0 0a67 	vmov.f32	s0, s15
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	1e5a      	subs	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10c      	bne.n	80049dc <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	3304      	adds	r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	1e5a      	subs	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d101      	bne.n	80049dc <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 80049d8:	bf00      	nop
 80049da:	e00c      	b.n	80049f6 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8004a02:	b480      	push	{r7}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
 8004a12:	e020      	b.n	8004a56 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004a14:	2300      	movs	r3, #0
 8004a16:	75bb      	strb	r3, [r7, #22]
 8004a18:	e015      	b.n	8004a46 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2234      	movs	r2, #52	; 0x34
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	441a      	add	r2, r3
 8004a26:	7dbb      	ldrb	r3, [r7, #22]
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	2b73      	cmp	r3, #115	; 0x73
 8004a2c:	d107      	bne.n	8004a3e <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8004a2e:	7dfa      	ldrb	r2, [r7, #23]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8004a34:	7dba      	ldrb	r2, [r7, #22]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e011      	b.n	8004a62 <findStart+0x60>
			}else{
				__NOP();
 8004a3e:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004a40:	7dbb      	ldrb	r3, [r7, #22]
 8004a42:	3301      	adds	r3, #1
 8004a44:	75bb      	strb	r3, [r7, #22]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	7a5b      	ldrb	r3, [r3, #9]
 8004a4a:	7dba      	ldrb	r2, [r7, #22]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3e4      	bcc.n	8004a1a <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	3301      	adds	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	7a1b      	ldrb	r3, [r3, #8]
 8004a5a:	7dfa      	ldrb	r2, [r7, #23]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3d9      	bcc.n	8004a14 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8004a60:	2300      	movs	r3, #0



}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75fb      	strb	r3, [r7, #23]
 8004a7e:	e020      	b.n	8004ac2 <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004a80:	2300      	movs	r3, #0
 8004a82:	75bb      	strb	r3, [r7, #22]
 8004a84:	e015      	b.n	8004ab2 <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2234      	movs	r2, #52	; 0x34
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	441a      	add	r2, r3
 8004a92:	7dbb      	ldrb	r3, [r7, #22]
 8004a94:	5cd3      	ldrb	r3, [r2, r3]
 8004a96:	2b65      	cmp	r3, #101	; 0x65
 8004a98:	d107      	bne.n	8004aaa <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8004a9a:	7dfa      	ldrb	r2, [r7, #23]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8004aa0:	7dba      	ldrb	r2, [r7, #22]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e011      	b.n	8004ace <findEnd+0x60>
			}else{
				__NOP();
 8004aaa:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004aac:	7dbb      	ldrb	r3, [r7, #22]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	75bb      	strb	r3, [r7, #22]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	7a5b      	ldrb	r3, [r3, #9]
 8004ab6:	7dba      	ldrb	r2, [r7, #22]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3e4      	bcc.n	8004a86 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	7a1b      	ldrb	r3, [r3, #8]
 8004ac6:	7dfa      	ldrb	r2, [r7, #23]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3d9      	bcc.n	8004a80 <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8004acc:	2300      	movs	r3, #0

}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
 8004aea:	e03d      	b.n	8004b68 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8004aec:	2300      	movs	r3, #0
 8004aee:	75bb      	strb	r3, [r7, #22]
 8004af0:	e031      	b.n	8004b56 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	7a5b      	ldrb	r3, [r3, #9]
 8004af6:	7dba      	ldrb	r2, [r7, #22]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d109      	bne.n	8004b10 <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2234      	movs	r2, #52	; 0x34
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	441a      	add	r2, r3
 8004b08:	7dbb      	ldrb	r3, [r7, #22]
 8004b0a:	210d      	movs	r1, #13
 8004b0c:	54d1      	strb	r1, [r2, r3]
 8004b0e:	e01f      	b.n	8004b50 <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8004b10:	7dba      	ldrb	r2, [r7, #22]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	7a5b      	ldrb	r3, [r3, #9]
 8004b16:	3301      	adds	r3, #1
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d109      	bne.n	8004b30 <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	2234      	movs	r2, #52	; 0x34
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	441a      	add	r2, r3
 8004b28:	7dbb      	ldrb	r3, [r7, #22]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	54d1      	strb	r1, [r2, r3]
 8004b2e:	e00f      	b.n	8004b50 <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2234      	movs	r2, #52	; 0x34
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	18d0      	adds	r0, r2, r3
 8004b3c:	7db9      	ldrb	r1, [r7, #22]
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2234      	movs	r2, #52	; 0x34
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	441a      	add	r2, r3
 8004b4a:	7dbb      	ldrb	r3, [r7, #22]
 8004b4c:	5c41      	ldrb	r1, [r0, r1]
 8004b4e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8004b50:	7dbb      	ldrb	r3, [r7, #22]
 8004b52:	3301      	adds	r3, #1
 8004b54:	75bb      	strb	r3, [r7, #22]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	7a5b      	ldrb	r3, [r3, #9]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	7dbb      	ldrb	r3, [r7, #22]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	dac7      	bge.n	8004af2 <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	3301      	adds	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	7a1b      	ldrb	r3, [r3, #8]
 8004b6c:	7dfa      	ldrb	r2, [r7, #23]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3bc      	bcc.n	8004aec <buildMatrixCopy+0x12>
			}
		}
	}

}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8004b90:	e00a      	b.n	8004ba8 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2234      	movs	r2, #52	; 0x34
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2234      	movs	r2, #52	; 0x34
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1eb      	bne.n	8004b92 <getRows+0x12>

	}

	return counterRows;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8004bd4:	e002      	b.n	8004bdc <getColums+0x14>

		counterColumns++;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f7      	bne.n	8004bd6 <getColums+0xe>

	}

	return counterColumns;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8004c0e:	2300      	movs	r3, #0
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e04d      	b.n	8004cb0 <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8004c14:	2300      	movs	r3, #0
 8004c16:	77bb      	strb	r3, [r7, #30]
 8004c18:	e034      	b.n	8004c84 <findLesserValue+0x90>
			if (i == j){
 8004c1a:	7ffa      	ldrb	r2, [r7, #31]
 8004c1c:	7fbb      	ldrb	r3, [r7, #30]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d101      	bne.n	8004c26 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8004c22:	bf00      	nop
 8004c24:	e02b      	b.n	8004c7e <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8004c32:	7fbb      	ldrb	r3, [r7, #30]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8004c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d41a      	bmi.n	8004c7e <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4413      	add	r3, r2
 8004c50:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8004c54:	7fbb      	ldrb	r3, [r7, #30]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8004c60:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d104      	bne.n	8004c74 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c72:	e004      	b.n	8004c7e <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8004c7c:	e006      	b.n	8004c8c <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8004c7e:	7fbb      	ldrb	r3, [r7, #30]
 8004c80:	3301      	adds	r3, #1
 8004c82:	77bb      	strb	r3, [r7, #30]
 8004c84:	7fba      	ldrb	r2, [r7, #30]
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3c6      	bcc.n	8004c1a <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8004c8c:	7fba      	ldrb	r2, [r7, #30]
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d10a      	bne.n	8004caa <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8004c94:	7ffa      	ldrb	r2, [r7, #31]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8004ca8:	e006      	b.n	8004cb8 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	3301      	adds	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	7ffa      	ldrb	r2, [r7, #31]
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3ad      	bcc.n	8004c14 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d076      	beq.n	8004db0 <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e06e      	b.n	8004da6 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4413      	add	r3, r2
 8004cd0:	edd3 6a00 	vldr	s13, [r3]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cde:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77bb      	strb	r3, [r7, #30]
 8004ce6:	e045      	b.n	8004d74 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8004ce8:	7fbb      	ldrb	r3, [r7, #30]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	4413      	add	r3, r2
 8004cf0:	edd3 6a00 	vldr	s13, [r3]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cfe:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8004d02:	7ffa      	ldrb	r2, [r7, #31]
 8004d04:	7fbb      	ldrb	r3, [r7, #30]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d101      	bne.n	8004d0e <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8004d0a:	bf00      	nop
 8004d0c:	e02f      	b.n	8004d6e <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8004d0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d16:	eef4 7a47 	vcmp.f32	s15, s14
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	d11c      	bne.n	8004d5a <findLesserValue+0x166>
 8004d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d28:	eef4 7a47 	vcmp.f32	s15, s14
 8004d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d30:	d113      	bne.n	8004d5a <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d3e:	7fbb      	ldrb	r3, [r7, #30]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	d900      	bls.n	8004d56 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8004d54:	e014      	b.n	8004d80 <findLesserValue+0x18c>
						__NOP();
 8004d56:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8004d58:	e009      	b.n	8004d6e <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8004d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d62:	eef4 7a47 	vcmp.f32	s15, s14
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d108      	bne.n	8004d7e <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8004d6c:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8004d6e:	7fbb      	ldrb	r3, [r7, #30]
 8004d70:	3301      	adds	r3, #1
 8004d72:	77bb      	strb	r3, [r7, #30]
 8004d74:	7fba      	ldrb	r2, [r7, #30]
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d3b5      	bcc.n	8004ce8 <findLesserValue+0xf4>
 8004d7c:	e000      	b.n	8004d80 <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8004d7e:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8004d80:	7fba      	ldrb	r2, [r7, #30]
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d10b      	bne.n	8004da0 <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8004d88:	7ffa      	ldrb	r2, [r7, #31]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8004d9c:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8004d9e:	e008      	b.n	8004db2 <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	3301      	adds	r3, #1
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	7ffa      	ldrb	r2, [r7, #31]
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d38c      	bcc.n	8004cc8 <findLesserValue+0xd4>
}
 8004dae:	e000      	b.n	8004db2 <findLesserValue+0x1be>
		__NOP();
 8004db0:	bf00      	nop
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	db0b      	blt.n	8004dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	f003 021f 	and.w	r2, r3, #31
 8004dd8:	4907      	ldr	r1, [pc, #28]	; (8004df8 <__NVIC_EnableIRQ+0x38>)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2001      	movs	r0, #1
 8004de2:	fa00 f202 	lsl.w	r2, r0, r2
 8004de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000e100 	.word	0xe000e100

08004dfc <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <inTIM4+0x30>)
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <inTIM4+0x34>)
 8004e04:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <inTIM4+0x30>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <inTIM4+0x30>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <inTIM4+0x30>)
 8004e14:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e18:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8004e1a:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <inTIM4+0x30>)
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8004e20:	4802      	ldr	r0, [pc, #8]	; (8004e2c <inTIM4+0x30>)
 8004e22:	f000 f807 	bl	8004e34 <BasicTimer_Config>

}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200002d8 	.word	0x200002d8
 8004e30:	40000800 	.word	0x40000800

08004e34 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e44:	b672      	cpsid	i
}
 8004e46:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a85      	ldr	r2, [pc, #532]	; (8005064 <BasicTimer_Config+0x230>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d106      	bne.n	8004e60 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8004e52:	4b85      	ldr	r3, [pc, #532]	; (8005068 <BasicTimer_Config+0x234>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	4a84      	ldr	r2, [pc, #528]	; (8005068 <BasicTimer_Config+0x234>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5e:	e030      	b.n	8004ec2 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d106      	bne.n	8004e78 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004e6a:	4b7f      	ldr	r3, [pc, #508]	; (8005068 <BasicTimer_Config+0x234>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	; (8005068 <BasicTimer_Config+0x234>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	e024      	b.n	8004ec2 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a7b      	ldr	r2, [pc, #492]	; (800506c <BasicTimer_Config+0x238>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d106      	bne.n	8004e90 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004e82:	4b79      	ldr	r3, [pc, #484]	; (8005068 <BasicTimer_Config+0x234>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a78      	ldr	r2, [pc, #480]	; (8005068 <BasicTimer_Config+0x234>)
 8004e88:	f043 0302 	orr.w	r3, r3, #2
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	e018      	b.n	8004ec2 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a76      	ldr	r2, [pc, #472]	; (8005070 <BasicTimer_Config+0x23c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d106      	bne.n	8004ea8 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004e9a:	4b73      	ldr	r3, [pc, #460]	; (8005068 <BasicTimer_Config+0x234>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a72      	ldr	r2, [pc, #456]	; (8005068 <BasicTimer_Config+0x234>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	e00c      	b.n	8004ec2 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a71      	ldr	r2, [pc, #452]	; (8005074 <BasicTimer_Config+0x240>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d106      	bne.n	8004ec0 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004eb2:	4b6d      	ldr	r3, [pc, #436]	; (8005068 <BasicTimer_Config+0x234>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a6c      	ldr	r2, [pc, #432]	; (8005068 <BasicTimer_Config+0x234>)
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	e000      	b.n	8004ec2 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8004ec0:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ed0:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 80d3 	bne.w	800508c <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0210 	bic.w	r2, r2, #16
 8004ef4:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2ba0      	cmp	r3, #160	; 0xa0
 8004f00:	d022      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2bc8      	cmp	r3, #200	; 0xc8
 8004f06:	d01f      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004f0e:	d01b      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f16:	d017      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f1e:	d013      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004f26:	d00f      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004f2e:	d00b      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004f36:	d007      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004f3e:	d003      	beq.n	8004f48 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f46:	d10b      	bne.n	8004f60 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2264      	movs	r2, #100	; 0x64
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f5e:	e07c      	b.n	800505a <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f66:	d029      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f6e:	d025      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d020      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004f80:	d01c      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d017      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d012      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00d      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004fa6:	d009      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f242 3228 	movw	r2, #9000	; 0x2328
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10c      	bne.n	8004fd6 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	3a01      	subs	r2, #1
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fd4:	e041      	b.n	800505a <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004fdc:	d028      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d023      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f247 5230 	movw	r2, #30000	; 0x7530
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01e      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d019      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005002:	4293      	cmp	r3, r2
 8005004:	d014      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f64e 2260 	movw	r2, #60000	; 0xea60
 800500c:	4293      	cmp	r3, r2
 800500e:	d00f      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a19      	ldr	r2, [pc, #100]	; (8005078 <BasicTimer_Config+0x244>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a18      	ldr	r2, [pc, #96]	; (800507c <BasicTimer_Config+0x248>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a17      	ldr	r2, [pc, #92]	; (8005080 <BasicTimer_Config+0x24c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <BasicTimer_Config+0x250>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	3a01      	subs	r2, #1
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005040:	e00b      	b.n	800505a <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <BasicTimer_Config+0x254>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	3a01      	subs	r2, #1
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
 8005062:	e027      	b.n	80050b4 <BasicTimer_Config+0x280>
 8005064:	40010000 	.word	0x40010000
 8005068:	40023800 	.word	0x40023800
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	00011170 	.word	0x00011170
 800507c:	00013880 	.word	0x00013880
 8005080:	00015f90 	.word	0x00015f90
 8005084:	000186a0 	.word	0x000186a0
 8005088:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0210 	orr.w	r2, r2, #16
 800509a:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3a01      	subs	r2, #1
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3a01      	subs	r2, #1
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7c1b      	ldrb	r3, [r3, #16]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d12d      	bne.n	8005118 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d103      	bne.n	80050de <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 80050d6:	201c      	movs	r0, #28
 80050d8:	f7ff fe72 	bl	8004dc0 <__NVIC_EnableIRQ>
 80050dc:	e024      	b.n	8005128 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <BasicTimer_Config+0x300>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 80050e8:	201d      	movs	r0, #29
 80050ea:	f7ff fe69 	bl	8004dc0 <__NVIC_EnableIRQ>
 80050ee:	e01b      	b.n	8005128 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a10      	ldr	r2, [pc, #64]	; (8005138 <BasicTimer_Config+0x304>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d103      	bne.n	8005102 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 80050fa:	201e      	movs	r0, #30
 80050fc:	f7ff fe60 	bl	8004dc0 <__NVIC_EnableIRQ>
 8005100:	e012      	b.n	8005128 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a0d      	ldr	r2, [pc, #52]	; (800513c <BasicTimer_Config+0x308>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d103      	bne.n	8005114 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 800510c:	2032      	movs	r0, #50	; 0x32
 800510e:	f7ff fe57 	bl	8004dc0 <__NVIC_EnableIRQ>
 8005112:	e009      	b.n	8005128 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8005114:	bf00      	nop
 8005116:	e007      	b.n	8005128 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005128:	b662      	cpsie	i
}
 800512a:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00

08005140 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005144:	bf00      	nop
}
 8005146:	bf00      	nop
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005154:	bf00      	nop
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005164:	bf00      	nop
}
 8005166:	bf00      	nop
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005174:	bf00      	nop
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005184:	bf00      	nop
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005194:	bf00      	nop
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051a4:	bf00      	nop
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051b4:	bf00      	nop
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051c4:	bf00      	nop
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051d4:	bf00      	nop
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051e4:	bf00      	nop
}
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80051f4:	bf00      	nop
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005204:	bf00      	nop
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005214:	bf00      	nop
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005224:	bf00      	nop
}
 8005226:	bf00      	nop
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005234:	bf00      	nop
}
 8005236:	bf00      	nop
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005244:	bf00      	nop
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8005262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8005272:	f7fc fb23 	bl	80018bc <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8005276:	e066      	b.n	8005346 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8005278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8005286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005290:	f023 0302 	bic.w	r3, r3, #2
 8005294:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8005296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80052a6:	f7ff ff5b 	bl	8005160 <Capture_TIM2_Ch1_Callback>
}
 80052aa:	e04c      	b.n	8005346 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80052ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80052ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80052ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80052da:	f7ff ff49 	bl	8005170 <Capture_TIM2_Ch2_Callback>
}
 80052de:	e032      	b.n	8005346 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80052e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d012      	beq.n	8005314 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80052ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052f8:	f023 0308 	bic.w	r3, r3, #8
 80052fc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80052fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800530c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800530e:	f7ff ff37 	bl	8005180 <Capture_TIM2_Ch3_Callback>
}
 8005312:	e018      	b.n	8005346 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8005314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d011      	beq.n	8005346 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8005322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800532c:	f023 0310 	bic.w	r3, r3, #16
 8005330:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8005332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800533c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005340:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8005342:	f7ff ff25 	bl	8005190 <Capture_TIM2_Ch4_Callback>
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800535c:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <TIM3_IRQHandler+0xcc>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	4a2d      	ldr	r2, [pc, #180]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8005368:	f7fc fa9e 	bl	80018a8 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800536c:	e052      	b.n	8005414 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800537a:	4b27      	ldr	r3, [pc, #156]	; (8005418 <TIM3_IRQHandler+0xcc>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	4a26      	ldr	r2, [pc, #152]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005380:	f023 0302 	bic.w	r3, r3, #2
 8005384:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	4a23      	ldr	r2, [pc, #140]	; (8005418 <TIM3_IRQHandler+0xcc>)
 800538c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005390:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8005392:	f7ff ff05 	bl	80051a0 <Capture_TIM3_Ch1_Callback>
}
 8005396:	e03d      	b.n	8005414 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8005398:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <TIM3_IRQHandler+0xcc>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053aa:	f023 0304 	bic.w	r3, r3, #4
 80053ae:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ba:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80053bc:	f7ff fef8 	bl	80051b0 <Capture_TIM3_Ch2_Callback>
}
 80053c0:	e028      	b.n	8005414 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	4a11      	ldr	r2, [pc, #68]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053d4:	f023 0308 	bic.w	r3, r3, #8
 80053d8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80053e6:	f7ff feeb 	bl	80051c0 <Capture_TIM3_Ch3_Callback>
}
 80053ea:	e013      	b.n	8005414 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <TIM3_IRQHandler+0xcc>)
 80053fe:	f023 0310 	bic.w	r3, r3, #16
 8005402:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <TIM3_IRQHandler+0xcc>)
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	4a03      	ldr	r2, [pc, #12]	; (8005418 <TIM3_IRQHandler+0xcc>)
 800540a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800540e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8005410:	f7ff fede 	bl	80051d0 <Capture_TIM3_Ch4_Callback>
}
 8005414:	bf00      	nop
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40000400 	.word	0x40000400

0800541c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8005420:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4a2d      	ldr	r2, [pc, #180]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8005438:	f7ff fe82 	bl	8005140 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800543c:	e052      	b.n	80054e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00e      	beq.n	8005468 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005450:	f023 0302 	bic.w	r3, r3, #2
 8005454:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 800545c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005460:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8005462:	f7ff febd 	bl	80051e0 <Capture_TIM4_Ch1_Callback>
}
 8005466:	e03d      	b.n	80054e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8005468:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8005474:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 800547a:	f023 0304 	bic.w	r3, r3, #4
 800547e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800548c:	f7ff fec8 	bl	8005220 <Capture_TIM5_Ch2_Callback>
}
 8005490:	e028      	b.n	80054e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054a4:	f023 0308 	bic.w	r3, r3, #8
 80054a8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80054b6:	f7ff fe9b 	bl	80051f0 <Capture_TIM4_Ch3_Callback>
}
 80054ba:	e013      	b.n	80054e4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	4a06      	ldr	r2, [pc, #24]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <TIM4_IRQHandler+0xcc>)
 80054da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054de:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80054e0:	f7ff fe8e 	bl	8005200 <Capture_TIM4_Ch4_Callback>
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40000800 	.word	0x40000800

080054ec <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80054f0:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80054fc:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8005508:	f7ff fe22 	bl	8005150 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800550c:	e052      	b.n	80055b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005520:	f023 0302 	bic.w	r3, r3, #2
 8005524:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800552c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005530:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8005532:	f7ff fe6d 	bl	8005210 <Capture_TIM5_Ch1_Callback>
}
 8005536:	e03d      	b.n	80055b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800554a:	f023 0304 	bic.w	r3, r3, #4
 800554e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800555a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800555c:	f7ff fe60 	bl	8005220 <Capture_TIM5_Ch2_Callback>
}
 8005560:	e028      	b.n	80055b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00e      	beq.n	800558c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005574:	f023 0308 	bic.w	r3, r3, #8
 8005578:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8005586:	f7ff fe53 	bl	8005230 <Capture_TIM5_Ch3_Callback>
}
 800558a:	e013      	b.n	80055b4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00d      	beq.n	80055b4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4a06      	ldr	r2, [pc, #24]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <TIM5_IRQHandler+0xcc>)
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ae:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80055b0:	f7ff fe46 	bl	8005240 <Capture_TIM5_Ch4_Callback>
}
 80055b4:	bf00      	nop
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40000c00 	.word	0x40000c00

080055bc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <__NVIC_EnableIRQ>:
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db0b      	blt.n	800562e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <__NVIC_EnableIRQ+0x38>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2001      	movs	r0, #1
 8005626:	fa00 f202 	lsl.w	r2, r0, r2
 800562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100

08005640 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f825 	bl	800669c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8005652:	4b96      	ldr	r3, [pc, #600]	; (80058ac <extInt_Config+0x26c>)
 8005654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005658:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	791b      	ldrb	r3, [r3, #4]
 8005660:	2b0f      	cmp	r3, #15
 8005662:	f200 85cd 	bhi.w	8006200 <extInt_Config+0xbc0>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <extInt_Config+0x2c>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056ad 	.word	0x080056ad
 8005670:	08005763 	.word	0x08005763
 8005674:	08005819 	.word	0x08005819
 8005678:	080058ef 	.word	0x080058ef
 800567c:	080059a5 	.word	0x080059a5
 8005680:	08005a53 	.word	0x08005a53
 8005684:	08005b19 	.word	0x08005b19
 8005688:	08005bc1 	.word	0x08005bc1
 800568c:	08005c69 	.word	0x08005c69
 8005690:	08005d11 	.word	0x08005d11
 8005694:	08005dd7 	.word	0x08005dd7
 8005698:	08005e7f 	.word	0x08005e7f
 800569c:	08005f27 	.word	0x08005f27
 80056a0:	08005fed 	.word	0x08005fed
 80056a4:	08006093 	.word	0x08006093
 80056a8:	0800613b 	.word	0x0800613b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80056ac:	4b80      	ldr	r3, [pc, #512]	; (80058b0 <extInt_Config+0x270>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a7f      	ldr	r2, [pc, #508]	; (80058b0 <extInt_Config+0x270>)
 80056b2:	f023 030f 	bic.w	r3, r3, #15
 80056b6:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7d      	ldr	r2, [pc, #500]	; (80058b4 <extInt_Config+0x274>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d105      	bne.n	80056d0 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80056c4:	4b7a      	ldr	r3, [pc, #488]	; (80058b0 <extInt_Config+0x270>)
 80056c6:	4a7a      	ldr	r2, [pc, #488]	; (80058b0 <extInt_Config+0x270>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80056cc:	f000 bd9a 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a78      	ldr	r2, [pc, #480]	; (80058b8 <extInt_Config+0x278>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d107      	bne.n	80056ec <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80056dc:	4b74      	ldr	r3, [pc, #464]	; (80058b0 <extInt_Config+0x270>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a73      	ldr	r2, [pc, #460]	; (80058b0 <extInt_Config+0x270>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6093      	str	r3, [r2, #8]
					break;
 80056e8:	f000 bd8c 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a72      	ldr	r2, [pc, #456]	; (80058bc <extInt_Config+0x27c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d107      	bne.n	8005708 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80056f8:	4b6d      	ldr	r3, [pc, #436]	; (80058b0 <extInt_Config+0x270>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a6c      	ldr	r2, [pc, #432]	; (80058b0 <extInt_Config+0x270>)
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	6093      	str	r3, [r2, #8]
					break;
 8005704:	f000 bd7e 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6c      	ldr	r2, [pc, #432]	; (80058c0 <extInt_Config+0x280>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d107      	bne.n	8005724 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005714:	4b66      	ldr	r3, [pc, #408]	; (80058b0 <extInt_Config+0x270>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a65      	ldr	r2, [pc, #404]	; (80058b0 <extInt_Config+0x270>)
 800571a:	f043 0303 	orr.w	r3, r3, #3
 800571e:	6093      	str	r3, [r2, #8]
					break;
 8005720:	f000 bd70 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a66      	ldr	r2, [pc, #408]	; (80058c4 <extInt_Config+0x284>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d107      	bne.n	8005740 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005730:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <extInt_Config+0x270>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a5e      	ldr	r2, [pc, #376]	; (80058b0 <extInt_Config+0x270>)
 8005736:	f043 0304 	orr.w	r3, r3, #4
 800573a:	6093      	str	r3, [r2, #8]
					break;
 800573c:	f000 bd62 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a60      	ldr	r2, [pc, #384]	; (80058c8 <extInt_Config+0x288>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d107      	bne.n	800575c <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800574c:	4b58      	ldr	r3, [pc, #352]	; (80058b0 <extInt_Config+0x270>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a57      	ldr	r2, [pc, #348]	; (80058b0 <extInt_Config+0x270>)
 8005752:	f043 0307 	orr.w	r3, r3, #7
 8005756:	6093      	str	r3, [r2, #8]
					break;
 8005758:	f000 bd54 	b.w	8006204 <extInt_Config+0xbc4>
						__NOP();
 800575c:	bf00      	nop
					break;
 800575e:	f000 bd51 	b.w	8006204 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8005762:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <extInt_Config+0x270>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <extInt_Config+0x270>)
 8005768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a4f      	ldr	r2, [pc, #316]	; (80058b4 <extInt_Config+0x274>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d105      	bne.n	8005786 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800577a:	4b4d      	ldr	r3, [pc, #308]	; (80058b0 <extInt_Config+0x270>)
 800577c:	4a4c      	ldr	r2, [pc, #304]	; (80058b0 <extInt_Config+0x270>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005782:	f000 bd3f 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4a      	ldr	r2, [pc, #296]	; (80058b8 <extInt_Config+0x278>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d107      	bne.n	80057a2 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <extInt_Config+0x270>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4a46      	ldr	r2, [pc, #280]	; (80058b0 <extInt_Config+0x270>)
 8005798:	f043 0310 	orr.w	r3, r3, #16
 800579c:	6093      	str	r3, [r2, #8]
					break;
 800579e:	f000 bd31 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a44      	ldr	r2, [pc, #272]	; (80058bc <extInt_Config+0x27c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d107      	bne.n	80057be <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80057ae:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <extInt_Config+0x270>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4a3f      	ldr	r2, [pc, #252]	; (80058b0 <extInt_Config+0x270>)
 80057b4:	f043 0320 	orr.w	r3, r3, #32
 80057b8:	6093      	str	r3, [r2, #8]
					break;
 80057ba:	f000 bd23 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <extInt_Config+0x280>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d107      	bne.n	80057da <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80057ca:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <extInt_Config+0x270>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <extInt_Config+0x270>)
 80057d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80057d4:	6093      	str	r3, [r2, #8]
					break;
 80057d6:	f000 bd15 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a38      	ldr	r2, [pc, #224]	; (80058c4 <extInt_Config+0x284>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d107      	bne.n	80057f6 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80057e6:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <extInt_Config+0x270>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <extInt_Config+0x270>)
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	6093      	str	r3, [r2, #8]
					break;
 80057f2:	f000 bd07 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a32      	ldr	r2, [pc, #200]	; (80058c8 <extInt_Config+0x288>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d107      	bne.n	8005812 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <extInt_Config+0x270>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <extInt_Config+0x270>)
 8005808:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800580c:	6093      	str	r3, [r2, #8]
					break;
 800580e:	f000 bcf9 	b.w	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005812:	bf00      	nop
					break;
 8005814:	f000 bcf6 	b.w	8006204 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <extInt_Config+0x270>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <extInt_Config+0x270>)
 800581e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005822:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <extInt_Config+0x274>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d105      	bne.n	800583c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <extInt_Config+0x270>)
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <extInt_Config+0x270>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005838:	f000 bce4 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <extInt_Config+0x278>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d107      	bne.n	8005858 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <extInt_Config+0x270>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <extInt_Config+0x270>)
 800584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005852:	6093      	str	r3, [r2, #8]
					break;
 8005854:	f000 bcd6 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a17      	ldr	r2, [pc, #92]	; (80058bc <extInt_Config+0x27c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d107      	bne.n	8005874 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <extInt_Config+0x270>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <extInt_Config+0x270>)
 800586a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800586e:	6093      	str	r3, [r2, #8]
					break;
 8005870:	f000 bcc8 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a11      	ldr	r2, [pc, #68]	; (80058c0 <extInt_Config+0x280>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d107      	bne.n	8005890 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <extInt_Config+0x270>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <extInt_Config+0x270>)
 8005886:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800588a:	6093      	str	r3, [r2, #8]
					break;
 800588c:	f000 bcba 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <extInt_Config+0x284>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d117      	bne.n	80058cc <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <extInt_Config+0x270>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a03      	ldr	r2, [pc, #12]	; (80058b0 <extInt_Config+0x270>)
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a6:	6093      	str	r3, [r2, #8]
					break;
 80058a8:	f000 bcac 	b.w	8006204 <extInt_Config+0xbc4>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40013800 	.word	0x40013800
 80058b4:	40020000 	.word	0x40020000
 80058b8:	40020400 	.word	0x40020400
 80058bc:	40020800 	.word	0x40020800
 80058c0:	40020c00 	.word	0x40020c00
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a8a      	ldr	r2, [pc, #552]	; (8005afc <extInt_Config+0x4bc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d107      	bne.n	80058e8 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80058d8:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <extInt_Config+0x4c0>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a88      	ldr	r2, [pc, #544]	; (8005b00 <extInt_Config+0x4c0>)
 80058de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058e2:	6093      	str	r3, [r2, #8]
					break;
 80058e4:	f000 bc8e 	b.w	8006204 <extInt_Config+0xbc4>
						__NOP();
 80058e8:	bf00      	nop
					break;
 80058ea:	f000 bc8b 	b.w	8006204 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80058ee:	4b84      	ldr	r3, [pc, #528]	; (8005b00 <extInt_Config+0x4c0>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	4a83      	ldr	r2, [pc, #524]	; (8005b00 <extInt_Config+0x4c0>)
 80058f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f8:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a80      	ldr	r2, [pc, #512]	; (8005b04 <extInt_Config+0x4c4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d105      	bne.n	8005912 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005906:	4b7e      	ldr	r3, [pc, #504]	; (8005b00 <extInt_Config+0x4c0>)
 8005908:	4a7d      	ldr	r2, [pc, #500]	; (8005b00 <extInt_Config+0x4c0>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800590e:	f000 bc79 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7b      	ldr	r2, [pc, #492]	; (8005b08 <extInt_Config+0x4c8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d107      	bne.n	800592e <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800591e:	4b78      	ldr	r3, [pc, #480]	; (8005b00 <extInt_Config+0x4c0>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	4a77      	ldr	r2, [pc, #476]	; (8005b00 <extInt_Config+0x4c0>)
 8005924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005928:	6093      	str	r3, [r2, #8]
					break;
 800592a:	f000 bc6b 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a75      	ldr	r2, [pc, #468]	; (8005b0c <extInt_Config+0x4cc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d107      	bne.n	800594a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800593a:	4b71      	ldr	r3, [pc, #452]	; (8005b00 <extInt_Config+0x4c0>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4a70      	ldr	r2, [pc, #448]	; (8005b00 <extInt_Config+0x4c0>)
 8005940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005944:	6093      	str	r3, [r2, #8]
					break;
 8005946:	f000 bc5d 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a6f      	ldr	r2, [pc, #444]	; (8005b10 <extInt_Config+0x4d0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d107      	bne.n	8005966 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <extInt_Config+0x4c0>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <extInt_Config+0x4c0>)
 800595c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005960:	6093      	str	r3, [r2, #8]
					break;
 8005962:	f000 bc4f 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a69      	ldr	r2, [pc, #420]	; (8005b14 <extInt_Config+0x4d4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d107      	bne.n	8005982 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <extInt_Config+0x4c0>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	4a62      	ldr	r2, [pc, #392]	; (8005b00 <extInt_Config+0x4c0>)
 8005978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800597c:	6093      	str	r3, [r2, #8]
					break;
 800597e:	f000 bc41 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5c      	ldr	r2, [pc, #368]	; (8005afc <extInt_Config+0x4bc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d107      	bne.n	800599e <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <extInt_Config+0x4c0>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a5b      	ldr	r2, [pc, #364]	; (8005b00 <extInt_Config+0x4c0>)
 8005994:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005998:	6093      	str	r3, [r2, #8]
					break;
 800599a:	f000 bc33 	b.w	8006204 <extInt_Config+0xbc4>
						__NOP();
 800599e:	bf00      	nop
					break;
 80059a0:	f000 bc30 	b.w	8006204 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80059a4:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <extInt_Config+0x4c0>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a55      	ldr	r2, [pc, #340]	; (8005b00 <extInt_Config+0x4c0>)
 80059aa:	f023 030f 	bic.w	r3, r3, #15
 80059ae:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a53      	ldr	r2, [pc, #332]	; (8005b04 <extInt_Config+0x4c4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d105      	bne.n	80059c8 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80059bc:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <extInt_Config+0x4c0>)
 80059be:	4a50      	ldr	r2, [pc, #320]	; (8005b00 <extInt_Config+0x4c0>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80059c4:	f000 bc1e 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <extInt_Config+0x4c8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d107      	bne.n	80059e4 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80059d4:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <extInt_Config+0x4c0>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a49      	ldr	r2, [pc, #292]	; (8005b00 <extInt_Config+0x4c0>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	60d3      	str	r3, [r2, #12]
					break;
 80059e0:	f000 bc10 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a48      	ldr	r2, [pc, #288]	; (8005b0c <extInt_Config+0x4cc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d107      	bne.n	8005a00 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80059f0:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <extInt_Config+0x4c0>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <extInt_Config+0x4c0>)
 80059f6:	f043 0302 	orr.w	r3, r3, #2
 80059fa:	60d3      	str	r3, [r2, #12]
					break;
 80059fc:	f000 bc02 	b.w	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a42      	ldr	r2, [pc, #264]	; (8005b10 <extInt_Config+0x4d0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d106      	bne.n	8005a1a <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8005a0c:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <extInt_Config+0x4c0>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <extInt_Config+0x4c0>)
 8005a12:	f043 0303 	orr.w	r3, r3, #3
 8005a16:	60d3      	str	r3, [r2, #12]
					break;
 8005a18:	e3f4      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <extInt_Config+0x4d4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d106      	bne.n	8005a34 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <extInt_Config+0x4c0>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <extInt_Config+0x4c0>)
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	60d3      	str	r3, [r2, #12]
					break;
 8005a32:	e3e7      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a30      	ldr	r2, [pc, #192]	; (8005afc <extInt_Config+0x4bc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d106      	bne.n	8005a4e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <extInt_Config+0x4c0>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <extInt_Config+0x4c0>)
 8005a46:	f043 0307 	orr.w	r3, r3, #7
 8005a4a:	60d3      	str	r3, [r2, #12]
					break;
 8005a4c:	e3da      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005a4e:	bf00      	nop
					break;
 8005a50:	e3d8      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8005a52:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <extInt_Config+0x4c0>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <extInt_Config+0x4c0>)
 8005a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5c:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <extInt_Config+0x4c4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d104      	bne.n	8005a74 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <extInt_Config+0x4c0>)
 8005a6c:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <extInt_Config+0x4c0>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005a72:	e3c7      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <extInt_Config+0x4c8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d106      	bne.n	8005a8e <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <extInt_Config+0x4c0>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <extInt_Config+0x4c0>)
 8005a86:	f043 0310 	orr.w	r3, r3, #16
 8005a8a:	60d3      	str	r3, [r2, #12]
					break;
 8005a8c:	e3ba      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <extInt_Config+0x4cc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d106      	bne.n	8005aa8 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8005a9a:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <extInt_Config+0x4c0>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <extInt_Config+0x4c0>)
 8005aa0:	f043 0320 	orr.w	r3, r3, #32
 8005aa4:	60d3      	str	r3, [r2, #12]
					break;
 8005aa6:	e3ad      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <extInt_Config+0x4d0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d106      	bne.n	8005ac2 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <extInt_Config+0x4c0>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <extInt_Config+0x4c0>)
 8005aba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005abe:	60d3      	str	r3, [r2, #12]
					break;
 8005ac0:	e3a0      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <extInt_Config+0x4d4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d106      	bne.n	8005adc <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <extInt_Config+0x4c0>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <extInt_Config+0x4c0>)
 8005ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad8:	60d3      	str	r3, [r2, #12]
					break;
 8005ada:	e393      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a06      	ldr	r2, [pc, #24]	; (8005afc <extInt_Config+0x4bc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d106      	bne.n	8005af6 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <extInt_Config+0x4c0>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <extInt_Config+0x4c0>)
 8005aee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005af2:	60d3      	str	r3, [r2, #12]
					break;
 8005af4:	e386      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005af6:	bf00      	nop
					break;
 8005af8:	e384      	b.n	8006204 <extInt_Config+0xbc4>
 8005afa:	bf00      	nop
 8005afc:	40021c00 	.word	0x40021c00
 8005b00:	40013800 	.word	0x40013800
 8005b04:	40020000 	.word	0x40020000
 8005b08:	40020400 	.word	0x40020400
 8005b0c:	40020800 	.word	0x40020800
 8005b10:	40020c00 	.word	0x40020c00
 8005b14:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8005b18:	4b86      	ldr	r3, [pc, #536]	; (8005d34 <extInt_Config+0x6f4>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a85      	ldr	r2, [pc, #532]	; (8005d34 <extInt_Config+0x6f4>)
 8005b1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b22:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a83      	ldr	r2, [pc, #524]	; (8005d38 <extInt_Config+0x6f8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d104      	bne.n	8005b3a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005b30:	4b80      	ldr	r3, [pc, #512]	; (8005d34 <extInt_Config+0x6f4>)
 8005b32:	4a80      	ldr	r2, [pc, #512]	; (8005d34 <extInt_Config+0x6f4>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005b38:	e364      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7e      	ldr	r2, [pc, #504]	; (8005d3c <extInt_Config+0x6fc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d106      	bne.n	8005b54 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005b46:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <extInt_Config+0x6f4>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4a7a      	ldr	r2, [pc, #488]	; (8005d34 <extInt_Config+0x6f4>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	60d3      	str	r3, [r2, #12]
					break;
 8005b52:	e357      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a79      	ldr	r2, [pc, #484]	; (8005d40 <extInt_Config+0x700>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d106      	bne.n	8005b6e <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005b60:	4b74      	ldr	r3, [pc, #464]	; (8005d34 <extInt_Config+0x6f4>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a73      	ldr	r2, [pc, #460]	; (8005d34 <extInt_Config+0x6f4>)
 8005b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b6a:	60d3      	str	r3, [r2, #12]
					break;
 8005b6c:	e34a      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a73      	ldr	r2, [pc, #460]	; (8005d44 <extInt_Config+0x704>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d106      	bne.n	8005b88 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8005b7a:	4b6e      	ldr	r3, [pc, #440]	; (8005d34 <extInt_Config+0x6f4>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4a6d      	ldr	r2, [pc, #436]	; (8005d34 <extInt_Config+0x6f4>)
 8005b80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b84:	60d3      	str	r3, [r2, #12]
					break;
 8005b86:	e33d      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6e      	ldr	r2, [pc, #440]	; (8005d48 <extInt_Config+0x708>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d106      	bne.n	8005ba2 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8005b94:	4b67      	ldr	r3, [pc, #412]	; (8005d34 <extInt_Config+0x6f4>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <extInt_Config+0x6f4>)
 8005b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b9e:	60d3      	str	r3, [r2, #12]
					break;
 8005ba0:	e330      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a68      	ldr	r2, [pc, #416]	; (8005d4c <extInt_Config+0x70c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d106      	bne.n	8005bbc <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8005bae:	4b61      	ldr	r3, [pc, #388]	; (8005d34 <extInt_Config+0x6f4>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4a60      	ldr	r2, [pc, #384]	; (8005d34 <extInt_Config+0x6f4>)
 8005bb4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bb8:	60d3      	str	r3, [r2, #12]
					break;
 8005bba:	e323      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005bbc:	bf00      	nop
					break;
 8005bbe:	e321      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8005bc0:	4b5c      	ldr	r3, [pc, #368]	; (8005d34 <extInt_Config+0x6f4>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a5b      	ldr	r2, [pc, #364]	; (8005d34 <extInt_Config+0x6f4>)
 8005bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bca:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <extInt_Config+0x6f8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d104      	bne.n	8005be2 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005bd8:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <extInt_Config+0x6f4>)
 8005bda:	4a56      	ldr	r2, [pc, #344]	; (8005d34 <extInt_Config+0x6f4>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005be0:	e310      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a54      	ldr	r2, [pc, #336]	; (8005d3c <extInt_Config+0x6fc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d106      	bne.n	8005bfc <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8005bee:	4b51      	ldr	r3, [pc, #324]	; (8005d34 <extInt_Config+0x6f4>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4a50      	ldr	r2, [pc, #320]	; (8005d34 <extInt_Config+0x6f4>)
 8005bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf8:	60d3      	str	r3, [r2, #12]
					break;
 8005bfa:	e303      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a4f      	ldr	r2, [pc, #316]	; (8005d40 <extInt_Config+0x700>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d106      	bne.n	8005c16 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005c08:	4b4a      	ldr	r3, [pc, #296]	; (8005d34 <extInt_Config+0x6f4>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a49      	ldr	r2, [pc, #292]	; (8005d34 <extInt_Config+0x6f4>)
 8005c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c12:	60d3      	str	r3, [r2, #12]
					break;
 8005c14:	e2f6      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a49      	ldr	r2, [pc, #292]	; (8005d44 <extInt_Config+0x704>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d106      	bne.n	8005c30 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005c22:	4b44      	ldr	r3, [pc, #272]	; (8005d34 <extInt_Config+0x6f4>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a43      	ldr	r2, [pc, #268]	; (8005d34 <extInt_Config+0x6f4>)
 8005c28:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005c2c:	60d3      	str	r3, [r2, #12]
					break;
 8005c2e:	e2e9      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a44      	ldr	r2, [pc, #272]	; (8005d48 <extInt_Config+0x708>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d106      	bne.n	8005c4a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <extInt_Config+0x6f4>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <extInt_Config+0x6f4>)
 8005c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c46:	60d3      	str	r3, [r2, #12]
					break;
 8005c48:	e2dc      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3e      	ldr	r2, [pc, #248]	; (8005d4c <extInt_Config+0x70c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d106      	bne.n	8005c64 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <extInt_Config+0x6f4>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4a36      	ldr	r2, [pc, #216]	; (8005d34 <extInt_Config+0x6f4>)
 8005c5c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005c60:	60d3      	str	r3, [r2, #12]
					break;
 8005c62:	e2cf      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005c64:	bf00      	nop
					break;
 8005c66:	e2cd      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8005c68:	4b32      	ldr	r3, [pc, #200]	; (8005d34 <extInt_Config+0x6f4>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	4a31      	ldr	r2, [pc, #196]	; (8005d34 <extInt_Config+0x6f4>)
 8005c6e:	f023 030f 	bic.w	r3, r3, #15
 8005c72:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <extInt_Config+0x6f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d104      	bne.n	8005c8a <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8005c80:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <extInt_Config+0x6f4>)
 8005c82:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <extInt_Config+0x6f4>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005c88:	e2bc      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <extInt_Config+0x6fc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d106      	bne.n	8005ca4 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <extInt_Config+0x6f4>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <extInt_Config+0x6f4>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6113      	str	r3, [r2, #16]
					break;
 8005ca2:	e2af      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <extInt_Config+0x700>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d106      	bne.n	8005cbe <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005cb0:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <extInt_Config+0x6f4>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <extInt_Config+0x6f4>)
 8005cb6:	f043 0302 	orr.w	r3, r3, #2
 8005cba:	6113      	str	r3, [r2, #16]
					break;
 8005cbc:	e2a2      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <extInt_Config+0x704>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d106      	bne.n	8005cd8 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <extInt_Config+0x6f4>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <extInt_Config+0x6f4>)
 8005cd0:	f043 0303 	orr.w	r3, r3, #3
 8005cd4:	6113      	str	r3, [r2, #16]
					break;
 8005cd6:	e295      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <extInt_Config+0x708>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d106      	bne.n	8005cf2 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <extInt_Config+0x6f4>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <extInt_Config+0x6f4>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6113      	str	r3, [r2, #16]
					break;
 8005cf0:	e288      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <extInt_Config+0x70c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d106      	bne.n	8005d0c <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <extInt_Config+0x6f4>)
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <extInt_Config+0x6f4>)
 8005d04:	f043 0307 	orr.w	r3, r3, #7
 8005d08:	6113      	str	r3, [r2, #16]
					break;
 8005d0a:	e27b      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005d0c:	bf00      	nop
					break;
 8005d0e:	e279      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <extInt_Config+0x6f4>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <extInt_Config+0x6f4>)
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <extInt_Config+0x6f8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <extInt_Config+0x6f4>)
 8005d2a:	4a02      	ldr	r2, [pc, #8]	; (8005d34 <extInt_Config+0x6f4>)
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005d30:	e268      	b.n	8006204 <extInt_Config+0xbc4>
 8005d32:	bf00      	nop
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40020400 	.word	0x40020400
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020c00 	.word	0x40020c00
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a83      	ldr	r2, [pc, #524]	; (8005f64 <extInt_Config+0x924>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d106      	bne.n	8005d6a <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8005d5c:	4b82      	ldr	r3, [pc, #520]	; (8005f68 <extInt_Config+0x928>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4a81      	ldr	r2, [pc, #516]	; (8005f68 <extInt_Config+0x928>)
 8005d62:	f043 0310 	orr.w	r3, r3, #16
 8005d66:	6113      	str	r3, [r2, #16]
					break;
 8005d68:	e24c      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a7e      	ldr	r2, [pc, #504]	; (8005f6c <extInt_Config+0x92c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d106      	bne.n	8005d84 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8005d76:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <extInt_Config+0x928>)
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	4a7b      	ldr	r2, [pc, #492]	; (8005f68 <extInt_Config+0x928>)
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6113      	str	r3, [r2, #16]
					break;
 8005d82:	e23f      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a79      	ldr	r2, [pc, #484]	; (8005f70 <extInt_Config+0x930>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d106      	bne.n	8005d9e <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8005d90:	4b75      	ldr	r3, [pc, #468]	; (8005f68 <extInt_Config+0x928>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	4a74      	ldr	r2, [pc, #464]	; (8005f68 <extInt_Config+0x928>)
 8005d96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005d9a:	6113      	str	r3, [r2, #16]
					break;
 8005d9c:	e232      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a73      	ldr	r2, [pc, #460]	; (8005f74 <extInt_Config+0x934>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d106      	bne.n	8005db8 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8005daa:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <extInt_Config+0x928>)
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	4a6e      	ldr	r2, [pc, #440]	; (8005f68 <extInt_Config+0x928>)
 8005db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db4:	6113      	str	r3, [r2, #16]
					break;
 8005db6:	e225      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6e      	ldr	r2, [pc, #440]	; (8005f78 <extInt_Config+0x938>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d106      	bne.n	8005dd2 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8005dc4:	4b68      	ldr	r3, [pc, #416]	; (8005f68 <extInt_Config+0x928>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4a67      	ldr	r2, [pc, #412]	; (8005f68 <extInt_Config+0x928>)
 8005dca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005dce:	6113      	str	r3, [r2, #16]
					break;
 8005dd0:	e218      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005dd2:	bf00      	nop
					break;
 8005dd4:	e216      	b.n	8006204 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8005dd6:	4b64      	ldr	r3, [pc, #400]	; (8005f68 <extInt_Config+0x928>)
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	4a63      	ldr	r2, [pc, #396]	; (8005f68 <extInt_Config+0x928>)
 8005ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005de0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a64      	ldr	r2, [pc, #400]	; (8005f7c <extInt_Config+0x93c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d104      	bne.n	8005df8 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8005dee:	4b5e      	ldr	r3, [pc, #376]	; (8005f68 <extInt_Config+0x928>)
 8005df0:	4a5d      	ldr	r2, [pc, #372]	; (8005f68 <extInt_Config+0x928>)
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005df6:	e205      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a59      	ldr	r2, [pc, #356]	; (8005f64 <extInt_Config+0x924>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d106      	bne.n	8005e12 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <extInt_Config+0x928>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	4a57      	ldr	r2, [pc, #348]	; (8005f68 <extInt_Config+0x928>)
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0e:	6113      	str	r3, [r2, #16]
					break;
 8005e10:	e1f8      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a54      	ldr	r2, [pc, #336]	; (8005f6c <extInt_Config+0x92c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d106      	bne.n	8005e2c <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8005e1e:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <extInt_Config+0x928>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	4a51      	ldr	r2, [pc, #324]	; (8005f68 <extInt_Config+0x928>)
 8005e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e28:	6113      	str	r3, [r2, #16]
					break;
 8005e2a:	e1eb      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a4f      	ldr	r2, [pc, #316]	; (8005f70 <extInt_Config+0x930>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d106      	bne.n	8005e46 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8005e38:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <extInt_Config+0x928>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	4a4a      	ldr	r2, [pc, #296]	; (8005f68 <extInt_Config+0x928>)
 8005e3e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e42:	6113      	str	r3, [r2, #16]
					break;
 8005e44:	e1de      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a49      	ldr	r2, [pc, #292]	; (8005f74 <extInt_Config+0x934>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d106      	bne.n	8005e60 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8005e52:	4b45      	ldr	r3, [pc, #276]	; (8005f68 <extInt_Config+0x928>)
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	4a44      	ldr	r2, [pc, #272]	; (8005f68 <extInt_Config+0x928>)
 8005e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e5c:	6113      	str	r3, [r2, #16]
					break;
 8005e5e:	e1d1      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a44      	ldr	r2, [pc, #272]	; (8005f78 <extInt_Config+0x938>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d106      	bne.n	8005e7a <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8005e6c:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <extInt_Config+0x928>)
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <extInt_Config+0x928>)
 8005e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e76:	6113      	str	r3, [r2, #16]
					break;
 8005e78:	e1c4      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005e7a:	bf00      	nop
					break;
 8005e7c:	e1c2      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <extInt_Config+0x928>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	4a39      	ldr	r2, [pc, #228]	; (8005f68 <extInt_Config+0x928>)
 8005e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e88:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3a      	ldr	r2, [pc, #232]	; (8005f7c <extInt_Config+0x93c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d104      	bne.n	8005ea0 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8005e96:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <extInt_Config+0x928>)
 8005e98:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <extInt_Config+0x928>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005e9e:	e1b1      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <extInt_Config+0x924>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d106      	bne.n	8005eba <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <extInt_Config+0x928>)
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <extInt_Config+0x928>)
 8005eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb6:	6113      	str	r3, [r2, #16]
					break;
 8005eb8:	e1a4      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <extInt_Config+0x92c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d106      	bne.n	8005ed4 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <extInt_Config+0x928>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <extInt_Config+0x928>)
 8005ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ed0:	6113      	str	r3, [r2, #16]
					break;
 8005ed2:	e197      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <extInt_Config+0x930>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d106      	bne.n	8005eee <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <extInt_Config+0x928>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <extInt_Config+0x928>)
 8005ee6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005eea:	6113      	str	r3, [r2, #16]
					break;
 8005eec:	e18a      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <extInt_Config+0x934>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d106      	bne.n	8005f08 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8005efa:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <extInt_Config+0x928>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <extInt_Config+0x928>)
 8005f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f04:	6113      	str	r3, [r2, #16]
					break;
 8005f06:	e17d      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <extInt_Config+0x938>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d106      	bne.n	8005f22 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <extInt_Config+0x928>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <extInt_Config+0x928>)
 8005f1a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005f1e:	6113      	str	r3, [r2, #16]
					break;
 8005f20:	e170      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005f22:	bf00      	nop
					break;
 8005f24:	e16e      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <extInt_Config+0x928>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4a0f      	ldr	r2, [pc, #60]	; (8005f68 <extInt_Config+0x928>)
 8005f2c:	f023 030f 	bic.w	r3, r3, #15
 8005f30:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <extInt_Config+0x93c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d104      	bne.n	8005f48 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <extInt_Config+0x928>)
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <extInt_Config+0x928>)
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005f46:	e15d      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a05      	ldr	r2, [pc, #20]	; (8005f64 <extInt_Config+0x924>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d115      	bne.n	8005f80 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <extInt_Config+0x928>)
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <extInt_Config+0x928>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6153      	str	r3, [r2, #20]
					break;
 8005f60:	e150      	b.n	8006204 <extInt_Config+0xbc4>
 8005f62:	bf00      	nop
 8005f64:	40020400 	.word	0x40020400
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40020800 	.word	0x40020800
 8005f70:	40020c00 	.word	0x40020c00
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40021c00 	.word	0x40021c00
 8005f7c:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a89      	ldr	r2, [pc, #548]	; (80061ac <extInt_Config+0xb6c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d106      	bne.n	8005f9a <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8005f8c:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <extInt_Config+0xb70>)
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <extInt_Config+0xb70>)
 8005f92:	f043 0302 	orr.w	r3, r3, #2
 8005f96:	6153      	str	r3, [r2, #20]
					break;
 8005f98:	e134      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a84      	ldr	r2, [pc, #528]	; (80061b4 <extInt_Config+0xb74>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d106      	bne.n	8005fb4 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <extInt_Config+0xb70>)
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4a81      	ldr	r2, [pc, #516]	; (80061b0 <extInt_Config+0xb70>)
 8005fac:	f043 0303 	orr.w	r3, r3, #3
 8005fb0:	6153      	str	r3, [r2, #20]
					break;
 8005fb2:	e127      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7f      	ldr	r2, [pc, #508]	; (80061b8 <extInt_Config+0xb78>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d106      	bne.n	8005fce <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8005fc0:	4b7b      	ldr	r3, [pc, #492]	; (80061b0 <extInt_Config+0xb70>)
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	4a7a      	ldr	r2, [pc, #488]	; (80061b0 <extInt_Config+0xb70>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6153      	str	r3, [r2, #20]
					break;
 8005fcc:	e11a      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a79      	ldr	r2, [pc, #484]	; (80061bc <extInt_Config+0xb7c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d106      	bne.n	8005fe8 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8005fda:	4b75      	ldr	r3, [pc, #468]	; (80061b0 <extInt_Config+0xb70>)
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	4a74      	ldr	r2, [pc, #464]	; (80061b0 <extInt_Config+0xb70>)
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	6153      	str	r3, [r2, #20]
					break;
 8005fe6:	e10d      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8005fe8:	bf00      	nop
					break;
 8005fea:	e10b      	b.n	8006204 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8005fec:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <extInt_Config+0xb70>)
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <extInt_Config+0xb70>)
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff6:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a70      	ldr	r2, [pc, #448]	; (80061c0 <extInt_Config+0xb80>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d104      	bne.n	800600e <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006004:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <extInt_Config+0xb70>)
 8006006:	4a6a      	ldr	r2, [pc, #424]	; (80061b0 <extInt_Config+0xb70>)
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	6153      	str	r3, [r2, #20]
 800600c:	e041      	b.n	8006092 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6b      	ldr	r2, [pc, #428]	; (80061c4 <extInt_Config+0xb84>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d106      	bne.n	8006028 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800601a:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <extInt_Config+0xb70>)
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4a64      	ldr	r2, [pc, #400]	; (80061b0 <extInt_Config+0xb70>)
 8006020:	f043 0310 	orr.w	r3, r3, #16
 8006024:	6153      	str	r3, [r2, #20]
 8006026:	e034      	b.n	8006092 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a5f      	ldr	r2, [pc, #380]	; (80061ac <extInt_Config+0xb6c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d106      	bne.n	8006042 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006034:	4b5e      	ldr	r3, [pc, #376]	; (80061b0 <extInt_Config+0xb70>)
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4a5d      	ldr	r2, [pc, #372]	; (80061b0 <extInt_Config+0xb70>)
 800603a:	f043 0320 	orr.w	r3, r3, #32
 800603e:	6153      	str	r3, [r2, #20]
 8006040:	e027      	b.n	8006092 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5a      	ldr	r2, [pc, #360]	; (80061b4 <extInt_Config+0xb74>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d106      	bne.n	800605c <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <extInt_Config+0xb70>)
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4a57      	ldr	r2, [pc, #348]	; (80061b0 <extInt_Config+0xb70>)
 8006054:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006058:	6153      	str	r3, [r2, #20]
 800605a:	e01a      	b.n	8006092 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a55      	ldr	r2, [pc, #340]	; (80061b8 <extInt_Config+0xb78>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d106      	bne.n	8006076 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006068:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <extInt_Config+0xb70>)
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	4a50      	ldr	r2, [pc, #320]	; (80061b0 <extInt_Config+0xb70>)
 800606e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006072:	6153      	str	r3, [r2, #20]
 8006074:	e00d      	b.n	8006092 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <extInt_Config+0xb7c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d106      	bne.n	8006090 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006082:	4b4b      	ldr	r3, [pc, #300]	; (80061b0 <extInt_Config+0xb70>)
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4a4a      	ldr	r2, [pc, #296]	; (80061b0 <extInt_Config+0xb70>)
 8006088:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800608c:	6153      	str	r3, [r2, #20]
 800608e:	e000      	b.n	8006092 <extInt_Config+0xa52>

					} else {
						__NOP();
 8006090:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <extInt_Config+0xb70>)
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4a46      	ldr	r2, [pc, #280]	; (80061b0 <extInt_Config+0xb70>)
 8006098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800609c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a46      	ldr	r2, [pc, #280]	; (80061c0 <extInt_Config+0xb80>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d104      	bne.n	80060b4 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <extInt_Config+0xb70>)
 80060ac:	4a40      	ldr	r2, [pc, #256]	; (80061b0 <extInt_Config+0xb70>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80060b2:	e0a7      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a42      	ldr	r2, [pc, #264]	; (80061c4 <extInt_Config+0xb84>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d106      	bne.n	80060ce <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80060c0:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <extInt_Config+0xb70>)
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	4a3a      	ldr	r2, [pc, #232]	; (80061b0 <extInt_Config+0xb70>)
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	6153      	str	r3, [r2, #20]
					break;
 80060cc:	e09a      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a35      	ldr	r2, [pc, #212]	; (80061ac <extInt_Config+0xb6c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d106      	bne.n	80060e8 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80060da:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <extInt_Config+0xb70>)
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	4a34      	ldr	r2, [pc, #208]	; (80061b0 <extInt_Config+0xb70>)
 80060e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060e4:	6153      	str	r3, [r2, #20]
					break;
 80060e6:	e08d      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a31      	ldr	r2, [pc, #196]	; (80061b4 <extInt_Config+0xb74>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d106      	bne.n	8006102 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80060f4:	4b2e      	ldr	r3, [pc, #184]	; (80061b0 <extInt_Config+0xb70>)
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4a2d      	ldr	r2, [pc, #180]	; (80061b0 <extInt_Config+0xb70>)
 80060fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80060fe:	6153      	str	r3, [r2, #20]
					break;
 8006100:	e080      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <extInt_Config+0xb78>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d106      	bne.n	800611c <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800610e:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <extInt_Config+0xb70>)
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <extInt_Config+0xb70>)
 8006114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006118:	6153      	str	r3, [r2, #20]
					break;
 800611a:	e073      	b.n	8006204 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a26      	ldr	r2, [pc, #152]	; (80061bc <extInt_Config+0xb7c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d106      	bne.n	8006136 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <extInt_Config+0xb70>)
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <extInt_Config+0xb70>)
 800612e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006132:	6153      	str	r3, [r2, #20]
					break;
 8006134:	e066      	b.n	8006204 <extInt_Config+0xbc4>
						__NOP();
 8006136:	bf00      	nop
					break;
 8006138:	e064      	b.n	8006204 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800613a:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <extInt_Config+0xb70>)
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <extInt_Config+0xb70>)
 8006140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006144:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <extInt_Config+0xb80>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d104      	bne.n	800615c <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <extInt_Config+0xb70>)
 8006154:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <extInt_Config+0xb70>)
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800615a:	e053      	b.n	8006204 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <extInt_Config+0xb84>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d106      	bne.n	8006176 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <extInt_Config+0xb70>)
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <extInt_Config+0xb70>)
 800616e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006172:	6153      	str	r3, [r2, #20]
						break;
 8006174:	e046      	b.n	8006204 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <extInt_Config+0xb6c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d106      	bne.n	8006190 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <extInt_Config+0xb70>)
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <extInt_Config+0xb70>)
 8006188:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800618c:	6153      	str	r3, [r2, #20]
						break;
 800618e:	e039      	b.n	8006204 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <extInt_Config+0xb74>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d115      	bne.n	80061c8 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800619c:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <extInt_Config+0xb70>)
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <extInt_Config+0xb70>)
 80061a2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80061a6:	6153      	str	r3, [r2, #20]
						break;
 80061a8:	e02c      	b.n	8006204 <extInt_Config+0xbc4>
 80061aa:	bf00      	nop
 80061ac:	40020800 	.word	0x40020800
 80061b0:	40013800 	.word	0x40013800
 80061b4:	40020c00 	.word	0x40020c00
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40021c00 	.word	0x40021c00
 80061c0:	40020000 	.word	0x40020000
 80061c4:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a6c      	ldr	r2, [pc, #432]	; (8006380 <extInt_Config+0xd40>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d106      	bne.n	80061e2 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80061d4:	4b6b      	ldr	r3, [pc, #428]	; (8006384 <extInt_Config+0xd44>)
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	4a6a      	ldr	r2, [pc, #424]	; (8006384 <extInt_Config+0xd44>)
 80061da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061de:	6153      	str	r3, [r2, #20]
						break;
 80061e0:	e010      	b.n	8006204 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a67      	ldr	r2, [pc, #412]	; (8006388 <extInt_Config+0xd48>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d106      	bne.n	80061fc <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80061ee:	4b65      	ldr	r3, [pc, #404]	; (8006384 <extInt_Config+0xd44>)
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	4a64      	ldr	r2, [pc, #400]	; (8006384 <extInt_Config+0xd44>)
 80061f4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80061f8:	6153      	str	r3, [r2, #20]
						break;
 80061fa:	e003      	b.n	8006204 <extInt_Config+0xbc4>
							__NOP();
 80061fc:	bf00      	nop
						break;
 80061fe:	e001      	b.n	8006204 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8006200:	bf00      	nop
						break;
 8006202:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	791b      	ldrb	r3, [r3, #4]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d020      	beq.n	800624e <extInt_Config+0xc0e>
 800620c:	2b02      	cmp	r3, #2
 800620e:	dc37      	bgt.n	8006280 <extInt_Config+0xc40>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <extInt_Config+0xbda>
 8006214:	2b01      	cmp	r3, #1
 8006216:	d00d      	beq.n	8006234 <extInt_Config+0xbf4>
 8006218:	e032      	b.n	8006280 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800621a:	4b5c      	ldr	r3, [pc, #368]	; (800638c <extInt_Config+0xd4c>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	7912      	ldrb	r2, [r2, #4]
 8006224:	4611      	mov	r1, r2
 8006226:	2201      	movs	r2, #1
 8006228:	408a      	lsls	r2, r1
 800622a:	4611      	mov	r1, r2
 800622c:	4a57      	ldr	r2, [pc, #348]	; (800638c <extInt_Config+0xd4c>)
 800622e:	430b      	orrs	r3, r1
 8006230:	60d3      	str	r3, [r2, #12]

		break;
 8006232:	e027      	b.n	8006284 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006234:	4b55      	ldr	r3, [pc, #340]	; (800638c <extInt_Config+0xd4c>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	7912      	ldrb	r2, [r2, #4]
 800623e:	4611      	mov	r1, r2
 8006240:	2201      	movs	r2, #1
 8006242:	408a      	lsls	r2, r1
 8006244:	4611      	mov	r1, r2
 8006246:	4a51      	ldr	r2, [pc, #324]	; (800638c <extInt_Config+0xd4c>)
 8006248:	430b      	orrs	r3, r1
 800624a:	6093      	str	r3, [r2, #8]

		break;
 800624c:	e01a      	b.n	8006284 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800624e:	4b4f      	ldr	r3, [pc, #316]	; (800638c <extInt_Config+0xd4c>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	7912      	ldrb	r2, [r2, #4]
 8006258:	4611      	mov	r1, r2
 800625a:	2201      	movs	r2, #1
 800625c:	408a      	lsls	r2, r1
 800625e:	4611      	mov	r1, r2
 8006260:	4a4a      	ldr	r2, [pc, #296]	; (800638c <extInt_Config+0xd4c>)
 8006262:	430b      	orrs	r3, r1
 8006264:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006266:	4b49      	ldr	r3, [pc, #292]	; (800638c <extInt_Config+0xd4c>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	7912      	ldrb	r2, [r2, #4]
 8006270:	4611      	mov	r1, r2
 8006272:	2201      	movs	r2, #1
 8006274:	408a      	lsls	r2, r1
 8006276:	4611      	mov	r1, r2
 8006278:	4a44      	ldr	r2, [pc, #272]	; (800638c <extInt_Config+0xd4c>)
 800627a:	430b      	orrs	r3, r1
 800627c:	6093      	str	r3, [r2, #8]

		break;
 800627e:	e001      	b.n	8006284 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8006280:	bf00      	nop
		break;
 8006282:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8006284:	b672      	cpsid	i
}
 8006286:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006288:	4b40      	ldr	r3, [pc, #256]	; (800638c <extInt_Config+0xd4c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	7912      	ldrb	r2, [r2, #4]
 8006292:	4611      	mov	r1, r2
 8006294:	2201      	movs	r2, #1
 8006296:	408a      	lsls	r2, r1
 8006298:	4611      	mov	r1, r2
 800629a:	4a3c      	ldr	r2, [pc, #240]	; (800638c <extInt_Config+0xd4c>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d862      	bhi.n	8006370 <extInt_Config+0xd30>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <extInt_Config+0xc70>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f9 	.word	0x080062f9
 80062b8:	08006301 	.word	0x08006301
 80062bc:	08006309 	.word	0x08006309
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006321 	.word	0x08006321
 80062cc:	08006329 	.word	0x08006329
 80062d0:	08006331 	.word	0x08006331
 80062d4:	08006339 	.word	0x08006339
 80062d8:	08006341 	.word	0x08006341
 80062dc:	08006349 	.word	0x08006349
 80062e0:	08006351 	.word	0x08006351
 80062e4:	08006359 	.word	0x08006359
 80062e8:	08006361 	.word	0x08006361
 80062ec:	08006369 	.word	0x08006369
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80062f0:	2006      	movs	r0, #6
 80062f2:	f7ff f987 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 80062f6:	e03d      	b.n	8006374 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80062f8:	2007      	movs	r0, #7
 80062fa:	f7ff f983 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 80062fe:	e039      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8006300:	2008      	movs	r0, #8
 8006302:	f7ff f97f 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006306:	e035      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8006308:	2009      	movs	r0, #9
 800630a:	f7ff f97b 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800630e:	e031      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8006310:	200a      	movs	r0, #10
 8006312:	f7ff f977 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006316:	e02d      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006318:	2017      	movs	r0, #23
 800631a:	f7ff f973 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800631e:	e029      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006320:	2017      	movs	r0, #23
 8006322:	f7ff f96f 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006326:	e025      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006328:	2017      	movs	r0, #23
 800632a:	f7ff f96b 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800632e:	e021      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006330:	2017      	movs	r0, #23
 8006332:	f7ff f967 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006336:	e01d      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006338:	2017      	movs	r0, #23
 800633a:	f7ff f963 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800633e:	e019      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006340:	2028      	movs	r0, #40	; 0x28
 8006342:	f7ff f95f 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006346:	e015      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006348:	2028      	movs	r0, #40	; 0x28
 800634a:	f7ff f95b 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800634e:	e011      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006350:	2028      	movs	r0, #40	; 0x28
 8006352:	f7ff f957 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006356:	e00d      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006358:	2028      	movs	r0, #40	; 0x28
 800635a:	f7ff f953 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800635e:	e009      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006360:	2028      	movs	r0, #40	; 0x28
 8006362:	f7ff f94f 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 8006366:	e005      	b.n	8006374 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006368:	2028      	movs	r0, #40	; 0x28
 800636a:	f7ff f94b 	bl	8005604 <__NVIC_EnableIRQ>
			break;
 800636e:	e001      	b.n	8006374 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8006370:	bf00      	nop
			break;
 8006372:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006374:	b662      	cpsie	i
}
 8006376:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000
 8006384:	40013800 	.word	0x40013800
 8006388:	40021c00 	.word	0x40021c00
 800638c:	40013c00 	.word	0x40013c00

08006390 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
	__NOP();
 8006394:	bf00      	nop
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
	__NOP();
 80063a4:	bf00      	nop
}
 80063a6:	bf00      	nop
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
	__NOP();
 80063b4:	bf00      	nop
}
 80063b6:	bf00      	nop
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
	__NOP();
 80063c4:	bf00      	nop
}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
	__NOP();
 80063d4:	bf00      	nop
}
 80063d6:	bf00      	nop
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
	__NOP();
 80063e4:	bf00      	nop
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
	__NOP();
 80063f4:	bf00      	nop
}
 80063f6:	bf00      	nop
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
	__NOP();
 8006404:	bf00      	nop
}
 8006406:	bf00      	nop
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
	__NOP();
 8006414:	bf00      	nop
}
 8006416:	bf00      	nop
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	__NOP();
 8006424:	bf00      	nop
}
 8006426:	bf00      	nop
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
	__NOP();
 8006434:	bf00      	nop
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
	__NOP();
 8006444:	bf00      	nop
}
 8006446:	bf00      	nop
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
	__NOP();
 8006454:	bf00      	nop
}
 8006456:	bf00      	nop
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
	__NOP();
 8006464:	bf00      	nop
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <EXTI0_IRQHandler+0x24>)
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <EXTI0_IRQHandler+0x24>)
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	4a03      	ldr	r2, [pc, #12]	; (8006494 <EXTI0_IRQHandler+0x24>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800648c:	f7ff ff80 	bl	8006390 <callback_extInt0>
	}
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40013c00 	.word	0x40013c00

08006498 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <EXTI1_IRQHandler+0x24>)
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80064a8:	4b04      	ldr	r3, [pc, #16]	; (80064bc <EXTI1_IRQHandler+0x24>)
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	4a03      	ldr	r2, [pc, #12]	; (80064bc <EXTI1_IRQHandler+0x24>)
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80064b4:	f7fb fa26 	bl	8001904 <callback_extInt1>
	}
}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40013c00 	.word	0x40013c00

080064c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <EXTI2_IRQHandler+0x24>)
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <EXTI2_IRQHandler+0x24>)
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	4a03      	ldr	r2, [pc, #12]	; (80064e4 <EXTI2_IRQHandler+0x24>)
 80064d6:	f043 0304 	orr.w	r3, r3, #4
 80064da:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80064dc:	f7ff ff60 	bl	80063a0 <callback_extInt2>
	}
}
 80064e0:	bf00      	nop
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40013c00 	.word	0x40013c00

080064e8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80064ec:	4b07      	ldr	r3, [pc, #28]	; (800650c <EXTI3_IRQHandler+0x24>)
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <EXTI3_IRQHandler+0x24>)
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	4a03      	ldr	r2, [pc, #12]	; (800650c <EXTI3_IRQHandler+0x24>)
 80064fe:	f043 0308 	orr.w	r3, r3, #8
 8006502:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006504:	f7fb fa0e 	bl	8001924 <callback_extInt3>
	}
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40013c00 	.word	0x40013c00

08006510 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <EXTI4_IRQHandler+0x24>)
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <EXTI4_IRQHandler+0x24>)
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	4a03      	ldr	r2, [pc, #12]	; (8006534 <EXTI4_IRQHandler+0x24>)
 8006526:	f043 0310 	orr.w	r3, r3, #16
 800652a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800652c:	f7ff ff40 	bl	80063b0 <callback_extInt4>
	}
}
 8006530:	bf00      	nop
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40013c00 	.word	0x40013c00

08006538 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800653c:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800654e:	f043 0320 	orr.w	r3, r3, #32
 8006552:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8006554:	f7ff ff34 	bl	80063c0 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8006558:	e03c      	b.n	80065d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800656c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006570:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8006572:	f7ff ff2d 	bl	80063d0 <callback_extInt6>
}
 8006576:	e02d      	b.n	80065d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8006584:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8006590:	f7ff ff26 	bl	80063e0 <callback_extInt7>
}
 8006594:	e01e      	b.n	80065d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80065ae:	f7ff ff1f 	bl	80063f0 <callback_extInt8>
}
 80065b2:	e00f      	b.n	80065d4 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <EXTI9_5_IRQHandler+0xa0>)
 80065c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ca:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80065cc:	f7ff ff18 	bl	8006400 <callback_extInt9>
}
 80065d0:	e000      	b.n	80065d4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80065d2:	bf00      	nop
}
 80065d4:	bf00      	nop
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40013c00 	.word	0x40013c00

080065dc <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	4a29      	ldr	r2, [pc, #164]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 80065f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80065f8:	f7ff ff0a 	bl	8006410 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80065fc:	e049      	b.n	8006692 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80065fe:	4b26      	ldr	r3, [pc, #152]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	4a22      	ldr	r2, [pc, #136]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006614:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8006616:	f7ff ff03 	bl	8006420 <callback_extInt11>
}
 800661a:	e03a      	b.n	8006692 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800661c:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800662e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006632:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8006634:	f7ff fefc 	bl	8006430 <callback_extInt12>
}
 8006638:	e02b      	b.n	8006692 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800663a:	4b17      	ldr	r3, [pc, #92]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	4a13      	ldr	r2, [pc, #76]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800664c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006650:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8006652:	f7ff fef5 	bl	8006440 <callback_extInt13>
}
 8006656:	e01c      	b.n	8006692 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8006658:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	4a0b      	ldr	r2, [pc, #44]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 800666a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800666e:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8006670:	f7ff feee 	bl	8006450 <callback_extInt14>
}
 8006674:	e00d      	b.n	8006692 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <EXTI15_10_IRQHandler+0xbc>)
 8006688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668c:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800668e:	f7ff fee7 	bl	8006460 <callback_extInt15>
}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40013c00 	.word	0x40013c00

0800669c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a88      	ldr	r2, [pc, #544]	; (80068d4 <GPIO_Config+0x238>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d106      	bne.n	80066c4 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80066b6:	4b88      	ldr	r3, [pc, #544]	; (80068d8 <GPIO_Config+0x23c>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	4a87      	ldr	r2, [pc, #540]	; (80068d8 <GPIO_Config+0x23c>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6313      	str	r3, [r2, #48]	; 0x30
 80066c2:	e03a      	b.n	800673a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a84      	ldr	r2, [pc, #528]	; (80068dc <GPIO_Config+0x240>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d106      	bne.n	80066dc <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80066ce:	4b82      	ldr	r3, [pc, #520]	; (80068d8 <GPIO_Config+0x23c>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4a81      	ldr	r2, [pc, #516]	; (80068d8 <GPIO_Config+0x23c>)
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30
 80066da:	e02e      	b.n	800673a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a7f      	ldr	r2, [pc, #508]	; (80068e0 <GPIO_Config+0x244>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d106      	bne.n	80066f4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80066e6:	4b7c      	ldr	r3, [pc, #496]	; (80068d8 <GPIO_Config+0x23c>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	4a7b      	ldr	r2, [pc, #492]	; (80068d8 <GPIO_Config+0x23c>)
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	6313      	str	r3, [r2, #48]	; 0x30
 80066f2:	e022      	b.n	800673a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a7a      	ldr	r2, [pc, #488]	; (80068e4 <GPIO_Config+0x248>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d106      	bne.n	800670c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80066fe:	4b76      	ldr	r3, [pc, #472]	; (80068d8 <GPIO_Config+0x23c>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4a75      	ldr	r2, [pc, #468]	; (80068d8 <GPIO_Config+0x23c>)
 8006704:	f043 0308 	orr.w	r3, r3, #8
 8006708:	6313      	str	r3, [r2, #48]	; 0x30
 800670a:	e016      	b.n	800673a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a75      	ldr	r2, [pc, #468]	; (80068e8 <GPIO_Config+0x24c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d106      	bne.n	8006724 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8006716:	4b70      	ldr	r3, [pc, #448]	; (80068d8 <GPIO_Config+0x23c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	4a6f      	ldr	r2, [pc, #444]	; (80068d8 <GPIO_Config+0x23c>)
 800671c:	f043 0310 	orr.w	r3, r3, #16
 8006720:	6313      	str	r3, [r2, #48]	; 0x30
 8006722:	e00a      	b.n	800673a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a70      	ldr	r2, [pc, #448]	; (80068ec <GPIO_Config+0x250>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d105      	bne.n	800673a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800672e:	4b6a      	ldr	r3, [pc, #424]	; (80068d8 <GPIO_Config+0x23c>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	4a69      	ldr	r2, [pc, #420]	; (80068d8 <GPIO_Config+0x23c>)
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	795b      	ldrb	r3, [r3, #5]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d143      	bne.n	80067ca <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	791b      	ldrb	r3, [r3, #4]
 8006746:	2b07      	cmp	r3, #7
 8006748:	d81f      	bhi.n	800678a <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	791b      	ldrb	r3, [r3, #4]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	210f      	movs	r1, #15
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	43db      	mvns	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	400a      	ands	r2, r1
 800676a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7a5b      	ldrb	r3, [r3, #9]
 8006776:	4619      	mov	r1, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	fa01 f303 	lsl.w	r3, r1, r3
 800677e:	4619      	mov	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	621a      	str	r2, [r3, #32]
 8006788:	e01f      	b.n	80067ca <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	791b      	ldrb	r3, [r3, #4]
 800678e:	3b08      	subs	r3, #8
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800679a:	210f      	movs	r1, #15
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	fa01 f303 	lsl.w	r3, r1, r3
 80067a2:	43db      	mvns	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	400a      	ands	r2, r1
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7a5b      	ldrb	r3, [r3, #9]
 80067b8:	4619      	mov	r1, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	795b      	ldrb	r3, [r3, #5]
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	791b      	ldrb	r3, [r3, #4]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	791b      	ldrb	r3, [r3, #4]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	2103      	movs	r1, #3
 80067ea:	fa01 f303 	lsl.w	r3, r1, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	400a      	ands	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	430a      	orrs	r2, r1
 8006808:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7a1b      	ldrb	r3, [r3, #8]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	791b      	ldrb	r3, [r3, #4]
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	791b      	ldrb	r3, [r3, #4]
 8006824:	4619      	mov	r1, r3
 8006826:	2301      	movs	r3, #1
 8006828:	408b      	lsls	r3, r1
 800682a:	43db      	mvns	r3, r3
 800682c:	4619      	mov	r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	400a      	ands	r2, r1
 8006834:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	799b      	ldrb	r3, [r3, #6]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	fa02 f303 	lsl.w	r3, r2, r3
 8006856:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	2103      	movs	r1, #3
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	43db      	mvns	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	400a      	ands	r2, r1
 8006874:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6899      	ldr	r1, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	79db      	ldrb	r3, [r3, #7]
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	791b      	ldrb	r3, [r3, #4]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	791b      	ldrb	r3, [r3, #4]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	2103      	movs	r1, #3
 80068a6:	fa01 f303 	lsl.w	r3, r1, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	4619      	mov	r1, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	400a      	ands	r2, r1
 80068b4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68d9      	ldr	r1, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40020000 	.word	0x40020000
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020400 	.word	0x40020400
 80068e0:	40020800 	.word	0x40020800
 80068e4:	40020c00 	.word	0x40020c00
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40021c00 	.word	0x40021c00

080068f0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d10d      	bne.n	800691e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	791b      	ldrb	r3, [r3, #4]
 800690c:	4619      	mov	r1, r3
 800690e:	2301      	movs	r3, #1
 8006910:	408b      	lsls	r3, r1
 8006912:	4619      	mov	r1, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800691c:	e00d      	b.n	800693a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	3310      	adds	r3, #16
 800692a:	2101      	movs	r1, #1
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	4619      	mov	r1, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	619a      	str	r2, [r3, #24]
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10d      	bne.n	8006974 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	2301      	movs	r3, #1
 8006966:	408b      	lsls	r3, r1
 8006968:	4619      	mov	r1, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8006972:	e00d      	b.n	8006990 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	3310      	adds	r3, #16
 8006980:	2101      	movs	r1, #1
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	4619      	mov	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	619a      	str	r2, [r3, #24]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	461a      	mov	r2, r3
 80069ae:	2301      	movs	r3, #1
 80069b0:	4093      	lsls	r3, r2
 80069b2:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80069bc:	897b      	ldrh	r3, [r7, #10]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	791b      	ldrb	r3, [r3, #4]
 80069c8:	461a      	mov	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	40d3      	lsrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80069d0:	68fb      	ldr	r3, [r7, #12]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ffd8 	bl	800699c <GPIO_ReadPin>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff ff76 	bl	80068f0 <GPIO_WritePin>
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <readData>:


}

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2e:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 ff35 	bl	80088a4 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68d8      	ldr	r0, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	4619      	mov	r1, r3
 8006a48:	f001 ff97 	bl	800897a <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 ffb8 	bl	80089ca <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a5a:	e000      	b.n	8006a5e <readData+0x52>
		__NOP();
 8006a5c:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f6      	bne.n	8006a5c <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 ff47 	bl	8008906 <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68d8      	ldr	r0, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	791b      	ldrb	r3, [r3, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	4619      	mov	r1, r3
 8006a86:	f001 ff78 	bl	800897a <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 ff61 	bl	8008956 <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fef1 	bl	8008880 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 ffab 	bl	80089fe <i2c_readDataByte>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <readGyro_Z>:

	return GYROY_R;

}

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8006ad8:	2147      	movs	r1, #71	; 0x47
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ff96 	bl	8006a0c <readData>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8006ae4:	2148      	movs	r1, #72	; 0x48
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ff90 	bl	8006a0c <readData>
 8006aec:	4603      	mov	r3, r0
 8006aee:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8006af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	b21a      	sxth	r2, r3
 8006af8:	89bb      	ldrh	r3, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d846      	bhi.n	8006b94 <readGyro_Z+0xdc>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <readGyro_Z+0x54>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b59 	.word	0x08006b59
 8006b18:	08006b77 	.word	0x08006b77
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8006b1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7f9 fd17 	bl	8000554 <__aeabi_i2d>
 8006b26:	a325      	add	r3, pc, #148	; (adr r3, 8006bbc <readGyro_Z+0x104>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fea6 	bl	800087c <__aeabi_ddiv>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b38:	e02d      	b.n	8006b96 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8006b3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7f9 fd08 	bl	8000554 <__aeabi_i2d>
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <readGyro_Z+0xf8>)
 8006b4a:	f7f9 fe97 	bl	800087c <__aeabi_ddiv>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b56:	e01e      	b.n	8006b96 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8006b58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7f9 fcf9 	bl	8000554 <__aeabi_i2d>
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <readGyro_Z+0xfc>)
 8006b68:	f7f9 fe88 	bl	800087c <__aeabi_ddiv>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b74:	e00f      	b.n	8006b96 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8006b76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7f9 fcea 	bl	8000554 <__aeabi_i2d>
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <readGyro_Z+0x100>)
 8006b86:	f7f9 fe79 	bl	800087c <__aeabi_ddiv>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b92:	e000      	b.n	8006b96 <readGyro_Z+0xde>
		}default:{
			break;
 8006b94:	bf00      	nop
		}

	}

	return GYROZ_R;
 8006b96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b9a:	f7fa f83d 	bl	8000c18 <__aeabi_d2f>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	ee07 3a90 	vmov	s15, r3

}
 8006ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40508000 	.word	0x40508000
 8006bb4:	40408000 	.word	0x40408000
 8006bb8:	40300000 	.word	0x40300000
 8006bbc:	00000000 	.word	0x00000000
 8006bc0:	40606000 	.word	0x40606000
 8006bc4:	00000000 	.word	0x00000000

08006bc8 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8006bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006bcc:	b08a      	sub	sp, #40	; 0x28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006bde:	f7f9 fb6b 	bl	80002b8 <__aeabi_dsub>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006bf6:	f7f9 fb5f 	bl	80002b8 <__aeabi_dsub>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8006c02:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8006d10 <calculation_parameter_distance+0x148>
 8006c06:	ed97 0b08 	vldr	d0, [r7, #32]
 8006c0a:	f005 fbdb 	bl	800c3c4 <pow>
 8006c0e:	ec59 8b10 	vmov	r8, r9, d0
 8006c12:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8006d10 <calculation_parameter_distance+0x148>
 8006c16:	ed97 0b06 	vldr	d0, [r7, #24]
 8006c1a:	f005 fbd3 	bl	800c3c4 <pow>
 8006c1e:	ec53 2b10 	vmov	r2, r3, d0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fb49 	bl	80002bc <__adddf3>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	ec43 2b17 	vmov	d7, r2, r3
 8006c32:	eeb0 0a47 	vmov.f32	s0, s14
 8006c36:	eef0 0a67 	vmov.f32	s1, s15
 8006c3a:	f005 fc33 	bl	800c4a4 <sqrt>
 8006c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8006c42:	eef0 7a60 	vmov.f32	s15, s1
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 8006c4c:	6979      	ldr	r1, [r7, #20]
 8006c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c52:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c76:	f7f9 fcd7 	bl	8000628 <__aeabi_dmul>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4690      	mov	r8, r2
 8006c80:	4699      	mov	r9, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c8c:	f7f9 fccc 	bl	8000628 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	f7f9 fb0e 	bl	80002b8 <__aeabi_dsub>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	6979      	ldr	r1, [r7, #20]
 8006ca2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8006cb0:	6a3c      	ldr	r4, [r7, #32]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4614      	mov	r4, r2
 8006cde:	461d      	mov	r5, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cea:	f7f9 fc9d 	bl	8000628 <__aeabi_dmul>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fae1 	bl	80002bc <__adddf3>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8006d04:	bf00      	nop
 8006d06:	3728      	adds	r7, #40	; 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d0e:	bf00      	nop
 8006d10:	00000000 	.word	0x00000000
 8006d14:	40000000 	.word	0x40000000

08006d18 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8006d18:	b5b0      	push	{r4, r5, r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6178      	str	r0, [r7, #20]
 8006d20:	ed87 0b02 	vstr	d0, [r7, #8]
 8006d24:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d32:	f7f9 fc79 	bl	8000628 <__aeabi_dmul>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	461d      	mov	r5, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d48:	f7f9 fc6e 	bl	8000628 <__aeabi_dmul>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fab2 	bl	80002bc <__adddf3>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006d66:	f7f9 faa9 	bl	80002bc <__adddf3>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f7f9 fd80 	bl	800087c <__aeabi_ddiv>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8006d80:	4611      	mov	r1, r2
 8006d82:	61b9      	str	r1, [r7, #24]
 8006d84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d88:	61fb      	str	r3, [r7, #28]

	return distance;
 8006d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d92:	eeb0 0a47 	vmov.f32	s0, s14
 8006d96:	eef0 0a67 	vmov.f32	s1, s15
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bdb0      	pop	{r4, r5, r7, pc}

08006da0 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6178      	str	r0, [r7, #20]
 8006da8:	ed87 0b02 	vstr	d0, [r7, #8]
 8006dac:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dba:	f7f9 fc35 	bl	8000628 <__aeabi_dmul>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd0:	f7f9 fc2a 	bl	8000628 <__aeabi_dmul>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f7f9 fa6e 	bl	80002bc <__adddf3>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006dee:	f7f9 fa65 	bl	80002bc <__adddf3>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8006e00:	f7f9 fd3c 	bl	800087c <__aeabi_ddiv>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8006e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e10:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e14:	eeb0 0a47 	vmov.f32	s0, s14
 8006e18:	eef0 0a67 	vmov.f32	s1, s15
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e24 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6c      	ldr	r2, [pc, #432]	; (8006fe4 <pwm_Config+0x1c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d106      	bne.n	8006e44 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8006e36:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	4a6b      	ldr	r2, [pc, #428]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6453      	str	r3, [r2, #68]	; 0x44
 8006e42:	e030      	b.n	8006ea6 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4c:	d106      	bne.n	8006e5c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8006e4e:	4b66      	ldr	r3, [pc, #408]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	4a65      	ldr	r2, [pc, #404]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5a:	e024      	b.n	8006ea6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a62      	ldr	r2, [pc, #392]	; (8006fec <pwm_Config+0x1c8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d106      	bne.n	8006e74 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8006e66:	4b60      	ldr	r3, [pc, #384]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	4a5f      	ldr	r2, [pc, #380]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	6413      	str	r3, [r2, #64]	; 0x40
 8006e72:	e018      	b.n	8006ea6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a5d      	ldr	r2, [pc, #372]	; (8006ff0 <pwm_Config+0x1cc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d106      	bne.n	8006e8c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006e7e:	4b5a      	ldr	r3, [pc, #360]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	4a59      	ldr	r2, [pc, #356]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	6413      	str	r3, [r2, #64]	; 0x40
 8006e8a:	e00c      	b.n	8006ea6 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a58      	ldr	r2, [pc, #352]	; (8006ff4 <pwm_Config+0x1d0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d106      	bne.n	8006ea4 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8006e96:	4b54      	ldr	r3, [pc, #336]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	4a53      	ldr	r2, [pc, #332]	; (8006fe8 <pwm_Config+0x1c4>)
 8006e9c:	f043 0308 	orr.w	r3, r3, #8
 8006ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea2:	e000      	b.n	8006ea6 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8006ea4:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006eb4:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7f5b      	ldrb	r3, [r3, #29]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f930 	bl	8007124 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa67 	bl	8007398 <setDuttyCycle>
 8006eca:	e005      	b.n	8006ed8 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f929 	bl	8007124 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb38 	bl	8007548 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0210 	bic.w	r2, r2, #16
 8006ee6:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	7a1b      	ldrb	r3, [r3, #8]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d86f      	bhi.n	8006fd8 <pwm_Config+0x1b4>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <pwm_Config+0xdc>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f43 	.word	0x08006f43
 8006f08:	08006f75 	.word	0x08006f75
 8006f0c:	08006fa7 	.word	0x08006fa7
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0203 	bic.w	r2, r2, #3
 8006f1e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006f2e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0208 	orr.w	r2, r2, #8
 8006f3e:	619a      	str	r2, [r3, #24]


		break;
 8006f40:	e04b      	b.n	8006fda <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f50:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006f60:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f70:	619a      	str	r2, [r3, #24]

		break;
 8006f72:	e032      	b.n	8006fda <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69da      	ldr	r2, [r3, #28]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0203 	bic.w	r2, r2, #3
 8006f82:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006f92:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69da      	ldr	r2, [r3, #28]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	61da      	str	r2, [r3, #28]

		break;
 8006fa4:	e019      	b.n	8006fda <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fb4:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006fc4:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fd4:	61da      	str	r2, [r3, #28]

		break;
 8006fd6:	e000      	b.n	8006fda <pwm_Config+0x1b6>
	}

	default:{
		break;
 8006fd8:	bf00      	nop
	}// fin del switch-case




}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00

08006ff8 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]

}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3d      	ldr	r2, [pc, #244]	; (8007120 <enableOutput+0x104>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d13a      	bne.n	80070a4 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800703c:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7a1b      	ldrb	r3, [r3, #8]
 8007042:	2b03      	cmp	r3, #3
 8007044:	d862      	bhi.n	800710c <enableOutput+0xf0>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <enableOutput+0x30>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	0800705d 	.word	0x0800705d
 8007050:	0800706f 	.word	0x0800706f
 8007054:	08007081 	.word	0x08007081
 8007058:	08007093 	.word	0x08007093
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a1a      	ldr	r2, [r3, #32]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	621a      	str	r2, [r3, #32]

				break;
 800706c:	e051      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6a1a      	ldr	r2, [r3, #32]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0210 	orr.w	r2, r2, #16
 800707c:	621a      	str	r2, [r3, #32]

				break;
 800707e:	e048      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a1a      	ldr	r2, [r3, #32]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800708e:	621a      	str	r2, [r3, #32]

				break;
 8007090:	e03f      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070a0:	621a      	str	r2, [r3, #32]

				break;
 80070a2:	e036      	b.n	8007112 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7a1b      	ldrb	r3, [r3, #8]
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d831      	bhi.n	8007110 <enableOutput+0xf4>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <enableOutput+0x98>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d7 	.word	0x080070d7
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070fb 	.word	0x080070fb
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	621a      	str	r2, [r3, #32]

				break;
 80070d4:	e01d      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0210 	orr.w	r2, r2, #16
 80070e4:	621a      	str	r2, [r3, #32]

				break;
 80070e6:	e014      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f6:	621a      	str	r2, [r3, #32]

				break;
 80070f8:	e00b      	b.n	8007112 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1a      	ldr	r2, [r3, #32]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007108:	621a      	str	r2, [r3, #32]

				break;
 800710a:	e002      	b.n	8007112 <enableOutput+0xf6>
				break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <enableOutput+0xf6>
			}

			default: {
				break;
 8007110:	bf00      	nop
			}

		}
	}
	return SET;
 8007112:	2301      	movs	r3, #1
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40010000 	.word	0x40010000

08007124 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68d2      	ldr	r2, [r2, #12]
 8007138:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b10      	cmp	r3, #16
 8007144:	d01a      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b14      	cmp	r3, #20
 800714a:	d017      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b1e      	cmp	r3, #30
 8007150:	d014      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b28      	cmp	r3, #40	; 0x28
 8007156:	d011      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b32      	cmp	r3, #50	; 0x32
 800715c:	d00e      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b3c      	cmp	r3, #60	; 0x3c
 8007162:	d00b      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b46      	cmp	r3, #70	; 0x46
 8007168:	d008      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b50      	cmp	r3, #80	; 0x50
 800716e:	d005      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b5a      	cmp	r3, #90	; 0x5a
 8007174:	d002      	beq.n	800717c <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b64      	cmp	r3, #100	; 0x64
 800717a:	d118      	bne.n	80071ae <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	4b7b      	ldr	r3, [pc, #492]	; (8007374 <setFrequency+0x250>)
 8007188:	f7f9 fa4e 	bl	8000628 <__aeabi_dmul>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4610      	mov	r0, r2
 8007192:	4619      	mov	r1, r3
 8007194:	f7f9 fd20 	bl	8000bd8 <__aeabi_d2uiz>
 8007198:	4603      	mov	r3, r0
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b76      	ldr	r3, [pc, #472]	; (8007378 <setFrequency+0x254>)
 800719e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80071a0:	4b75      	ldr	r3, [pc, #468]	; (8007378 <setFrequency+0x254>)
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	1e5a      	subs	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80071ac:	e0dd      	b.n	800736a <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2ba0      	cmp	r3, #160	; 0xa0
 80071b2:	d022      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2bc8      	cmp	r3, #200	; 0xc8
 80071b8:	d01f      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80071c0:	d01b      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80071c8:	d017      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071d0:	d013      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80071d8:	d00f      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80071e0:	d00b      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80071e8:	d007      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80071f0:	d003      	beq.n	80071fa <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071f8:	d118      	bne.n	800722c <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	4b5d      	ldr	r3, [pc, #372]	; (800737c <setFrequency+0x258>)
 8007206:	f7f9 fa0f 	bl	8000628 <__aeabi_dmul>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4610      	mov	r0, r2
 8007210:	4619      	mov	r1, r3
 8007212:	f7f9 fce1 	bl	8000bd8 <__aeabi_d2uiz>
 8007216:	4603      	mov	r3, r0
 8007218:	b29a      	uxth	r2, r3
 800721a:	4b57      	ldr	r3, [pc, #348]	; (8007378 <setFrequency+0x254>)
 800721c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800721e:	4b56      	ldr	r3, [pc, #344]	; (8007378 <setFrequency+0x254>)
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	1e5a      	subs	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	62da      	str	r2, [r3, #44]	; 0x2c
 800722a:	e09e      	b.n	800736a <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007232:	d029      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800723a:	d025      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007242:	4293      	cmp	r3, r2
 8007244:	d020      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800724c:	d01c      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f241 3288 	movw	r2, #5000	; 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d017      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f241 7270 	movw	r2, #6000	; 0x1770
 800725e:	4293      	cmp	r3, r2
 8007260:	d012      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f641 3258 	movw	r2, #7000	; 0x1b58
 8007268:	4293      	cmp	r3, r2
 800726a:	d00d      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007272:	d009      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f242 3228 	movw	r2, #9000	; 0x2328
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f242 7210 	movw	r2, #10000	; 0x2710
 8007284:	4293      	cmp	r3, r2
 8007286:	d118      	bne.n	80072ba <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	4b3b      	ldr	r3, [pc, #236]	; (8007380 <setFrequency+0x25c>)
 8007294:	f7f9 f9c8 	bl	8000628 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4610      	mov	r0, r2
 800729e:	4619      	mov	r1, r3
 80072a0:	f7f9 fc9a 	bl	8000bd8 <__aeabi_d2uiz>
 80072a4:	4603      	mov	r3, r0
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	4b33      	ldr	r3, [pc, #204]	; (8007378 <setFrequency+0x254>)
 80072aa:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80072ac:	4b32      	ldr	r3, [pc, #200]	; (8007378 <setFrequency+0x254>)
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	1e5a      	subs	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80072b8:	e057      	b.n	800736a <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80072c0:	d028      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d023      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f247 5230 	movw	r2, #30000	; 0x7530
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01e      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80072dc:	4293      	cmp	r3, r2
 80072de:	d019      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d014      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f64e 2260 	movw	r2, #60000	; 0xea60
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00f      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a23      	ldr	r2, [pc, #140]	; (8007384 <setFrequency+0x260>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00b      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a22      	ldr	r2, [pc, #136]	; (8007388 <setFrequency+0x264>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a21      	ldr	r2, [pc, #132]	; (800738c <setFrequency+0x268>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a20      	ldr	r2, [pc, #128]	; (8007390 <setFrequency+0x26c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d111      	bne.n	8007338 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f7f9 fc5b 	bl	8000bd8 <__aeabi_d2uiz>
 8007322:	4603      	mov	r3, r0
 8007324:	b29a      	uxth	r2, r3
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <setFrequency+0x254>)
 8007328:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <setFrequency+0x254>)
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	1e5a      	subs	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	62da      	str	r2, [r3, #44]	; 0x2c
 8007336:	e018      	b.n	800736a <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	4b14      	ldr	r3, [pc, #80]	; (8007394 <setFrequency+0x270>)
 8007344:	f7f9 fa9a 	bl	800087c <__aeabi_ddiv>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4610      	mov	r0, r2
 800734e:	4619      	mov	r1, r3
 8007350:	f7f9 fc42 	bl	8000bd8 <__aeabi_d2uiz>
 8007354:	4603      	mov	r3, r0
 8007356:	b29a      	uxth	r2, r3
 8007358:	4b07      	ldr	r3, [pc, #28]	; (8007378 <setFrequency+0x254>)
 800735a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <setFrequency+0x254>)
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	408f4000 	.word	0x408f4000
 8007378:	20011d20 	.word	0x20011d20
 800737c:	40590000 	.word	0x40590000
 8007380:	40240000 	.word	0x40240000
 8007384:	00011170 	.word	0x00011170
 8007388:	00013880 	.word	0x00013880
 800738c:	00015f90 	.word	0x00015f90
 8007390:	000186a0 	.word	0x000186a0
 8007394:	40340000 	.word	0x40340000

08007398 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b08b      	sub	sp, #44	; 0x2c
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7a1b      	ldrb	r3, [r3, #8]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	f200 80c3 	bhi.w	8007530 <setDuttyCycle+0x198>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <setDuttyCycle+0x18>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	08007479 	.word	0x08007479
 80073bc:	080074d5 	.word	0x080074d5
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80073c6:	4b5d      	ldr	r3, [pc, #372]	; (800753c <setDuttyCycle+0x1a4>)
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	ee17 0a90 	vmov	r0, s15
 80073da:	f7f9 f8cd 	bl	8000578 <__aeabi_f2d>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	4b55      	ldr	r3, [pc, #340]	; (8007540 <setDuttyCycle+0x1a8>)
 80073ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f0:	f7f9 fa44 	bl	800087c <__aeabi_ddiv>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4610      	mov	r0, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	4b50      	ldr	r3, [pc, #320]	; (8007544 <setDuttyCycle+0x1ac>)
 8007402:	f7f8 ff59 	bl	80002b8 <__aeabi_dsub>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4610      	mov	r0, r2
 800740c:	4619      	mov	r1, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681c      	ldr	r4, [r3, #0]
 8007412:	f7f9 fbe1 	bl	8000bd8 <__aeabi_d2uiz>
 8007416:	4603      	mov	r3, r0
 8007418:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800741a:	e08a      	b.n	8007532 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	ed93 7a06 	vldr	s14, [r3, #24]
 8007422:	4b46      	ldr	r3, [pc, #280]	; (800753c <setDuttyCycle+0x1a4>)
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	ee17 0a90 	vmov	r0, s15
 8007436:	f7f9 f89f 	bl	8000578 <__aeabi_f2d>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	4b3e      	ldr	r3, [pc, #248]	; (8007540 <setDuttyCycle+0x1a8>)
 8007448:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800744c:	f7f9 fa16 	bl	800087c <__aeabi_ddiv>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4610      	mov	r0, r2
 8007456:	4619      	mov	r1, r3
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	4b39      	ldr	r3, [pc, #228]	; (8007544 <setDuttyCycle+0x1ac>)
 800745e:	f7f8 ff2b 	bl	80002b8 <__aeabi_dsub>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4610      	mov	r0, r2
 8007468:	4619      	mov	r1, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681c      	ldr	r4, [r3, #0]
 800746e:	f7f9 fbb3 	bl	8000bd8 <__aeabi_d2uiz>
 8007472:	4603      	mov	r3, r0
 8007474:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8007476:	e05c      	b.n	8007532 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	ed93 7a06 	vldr	s14, [r3, #24]
 800747e:	4b2f      	ldr	r3, [pc, #188]	; (800753c <setDuttyCycle+0x1a4>)
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	ee17 0a90 	vmov	r0, s15
 8007492:	f7f9 f871 	bl	8000578 <__aeabi_f2d>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	4b27      	ldr	r3, [pc, #156]	; (8007540 <setDuttyCycle+0x1a8>)
 80074a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074a8:	f7f9 f9e8 	bl	800087c <__aeabi_ddiv>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4610      	mov	r0, r2
 80074b2:	4619      	mov	r1, r3
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	4b22      	ldr	r3, [pc, #136]	; (8007544 <setDuttyCycle+0x1ac>)
 80074ba:	f7f8 fefd 	bl	80002b8 <__aeabi_dsub>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681c      	ldr	r4, [r3, #0]
 80074ca:	f7f9 fb85 	bl	8000bd8 <__aeabi_d2uiz>
 80074ce:	4603      	mov	r3, r0
 80074d0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80074d2:	e02e      	b.n	8007532 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80074da:	4b18      	ldr	r3, [pc, #96]	; (800753c <setDuttyCycle+0x1a4>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	ee17 0a90 	vmov	r0, s15
 80074ee:	f7f9 f843 	bl	8000578 <__aeabi_f2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	4b10      	ldr	r3, [pc, #64]	; (8007540 <setDuttyCycle+0x1a8>)
 8007500:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007504:	f7f9 f9ba 	bl	800087c <__aeabi_ddiv>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <setDuttyCycle+0x1ac>)
 8007516:	f7f8 fecf 	bl	80002b8 <__aeabi_dsub>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681c      	ldr	r4, [r3, #0]
 8007526:	f7f9 fb57 	bl	8000bd8 <__aeabi_d2uiz>
 800752a:	4603      	mov	r3, r0
 800752c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800752e:	e000      	b.n	8007532 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8007530:	bf00      	nop
	}

	}// fin del switch-case

}
 8007532:	bf00      	nop
 8007534:	372c      	adds	r7, #44	; 0x2c
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}
 800753a:	bf00      	nop
 800753c:	20011d20 	.word	0x20011d20
 8007540:	40590000 	.word	0x40590000
 8007544:	3ff00000 	.word	0x3ff00000

08007548 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b08b      	sub	sp, #44	; 0x2c
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	7a1b      	ldrb	r3, [r3, #8]
 8007554:	2b03      	cmp	r3, #3
 8007556:	f200 80d3 	bhi.w	8007700 <setDuttyCycleAfOpt+0x1b8>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <setDuttyCycleAfOpt+0x18>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	080075d5 	.word	0x080075d5
 8007568:	08007639 	.word	0x08007639
 800756c:	0800769d 	.word	0x0800769d
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	edd3 7a06 	vldr	s15, [r3, #24]
 8007576:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800770c <setDuttyCycleAfOpt+0x1c4>
 800757a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800757e:	4b64      	ldr	r3, [pc, #400]	; (8007710 <setDuttyCycleAfOpt+0x1c8>)
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	ee17 0a90 	vmov	r0, s15
 8007592:	f7f8 fff1 	bl	8000578 <__aeabi_f2d>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	4b5c      	ldr	r3, [pc, #368]	; (8007714 <setDuttyCycleAfOpt+0x1cc>)
 80075a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075a8:	f7f9 f968 	bl	800087c <__aeabi_ddiv>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4610      	mov	r0, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	4b57      	ldr	r3, [pc, #348]	; (8007718 <setDuttyCycleAfOpt+0x1d0>)
 80075ba:	f7f8 fe7d 	bl	80002b8 <__aeabi_dsub>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4610      	mov	r0, r2
 80075c4:	4619      	mov	r1, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	f7f9 fb05 	bl	8000bd8 <__aeabi_d2uiz>
 80075ce:	4603      	mov	r3, r0
 80075d0:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80075d2:	e096      	b.n	8007702 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80075da:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800770c <setDuttyCycleAfOpt+0x1c4>
 80075de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075e2:	4b4b      	ldr	r3, [pc, #300]	; (8007710 <setDuttyCycleAfOpt+0x1c8>)
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	ee17 0a90 	vmov	r0, s15
 80075f6:	f7f8 ffbf 	bl	8000578 <__aeabi_f2d>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	4b43      	ldr	r3, [pc, #268]	; (8007714 <setDuttyCycleAfOpt+0x1cc>)
 8007608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800760c:	f7f9 f936 	bl	800087c <__aeabi_ddiv>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4610      	mov	r0, r2
 8007616:	4619      	mov	r1, r3
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	4b3e      	ldr	r3, [pc, #248]	; (8007718 <setDuttyCycleAfOpt+0x1d0>)
 800761e:	f7f8 fe4b 	bl	80002b8 <__aeabi_dsub>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681c      	ldr	r4, [r3, #0]
 800762e:	f7f9 fad3 	bl	8000bd8 <__aeabi_d2uiz>
 8007632:	4603      	mov	r3, r0
 8007634:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8007636:	e064      	b.n	8007702 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edd3 7a06 	vldr	s15, [r3, #24]
 800763e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800770c <setDuttyCycleAfOpt+0x1c4>
 8007642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007646:	4b32      	ldr	r3, [pc, #200]	; (8007710 <setDuttyCycleAfOpt+0x1c8>)
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	ee17 0a90 	vmov	r0, s15
 800765a:	f7f8 ff8d 	bl	8000578 <__aeabi_f2d>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <setDuttyCycleAfOpt+0x1cc>)
 800766c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007670:	f7f9 f904 	bl	800087c <__aeabi_ddiv>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4610      	mov	r0, r2
 800767a:	4619      	mov	r1, r3
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <setDuttyCycleAfOpt+0x1d0>)
 8007682:	f7f8 fe19 	bl	80002b8 <__aeabi_dsub>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4610      	mov	r0, r2
 800768c:	4619      	mov	r1, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681c      	ldr	r4, [r3, #0]
 8007692:	f7f9 faa1 	bl	8000bd8 <__aeabi_d2uiz>
 8007696:	4603      	mov	r3, r0
 8007698:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800769a:	e032      	b.n	8007702 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	edd3 7a06 	vldr	s15, [r3, #24]
 80076a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800770c <setDuttyCycleAfOpt+0x1c4>
 80076a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076aa:	4b19      	ldr	r3, [pc, #100]	; (8007710 <setDuttyCycleAfOpt+0x1c8>)
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	ee17 0a90 	vmov	r0, s15
 80076be:	f7f8 ff5b 	bl	8000578 <__aeabi_f2d>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <setDuttyCycleAfOpt+0x1cc>)
 80076d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076d4:	f7f9 f8d2 	bl	800087c <__aeabi_ddiv>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4610      	mov	r0, r2
 80076de:	4619      	mov	r1, r3
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <setDuttyCycleAfOpt+0x1d0>)
 80076e6:	f7f8 fde7 	bl	80002b8 <__aeabi_dsub>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4610      	mov	r0, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681c      	ldr	r4, [r3, #0]
 80076f6:	f7f9 fa6f 	bl	8000bd8 <__aeabi_d2uiz>
 80076fa:	4603      	mov	r3, r0
 80076fc:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80076fe:	e000      	b.n	8007702 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8007700:	bf00      	nop
	}

	}// fin del switch-case


}
 8007702:	bf00      	nop
 8007704:	372c      	adds	r7, #44	; 0x2c
 8007706:	46bd      	mov	sp, r7
 8007708:	bd90      	pop	{r4, r7, pc}
 800770a:	bf00      	nop
 800770c:	42c80000 	.word	0x42c80000
 8007710:	20011d20 	.word	0x20011d20
 8007714:	40590000 	.word	0x40590000
 8007718:	3ff00000 	.word	0x3ff00000

0800771c <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7a1b      	ldrb	r3, [r3, #8]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d82f      	bhi.n	800778c <disableOutput+0x70>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <disableOutput+0x18>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007745 	.word	0x08007745
 8007738:	08007757 	.word	0x08007757
 800773c:	08007769 	.word	0x08007769
 8007740:	0800777b 	.word	0x0800777b
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1a      	ldr	r2, [r3, #32]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	621a      	str	r2, [r3, #32]

			break;
 8007754:	e01b      	b.n	800778e <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0210 	bic.w	r2, r2, #16
 8007764:	621a      	str	r2, [r3, #32]

			break;
 8007766:	e012      	b.n	800778e <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007776:	621a      	str	r2, [r3, #32]

			break;
 8007778:	e009      	b.n	800778e <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6a1a      	ldr	r2, [r3, #32]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007788:	621a      	str	r2, [r3, #32]

			break;
 800778a:	e000      	b.n	800778e <disableOutput+0x72>
		}

		default: {
			break;
 800778c:	bf00      	nop
		}
		}

	return RESET;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7a1b      	ldrb	r3, [r3, #8]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d82f      	bhi.n	800780c <PWMx_Toggle+0x70>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <PWMx_Toggle+0x18>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077c5 	.word	0x080077c5
 80077b8:	080077d7 	.word	0x080077d7
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	080077fb 	.word	0x080077fb
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6a1a      	ldr	r2, [r3, #32]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f082 0202 	eor.w	r2, r2, #2
 80077d2:	621a      	str	r2, [r3, #32]

				break;
 80077d4:	e01b      	b.n	800780e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f082 0220 	eor.w	r2, r2, #32
 80077e4:	621a      	str	r2, [r3, #32]

				break;
 80077e6:	e012      	b.n	800780e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80077f6:	621a      	str	r2, [r3, #32]

				break;
 80077f8:	e009      	b.n	800780e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1a      	ldr	r2, [r3, #32]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8007808:	621a      	str	r2, [r3, #32]

				break;
 800780a:	e000      	b.n	800780e <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800780c:	bf00      	nop
			}
			}


}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop

0800781c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8007826:	4b92      	ldr	r3, [pc, #584]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a91      	ldr	r2, [pc, #580]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800782c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007830:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8007832:	4b8f      	ldr	r3, [pc, #572]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800783a:	4b8e      	ldr	r3, [pc, #568]	; (8007a74 <RCC_enableMaxFrequencies+0x258>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a8d      	ldr	r2, [pc, #564]	; (8007a74 <RCC_enableMaxFrequencies+0x258>)
 8007840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007844:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8007846:	4b8a      	ldr	r3, [pc, #552]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4a89      	ldr	r2, [pc, #548]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800784c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007850:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b08      	cmp	r3, #8
 8007856:	f200 82fc 	bhi.w	8007e52 <RCC_enableMaxFrequencies+0x636>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <RCC_enableMaxFrequencies+0x44>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007885 	.word	0x08007885
 8007864:	08007927 	.word	0x08007927
 8007868:	080079c9 	.word	0x080079c9
 800786c:	08007a7d 	.word	0x08007a7d
 8007870:	08007b1f 	.word	0x08007b1f
 8007874:	08007bc1 	.word	0x08007bc1
 8007878:	08007c6d 	.word	0x08007c6d
 800787c:	08007d0f 	.word	0x08007d0f
 8007880:	08007db1 	.word	0x08007db1
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007884:	4b7a      	ldr	r3, [pc, #488]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a79      	ldr	r2, [pc, #484]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800788a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800788e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007890:	4b77      	ldr	r3, [pc, #476]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	4a76      	ldr	r2, [pc, #472]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007896:	f043 0310 	orr.w	r3, r3, #16
 800789a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800789c:	4b74      	ldr	r3, [pc, #464]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	4a73      	ldr	r2, [pc, #460]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80078ac:	4b70      	ldr	r3, [pc, #448]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a6f      	ldr	r2, [pc, #444]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078b2:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80078b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80078b8:	4b6d      	ldr	r3, [pc, #436]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	4a6c      	ldr	r2, [pc, #432]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80078c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80078c4:	4b6a      	ldr	r3, [pc, #424]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4a69      	ldr	r2, [pc, #420]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ce:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80078d0:	4b67      	ldr	r3, [pc, #412]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	4a66      	ldr	r2, [pc, #408]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078da:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80078dc:	4b64      	ldr	r3, [pc, #400]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	4a63      	ldr	r2, [pc, #396]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80078e8:	4b61      	ldr	r3, [pc, #388]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	4a60      	ldr	r2, [pc, #384]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80078f4:	4b5e      	ldr	r3, [pc, #376]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a5d      	ldr	r2, [pc, #372]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80078fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fe:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007900:	e000      	b.n	8007904 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8007902:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007904:	4b5a      	ldr	r3, [pc, #360]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0f8      	beq.n	8007902 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007910:	4b59      	ldr	r3, [pc, #356]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a58      	ldr	r2, [pc, #352]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007916:	f023 030f 	bic.w	r3, r3, #15
 800791a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800791c:	4b56      	ldr	r3, [pc, #344]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 800791e:	4a56      	ldr	r2, [pc, #344]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6013      	str	r3, [r2, #0]

			break;
 8007924:	e296      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007926:	4b52      	ldr	r3, [pc, #328]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4a51      	ldr	r2, [pc, #324]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800792c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007930:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007932:	4b4f      	ldr	r3, [pc, #316]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4a4e      	ldr	r2, [pc, #312]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007938:	f043 0310 	orr.w	r3, r3, #16
 800793c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800793e:	4b4c      	ldr	r3, [pc, #304]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	4a4b      	ldr	r2, [pc, #300]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007944:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800794e:	4b48      	ldr	r3, [pc, #288]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4a47      	ldr	r2, [pc, #284]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007954:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8007958:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800795a:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	4a44      	ldr	r2, [pc, #272]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007960:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007964:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8007966:	4b42      	ldr	r3, [pc, #264]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	4a41      	ldr	r2, [pc, #260]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800796c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007970:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007972:	4b3f      	ldr	r3, [pc, #252]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4a3e      	ldr	r2, [pc, #248]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800797c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800797e:	4b3c      	ldr	r3, [pc, #240]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4a3b      	ldr	r2, [pc, #236]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007988:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800798a:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4a38      	ldr	r2, [pc, #224]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007994:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007996:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a35      	ldr	r2, [pc, #212]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 800799c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80079a2:	e000      	b.n	80079a6 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 80079a4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80079a6:	4b32      	ldr	r3, [pc, #200]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f8      	beq.n	80079a4 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80079b2:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a30      	ldr	r2, [pc, #192]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 80079b8:	f023 030f 	bic.w	r3, r3, #15
 80079bc:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80079be:	4b2e      	ldr	r3, [pc, #184]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 80079c0:	4a2d      	ldr	r2, [pc, #180]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6013      	str	r3, [r2, #0]

			break;
 80079c6:	e245      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80079c8:	4b29      	ldr	r3, [pc, #164]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4a28      	ldr	r2, [pc, #160]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80079d4:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079da:	f043 0310 	orr.w	r3, r3, #16
 80079de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80079e0:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	4a22      	ldr	r2, [pc, #136]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80079f0:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079f6:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80079fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007a06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8007a08:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a12:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007a14:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a1e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007a20:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	4a12      	ldr	r2, [pc, #72]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a2a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a36:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a0c      	ldr	r2, [pc, #48]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a42:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007a44:	e000      	b.n	8007a48 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8007a46:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007a48:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <RCC_enableMaxFrequencies+0x254>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f8      	beq.n	8007a46 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a07      	ldr	r2, [pc, #28]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007a5a:	f023 030f 	bic.w	r3, r3, #15
 8007a5e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a04      	ldr	r2, [pc, #16]	; (8007a78 <RCC_enableMaxFrequencies+0x25c>)
 8007a66:	f043 0301 	orr.w	r3, r3, #1
 8007a6a:	6013      	str	r3, [r2, #0]


			break;
 8007a6c:	e1f2      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800
 8007a74:	40007000 	.word	0x40007000
 8007a78:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007a7c:	4b79      	ldr	r3, [pc, #484]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4a78      	ldr	r2, [pc, #480]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a86:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007a88:	4b76      	ldr	r3, [pc, #472]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a75      	ldr	r2, [pc, #468]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a8e:	f043 0310 	orr.w	r3, r3, #16
 8007a92:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007a94:	4b73      	ldr	r3, [pc, #460]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4a72      	ldr	r2, [pc, #456]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007a9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8007aa4:	4b6f      	ldr	r3, [pc, #444]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4a6e      	ldr	r2, [pc, #440]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007aaa:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8007aae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007ab0:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a6b      	ldr	r2, [pc, #428]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ab6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007aba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007abc:	4b69      	ldr	r3, [pc, #420]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007abe:	4a69      	ldr	r2, [pc, #420]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007ac4:	4b67      	ldr	r3, [pc, #412]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a66      	ldr	r2, [pc, #408]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007ad0:	4b64      	ldr	r3, [pc, #400]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	4a63      	ldr	r2, [pc, #396]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ad6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ada:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007adc:	4b61      	ldr	r3, [pc, #388]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4a60      	ldr	r2, [pc, #384]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007ae8:	4b5e      	ldr	r3, [pc, #376]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a5d      	ldr	r2, [pc, #372]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007af2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007af4:	e000      	b.n	8007af8 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8007af6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007af8:	4b5a      	ldr	r3, [pc, #360]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f8      	beq.n	8007af6 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007b04:	4b58      	ldr	r3, [pc, #352]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a57      	ldr	r2, [pc, #348]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007b0a:	f023 030f 	bic.w	r3, r3, #15
 8007b0e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007b10:	4b55      	ldr	r3, [pc, #340]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a54      	ldr	r2, [pc, #336]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007b16:	f043 0301 	orr.w	r3, r3, #1
 8007b1a:	6013      	str	r3, [r2, #0]

			break;
 8007b1c:	e19a      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007b1e:	4b51      	ldr	r3, [pc, #324]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4a50      	ldr	r2, [pc, #320]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b28:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007b2a:	4b4e      	ldr	r3, [pc, #312]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4a4d      	ldr	r2, [pc, #308]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b30:	f043 0310 	orr.w	r3, r3, #16
 8007b34:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007b36:	4b4b      	ldr	r3, [pc, #300]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	4a4a      	ldr	r2, [pc, #296]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b44:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8007b46:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	4a46      	ldr	r2, [pc, #280]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b4c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8007b50:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007b52:	4b44      	ldr	r3, [pc, #272]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b5c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007b5e:	4b41      	ldr	r3, [pc, #260]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b60:	4a40      	ldr	r2, [pc, #256]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007b66:	4b3f      	ldr	r3, [pc, #252]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	4a3e      	ldr	r2, [pc, #248]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b70:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007b72:	4b3c      	ldr	r3, [pc, #240]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4a3b      	ldr	r2, [pc, #236]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b7c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007b7e:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	4a38      	ldr	r2, [pc, #224]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b88:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007b8a:	4b36      	ldr	r3, [pc, #216]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a35      	ldr	r2, [pc, #212]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b94:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007b96:	e000      	b.n	8007b9a <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8007b98:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007b9a:	4b32      	ldr	r3, [pc, #200]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f8      	beq.n	8007b98 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007ba6:	4b30      	ldr	r3, [pc, #192]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2f      	ldr	r2, [pc, #188]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007bac:	f023 030f 	bic.w	r3, r3, #15
 8007bb0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007bb2:	4b2d      	ldr	r3, [pc, #180]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a2c      	ldr	r2, [pc, #176]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6013      	str	r3, [r2, #0]

			break;
 8007bbe:	e149      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007bcc:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bd2:	f043 0310 	orr.w	r3, r3, #16
 8007bd6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bee:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8007bf2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007bfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007bfe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007c00:	4b18      	ldr	r3, [pc, #96]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c02:	4a18      	ldr	r2, [pc, #96]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007c08:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	4a15      	ldr	r2, [pc, #84]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c12:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a12      	ldr	r2, [pc, #72]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c1e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007c20:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a0f      	ldr	r2, [pc, #60]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c2a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c36:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007c38:	e000      	b.n	8007c3c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8007c3a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007c3c:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <RCC_enableMaxFrequencies+0x448>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f8      	beq.n	8007c3a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007c48:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a06      	ldr	r2, [pc, #24]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007c4e:	f023 030f 	bic.w	r3, r3, #15
 8007c52:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a03      	ldr	r2, [pc, #12]	; (8007c68 <RCC_enableMaxFrequencies+0x44c>)
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	6013      	str	r3, [r2, #0]

			break;
 8007c60:	e0f8      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
 8007c62:	bf00      	nop
 8007c64:	40023800 	.word	0x40023800
 8007c68:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007c6c:	4b84      	ldr	r3, [pc, #528]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	4a83      	ldr	r2, [pc, #524]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007c78:	4b81      	ldr	r3, [pc, #516]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4a80      	ldr	r2, [pc, #512]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c7e:	f043 0310 	orr.w	r3, r3, #16
 8007c82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007c84:	4b7e      	ldr	r3, [pc, #504]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4a7d      	ldr	r2, [pc, #500]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c92:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8007c94:	4b7a      	ldr	r3, [pc, #488]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4a79      	ldr	r2, [pc, #484]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007c9a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007ca0:	4b77      	ldr	r3, [pc, #476]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a76      	ldr	r2, [pc, #472]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007ca6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007caa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007cac:	4b74      	ldr	r3, [pc, #464]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cae:	4a74      	ldr	r2, [pc, #464]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007cb4:	4b72      	ldr	r3, [pc, #456]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a71      	ldr	r2, [pc, #452]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cbe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007cc0:	4b6f      	ldr	r3, [pc, #444]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	4a6e      	ldr	r2, [pc, #440]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cca:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007ccc:	4b6c      	ldr	r3, [pc, #432]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	4a6b      	ldr	r2, [pc, #428]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cd6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007cd8:	4b69      	ldr	r3, [pc, #420]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a68      	ldr	r2, [pc, #416]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007ce4:	e000      	b.n	8007ce8 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8007ce6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007ce8:	4b65      	ldr	r3, [pc, #404]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0f8      	beq.n	8007ce6 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007cf4:	4b63      	ldr	r3, [pc, #396]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a62      	ldr	r2, [pc, #392]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007cfa:	f023 030f 	bic.w	r3, r3, #15
 8007cfe:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007d00:	4b60      	ldr	r3, [pc, #384]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a5f      	ldr	r2, [pc, #380]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007d06:	f043 0302 	orr.w	r3, r3, #2
 8007d0a:	6013      	str	r3, [r2, #0]

			break;
 8007d0c:	e0a2      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007d0e:	4b5c      	ldr	r3, [pc, #368]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4a5b      	ldr	r2, [pc, #364]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d18:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007d1a:	4b59      	ldr	r3, [pc, #356]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	4a58      	ldr	r2, [pc, #352]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d20:	f043 0310 	orr.w	r3, r3, #16
 8007d24:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007d26:	4b56      	ldr	r3, [pc, #344]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4a55      	ldr	r2, [pc, #340]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d2c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8007d36:	4b52      	ldr	r3, [pc, #328]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	4a51      	ldr	r2, [pc, #324]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d3c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8007d40:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007d42:	4b4f      	ldr	r3, [pc, #316]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	4a4e      	ldr	r2, [pc, #312]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d4c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007d4e:	4b4c      	ldr	r3, [pc, #304]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d50:	4a4b      	ldr	r2, [pc, #300]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007d56:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	4a49      	ldr	r2, [pc, #292]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d60:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007d62:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	4a46      	ldr	r2, [pc, #280]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d6c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007d6e:	4b44      	ldr	r3, [pc, #272]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	4a43      	ldr	r2, [pc, #268]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d78:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007d7a:	4b41      	ldr	r3, [pc, #260]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a40      	ldr	r2, [pc, #256]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d84:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007d86:	e000      	b.n	8007d8a <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8007d88:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f8      	beq.n	8007d88 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007d96:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a3a      	ldr	r2, [pc, #232]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007d9c:	f023 030f 	bic.w	r3, r3, #15
 8007da0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007da2:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a37      	ldr	r2, [pc, #220]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	6013      	str	r3, [r2, #0]

			break;
 8007dae:	e051      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007db0:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4a32      	ldr	r2, [pc, #200]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8007dbc:	4b30      	ldr	r3, [pc, #192]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dc2:	f043 0308 	orr.w	r3, r3, #8
 8007dc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007dc8:	4b2d      	ldr	r3, [pc, #180]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a2c      	ldr	r2, [pc, #176]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8007dd8:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	4a28      	ldr	r2, [pc, #160]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dde:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8007de2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007de4:	4b26      	ldr	r3, [pc, #152]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007dee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007df0:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007df2:	4a23      	ldr	r2, [pc, #140]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007df8:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	4a20      	ldr	r2, [pc, #128]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e02:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007e04:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4a1d      	ldr	r2, [pc, #116]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e0e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007e10:	4b1b      	ldr	r3, [pc, #108]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e1a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007e1c:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e26:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007e28:	e000      	b.n	8007e2c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8007e2a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007e2c:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f8      	beq.n	8007e2a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007e38:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007e3e:	f023 030f 	bic.w	r3, r3, #15
 8007e42:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a0e      	ldr	r2, [pc, #56]	; (8007e84 <RCC_enableMaxFrequencies+0x668>)
 8007e4a:	f043 0303 	orr.w	r3, r3, #3
 8007e4e:	6013      	str	r3, [r2, #0]

			break;
 8007e50:	e000      	b.n	8007e54 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8007e52:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8007e54:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8007e60:	e000      	b.n	8007e64 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8007e62:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <RCC_enableMaxFrequencies+0x664>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f8      	beq.n	8007e62 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40023c00 	.word	0x40023c00

08007e88 <__NVIC_EnableIRQ>:
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db0b      	blt.n	8007eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	f003 021f 	and.w	r2, r3, #31
 8007ea0:	4907      	ldr	r1, [pc, #28]	; (8007ec0 <__NVIC_EnableIRQ+0x38>)
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8007eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	e000e100 	.word	0xe000e100

08007ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	db0a      	blt.n	8007eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	490c      	ldr	r1, [pc, #48]	; (8007f10 <__NVIC_SetPriority+0x4c>)
 8007ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee2:	0112      	lsls	r2, r2, #4
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007eec:	e00a      	b.n	8007f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	4908      	ldr	r1, [pc, #32]	; (8007f14 <__NVIC_SetPriority+0x50>)
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	3b04      	subs	r3, #4
 8007efc:	0112      	lsls	r2, r2, #4
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	440b      	add	r3, r1
 8007f02:	761a      	strb	r2, [r3, #24]
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	e000e100 	.word	0xe000e100
 8007f14:	e000ed00 	.word	0xe000ed00

08007f18 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f20:	b672      	cpsid	i
}
 8007f22:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a91      	ldr	r2, [pc, #580]	; (8008170 <USART_Config+0x258>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d106      	bne.n	8007f3c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8007f2e:	4b91      	ldr	r3, [pc, #580]	; (8008174 <USART_Config+0x25c>)
 8007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f32:	4a90      	ldr	r2, [pc, #576]	; (8008174 <USART_Config+0x25c>)
 8007f34:	f043 0310 	orr.w	r3, r3, #16
 8007f38:	6453      	str	r3, [r2, #68]	; 0x44
 8007f3a:	e018      	b.n	8007f6e <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a8d      	ldr	r2, [pc, #564]	; (8008178 <USART_Config+0x260>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d106      	bne.n	8007f54 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8007f46:	4b8b      	ldr	r3, [pc, #556]	; (8008174 <USART_Config+0x25c>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	4a8a      	ldr	r2, [pc, #552]	; (8008174 <USART_Config+0x25c>)
 8007f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f50:	6413      	str	r3, [r2, #64]	; 0x40
 8007f52:	e00c      	b.n	8007f6e <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a88      	ldr	r2, [pc, #544]	; (800817c <USART_Config+0x264>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d106      	bne.n	8007f6c <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8007f5e:	4b85      	ldr	r3, [pc, #532]	; (8008174 <USART_Config+0x25c>)
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	4a84      	ldr	r2, [pc, #528]	; (8008174 <USART_Config+0x25c>)
 8007f64:	f043 0320 	orr.w	r3, r3, #32
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	e000      	b.n	8007f6e <USART_Config+0x56>
	}
	else{
		__NOP();
 8007f6c:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7a5b      	ldrb	r3, [r3, #9]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d025      	beq.n	8007fd2 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7a5b      	ldrb	r3, [r3, #9]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d110      	bne.n	8007fb0 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f9c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	e018      	b.n	8007fe2 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbe:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fce:	60da      	str	r2, [r3, #12]
 8007fd0:	e007      	b.n	8007fe2 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe0:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7a1b      	ldrb	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d108      	bne.n	8007ffc <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ff8:	60da      	str	r2, [r3, #12]
 8007ffa:	e007      	b.n	800800c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800800a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7a9b      	ldrb	r3, [r3, #10]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d82f      	bhi.n	8008074 <USART_Config+0x15c>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <USART_Config+0x104>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	0800802d 	.word	0x0800802d
 8008020:	0800803f 	.word	0x0800803f
 8008024:	08008051 	.word	0x08008051
 8008028:	08008063 	.word	0x08008063
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800803a:	611a      	str	r2, [r3, #16]
			break;
 800803c:	e023      	b.n	8008086 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800804c:	611a      	str	r2, [r3, #16]
			break;
 800804e:	e01a      	b.n	8008086 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800805e:	611a      	str	r2, [r3, #16]
			break;
 8008060:	e011      	b.n	8008086 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691a      	ldr	r2, [r3, #16]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8008070:	611a      	str	r2, [r3, #16]
			break;
 8008072:	e008      	b.n	8008086 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008082:	611a      	str	r2, [r3, #16]
			break;
 8008084:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681c      	ldr	r4, [r3, #0]
 800808e:	4611      	mov	r1, r2
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8d9 	bl	8008248 <brrCalculus>
 8008096:	4603      	mov	r3, r0
 8008098:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	799b      	ldrb	r3, [r3, #6]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d82e      	bhi.n	8008100 <USART_Config+0x1e8>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <USART_Config+0x190>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080cb 	.word	0x080080cb
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080ef 	.word	0x080080ef
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0208 	orr.w	r2, r2, #8
 80080c6:	60da      	str	r2, [r3, #12]
			break;
 80080c8:	e023      	b.n	8008112 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0204 	orr.w	r2, r2, #4
 80080d8:	60da      	str	r2, [r3, #12]
			break;
 80080da:	e01a      	b.n	8008112 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 020c 	orr.w	r2, r2, #12
 80080ea:	60da      	str	r2, [r3, #12]
			break;
 80080ec:	e011      	b.n	8008112 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 020c 	bic.w	r2, r2, #12
 80080fc:	60da      	str	r2, [r3, #12]
			break;
 80080fe:	e008      	b.n	8008112 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 020c 	bic.w	r2, r2, #12
 800810e:	60da      	str	r2, [r3, #12]
			break;
 8008110:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	799b      	ldrb	r3, [r3, #6]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d008      	beq.n	800812c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008128:	60da      	str	r2, [r3, #12]
 800812a:	e007      	b.n	800813c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800813a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	795b      	ldrb	r3, [r3, #5]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d139      	bne.n	80081b8 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0220 	orr.w	r2, r2, #32
 8008152:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a05      	ldr	r2, [pc, #20]	; (8008170 <USART_Config+0x258>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d110      	bne.n	8008180 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800815e:	2025      	movs	r0, #37	; 0x25
 8008160:	f7ff fe92 	bl	8007e88 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8008164:	2101      	movs	r1, #1
 8008166:	2025      	movs	r0, #37	; 0x25
 8008168:	f7ff feac 	bl	8007ec4 <__NVIC_SetPriority>
 800816c:	e02c      	b.n	80081c8 <USART_Config+0x2b0>
 800816e:	bf00      	nop
 8008170:	40011000 	.word	0x40011000
 8008174:	40023800 	.word	0x40023800
 8008178:	40004400 	.word	0x40004400
 800817c:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2c      	ldr	r2, [pc, #176]	; (8008238 <USART_Config+0x320>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d107      	bne.n	800819a <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800818a:	2026      	movs	r0, #38	; 0x26
 800818c:	f7ff fe7c 	bl	8007e88 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8008190:	2101      	movs	r1, #1
 8008192:	2026      	movs	r0, #38	; 0x26
 8008194:	f7ff fe96 	bl	8007ec4 <__NVIC_SetPriority>
 8008198:	e016      	b.n	80081c8 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a27      	ldr	r2, [pc, #156]	; (800823c <USART_Config+0x324>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d107      	bne.n	80081b4 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80081a4:	2047      	movs	r0, #71	; 0x47
 80081a6:	f7ff fe6f 	bl	8007e88 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 80081aa:	2101      	movs	r1, #1
 80081ac:	2047      	movs	r0, #71	; 0x47
 80081ae:	f7ff fe89 	bl	8007ec4 <__NVIC_SetPriority>
 80081b2:	e009      	b.n	80081c8 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 80081b4:	bf00      	nop
 80081b6:	e007      	b.n	80081c8 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0220 	bic.w	r2, r2, #32
 80081c6:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	791b      	ldrb	r3, [r3, #4]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d124      	bne.n	800821a <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081de:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a16      	ldr	r2, [pc, #88]	; (8008240 <USART_Config+0x328>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d103      	bne.n	80081f2 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80081ea:	2025      	movs	r0, #37	; 0x25
 80081ec:	f7ff fe4c 	bl	8007e88 <__NVIC_EnableIRQ>
 80081f0:	e01b      	b.n	800822a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a10      	ldr	r2, [pc, #64]	; (8008238 <USART_Config+0x320>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d103      	bne.n	8008204 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80081fc:	2026      	movs	r0, #38	; 0x26
 80081fe:	f7ff fe43 	bl	8007e88 <__NVIC_EnableIRQ>
 8008202:	e012      	b.n	800822a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <USART_Config+0x324>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d103      	bne.n	8008216 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800820e:	2047      	movs	r0, #71	; 0x47
 8008210:	f7ff fe3a 	bl	8007e88 <__NVIC_EnableIRQ>
 8008214:	e009      	b.n	800822a <USART_Config+0x312>
		}
		else{
				__NOP();
 8008216:	bf00      	nop
 8008218:	e007      	b.n	800822a <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008228:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800822a:	b662      	cpsie	i
}
 800822c:	bf00      	nop
	}

	__enable_irq();
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bd90      	pop	{r4, r7, pc}
 8008236:	bf00      	nop
 8008238:	40004400 	.word	0x40004400
 800823c:	40011400 	.word	0x40011400
 8008240:	40011000 	.word	0x40011000
 8008244:	00000000 	.word	0x00000000

08008248 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8008248:	b5b0      	push	{r4, r5, r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	79db      	ldrb	r3, [r3, #7]
 8008256:	2b03      	cmp	r3, #3
 8008258:	f200 8217 	bhi.w	800868a <brrCalculus+0x442>
 800825c:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <brrCalculus+0x1c>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008275 	.word	0x08008275
 8008268:	0800836f 	.word	0x0800836f
 800826c:	08008489 	.word	0x08008489
 8008270:	08008591 	.word	0x08008591

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8008274:	4980      	ldr	r1, [pc, #512]	; (8008478 <brrCalculus+0x230>)
 8008276:	a37c      	add	r3, pc, #496	; (adr r3, 8008468 <brrCalculus+0x220>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	ee17 0a90 	vmov	r0, s15
 800828e:	f7f8 f973 	bl	8000578 <__aeabi_f2d>
 8008292:	4b79      	ldr	r3, [pc, #484]	; (8008478 <brrCalculus+0x230>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f8 f9c6 	bl	8000628 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4975      	ldr	r1, [pc, #468]	; (8008478 <brrCalculus+0x230>)
 80082a2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80082a6:	4b74      	ldr	r3, [pc, #464]	; (8008478 <brrCalculus+0x230>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	4610      	mov	r0, r2
 80082ae:	4619      	mov	r1, r3
 80082b0:	f7f8 fc6a 	bl	8000b88 <__aeabi_d2iz>
 80082b4:	4603      	mov	r3, r0
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	4b70      	ldr	r3, [pc, #448]	; (800847c <brrCalculus+0x234>)
 80082ba:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80082bc:	4b6e      	ldr	r3, [pc, #440]	; (8008478 <brrCalculus+0x230>)
 80082be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80082c2:	4b6d      	ldr	r3, [pc, #436]	; (8008478 <brrCalculus+0x230>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	4610      	mov	r0, r2
 80082ca:	4619      	mov	r1, r3
 80082cc:	f7f8 fc5c 	bl	8000b88 <__aeabi_d2iz>
 80082d0:	4603      	mov	r3, r0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f8 f93e 	bl	8000554 <__aeabi_i2d>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f7 ffea 	bl	80002b8 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	f7f8 fc94 	bl	8000c18 <__aeabi_d2f>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4a63      	ldr	r2, [pc, #396]	; (8008480 <brrCalculus+0x238>)
 80082f4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80082f6:	4b62      	ldr	r3, [pc, #392]	; (8008480 <brrCalculus+0x238>)
 80082f8:	edd3 7a00 	vldr	s15, [r3]
 80082fc:	2004      	movs	r0, #4
 80082fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008302:	f000 fa6d 	bl	80087e0 <roundToNDecimals>
 8008306:	eef0 7a40 	vmov.f32	s15, s0
 800830a:	4b5d      	ldr	r3, [pc, #372]	; (8008480 <brrCalculus+0x238>)
 800830c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008310:	4b5b      	ldr	r3, [pc, #364]	; (8008480 <brrCalculus+0x238>)
 8008312:	edd3 7a00 	vldr	s15, [r3]
 8008316:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800831a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800831e:	4b58      	ldr	r3, [pc, #352]	; (8008480 <brrCalculus+0x238>)
 8008320:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8008324:	4b56      	ldr	r3, [pc, #344]	; (8008480 <brrCalculus+0x238>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 f925 	bl	8000578 <__aeabi_f2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	ec43 2b10 	vmov	d0, r2, r3
 8008336:	f003 ffa3 	bl	800c280 <round>
 800833a:	ec53 2b10 	vmov	r2, r3, d0
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	f7f8 fc69 	bl	8000c18 <__aeabi_d2f>
 8008346:	4603      	mov	r3, r0
 8008348:	4a4d      	ldr	r2, [pc, #308]	; (8008480 <brrCalculus+0x238>)
 800834a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800834c:	4b4b      	ldr	r3, [pc, #300]	; (800847c <brrCalculus+0x234>)
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	b29a      	uxth	r2, r3
 8008354:	4b4a      	ldr	r3, [pc, #296]	; (8008480 <brrCalculus+0x238>)
 8008356:	edd3 7a00 	vldr	s15, [r3]
 800835a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800835e:	ee17 3a90 	vmov	r3, s15
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	4b46      	ldr	r3, [pc, #280]	; (8008484 <brrCalculus+0x23c>)
 800836a:	801a      	strh	r2, [r3, #0]


		break;
 800836c:	e18f      	b.n	800868e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800836e:	4942      	ldr	r1, [pc, #264]	; (8008478 <brrCalculus+0x230>)
 8008370:	a33f      	add	r3, pc, #252	; (adr r3, 8008470 <brrCalculus+0x228>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008384:	ee17 0a90 	vmov	r0, s15
 8008388:	f7f8 f8f6 	bl	8000578 <__aeabi_f2d>
 800838c:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <brrCalculus+0x230>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f8 f949 	bl	8000628 <__aeabi_dmul>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4937      	ldr	r1, [pc, #220]	; (8008478 <brrCalculus+0x230>)
 800839c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80083a0:	4b35      	ldr	r3, [pc, #212]	; (8008478 <brrCalculus+0x230>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	4610      	mov	r0, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	f7f8 fbed 	bl	8000b88 <__aeabi_d2iz>
 80083ae:	4603      	mov	r3, r0
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	4b32      	ldr	r3, [pc, #200]	; (800847c <brrCalculus+0x234>)
 80083b4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80083b6:	4b30      	ldr	r3, [pc, #192]	; (8008478 <brrCalculus+0x230>)
 80083b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80083bc:	4b2e      	ldr	r3, [pc, #184]	; (8008478 <brrCalculus+0x230>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7f8 fbdf 	bl	8000b88 <__aeabi_d2iz>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7f8 f8c1 	bl	8000554 <__aeabi_i2d>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f7 ff6d 	bl	80002b8 <__aeabi_dsub>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4610      	mov	r0, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7f8 fc17 	bl	8000c18 <__aeabi_d2f>
 80083ea:	4603      	mov	r3, r0
 80083ec:	4a24      	ldr	r2, [pc, #144]	; (8008480 <brrCalculus+0x238>)
 80083ee:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80083f0:	4b23      	ldr	r3, [pc, #140]	; (8008480 <brrCalculus+0x238>)
 80083f2:	edd3 7a00 	vldr	s15, [r3]
 80083f6:	2004      	movs	r0, #4
 80083f8:	eeb0 0a67 	vmov.f32	s0, s15
 80083fc:	f000 f9f0 	bl	80087e0 <roundToNDecimals>
 8008400:	eef0 7a40 	vmov.f32	s15, s0
 8008404:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <brrCalculus+0x238>)
 8008406:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800840a:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <brrCalculus+0x238>)
 800840c:	edd3 7a00 	vldr	s15, [r3]
 8008410:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <brrCalculus+0x238>)
 800841a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800841e:	4b18      	ldr	r3, [pc, #96]	; (8008480 <brrCalculus+0x238>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 f8a8 	bl	8000578 <__aeabi_f2d>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	ec43 2b10 	vmov	d0, r2, r3
 8008430:	f003 ff26 	bl	800c280 <round>
 8008434:	ec53 2b10 	vmov	r2, r3, d0
 8008438:	4610      	mov	r0, r2
 800843a:	4619      	mov	r1, r3
 800843c:	f7f8 fbec 	bl	8000c18 <__aeabi_d2f>
 8008440:	4603      	mov	r3, r0
 8008442:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <brrCalculus+0x238>)
 8008444:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <brrCalculus+0x234>)
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	b29a      	uxth	r2, r3
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <brrCalculus+0x238>)
 8008450:	edd3 7a00 	vldr	s15, [r3]
 8008454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008458:	ee17 3a90 	vmov	r3, s15
 800845c:	b29b      	uxth	r3, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <brrCalculus+0x23c>)
 8008464:	801a      	strh	r2, [r3, #0]


		break;
 8008466:	e112      	b.n	800868e <brrCalculus+0x446>
 8008468:	b4e81b4f 	.word	0xb4e81b4f
 800846c:	3edb4e81 	.word	0x3edb4e81
 8008470:	b4e81b4f 	.word	0xb4e81b4f
 8008474:	3ecb4e81 	.word	0x3ecb4e81
 8008478:	20011d30 	.word	0x20011d30
 800847c:	20011d24 	.word	0x20011d24
 8008480:	20011d28 	.word	0x20011d28
 8008484:	20011d22 	.word	0x20011d22
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8008488:	4989      	ldr	r1, [pc, #548]	; (80086b0 <brrCalculus+0x468>)
 800848a:	a385      	add	r3, pc, #532	; (adr r3, 80086a0 <brrCalculus+0x458>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	ee17 0a90 	vmov	r0, s15
 80084a2:	f7f8 f869 	bl	8000578 <__aeabi_f2d>
 80084a6:	4b82      	ldr	r3, [pc, #520]	; (80086b0 <brrCalculus+0x468>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f8 f8bc 	bl	8000628 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	497e      	ldr	r1, [pc, #504]	; (80086b0 <brrCalculus+0x468>)
 80084b6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80084ba:	4b7d      	ldr	r3, [pc, #500]	; (80086b0 <brrCalculus+0x468>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	f7f8 fb60 	bl	8000b88 <__aeabi_d2iz>
 80084c8:	4603      	mov	r3, r0
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	4b79      	ldr	r3, [pc, #484]	; (80086b4 <brrCalculus+0x46c>)
 80084ce:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80084d0:	4b77      	ldr	r3, [pc, #476]	; (80086b0 <brrCalculus+0x468>)
 80084d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80084d6:	4b76      	ldr	r3, [pc, #472]	; (80086b0 <brrCalculus+0x468>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	4610      	mov	r0, r2
 80084de:	4619      	mov	r1, r3
 80084e0:	f7f8 fb52 	bl	8000b88 <__aeabi_d2iz>
 80084e4:	4603      	mov	r3, r0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 f834 	bl	8000554 <__aeabi_i2d>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f7 fee0 	bl	80002b8 <__aeabi_dsub>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4610      	mov	r0, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	f7f8 fb8a 	bl	8000c18 <__aeabi_d2f>
 8008504:	4603      	mov	r3, r0
 8008506:	4a6c      	ldr	r2, [pc, #432]	; (80086b8 <brrCalculus+0x470>)
 8008508:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800850a:	4b6b      	ldr	r3, [pc, #428]	; (80086b8 <brrCalculus+0x470>)
 800850c:	edd3 7a00 	vldr	s15, [r3]
 8008510:	2004      	movs	r0, #4
 8008512:	eeb0 0a67 	vmov.f32	s0, s15
 8008516:	f000 f963 	bl	80087e0 <roundToNDecimals>
 800851a:	eef0 7a40 	vmov.f32	s15, s0
 800851e:	4b66      	ldr	r3, [pc, #408]	; (80086b8 <brrCalculus+0x470>)
 8008520:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008524:	4b64      	ldr	r3, [pc, #400]	; (80086b8 <brrCalculus+0x470>)
 8008526:	edd3 7a00 	vldr	s15, [r3]
 800852a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800852e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008532:	4b61      	ldr	r3, [pc, #388]	; (80086b8 <brrCalculus+0x470>)
 8008534:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8008538:	4b5f      	ldr	r3, [pc, #380]	; (80086b8 <brrCalculus+0x470>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f7f8 f81b 	bl	8000578 <__aeabi_f2d>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	ec43 2b10 	vmov	d0, r2, r3
 800854a:	f003 fe99 	bl	800c280 <round>
 800854e:	ec51 0b10 	vmov	r0, r1, d0
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <brrCalculus+0x474>)
 8008558:	f7f7 feb0 	bl	80002bc <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	f7f8 fb58 	bl	8000c18 <__aeabi_d2f>
 8008568:	4603      	mov	r3, r0
 800856a:	4a53      	ldr	r2, [pc, #332]	; (80086b8 <brrCalculus+0x470>)
 800856c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800856e:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <brrCalculus+0x46c>)
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	b29a      	uxth	r2, r3
 8008576:	4b50      	ldr	r3, [pc, #320]	; (80086b8 <brrCalculus+0x470>)
 8008578:	edd3 7a00 	vldr	s15, [r3]
 800857c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008580:	ee17 3a90 	vmov	r3, s15
 8008584:	b29b      	uxth	r3, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <brrCalculus+0x478>)
 800858c:	801a      	strh	r2, [r3, #0]


		break;
 800858e:	e07e      	b.n	800868e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8008590:	4947      	ldr	r1, [pc, #284]	; (80086b0 <brrCalculus+0x468>)
 8008592:	a345      	add	r3, pc, #276	; (adr r3, 80086a8 <brrCalculus+0x460>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	ee17 0a90 	vmov	r0, s15
 80085aa:	f7f7 ffe5 	bl	8000578 <__aeabi_f2d>
 80085ae:	4b40      	ldr	r3, [pc, #256]	; (80086b0 <brrCalculus+0x468>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f8 f838 	bl	8000628 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	493c      	ldr	r1, [pc, #240]	; (80086b0 <brrCalculus+0x468>)
 80085be:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80085c2:	4b3b      	ldr	r3, [pc, #236]	; (80086b0 <brrCalculus+0x468>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	4610      	mov	r0, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	f7f8 fadc 	bl	8000b88 <__aeabi_d2iz>
 80085d0:	4603      	mov	r3, r0
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	4b37      	ldr	r3, [pc, #220]	; (80086b4 <brrCalculus+0x46c>)
 80085d6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80085d8:	4b35      	ldr	r3, [pc, #212]	; (80086b0 <brrCalculus+0x468>)
 80085da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80085de:	4b34      	ldr	r3, [pc, #208]	; (80086b0 <brrCalculus+0x468>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	4610      	mov	r0, r2
 80085e6:	4619      	mov	r1, r3
 80085e8:	f7f8 face 	bl	8000b88 <__aeabi_d2iz>
 80085ec:	4603      	mov	r3, r0
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f7 ffb0 	bl	8000554 <__aeabi_i2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 fe5c 	bl	80002b8 <__aeabi_dsub>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	f7f8 fb06 	bl	8000c18 <__aeabi_d2f>
 800860c:	4603      	mov	r3, r0
 800860e:	4a2a      	ldr	r2, [pc, #168]	; (80086b8 <brrCalculus+0x470>)
 8008610:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008612:	4b29      	ldr	r3, [pc, #164]	; (80086b8 <brrCalculus+0x470>)
 8008614:	edd3 7a00 	vldr	s15, [r3]
 8008618:	2004      	movs	r0, #4
 800861a:	eeb0 0a67 	vmov.f32	s0, s15
 800861e:	f000 f8df 	bl	80087e0 <roundToNDecimals>
 8008622:	eef0 7a40 	vmov.f32	s15, s0
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <brrCalculus+0x470>)
 8008628:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <brrCalculus+0x470>)
 800862e:	edd3 7a00 	vldr	s15, [r3]
 8008632:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800863a:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <brrCalculus+0x470>)
 800863c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8008640:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <brrCalculus+0x470>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f7f7 ff97 	bl	8000578 <__aeabi_f2d>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	ec43 2b10 	vmov	d0, r2, r3
 8008652:	f003 fe15 	bl	800c280 <round>
 8008656:	ec53 2b10 	vmov	r2, r3, d0
 800865a:	4610      	mov	r0, r2
 800865c:	4619      	mov	r1, r3
 800865e:	f7f8 fadb 	bl	8000c18 <__aeabi_d2f>
 8008662:	4603      	mov	r3, r0
 8008664:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <brrCalculus+0x470>)
 8008666:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <brrCalculus+0x46c>)
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	b29a      	uxth	r2, r3
 8008670:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <brrCalculus+0x470>)
 8008672:	edd3 7a00 	vldr	s15, [r3]
 8008676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867a:	ee17 3a90 	vmov	r3, s15
 800867e:	b29b      	uxth	r3, r3
 8008680:	4313      	orrs	r3, r2
 8008682:	b29a      	uxth	r2, r3
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <brrCalculus+0x478>)
 8008686:	801a      	strh	r2, [r3, #0]


		break;
 8008688:	e001      	b.n	800868e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800868a:	bf00      	nop
		break;
 800868c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800868e:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <brrCalculus+0x478>)
 8008690:	881b      	ldrh	r3, [r3, #0]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bdb0      	pop	{r4, r5, r7, pc}
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	789abcdf 	.word	0x789abcdf
 80086a4:	3ec23456 	.word	0x3ec23456
 80086a8:	789abcdf 	.word	0x789abcdf
 80086ac:	3ea23456 	.word	0x3ea23456
 80086b0:	20011d30 	.word	0x20011d30
 80086b4:	20011d24 	.word	0x20011d24
 80086b8:	20011d28 	.word	0x20011d28
 80086bc:	3ff00000 	.word	0x3ff00000
 80086c0:	20011d22 	.word	0x20011d22

080086c4 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80086ce:	e000      	b.n	80086d2 <writeChar+0xe>
		__NOP();
 80086d0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f7      	beq.n	80086d0 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	605a      	str	r2, [r3, #4]

}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80086fe:	e008      	b.n	8008712 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff ffdc 	bl	80086c4 <writeChar>
		msgToSend ++ ;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f2      	bne.n	8008700 <writeMsg+0xc>
	}
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
	__NOP();
 8008728:	bf00      	nop
}
 800872a:	bf00      	nop
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
	__NOP();
 8008738:	bf00      	nop
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
	return auxRxData;
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <getRxData+0x14>)
 800874a:	781b      	ldrb	r3, [r3, #0]
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20011d38 	.word	0x20011d38

0800875c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <USART2_IRQHandler+0x24>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d006      	beq.n	800877a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800876c:	4b04      	ldr	r3, [pc, #16]	; (8008780 <USART2_IRQHandler+0x24>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	4b04      	ldr	r3, [pc, #16]	; (8008784 <USART2_IRQHandler+0x28>)
 8008774:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8008776:	f7ff ffd5 	bl	8008724 <usart2Rx_Callback>
	}

}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	40004400 	.word	0x40004400
 8008784:	20011d38 	.word	0x20011d38

08008788 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <USART1_IRQHandler+0x24>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <USART1_IRQHandler+0x24>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	b2da      	uxtb	r2, r3
 800879e:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <USART1_IRQHandler+0x28>)
 80087a0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80087a2:	f7f9 f875 	bl	8001890 <usart1Rx_Callback>
	}
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40011000 	.word	0x40011000
 80087b0:	20011d38 	.word	0x20011d38

080087b4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <USART6_IRQHandler+0x24>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d006      	beq.n	80087d2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 80087c4:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <USART6_IRQHandler+0x24>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <USART6_IRQHandler+0x28>)
 80087cc:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80087ce:	f7ff ffb1 	bl	8008734 <usart6Rx_Callback>
	}

}
 80087d2:	bf00      	nop
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40011400 	.word	0x40011400
 80087dc:	20011d38 	.word	0x20011d38

080087e0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80087ea:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 80087ec:	6838      	ldr	r0, [r7, #0]
 80087ee:	f7f7 feb1 	bl	8000554 <__aeabi_i2d>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	ec43 2b11 	vmov	d1, r2, r3
 80087fa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8008878 <roundToNDecimals+0x98>
 80087fe:	f003 fde1 	bl	800c3c4 <pow>
 8008802:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f7 feb6 	bl	8000578 <__aeabi_f2d>
 800880c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008810:	f7f7 ff0a 	bl	8000628 <__aeabi_dmul>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4610      	mov	r0, r2
 800881a:	4619      	mov	r1, r3
 800881c:	f7f8 f9fc 	bl	8000c18 <__aeabi_d2f>
 8008820:	4603      	mov	r3, r0
 8008822:	607b      	str	r3, [r7, #4]

    number = round(number);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7f7 fea7 	bl	8000578 <__aeabi_f2d>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	ec43 2b10 	vmov	d0, r2, r3
 8008832:	f003 fd25 	bl	800c280 <round>
 8008836:	ec53 2b10 	vmov	r2, r3, d0
 800883a:	4610      	mov	r0, r2
 800883c:	4619      	mov	r1, r3
 800883e:	f7f8 f9eb 	bl	8000c18 <__aeabi_d2f>
 8008842:	4603      	mov	r3, r0
 8008844:	607b      	str	r3, [r7, #4]

    number /= factor;
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f7 fe96 	bl	8000578 <__aeabi_f2d>
 800884c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008850:	f7f8 f814 	bl	800087c <__aeabi_ddiv>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4610      	mov	r0, r2
 800885a:	4619      	mov	r1, r3
 800885c:	f7f8 f9dc 	bl	8000c18 <__aeabi_d2f>
 8008860:	4603      	mov	r3, r0
 8008862:	607b      	str	r3, [r7, #4]

    return number;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	ee07 3a90 	vmov	s15, r3
}
 800886a:	eeb0 0a67 	vmov.f32	s0, s15
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	f3af 8000 	nop.w
 8008878:	00000000 	.word	0x00000000
 800887c:	40240000 	.word	0x40240000

08008880 <i2c_stopTransaction>:

}


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008896:	601a      	str	r2, [r3, #0]
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7a1b      	ldrb	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088c2:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80088c4:	e000      	b.n	80088c8 <i2c_startTransaction+0x24>
		__NOP();
 80088c6:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f7      	bne.n	80088c6 <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088e4:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80088e6:	e000      	b.n	80088ea <i2c_startTransaction+0x46>
		__NOP();
 80088e8:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f7      	beq.n	80088e8 <i2c_startTransaction+0x44>
	}
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7a1b      	ldrb	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008924:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008934:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008936:	e000      	b.n	800893a <i2c_reStartTransaction+0x34>
		__NOP();
 8008938:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f7      	beq.n	8008938 <i2c_reStartTransaction+0x32>
	}
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896c:	601a      	str	r2, [r3, #0]
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
 8008986:	4613      	mov	r3, r2
 8008988:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	005a      	lsls	r2, r3, #1
 8008992:	78bb      	ldrb	r3, [r7, #2]
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800899c:	e000      	b.n	80089a0 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800899e:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f7      	beq.n	800899e <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	73fb      	strb	r3, [r7, #15]

}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80089de:	e000      	b.n	80089e2 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80089e0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f7      	beq.n	80089e0 <i2c_sendMemoryAddress+0x16>
	}
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <i2c_readDataByte>:
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
		__NOP();
	}
}

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8008a06:	e000      	b.n	8008a0a <i2c_readDataByte+0xc>
		__NOP();
 8008a08:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f7      	beq.n	8008a08 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	799b      	ldrb	r3, [r3, #6]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	; (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20000014 	.word	0x20000014

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4d0d      	ldr	r5, [pc, #52]	; (8008a78 <__libc_init_array+0x38>)
 8008a44:	4c0d      	ldr	r4, [pc, #52]	; (8008a7c <__libc_init_array+0x3c>)
 8008a46:	1b64      	subs	r4, r4, r5
 8008a48:	10a4      	asrs	r4, r4, #2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	4d0b      	ldr	r5, [pc, #44]	; (8008a80 <__libc_init_array+0x40>)
 8008a52:	4c0c      	ldr	r4, [pc, #48]	; (8008a84 <__libc_init_array+0x44>)
 8008a54:	f005 fde0 	bl	800e618 <_init>
 8008a58:	1b64      	subs	r4, r4, r5
 8008a5a:	10a4      	asrs	r4, r4, #2
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	0800f0a0 	.word	0x0800f0a0
 8008a7c:	0800f0a0 	.word	0x0800f0a0
 8008a80:	0800f0a0 	.word	0x0800f0a0
 8008a84:	0800f0a4 	.word	0x0800f0a4

08008a88 <malloc>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <malloc+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f000 b877 	b.w	8008b80 <_malloc_r>
 8008a92:	bf00      	nop
 8008a94:	20000014 	.word	0x20000014

08008a98 <memset>:
 8008a98:	4402      	add	r2, r0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <_free_r>:
 8008aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d044      	beq.n	8008b38 <_free_r+0x90>
 8008aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8008aba:	bfb8      	it	lt
 8008abc:	18e4      	addlt	r4, r4, r3
 8008abe:	f001 fca1 	bl	800a404 <__malloc_lock>
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <_free_r+0x94>)
 8008ac4:	9801      	ldr	r0, [sp, #4]
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	b933      	cbnz	r3, 8008ad8 <_free_r+0x30>
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	b003      	add	sp, #12
 8008ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad4:	f001 bc9c 	b.w	800a410 <__malloc_unlock>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d908      	bls.n	8008aee <_free_r+0x46>
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	1961      	adds	r1, r4, r5
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf01      	itttt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	1949      	addeq	r1, r1, r5
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	e7ed      	b.n	8008aca <_free_r+0x22>
 8008aee:	461a      	mov	r2, r3
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b10b      	cbz	r3, 8008af8 <_free_r+0x50>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d9fa      	bls.n	8008aee <_free_r+0x46>
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	1855      	adds	r5, r2, r1
 8008afc:	42a5      	cmp	r5, r4
 8008afe:	d10b      	bne.n	8008b18 <_free_r+0x70>
 8008b00:	6824      	ldr	r4, [r4, #0]
 8008b02:	4421      	add	r1, r4
 8008b04:	1854      	adds	r4, r2, r1
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	d1e0      	bne.n	8008ace <_free_r+0x26>
 8008b0c:	681c      	ldr	r4, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6053      	str	r3, [r2, #4]
 8008b12:	4421      	add	r1, r4
 8008b14:	6011      	str	r1, [r2, #0]
 8008b16:	e7da      	b.n	8008ace <_free_r+0x26>
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x78>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	e7d6      	b.n	8008ace <_free_r+0x26>
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf04      	itt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	bf04      	itt	eq
 8008b30:	1949      	addeq	r1, r1, r5
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6054      	str	r4, [r2, #4]
 8008b36:	e7ca      	b.n	8008ace <_free_r+0x26>
 8008b38:	b003      	add	sp, #12
 8008b3a:	bd30      	pop	{r4, r5, pc}
 8008b3c:	20011d3c 	.word	0x20011d3c

08008b40 <sbrk_aligned>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4e0e      	ldr	r6, [pc, #56]	; (8008b7c <sbrk_aligned+0x3c>)
 8008b44:	460c      	mov	r4, r1
 8008b46:	6831      	ldr	r1, [r6, #0]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	b911      	cbnz	r1, 8008b52 <sbrk_aligned+0x12>
 8008b4c:	f000 fcf6 	bl	800953c <_sbrk_r>
 8008b50:	6030      	str	r0, [r6, #0]
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 fcf1 	bl	800953c <_sbrk_r>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d00a      	beq.n	8008b74 <sbrk_aligned+0x34>
 8008b5e:	1cc4      	adds	r4, r0, #3
 8008b60:	f024 0403 	bic.w	r4, r4, #3
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d007      	beq.n	8008b78 <sbrk_aligned+0x38>
 8008b68:	1a21      	subs	r1, r4, r0
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 fce6 	bl	800953c <_sbrk_r>
 8008b70:	3001      	adds	r0, #1
 8008b72:	d101      	bne.n	8008b78 <sbrk_aligned+0x38>
 8008b74:	f04f 34ff 	mov.w	r4, #4294967295
 8008b78:	4620      	mov	r0, r4
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	20011d40 	.word	0x20011d40

08008b80 <_malloc_r>:
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	1ccd      	adds	r5, r1, #3
 8008b86:	f025 0503 	bic.w	r5, r5, #3
 8008b8a:	3508      	adds	r5, #8
 8008b8c:	2d0c      	cmp	r5, #12
 8008b8e:	bf38      	it	cc
 8008b90:	250c      	movcc	r5, #12
 8008b92:	2d00      	cmp	r5, #0
 8008b94:	4607      	mov	r7, r0
 8008b96:	db01      	blt.n	8008b9c <_malloc_r+0x1c>
 8008b98:	42a9      	cmp	r1, r5
 8008b9a:	d905      	bls.n	8008ba8 <_malloc_r+0x28>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	2600      	movs	r6, #0
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	4e2e      	ldr	r6, [pc, #184]	; (8008c64 <_malloc_r+0xe4>)
 8008baa:	f001 fc2b 	bl	800a404 <__malloc_lock>
 8008bae:	6833      	ldr	r3, [r6, #0]
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	bb34      	cbnz	r4, 8008c02 <_malloc_r+0x82>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f7ff ffc2 	bl	8008b40 <sbrk_aligned>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	d14d      	bne.n	8008c5e <_malloc_r+0xde>
 8008bc2:	6834      	ldr	r4, [r6, #0]
 8008bc4:	4626      	mov	r6, r4
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	d140      	bne.n	8008c4c <_malloc_r+0xcc>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4638      	mov	r0, r7
 8008bd0:	eb04 0803 	add.w	r8, r4, r3
 8008bd4:	f000 fcb2 	bl	800953c <_sbrk_r>
 8008bd8:	4580      	cmp	r8, r0
 8008bda:	d13a      	bne.n	8008c52 <_malloc_r+0xd2>
 8008bdc:	6821      	ldr	r1, [r4, #0]
 8008bde:	3503      	adds	r5, #3
 8008be0:	1a6d      	subs	r5, r5, r1
 8008be2:	f025 0503 	bic.w	r5, r5, #3
 8008be6:	3508      	adds	r5, #8
 8008be8:	2d0c      	cmp	r5, #12
 8008bea:	bf38      	it	cc
 8008bec:	250c      	movcc	r5, #12
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff ffa5 	bl	8008b40 <sbrk_aligned>
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d02b      	beq.n	8008c52 <_malloc_r+0xd2>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	442b      	add	r3, r5
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	e00e      	b.n	8008c20 <_malloc_r+0xa0>
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	1b52      	subs	r2, r2, r5
 8008c06:	d41e      	bmi.n	8008c46 <_malloc_r+0xc6>
 8008c08:	2a0b      	cmp	r2, #11
 8008c0a:	d916      	bls.n	8008c3a <_malloc_r+0xba>
 8008c0c:	1961      	adds	r1, r4, r5
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	6025      	str	r5, [r4, #0]
 8008c12:	bf18      	it	ne
 8008c14:	6059      	strne	r1, [r3, #4]
 8008c16:	6863      	ldr	r3, [r4, #4]
 8008c18:	bf08      	it	eq
 8008c1a:	6031      	streq	r1, [r6, #0]
 8008c1c:	5162      	str	r2, [r4, r5]
 8008c1e:	604b      	str	r3, [r1, #4]
 8008c20:	4638      	mov	r0, r7
 8008c22:	f104 060b 	add.w	r6, r4, #11
 8008c26:	f001 fbf3 	bl	800a410 <__malloc_unlock>
 8008c2a:	f026 0607 	bic.w	r6, r6, #7
 8008c2e:	1d23      	adds	r3, r4, #4
 8008c30:	1af2      	subs	r2, r6, r3
 8008c32:	d0b6      	beq.n	8008ba2 <_malloc_r+0x22>
 8008c34:	1b9b      	subs	r3, r3, r6
 8008c36:	50a3      	str	r3, [r4, r2]
 8008c38:	e7b3      	b.n	8008ba2 <_malloc_r+0x22>
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	bf0c      	ite	eq
 8008c40:	6032      	streq	r2, [r6, #0]
 8008c42:	605a      	strne	r2, [r3, #4]
 8008c44:	e7ec      	b.n	8008c20 <_malloc_r+0xa0>
 8008c46:	4623      	mov	r3, r4
 8008c48:	6864      	ldr	r4, [r4, #4]
 8008c4a:	e7b2      	b.n	8008bb2 <_malloc_r+0x32>
 8008c4c:	4634      	mov	r4, r6
 8008c4e:	6876      	ldr	r6, [r6, #4]
 8008c50:	e7b9      	b.n	8008bc6 <_malloc_r+0x46>
 8008c52:	230c      	movs	r3, #12
 8008c54:	603b      	str	r3, [r7, #0]
 8008c56:	4638      	mov	r0, r7
 8008c58:	f001 fbda 	bl	800a410 <__malloc_unlock>
 8008c5c:	e7a1      	b.n	8008ba2 <_malloc_r+0x22>
 8008c5e:	6025      	str	r5, [r4, #0]
 8008c60:	e7de      	b.n	8008c20 <_malloc_r+0xa0>
 8008c62:	bf00      	nop
 8008c64:	20011d3c 	.word	0x20011d3c

08008c68 <__cvt>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	ec55 4b10 	vmov	r4, r5, d0
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	460e      	mov	r6, r1
 8008c74:	4619      	mov	r1, r3
 8008c76:	462b      	mov	r3, r5
 8008c78:	bfbb      	ittet	lt
 8008c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c7e:	461d      	movlt	r5, r3
 8008c80:	2300      	movge	r3, #0
 8008c82:	232d      	movlt	r3, #45	; 0x2d
 8008c84:	700b      	strb	r3, [r1, #0]
 8008c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	f023 0820 	bic.w	r8, r3, #32
 8008c92:	bfbc      	itt	lt
 8008c94:	4622      	movlt	r2, r4
 8008c96:	4614      	movlt	r4, r2
 8008c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c9c:	d005      	beq.n	8008caa <__cvt+0x42>
 8008c9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ca2:	d100      	bne.n	8008ca6 <__cvt+0x3e>
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	e000      	b.n	8008cac <__cvt+0x44>
 8008caa:	2103      	movs	r1, #3
 8008cac:	ab03      	add	r3, sp, #12
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	ab02      	add	r3, sp, #8
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	ec45 4b10 	vmov	d0, r4, r5
 8008cb8:	4653      	mov	r3, sl
 8008cba:	4632      	mov	r2, r6
 8008cbc:	f000 fd90 	bl	80097e0 <_dtoa_r>
 8008cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	d102      	bne.n	8008cce <__cvt+0x66>
 8008cc8:	f019 0f01 	tst.w	r9, #1
 8008ccc:	d022      	beq.n	8008d14 <__cvt+0xac>
 8008cce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cd2:	eb07 0906 	add.w	r9, r7, r6
 8008cd6:	d110      	bne.n	8008cfa <__cvt+0x92>
 8008cd8:	783b      	ldrb	r3, [r7, #0]
 8008cda:	2b30      	cmp	r3, #48	; 0x30
 8008cdc:	d10a      	bne.n	8008cf4 <__cvt+0x8c>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 ff07 	bl	8000af8 <__aeabi_dcmpeq>
 8008cea:	b918      	cbnz	r0, 8008cf4 <__cvt+0x8c>
 8008cec:	f1c6 0601 	rsb	r6, r6, #1
 8008cf0:	f8ca 6000 	str.w	r6, [sl]
 8008cf4:	f8da 3000 	ldr.w	r3, [sl]
 8008cf8:	4499      	add	r9, r3
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fef9 	bl	8000af8 <__aeabi_dcmpeq>
 8008d06:	b108      	cbz	r0, 8008d0c <__cvt+0xa4>
 8008d08:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d0c:	2230      	movs	r2, #48	; 0x30
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	454b      	cmp	r3, r9
 8008d12:	d307      	bcc.n	8008d24 <__cvt+0xbc>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d18:	1bdb      	subs	r3, r3, r7
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	b004      	add	sp, #16
 8008d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d24:	1c59      	adds	r1, r3, #1
 8008d26:	9103      	str	r1, [sp, #12]
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	e7f0      	b.n	8008d0e <__cvt+0xa6>

08008d2c <__exponent>:
 8008d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2900      	cmp	r1, #0
 8008d32:	bfb8      	it	lt
 8008d34:	4249      	neglt	r1, r1
 8008d36:	f803 2b02 	strb.w	r2, [r3], #2
 8008d3a:	bfb4      	ite	lt
 8008d3c:	222d      	movlt	r2, #45	; 0x2d
 8008d3e:	222b      	movge	r2, #43	; 0x2b
 8008d40:	2909      	cmp	r1, #9
 8008d42:	7042      	strb	r2, [r0, #1]
 8008d44:	dd2a      	ble.n	8008d9c <__exponent+0x70>
 8008d46:	f10d 0407 	add.w	r4, sp, #7
 8008d4a:	46a4      	mov	ip, r4
 8008d4c:	270a      	movs	r7, #10
 8008d4e:	46a6      	mov	lr, r4
 8008d50:	460a      	mov	r2, r1
 8008d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d56:	fb07 1516 	mls	r5, r7, r6, r1
 8008d5a:	3530      	adds	r5, #48	; 0x30
 8008d5c:	2a63      	cmp	r2, #99	; 0x63
 8008d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d66:	4631      	mov	r1, r6
 8008d68:	dcf1      	bgt.n	8008d4e <__exponent+0x22>
 8008d6a:	3130      	adds	r1, #48	; 0x30
 8008d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8008d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d74:	1c44      	adds	r4, r0, #1
 8008d76:	4629      	mov	r1, r5
 8008d78:	4561      	cmp	r1, ip
 8008d7a:	d30a      	bcc.n	8008d92 <__exponent+0x66>
 8008d7c:	f10d 0209 	add.w	r2, sp, #9
 8008d80:	eba2 020e 	sub.w	r2, r2, lr
 8008d84:	4565      	cmp	r5, ip
 8008d86:	bf88      	it	hi
 8008d88:	2200      	movhi	r2, #0
 8008d8a:	4413      	add	r3, r2
 8008d8c:	1a18      	subs	r0, r3, r0
 8008d8e:	b003      	add	sp, #12
 8008d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d9a:	e7ed      	b.n	8008d78 <__exponent+0x4c>
 8008d9c:	2330      	movs	r3, #48	; 0x30
 8008d9e:	3130      	adds	r1, #48	; 0x30
 8008da0:	7083      	strb	r3, [r0, #2]
 8008da2:	70c1      	strb	r1, [r0, #3]
 8008da4:	1d03      	adds	r3, r0, #4
 8008da6:	e7f1      	b.n	8008d8c <__exponent+0x60>

08008da8 <_printf_float>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	ed2d 8b02 	vpush	{d8}
 8008db0:	b08d      	sub	sp, #52	; 0x34
 8008db2:	460c      	mov	r4, r1
 8008db4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008db8:	4616      	mov	r6, r2
 8008dba:	461f      	mov	r7, r3
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	f001 fafd 	bl	800a3bc <_localeconv_r>
 8008dc2:	f8d0 a000 	ldr.w	sl, [r0]
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa14 	bl	80001f4 <strlen>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ddc:	3307      	adds	r3, #7
 8008dde:	f023 0307 	bic.w	r3, r3, #7
 8008de2:	f103 0208 	add.w	r2, r3, #8
 8008de6:	f8c8 2000 	str.w	r2, [r8]
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008df2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e00:	ee08 0a10 	vmov	s16, r0
 8008e04:	4b9f      	ldr	r3, [pc, #636]	; (8009084 <_printf_float+0x2dc>)
 8008e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	f7f7 fea5 	bl	8000b5c <__aeabi_dcmpun>
 8008e12:	bb88      	cbnz	r0, 8008e78 <_printf_float+0xd0>
 8008e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e18:	4b9a      	ldr	r3, [pc, #616]	; (8009084 <_printf_float+0x2dc>)
 8008e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e1e:	f7f7 fe7f 	bl	8000b20 <__aeabi_dcmple>
 8008e22:	bb48      	cbnz	r0, 8008e78 <_printf_float+0xd0>
 8008e24:	2200      	movs	r2, #0
 8008e26:	2300      	movs	r3, #0
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 fe6e 	bl	8000b0c <__aeabi_dcmplt>
 8008e30:	b110      	cbz	r0, 8008e38 <_printf_float+0x90>
 8008e32:	232d      	movs	r3, #45	; 0x2d
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e38:	4b93      	ldr	r3, [pc, #588]	; (8009088 <_printf_float+0x2e0>)
 8008e3a:	4894      	ldr	r0, [pc, #592]	; (800908c <_printf_float+0x2e4>)
 8008e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e40:	bf94      	ite	ls
 8008e42:	4698      	movls	r8, r3
 8008e44:	4680      	movhi	r8, r0
 8008e46:	2303      	movs	r3, #3
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	f023 0204 	bic.w	r2, r3, #4
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	f04f 0900 	mov.w	r9, #0
 8008e56:	9700      	str	r7, [sp, #0]
 8008e58:	4633      	mov	r3, r6
 8008e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f9d8 	bl	8009214 <_printf_common>
 8008e64:	3001      	adds	r0, #1
 8008e66:	f040 8090 	bne.w	8008f8a <_printf_float+0x1e2>
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	b00d      	add	sp, #52	; 0x34
 8008e70:	ecbd 8b02 	vpop	{d8}
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 fe6c 	bl	8000b5c <__aeabi_dcmpun>
 8008e84:	b140      	cbz	r0, 8008e98 <_printf_float+0xf0>
 8008e86:	464b      	mov	r3, r9
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbc      	itt	lt
 8008e8c:	232d      	movlt	r3, #45	; 0x2d
 8008e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e92:	487f      	ldr	r0, [pc, #508]	; (8009090 <_printf_float+0x2e8>)
 8008e94:	4b7f      	ldr	r3, [pc, #508]	; (8009094 <_printf_float+0x2ec>)
 8008e96:	e7d1      	b.n	8008e3c <_printf_float+0x94>
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e9e:	9206      	str	r2, [sp, #24]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	d13f      	bne.n	8008f24 <_printf_float+0x17c>
 8008ea4:	2306      	movs	r3, #6
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	6861      	ldr	r1, [r4, #4]
 8008eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8008eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008eba:	ab09      	add	r3, sp, #36	; 0x24
 8008ebc:	ec49 8b10 	vmov	d0, r8, r9
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7ff fecd 	bl	8008c68 <__cvt>
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ed2:	2b47      	cmp	r3, #71	; 0x47
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	d108      	bne.n	8008eea <_printf_float+0x142>
 8008ed8:	1cc8      	adds	r0, r1, #3
 8008eda:	db02      	blt.n	8008ee2 <_printf_float+0x13a>
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	dd41      	ble.n	8008f66 <_printf_float+0x1be>
 8008ee2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8008eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eee:	d820      	bhi.n	8008f32 <_printf_float+0x18a>
 8008ef0:	3901      	subs	r1, #1
 8008ef2:	465a      	mov	r2, fp
 8008ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8008efa:	f7ff ff17 	bl	8008d2c <__exponent>
 8008efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f00:	1813      	adds	r3, r2, r0
 8008f02:	2a01      	cmp	r2, #1
 8008f04:	4681      	mov	r9, r0
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	dc02      	bgt.n	8008f10 <_printf_float+0x168>
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	07d2      	lsls	r2, r2, #31
 8008f0e:	d501      	bpl.n	8008f14 <_printf_float+0x16c>
 8008f10:	3301      	adds	r3, #1
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d09c      	beq.n	8008e56 <_printf_float+0xae>
 8008f1c:	232d      	movs	r3, #45	; 0x2d
 8008f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f22:	e798      	b.n	8008e56 <_printf_float+0xae>
 8008f24:	9a06      	ldr	r2, [sp, #24]
 8008f26:	2a47      	cmp	r2, #71	; 0x47
 8008f28:	d1be      	bne.n	8008ea8 <_printf_float+0x100>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1bc      	bne.n	8008ea8 <_printf_float+0x100>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e7b9      	b.n	8008ea6 <_printf_float+0xfe>
 8008f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f36:	d118      	bne.n	8008f6a <_printf_float+0x1c2>
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	dd0b      	ble.n	8008f56 <_printf_float+0x1ae>
 8008f3e:	6121      	str	r1, [r4, #16]
 8008f40:	b913      	cbnz	r3, 8008f48 <_printf_float+0x1a0>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	07d0      	lsls	r0, r2, #31
 8008f46:	d502      	bpl.n	8008f4e <_printf_float+0x1a6>
 8008f48:	3301      	adds	r3, #1
 8008f4a:	440b      	add	r3, r1
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f50:	f04f 0900 	mov.w	r9, #0
 8008f54:	e7de      	b.n	8008f14 <_printf_float+0x16c>
 8008f56:	b913      	cbnz	r3, 8008f5e <_printf_float+0x1b6>
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	07d2      	lsls	r2, r2, #31
 8008f5c:	d501      	bpl.n	8008f62 <_printf_float+0x1ba>
 8008f5e:	3302      	adds	r3, #2
 8008f60:	e7f4      	b.n	8008f4c <_printf_float+0x1a4>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7f2      	b.n	8008f4c <_printf_float+0x1a4>
 8008f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	db05      	blt.n	8008f7c <_printf_float+0x1d4>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	6121      	str	r1, [r4, #16]
 8008f74:	07d8      	lsls	r0, r3, #31
 8008f76:	d5ea      	bpl.n	8008f4e <_printf_float+0x1a6>
 8008f78:	1c4b      	adds	r3, r1, #1
 8008f7a:	e7e7      	b.n	8008f4c <_printf_float+0x1a4>
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	bfd4      	ite	le
 8008f80:	f1c1 0202 	rsble	r2, r1, #2
 8008f84:	2201      	movgt	r2, #1
 8008f86:	4413      	add	r3, r2
 8008f88:	e7e0      	b.n	8008f4c <_printf_float+0x1a4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	055a      	lsls	r2, r3, #21
 8008f8e:	d407      	bmi.n	8008fa0 <_printf_float+0x1f8>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	4642      	mov	r2, r8
 8008f94:	4631      	mov	r1, r6
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d12c      	bne.n	8008ff8 <_printf_float+0x250>
 8008f9e:	e764      	b.n	8008e6a <_printf_float+0xc2>
 8008fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008fa4:	f240 80e0 	bls.w	8009168 <_printf_float+0x3c0>
 8008fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f7f7 fda2 	bl	8000af8 <__aeabi_dcmpeq>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d034      	beq.n	8009022 <_printf_float+0x27a>
 8008fb8:	4a37      	ldr	r2, [pc, #220]	; (8009098 <_printf_float+0x2f0>)
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b8      	blx	r7
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	f43f af51 	beq.w	8008e6a <_printf_float+0xc2>
 8008fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	db02      	blt.n	8008fd6 <_printf_float+0x22e>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	07d8      	lsls	r0, r3, #31
 8008fd4:	d510      	bpl.n	8008ff8 <_printf_float+0x250>
 8008fd6:	ee18 3a10 	vmov	r3, s16
 8008fda:	4652      	mov	r2, sl
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b8      	blx	r7
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f43f af41 	beq.w	8008e6a <_printf_float+0xc2>
 8008fe8:	f04f 0800 	mov.w	r8, #0
 8008fec:	f104 091a 	add.w	r9, r4, #26
 8008ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	4543      	cmp	r3, r8
 8008ff6:	dc09      	bgt.n	800900c <_printf_float+0x264>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	079b      	lsls	r3, r3, #30
 8008ffc:	f100 8105 	bmi.w	800920a <_printf_float+0x462>
 8009000:	68e0      	ldr	r0, [r4, #12]
 8009002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009004:	4298      	cmp	r0, r3
 8009006:	bfb8      	it	lt
 8009008:	4618      	movlt	r0, r3
 800900a:	e730      	b.n	8008e6e <_printf_float+0xc6>
 800900c:	2301      	movs	r3, #1
 800900e:	464a      	mov	r2, r9
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	f43f af27 	beq.w	8008e6a <_printf_float+0xc2>
 800901c:	f108 0801 	add.w	r8, r8, #1
 8009020:	e7e6      	b.n	8008ff0 <_printf_float+0x248>
 8009022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	dc39      	bgt.n	800909c <_printf_float+0x2f4>
 8009028:	4a1b      	ldr	r2, [pc, #108]	; (8009098 <_printf_float+0x2f0>)
 800902a:	2301      	movs	r3, #1
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	f43f af19 	beq.w	8008e6a <_printf_float+0xc2>
 8009038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800903c:	4313      	orrs	r3, r2
 800903e:	d102      	bne.n	8009046 <_printf_float+0x29e>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d5d8      	bpl.n	8008ff8 <_printf_float+0x250>
 8009046:	ee18 3a10 	vmov	r3, s16
 800904a:	4652      	mov	r2, sl
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f af09 	beq.w	8008e6a <_printf_float+0xc2>
 8009058:	f04f 0900 	mov.w	r9, #0
 800905c:	f104 0a1a 	add.w	sl, r4, #26
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	425b      	negs	r3, r3
 8009064:	454b      	cmp	r3, r9
 8009066:	dc01      	bgt.n	800906c <_printf_float+0x2c4>
 8009068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906a:	e792      	b.n	8008f92 <_printf_float+0x1ea>
 800906c:	2301      	movs	r3, #1
 800906e:	4652      	mov	r2, sl
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f aef7 	beq.w	8008e6a <_printf_float+0xc2>
 800907c:	f109 0901 	add.w	r9, r9, #1
 8009080:	e7ee      	b.n	8009060 <_printf_float+0x2b8>
 8009082:	bf00      	nop
 8009084:	7fefffff 	.word	0x7fefffff
 8009088:	0800ea2c 	.word	0x0800ea2c
 800908c:	0800ea30 	.word	0x0800ea30
 8009090:	0800ea38 	.word	0x0800ea38
 8009094:	0800ea34 	.word	0x0800ea34
 8009098:	0800ec61 	.word	0x0800ec61
 800909c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800909e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090a0:	429a      	cmp	r2, r3
 80090a2:	bfa8      	it	ge
 80090a4:	461a      	movge	r2, r3
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	4691      	mov	r9, r2
 80090aa:	dc37      	bgt.n	800911c <_printf_float+0x374>
 80090ac:	f04f 0b00 	mov.w	fp, #0
 80090b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090b4:	f104 021a 	add.w	r2, r4, #26
 80090b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	eba3 0309 	sub.w	r3, r3, r9
 80090c0:	455b      	cmp	r3, fp
 80090c2:	dc33      	bgt.n	800912c <_printf_float+0x384>
 80090c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090c8:	429a      	cmp	r2, r3
 80090ca:	db3b      	blt.n	8009144 <_printf_float+0x39c>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	07da      	lsls	r2, r3, #31
 80090d0:	d438      	bmi.n	8009144 <_printf_float+0x39c>
 80090d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d4:	9a05      	ldr	r2, [sp, #20]
 80090d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d8:	1a9a      	subs	r2, r3, r2
 80090da:	eba3 0901 	sub.w	r9, r3, r1
 80090de:	4591      	cmp	r9, r2
 80090e0:	bfa8      	it	ge
 80090e2:	4691      	movge	r9, r2
 80090e4:	f1b9 0f00 	cmp.w	r9, #0
 80090e8:	dc35      	bgt.n	8009156 <_printf_float+0x3ae>
 80090ea:	f04f 0800 	mov.w	r8, #0
 80090ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090f2:	f104 0a1a 	add.w	sl, r4, #26
 80090f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	eba3 0309 	sub.w	r3, r3, r9
 8009100:	4543      	cmp	r3, r8
 8009102:	f77f af79 	ble.w	8008ff8 <_printf_float+0x250>
 8009106:	2301      	movs	r3, #1
 8009108:	4652      	mov	r2, sl
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	47b8      	blx	r7
 8009110:	3001      	adds	r0, #1
 8009112:	f43f aeaa 	beq.w	8008e6a <_printf_float+0xc2>
 8009116:	f108 0801 	add.w	r8, r8, #1
 800911a:	e7ec      	b.n	80090f6 <_printf_float+0x34e>
 800911c:	4613      	mov	r3, r2
 800911e:	4631      	mov	r1, r6
 8009120:	4642      	mov	r2, r8
 8009122:	4628      	mov	r0, r5
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	d1c0      	bne.n	80090ac <_printf_float+0x304>
 800912a:	e69e      	b.n	8008e6a <_printf_float+0xc2>
 800912c:	2301      	movs	r3, #1
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	9205      	str	r2, [sp, #20]
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	f43f ae97 	beq.w	8008e6a <_printf_float+0xc2>
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	f10b 0b01 	add.w	fp, fp, #1
 8009142:	e7b9      	b.n	80090b8 <_printf_float+0x310>
 8009144:	ee18 3a10 	vmov	r3, s16
 8009148:	4652      	mov	r2, sl
 800914a:	4631      	mov	r1, r6
 800914c:	4628      	mov	r0, r5
 800914e:	47b8      	blx	r7
 8009150:	3001      	adds	r0, #1
 8009152:	d1be      	bne.n	80090d2 <_printf_float+0x32a>
 8009154:	e689      	b.n	8008e6a <_printf_float+0xc2>
 8009156:	9a05      	ldr	r2, [sp, #20]
 8009158:	464b      	mov	r3, r9
 800915a:	4442      	add	r2, r8
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	d1c1      	bne.n	80090ea <_printf_float+0x342>
 8009166:	e680      	b.n	8008e6a <_printf_float+0xc2>
 8009168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800916a:	2a01      	cmp	r2, #1
 800916c:	dc01      	bgt.n	8009172 <_printf_float+0x3ca>
 800916e:	07db      	lsls	r3, r3, #31
 8009170:	d538      	bpl.n	80091e4 <_printf_float+0x43c>
 8009172:	2301      	movs	r3, #1
 8009174:	4642      	mov	r2, r8
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae74 	beq.w	8008e6a <_printf_float+0xc2>
 8009182:	ee18 3a10 	vmov	r3, s16
 8009186:	4652      	mov	r2, sl
 8009188:	4631      	mov	r1, r6
 800918a:	4628      	mov	r0, r5
 800918c:	47b8      	blx	r7
 800918e:	3001      	adds	r0, #1
 8009190:	f43f ae6b 	beq.w	8008e6a <_printf_float+0xc2>
 8009194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	f7f7 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 80091a0:	b9d8      	cbnz	r0, 80091da <_printf_float+0x432>
 80091a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a4:	f108 0201 	add.w	r2, r8, #1
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	d10e      	bne.n	80091d2 <_printf_float+0x42a>
 80091b4:	e659      	b.n	8008e6a <_printf_float+0xc2>
 80091b6:	2301      	movs	r3, #1
 80091b8:	4652      	mov	r2, sl
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	47b8      	blx	r7
 80091c0:	3001      	adds	r0, #1
 80091c2:	f43f ae52 	beq.w	8008e6a <_printf_float+0xc2>
 80091c6:	f108 0801 	add.w	r8, r8, #1
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	3b01      	subs	r3, #1
 80091ce:	4543      	cmp	r3, r8
 80091d0:	dcf1      	bgt.n	80091b6 <_printf_float+0x40e>
 80091d2:	464b      	mov	r3, r9
 80091d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091d8:	e6dc      	b.n	8008f94 <_printf_float+0x1ec>
 80091da:	f04f 0800 	mov.w	r8, #0
 80091de:	f104 0a1a 	add.w	sl, r4, #26
 80091e2:	e7f2      	b.n	80091ca <_printf_float+0x422>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4642      	mov	r2, r8
 80091e8:	e7df      	b.n	80091aa <_printf_float+0x402>
 80091ea:	2301      	movs	r3, #1
 80091ec:	464a      	mov	r2, r9
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	f43f ae38 	beq.w	8008e6a <_printf_float+0xc2>
 80091fa:	f108 0801 	add.w	r8, r8, #1
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009202:	1a5b      	subs	r3, r3, r1
 8009204:	4543      	cmp	r3, r8
 8009206:	dcf0      	bgt.n	80091ea <_printf_float+0x442>
 8009208:	e6fa      	b.n	8009000 <_printf_float+0x258>
 800920a:	f04f 0800 	mov.w	r8, #0
 800920e:	f104 0919 	add.w	r9, r4, #25
 8009212:	e7f4      	b.n	80091fe <_printf_float+0x456>

08009214 <_printf_common>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	4616      	mov	r6, r2
 800921a:	4699      	mov	r9, r3
 800921c:	688a      	ldr	r2, [r1, #8]
 800921e:	690b      	ldr	r3, [r1, #16]
 8009220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009224:	4293      	cmp	r3, r2
 8009226:	bfb8      	it	lt
 8009228:	4613      	movlt	r3, r2
 800922a:	6033      	str	r3, [r6, #0]
 800922c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009230:	4607      	mov	r7, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b10a      	cbz	r2, 800923a <_printf_common+0x26>
 8009236:	3301      	adds	r3, #1
 8009238:	6033      	str	r3, [r6, #0]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	0699      	lsls	r1, r3, #26
 800923e:	bf42      	ittt	mi
 8009240:	6833      	ldrmi	r3, [r6, #0]
 8009242:	3302      	addmi	r3, #2
 8009244:	6033      	strmi	r3, [r6, #0]
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	f015 0506 	ands.w	r5, r5, #6
 800924c:	d106      	bne.n	800925c <_printf_common+0x48>
 800924e:	f104 0a19 	add.w	sl, r4, #25
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	6832      	ldr	r2, [r6, #0]
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	42ab      	cmp	r3, r5
 800925a:	dc26      	bgt.n	80092aa <_printf_common+0x96>
 800925c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009260:	1e13      	subs	r3, r2, #0
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	bf18      	it	ne
 8009266:	2301      	movne	r3, #1
 8009268:	0692      	lsls	r2, r2, #26
 800926a:	d42b      	bmi.n	80092c4 <_printf_common+0xb0>
 800926c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009270:	4649      	mov	r1, r9
 8009272:	4638      	mov	r0, r7
 8009274:	47c0      	blx	r8
 8009276:	3001      	adds	r0, #1
 8009278:	d01e      	beq.n	80092b8 <_printf_common+0xa4>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	68e5      	ldr	r5, [r4, #12]
 800927e:	6832      	ldr	r2, [r6, #0]
 8009280:	f003 0306 	and.w	r3, r3, #6
 8009284:	2b04      	cmp	r3, #4
 8009286:	bf08      	it	eq
 8009288:	1aad      	subeq	r5, r5, r2
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	bf0c      	ite	eq
 8009290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009294:	2500      	movne	r5, #0
 8009296:	4293      	cmp	r3, r2
 8009298:	bfc4      	itt	gt
 800929a:	1a9b      	subgt	r3, r3, r2
 800929c:	18ed      	addgt	r5, r5, r3
 800929e:	2600      	movs	r6, #0
 80092a0:	341a      	adds	r4, #26
 80092a2:	42b5      	cmp	r5, r6
 80092a4:	d11a      	bne.n	80092dc <_printf_common+0xc8>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e008      	b.n	80092bc <_printf_common+0xa8>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4652      	mov	r2, sl
 80092ae:	4649      	mov	r1, r9
 80092b0:	4638      	mov	r0, r7
 80092b2:	47c0      	blx	r8
 80092b4:	3001      	adds	r0, #1
 80092b6:	d103      	bne.n	80092c0 <_printf_common+0xac>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c0:	3501      	adds	r5, #1
 80092c2:	e7c6      	b.n	8009252 <_printf_common+0x3e>
 80092c4:	18e1      	adds	r1, r4, r3
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	2030      	movs	r0, #48	; 0x30
 80092ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ce:	4422      	add	r2, r4
 80092d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d8:	3302      	adds	r3, #2
 80092da:	e7c7      	b.n	800926c <_printf_common+0x58>
 80092dc:	2301      	movs	r3, #1
 80092de:	4622      	mov	r2, r4
 80092e0:	4649      	mov	r1, r9
 80092e2:	4638      	mov	r0, r7
 80092e4:	47c0      	blx	r8
 80092e6:	3001      	adds	r0, #1
 80092e8:	d0e6      	beq.n	80092b8 <_printf_common+0xa4>
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7d9      	b.n	80092a2 <_printf_common+0x8e>
	...

080092f0 <_printf_i>:
 80092f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	7e0f      	ldrb	r7, [r1, #24]
 80092f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092f8:	2f78      	cmp	r7, #120	; 0x78
 80092fa:	4691      	mov	r9, r2
 80092fc:	4680      	mov	r8, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	469a      	mov	sl, r3
 8009302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009306:	d807      	bhi.n	8009318 <_printf_i+0x28>
 8009308:	2f62      	cmp	r7, #98	; 0x62
 800930a:	d80a      	bhi.n	8009322 <_printf_i+0x32>
 800930c:	2f00      	cmp	r7, #0
 800930e:	f000 80d8 	beq.w	80094c2 <_printf_i+0x1d2>
 8009312:	2f58      	cmp	r7, #88	; 0x58
 8009314:	f000 80a3 	beq.w	800945e <_printf_i+0x16e>
 8009318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800931c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009320:	e03a      	b.n	8009398 <_printf_i+0xa8>
 8009322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009326:	2b15      	cmp	r3, #21
 8009328:	d8f6      	bhi.n	8009318 <_printf_i+0x28>
 800932a:	a101      	add	r1, pc, #4	; (adr r1, 8009330 <_printf_i+0x40>)
 800932c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009330:	08009389 	.word	0x08009389
 8009334:	0800939d 	.word	0x0800939d
 8009338:	08009319 	.word	0x08009319
 800933c:	08009319 	.word	0x08009319
 8009340:	08009319 	.word	0x08009319
 8009344:	08009319 	.word	0x08009319
 8009348:	0800939d 	.word	0x0800939d
 800934c:	08009319 	.word	0x08009319
 8009350:	08009319 	.word	0x08009319
 8009354:	08009319 	.word	0x08009319
 8009358:	08009319 	.word	0x08009319
 800935c:	080094a9 	.word	0x080094a9
 8009360:	080093cd 	.word	0x080093cd
 8009364:	0800948b 	.word	0x0800948b
 8009368:	08009319 	.word	0x08009319
 800936c:	08009319 	.word	0x08009319
 8009370:	080094cb 	.word	0x080094cb
 8009374:	08009319 	.word	0x08009319
 8009378:	080093cd 	.word	0x080093cd
 800937c:	08009319 	.word	0x08009319
 8009380:	08009319 	.word	0x08009319
 8009384:	08009493 	.word	0x08009493
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	602a      	str	r2, [r5, #0]
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009398:	2301      	movs	r3, #1
 800939a:	e0a3      	b.n	80094e4 <_printf_i+0x1f4>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	6829      	ldr	r1, [r5, #0]
 80093a0:	0606      	lsls	r6, r0, #24
 80093a2:	f101 0304 	add.w	r3, r1, #4
 80093a6:	d50a      	bpl.n	80093be <_printf_i+0xce>
 80093a8:	680e      	ldr	r6, [r1, #0]
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xc8>
 80093b0:	232d      	movs	r3, #45	; 0x2d
 80093b2:	4276      	negs	r6, r6
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b8:	485e      	ldr	r0, [pc, #376]	; (8009534 <_printf_i+0x244>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e019      	b.n	80093f2 <_printf_i+0x102>
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093c6:	bf18      	it	ne
 80093c8:	b236      	sxthne	r6, r6
 80093ca:	e7ef      	b.n	80093ac <_printf_i+0xbc>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	6029      	str	r1, [r5, #0]
 80093d4:	0601      	lsls	r1, r0, #24
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0xec>
 80093d8:	681e      	ldr	r6, [r3, #0]
 80093da:	e002      	b.n	80093e2 <_printf_i+0xf2>
 80093dc:	0646      	lsls	r6, r0, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0xe8>
 80093e0:	881e      	ldrh	r6, [r3, #0]
 80093e2:	4854      	ldr	r0, [pc, #336]	; (8009534 <_printf_i+0x244>)
 80093e4:	2f6f      	cmp	r7, #111	; 0x6f
 80093e6:	bf0c      	ite	eq
 80093e8:	2308      	moveq	r3, #8
 80093ea:	230a      	movne	r3, #10
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f2:	6865      	ldr	r5, [r4, #4]
 80093f4:	60a5      	str	r5, [r4, #8]
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	bfa2      	ittt	ge
 80093fa:	6821      	ldrge	r1, [r4, #0]
 80093fc:	f021 0104 	bicge.w	r1, r1, #4
 8009400:	6021      	strge	r1, [r4, #0]
 8009402:	b90e      	cbnz	r6, 8009408 <_printf_i+0x118>
 8009404:	2d00      	cmp	r5, #0
 8009406:	d04d      	beq.n	80094a4 <_printf_i+0x1b4>
 8009408:	4615      	mov	r5, r2
 800940a:	fbb6 f1f3 	udiv	r1, r6, r3
 800940e:	fb03 6711 	mls	r7, r3, r1, r6
 8009412:	5dc7      	ldrb	r7, [r0, r7]
 8009414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009418:	4637      	mov	r7, r6
 800941a:	42bb      	cmp	r3, r7
 800941c:	460e      	mov	r6, r1
 800941e:	d9f4      	bls.n	800940a <_printf_i+0x11a>
 8009420:	2b08      	cmp	r3, #8
 8009422:	d10b      	bne.n	800943c <_printf_i+0x14c>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07de      	lsls	r6, r3, #31
 8009428:	d508      	bpl.n	800943c <_printf_i+0x14c>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4299      	cmp	r1, r3
 8009430:	bfde      	ittt	le
 8009432:	2330      	movle	r3, #48	; 0x30
 8009434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800943c:	1b52      	subs	r2, r2, r5
 800943e:	6122      	str	r2, [r4, #16]
 8009440:	f8cd a000 	str.w	sl, [sp]
 8009444:	464b      	mov	r3, r9
 8009446:	aa03      	add	r2, sp, #12
 8009448:	4621      	mov	r1, r4
 800944a:	4640      	mov	r0, r8
 800944c:	f7ff fee2 	bl	8009214 <_printf_common>
 8009450:	3001      	adds	r0, #1
 8009452:	d14c      	bne.n	80094ee <_printf_i+0x1fe>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b004      	add	sp, #16
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945e:	4835      	ldr	r0, [pc, #212]	; (8009534 <_printf_i+0x244>)
 8009460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009464:	6829      	ldr	r1, [r5, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	f851 6b04 	ldr.w	r6, [r1], #4
 800946c:	6029      	str	r1, [r5, #0]
 800946e:	061d      	lsls	r5, r3, #24
 8009470:	d514      	bpl.n	800949c <_printf_i+0x1ac>
 8009472:	07df      	lsls	r7, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b91e      	cbnz	r6, 8009486 <_printf_i+0x196>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	f023 0320 	bic.w	r3, r3, #32
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	2310      	movs	r3, #16
 8009488:	e7b0      	b.n	80093ec <_printf_i+0xfc>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f043 0320 	orr.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	2378      	movs	r3, #120	; 0x78
 8009494:	4828      	ldr	r0, [pc, #160]	; (8009538 <_printf_i+0x248>)
 8009496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949a:	e7e3      	b.n	8009464 <_printf_i+0x174>
 800949c:	0659      	lsls	r1, r3, #25
 800949e:	bf48      	it	mi
 80094a0:	b2b6      	uxthmi	r6, r6
 80094a2:	e7e6      	b.n	8009472 <_printf_i+0x182>
 80094a4:	4615      	mov	r5, r2
 80094a6:	e7bb      	b.n	8009420 <_printf_i+0x130>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	6826      	ldr	r6, [r4, #0]
 80094ac:	6961      	ldr	r1, [r4, #20]
 80094ae:	1d18      	adds	r0, r3, #4
 80094b0:	6028      	str	r0, [r5, #0]
 80094b2:	0635      	lsls	r5, r6, #24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0x1cc>
 80094b8:	6019      	str	r1, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <_printf_i+0x1d2>
 80094bc:	0670      	lsls	r0, r6, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0x1c8>
 80094c0:	8019      	strh	r1, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	4615      	mov	r5, r2
 80094c8:	e7ba      	b.n	8009440 <_printf_i+0x150>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	6862      	ldr	r2, [r4, #4]
 80094d4:	2100      	movs	r1, #0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7f6 fe9a 	bl	8000210 <memchr>
 80094dc:	b108      	cbz	r0, 80094e2 <_printf_i+0x1f2>
 80094de:	1b40      	subs	r0, r0, r5
 80094e0:	6060      	str	r0, [r4, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	e7a8      	b.n	8009440 <_printf_i+0x150>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	47d0      	blx	sl
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0ab      	beq.n	8009454 <_printf_i+0x164>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d413      	bmi.n	800952a <_printf_i+0x23a>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	4298      	cmp	r0, r3
 8009508:	bfb8      	it	lt
 800950a:	4618      	movlt	r0, r3
 800950c:	e7a4      	b.n	8009458 <_printf_i+0x168>
 800950e:	2301      	movs	r3, #1
 8009510:	4632      	mov	r2, r6
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	47d0      	blx	sl
 8009518:	3001      	adds	r0, #1
 800951a:	d09b      	beq.n	8009454 <_printf_i+0x164>
 800951c:	3501      	adds	r5, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	9903      	ldr	r1, [sp, #12]
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	42ab      	cmp	r3, r5
 8009526:	dcf2      	bgt.n	800950e <_printf_i+0x21e>
 8009528:	e7eb      	b.n	8009502 <_printf_i+0x212>
 800952a:	2500      	movs	r5, #0
 800952c:	f104 0619 	add.w	r6, r4, #25
 8009530:	e7f5      	b.n	800951e <_printf_i+0x22e>
 8009532:	bf00      	nop
 8009534:	0800ea3c 	.word	0x0800ea3c
 8009538:	0800ea4d 	.word	0x0800ea4d

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_sbrk_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f005 f858 	bl	800e5fc <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20011d44 	.word	0x20011d44

0800955c <siprintf>:
 800955c:	b40e      	push	{r1, r2, r3}
 800955e:	b500      	push	{lr}
 8009560:	b09c      	sub	sp, #112	; 0x70
 8009562:	ab1d      	add	r3, sp, #116	; 0x74
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	9006      	str	r0, [sp, #24]
 8009568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800956c:	4809      	ldr	r0, [pc, #36]	; (8009594 <siprintf+0x38>)
 800956e:	9107      	str	r1, [sp, #28]
 8009570:	9104      	str	r1, [sp, #16]
 8009572:	4909      	ldr	r1, [pc, #36]	; (8009598 <siprintf+0x3c>)
 8009574:	f853 2b04 	ldr.w	r2, [r3], #4
 8009578:	9105      	str	r1, [sp, #20]
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	a902      	add	r1, sp, #8
 8009580:	f001 fb42 	bl	800ac08 <_svfiprintf_r>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	b01c      	add	sp, #112	; 0x70
 800958c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009590:	b003      	add	sp, #12
 8009592:	4770      	bx	lr
 8009594:	20000014 	.word	0x20000014
 8009598:	ffff0208 	.word	0xffff0208

0800959c <siscanf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b510      	push	{r4, lr}
 80095a0:	b09f      	sub	sp, #124	; 0x7c
 80095a2:	ac21      	add	r4, sp, #132	; 0x84
 80095a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80095a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80095ac:	9201      	str	r2, [sp, #4]
 80095ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80095b2:	9004      	str	r0, [sp, #16]
 80095b4:	9008      	str	r0, [sp, #32]
 80095b6:	f7f6 fe1d 	bl	80001f4 <strlen>
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <siscanf+0x50>)
 80095bc:	9005      	str	r0, [sp, #20]
 80095be:	9009      	str	r0, [sp, #36]	; 0x24
 80095c0:	930d      	str	r3, [sp, #52]	; 0x34
 80095c2:	480b      	ldr	r0, [pc, #44]	; (80095f0 <siscanf+0x54>)
 80095c4:	9a01      	ldr	r2, [sp, #4]
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	9403      	str	r4, [sp, #12]
 80095ca:	2300      	movs	r3, #0
 80095cc:	9311      	str	r3, [sp, #68]	; 0x44
 80095ce:	9316      	str	r3, [sp, #88]	; 0x58
 80095d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80095d8:	a904      	add	r1, sp, #16
 80095da:	4623      	mov	r3, r4
 80095dc:	f001 fc6e 	bl	800aebc <__ssvfiscanf_r>
 80095e0:	b01f      	add	sp, #124	; 0x7c
 80095e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e6:	b003      	add	sp, #12
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	08009617 	.word	0x08009617
 80095f0:	20000014 	.word	0x20000014

080095f4 <__sread>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	f001 ff28 	bl	800b450 <_read_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	bfab      	itete	ge
 8009604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009606:	89a3      	ldrhlt	r3, [r4, #12]
 8009608:	181b      	addge	r3, r3, r0
 800960a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800960e:	bfac      	ite	ge
 8009610:	6563      	strge	r3, [r4, #84]	; 0x54
 8009612:	81a3      	strhlt	r3, [r4, #12]
 8009614:	bd10      	pop	{r4, pc}

08009616 <__seofread>:
 8009616:	2000      	movs	r0, #0
 8009618:	4770      	bx	lr

0800961a <__swrite>:
 800961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961e:	461f      	mov	r7, r3
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	05db      	lsls	r3, r3, #23
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4616      	mov	r6, r2
 800962a:	d505      	bpl.n	8009638 <__swrite+0x1e>
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2302      	movs	r3, #2
 8009632:	2200      	movs	r2, #0
 8009634:	f000 fec6 	bl	800a3c4 <_lseek_r>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	4632      	mov	r2, r6
 8009646:	463b      	mov	r3, r7
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f000 b817 	b.w	8009680 <_write_r>

08009652 <__sseek>:
 8009652:	b510      	push	{r4, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965a:	f000 feb3 	bl	800a3c4 <_lseek_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	bf15      	itete	ne
 8009664:	6560      	strne	r0, [r4, #84]	; 0x54
 8009666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800966a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966e:	81a3      	strheq	r3, [r4, #12]
 8009670:	bf18      	it	ne
 8009672:	81a3      	strhne	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__sclose>:
 8009676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967a:	f000 b813 	b.w	80096a4 <_close_r>
	...

08009680 <_write_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_write_r+0x20>)
 8009684:	4604      	mov	r4, r0
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	2200      	movs	r2, #0
 800968c:	602a      	str	r2, [r5, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	f7f9 fc3b 	bl	8002f0a <_write>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_write_r+0x1e>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_write_r+0x1e>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20011d44 	.word	0x20011d44

080096a4 <_close_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_close_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f9 fc47 	bl	8002f42 <_close>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_close_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_close_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	20011d44 	.word	0x20011d44

080096c4 <quorem>:
 80096c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	6903      	ldr	r3, [r0, #16]
 80096ca:	690c      	ldr	r4, [r1, #16]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	4607      	mov	r7, r0
 80096d0:	f2c0 8081 	blt.w	80097d6 <quorem+0x112>
 80096d4:	3c01      	subs	r4, #1
 80096d6:	f101 0814 	add.w	r8, r1, #20
 80096da:	f100 0514 	add.w	r5, r0, #20
 80096de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ec:	3301      	adds	r3, #1
 80096ee:	429a      	cmp	r2, r3
 80096f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096fc:	d331      	bcc.n	8009762 <quorem+0x9e>
 80096fe:	f04f 0e00 	mov.w	lr, #0
 8009702:	4640      	mov	r0, r8
 8009704:	46ac      	mov	ip, r5
 8009706:	46f2      	mov	sl, lr
 8009708:	f850 2b04 	ldr.w	r2, [r0], #4
 800970c:	b293      	uxth	r3, r2
 800970e:	fb06 e303 	mla	r3, r6, r3, lr
 8009712:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009716:	b29b      	uxth	r3, r3
 8009718:	ebaa 0303 	sub.w	r3, sl, r3
 800971c:	f8dc a000 	ldr.w	sl, [ip]
 8009720:	0c12      	lsrs	r2, r2, #16
 8009722:	fa13 f38a 	uxtah	r3, r3, sl
 8009726:	fb06 e202 	mla	r2, r6, r2, lr
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	9b00      	ldr	r3, [sp, #0]
 800972e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009732:	b292      	uxth	r2, r2
 8009734:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800973c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009740:	4581      	cmp	r9, r0
 8009742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009746:	f84c 3b04 	str.w	r3, [ip], #4
 800974a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800974e:	d2db      	bcs.n	8009708 <quorem+0x44>
 8009750:	f855 300b 	ldr.w	r3, [r5, fp]
 8009754:	b92b      	cbnz	r3, 8009762 <quorem+0x9e>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	3b04      	subs	r3, #4
 800975a:	429d      	cmp	r5, r3
 800975c:	461a      	mov	r2, r3
 800975e:	d32e      	bcc.n	80097be <quorem+0xfa>
 8009760:	613c      	str	r4, [r7, #16]
 8009762:	4638      	mov	r0, r7
 8009764:	f001 f8dc 	bl	800a920 <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	db24      	blt.n	80097b6 <quorem+0xf2>
 800976c:	3601      	adds	r6, #1
 800976e:	4628      	mov	r0, r5
 8009770:	f04f 0c00 	mov.w	ip, #0
 8009774:	f858 2b04 	ldr.w	r2, [r8], #4
 8009778:	f8d0 e000 	ldr.w	lr, [r0]
 800977c:	b293      	uxth	r3, r2
 800977e:	ebac 0303 	sub.w	r3, ip, r3
 8009782:	0c12      	lsrs	r2, r2, #16
 8009784:	fa13 f38e 	uxtah	r3, r3, lr
 8009788:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800978c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009790:	b29b      	uxth	r3, r3
 8009792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009796:	45c1      	cmp	r9, r8
 8009798:	f840 3b04 	str.w	r3, [r0], #4
 800979c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097a0:	d2e8      	bcs.n	8009774 <quorem+0xb0>
 80097a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097aa:	b922      	cbnz	r2, 80097b6 <quorem+0xf2>
 80097ac:	3b04      	subs	r3, #4
 80097ae:	429d      	cmp	r5, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	d30a      	bcc.n	80097ca <quorem+0x106>
 80097b4:	613c      	str	r4, [r7, #16]
 80097b6:	4630      	mov	r0, r6
 80097b8:	b003      	add	sp, #12
 80097ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1cc      	bne.n	8009760 <quorem+0x9c>
 80097c6:	3c01      	subs	r4, #1
 80097c8:	e7c7      	b.n	800975a <quorem+0x96>
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d1f0      	bne.n	80097b4 <quorem+0xf0>
 80097d2:	3c01      	subs	r4, #1
 80097d4:	e7eb      	b.n	80097ae <quorem+0xea>
 80097d6:	2000      	movs	r0, #0
 80097d8:	e7ee      	b.n	80097b8 <quorem+0xf4>
 80097da:	0000      	movs	r0, r0
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <_dtoa_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b04 	vpush	{d8-d9}
 80097e8:	ec57 6b10 	vmov	r6, r7, d0
 80097ec:	b093      	sub	sp, #76	; 0x4c
 80097ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097f4:	9106      	str	r1, [sp, #24]
 80097f6:	ee10 aa10 	vmov	sl, s0
 80097fa:	4604      	mov	r4, r0
 80097fc:	9209      	str	r2, [sp, #36]	; 0x24
 80097fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009800:	46bb      	mov	fp, r7
 8009802:	b975      	cbnz	r5, 8009822 <_dtoa_r+0x42>
 8009804:	2010      	movs	r0, #16
 8009806:	f7ff f93f 	bl	8008a88 <malloc>
 800980a:	4602      	mov	r2, r0
 800980c:	6260      	str	r0, [r4, #36]	; 0x24
 800980e:	b920      	cbnz	r0, 800981a <_dtoa_r+0x3a>
 8009810:	4ba7      	ldr	r3, [pc, #668]	; (8009ab0 <_dtoa_r+0x2d0>)
 8009812:	21ea      	movs	r1, #234	; 0xea
 8009814:	48a7      	ldr	r0, [pc, #668]	; (8009ab4 <_dtoa_r+0x2d4>)
 8009816:	f001 ff97 	bl	800b748 <__assert_func>
 800981a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981e:	6005      	str	r5, [r0, #0]
 8009820:	60c5      	str	r5, [r0, #12]
 8009822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	b151      	cbz	r1, 800983e <_dtoa_r+0x5e>
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	604a      	str	r2, [r1, #4]
 800982c:	2301      	movs	r3, #1
 800982e:	4093      	lsls	r3, r2
 8009830:	608b      	str	r3, [r1, #8]
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fe32 	bl	800a49c <_Bfree>
 8009838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	1e3b      	subs	r3, r7, #0
 8009840:	bfaa      	itet	ge
 8009842:	2300      	movge	r3, #0
 8009844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009848:	f8c8 3000 	strge.w	r3, [r8]
 800984c:	4b9a      	ldr	r3, [pc, #616]	; (8009ab8 <_dtoa_r+0x2d8>)
 800984e:	bfbc      	itt	lt
 8009850:	2201      	movlt	r2, #1
 8009852:	f8c8 2000 	strlt.w	r2, [r8]
 8009856:	ea33 030b 	bics.w	r3, r3, fp
 800985a:	d11b      	bne.n	8009894 <_dtoa_r+0xb4>
 800985c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800985e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009868:	4333      	orrs	r3, r6
 800986a:	f000 8592 	beq.w	800a392 <_dtoa_r+0xbb2>
 800986e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009870:	b963      	cbnz	r3, 800988c <_dtoa_r+0xac>
 8009872:	4b92      	ldr	r3, [pc, #584]	; (8009abc <_dtoa_r+0x2dc>)
 8009874:	e022      	b.n	80098bc <_dtoa_r+0xdc>
 8009876:	4b92      	ldr	r3, [pc, #584]	; (8009ac0 <_dtoa_r+0x2e0>)
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	3308      	adds	r3, #8
 800987c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	b013      	add	sp, #76	; 0x4c
 8009884:	ecbd 8b04 	vpop	{d8-d9}
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	4b8b      	ldr	r3, [pc, #556]	; (8009abc <_dtoa_r+0x2dc>)
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	3303      	adds	r3, #3
 8009892:	e7f3      	b.n	800987c <_dtoa_r+0x9c>
 8009894:	2200      	movs	r2, #0
 8009896:	2300      	movs	r3, #0
 8009898:	4650      	mov	r0, sl
 800989a:	4659      	mov	r1, fp
 800989c:	f7f7 f92c 	bl	8000af8 <__aeabi_dcmpeq>
 80098a0:	ec4b ab19 	vmov	d9, sl, fp
 80098a4:	4680      	mov	r8, r0
 80098a6:	b158      	cbz	r0, 80098c0 <_dtoa_r+0xe0>
 80098a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098aa:	2301      	movs	r3, #1
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 856b 	beq.w	800a38c <_dtoa_r+0xbac>
 80098b6:	4883      	ldr	r0, [pc, #524]	; (8009ac4 <_dtoa_r+0x2e4>)
 80098b8:	6018      	str	r0, [r3, #0]
 80098ba:	1e43      	subs	r3, r0, #1
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	e7df      	b.n	8009880 <_dtoa_r+0xa0>
 80098c0:	ec4b ab10 	vmov	d0, sl, fp
 80098c4:	aa10      	add	r2, sp, #64	; 0x40
 80098c6:	a911      	add	r1, sp, #68	; 0x44
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 f8cf 	bl	800aa6c <__d2b>
 80098ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098d2:	ee08 0a10 	vmov	s16, r0
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	f000 8084 	beq.w	80099e4 <_dtoa_r+0x204>
 80098dc:	ee19 3a90 	vmov	r3, s19
 80098e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098e8:	4656      	mov	r6, sl
 80098ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098f6:	4b74      	ldr	r3, [pc, #464]	; (8009ac8 <_dtoa_r+0x2e8>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	4630      	mov	r0, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	f7f6 fcdb 	bl	80002b8 <__aeabi_dsub>
 8009902:	a365      	add	r3, pc, #404	; (adr r3, 8009a98 <_dtoa_r+0x2b8>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fe8e 	bl	8000628 <__aeabi_dmul>
 800990c:	a364      	add	r3, pc, #400	; (adr r3, 8009aa0 <_dtoa_r+0x2c0>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fcd3 	bl	80002bc <__adddf3>
 8009916:	4606      	mov	r6, r0
 8009918:	4628      	mov	r0, r5
 800991a:	460f      	mov	r7, r1
 800991c:	f7f6 fe1a 	bl	8000554 <__aeabi_i2d>
 8009920:	a361      	add	r3, pc, #388	; (adr r3, 8009aa8 <_dtoa_r+0x2c8>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fe7f 	bl	8000628 <__aeabi_dmul>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fcc3 	bl	80002bc <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	f7f7 f925 	bl	8000b88 <__aeabi_d2iz>
 800993e:	2200      	movs	r2, #0
 8009940:	9000      	str	r0, [sp, #0]
 8009942:	2300      	movs	r3, #0
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f8e0 	bl	8000b0c <__aeabi_dcmplt>
 800994c:	b150      	cbz	r0, 8009964 <_dtoa_r+0x184>
 800994e:	9800      	ldr	r0, [sp, #0]
 8009950:	f7f6 fe00 	bl	8000554 <__aeabi_i2d>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f7 f8ce 	bl	8000af8 <__aeabi_dcmpeq>
 800995c:	b910      	cbnz	r0, 8009964 <_dtoa_r+0x184>
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	2b16      	cmp	r3, #22
 8009968:	d85a      	bhi.n	8009a20 <_dtoa_r+0x240>
 800996a:	9a00      	ldr	r2, [sp, #0]
 800996c:	4b57      	ldr	r3, [pc, #348]	; (8009acc <_dtoa_r+0x2ec>)
 800996e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	ec51 0b19 	vmov	r0, r1, d9
 800997a:	f7f7 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800997e:	2800      	cmp	r0, #0
 8009980:	d050      	beq.n	8009a24 <_dtoa_r+0x244>
 8009982:	9b00      	ldr	r3, [sp, #0]
 8009984:	3b01      	subs	r3, #1
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	930b      	str	r3, [sp, #44]	; 0x2c
 800998c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800998e:	1b5d      	subs	r5, r3, r5
 8009990:	1e6b      	subs	r3, r5, #1
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	bf45      	ittet	mi
 8009996:	f1c5 0301 	rsbmi	r3, r5, #1
 800999a:	9304      	strmi	r3, [sp, #16]
 800999c:	2300      	movpl	r3, #0
 800999e:	2300      	movmi	r3, #0
 80099a0:	bf4c      	ite	mi
 80099a2:	9305      	strmi	r3, [sp, #20]
 80099a4:	9304      	strpl	r3, [sp, #16]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	db3d      	blt.n	8009a28 <_dtoa_r+0x248>
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	9a00      	ldr	r2, [sp, #0]
 80099b0:	920a      	str	r2, [sp, #40]	; 0x28
 80099b2:	4413      	add	r3, r2
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	2b09      	cmp	r3, #9
 80099be:	f200 8089 	bhi.w	8009ad4 <_dtoa_r+0x2f4>
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	bfc4      	itt	gt
 80099c6:	3b04      	subgt	r3, #4
 80099c8:	9306      	strgt	r3, [sp, #24]
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	f1a3 0302 	sub.w	r3, r3, #2
 80099d0:	bfcc      	ite	gt
 80099d2:	2500      	movgt	r5, #0
 80099d4:	2501      	movle	r5, #1
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	f200 8087 	bhi.w	8009aea <_dtoa_r+0x30a>
 80099dc:	e8df f003 	tbb	[pc, r3]
 80099e0:	59383a2d 	.word	0x59383a2d
 80099e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099e8:	441d      	add	r5, r3
 80099ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	bfc1      	itttt	gt
 80099f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80099fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a02:	bfda      	itte	le
 8009a04:	f1c3 0320 	rsble	r3, r3, #32
 8009a08:	fa06 f003 	lslle.w	r0, r6, r3
 8009a0c:	4318      	orrgt	r0, r3
 8009a0e:	f7f6 fd91 	bl	8000534 <__aeabi_ui2d>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4606      	mov	r6, r0
 8009a16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a1a:	3d01      	subs	r5, #1
 8009a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a1e:	e76a      	b.n	80098f6 <_dtoa_r+0x116>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7b2      	b.n	800998a <_dtoa_r+0x1aa>
 8009a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a26:	e7b1      	b.n	800998c <_dtoa_r+0x1ac>
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	9a00      	ldr	r2, [sp, #0]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	4253      	negs	r3, r2
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	e7bf      	b.n	80099ba <_dtoa_r+0x1da>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9308      	str	r3, [sp, #32]
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dc55      	bgt.n	8009af0 <_dtoa_r+0x310>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4e:	e00c      	b.n	8009a6a <_dtoa_r+0x28a>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e7f3      	b.n	8009a3c <_dtoa_r+0x25c>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	9302      	str	r3, [sp, #8]
 8009a60:	3301      	adds	r3, #1
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	bfb8      	it	lt
 8009a68:	2301      	movlt	r3, #1
 8009a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	6042      	str	r2, [r0, #4]
 8009a70:	2204      	movs	r2, #4
 8009a72:	f102 0614 	add.w	r6, r2, #20
 8009a76:	429e      	cmp	r6, r3
 8009a78:	6841      	ldr	r1, [r0, #4]
 8009a7a:	d93d      	bls.n	8009af8 <_dtoa_r+0x318>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fccd 	bl	800a41c <_Balloc>
 8009a82:	9001      	str	r0, [sp, #4]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d13b      	bne.n	8009b00 <_dtoa_r+0x320>
 8009a88:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <_dtoa_r+0x2f0>)
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a90:	e6c0      	b.n	8009814 <_dtoa_r+0x34>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7df      	b.n	8009a56 <_dtoa_r+0x276>
 8009a96:	bf00      	nop
 8009a98:	636f4361 	.word	0x636f4361
 8009a9c:	3fd287a7 	.word	0x3fd287a7
 8009aa0:	8b60c8b3 	.word	0x8b60c8b3
 8009aa4:	3fc68a28 	.word	0x3fc68a28
 8009aa8:	509f79fb 	.word	0x509f79fb
 8009aac:	3fd34413 	.word	0x3fd34413
 8009ab0:	0800ea6b 	.word	0x0800ea6b
 8009ab4:	0800ea82 	.word	0x0800ea82
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	0800ea67 	.word	0x0800ea67
 8009ac0:	0800ea5e 	.word	0x0800ea5e
 8009ac4:	0800ec62 	.word	0x0800ec62
 8009ac8:	3ff80000 	.word	0x3ff80000
 8009acc:	0800eb78 	.word	0x0800eb78
 8009ad0:	0800eadd 	.word	0x0800eadd
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9306      	str	r3, [sp, #24]
 8009ada:	9508      	str	r5, [sp, #32]
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2312      	movs	r3, #18
 8009ae8:	e7b0      	b.n	8009a4c <_dtoa_r+0x26c>
 8009aea:	2301      	movs	r3, #1
 8009aec:	9308      	str	r3, [sp, #32]
 8009aee:	e7f5      	b.n	8009adc <_dtoa_r+0x2fc>
 8009af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009af6:	e7b8      	b.n	8009a6a <_dtoa_r+0x28a>
 8009af8:	3101      	adds	r1, #1
 8009afa:	6041      	str	r1, [r0, #4]
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7b8      	b.n	8009a72 <_dtoa_r+0x292>
 8009b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	2b0e      	cmp	r3, #14
 8009b0a:	f200 809d 	bhi.w	8009c48 <_dtoa_r+0x468>
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	f000 809a 	beq.w	8009c48 <_dtoa_r+0x468>
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd32      	ble.n	8009b80 <_dtoa_r+0x3a0>
 8009b1a:	4ab7      	ldr	r2, [pc, #732]	; (8009df8 <_dtoa_r+0x618>)
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	05d8      	lsls	r0, r3, #23
 8009b2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b30:	d516      	bpl.n	8009b60 <_dtoa_r+0x380>
 8009b32:	4bb2      	ldr	r3, [pc, #712]	; (8009dfc <_dtoa_r+0x61c>)
 8009b34:	ec51 0b19 	vmov	r0, r1, d9
 8009b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b3c:	f7f6 fe9e 	bl	800087c <__aeabi_ddiv>
 8009b40:	f007 070f 	and.w	r7, r7, #15
 8009b44:	4682      	mov	sl, r0
 8009b46:	468b      	mov	fp, r1
 8009b48:	2503      	movs	r5, #3
 8009b4a:	4eac      	ldr	r6, [pc, #688]	; (8009dfc <_dtoa_r+0x61c>)
 8009b4c:	b957      	cbnz	r7, 8009b64 <_dtoa_r+0x384>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	4650      	mov	r0, sl
 8009b54:	4659      	mov	r1, fp
 8009b56:	f7f6 fe91 	bl	800087c <__aeabi_ddiv>
 8009b5a:	4682      	mov	sl, r0
 8009b5c:	468b      	mov	fp, r1
 8009b5e:	e028      	b.n	8009bb2 <_dtoa_r+0x3d2>
 8009b60:	2502      	movs	r5, #2
 8009b62:	e7f2      	b.n	8009b4a <_dtoa_r+0x36a>
 8009b64:	07f9      	lsls	r1, r7, #31
 8009b66:	d508      	bpl.n	8009b7a <_dtoa_r+0x39a>
 8009b68:	4640      	mov	r0, r8
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b70:	f7f6 fd5a 	bl	8000628 <__aeabi_dmul>
 8009b74:	3501      	adds	r5, #1
 8009b76:	4680      	mov	r8, r0
 8009b78:	4689      	mov	r9, r1
 8009b7a:	107f      	asrs	r7, r7, #1
 8009b7c:	3608      	adds	r6, #8
 8009b7e:	e7e5      	b.n	8009b4c <_dtoa_r+0x36c>
 8009b80:	f000 809b 	beq.w	8009cba <_dtoa_r+0x4da>
 8009b84:	9b00      	ldr	r3, [sp, #0]
 8009b86:	4f9d      	ldr	r7, [pc, #628]	; (8009dfc <_dtoa_r+0x61c>)
 8009b88:	425e      	negs	r6, r3
 8009b8a:	4b9b      	ldr	r3, [pc, #620]	; (8009df8 <_dtoa_r+0x618>)
 8009b8c:	f006 020f 	and.w	r2, r6, #15
 8009b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	ec51 0b19 	vmov	r0, r1, d9
 8009b9c:	f7f6 fd44 	bl	8000628 <__aeabi_dmul>
 8009ba0:	1136      	asrs	r6, r6, #4
 8009ba2:	4682      	mov	sl, r0
 8009ba4:	468b      	mov	fp, r1
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	2502      	movs	r5, #2
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	d17a      	bne.n	8009ca4 <_dtoa_r+0x4c4>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1d3      	bne.n	8009b5a <_dtoa_r+0x37a>
 8009bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 8082 	beq.w	8009cbe <_dtoa_r+0x4de>
 8009bba:	4b91      	ldr	r3, [pc, #580]	; (8009e00 <_dtoa_r+0x620>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	f7f6 ffa3 	bl	8000b0c <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d079      	beq.n	8009cbe <_dtoa_r+0x4de>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d076      	beq.n	8009cbe <_dtoa_r+0x4de>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd36      	ble.n	8009c44 <_dtoa_r+0x464>
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	1e5f      	subs	r7, r3, #1
 8009bde:	2200      	movs	r2, #0
 8009be0:	4b88      	ldr	r3, [pc, #544]	; (8009e04 <_dtoa_r+0x624>)
 8009be2:	f7f6 fd21 	bl	8000628 <__aeabi_dmul>
 8009be6:	9e02      	ldr	r6, [sp, #8]
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	3501      	adds	r5, #1
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 fcb0 	bl	8000554 <__aeabi_i2d>
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	465b      	mov	r3, fp
 8009bf8:	f7f6 fd16 	bl	8000628 <__aeabi_dmul>
 8009bfc:	4b82      	ldr	r3, [pc, #520]	; (8009e08 <_dtoa_r+0x628>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f7f6 fb5c 	bl	80002bc <__adddf3>
 8009c04:	46d0      	mov	r8, sl
 8009c06:	46d9      	mov	r9, fp
 8009c08:	4682      	mov	sl, r0
 8009c0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d158      	bne.n	8009cc4 <_dtoa_r+0x4e4>
 8009c12:	4b7e      	ldr	r3, [pc, #504]	; (8009e0c <_dtoa_r+0x62c>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 fb4d 	bl	80002b8 <__aeabi_dsub>
 8009c1e:	4652      	mov	r2, sl
 8009c20:	465b      	mov	r3, fp
 8009c22:	4680      	mov	r8, r0
 8009c24:	4689      	mov	r9, r1
 8009c26:	f7f6 ff8f 	bl	8000b48 <__aeabi_dcmpgt>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f040 8295 	bne.w	800a15a <_dtoa_r+0x97a>
 8009c30:	4652      	mov	r2, sl
 8009c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 ff67 	bl	8000b0c <__aeabi_dcmplt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f040 8289 	bne.w	800a156 <_dtoa_r+0x976>
 8009c44:	ec5b ab19 	vmov	sl, fp, d9
 8009c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f2c0 8148 	blt.w	8009ee0 <_dtoa_r+0x700>
 8009c50:	9a00      	ldr	r2, [sp, #0]
 8009c52:	2a0e      	cmp	r2, #14
 8009c54:	f300 8144 	bgt.w	8009ee0 <_dtoa_r+0x700>
 8009c58:	4b67      	ldr	r3, [pc, #412]	; (8009df8 <_dtoa_r+0x618>)
 8009c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f280 80d5 	bge.w	8009e14 <_dtoa_r+0x634>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f300 80d1 	bgt.w	8009e14 <_dtoa_r+0x634>
 8009c72:	f040 826f 	bne.w	800a154 <_dtoa_r+0x974>
 8009c76:	4b65      	ldr	r3, [pc, #404]	; (8009e0c <_dtoa_r+0x62c>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fcd3 	bl	8000628 <__aeabi_dmul>
 8009c82:	4652      	mov	r2, sl
 8009c84:	465b      	mov	r3, fp
 8009c86:	f7f6 ff55 	bl	8000b34 <__aeabi_dcmpge>
 8009c8a:	9e03      	ldr	r6, [sp, #12]
 8009c8c:	4637      	mov	r7, r6
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8245 	bne.w	800a11e <_dtoa_r+0x93e>
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	2331      	movs	r3, #49	; 0x31
 8009c98:	f805 3b01 	strb.w	r3, [r5], #1
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	e240      	b.n	800a126 <_dtoa_r+0x946>
 8009ca4:	07f2      	lsls	r2, r6, #31
 8009ca6:	d505      	bpl.n	8009cb4 <_dtoa_r+0x4d4>
 8009ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cac:	f7f6 fcbc 	bl	8000628 <__aeabi_dmul>
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	1076      	asrs	r6, r6, #1
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	e777      	b.n	8009baa <_dtoa_r+0x3ca>
 8009cba:	2502      	movs	r5, #2
 8009cbc:	e779      	b.n	8009bb2 <_dtoa_r+0x3d2>
 8009cbe:	9f00      	ldr	r7, [sp, #0]
 8009cc0:	9e03      	ldr	r6, [sp, #12]
 8009cc2:	e794      	b.n	8009bee <_dtoa_r+0x40e>
 8009cc4:	9901      	ldr	r1, [sp, #4]
 8009cc6:	4b4c      	ldr	r3, [pc, #304]	; (8009df8 <_dtoa_r+0x618>)
 8009cc8:	4431      	add	r1, r6
 8009cca:	910d      	str	r1, [sp, #52]	; 0x34
 8009ccc:	9908      	ldr	r1, [sp, #32]
 8009cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d043      	beq.n	8009d62 <_dtoa_r+0x582>
 8009cda:	494d      	ldr	r1, [pc, #308]	; (8009e10 <_dtoa_r+0x630>)
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f7f6 fdcd 	bl	800087c <__aeabi_ddiv>
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	465b      	mov	r3, fp
 8009ce6:	f7f6 fae7 	bl	80002b8 <__aeabi_dsub>
 8009cea:	9d01      	ldr	r5, [sp, #4]
 8009cec:	4682      	mov	sl, r0
 8009cee:	468b      	mov	fp, r1
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7f6 ff48 	bl	8000b88 <__aeabi_d2iz>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	f7f6 fc2b 	bl	8000554 <__aeabi_i2d>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	f7f6 fad7 	bl	80002b8 <__aeabi_dsub>
 8009d0a:	3630      	adds	r6, #48	; 0x30
 8009d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	4680      	mov	r8, r0
 8009d16:	4689      	mov	r9, r1
 8009d18:	f7f6 fef8 	bl	8000b0c <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d163      	bne.n	8009de8 <_dtoa_r+0x608>
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	4936      	ldr	r1, [pc, #216]	; (8009e00 <_dtoa_r+0x620>)
 8009d26:	2000      	movs	r0, #0
 8009d28:	f7f6 fac6 	bl	80002b8 <__aeabi_dsub>
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	465b      	mov	r3, fp
 8009d30:	f7f6 feec 	bl	8000b0c <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 80b5 	bne.w	8009ea4 <_dtoa_r+0x6c4>
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	d081      	beq.n	8009c44 <_dtoa_r+0x464>
 8009d40:	4b30      	ldr	r3, [pc, #192]	; (8009e04 <_dtoa_r+0x624>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	4650      	mov	r0, sl
 8009d46:	4659      	mov	r1, fp
 8009d48:	f7f6 fc6e 	bl	8000628 <__aeabi_dmul>
 8009d4c:	4b2d      	ldr	r3, [pc, #180]	; (8009e04 <_dtoa_r+0x624>)
 8009d4e:	4682      	mov	sl, r0
 8009d50:	468b      	mov	fp, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	2200      	movs	r2, #0
 8009d58:	f7f6 fc66 	bl	8000628 <__aeabi_dmul>
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4689      	mov	r9, r1
 8009d60:	e7c6      	b.n	8009cf0 <_dtoa_r+0x510>
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fc5f 	bl	8000628 <__aeabi_dmul>
 8009d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6c:	9d01      	ldr	r5, [sp, #4]
 8009d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d70:	4682      	mov	sl, r0
 8009d72:	468b      	mov	fp, r1
 8009d74:	4649      	mov	r1, r9
 8009d76:	4640      	mov	r0, r8
 8009d78:	f7f6 ff06 	bl	8000b88 <__aeabi_d2iz>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	f7f6 fbe9 	bl	8000554 <__aeabi_i2d>
 8009d82:	3630      	adds	r6, #48	; 0x30
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fa94 	bl	80002b8 <__aeabi_dsub>
 8009d90:	f805 6b01 	strb.w	r6, [r5], #1
 8009d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d96:	429d      	cmp	r5, r3
 8009d98:	4680      	mov	r8, r0
 8009d9a:	4689      	mov	r9, r1
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	d124      	bne.n	8009dec <_dtoa_r+0x60c>
 8009da2:	4b1b      	ldr	r3, [pc, #108]	; (8009e10 <_dtoa_r+0x630>)
 8009da4:	4650      	mov	r0, sl
 8009da6:	4659      	mov	r1, fp
 8009da8:	f7f6 fa88 	bl	80002bc <__adddf3>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4640      	mov	r0, r8
 8009db2:	4649      	mov	r1, r9
 8009db4:	f7f6 fec8 	bl	8000b48 <__aeabi_dcmpgt>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d173      	bne.n	8009ea4 <_dtoa_r+0x6c4>
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	465b      	mov	r3, fp
 8009dc0:	4913      	ldr	r1, [pc, #76]	; (8009e10 <_dtoa_r+0x630>)
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f7f6 fa78 	bl	80002b8 <__aeabi_dsub>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f7f6 fe9c 	bl	8000b0c <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f af35 	beq.w	8009c44 <_dtoa_r+0x464>
 8009dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ddc:	1e6b      	subs	r3, r5, #1
 8009dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d0f8      	beq.n	8009dda <_dtoa_r+0x5fa>
 8009de8:	9700      	str	r7, [sp, #0]
 8009dea:	e049      	b.n	8009e80 <_dtoa_r+0x6a0>
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <_dtoa_r+0x624>)
 8009dee:	f7f6 fc1b 	bl	8000628 <__aeabi_dmul>
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	e7bd      	b.n	8009d74 <_dtoa_r+0x594>
 8009df8:	0800eb78 	.word	0x0800eb78
 8009dfc:	0800eb50 	.word	0x0800eb50
 8009e00:	3ff00000 	.word	0x3ff00000
 8009e04:	40240000 	.word	0x40240000
 8009e08:	401c0000 	.word	0x401c0000
 8009e0c:	40140000 	.word	0x40140000
 8009e10:	3fe00000 	.word	0x3fe00000
 8009e14:	9d01      	ldr	r5, [sp, #4]
 8009e16:	4656      	mov	r6, sl
 8009e18:	465f      	mov	r7, fp
 8009e1a:	4642      	mov	r2, r8
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fd2b 	bl	800087c <__aeabi_ddiv>
 8009e26:	f7f6 feaf 	bl	8000b88 <__aeabi_d2iz>
 8009e2a:	4682      	mov	sl, r0
 8009e2c:	f7f6 fb92 	bl	8000554 <__aeabi_i2d>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fbf8 	bl	8000628 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e44:	f7f6 fa38 	bl	80002b8 <__aeabi_dsub>
 8009e48:	f805 6b01 	strb.w	r6, [r5], #1
 8009e4c:	9e01      	ldr	r6, [sp, #4]
 8009e4e:	9f03      	ldr	r7, [sp, #12]
 8009e50:	1bae      	subs	r6, r5, r6
 8009e52:	42b7      	cmp	r7, r6
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	d135      	bne.n	8009ec6 <_dtoa_r+0x6e6>
 8009e5a:	f7f6 fa2f 	bl	80002bc <__adddf3>
 8009e5e:	4642      	mov	r2, r8
 8009e60:	464b      	mov	r3, r9
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	f7f6 fe6f 	bl	8000b48 <__aeabi_dcmpgt>
 8009e6a:	b9d0      	cbnz	r0, 8009ea2 <_dtoa_r+0x6c2>
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fe40 	bl	8000af8 <__aeabi_dcmpeq>
 8009e78:	b110      	cbz	r0, 8009e80 <_dtoa_r+0x6a0>
 8009e7a:	f01a 0f01 	tst.w	sl, #1
 8009e7e:	d110      	bne.n	8009ea2 <_dtoa_r+0x6c2>
 8009e80:	4620      	mov	r0, r4
 8009e82:	ee18 1a10 	vmov	r1, s16
 8009e86:	f000 fb09 	bl	800a49c <_Bfree>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	9800      	ldr	r0, [sp, #0]
 8009e8e:	702b      	strb	r3, [r5, #0]
 8009e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e92:	3001      	adds	r0, #1
 8009e94:	6018      	str	r0, [r3, #0]
 8009e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f43f acf1 	beq.w	8009880 <_dtoa_r+0xa0>
 8009e9e:	601d      	str	r5, [r3, #0]
 8009ea0:	e4ee      	b.n	8009880 <_dtoa_r+0xa0>
 8009ea2:	9f00      	ldr	r7, [sp, #0]
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eac:	2a39      	cmp	r2, #57	; 0x39
 8009eae:	d106      	bne.n	8009ebe <_dtoa_r+0x6de>
 8009eb0:	9a01      	ldr	r2, [sp, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d1f7      	bne.n	8009ea6 <_dtoa_r+0x6c6>
 8009eb6:	9901      	ldr	r1, [sp, #4]
 8009eb8:	2230      	movs	r2, #48	; 0x30
 8009eba:	3701      	adds	r7, #1
 8009ebc:	700a      	strb	r2, [r1, #0]
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	e790      	b.n	8009de8 <_dtoa_r+0x608>
 8009ec6:	4ba6      	ldr	r3, [pc, #664]	; (800a160 <_dtoa_r+0x980>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7f6 fbad 	bl	8000628 <__aeabi_dmul>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	f7f6 fe0f 	bl	8000af8 <__aeabi_dcmpeq>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d09d      	beq.n	8009e1a <_dtoa_r+0x63a>
 8009ede:	e7cf      	b.n	8009e80 <_dtoa_r+0x6a0>
 8009ee0:	9a08      	ldr	r2, [sp, #32]
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	f000 80d7 	beq.w	800a096 <_dtoa_r+0x8b6>
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	2a01      	cmp	r2, #1
 8009eec:	f300 80ba 	bgt.w	800a064 <_dtoa_r+0x884>
 8009ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	f000 80b2 	beq.w	800a05c <_dtoa_r+0x87c>
 8009ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009efc:	9e07      	ldr	r6, [sp, #28]
 8009efe:	9d04      	ldr	r5, [sp, #16]
 8009f00:	9a04      	ldr	r2, [sp, #16]
 8009f02:	441a      	add	r2, r3
 8009f04:	9204      	str	r2, [sp, #16]
 8009f06:	9a05      	ldr	r2, [sp, #20]
 8009f08:	2101      	movs	r1, #1
 8009f0a:	441a      	add	r2, r3
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	9205      	str	r2, [sp, #20]
 8009f10:	f000 fb7c 	bl	800a60c <__i2b>
 8009f14:	4607      	mov	r7, r0
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	dd0c      	ble.n	8009f34 <_dtoa_r+0x754>
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dd09      	ble.n	8009f34 <_dtoa_r+0x754>
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	9a04      	ldr	r2, [sp, #16]
 8009f24:	bfa8      	it	ge
 8009f26:	462b      	movge	r3, r5
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	9204      	str	r2, [sp, #16]
 8009f2c:	9a05      	ldr	r2, [sp, #20]
 8009f2e:	1aed      	subs	r5, r5, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	b31b      	cbz	r3, 8009f80 <_dtoa_r+0x7a0>
 8009f38:	9b08      	ldr	r3, [sp, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80af 	beq.w	800a09e <_dtoa_r+0x8be>
 8009f40:	2e00      	cmp	r6, #0
 8009f42:	dd13      	ble.n	8009f6c <_dtoa_r+0x78c>
 8009f44:	4639      	mov	r1, r7
 8009f46:	4632      	mov	r2, r6
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fc1f 	bl	800a78c <__pow5mult>
 8009f4e:	ee18 2a10 	vmov	r2, s16
 8009f52:	4601      	mov	r1, r0
 8009f54:	4607      	mov	r7, r0
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fb6e 	bl	800a638 <__multiply>
 8009f5c:	ee18 1a10 	vmov	r1, s16
 8009f60:	4680      	mov	r8, r0
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fa9a 	bl	800a49c <_Bfree>
 8009f68:	ee08 8a10 	vmov	s16, r8
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	1b9a      	subs	r2, r3, r6
 8009f70:	d006      	beq.n	8009f80 <_dtoa_r+0x7a0>
 8009f72:	ee18 1a10 	vmov	r1, s16
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fc08 	bl	800a78c <__pow5mult>
 8009f7c:	ee08 0a10 	vmov	s16, r0
 8009f80:	2101      	movs	r1, #1
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fb42 	bl	800a60c <__i2b>
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	f340 8088 	ble.w	800a0a2 <_dtoa_r+0x8c2>
 8009f92:	461a      	mov	r2, r3
 8009f94:	4601      	mov	r1, r0
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fbf8 	bl	800a78c <__pow5mult>
 8009f9c:	9b06      	ldr	r3, [sp, #24]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	f340 8081 	ble.w	800a0a8 <_dtoa_r+0x8c8>
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	6933      	ldr	r3, [r6, #16]
 8009fac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fb0:	6918      	ldr	r0, [r3, #16]
 8009fb2:	f000 fadb 	bl	800a56c <__hi0bits>
 8009fb6:	f1c0 0020 	rsb	r0, r0, #32
 8009fba:	9b05      	ldr	r3, [sp, #20]
 8009fbc:	4418      	add	r0, r3
 8009fbe:	f010 001f 	ands.w	r0, r0, #31
 8009fc2:	f000 8092 	beq.w	800a0ea <_dtoa_r+0x90a>
 8009fc6:	f1c0 0320 	rsb	r3, r0, #32
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	f340 808a 	ble.w	800a0e4 <_dtoa_r+0x904>
 8009fd0:	f1c0 001c 	rsb	r0, r0, #28
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4403      	add	r3, r0
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	4403      	add	r3, r0
 8009fde:	4405      	add	r5, r0
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd07      	ble.n	8009ff8 <_dtoa_r+0x818>
 8009fe8:	ee18 1a10 	vmov	r1, s16
 8009fec:	461a      	mov	r2, r3
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fc26 	bl	800a840 <__lshift>
 8009ff4:	ee08 0a10 	vmov	s16, r0
 8009ff8:	9b05      	ldr	r3, [sp, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dd05      	ble.n	800a00a <_dtoa_r+0x82a>
 8009ffe:	4631      	mov	r1, r6
 800a000:	461a      	mov	r2, r3
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fc1c 	bl	800a840 <__lshift>
 800a008:	4606      	mov	r6, r0
 800a00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d06e      	beq.n	800a0ee <_dtoa_r+0x90e>
 800a010:	ee18 0a10 	vmov	r0, s16
 800a014:	4631      	mov	r1, r6
 800a016:	f000 fc83 	bl	800a920 <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	da67      	bge.n	800a0ee <_dtoa_r+0x90e>
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	ee18 1a10 	vmov	r1, s16
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	220a      	movs	r2, #10
 800a02a:	2300      	movs	r3, #0
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fa57 	bl	800a4e0 <__multadd>
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	ee08 0a10 	vmov	s16, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 81b1 	beq.w	800a3a0 <_dtoa_r+0xbc0>
 800a03e:	2300      	movs	r3, #0
 800a040:	4639      	mov	r1, r7
 800a042:	220a      	movs	r2, #10
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fa4b 	bl	800a4e0 <__multadd>
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	4607      	mov	r7, r0
 800a050:	f300 808e 	bgt.w	800a170 <_dtoa_r+0x990>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	2b02      	cmp	r3, #2
 800a058:	dc51      	bgt.n	800a0fe <_dtoa_r+0x91e>
 800a05a:	e089      	b.n	800a170 <_dtoa_r+0x990>
 800a05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a05e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a062:	e74b      	b.n	8009efc <_dtoa_r+0x71c>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1e5e      	subs	r6, r3, #1
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	42b3      	cmp	r3, r6
 800a06c:	bfbf      	itttt	lt
 800a06e:	9b07      	ldrlt	r3, [sp, #28]
 800a070:	9607      	strlt	r6, [sp, #28]
 800a072:	1af2      	sublt	r2, r6, r3
 800a074:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a076:	bfb6      	itet	lt
 800a078:	189b      	addlt	r3, r3, r2
 800a07a:	1b9e      	subge	r6, r3, r6
 800a07c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	bfb8      	it	lt
 800a082:	2600      	movlt	r6, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfb7      	itett	lt
 800a088:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a08c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a090:	1a9d      	sublt	r5, r3, r2
 800a092:	2300      	movlt	r3, #0
 800a094:	e734      	b.n	8009f00 <_dtoa_r+0x720>
 800a096:	9e07      	ldr	r6, [sp, #28]
 800a098:	9d04      	ldr	r5, [sp, #16]
 800a09a:	9f08      	ldr	r7, [sp, #32]
 800a09c:	e73b      	b.n	8009f16 <_dtoa_r+0x736>
 800a09e:	9a07      	ldr	r2, [sp, #28]
 800a0a0:	e767      	b.n	8009f72 <_dtoa_r+0x792>
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	dc18      	bgt.n	800a0da <_dtoa_r+0x8fa>
 800a0a8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ac:	d115      	bne.n	800a0da <_dtoa_r+0x8fa>
 800a0ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0b2:	b993      	cbnz	r3, 800a0da <_dtoa_r+0x8fa>
 800a0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0b8:	0d1b      	lsrs	r3, r3, #20
 800a0ba:	051b      	lsls	r3, r3, #20
 800a0bc:	b183      	cbz	r3, 800a0e0 <_dtoa_r+0x900>
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	f04f 0801 	mov.w	r8, #1
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f af6a 	bne.w	8009faa <_dtoa_r+0x7ca>
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e76f      	b.n	8009fba <_dtoa_r+0x7da>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	e7f6      	b.n	800a0ce <_dtoa_r+0x8ee>
 800a0e0:	4698      	mov	r8, r3
 800a0e2:	e7f4      	b.n	800a0ce <_dtoa_r+0x8ee>
 800a0e4:	f43f af7d 	beq.w	8009fe2 <_dtoa_r+0x802>
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	301c      	adds	r0, #28
 800a0ec:	e772      	b.n	8009fd4 <_dtoa_r+0x7f4>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dc37      	bgt.n	800a164 <_dtoa_r+0x984>
 800a0f4:	9b06      	ldr	r3, [sp, #24]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	dd34      	ble.n	800a164 <_dtoa_r+0x984>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	b96b      	cbnz	r3, 800a11e <_dtoa_r+0x93e>
 800a102:	4631      	mov	r1, r6
 800a104:	2205      	movs	r2, #5
 800a106:	4620      	mov	r0, r4
 800a108:	f000 f9ea 	bl	800a4e0 <__multadd>
 800a10c:	4601      	mov	r1, r0
 800a10e:	4606      	mov	r6, r0
 800a110:	ee18 0a10 	vmov	r0, s16
 800a114:	f000 fc04 	bl	800a920 <__mcmp>
 800a118:	2800      	cmp	r0, #0
 800a11a:	f73f adbb 	bgt.w	8009c94 <_dtoa_r+0x4b4>
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	9d01      	ldr	r5, [sp, #4]
 800a122:	43db      	mvns	r3, r3
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	4631      	mov	r1, r6
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 f9b5 	bl	800a49c <_Bfree>
 800a132:	2f00      	cmp	r7, #0
 800a134:	f43f aea4 	beq.w	8009e80 <_dtoa_r+0x6a0>
 800a138:	f1b8 0f00 	cmp.w	r8, #0
 800a13c:	d005      	beq.n	800a14a <_dtoa_r+0x96a>
 800a13e:	45b8      	cmp	r8, r7
 800a140:	d003      	beq.n	800a14a <_dtoa_r+0x96a>
 800a142:	4641      	mov	r1, r8
 800a144:	4620      	mov	r0, r4
 800a146:	f000 f9a9 	bl	800a49c <_Bfree>
 800a14a:	4639      	mov	r1, r7
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f9a5 	bl	800a49c <_Bfree>
 800a152:	e695      	b.n	8009e80 <_dtoa_r+0x6a0>
 800a154:	2600      	movs	r6, #0
 800a156:	4637      	mov	r7, r6
 800a158:	e7e1      	b.n	800a11e <_dtoa_r+0x93e>
 800a15a:	9700      	str	r7, [sp, #0]
 800a15c:	4637      	mov	r7, r6
 800a15e:	e599      	b.n	8009c94 <_dtoa_r+0x4b4>
 800a160:	40240000 	.word	0x40240000
 800a164:	9b08      	ldr	r3, [sp, #32]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 80ca 	beq.w	800a300 <_dtoa_r+0xb20>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	2d00      	cmp	r5, #0
 800a172:	dd05      	ble.n	800a180 <_dtoa_r+0x9a0>
 800a174:	4639      	mov	r1, r7
 800a176:	462a      	mov	r2, r5
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fb61 	bl	800a840 <__lshift>
 800a17e:	4607      	mov	r7, r0
 800a180:	f1b8 0f00 	cmp.w	r8, #0
 800a184:	d05b      	beq.n	800a23e <_dtoa_r+0xa5e>
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 f947 	bl	800a41c <_Balloc>
 800a18e:	4605      	mov	r5, r0
 800a190:	b928      	cbnz	r0, 800a19e <_dtoa_r+0x9be>
 800a192:	4b87      	ldr	r3, [pc, #540]	; (800a3b0 <_dtoa_r+0xbd0>)
 800a194:	4602      	mov	r2, r0
 800a196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a19a:	f7ff bb3b 	b.w	8009814 <_dtoa_r+0x34>
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	3202      	adds	r2, #2
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	f107 010c 	add.w	r1, r7, #12
 800a1a8:	300c      	adds	r0, #12
 800a1aa:	f000 f91d 	bl	800a3e8 <memcpy>
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fb44 	bl	800a840 <__lshift>
 800a1b8:	9b01      	ldr	r3, [sp, #4]
 800a1ba:	f103 0901 	add.w	r9, r3, #1
 800a1be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	9305      	str	r3, [sp, #20]
 800a1c6:	f00a 0301 	and.w	r3, sl, #1
 800a1ca:	46b8      	mov	r8, r7
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	ee18 0a10 	vmov	r0, s16
 800a1d6:	f7ff fa75 	bl	80096c4 <quorem>
 800a1da:	4641      	mov	r1, r8
 800a1dc:	9002      	str	r0, [sp, #8]
 800a1de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1e2:	ee18 0a10 	vmov	r0, s16
 800a1e6:	f000 fb9b 	bl	800a920 <__mcmp>
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	9003      	str	r0, [sp, #12]
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fbb1 	bl	800a958 <__mdiff>
 800a1f6:	68c2      	ldr	r2, [r0, #12]
 800a1f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	bb02      	cbnz	r2, 800a242 <_dtoa_r+0xa62>
 800a200:	4601      	mov	r1, r0
 800a202:	ee18 0a10 	vmov	r0, s16
 800a206:	f000 fb8b 	bl	800a920 <__mcmp>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	9207      	str	r2, [sp, #28]
 800a212:	f000 f943 	bl	800a49c <_Bfree>
 800a216:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a21a:	ea43 0102 	orr.w	r1, r3, r2
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	430b      	orrs	r3, r1
 800a222:	464d      	mov	r5, r9
 800a224:	d10f      	bne.n	800a246 <_dtoa_r+0xa66>
 800a226:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a22a:	d02a      	beq.n	800a282 <_dtoa_r+0xaa2>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dd02      	ble.n	800a238 <_dtoa_r+0xa58>
 800a232:	9b02      	ldr	r3, [sp, #8]
 800a234:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a238:	f88b a000 	strb.w	sl, [fp]
 800a23c:	e775      	b.n	800a12a <_dtoa_r+0x94a>
 800a23e:	4638      	mov	r0, r7
 800a240:	e7ba      	b.n	800a1b8 <_dtoa_r+0x9d8>
 800a242:	2201      	movs	r2, #1
 800a244:	e7e2      	b.n	800a20c <_dtoa_r+0xa2c>
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	db04      	blt.n	800a256 <_dtoa_r+0xa76>
 800a24c:	9906      	ldr	r1, [sp, #24]
 800a24e:	430b      	orrs	r3, r1
 800a250:	9904      	ldr	r1, [sp, #16]
 800a252:	430b      	orrs	r3, r1
 800a254:	d122      	bne.n	800a29c <_dtoa_r+0xabc>
 800a256:	2a00      	cmp	r2, #0
 800a258:	ddee      	ble.n	800a238 <_dtoa_r+0xa58>
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	2201      	movs	r2, #1
 800a260:	4620      	mov	r0, r4
 800a262:	f000 faed 	bl	800a840 <__lshift>
 800a266:	4631      	mov	r1, r6
 800a268:	ee08 0a10 	vmov	s16, r0
 800a26c:	f000 fb58 	bl	800a920 <__mcmp>
 800a270:	2800      	cmp	r0, #0
 800a272:	dc03      	bgt.n	800a27c <_dtoa_r+0xa9c>
 800a274:	d1e0      	bne.n	800a238 <_dtoa_r+0xa58>
 800a276:	f01a 0f01 	tst.w	sl, #1
 800a27a:	d0dd      	beq.n	800a238 <_dtoa_r+0xa58>
 800a27c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a280:	d1d7      	bne.n	800a232 <_dtoa_r+0xa52>
 800a282:	2339      	movs	r3, #57	; 0x39
 800a284:	f88b 3000 	strb.w	r3, [fp]
 800a288:	462b      	mov	r3, r5
 800a28a:	461d      	mov	r5, r3
 800a28c:	3b01      	subs	r3, #1
 800a28e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a292:	2a39      	cmp	r2, #57	; 0x39
 800a294:	d071      	beq.n	800a37a <_dtoa_r+0xb9a>
 800a296:	3201      	adds	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e746      	b.n	800a12a <_dtoa_r+0x94a>
 800a29c:	2a00      	cmp	r2, #0
 800a29e:	dd07      	ble.n	800a2b0 <_dtoa_r+0xad0>
 800a2a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2a4:	d0ed      	beq.n	800a282 <_dtoa_r+0xaa2>
 800a2a6:	f10a 0301 	add.w	r3, sl, #1
 800a2aa:	f88b 3000 	strb.w	r3, [fp]
 800a2ae:	e73c      	b.n	800a12a <_dtoa_r+0x94a>
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2b6:	4599      	cmp	r9, r3
 800a2b8:	d047      	beq.n	800a34a <_dtoa_r+0xb6a>
 800a2ba:	ee18 1a10 	vmov	r1, s16
 800a2be:	2300      	movs	r3, #0
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f90c 	bl	800a4e0 <__multadd>
 800a2c8:	45b8      	cmp	r8, r7
 800a2ca:	ee08 0a10 	vmov	s16, r0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	f04f 020a 	mov.w	r2, #10
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	4620      	mov	r0, r4
 800a2da:	d106      	bne.n	800a2ea <_dtoa_r+0xb0a>
 800a2dc:	f000 f900 	bl	800a4e0 <__multadd>
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	f109 0901 	add.w	r9, r9, #1
 800a2e8:	e772      	b.n	800a1d0 <_dtoa_r+0x9f0>
 800a2ea:	f000 f8f9 	bl	800a4e0 <__multadd>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f000 f8f2 	bl	800a4e0 <__multadd>
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	e7f1      	b.n	800a2e4 <_dtoa_r+0xb04>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	9d01      	ldr	r5, [sp, #4]
 800a306:	ee18 0a10 	vmov	r0, s16
 800a30a:	4631      	mov	r1, r6
 800a30c:	f7ff f9da 	bl	80096c4 <quorem>
 800a310:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	f805 ab01 	strb.w	sl, [r5], #1
 800a31a:	1aea      	subs	r2, r5, r3
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	4293      	cmp	r3, r2
 800a320:	dd09      	ble.n	800a336 <_dtoa_r+0xb56>
 800a322:	ee18 1a10 	vmov	r1, s16
 800a326:	2300      	movs	r3, #0
 800a328:	220a      	movs	r2, #10
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 f8d8 	bl	800a4e0 <__multadd>
 800a330:	ee08 0a10 	vmov	s16, r0
 800a334:	e7e7      	b.n	800a306 <_dtoa_r+0xb26>
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfc8      	it	gt
 800a33c:	461d      	movgt	r5, r3
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	bfd8      	it	le
 800a342:	2501      	movle	r5, #1
 800a344:	441d      	add	r5, r3
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	ee18 1a10 	vmov	r1, s16
 800a34e:	2201      	movs	r2, #1
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fa75 	bl	800a840 <__lshift>
 800a356:	4631      	mov	r1, r6
 800a358:	ee08 0a10 	vmov	s16, r0
 800a35c:	f000 fae0 	bl	800a920 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	dc91      	bgt.n	800a288 <_dtoa_r+0xaa8>
 800a364:	d102      	bne.n	800a36c <_dtoa_r+0xb8c>
 800a366:	f01a 0f01 	tst.w	sl, #1
 800a36a:	d18d      	bne.n	800a288 <_dtoa_r+0xaa8>
 800a36c:	462b      	mov	r3, r5
 800a36e:	461d      	mov	r5, r3
 800a370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a374:	2a30      	cmp	r2, #48	; 0x30
 800a376:	d0fa      	beq.n	800a36e <_dtoa_r+0xb8e>
 800a378:	e6d7      	b.n	800a12a <_dtoa_r+0x94a>
 800a37a:	9a01      	ldr	r2, [sp, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d184      	bne.n	800a28a <_dtoa_r+0xaaa>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	2331      	movs	r3, #49	; 0x31
 800a388:	7013      	strb	r3, [r2, #0]
 800a38a:	e6ce      	b.n	800a12a <_dtoa_r+0x94a>
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <_dtoa_r+0xbd4>)
 800a38e:	f7ff ba95 	b.w	80098bc <_dtoa_r+0xdc>
 800a392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a394:	2b00      	cmp	r3, #0
 800a396:	f47f aa6e 	bne.w	8009876 <_dtoa_r+0x96>
 800a39a:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <_dtoa_r+0xbd8>)
 800a39c:	f7ff ba8e 	b.w	80098bc <_dtoa_r+0xdc>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dcae      	bgt.n	800a304 <_dtoa_r+0xb24>
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	f73f aea8 	bgt.w	800a0fe <_dtoa_r+0x91e>
 800a3ae:	e7a9      	b.n	800a304 <_dtoa_r+0xb24>
 800a3b0:	0800eadd 	.word	0x0800eadd
 800a3b4:	0800ec61 	.word	0x0800ec61
 800a3b8:	0800ea5e 	.word	0x0800ea5e

0800a3bc <_localeconv_r>:
 800a3bc:	4800      	ldr	r0, [pc, #0]	; (800a3c0 <_localeconv_r+0x4>)
 800a3be:	4770      	bx	lr
 800a3c0:	20000168 	.word	0x20000168

0800a3c4 <_lseek_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_lseek_r+0x20>)
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	602a      	str	r2, [r5, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f7f8 fddc 	bl	8002f90 <_lseek>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_lseek_r+0x1e>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_lseek_r+0x1e>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	20011d44 	.word	0x20011d44

0800a3e8 <memcpy>:
 800a3e8:	440a      	add	r2, r1
 800a3ea:	4291      	cmp	r1, r2
 800a3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f0:	d100      	bne.n	800a3f4 <memcpy+0xc>
 800a3f2:	4770      	bx	lr
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3fe:	4291      	cmp	r1, r2
 800a400:	d1f9      	bne.n	800a3f6 <memcpy+0xe>
 800a402:	bd10      	pop	{r4, pc}

0800a404 <__malloc_lock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_lock+0x8>)
 800a406:	f001 bb87 	b.w	800bb18 <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	20011d48 	.word	0x20011d48

0800a410 <__malloc_unlock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_unlock+0x8>)
 800a412:	f001 bb82 	b.w	800bb1a <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	20011d48 	.word	0x20011d48

0800a41c <_Balloc>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	b976      	cbnz	r6, 800a444 <_Balloc+0x28>
 800a426:	2010      	movs	r0, #16
 800a428:	f7fe fb2e 	bl	8008a88 <malloc>
 800a42c:	4602      	mov	r2, r0
 800a42e:	6260      	str	r0, [r4, #36]	; 0x24
 800a430:	b920      	cbnz	r0, 800a43c <_Balloc+0x20>
 800a432:	4b18      	ldr	r3, [pc, #96]	; (800a494 <_Balloc+0x78>)
 800a434:	4818      	ldr	r0, [pc, #96]	; (800a498 <_Balloc+0x7c>)
 800a436:	2166      	movs	r1, #102	; 0x66
 800a438:	f001 f986 	bl	800b748 <__assert_func>
 800a43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a440:	6006      	str	r6, [r0, #0]
 800a442:	60c6      	str	r6, [r0, #12]
 800a444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a446:	68f3      	ldr	r3, [r6, #12]
 800a448:	b183      	cbz	r3, 800a46c <_Balloc+0x50>
 800a44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a452:	b9b8      	cbnz	r0, 800a484 <_Balloc+0x68>
 800a454:	2101      	movs	r1, #1
 800a456:	fa01 f605 	lsl.w	r6, r1, r5
 800a45a:	1d72      	adds	r2, r6, #5
 800a45c:	0092      	lsls	r2, r2, #2
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fb60 	bl	800ab24 <_calloc_r>
 800a464:	b160      	cbz	r0, 800a480 <_Balloc+0x64>
 800a466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a46a:	e00e      	b.n	800a48a <_Balloc+0x6e>
 800a46c:	2221      	movs	r2, #33	; 0x21
 800a46e:	2104      	movs	r1, #4
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fb57 	bl	800ab24 <_calloc_r>
 800a476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a478:	60f0      	str	r0, [r6, #12]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e4      	bne.n	800a44a <_Balloc+0x2e>
 800a480:	2000      	movs	r0, #0
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	6802      	ldr	r2, [r0, #0]
 800a486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a48a:	2300      	movs	r3, #0
 800a48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a490:	e7f7      	b.n	800a482 <_Balloc+0x66>
 800a492:	bf00      	nop
 800a494:	0800ea6b 	.word	0x0800ea6b
 800a498:	0800eaee 	.word	0x0800eaee

0800a49c <_Bfree>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	b976      	cbnz	r6, 800a4c4 <_Bfree+0x28>
 800a4a6:	2010      	movs	r0, #16
 800a4a8:	f7fe faee 	bl	8008a88 <malloc>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a4b0:	b920      	cbnz	r0, 800a4bc <_Bfree+0x20>
 800a4b2:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <_Bfree+0x3c>)
 800a4b4:	4809      	ldr	r0, [pc, #36]	; (800a4dc <_Bfree+0x40>)
 800a4b6:	218a      	movs	r1, #138	; 0x8a
 800a4b8:	f001 f946 	bl	800b748 <__assert_func>
 800a4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c0:	6006      	str	r6, [r0, #0]
 800a4c2:	60c6      	str	r6, [r0, #12]
 800a4c4:	b13c      	cbz	r4, 800a4d6 <_Bfree+0x3a>
 800a4c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4c8:	6862      	ldr	r2, [r4, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4d0:	6021      	str	r1, [r4, #0]
 800a4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	0800ea6b 	.word	0x0800ea6b
 800a4dc:	0800eaee 	.word	0x0800eaee

0800a4e0 <__multadd>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	690d      	ldr	r5, [r1, #16]
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	461e      	mov	r6, r3
 800a4ec:	f101 0c14 	add.w	ip, r1, #20
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4fc:	0c1e      	lsrs	r6, r3, #16
 800a4fe:	0c0b      	lsrs	r3, r1, #16
 800a500:	fb02 3306 	mla	r3, r2, r6, r3
 800a504:	b289      	uxth	r1, r1
 800a506:	3001      	adds	r0, #1
 800a508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a50c:	4285      	cmp	r5, r0
 800a50e:	f84c 1b04 	str.w	r1, [ip], #4
 800a512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a516:	dcec      	bgt.n	800a4f2 <__multadd+0x12>
 800a518:	b30e      	cbz	r6, 800a55e <__multadd+0x7e>
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	dc19      	bgt.n	800a554 <__multadd+0x74>
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	4638      	mov	r0, r7
 800a524:	3101      	adds	r1, #1
 800a526:	f7ff ff79 	bl	800a41c <_Balloc>
 800a52a:	4680      	mov	r8, r0
 800a52c:	b928      	cbnz	r0, 800a53a <__multadd+0x5a>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <__multadd+0x84>)
 800a532:	480d      	ldr	r0, [pc, #52]	; (800a568 <__multadd+0x88>)
 800a534:	21b5      	movs	r1, #181	; 0xb5
 800a536:	f001 f907 	bl	800b748 <__assert_func>
 800a53a:	6922      	ldr	r2, [r4, #16]
 800a53c:	3202      	adds	r2, #2
 800a53e:	f104 010c 	add.w	r1, r4, #12
 800a542:	0092      	lsls	r2, r2, #2
 800a544:	300c      	adds	r0, #12
 800a546:	f7ff ff4f 	bl	800a3e8 <memcpy>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff ffa5 	bl	800a49c <_Bfree>
 800a552:	4644      	mov	r4, r8
 800a554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a558:	3501      	adds	r5, #1
 800a55a:	615e      	str	r6, [r3, #20]
 800a55c:	6125      	str	r5, [r4, #16]
 800a55e:	4620      	mov	r0, r4
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	0800eadd 	.word	0x0800eadd
 800a568:	0800eaee 	.word	0x0800eaee

0800a56c <__hi0bits>:
 800a56c:	0c03      	lsrs	r3, r0, #16
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	b9d3      	cbnz	r3, 800a5a8 <__hi0bits+0x3c>
 800a572:	0400      	lsls	r0, r0, #16
 800a574:	2310      	movs	r3, #16
 800a576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a57a:	bf04      	itt	eq
 800a57c:	0200      	lsleq	r0, r0, #8
 800a57e:	3308      	addeq	r3, #8
 800a580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a584:	bf04      	itt	eq
 800a586:	0100      	lsleq	r0, r0, #4
 800a588:	3304      	addeq	r3, #4
 800a58a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a58e:	bf04      	itt	eq
 800a590:	0080      	lsleq	r0, r0, #2
 800a592:	3302      	addeq	r3, #2
 800a594:	2800      	cmp	r0, #0
 800a596:	db05      	blt.n	800a5a4 <__hi0bits+0x38>
 800a598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a59c:	f103 0301 	add.w	r3, r3, #1
 800a5a0:	bf08      	it	eq
 800a5a2:	2320      	moveq	r3, #32
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	4770      	bx	lr
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e7e4      	b.n	800a576 <__hi0bits+0xa>

0800a5ac <__lo0bits>:
 800a5ac:	6803      	ldr	r3, [r0, #0]
 800a5ae:	f013 0207 	ands.w	r2, r3, #7
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	d00b      	beq.n	800a5ce <__lo0bits+0x22>
 800a5b6:	07da      	lsls	r2, r3, #31
 800a5b8:	d423      	bmi.n	800a602 <__lo0bits+0x56>
 800a5ba:	0798      	lsls	r0, r3, #30
 800a5bc:	bf49      	itett	mi
 800a5be:	085b      	lsrmi	r3, r3, #1
 800a5c0:	089b      	lsrpl	r3, r3, #2
 800a5c2:	2001      	movmi	r0, #1
 800a5c4:	600b      	strmi	r3, [r1, #0]
 800a5c6:	bf5c      	itt	pl
 800a5c8:	600b      	strpl	r3, [r1, #0]
 800a5ca:	2002      	movpl	r0, #2
 800a5cc:	4770      	bx	lr
 800a5ce:	b298      	uxth	r0, r3
 800a5d0:	b9a8      	cbnz	r0, 800a5fe <__lo0bits+0x52>
 800a5d2:	0c1b      	lsrs	r3, r3, #16
 800a5d4:	2010      	movs	r0, #16
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	b90a      	cbnz	r2, 800a5de <__lo0bits+0x32>
 800a5da:	3008      	adds	r0, #8
 800a5dc:	0a1b      	lsrs	r3, r3, #8
 800a5de:	071a      	lsls	r2, r3, #28
 800a5e0:	bf04      	itt	eq
 800a5e2:	091b      	lsreq	r3, r3, #4
 800a5e4:	3004      	addeq	r0, #4
 800a5e6:	079a      	lsls	r2, r3, #30
 800a5e8:	bf04      	itt	eq
 800a5ea:	089b      	lsreq	r3, r3, #2
 800a5ec:	3002      	addeq	r0, #2
 800a5ee:	07da      	lsls	r2, r3, #31
 800a5f0:	d403      	bmi.n	800a5fa <__lo0bits+0x4e>
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	f100 0001 	add.w	r0, r0, #1
 800a5f8:	d005      	beq.n	800a606 <__lo0bits+0x5a>
 800a5fa:	600b      	str	r3, [r1, #0]
 800a5fc:	4770      	bx	lr
 800a5fe:	4610      	mov	r0, r2
 800a600:	e7e9      	b.n	800a5d6 <__lo0bits+0x2a>
 800a602:	2000      	movs	r0, #0
 800a604:	4770      	bx	lr
 800a606:	2020      	movs	r0, #32
 800a608:	4770      	bx	lr
	...

0800a60c <__i2b>:
 800a60c:	b510      	push	{r4, lr}
 800a60e:	460c      	mov	r4, r1
 800a610:	2101      	movs	r1, #1
 800a612:	f7ff ff03 	bl	800a41c <_Balloc>
 800a616:	4602      	mov	r2, r0
 800a618:	b928      	cbnz	r0, 800a626 <__i2b+0x1a>
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <__i2b+0x24>)
 800a61c:	4805      	ldr	r0, [pc, #20]	; (800a634 <__i2b+0x28>)
 800a61e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a622:	f001 f891 	bl	800b748 <__assert_func>
 800a626:	2301      	movs	r3, #1
 800a628:	6144      	str	r4, [r0, #20]
 800a62a:	6103      	str	r3, [r0, #16]
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	bf00      	nop
 800a630:	0800eadd 	.word	0x0800eadd
 800a634:	0800eaee 	.word	0x0800eaee

0800a638 <__multiply>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	4691      	mov	r9, r2
 800a63e:	690a      	ldr	r2, [r1, #16]
 800a640:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a644:	429a      	cmp	r2, r3
 800a646:	bfb8      	it	lt
 800a648:	460b      	movlt	r3, r1
 800a64a:	460c      	mov	r4, r1
 800a64c:	bfbc      	itt	lt
 800a64e:	464c      	movlt	r4, r9
 800a650:	4699      	movlt	r9, r3
 800a652:	6927      	ldr	r7, [r4, #16]
 800a654:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	6861      	ldr	r1, [r4, #4]
 800a65c:	eb07 060a 	add.w	r6, r7, sl
 800a660:	42b3      	cmp	r3, r6
 800a662:	b085      	sub	sp, #20
 800a664:	bfb8      	it	lt
 800a666:	3101      	addlt	r1, #1
 800a668:	f7ff fed8 	bl	800a41c <_Balloc>
 800a66c:	b930      	cbnz	r0, 800a67c <__multiply+0x44>
 800a66e:	4602      	mov	r2, r0
 800a670:	4b44      	ldr	r3, [pc, #272]	; (800a784 <__multiply+0x14c>)
 800a672:	4845      	ldr	r0, [pc, #276]	; (800a788 <__multiply+0x150>)
 800a674:	f240 115d 	movw	r1, #349	; 0x15d
 800a678:	f001 f866 	bl	800b748 <__assert_func>
 800a67c:	f100 0514 	add.w	r5, r0, #20
 800a680:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a684:	462b      	mov	r3, r5
 800a686:	2200      	movs	r2, #0
 800a688:	4543      	cmp	r3, r8
 800a68a:	d321      	bcc.n	800a6d0 <__multiply+0x98>
 800a68c:	f104 0314 	add.w	r3, r4, #20
 800a690:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a694:	f109 0314 	add.w	r3, r9, #20
 800a698:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a69c:	9202      	str	r2, [sp, #8]
 800a69e:	1b3a      	subs	r2, r7, r4
 800a6a0:	3a15      	subs	r2, #21
 800a6a2:	f022 0203 	bic.w	r2, r2, #3
 800a6a6:	3204      	adds	r2, #4
 800a6a8:	f104 0115 	add.w	r1, r4, #21
 800a6ac:	428f      	cmp	r7, r1
 800a6ae:	bf38      	it	cc
 800a6b0:	2204      	movcc	r2, #4
 800a6b2:	9201      	str	r2, [sp, #4]
 800a6b4:	9a02      	ldr	r2, [sp, #8]
 800a6b6:	9303      	str	r3, [sp, #12]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d80c      	bhi.n	800a6d6 <__multiply+0x9e>
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	dd03      	ble.n	800a6c8 <__multiply+0x90>
 800a6c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d05a      	beq.n	800a77e <__multiply+0x146>
 800a6c8:	6106      	str	r6, [r0, #16]
 800a6ca:	b005      	add	sp, #20
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	f843 2b04 	str.w	r2, [r3], #4
 800a6d4:	e7d8      	b.n	800a688 <__multiply+0x50>
 800a6d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6da:	f1ba 0f00 	cmp.w	sl, #0
 800a6de:	d024      	beq.n	800a72a <__multiply+0xf2>
 800a6e0:	f104 0e14 	add.w	lr, r4, #20
 800a6e4:	46a9      	mov	r9, r5
 800a6e6:	f04f 0c00 	mov.w	ip, #0
 800a6ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6ee:	f8d9 1000 	ldr.w	r1, [r9]
 800a6f2:	fa1f fb82 	uxth.w	fp, r2
 800a6f6:	b289      	uxth	r1, r1
 800a6f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a700:	f8d9 2000 	ldr.w	r2, [r9]
 800a704:	4461      	add	r1, ip
 800a706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a70a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a70e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a712:	b289      	uxth	r1, r1
 800a714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a718:	4577      	cmp	r7, lr
 800a71a:	f849 1b04 	str.w	r1, [r9], #4
 800a71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a722:	d8e2      	bhi.n	800a6ea <__multiply+0xb2>
 800a724:	9a01      	ldr	r2, [sp, #4]
 800a726:	f845 c002 	str.w	ip, [r5, r2]
 800a72a:	9a03      	ldr	r2, [sp, #12]
 800a72c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a730:	3304      	adds	r3, #4
 800a732:	f1b9 0f00 	cmp.w	r9, #0
 800a736:	d020      	beq.n	800a77a <__multiply+0x142>
 800a738:	6829      	ldr	r1, [r5, #0]
 800a73a:	f104 0c14 	add.w	ip, r4, #20
 800a73e:	46ae      	mov	lr, r5
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	f8bc b000 	ldrh.w	fp, [ip]
 800a748:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a74c:	fb09 220b 	mla	r2, r9, fp, r2
 800a750:	4492      	add	sl, r2
 800a752:	b289      	uxth	r1, r1
 800a754:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a758:	f84e 1b04 	str.w	r1, [lr], #4
 800a75c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a760:	f8be 1000 	ldrh.w	r1, [lr]
 800a764:	0c12      	lsrs	r2, r2, #16
 800a766:	fb09 1102 	mla	r1, r9, r2, r1
 800a76a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a76e:	4567      	cmp	r7, ip
 800a770:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a774:	d8e6      	bhi.n	800a744 <__multiply+0x10c>
 800a776:	9a01      	ldr	r2, [sp, #4]
 800a778:	50a9      	str	r1, [r5, r2]
 800a77a:	3504      	adds	r5, #4
 800a77c:	e79a      	b.n	800a6b4 <__multiply+0x7c>
 800a77e:	3e01      	subs	r6, #1
 800a780:	e79c      	b.n	800a6bc <__multiply+0x84>
 800a782:	bf00      	nop
 800a784:	0800eadd 	.word	0x0800eadd
 800a788:	0800eaee 	.word	0x0800eaee

0800a78c <__pow5mult>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4615      	mov	r5, r2
 800a792:	f012 0203 	ands.w	r2, r2, #3
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	d007      	beq.n	800a7ac <__pow5mult+0x20>
 800a79c:	4c25      	ldr	r4, [pc, #148]	; (800a834 <__pow5mult+0xa8>)
 800a79e:	3a01      	subs	r2, #1
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7a6:	f7ff fe9b 	bl	800a4e0 <__multadd>
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	10ad      	asrs	r5, r5, #2
 800a7ae:	d03d      	beq.n	800a82c <__pow5mult+0xa0>
 800a7b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7b2:	b97c      	cbnz	r4, 800a7d4 <__pow5mult+0x48>
 800a7b4:	2010      	movs	r0, #16
 800a7b6:	f7fe f967 	bl	8008a88 <malloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	6270      	str	r0, [r6, #36]	; 0x24
 800a7be:	b928      	cbnz	r0, 800a7cc <__pow5mult+0x40>
 800a7c0:	4b1d      	ldr	r3, [pc, #116]	; (800a838 <__pow5mult+0xac>)
 800a7c2:	481e      	ldr	r0, [pc, #120]	; (800a83c <__pow5mult+0xb0>)
 800a7c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7c8:	f000 ffbe 	bl	800b748 <__assert_func>
 800a7cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7d0:	6004      	str	r4, [r0, #0]
 800a7d2:	60c4      	str	r4, [r0, #12]
 800a7d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7dc:	b94c      	cbnz	r4, 800a7f2 <__pow5mult+0x66>
 800a7de:	f240 2171 	movw	r1, #625	; 0x271
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ff12 	bl	800a60c <__i2b>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	f04f 0900 	mov.w	r9, #0
 800a7f6:	07eb      	lsls	r3, r5, #31
 800a7f8:	d50a      	bpl.n	800a810 <__pow5mult+0x84>
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ff1a 	bl	800a638 <__multiply>
 800a804:	4639      	mov	r1, r7
 800a806:	4680      	mov	r8, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff fe47 	bl	800a49c <_Bfree>
 800a80e:	4647      	mov	r7, r8
 800a810:	106d      	asrs	r5, r5, #1
 800a812:	d00b      	beq.n	800a82c <__pow5mult+0xa0>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	b938      	cbnz	r0, 800a828 <__pow5mult+0x9c>
 800a818:	4622      	mov	r2, r4
 800a81a:	4621      	mov	r1, r4
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ff0b 	bl	800a638 <__multiply>
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	f8c0 9000 	str.w	r9, [r0]
 800a828:	4604      	mov	r4, r0
 800a82a:	e7e4      	b.n	800a7f6 <__pow5mult+0x6a>
 800a82c:	4638      	mov	r0, r7
 800a82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a832:	bf00      	nop
 800a834:	0800ec40 	.word	0x0800ec40
 800a838:	0800ea6b 	.word	0x0800ea6b
 800a83c:	0800eaee 	.word	0x0800eaee

0800a840 <__lshift>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	460c      	mov	r4, r1
 800a846:	6849      	ldr	r1, [r1, #4]
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	4607      	mov	r7, r0
 800a852:	4691      	mov	r9, r2
 800a854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a858:	f108 0601 	add.w	r6, r8, #1
 800a85c:	42b3      	cmp	r3, r6
 800a85e:	db0b      	blt.n	800a878 <__lshift+0x38>
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff fddb 	bl	800a41c <_Balloc>
 800a866:	4605      	mov	r5, r0
 800a868:	b948      	cbnz	r0, 800a87e <__lshift+0x3e>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b2a      	ldr	r3, [pc, #168]	; (800a918 <__lshift+0xd8>)
 800a86e:	482b      	ldr	r0, [pc, #172]	; (800a91c <__lshift+0xdc>)
 800a870:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a874:	f000 ff68 	bl	800b748 <__assert_func>
 800a878:	3101      	adds	r1, #1
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	e7ee      	b.n	800a85c <__lshift+0x1c>
 800a87e:	2300      	movs	r3, #0
 800a880:	f100 0114 	add.w	r1, r0, #20
 800a884:	f100 0210 	add.w	r2, r0, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	4553      	cmp	r3, sl
 800a88c:	db37      	blt.n	800a8fe <__lshift+0xbe>
 800a88e:	6920      	ldr	r0, [r4, #16]
 800a890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a894:	f104 0314 	add.w	r3, r4, #20
 800a898:	f019 091f 	ands.w	r9, r9, #31
 800a89c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8a4:	d02f      	beq.n	800a906 <__lshift+0xc6>
 800a8a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8aa:	468a      	mov	sl, r1
 800a8ac:	f04f 0c00 	mov.w	ip, #0
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	fa02 f209 	lsl.w	r2, r2, r9
 800a8b6:	ea42 020c 	orr.w	r2, r2, ip
 800a8ba:	f84a 2b04 	str.w	r2, [sl], #4
 800a8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c2:	4298      	cmp	r0, r3
 800a8c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8c8:	d8f2      	bhi.n	800a8b0 <__lshift+0x70>
 800a8ca:	1b03      	subs	r3, r0, r4
 800a8cc:	3b15      	subs	r3, #21
 800a8ce:	f023 0303 	bic.w	r3, r3, #3
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	f104 0215 	add.w	r2, r4, #21
 800a8d8:	4290      	cmp	r0, r2
 800a8da:	bf38      	it	cc
 800a8dc:	2304      	movcc	r3, #4
 800a8de:	f841 c003 	str.w	ip, [r1, r3]
 800a8e2:	f1bc 0f00 	cmp.w	ip, #0
 800a8e6:	d001      	beq.n	800a8ec <__lshift+0xac>
 800a8e8:	f108 0602 	add.w	r6, r8, #2
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	612e      	str	r6, [r5, #16]
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	f7ff fdd2 	bl	800a49c <_Bfree>
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a902:	3301      	adds	r3, #1
 800a904:	e7c1      	b.n	800a88a <__lshift+0x4a>
 800a906:	3904      	subs	r1, #4
 800a908:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a910:	4298      	cmp	r0, r3
 800a912:	d8f9      	bhi.n	800a908 <__lshift+0xc8>
 800a914:	e7ea      	b.n	800a8ec <__lshift+0xac>
 800a916:	bf00      	nop
 800a918:	0800eadd 	.word	0x0800eadd
 800a91c:	0800eaee 	.word	0x0800eaee

0800a920 <__mcmp>:
 800a920:	b530      	push	{r4, r5, lr}
 800a922:	6902      	ldr	r2, [r0, #16]
 800a924:	690c      	ldr	r4, [r1, #16]
 800a926:	1b12      	subs	r2, r2, r4
 800a928:	d10e      	bne.n	800a948 <__mcmp+0x28>
 800a92a:	f100 0314 	add.w	r3, r0, #20
 800a92e:	3114      	adds	r1, #20
 800a930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a93c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a940:	42a5      	cmp	r5, r4
 800a942:	d003      	beq.n	800a94c <__mcmp+0x2c>
 800a944:	d305      	bcc.n	800a952 <__mcmp+0x32>
 800a946:	2201      	movs	r2, #1
 800a948:	4610      	mov	r0, r2
 800a94a:	bd30      	pop	{r4, r5, pc}
 800a94c:	4283      	cmp	r3, r0
 800a94e:	d3f3      	bcc.n	800a938 <__mcmp+0x18>
 800a950:	e7fa      	b.n	800a948 <__mcmp+0x28>
 800a952:	f04f 32ff 	mov.w	r2, #4294967295
 800a956:	e7f7      	b.n	800a948 <__mcmp+0x28>

0800a958 <__mdiff>:
 800a958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	460c      	mov	r4, r1
 800a95e:	4606      	mov	r6, r0
 800a960:	4611      	mov	r1, r2
 800a962:	4620      	mov	r0, r4
 800a964:	4690      	mov	r8, r2
 800a966:	f7ff ffdb 	bl	800a920 <__mcmp>
 800a96a:	1e05      	subs	r5, r0, #0
 800a96c:	d110      	bne.n	800a990 <__mdiff+0x38>
 800a96e:	4629      	mov	r1, r5
 800a970:	4630      	mov	r0, r6
 800a972:	f7ff fd53 	bl	800a41c <_Balloc>
 800a976:	b930      	cbnz	r0, 800a986 <__mdiff+0x2e>
 800a978:	4b3a      	ldr	r3, [pc, #232]	; (800aa64 <__mdiff+0x10c>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	f240 2132 	movw	r1, #562	; 0x232
 800a980:	4839      	ldr	r0, [pc, #228]	; (800aa68 <__mdiff+0x110>)
 800a982:	f000 fee1 	bl	800b748 <__assert_func>
 800a986:	2301      	movs	r3, #1
 800a988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	bfa4      	itt	ge
 800a992:	4643      	movge	r3, r8
 800a994:	46a0      	movge	r8, r4
 800a996:	4630      	mov	r0, r6
 800a998:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a99c:	bfa6      	itte	ge
 800a99e:	461c      	movge	r4, r3
 800a9a0:	2500      	movge	r5, #0
 800a9a2:	2501      	movlt	r5, #1
 800a9a4:	f7ff fd3a 	bl	800a41c <_Balloc>
 800a9a8:	b920      	cbnz	r0, 800a9b4 <__mdiff+0x5c>
 800a9aa:	4b2e      	ldr	r3, [pc, #184]	; (800aa64 <__mdiff+0x10c>)
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9b2:	e7e5      	b.n	800a980 <__mdiff+0x28>
 800a9b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9b8:	6926      	ldr	r6, [r4, #16]
 800a9ba:	60c5      	str	r5, [r0, #12]
 800a9bc:	f104 0914 	add.w	r9, r4, #20
 800a9c0:	f108 0514 	add.w	r5, r8, #20
 800a9c4:	f100 0e14 	add.w	lr, r0, #20
 800a9c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9d0:	f108 0210 	add.w	r2, r8, #16
 800a9d4:	46f2      	mov	sl, lr
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9e0:	fa1f f883 	uxth.w	r8, r3
 800a9e4:	fa11 f18b 	uxtah	r1, r1, fp
 800a9e8:	0c1b      	lsrs	r3, r3, #16
 800a9ea:	eba1 0808 	sub.w	r8, r1, r8
 800a9ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9f6:	fa1f f888 	uxth.w	r8, r8
 800a9fa:	1419      	asrs	r1, r3, #16
 800a9fc:	454e      	cmp	r6, r9
 800a9fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa02:	f84a 3b04 	str.w	r3, [sl], #4
 800aa06:	d8e7      	bhi.n	800a9d8 <__mdiff+0x80>
 800aa08:	1b33      	subs	r3, r6, r4
 800aa0a:	3b15      	subs	r3, #21
 800aa0c:	f023 0303 	bic.w	r3, r3, #3
 800aa10:	3304      	adds	r3, #4
 800aa12:	3415      	adds	r4, #21
 800aa14:	42a6      	cmp	r6, r4
 800aa16:	bf38      	it	cc
 800aa18:	2304      	movcc	r3, #4
 800aa1a:	441d      	add	r5, r3
 800aa1c:	4473      	add	r3, lr
 800aa1e:	469e      	mov	lr, r3
 800aa20:	462e      	mov	r6, r5
 800aa22:	4566      	cmp	r6, ip
 800aa24:	d30e      	bcc.n	800aa44 <__mdiff+0xec>
 800aa26:	f10c 0203 	add.w	r2, ip, #3
 800aa2a:	1b52      	subs	r2, r2, r5
 800aa2c:	f022 0203 	bic.w	r2, r2, #3
 800aa30:	3d03      	subs	r5, #3
 800aa32:	45ac      	cmp	ip, r5
 800aa34:	bf38      	it	cc
 800aa36:	2200      	movcc	r2, #0
 800aa38:	441a      	add	r2, r3
 800aa3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa3e:	b17b      	cbz	r3, 800aa60 <__mdiff+0x108>
 800aa40:	6107      	str	r7, [r0, #16]
 800aa42:	e7a3      	b.n	800a98c <__mdiff+0x34>
 800aa44:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa48:	fa11 f288 	uxtah	r2, r1, r8
 800aa4c:	1414      	asrs	r4, r2, #16
 800aa4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa52:	b292      	uxth	r2, r2
 800aa54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa58:	f84e 2b04 	str.w	r2, [lr], #4
 800aa5c:	1421      	asrs	r1, r4, #16
 800aa5e:	e7e0      	b.n	800aa22 <__mdiff+0xca>
 800aa60:	3f01      	subs	r7, #1
 800aa62:	e7ea      	b.n	800aa3a <__mdiff+0xe2>
 800aa64:	0800eadd 	.word	0x0800eadd
 800aa68:	0800eaee 	.word	0x0800eaee

0800aa6c <__d2b>:
 800aa6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4689      	mov	r9, r1
 800aa72:	2101      	movs	r1, #1
 800aa74:	ec57 6b10 	vmov	r6, r7, d0
 800aa78:	4690      	mov	r8, r2
 800aa7a:	f7ff fccf 	bl	800a41c <_Balloc>
 800aa7e:	4604      	mov	r4, r0
 800aa80:	b930      	cbnz	r0, 800aa90 <__d2b+0x24>
 800aa82:	4602      	mov	r2, r0
 800aa84:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <__d2b+0xb0>)
 800aa86:	4826      	ldr	r0, [pc, #152]	; (800ab20 <__d2b+0xb4>)
 800aa88:	f240 310a 	movw	r1, #778	; 0x30a
 800aa8c:	f000 fe5c 	bl	800b748 <__assert_func>
 800aa90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa98:	bb35      	cbnz	r5, 800aae8 <__d2b+0x7c>
 800aa9a:	2e00      	cmp	r6, #0
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	d028      	beq.n	800aaf2 <__d2b+0x86>
 800aaa0:	4668      	mov	r0, sp
 800aaa2:	9600      	str	r6, [sp, #0]
 800aaa4:	f7ff fd82 	bl	800a5ac <__lo0bits>
 800aaa8:	9900      	ldr	r1, [sp, #0]
 800aaaa:	b300      	cbz	r0, 800aaee <__d2b+0x82>
 800aaac:	9a01      	ldr	r2, [sp, #4]
 800aaae:	f1c0 0320 	rsb	r3, r0, #32
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	430b      	orrs	r3, r1
 800aab8:	40c2      	lsrs	r2, r0
 800aaba:	6163      	str	r3, [r4, #20]
 800aabc:	9201      	str	r2, [sp, #4]
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	61a3      	str	r3, [r4, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bf14      	ite	ne
 800aac6:	2202      	movne	r2, #2
 800aac8:	2201      	moveq	r2, #1
 800aaca:	6122      	str	r2, [r4, #16]
 800aacc:	b1d5      	cbz	r5, 800ab04 <__d2b+0x98>
 800aace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aad2:	4405      	add	r5, r0
 800aad4:	f8c9 5000 	str.w	r5, [r9]
 800aad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aadc:	f8c8 0000 	str.w	r0, [r8]
 800aae0:	4620      	mov	r0, r4
 800aae2:	b003      	add	sp, #12
 800aae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaec:	e7d5      	b.n	800aa9a <__d2b+0x2e>
 800aaee:	6161      	str	r1, [r4, #20]
 800aaf0:	e7e5      	b.n	800aabe <__d2b+0x52>
 800aaf2:	a801      	add	r0, sp, #4
 800aaf4:	f7ff fd5a 	bl	800a5ac <__lo0bits>
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	6163      	str	r3, [r4, #20]
 800aafc:	2201      	movs	r2, #1
 800aafe:	6122      	str	r2, [r4, #16]
 800ab00:	3020      	adds	r0, #32
 800ab02:	e7e3      	b.n	800aacc <__d2b+0x60>
 800ab04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab0c:	f8c9 0000 	str.w	r0, [r9]
 800ab10:	6918      	ldr	r0, [r3, #16]
 800ab12:	f7ff fd2b 	bl	800a56c <__hi0bits>
 800ab16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab1a:	e7df      	b.n	800aadc <__d2b+0x70>
 800ab1c:	0800eadd 	.word	0x0800eadd
 800ab20:	0800eaee 	.word	0x0800eaee

0800ab24 <_calloc_r>:
 800ab24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab26:	fba1 2402 	umull	r2, r4, r1, r2
 800ab2a:	b94c      	cbnz	r4, 800ab40 <_calloc_r+0x1c>
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	9201      	str	r2, [sp, #4]
 800ab30:	f7fe f826 	bl	8008b80 <_malloc_r>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	4605      	mov	r5, r0
 800ab38:	b930      	cbnz	r0, 800ab48 <_calloc_r+0x24>
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	b003      	add	sp, #12
 800ab3e:	bd30      	pop	{r4, r5, pc}
 800ab40:	220c      	movs	r2, #12
 800ab42:	6002      	str	r2, [r0, #0]
 800ab44:	2500      	movs	r5, #0
 800ab46:	e7f8      	b.n	800ab3a <_calloc_r+0x16>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f7fd ffa5 	bl	8008a98 <memset>
 800ab4e:	e7f4      	b.n	800ab3a <_calloc_r+0x16>

0800ab50 <__ssputs_r>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	688e      	ldr	r6, [r1, #8]
 800ab56:	429e      	cmp	r6, r3
 800ab58:	4682      	mov	sl, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	4690      	mov	r8, r2
 800ab5e:	461f      	mov	r7, r3
 800ab60:	d838      	bhi.n	800abd4 <__ssputs_r+0x84>
 800ab62:	898a      	ldrh	r2, [r1, #12]
 800ab64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab68:	d032      	beq.n	800abd0 <__ssputs_r+0x80>
 800ab6a:	6825      	ldr	r5, [r4, #0]
 800ab6c:	6909      	ldr	r1, [r1, #16]
 800ab6e:	eba5 0901 	sub.w	r9, r5, r1
 800ab72:	6965      	ldr	r5, [r4, #20]
 800ab74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	444b      	add	r3, r9
 800ab80:	106d      	asrs	r5, r5, #1
 800ab82:	429d      	cmp	r5, r3
 800ab84:	bf38      	it	cc
 800ab86:	461d      	movcc	r5, r3
 800ab88:	0553      	lsls	r3, r2, #21
 800ab8a:	d531      	bpl.n	800abf0 <__ssputs_r+0xa0>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7fd fff7 	bl	8008b80 <_malloc_r>
 800ab92:	4606      	mov	r6, r0
 800ab94:	b950      	cbnz	r0, 800abac <__ssputs_r+0x5c>
 800ab96:	230c      	movs	r3, #12
 800ab98:	f8ca 3000 	str.w	r3, [sl]
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abac:	6921      	ldr	r1, [r4, #16]
 800abae:	464a      	mov	r2, r9
 800abb0:	f7ff fc1a 	bl	800a3e8 <memcpy>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	6126      	str	r6, [r4, #16]
 800abc2:	6165      	str	r5, [r4, #20]
 800abc4:	444e      	add	r6, r9
 800abc6:	eba5 0509 	sub.w	r5, r5, r9
 800abca:	6026      	str	r6, [r4, #0]
 800abcc:	60a5      	str	r5, [r4, #8]
 800abce:	463e      	mov	r6, r7
 800abd0:	42be      	cmp	r6, r7
 800abd2:	d900      	bls.n	800abd6 <__ssputs_r+0x86>
 800abd4:	463e      	mov	r6, r7
 800abd6:	6820      	ldr	r0, [r4, #0]
 800abd8:	4632      	mov	r2, r6
 800abda:	4641      	mov	r1, r8
 800abdc:	f000 ffb0 	bl	800bb40 <memmove>
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	1b9b      	subs	r3, r3, r6
 800abe4:	60a3      	str	r3, [r4, #8]
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	4433      	add	r3, r6
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	2000      	movs	r0, #0
 800abee:	e7db      	b.n	800aba8 <__ssputs_r+0x58>
 800abf0:	462a      	mov	r2, r5
 800abf2:	f000 ffbf 	bl	800bb74 <_realloc_r>
 800abf6:	4606      	mov	r6, r0
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d1e1      	bne.n	800abc0 <__ssputs_r+0x70>
 800abfc:	6921      	ldr	r1, [r4, #16]
 800abfe:	4650      	mov	r0, sl
 800ac00:	f7fd ff52 	bl	8008aa8 <_free_r>
 800ac04:	e7c7      	b.n	800ab96 <__ssputs_r+0x46>
	...

0800ac08 <_svfiprintf_r>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	4698      	mov	r8, r3
 800ac0e:	898b      	ldrh	r3, [r1, #12]
 800ac10:	061b      	lsls	r3, r3, #24
 800ac12:	b09d      	sub	sp, #116	; 0x74
 800ac14:	4607      	mov	r7, r0
 800ac16:	460d      	mov	r5, r1
 800ac18:	4614      	mov	r4, r2
 800ac1a:	d50e      	bpl.n	800ac3a <_svfiprintf_r+0x32>
 800ac1c:	690b      	ldr	r3, [r1, #16]
 800ac1e:	b963      	cbnz	r3, 800ac3a <_svfiprintf_r+0x32>
 800ac20:	2140      	movs	r1, #64	; 0x40
 800ac22:	f7fd ffad 	bl	8008b80 <_malloc_r>
 800ac26:	6028      	str	r0, [r5, #0]
 800ac28:	6128      	str	r0, [r5, #16]
 800ac2a:	b920      	cbnz	r0, 800ac36 <_svfiprintf_r+0x2e>
 800ac2c:	230c      	movs	r3, #12
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	e0d1      	b.n	800adda <_svfiprintf_r+0x1d2>
 800ac36:	2340      	movs	r3, #64	; 0x40
 800ac38:	616b      	str	r3, [r5, #20]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3e:	2320      	movs	r3, #32
 800ac40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac48:	2330      	movs	r3, #48	; 0x30
 800ac4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adf4 <_svfiprintf_r+0x1ec>
 800ac4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac52:	f04f 0901 	mov.w	r9, #1
 800ac56:	4623      	mov	r3, r4
 800ac58:	469a      	mov	sl, r3
 800ac5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5e:	b10a      	cbz	r2, 800ac64 <_svfiprintf_r+0x5c>
 800ac60:	2a25      	cmp	r2, #37	; 0x25
 800ac62:	d1f9      	bne.n	800ac58 <_svfiprintf_r+0x50>
 800ac64:	ebba 0b04 	subs.w	fp, sl, r4
 800ac68:	d00b      	beq.n	800ac82 <_svfiprintf_r+0x7a>
 800ac6a:	465b      	mov	r3, fp
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff ff6d 	bl	800ab50 <__ssputs_r>
 800ac76:	3001      	adds	r0, #1
 800ac78:	f000 80aa 	beq.w	800add0 <_svfiprintf_r+0x1c8>
 800ac7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7e:	445a      	add	r2, fp
 800ac80:	9209      	str	r2, [sp, #36]	; 0x24
 800ac82:	f89a 3000 	ldrb.w	r3, [sl]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80a2 	beq.w	800add0 <_svfiprintf_r+0x1c8>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac96:	f10a 0a01 	add.w	sl, sl, #1
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	9307      	str	r3, [sp, #28]
 800ac9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aca2:	931a      	str	r3, [sp, #104]	; 0x68
 800aca4:	4654      	mov	r4, sl
 800aca6:	2205      	movs	r2, #5
 800aca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acac:	4851      	ldr	r0, [pc, #324]	; (800adf4 <_svfiprintf_r+0x1ec>)
 800acae:	f7f5 faaf 	bl	8000210 <memchr>
 800acb2:	9a04      	ldr	r2, [sp, #16]
 800acb4:	b9d8      	cbnz	r0, 800acee <_svfiprintf_r+0xe6>
 800acb6:	06d0      	lsls	r0, r2, #27
 800acb8:	bf44      	itt	mi
 800acba:	2320      	movmi	r3, #32
 800acbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc0:	0711      	lsls	r1, r2, #28
 800acc2:	bf44      	itt	mi
 800acc4:	232b      	movmi	r3, #43	; 0x2b
 800acc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acca:	f89a 3000 	ldrb.w	r3, [sl]
 800acce:	2b2a      	cmp	r3, #42	; 0x2a
 800acd0:	d015      	beq.n	800acfe <_svfiprintf_r+0xf6>
 800acd2:	9a07      	ldr	r2, [sp, #28]
 800acd4:	4654      	mov	r4, sl
 800acd6:	2000      	movs	r0, #0
 800acd8:	f04f 0c0a 	mov.w	ip, #10
 800acdc:	4621      	mov	r1, r4
 800acde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace2:	3b30      	subs	r3, #48	; 0x30
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	d94e      	bls.n	800ad86 <_svfiprintf_r+0x17e>
 800ace8:	b1b0      	cbz	r0, 800ad18 <_svfiprintf_r+0x110>
 800acea:	9207      	str	r2, [sp, #28]
 800acec:	e014      	b.n	800ad18 <_svfiprintf_r+0x110>
 800acee:	eba0 0308 	sub.w	r3, r0, r8
 800acf2:	fa09 f303 	lsl.w	r3, r9, r3
 800acf6:	4313      	orrs	r3, r2
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	46a2      	mov	sl, r4
 800acfc:	e7d2      	b.n	800aca4 <_svfiprintf_r+0x9c>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	1d19      	adds	r1, r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	9103      	str	r1, [sp, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfbb      	ittet	lt
 800ad0a:	425b      	neglt	r3, r3
 800ad0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad10:	9307      	strge	r3, [sp, #28]
 800ad12:	9307      	strlt	r3, [sp, #28]
 800ad14:	bfb8      	it	lt
 800ad16:	9204      	strlt	r2, [sp, #16]
 800ad18:	7823      	ldrb	r3, [r4, #0]
 800ad1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1c:	d10c      	bne.n	800ad38 <_svfiprintf_r+0x130>
 800ad1e:	7863      	ldrb	r3, [r4, #1]
 800ad20:	2b2a      	cmp	r3, #42	; 0x2a
 800ad22:	d135      	bne.n	800ad90 <_svfiprintf_r+0x188>
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	1d1a      	adds	r2, r3, #4
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	9203      	str	r2, [sp, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	bfb8      	it	lt
 800ad30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad34:	3402      	adds	r4, #2
 800ad36:	9305      	str	r3, [sp, #20]
 800ad38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae04 <_svfiprintf_r+0x1fc>
 800ad3c:	7821      	ldrb	r1, [r4, #0]
 800ad3e:	2203      	movs	r2, #3
 800ad40:	4650      	mov	r0, sl
 800ad42:	f7f5 fa65 	bl	8000210 <memchr>
 800ad46:	b140      	cbz	r0, 800ad5a <_svfiprintf_r+0x152>
 800ad48:	2340      	movs	r3, #64	; 0x40
 800ad4a:	eba0 000a 	sub.w	r0, r0, sl
 800ad4e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	4303      	orrs	r3, r0
 800ad56:	3401      	adds	r4, #1
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5e:	4826      	ldr	r0, [pc, #152]	; (800adf8 <_svfiprintf_r+0x1f0>)
 800ad60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad64:	2206      	movs	r2, #6
 800ad66:	f7f5 fa53 	bl	8000210 <memchr>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d038      	beq.n	800ade0 <_svfiprintf_r+0x1d8>
 800ad6e:	4b23      	ldr	r3, [pc, #140]	; (800adfc <_svfiprintf_r+0x1f4>)
 800ad70:	bb1b      	cbnz	r3, 800adba <_svfiprintf_r+0x1b2>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	3307      	adds	r3, #7
 800ad76:	f023 0307 	bic.w	r3, r3, #7
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	4433      	add	r3, r6
 800ad82:	9309      	str	r3, [sp, #36]	; 0x24
 800ad84:	e767      	b.n	800ac56 <_svfiprintf_r+0x4e>
 800ad86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e7a5      	b.n	800acdc <_svfiprintf_r+0xd4>
 800ad90:	2300      	movs	r3, #0
 800ad92:	3401      	adds	r4, #1
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	4619      	mov	r1, r3
 800ad98:	f04f 0c0a 	mov.w	ip, #10
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada2:	3a30      	subs	r2, #48	; 0x30
 800ada4:	2a09      	cmp	r2, #9
 800ada6:	d903      	bls.n	800adb0 <_svfiprintf_r+0x1a8>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0c5      	beq.n	800ad38 <_svfiprintf_r+0x130>
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	e7c3      	b.n	800ad38 <_svfiprintf_r+0x130>
 800adb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb4:	4604      	mov	r4, r0
 800adb6:	2301      	movs	r3, #1
 800adb8:	e7f0      	b.n	800ad9c <_svfiprintf_r+0x194>
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	462a      	mov	r2, r5
 800adc0:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <_svfiprintf_r+0x1f8>)
 800adc2:	a904      	add	r1, sp, #16
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7fd ffef 	bl	8008da8 <_printf_float>
 800adca:	1c42      	adds	r2, r0, #1
 800adcc:	4606      	mov	r6, r0
 800adce:	d1d6      	bne.n	800ad7e <_svfiprintf_r+0x176>
 800add0:	89ab      	ldrh	r3, [r5, #12]
 800add2:	065b      	lsls	r3, r3, #25
 800add4:	f53f af2c 	bmi.w	800ac30 <_svfiprintf_r+0x28>
 800add8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adda:	b01d      	add	sp, #116	; 0x74
 800addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade0:	ab03      	add	r3, sp, #12
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	462a      	mov	r2, r5
 800ade6:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <_svfiprintf_r+0x1f8>)
 800ade8:	a904      	add	r1, sp, #16
 800adea:	4638      	mov	r0, r7
 800adec:	f7fe fa80 	bl	80092f0 <_printf_i>
 800adf0:	e7eb      	b.n	800adca <_svfiprintf_r+0x1c2>
 800adf2:	bf00      	nop
 800adf4:	0800ec4c 	.word	0x0800ec4c
 800adf8:	0800ec56 	.word	0x0800ec56
 800adfc:	08008da9 	.word	0x08008da9
 800ae00:	0800ab51 	.word	0x0800ab51
 800ae04:	0800ec52 	.word	0x0800ec52

0800ae08 <_sungetc_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	1c4b      	adds	r3, r1, #1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	d103      	bne.n	800ae18 <_sungetc_r+0x10>
 800ae10:	f04f 35ff 	mov.w	r5, #4294967295
 800ae14:	4628      	mov	r0, r5
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	8993      	ldrh	r3, [r2, #12]
 800ae1a:	f023 0320 	bic.w	r3, r3, #32
 800ae1e:	8193      	strh	r3, [r2, #12]
 800ae20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae22:	6852      	ldr	r2, [r2, #4]
 800ae24:	b2cd      	uxtb	r5, r1
 800ae26:	b18b      	cbz	r3, 800ae4c <_sungetc_r+0x44>
 800ae28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	dd08      	ble.n	800ae40 <_sungetc_r+0x38>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	1e5a      	subs	r2, r3, #1
 800ae32:	6022      	str	r2, [r4, #0]
 800ae34:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	e7e9      	b.n	800ae14 <_sungetc_r+0xc>
 800ae40:	4621      	mov	r1, r4
 800ae42:	f000 fc47 	bl	800b6d4 <__submore>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0f1      	beq.n	800ae2e <_sungetc_r+0x26>
 800ae4a:	e7e1      	b.n	800ae10 <_sungetc_r+0x8>
 800ae4c:	6921      	ldr	r1, [r4, #16]
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	b151      	cbz	r1, 800ae68 <_sungetc_r+0x60>
 800ae52:	4299      	cmp	r1, r3
 800ae54:	d208      	bcs.n	800ae68 <_sungetc_r+0x60>
 800ae56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ae5a:	42a9      	cmp	r1, r5
 800ae5c:	d104      	bne.n	800ae68 <_sungetc_r+0x60>
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	3201      	adds	r2, #1
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	6062      	str	r2, [r4, #4]
 800ae66:	e7d5      	b.n	800ae14 <_sungetc_r+0xc>
 800ae68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ae6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae70:	6363      	str	r3, [r4, #52]	; 0x34
 800ae72:	2303      	movs	r3, #3
 800ae74:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae76:	4623      	mov	r3, r4
 800ae78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e7dc      	b.n	800ae3c <_sungetc_r+0x34>

0800ae82 <__ssrefill_r>:
 800ae82:	b510      	push	{r4, lr}
 800ae84:	460c      	mov	r4, r1
 800ae86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae88:	b169      	cbz	r1, 800aea6 <__ssrefill_r+0x24>
 800ae8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	d001      	beq.n	800ae96 <__ssrefill_r+0x14>
 800ae92:	f7fd fe09 	bl	8008aa8 <_free_r>
 800ae96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae9e:	b113      	cbz	r3, 800aea6 <__ssrefill_r+0x24>
 800aea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f043 0320 	orr.w	r3, r3, #32
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeba:	e7f3      	b.n	800aea4 <__ssrefill_r+0x22>

0800aebc <__ssvfiscanf_r>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	460c      	mov	r4, r1
 800aec2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aec6:	2100      	movs	r1, #0
 800aec8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aecc:	49a6      	ldr	r1, [pc, #664]	; (800b168 <__ssvfiscanf_r+0x2ac>)
 800aece:	91a0      	str	r1, [sp, #640]	; 0x280
 800aed0:	f10d 0804 	add.w	r8, sp, #4
 800aed4:	49a5      	ldr	r1, [pc, #660]	; (800b16c <__ssvfiscanf_r+0x2b0>)
 800aed6:	4fa6      	ldr	r7, [pc, #664]	; (800b170 <__ssvfiscanf_r+0x2b4>)
 800aed8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b174 <__ssvfiscanf_r+0x2b8>
 800aedc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aee0:	4606      	mov	r6, r0
 800aee2:	91a1      	str	r1, [sp, #644]	; 0x284
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	7813      	ldrb	r3, [r2, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 815a 	beq.w	800b1a2 <__ssvfiscanf_r+0x2e6>
 800aeee:	5dd9      	ldrb	r1, [r3, r7]
 800aef0:	f011 0108 	ands.w	r1, r1, #8
 800aef4:	f102 0501 	add.w	r5, r2, #1
 800aef8:	d019      	beq.n	800af2e <__ssvfiscanf_r+0x72>
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd0f      	ble.n	800af20 <__ssvfiscanf_r+0x64>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	781a      	ldrb	r2, [r3, #0]
 800af04:	5cba      	ldrb	r2, [r7, r2]
 800af06:	0712      	lsls	r2, r2, #28
 800af08:	d401      	bmi.n	800af0e <__ssvfiscanf_r+0x52>
 800af0a:	462a      	mov	r2, r5
 800af0c:	e7eb      	b.n	800aee6 <__ssvfiscanf_r+0x2a>
 800af0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af10:	3201      	adds	r2, #1
 800af12:	9245      	str	r2, [sp, #276]	; 0x114
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	3a01      	subs	r2, #1
 800af1a:	6062      	str	r2, [r4, #4]
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	e7ec      	b.n	800aefa <__ssvfiscanf_r+0x3e>
 800af20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af22:	4621      	mov	r1, r4
 800af24:	4630      	mov	r0, r6
 800af26:	4798      	blx	r3
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0e9      	beq.n	800af00 <__ssvfiscanf_r+0x44>
 800af2c:	e7ed      	b.n	800af0a <__ssvfiscanf_r+0x4e>
 800af2e:	2b25      	cmp	r3, #37	; 0x25
 800af30:	d012      	beq.n	800af58 <__ssvfiscanf_r+0x9c>
 800af32:	469a      	mov	sl, r3
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	f340 8091 	ble.w	800b05e <__ssvfiscanf_r+0x1a2>
 800af3c:	6822      	ldr	r2, [r4, #0]
 800af3e:	7813      	ldrb	r3, [r2, #0]
 800af40:	4553      	cmp	r3, sl
 800af42:	f040 812e 	bne.w	800b1a2 <__ssvfiscanf_r+0x2e6>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	3b01      	subs	r3, #1
 800af4a:	6063      	str	r3, [r4, #4]
 800af4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af4e:	3201      	adds	r2, #1
 800af50:	3301      	adds	r3, #1
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	9345      	str	r3, [sp, #276]	; 0x114
 800af56:	e7d8      	b.n	800af0a <__ssvfiscanf_r+0x4e>
 800af58:	9141      	str	r1, [sp, #260]	; 0x104
 800af5a:	9143      	str	r1, [sp, #268]	; 0x10c
 800af5c:	7853      	ldrb	r3, [r2, #1]
 800af5e:	2b2a      	cmp	r3, #42	; 0x2a
 800af60:	bf02      	ittt	eq
 800af62:	2310      	moveq	r3, #16
 800af64:	1c95      	addeq	r5, r2, #2
 800af66:	9341      	streq	r3, [sp, #260]	; 0x104
 800af68:	220a      	movs	r2, #10
 800af6a:	46aa      	mov	sl, r5
 800af6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800af70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800af74:	2b09      	cmp	r3, #9
 800af76:	d91d      	bls.n	800afb4 <__ssvfiscanf_r+0xf8>
 800af78:	487e      	ldr	r0, [pc, #504]	; (800b174 <__ssvfiscanf_r+0x2b8>)
 800af7a:	2203      	movs	r2, #3
 800af7c:	f7f5 f948 	bl	8000210 <memchr>
 800af80:	b140      	cbz	r0, 800af94 <__ssvfiscanf_r+0xd8>
 800af82:	2301      	movs	r3, #1
 800af84:	eba0 0009 	sub.w	r0, r0, r9
 800af88:	fa03 f000 	lsl.w	r0, r3, r0
 800af8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af8e:	4318      	orrs	r0, r3
 800af90:	9041      	str	r0, [sp, #260]	; 0x104
 800af92:	4655      	mov	r5, sl
 800af94:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af98:	2b78      	cmp	r3, #120	; 0x78
 800af9a:	d806      	bhi.n	800afaa <__ssvfiscanf_r+0xee>
 800af9c:	2b57      	cmp	r3, #87	; 0x57
 800af9e:	d810      	bhi.n	800afc2 <__ssvfiscanf_r+0x106>
 800afa0:	2b25      	cmp	r3, #37	; 0x25
 800afa2:	d0c6      	beq.n	800af32 <__ssvfiscanf_r+0x76>
 800afa4:	d856      	bhi.n	800b054 <__ssvfiscanf_r+0x198>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d064      	beq.n	800b074 <__ssvfiscanf_r+0x1b8>
 800afaa:	2303      	movs	r3, #3
 800afac:	9347      	str	r3, [sp, #284]	; 0x11c
 800afae:	230a      	movs	r3, #10
 800afb0:	9342      	str	r3, [sp, #264]	; 0x108
 800afb2:	e071      	b.n	800b098 <__ssvfiscanf_r+0x1dc>
 800afb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800afb6:	fb02 1103 	mla	r1, r2, r3, r1
 800afba:	3930      	subs	r1, #48	; 0x30
 800afbc:	9143      	str	r1, [sp, #268]	; 0x10c
 800afbe:	4655      	mov	r5, sl
 800afc0:	e7d3      	b.n	800af6a <__ssvfiscanf_r+0xae>
 800afc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800afc6:	2a20      	cmp	r2, #32
 800afc8:	d8ef      	bhi.n	800afaa <__ssvfiscanf_r+0xee>
 800afca:	a101      	add	r1, pc, #4	; (adr r1, 800afd0 <__ssvfiscanf_r+0x114>)
 800afcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afd0:	0800b083 	.word	0x0800b083
 800afd4:	0800afab 	.word	0x0800afab
 800afd8:	0800afab 	.word	0x0800afab
 800afdc:	0800b0e1 	.word	0x0800b0e1
 800afe0:	0800afab 	.word	0x0800afab
 800afe4:	0800afab 	.word	0x0800afab
 800afe8:	0800afab 	.word	0x0800afab
 800afec:	0800afab 	.word	0x0800afab
 800aff0:	0800afab 	.word	0x0800afab
 800aff4:	0800afab 	.word	0x0800afab
 800aff8:	0800afab 	.word	0x0800afab
 800affc:	0800b0f7 	.word	0x0800b0f7
 800b000:	0800b0cd 	.word	0x0800b0cd
 800b004:	0800b05b 	.word	0x0800b05b
 800b008:	0800b05b 	.word	0x0800b05b
 800b00c:	0800b05b 	.word	0x0800b05b
 800b010:	0800afab 	.word	0x0800afab
 800b014:	0800b0d1 	.word	0x0800b0d1
 800b018:	0800afab 	.word	0x0800afab
 800b01c:	0800afab 	.word	0x0800afab
 800b020:	0800afab 	.word	0x0800afab
 800b024:	0800afab 	.word	0x0800afab
 800b028:	0800b107 	.word	0x0800b107
 800b02c:	0800b0d9 	.word	0x0800b0d9
 800b030:	0800b07b 	.word	0x0800b07b
 800b034:	0800afab 	.word	0x0800afab
 800b038:	0800afab 	.word	0x0800afab
 800b03c:	0800b103 	.word	0x0800b103
 800b040:	0800afab 	.word	0x0800afab
 800b044:	0800b0cd 	.word	0x0800b0cd
 800b048:	0800afab 	.word	0x0800afab
 800b04c:	0800afab 	.word	0x0800afab
 800b050:	0800b083 	.word	0x0800b083
 800b054:	3b45      	subs	r3, #69	; 0x45
 800b056:	2b02      	cmp	r3, #2
 800b058:	d8a7      	bhi.n	800afaa <__ssvfiscanf_r+0xee>
 800b05a:	2305      	movs	r3, #5
 800b05c:	e01b      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b05e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b060:	4621      	mov	r1, r4
 800b062:	4630      	mov	r0, r6
 800b064:	4798      	blx	r3
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f af68 	beq.w	800af3c <__ssvfiscanf_r+0x80>
 800b06c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b06e:	2800      	cmp	r0, #0
 800b070:	f040 808d 	bne.w	800b18e <__ssvfiscanf_r+0x2d2>
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	e08f      	b.n	800b19a <__ssvfiscanf_r+0x2de>
 800b07a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b07c:	f042 0220 	orr.w	r2, r2, #32
 800b080:	9241      	str	r2, [sp, #260]	; 0x104
 800b082:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b088:	9241      	str	r2, [sp, #260]	; 0x104
 800b08a:	2210      	movs	r2, #16
 800b08c:	2b6f      	cmp	r3, #111	; 0x6f
 800b08e:	9242      	str	r2, [sp, #264]	; 0x108
 800b090:	bf34      	ite	cc
 800b092:	2303      	movcc	r3, #3
 800b094:	2304      	movcs	r3, #4
 800b096:	9347      	str	r3, [sp, #284]	; 0x11c
 800b098:	6863      	ldr	r3, [r4, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dd42      	ble.n	800b124 <__ssvfiscanf_r+0x268>
 800b09e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0a0:	0659      	lsls	r1, r3, #25
 800b0a2:	d404      	bmi.n	800b0ae <__ssvfiscanf_r+0x1f2>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	5cba      	ldrb	r2, [r7, r2]
 800b0aa:	0712      	lsls	r2, r2, #28
 800b0ac:	d441      	bmi.n	800b132 <__ssvfiscanf_r+0x276>
 800b0ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	dc50      	bgt.n	800b156 <__ssvfiscanf_r+0x29a>
 800b0b4:	466b      	mov	r3, sp
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	a941      	add	r1, sp, #260	; 0x104
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f000 f876 	bl	800b1ac <_scanf_chars>
 800b0c0:	2801      	cmp	r0, #1
 800b0c2:	d06e      	beq.n	800b1a2 <__ssvfiscanf_r+0x2e6>
 800b0c4:	2802      	cmp	r0, #2
 800b0c6:	f47f af20 	bne.w	800af0a <__ssvfiscanf_r+0x4e>
 800b0ca:	e7cf      	b.n	800b06c <__ssvfiscanf_r+0x1b0>
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	e7dd      	b.n	800b08c <__ssvfiscanf_r+0x1d0>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	9342      	str	r3, [sp, #264]	; 0x108
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e7de      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b0d8:	2308      	movs	r3, #8
 800b0da:	9342      	str	r3, [sp, #264]	; 0x108
 800b0dc:	2304      	movs	r3, #4
 800b0de:	e7da      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f000 f9c6 	bl	800b474 <__sccl>
 800b0e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ee:	9341      	str	r3, [sp, #260]	; 0x104
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e7cf      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b0f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fc:	9341      	str	r3, [sp, #260]	; 0x104
 800b0fe:	2300      	movs	r3, #0
 800b100:	e7c9      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b102:	2302      	movs	r3, #2
 800b104:	e7c7      	b.n	800b096 <__ssvfiscanf_r+0x1da>
 800b106:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b108:	06c3      	lsls	r3, r0, #27
 800b10a:	f53f aefe 	bmi.w	800af0a <__ssvfiscanf_r+0x4e>
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b112:	1d19      	adds	r1, r3, #4
 800b114:	9100      	str	r1, [sp, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f010 0f01 	tst.w	r0, #1
 800b11c:	bf14      	ite	ne
 800b11e:	801a      	strhne	r2, [r3, #0]
 800b120:	601a      	streq	r2, [r3, #0]
 800b122:	e6f2      	b.n	800af0a <__ssvfiscanf_r+0x4e>
 800b124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b126:	4621      	mov	r1, r4
 800b128:	4630      	mov	r0, r6
 800b12a:	4798      	blx	r3
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d0b6      	beq.n	800b09e <__ssvfiscanf_r+0x1e2>
 800b130:	e79c      	b.n	800b06c <__ssvfiscanf_r+0x1b0>
 800b132:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b134:	3201      	adds	r2, #1
 800b136:	9245      	str	r2, [sp, #276]	; 0x114
 800b138:	6862      	ldr	r2, [r4, #4]
 800b13a:	3a01      	subs	r2, #1
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	6062      	str	r2, [r4, #4]
 800b140:	dd02      	ble.n	800b148 <__ssvfiscanf_r+0x28c>
 800b142:	3301      	adds	r3, #1
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	e7ad      	b.n	800b0a4 <__ssvfiscanf_r+0x1e8>
 800b148:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b14a:	4621      	mov	r1, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	4798      	blx	r3
 800b150:	2800      	cmp	r0, #0
 800b152:	d0a7      	beq.n	800b0a4 <__ssvfiscanf_r+0x1e8>
 800b154:	e78a      	b.n	800b06c <__ssvfiscanf_r+0x1b0>
 800b156:	2b04      	cmp	r3, #4
 800b158:	dc0e      	bgt.n	800b178 <__ssvfiscanf_r+0x2bc>
 800b15a:	466b      	mov	r3, sp
 800b15c:	4622      	mov	r2, r4
 800b15e:	a941      	add	r1, sp, #260	; 0x104
 800b160:	4630      	mov	r0, r6
 800b162:	f000 f87d 	bl	800b260 <_scanf_i>
 800b166:	e7ab      	b.n	800b0c0 <__ssvfiscanf_r+0x204>
 800b168:	0800ae09 	.word	0x0800ae09
 800b16c:	0800ae83 	.word	0x0800ae83
 800b170:	0800ecb5 	.word	0x0800ecb5
 800b174:	0800ec52 	.word	0x0800ec52
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <__ssvfiscanf_r+0x2ec>)
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f43f aec5 	beq.w	800af0a <__ssvfiscanf_r+0x4e>
 800b180:	466b      	mov	r3, sp
 800b182:	4622      	mov	r2, r4
 800b184:	a941      	add	r1, sp, #260	; 0x104
 800b186:	4630      	mov	r0, r6
 800b188:	f3af 8000 	nop.w
 800b18c:	e798      	b.n	800b0c0 <__ssvfiscanf_r+0x204>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b194:	bf18      	it	ne
 800b196:	f04f 30ff 	movne.w	r0, #4294967295
 800b19a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1a4:	e7f9      	b.n	800b19a <__ssvfiscanf_r+0x2de>
 800b1a6:	bf00      	nop
 800b1a8:	00000000 	.word	0x00000000

0800b1ac <_scanf_chars>:
 800b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	4615      	mov	r5, r2
 800b1b2:	688a      	ldr	r2, [r1, #8]
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	b932      	cbnz	r2, 800b1c8 <_scanf_chars+0x1c>
 800b1ba:	698a      	ldr	r2, [r1, #24]
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	bf0c      	ite	eq
 800b1c0:	2201      	moveq	r2, #1
 800b1c2:	f04f 32ff 	movne.w	r2, #4294967295
 800b1c6:	608a      	str	r2, [r1, #8]
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b25c <_scanf_chars+0xb0>
 800b1ce:	06d1      	lsls	r1, r2, #27
 800b1d0:	bf5f      	itttt	pl
 800b1d2:	681a      	ldrpl	r2, [r3, #0]
 800b1d4:	1d11      	addpl	r1, r2, #4
 800b1d6:	6019      	strpl	r1, [r3, #0]
 800b1d8:	6816      	ldrpl	r6, [r2, #0]
 800b1da:	2700      	movs	r7, #0
 800b1dc:	69a0      	ldr	r0, [r4, #24]
 800b1de:	b188      	cbz	r0, 800b204 <_scanf_chars+0x58>
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d107      	bne.n	800b1f4 <_scanf_chars+0x48>
 800b1e4:	682a      	ldr	r2, [r5, #0]
 800b1e6:	7811      	ldrb	r1, [r2, #0]
 800b1e8:	6962      	ldr	r2, [r4, #20]
 800b1ea:	5c52      	ldrb	r2, [r2, r1]
 800b1ec:	b952      	cbnz	r2, 800b204 <_scanf_chars+0x58>
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	d031      	beq.n	800b256 <_scanf_chars+0xaa>
 800b1f2:	e022      	b.n	800b23a <_scanf_chars+0x8e>
 800b1f4:	2802      	cmp	r0, #2
 800b1f6:	d120      	bne.n	800b23a <_scanf_chars+0x8e>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b200:	071b      	lsls	r3, r3, #28
 800b202:	d41a      	bmi.n	800b23a <_scanf_chars+0x8e>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	06da      	lsls	r2, r3, #27
 800b208:	bf5e      	ittt	pl
 800b20a:	682b      	ldrpl	r3, [r5, #0]
 800b20c:	781b      	ldrbpl	r3, [r3, #0]
 800b20e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b212:	682a      	ldr	r2, [r5, #0]
 800b214:	686b      	ldr	r3, [r5, #4]
 800b216:	3201      	adds	r2, #1
 800b218:	602a      	str	r2, [r5, #0]
 800b21a:	68a2      	ldr	r2, [r4, #8]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	3a01      	subs	r2, #1
 800b220:	606b      	str	r3, [r5, #4]
 800b222:	3701      	adds	r7, #1
 800b224:	60a2      	str	r2, [r4, #8]
 800b226:	b142      	cbz	r2, 800b23a <_scanf_chars+0x8e>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dcd7      	bgt.n	800b1dc <_scanf_chars+0x30>
 800b22c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b230:	4629      	mov	r1, r5
 800b232:	4640      	mov	r0, r8
 800b234:	4798      	blx	r3
 800b236:	2800      	cmp	r0, #0
 800b238:	d0d0      	beq.n	800b1dc <_scanf_chars+0x30>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	f013 0310 	ands.w	r3, r3, #16
 800b240:	d105      	bne.n	800b24e <_scanf_chars+0xa2>
 800b242:	68e2      	ldr	r2, [r4, #12]
 800b244:	3201      	adds	r2, #1
 800b246:	60e2      	str	r2, [r4, #12]
 800b248:	69a2      	ldr	r2, [r4, #24]
 800b24a:	b102      	cbz	r2, 800b24e <_scanf_chars+0xa2>
 800b24c:	7033      	strb	r3, [r6, #0]
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	443b      	add	r3, r7
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	2000      	movs	r0, #0
 800b256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25a:	bf00      	nop
 800b25c:	0800ecb5 	.word	0x0800ecb5

0800b260 <_scanf_i>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	4698      	mov	r8, r3
 800b266:	4b76      	ldr	r3, [pc, #472]	; (800b440 <_scanf_i+0x1e0>)
 800b268:	460c      	mov	r4, r1
 800b26a:	4682      	mov	sl, r0
 800b26c:	4616      	mov	r6, r2
 800b26e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b272:	b087      	sub	sp, #28
 800b274:	ab03      	add	r3, sp, #12
 800b276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b27a:	4b72      	ldr	r3, [pc, #456]	; (800b444 <_scanf_i+0x1e4>)
 800b27c:	69a1      	ldr	r1, [r4, #24]
 800b27e:	4a72      	ldr	r2, [pc, #456]	; (800b448 <_scanf_i+0x1e8>)
 800b280:	2903      	cmp	r1, #3
 800b282:	bf18      	it	ne
 800b284:	461a      	movne	r2, r3
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	9201      	str	r2, [sp, #4]
 800b28a:	1e5a      	subs	r2, r3, #1
 800b28c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b290:	bf88      	it	hi
 800b292:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b296:	4627      	mov	r7, r4
 800b298:	bf82      	ittt	hi
 800b29a:	eb03 0905 	addhi.w	r9, r3, r5
 800b29e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2a2:	60a3      	strhi	r3, [r4, #8]
 800b2a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b2a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b2ac:	bf98      	it	ls
 800b2ae:	f04f 0900 	movls.w	r9, #0
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	463d      	mov	r5, r7
 800b2b6:	f04f 0b00 	mov.w	fp, #0
 800b2ba:	6831      	ldr	r1, [r6, #0]
 800b2bc:	ab03      	add	r3, sp, #12
 800b2be:	7809      	ldrb	r1, [r1, #0]
 800b2c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	f7f4 ffa3 	bl	8000210 <memchr>
 800b2ca:	b328      	cbz	r0, 800b318 <_scanf_i+0xb8>
 800b2cc:	f1bb 0f01 	cmp.w	fp, #1
 800b2d0:	d159      	bne.n	800b386 <_scanf_i+0x126>
 800b2d2:	6862      	ldr	r2, [r4, #4]
 800b2d4:	b92a      	cbnz	r2, 800b2e2 <_scanf_i+0x82>
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	2308      	movs	r3, #8
 800b2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2de:	6063      	str	r3, [r4, #4]
 800b2e0:	6022      	str	r2, [r4, #0]
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b2e8:	6022      	str	r2, [r4, #0]
 800b2ea:	68a2      	ldr	r2, [r4, #8]
 800b2ec:	1e51      	subs	r1, r2, #1
 800b2ee:	60a1      	str	r1, [r4, #8]
 800b2f0:	b192      	cbz	r2, 800b318 <_scanf_i+0xb8>
 800b2f2:	6832      	ldr	r2, [r6, #0]
 800b2f4:	1c51      	adds	r1, r2, #1
 800b2f6:	6031      	str	r1, [r6, #0]
 800b2f8:	7812      	ldrb	r2, [r2, #0]
 800b2fa:	f805 2b01 	strb.w	r2, [r5], #1
 800b2fe:	6872      	ldr	r2, [r6, #4]
 800b300:	3a01      	subs	r2, #1
 800b302:	2a00      	cmp	r2, #0
 800b304:	6072      	str	r2, [r6, #4]
 800b306:	dc07      	bgt.n	800b318 <_scanf_i+0xb8>
 800b308:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b30c:	4631      	mov	r1, r6
 800b30e:	4650      	mov	r0, sl
 800b310:	4790      	blx	r2
 800b312:	2800      	cmp	r0, #0
 800b314:	f040 8085 	bne.w	800b422 <_scanf_i+0x1c2>
 800b318:	f10b 0b01 	add.w	fp, fp, #1
 800b31c:	f1bb 0f03 	cmp.w	fp, #3
 800b320:	d1cb      	bne.n	800b2ba <_scanf_i+0x5a>
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	b90b      	cbnz	r3, 800b32a <_scanf_i+0xca>
 800b326:	230a      	movs	r3, #10
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	6863      	ldr	r3, [r4, #4]
 800b32c:	4947      	ldr	r1, [pc, #284]	; (800b44c <_scanf_i+0x1ec>)
 800b32e:	6960      	ldr	r0, [r4, #20]
 800b330:	1ac9      	subs	r1, r1, r3
 800b332:	f000 f89f 	bl	800b474 <__sccl>
 800b336:	f04f 0b00 	mov.w	fp, #0
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d03d      	beq.n	800b3be <_scanf_i+0x15e>
 800b342:	6831      	ldr	r1, [r6, #0]
 800b344:	6960      	ldr	r0, [r4, #20]
 800b346:	f891 c000 	ldrb.w	ip, [r1]
 800b34a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b34e:	2800      	cmp	r0, #0
 800b350:	d035      	beq.n	800b3be <_scanf_i+0x15e>
 800b352:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b356:	d124      	bne.n	800b3a2 <_scanf_i+0x142>
 800b358:	0510      	lsls	r0, r2, #20
 800b35a:	d522      	bpl.n	800b3a2 <_scanf_i+0x142>
 800b35c:	f10b 0b01 	add.w	fp, fp, #1
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	d003      	beq.n	800b36e <_scanf_i+0x10e>
 800b366:	3301      	adds	r3, #1
 800b368:	f109 39ff 	add.w	r9, r9, #4294967295
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	6873      	ldr	r3, [r6, #4]
 800b370:	3b01      	subs	r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	6073      	str	r3, [r6, #4]
 800b376:	dd1b      	ble.n	800b3b0 <_scanf_i+0x150>
 800b378:	6833      	ldr	r3, [r6, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	6033      	str	r3, [r6, #0]
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	3b01      	subs	r3, #1
 800b382:	60a3      	str	r3, [r4, #8]
 800b384:	e7d9      	b.n	800b33a <_scanf_i+0xda>
 800b386:	f1bb 0f02 	cmp.w	fp, #2
 800b38a:	d1ae      	bne.n	800b2ea <_scanf_i+0x8a>
 800b38c:	6822      	ldr	r2, [r4, #0]
 800b38e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b392:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b396:	d1bf      	bne.n	800b318 <_scanf_i+0xb8>
 800b398:	2310      	movs	r3, #16
 800b39a:	6063      	str	r3, [r4, #4]
 800b39c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3a0:	e7a2      	b.n	800b2e8 <_scanf_i+0x88>
 800b3a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b3a6:	6022      	str	r2, [r4, #0]
 800b3a8:	780b      	ldrb	r3, [r1, #0]
 800b3aa:	f805 3b01 	strb.w	r3, [r5], #1
 800b3ae:	e7de      	b.n	800b36e <_scanf_i+0x10e>
 800b3b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	4798      	blx	r3
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d0df      	beq.n	800b37e <_scanf_i+0x11e>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	05db      	lsls	r3, r3, #23
 800b3c2:	d50d      	bpl.n	800b3e0 <_scanf_i+0x180>
 800b3c4:	42bd      	cmp	r5, r7
 800b3c6:	d909      	bls.n	800b3dc <_scanf_i+0x17c>
 800b3c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b3cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	4798      	blx	r3
 800b3d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b3da:	464d      	mov	r5, r9
 800b3dc:	42bd      	cmp	r5, r7
 800b3de:	d02d      	beq.n	800b43c <_scanf_i+0x1dc>
 800b3e0:	6822      	ldr	r2, [r4, #0]
 800b3e2:	f012 0210 	ands.w	r2, r2, #16
 800b3e6:	d113      	bne.n	800b410 <_scanf_i+0x1b0>
 800b3e8:	702a      	strb	r2, [r5, #0]
 800b3ea:	6863      	ldr	r3, [r4, #4]
 800b3ec:	9e01      	ldr	r6, [sp, #4]
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4650      	mov	r0, sl
 800b3f2:	47b0      	blx	r6
 800b3f4:	6821      	ldr	r1, [r4, #0]
 800b3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fa:	f011 0f20 	tst.w	r1, #32
 800b3fe:	d013      	beq.n	800b428 <_scanf_i+0x1c8>
 800b400:	1d1a      	adds	r2, r3, #4
 800b402:	f8c8 2000 	str.w	r2, [r8]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6018      	str	r0, [r3, #0]
 800b40a:	68e3      	ldr	r3, [r4, #12]
 800b40c:	3301      	adds	r3, #1
 800b40e:	60e3      	str	r3, [r4, #12]
 800b410:	1bed      	subs	r5, r5, r7
 800b412:	44ab      	add	fp, r5
 800b414:	6925      	ldr	r5, [r4, #16]
 800b416:	445d      	add	r5, fp
 800b418:	6125      	str	r5, [r4, #16]
 800b41a:	2000      	movs	r0, #0
 800b41c:	b007      	add	sp, #28
 800b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b422:	f04f 0b00 	mov.w	fp, #0
 800b426:	e7ca      	b.n	800b3be <_scanf_i+0x15e>
 800b428:	1d1a      	adds	r2, r3, #4
 800b42a:	f8c8 2000 	str.w	r2, [r8]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f011 0f01 	tst.w	r1, #1
 800b434:	bf14      	ite	ne
 800b436:	8018      	strhne	r0, [r3, #0]
 800b438:	6018      	streq	r0, [r3, #0]
 800b43a:	e7e6      	b.n	800b40a <_scanf_i+0x1aa>
 800b43c:	2001      	movs	r0, #1
 800b43e:	e7ed      	b.n	800b41c <_scanf_i+0x1bc>
 800b440:	0800ea1c 	.word	0x0800ea1c
 800b444:	0800b6d1 	.word	0x0800b6d1
 800b448:	0800b5e9 	.word	0x0800b5e9
 800b44c:	0800ec76 	.word	0x0800ec76

0800b450 <_read_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d07      	ldr	r5, [pc, #28]	; (800b470 <_read_r+0x20>)
 800b454:	4604      	mov	r4, r0
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f7f7 fd36 	bl	8002ed0 <_read>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_read_r+0x1e>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_read_r+0x1e>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20011d44 	.word	0x20011d44

0800b474 <__sccl>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	780b      	ldrb	r3, [r1, #0]
 800b478:	4604      	mov	r4, r0
 800b47a:	2b5e      	cmp	r3, #94	; 0x5e
 800b47c:	bf0b      	itete	eq
 800b47e:	784b      	ldrbeq	r3, [r1, #1]
 800b480:	1c48      	addne	r0, r1, #1
 800b482:	1c88      	addeq	r0, r1, #2
 800b484:	2200      	movne	r2, #0
 800b486:	bf08      	it	eq
 800b488:	2201      	moveq	r2, #1
 800b48a:	1e61      	subs	r1, r4, #1
 800b48c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b490:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b494:	42a9      	cmp	r1, r5
 800b496:	d1fb      	bne.n	800b490 <__sccl+0x1c>
 800b498:	b90b      	cbnz	r3, 800b49e <__sccl+0x2a>
 800b49a:	3801      	subs	r0, #1
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	f082 0201 	eor.w	r2, r2, #1
 800b4a2:	54e2      	strb	r2, [r4, r3]
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b4ac:	292d      	cmp	r1, #45	; 0x2d
 800b4ae:	d006      	beq.n	800b4be <__sccl+0x4a>
 800b4b0:	295d      	cmp	r1, #93	; 0x5d
 800b4b2:	d0f3      	beq.n	800b49c <__sccl+0x28>
 800b4b4:	b909      	cbnz	r1, 800b4ba <__sccl+0x46>
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	e7f0      	b.n	800b49c <__sccl+0x28>
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	e7f1      	b.n	800b4a2 <__sccl+0x2e>
 800b4be:	786e      	ldrb	r6, [r5, #1]
 800b4c0:	2e5d      	cmp	r6, #93	; 0x5d
 800b4c2:	d0fa      	beq.n	800b4ba <__sccl+0x46>
 800b4c4:	42b3      	cmp	r3, r6
 800b4c6:	dcf8      	bgt.n	800b4ba <__sccl+0x46>
 800b4c8:	3502      	adds	r5, #2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	428e      	cmp	r6, r1
 800b4d0:	5462      	strb	r2, [r4, r1]
 800b4d2:	dcfb      	bgt.n	800b4cc <__sccl+0x58>
 800b4d4:	1af1      	subs	r1, r6, r3
 800b4d6:	3901      	subs	r1, #1
 800b4d8:	1c58      	adds	r0, r3, #1
 800b4da:	42b3      	cmp	r3, r6
 800b4dc:	bfa8      	it	ge
 800b4de:	2100      	movge	r1, #0
 800b4e0:	1843      	adds	r3, r0, r1
 800b4e2:	e7e0      	b.n	800b4a6 <__sccl+0x32>

0800b4e4 <_strtol_l.constprop.0>:
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ea:	d001      	beq.n	800b4f0 <_strtol_l.constprop.0+0xc>
 800b4ec:	2b24      	cmp	r3, #36	; 0x24
 800b4ee:	d906      	bls.n	800b4fe <_strtol_l.constprop.0+0x1a>
 800b4f0:	f7fd faa0 	bl	8008a34 <__errno>
 800b4f4:	2316      	movs	r3, #22
 800b4f6:	6003      	str	r3, [r0, #0]
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b5e4 <_strtol_l.constprop.0+0x100>
 800b502:	460d      	mov	r5, r1
 800b504:	462e      	mov	r6, r5
 800b506:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b50a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b50e:	f017 0708 	ands.w	r7, r7, #8
 800b512:	d1f7      	bne.n	800b504 <_strtol_l.constprop.0+0x20>
 800b514:	2c2d      	cmp	r4, #45	; 0x2d
 800b516:	d132      	bne.n	800b57e <_strtol_l.constprop.0+0x9a>
 800b518:	782c      	ldrb	r4, [r5, #0]
 800b51a:	2701      	movs	r7, #1
 800b51c:	1cb5      	adds	r5, r6, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d05b      	beq.n	800b5da <_strtol_l.constprop.0+0xf6>
 800b522:	2b10      	cmp	r3, #16
 800b524:	d109      	bne.n	800b53a <_strtol_l.constprop.0+0x56>
 800b526:	2c30      	cmp	r4, #48	; 0x30
 800b528:	d107      	bne.n	800b53a <_strtol_l.constprop.0+0x56>
 800b52a:	782c      	ldrb	r4, [r5, #0]
 800b52c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b530:	2c58      	cmp	r4, #88	; 0x58
 800b532:	d14d      	bne.n	800b5d0 <_strtol_l.constprop.0+0xec>
 800b534:	786c      	ldrb	r4, [r5, #1]
 800b536:	2310      	movs	r3, #16
 800b538:	3502      	adds	r5, #2
 800b53a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b53e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b542:	f04f 0c00 	mov.w	ip, #0
 800b546:	fbb8 f9f3 	udiv	r9, r8, r3
 800b54a:	4666      	mov	r6, ip
 800b54c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b550:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b554:	f1be 0f09 	cmp.w	lr, #9
 800b558:	d816      	bhi.n	800b588 <_strtol_l.constprop.0+0xa4>
 800b55a:	4674      	mov	r4, lr
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	dd24      	ble.n	800b5aa <_strtol_l.constprop.0+0xc6>
 800b560:	f1bc 0f00 	cmp.w	ip, #0
 800b564:	db1e      	blt.n	800b5a4 <_strtol_l.constprop.0+0xc0>
 800b566:	45b1      	cmp	r9, r6
 800b568:	d31c      	bcc.n	800b5a4 <_strtol_l.constprop.0+0xc0>
 800b56a:	d101      	bne.n	800b570 <_strtol_l.constprop.0+0x8c>
 800b56c:	45a2      	cmp	sl, r4
 800b56e:	db19      	blt.n	800b5a4 <_strtol_l.constprop.0+0xc0>
 800b570:	fb06 4603 	mla	r6, r6, r3, r4
 800b574:	f04f 0c01 	mov.w	ip, #1
 800b578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b57c:	e7e8      	b.n	800b550 <_strtol_l.constprop.0+0x6c>
 800b57e:	2c2b      	cmp	r4, #43	; 0x2b
 800b580:	bf04      	itt	eq
 800b582:	782c      	ldrbeq	r4, [r5, #0]
 800b584:	1cb5      	addeq	r5, r6, #2
 800b586:	e7ca      	b.n	800b51e <_strtol_l.constprop.0+0x3a>
 800b588:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b58c:	f1be 0f19 	cmp.w	lr, #25
 800b590:	d801      	bhi.n	800b596 <_strtol_l.constprop.0+0xb2>
 800b592:	3c37      	subs	r4, #55	; 0x37
 800b594:	e7e2      	b.n	800b55c <_strtol_l.constprop.0+0x78>
 800b596:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b59a:	f1be 0f19 	cmp.w	lr, #25
 800b59e:	d804      	bhi.n	800b5aa <_strtol_l.constprop.0+0xc6>
 800b5a0:	3c57      	subs	r4, #87	; 0x57
 800b5a2:	e7db      	b.n	800b55c <_strtol_l.constprop.0+0x78>
 800b5a4:	f04f 3cff 	mov.w	ip, #4294967295
 800b5a8:	e7e6      	b.n	800b578 <_strtol_l.constprop.0+0x94>
 800b5aa:	f1bc 0f00 	cmp.w	ip, #0
 800b5ae:	da05      	bge.n	800b5bc <_strtol_l.constprop.0+0xd8>
 800b5b0:	2322      	movs	r3, #34	; 0x22
 800b5b2:	6003      	str	r3, [r0, #0]
 800b5b4:	4646      	mov	r6, r8
 800b5b6:	b942      	cbnz	r2, 800b5ca <_strtol_l.constprop.0+0xe6>
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	e79e      	b.n	800b4fa <_strtol_l.constprop.0+0x16>
 800b5bc:	b107      	cbz	r7, 800b5c0 <_strtol_l.constprop.0+0xdc>
 800b5be:	4276      	negs	r6, r6
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	d0f9      	beq.n	800b5b8 <_strtol_l.constprop.0+0xd4>
 800b5c4:	f1bc 0f00 	cmp.w	ip, #0
 800b5c8:	d000      	beq.n	800b5cc <_strtol_l.constprop.0+0xe8>
 800b5ca:	1e69      	subs	r1, r5, #1
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	e7f3      	b.n	800b5b8 <_strtol_l.constprop.0+0xd4>
 800b5d0:	2430      	movs	r4, #48	; 0x30
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1b1      	bne.n	800b53a <_strtol_l.constprop.0+0x56>
 800b5d6:	2308      	movs	r3, #8
 800b5d8:	e7af      	b.n	800b53a <_strtol_l.constprop.0+0x56>
 800b5da:	2c30      	cmp	r4, #48	; 0x30
 800b5dc:	d0a5      	beq.n	800b52a <_strtol_l.constprop.0+0x46>
 800b5de:	230a      	movs	r3, #10
 800b5e0:	e7ab      	b.n	800b53a <_strtol_l.constprop.0+0x56>
 800b5e2:	bf00      	nop
 800b5e4:	0800ecb5 	.word	0x0800ecb5

0800b5e8 <_strtol_r>:
 800b5e8:	f7ff bf7c 	b.w	800b4e4 <_strtol_l.constprop.0>

0800b5ec <_strtoul_l.constprop.0>:
 800b5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4f36      	ldr	r7, [pc, #216]	; (800b6cc <_strtoul_l.constprop.0+0xe0>)
 800b5f2:	4686      	mov	lr, r0
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5fc:	5de6      	ldrb	r6, [r4, r7]
 800b5fe:	f016 0608 	ands.w	r6, r6, #8
 800b602:	d1f8      	bne.n	800b5f6 <_strtoul_l.constprop.0+0xa>
 800b604:	2c2d      	cmp	r4, #45	; 0x2d
 800b606:	d12f      	bne.n	800b668 <_strtoul_l.constprop.0+0x7c>
 800b608:	782c      	ldrb	r4, [r5, #0]
 800b60a:	2601      	movs	r6, #1
 800b60c:	1c85      	adds	r5, r0, #2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d057      	beq.n	800b6c2 <_strtoul_l.constprop.0+0xd6>
 800b612:	2b10      	cmp	r3, #16
 800b614:	d109      	bne.n	800b62a <_strtoul_l.constprop.0+0x3e>
 800b616:	2c30      	cmp	r4, #48	; 0x30
 800b618:	d107      	bne.n	800b62a <_strtoul_l.constprop.0+0x3e>
 800b61a:	7828      	ldrb	r0, [r5, #0]
 800b61c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b620:	2858      	cmp	r0, #88	; 0x58
 800b622:	d149      	bne.n	800b6b8 <_strtoul_l.constprop.0+0xcc>
 800b624:	786c      	ldrb	r4, [r5, #1]
 800b626:	2310      	movs	r3, #16
 800b628:	3502      	adds	r5, #2
 800b62a:	f04f 38ff 	mov.w	r8, #4294967295
 800b62e:	2700      	movs	r7, #0
 800b630:	fbb8 f8f3 	udiv	r8, r8, r3
 800b634:	fb03 f908 	mul.w	r9, r3, r8
 800b638:	ea6f 0909 	mvn.w	r9, r9
 800b63c:	4638      	mov	r0, r7
 800b63e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b642:	f1bc 0f09 	cmp.w	ip, #9
 800b646:	d814      	bhi.n	800b672 <_strtoul_l.constprop.0+0x86>
 800b648:	4664      	mov	r4, ip
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	dd22      	ble.n	800b694 <_strtoul_l.constprop.0+0xa8>
 800b64e:	2f00      	cmp	r7, #0
 800b650:	db1d      	blt.n	800b68e <_strtoul_l.constprop.0+0xa2>
 800b652:	4580      	cmp	r8, r0
 800b654:	d31b      	bcc.n	800b68e <_strtoul_l.constprop.0+0xa2>
 800b656:	d101      	bne.n	800b65c <_strtoul_l.constprop.0+0x70>
 800b658:	45a1      	cmp	r9, r4
 800b65a:	db18      	blt.n	800b68e <_strtoul_l.constprop.0+0xa2>
 800b65c:	fb00 4003 	mla	r0, r0, r3, r4
 800b660:	2701      	movs	r7, #1
 800b662:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b666:	e7ea      	b.n	800b63e <_strtoul_l.constprop.0+0x52>
 800b668:	2c2b      	cmp	r4, #43	; 0x2b
 800b66a:	bf04      	itt	eq
 800b66c:	782c      	ldrbeq	r4, [r5, #0]
 800b66e:	1c85      	addeq	r5, r0, #2
 800b670:	e7cd      	b.n	800b60e <_strtoul_l.constprop.0+0x22>
 800b672:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b676:	f1bc 0f19 	cmp.w	ip, #25
 800b67a:	d801      	bhi.n	800b680 <_strtoul_l.constprop.0+0x94>
 800b67c:	3c37      	subs	r4, #55	; 0x37
 800b67e:	e7e4      	b.n	800b64a <_strtoul_l.constprop.0+0x5e>
 800b680:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b684:	f1bc 0f19 	cmp.w	ip, #25
 800b688:	d804      	bhi.n	800b694 <_strtoul_l.constprop.0+0xa8>
 800b68a:	3c57      	subs	r4, #87	; 0x57
 800b68c:	e7dd      	b.n	800b64a <_strtoul_l.constprop.0+0x5e>
 800b68e:	f04f 37ff 	mov.w	r7, #4294967295
 800b692:	e7e6      	b.n	800b662 <_strtoul_l.constprop.0+0x76>
 800b694:	2f00      	cmp	r7, #0
 800b696:	da07      	bge.n	800b6a8 <_strtoul_l.constprop.0+0xbc>
 800b698:	2322      	movs	r3, #34	; 0x22
 800b69a:	f8ce 3000 	str.w	r3, [lr]
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	b932      	cbnz	r2, 800b6b2 <_strtoul_l.constprop.0+0xc6>
 800b6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6a8:	b106      	cbz	r6, 800b6ac <_strtoul_l.constprop.0+0xc0>
 800b6aa:	4240      	negs	r0, r0
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	d0f9      	beq.n	800b6a4 <_strtoul_l.constprop.0+0xb8>
 800b6b0:	b107      	cbz	r7, 800b6b4 <_strtoul_l.constprop.0+0xc8>
 800b6b2:	1e69      	subs	r1, r5, #1
 800b6b4:	6011      	str	r1, [r2, #0]
 800b6b6:	e7f5      	b.n	800b6a4 <_strtoul_l.constprop.0+0xb8>
 800b6b8:	2430      	movs	r4, #48	; 0x30
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1b5      	bne.n	800b62a <_strtoul_l.constprop.0+0x3e>
 800b6be:	2308      	movs	r3, #8
 800b6c0:	e7b3      	b.n	800b62a <_strtoul_l.constprop.0+0x3e>
 800b6c2:	2c30      	cmp	r4, #48	; 0x30
 800b6c4:	d0a9      	beq.n	800b61a <_strtoul_l.constprop.0+0x2e>
 800b6c6:	230a      	movs	r3, #10
 800b6c8:	e7af      	b.n	800b62a <_strtoul_l.constprop.0+0x3e>
 800b6ca:	bf00      	nop
 800b6cc:	0800ecb5 	.word	0x0800ecb5

0800b6d0 <_strtoul_r>:
 800b6d0:	f7ff bf8c 	b.w	800b5ec <_strtoul_l.constprop.0>

0800b6d4 <__submore>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	460c      	mov	r4, r1
 800b6da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e0:	4299      	cmp	r1, r3
 800b6e2:	d11d      	bne.n	800b720 <__submore+0x4c>
 800b6e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b6e8:	f7fd fa4a 	bl	8008b80 <_malloc_r>
 800b6ec:	b918      	cbnz	r0, 800b6f6 <__submore+0x22>
 800b6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b700:	6360      	str	r0, [r4, #52]	; 0x34
 800b702:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b706:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b70a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b70e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b712:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b716:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b71a:	6020      	str	r0, [r4, #0]
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7e8      	b.n	800b6f2 <__submore+0x1e>
 800b720:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b722:	0077      	lsls	r7, r6, #1
 800b724:	463a      	mov	r2, r7
 800b726:	f000 fa25 	bl	800bb74 <_realloc_r>
 800b72a:	4605      	mov	r5, r0
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d0de      	beq.n	800b6ee <__submore+0x1a>
 800b730:	eb00 0806 	add.w	r8, r0, r6
 800b734:	4601      	mov	r1, r0
 800b736:	4632      	mov	r2, r6
 800b738:	4640      	mov	r0, r8
 800b73a:	f7fe fe55 	bl	800a3e8 <memcpy>
 800b73e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b742:	f8c4 8000 	str.w	r8, [r4]
 800b746:	e7e9      	b.n	800b71c <__submore+0x48>

0800b748 <__assert_func>:
 800b748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b74a:	4614      	mov	r4, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b09      	ldr	r3, [pc, #36]	; (800b774 <__assert_func+0x2c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4605      	mov	r5, r0
 800b754:	68d8      	ldr	r0, [r3, #12]
 800b756:	b14c      	cbz	r4, 800b76c <__assert_func+0x24>
 800b758:	4b07      	ldr	r3, [pc, #28]	; (800b778 <__assert_func+0x30>)
 800b75a:	9100      	str	r1, [sp, #0]
 800b75c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b760:	4906      	ldr	r1, [pc, #24]	; (800b77c <__assert_func+0x34>)
 800b762:	462b      	mov	r3, r5
 800b764:	f000 f9a6 	bl	800bab4 <fiprintf>
 800b768:	f000 fc5a 	bl	800c020 <abort>
 800b76c:	4b04      	ldr	r3, [pc, #16]	; (800b780 <__assert_func+0x38>)
 800b76e:	461c      	mov	r4, r3
 800b770:	e7f3      	b.n	800b75a <__assert_func+0x12>
 800b772:	bf00      	nop
 800b774:	20000014 	.word	0x20000014
 800b778:	0800ec78 	.word	0x0800ec78
 800b77c:	0800ec85 	.word	0x0800ec85
 800b780:	0800ecb3 	.word	0x0800ecb3

0800b784 <__sflush_r>:
 800b784:	898a      	ldrh	r2, [r1, #12]
 800b786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78a:	4605      	mov	r5, r0
 800b78c:	0710      	lsls	r0, r2, #28
 800b78e:	460c      	mov	r4, r1
 800b790:	d458      	bmi.n	800b844 <__sflush_r+0xc0>
 800b792:	684b      	ldr	r3, [r1, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	dc05      	bgt.n	800b7a4 <__sflush_r+0x20>
 800b798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dc02      	bgt.n	800b7a4 <__sflush_r+0x20>
 800b79e:	2000      	movs	r0, #0
 800b7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	d0f9      	beq.n	800b79e <__sflush_r+0x1a>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7b0:	682f      	ldr	r7, [r5, #0]
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	d032      	beq.n	800b81c <__sflush_r+0x98>
 800b7b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	075a      	lsls	r2, r3, #29
 800b7bc:	d505      	bpl.n	800b7ca <__sflush_r+0x46>
 800b7be:	6863      	ldr	r3, [r4, #4]
 800b7c0:	1ac0      	subs	r0, r0, r3
 800b7c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7c4:	b10b      	cbz	r3, 800b7ca <__sflush_r+0x46>
 800b7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7c8:	1ac0      	subs	r0, r0, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d0:	6a21      	ldr	r1, [r4, #32]
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b0      	blx	r6
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	d106      	bne.n	800b7ea <__sflush_r+0x66>
 800b7dc:	6829      	ldr	r1, [r5, #0]
 800b7de:	291d      	cmp	r1, #29
 800b7e0:	d82c      	bhi.n	800b83c <__sflush_r+0xb8>
 800b7e2:	4a2a      	ldr	r2, [pc, #168]	; (800b88c <__sflush_r+0x108>)
 800b7e4:	40ca      	lsrs	r2, r1
 800b7e6:	07d6      	lsls	r6, r2, #31
 800b7e8:	d528      	bpl.n	800b83c <__sflush_r+0xb8>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	6062      	str	r2, [r4, #4]
 800b7ee:	04d9      	lsls	r1, r3, #19
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	6022      	str	r2, [r4, #0]
 800b7f4:	d504      	bpl.n	800b800 <__sflush_r+0x7c>
 800b7f6:	1c42      	adds	r2, r0, #1
 800b7f8:	d101      	bne.n	800b7fe <__sflush_r+0x7a>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b903      	cbnz	r3, 800b800 <__sflush_r+0x7c>
 800b7fe:	6560      	str	r0, [r4, #84]	; 0x54
 800b800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b802:	602f      	str	r7, [r5, #0]
 800b804:	2900      	cmp	r1, #0
 800b806:	d0ca      	beq.n	800b79e <__sflush_r+0x1a>
 800b808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b80c:	4299      	cmp	r1, r3
 800b80e:	d002      	beq.n	800b816 <__sflush_r+0x92>
 800b810:	4628      	mov	r0, r5
 800b812:	f7fd f949 	bl	8008aa8 <_free_r>
 800b816:	2000      	movs	r0, #0
 800b818:	6360      	str	r0, [r4, #52]	; 0x34
 800b81a:	e7c1      	b.n	800b7a0 <__sflush_r+0x1c>
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	2301      	movs	r3, #1
 800b820:	4628      	mov	r0, r5
 800b822:	47b0      	blx	r6
 800b824:	1c41      	adds	r1, r0, #1
 800b826:	d1c7      	bne.n	800b7b8 <__sflush_r+0x34>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d0c4      	beq.n	800b7b8 <__sflush_r+0x34>
 800b82e:	2b1d      	cmp	r3, #29
 800b830:	d001      	beq.n	800b836 <__sflush_r+0xb2>
 800b832:	2b16      	cmp	r3, #22
 800b834:	d101      	bne.n	800b83a <__sflush_r+0xb6>
 800b836:	602f      	str	r7, [r5, #0]
 800b838:	e7b1      	b.n	800b79e <__sflush_r+0x1a>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	e7ad      	b.n	800b7a0 <__sflush_r+0x1c>
 800b844:	690f      	ldr	r7, [r1, #16]
 800b846:	2f00      	cmp	r7, #0
 800b848:	d0a9      	beq.n	800b79e <__sflush_r+0x1a>
 800b84a:	0793      	lsls	r3, r2, #30
 800b84c:	680e      	ldr	r6, [r1, #0]
 800b84e:	bf08      	it	eq
 800b850:	694b      	ldreq	r3, [r1, #20]
 800b852:	600f      	str	r7, [r1, #0]
 800b854:	bf18      	it	ne
 800b856:	2300      	movne	r3, #0
 800b858:	eba6 0807 	sub.w	r8, r6, r7
 800b85c:	608b      	str	r3, [r1, #8]
 800b85e:	f1b8 0f00 	cmp.w	r8, #0
 800b862:	dd9c      	ble.n	800b79e <__sflush_r+0x1a>
 800b864:	6a21      	ldr	r1, [r4, #32]
 800b866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b868:	4643      	mov	r3, r8
 800b86a:	463a      	mov	r2, r7
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	2800      	cmp	r0, #0
 800b872:	dc06      	bgt.n	800b882 <__sflush_r+0xfe>
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e78e      	b.n	800b7a0 <__sflush_r+0x1c>
 800b882:	4407      	add	r7, r0
 800b884:	eba8 0800 	sub.w	r8, r8, r0
 800b888:	e7e9      	b.n	800b85e <__sflush_r+0xda>
 800b88a:	bf00      	nop
 800b88c:	20400001 	.word	0x20400001

0800b890 <_fflush_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	690b      	ldr	r3, [r1, #16]
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b913      	cbnz	r3, 800b8a0 <_fflush_r+0x10>
 800b89a:	2500      	movs	r5, #0
 800b89c:	4628      	mov	r0, r5
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	b118      	cbz	r0, 800b8aa <_fflush_r+0x1a>
 800b8a2:	6983      	ldr	r3, [r0, #24]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <_fflush_r+0x1a>
 800b8a6:	f000 f887 	bl	800b9b8 <__sinit>
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <_fflush_r+0x6c>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	d11b      	bne.n	800b8e8 <_fflush_r+0x58>
 800b8b0:	686c      	ldr	r4, [r5, #4]
 800b8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0ef      	beq.n	800b89a <_fflush_r+0xa>
 800b8ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8bc:	07d0      	lsls	r0, r2, #31
 800b8be:	d404      	bmi.n	800b8ca <_fflush_r+0x3a>
 800b8c0:	0599      	lsls	r1, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_fflush_r+0x3a>
 800b8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c6:	f000 f927 	bl	800bb18 <__retarget_lock_acquire_recursive>
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	f7ff ff59 	bl	800b784 <__sflush_r>
 800b8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d4:	07da      	lsls	r2, r3, #31
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	d4e0      	bmi.n	800b89c <_fflush_r+0xc>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	059b      	lsls	r3, r3, #22
 800b8de:	d4dd      	bmi.n	800b89c <_fflush_r+0xc>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e2:	f000 f91a 	bl	800bb1a <__retarget_lock_release_recursive>
 800b8e6:	e7d9      	b.n	800b89c <_fflush_r+0xc>
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <_fflush_r+0x70>)
 800b8ea:	429c      	cmp	r4, r3
 800b8ec:	d101      	bne.n	800b8f2 <_fflush_r+0x62>
 800b8ee:	68ac      	ldr	r4, [r5, #8]
 800b8f0:	e7df      	b.n	800b8b2 <_fflush_r+0x22>
 800b8f2:	4b04      	ldr	r3, [pc, #16]	; (800b904 <_fflush_r+0x74>)
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	bf08      	it	eq
 800b8f8:	68ec      	ldreq	r4, [r5, #12]
 800b8fa:	e7da      	b.n	800b8b2 <_fflush_r+0x22>
 800b8fc:	0800edd8 	.word	0x0800edd8
 800b900:	0800edf8 	.word	0x0800edf8
 800b904:	0800edb8 	.word	0x0800edb8

0800b908 <std>:
 800b908:	2300      	movs	r3, #0
 800b90a:	b510      	push	{r4, lr}
 800b90c:	4604      	mov	r4, r0
 800b90e:	e9c0 3300 	strd	r3, r3, [r0]
 800b912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b916:	6083      	str	r3, [r0, #8]
 800b918:	8181      	strh	r1, [r0, #12]
 800b91a:	6643      	str	r3, [r0, #100]	; 0x64
 800b91c:	81c2      	strh	r2, [r0, #14]
 800b91e:	6183      	str	r3, [r0, #24]
 800b920:	4619      	mov	r1, r3
 800b922:	2208      	movs	r2, #8
 800b924:	305c      	adds	r0, #92	; 0x5c
 800b926:	f7fd f8b7 	bl	8008a98 <memset>
 800b92a:	4b05      	ldr	r3, [pc, #20]	; (800b940 <std+0x38>)
 800b92c:	6263      	str	r3, [r4, #36]	; 0x24
 800b92e:	4b05      	ldr	r3, [pc, #20]	; (800b944 <std+0x3c>)
 800b930:	62a3      	str	r3, [r4, #40]	; 0x28
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <std+0x40>)
 800b934:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x44>)
 800b938:	6224      	str	r4, [r4, #32]
 800b93a:	6323      	str	r3, [r4, #48]	; 0x30
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	bf00      	nop
 800b940:	080095f5 	.word	0x080095f5
 800b944:	0800961b 	.word	0x0800961b
 800b948:	08009653 	.word	0x08009653
 800b94c:	08009677 	.word	0x08009677

0800b950 <_cleanup_r>:
 800b950:	4901      	ldr	r1, [pc, #4]	; (800b958 <_cleanup_r+0x8>)
 800b952:	f000 b8c1 	b.w	800bad8 <_fwalk_reent>
 800b956:	bf00      	nop
 800b958:	0800b891 	.word	0x0800b891

0800b95c <__sfmoreglue>:
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	2268      	movs	r2, #104	; 0x68
 800b960:	1e4d      	subs	r5, r1, #1
 800b962:	4355      	muls	r5, r2
 800b964:	460e      	mov	r6, r1
 800b966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b96a:	f7fd f909 	bl	8008b80 <_malloc_r>
 800b96e:	4604      	mov	r4, r0
 800b970:	b140      	cbz	r0, 800b984 <__sfmoreglue+0x28>
 800b972:	2100      	movs	r1, #0
 800b974:	e9c0 1600 	strd	r1, r6, [r0]
 800b978:	300c      	adds	r0, #12
 800b97a:	60a0      	str	r0, [r4, #8]
 800b97c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b980:	f7fd f88a 	bl	8008a98 <memset>
 800b984:	4620      	mov	r0, r4
 800b986:	bd70      	pop	{r4, r5, r6, pc}

0800b988 <__sfp_lock_acquire>:
 800b988:	4801      	ldr	r0, [pc, #4]	; (800b990 <__sfp_lock_acquire+0x8>)
 800b98a:	f000 b8c5 	b.w	800bb18 <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	20011d49 	.word	0x20011d49

0800b994 <__sfp_lock_release>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__sfp_lock_release+0x8>)
 800b996:	f000 b8c0 	b.w	800bb1a <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	20011d49 	.word	0x20011d49

0800b9a0 <__sinit_lock_acquire>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__sinit_lock_acquire+0x8>)
 800b9a2:	f000 b8b9 	b.w	800bb18 <__retarget_lock_acquire_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	20011d4a 	.word	0x20011d4a

0800b9ac <__sinit_lock_release>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__sinit_lock_release+0x8>)
 800b9ae:	f000 b8b4 	b.w	800bb1a <__retarget_lock_release_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	20011d4a 	.word	0x20011d4a

0800b9b8 <__sinit>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	f7ff fff0 	bl	800b9a0 <__sinit_lock_acquire>
 800b9c0:	69a3      	ldr	r3, [r4, #24]
 800b9c2:	b11b      	cbz	r3, 800b9cc <__sinit+0x14>
 800b9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c8:	f7ff bff0 	b.w	800b9ac <__sinit_lock_release>
 800b9cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9d2:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <__sinit+0x68>)
 800b9d4:	4a13      	ldr	r2, [pc, #76]	; (800ba24 <__sinit+0x6c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	bf04      	itt	eq
 800b9de:	2301      	moveq	r3, #1
 800b9e0:	61a3      	streq	r3, [r4, #24]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 f820 	bl	800ba28 <__sfp>
 800b9e8:	6060      	str	r0, [r4, #4]
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 f81c 	bl	800ba28 <__sfp>
 800b9f0:	60a0      	str	r0, [r4, #8]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f818 	bl	800ba28 <__sfp>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	60e0      	str	r0, [r4, #12]
 800b9fc:	2104      	movs	r1, #4
 800b9fe:	6860      	ldr	r0, [r4, #4]
 800ba00:	f7ff ff82 	bl	800b908 <std>
 800ba04:	68a0      	ldr	r0, [r4, #8]
 800ba06:	2201      	movs	r2, #1
 800ba08:	2109      	movs	r1, #9
 800ba0a:	f7ff ff7d 	bl	800b908 <std>
 800ba0e:	68e0      	ldr	r0, [r4, #12]
 800ba10:	2202      	movs	r2, #2
 800ba12:	2112      	movs	r1, #18
 800ba14:	f7ff ff78 	bl	800b908 <std>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	61a3      	str	r3, [r4, #24]
 800ba1c:	e7d2      	b.n	800b9c4 <__sinit+0xc>
 800ba1e:	bf00      	nop
 800ba20:	0800ea28 	.word	0x0800ea28
 800ba24:	0800b951 	.word	0x0800b951

0800ba28 <__sfp>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	f7ff ffac 	bl	800b988 <__sfp_lock_acquire>
 800ba30:	4b1e      	ldr	r3, [pc, #120]	; (800baac <__sfp+0x84>)
 800ba32:	681e      	ldr	r6, [r3, #0]
 800ba34:	69b3      	ldr	r3, [r6, #24]
 800ba36:	b913      	cbnz	r3, 800ba3e <__sfp+0x16>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff ffbd 	bl	800b9b8 <__sinit>
 800ba3e:	3648      	adds	r6, #72	; 0x48
 800ba40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	d503      	bpl.n	800ba50 <__sfp+0x28>
 800ba48:	6833      	ldr	r3, [r6, #0]
 800ba4a:	b30b      	cbz	r3, 800ba90 <__sfp+0x68>
 800ba4c:	6836      	ldr	r6, [r6, #0]
 800ba4e:	e7f7      	b.n	800ba40 <__sfp+0x18>
 800ba50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba54:	b9d5      	cbnz	r5, 800ba8c <__sfp+0x64>
 800ba56:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <__sfp+0x88>)
 800ba58:	60e3      	str	r3, [r4, #12]
 800ba5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba60:	f000 f859 	bl	800bb16 <__retarget_lock_init_recursive>
 800ba64:	f7ff ff96 	bl	800b994 <__sfp_lock_release>
 800ba68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba70:	6025      	str	r5, [r4, #0]
 800ba72:	61a5      	str	r5, [r4, #24]
 800ba74:	2208      	movs	r2, #8
 800ba76:	4629      	mov	r1, r5
 800ba78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba7c:	f7fd f80c 	bl	8008a98 <memset>
 800ba80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba88:	4620      	mov	r0, r4
 800ba8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8c:	3468      	adds	r4, #104	; 0x68
 800ba8e:	e7d9      	b.n	800ba44 <__sfp+0x1c>
 800ba90:	2104      	movs	r1, #4
 800ba92:	4638      	mov	r0, r7
 800ba94:	f7ff ff62 	bl	800b95c <__sfmoreglue>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	6030      	str	r0, [r6, #0]
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d1d5      	bne.n	800ba4c <__sfp+0x24>
 800baa0:	f7ff ff78 	bl	800b994 <__sfp_lock_release>
 800baa4:	230c      	movs	r3, #12
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	e7ee      	b.n	800ba88 <__sfp+0x60>
 800baaa:	bf00      	nop
 800baac:	0800ea28 	.word	0x0800ea28
 800bab0:	ffff0001 	.word	0xffff0001

0800bab4 <fiprintf>:
 800bab4:	b40e      	push	{r1, r2, r3}
 800bab6:	b503      	push	{r0, r1, lr}
 800bab8:	4601      	mov	r1, r0
 800baba:	ab03      	add	r3, sp, #12
 800babc:	4805      	ldr	r0, [pc, #20]	; (800bad4 <fiprintf+0x20>)
 800babe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac2:	6800      	ldr	r0, [r0, #0]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	f000 f8ad 	bl	800bc24 <_vfiprintf_r>
 800baca:	b002      	add	sp, #8
 800bacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bad0:	b003      	add	sp, #12
 800bad2:	4770      	bx	lr
 800bad4:	20000014 	.word	0x20000014

0800bad8 <_fwalk_reent>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4606      	mov	r6, r0
 800bade:	4688      	mov	r8, r1
 800bae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bae4:	2700      	movs	r7, #0
 800bae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baea:	f1b9 0901 	subs.w	r9, r9, #1
 800baee:	d505      	bpl.n	800bafc <_fwalk_reent+0x24>
 800baf0:	6824      	ldr	r4, [r4, #0]
 800baf2:	2c00      	cmp	r4, #0
 800baf4:	d1f7      	bne.n	800bae6 <_fwalk_reent+0xe>
 800baf6:	4638      	mov	r0, r7
 800baf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bafc:	89ab      	ldrh	r3, [r5, #12]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d907      	bls.n	800bb12 <_fwalk_reent+0x3a>
 800bb02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb06:	3301      	adds	r3, #1
 800bb08:	d003      	beq.n	800bb12 <_fwalk_reent+0x3a>
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	47c0      	blx	r8
 800bb10:	4307      	orrs	r7, r0
 800bb12:	3568      	adds	r5, #104	; 0x68
 800bb14:	e7e9      	b.n	800baea <_fwalk_reent+0x12>

0800bb16 <__retarget_lock_init_recursive>:
 800bb16:	4770      	bx	lr

0800bb18 <__retarget_lock_acquire_recursive>:
 800bb18:	4770      	bx	lr

0800bb1a <__retarget_lock_release_recursive>:
 800bb1a:	4770      	bx	lr

0800bb1c <__ascii_mbtowc>:
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	b901      	cbnz	r1, 800bb22 <__ascii_mbtowc+0x6>
 800bb20:	a901      	add	r1, sp, #4
 800bb22:	b142      	cbz	r2, 800bb36 <__ascii_mbtowc+0x1a>
 800bb24:	b14b      	cbz	r3, 800bb3a <__ascii_mbtowc+0x1e>
 800bb26:	7813      	ldrb	r3, [r2, #0]
 800bb28:	600b      	str	r3, [r1, #0]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	1e10      	subs	r0, r2, #0
 800bb2e:	bf18      	it	ne
 800bb30:	2001      	movne	r0, #1
 800bb32:	b002      	add	sp, #8
 800bb34:	4770      	bx	lr
 800bb36:	4610      	mov	r0, r2
 800bb38:	e7fb      	b.n	800bb32 <__ascii_mbtowc+0x16>
 800bb3a:	f06f 0001 	mvn.w	r0, #1
 800bb3e:	e7f8      	b.n	800bb32 <__ascii_mbtowc+0x16>

0800bb40 <memmove>:
 800bb40:	4288      	cmp	r0, r1
 800bb42:	b510      	push	{r4, lr}
 800bb44:	eb01 0402 	add.w	r4, r1, r2
 800bb48:	d902      	bls.n	800bb50 <memmove+0x10>
 800bb4a:	4284      	cmp	r4, r0
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	d807      	bhi.n	800bb60 <memmove+0x20>
 800bb50:	1e43      	subs	r3, r0, #1
 800bb52:	42a1      	cmp	r1, r4
 800bb54:	d008      	beq.n	800bb68 <memmove+0x28>
 800bb56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb5e:	e7f8      	b.n	800bb52 <memmove+0x12>
 800bb60:	4402      	add	r2, r0
 800bb62:	4601      	mov	r1, r0
 800bb64:	428a      	cmp	r2, r1
 800bb66:	d100      	bne.n	800bb6a <memmove+0x2a>
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb72:	e7f7      	b.n	800bb64 <memmove+0x24>

0800bb74 <_realloc_r>:
 800bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	b921      	cbnz	r1, 800bb8a <_realloc_r+0x16>
 800bb80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb84:	4611      	mov	r1, r2
 800bb86:	f7fc bffb 	b.w	8008b80 <_malloc_r>
 800bb8a:	b92a      	cbnz	r2, 800bb98 <_realloc_r+0x24>
 800bb8c:	f7fc ff8c 	bl	8008aa8 <_free_r>
 800bb90:	4625      	mov	r5, r4
 800bb92:	4628      	mov	r0, r5
 800bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb98:	f000 faae 	bl	800c0f8 <_malloc_usable_size_r>
 800bb9c:	4284      	cmp	r4, r0
 800bb9e:	4607      	mov	r7, r0
 800bba0:	d802      	bhi.n	800bba8 <_realloc_r+0x34>
 800bba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bba6:	d812      	bhi.n	800bbce <_realloc_r+0x5a>
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4640      	mov	r0, r8
 800bbac:	f7fc ffe8 	bl	8008b80 <_malloc_r>
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0ed      	beq.n	800bb92 <_realloc_r+0x1e>
 800bbb6:	42bc      	cmp	r4, r7
 800bbb8:	4622      	mov	r2, r4
 800bbba:	4631      	mov	r1, r6
 800bbbc:	bf28      	it	cs
 800bbbe:	463a      	movcs	r2, r7
 800bbc0:	f7fe fc12 	bl	800a3e8 <memcpy>
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	f7fc ff6e 	bl	8008aa8 <_free_r>
 800bbcc:	e7e1      	b.n	800bb92 <_realloc_r+0x1e>
 800bbce:	4635      	mov	r5, r6
 800bbd0:	e7df      	b.n	800bb92 <_realloc_r+0x1e>

0800bbd2 <__sfputc_r>:
 800bbd2:	6893      	ldr	r3, [r2, #8]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	b410      	push	{r4}
 800bbda:	6093      	str	r3, [r2, #8]
 800bbdc:	da08      	bge.n	800bbf0 <__sfputc_r+0x1e>
 800bbde:	6994      	ldr	r4, [r2, #24]
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	db01      	blt.n	800bbe8 <__sfputc_r+0x16>
 800bbe4:	290a      	cmp	r1, #10
 800bbe6:	d103      	bne.n	800bbf0 <__sfputc_r+0x1e>
 800bbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbec:	f000 b94a 	b.w	800be84 <__swbuf_r>
 800bbf0:	6813      	ldr	r3, [r2, #0]
 800bbf2:	1c58      	adds	r0, r3, #1
 800bbf4:	6010      	str	r0, [r2, #0]
 800bbf6:	7019      	strb	r1, [r3, #0]
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <__sfputs_r>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	4614      	mov	r4, r2
 800bc08:	18d5      	adds	r5, r2, r3
 800bc0a:	42ac      	cmp	r4, r5
 800bc0c:	d101      	bne.n	800bc12 <__sfputs_r+0x12>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e007      	b.n	800bc22 <__sfputs_r+0x22>
 800bc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc16:	463a      	mov	r2, r7
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7ff ffda 	bl	800bbd2 <__sfputc_r>
 800bc1e:	1c43      	adds	r3, r0, #1
 800bc20:	d1f3      	bne.n	800bc0a <__sfputs_r+0xa>
 800bc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc24 <_vfiprintf_r>:
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	460d      	mov	r5, r1
 800bc2a:	b09d      	sub	sp, #116	; 0x74
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	4698      	mov	r8, r3
 800bc30:	4606      	mov	r6, r0
 800bc32:	b118      	cbz	r0, 800bc3c <_vfiprintf_r+0x18>
 800bc34:	6983      	ldr	r3, [r0, #24]
 800bc36:	b90b      	cbnz	r3, 800bc3c <_vfiprintf_r+0x18>
 800bc38:	f7ff febe 	bl	800b9b8 <__sinit>
 800bc3c:	4b89      	ldr	r3, [pc, #548]	; (800be64 <_vfiprintf_r+0x240>)
 800bc3e:	429d      	cmp	r5, r3
 800bc40:	d11b      	bne.n	800bc7a <_vfiprintf_r+0x56>
 800bc42:	6875      	ldr	r5, [r6, #4]
 800bc44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_vfiprintf_r+0x32>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_vfiprintf_r+0x32>
 800bc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc52:	f7ff ff61 	bl	800bb18 <__retarget_lock_acquire_recursive>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	071b      	lsls	r3, r3, #28
 800bc5a:	d501      	bpl.n	800bc60 <_vfiprintf_r+0x3c>
 800bc5c:	692b      	ldr	r3, [r5, #16]
 800bc5e:	b9eb      	cbnz	r3, 800bc9c <_vfiprintf_r+0x78>
 800bc60:	4629      	mov	r1, r5
 800bc62:	4630      	mov	r0, r6
 800bc64:	f000 f96e 	bl	800bf44 <__swsetup_r>
 800bc68:	b1c0      	cbz	r0, 800bc9c <_vfiprintf_r+0x78>
 800bc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc6c:	07dc      	lsls	r4, r3, #31
 800bc6e:	d50e      	bpl.n	800bc8e <_vfiprintf_r+0x6a>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	b01d      	add	sp, #116	; 0x74
 800bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7a:	4b7b      	ldr	r3, [pc, #492]	; (800be68 <_vfiprintf_r+0x244>)
 800bc7c:	429d      	cmp	r5, r3
 800bc7e:	d101      	bne.n	800bc84 <_vfiprintf_r+0x60>
 800bc80:	68b5      	ldr	r5, [r6, #8]
 800bc82:	e7df      	b.n	800bc44 <_vfiprintf_r+0x20>
 800bc84:	4b79      	ldr	r3, [pc, #484]	; (800be6c <_vfiprintf_r+0x248>)
 800bc86:	429d      	cmp	r5, r3
 800bc88:	bf08      	it	eq
 800bc8a:	68f5      	ldreq	r5, [r6, #12]
 800bc8c:	e7da      	b.n	800bc44 <_vfiprintf_r+0x20>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	0598      	lsls	r0, r3, #22
 800bc92:	d4ed      	bmi.n	800bc70 <_vfiprintf_r+0x4c>
 800bc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc96:	f7ff ff40 	bl	800bb1a <__retarget_lock_release_recursive>
 800bc9a:	e7e9      	b.n	800bc70 <_vfiprintf_r+0x4c>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bca0:	2320      	movs	r3, #32
 800bca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bca6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcaa:	2330      	movs	r3, #48	; 0x30
 800bcac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be70 <_vfiprintf_r+0x24c>
 800bcb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcb4:	f04f 0901 	mov.w	r9, #1
 800bcb8:	4623      	mov	r3, r4
 800bcba:	469a      	mov	sl, r3
 800bcbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcc0:	b10a      	cbz	r2, 800bcc6 <_vfiprintf_r+0xa2>
 800bcc2:	2a25      	cmp	r2, #37	; 0x25
 800bcc4:	d1f9      	bne.n	800bcba <_vfiprintf_r+0x96>
 800bcc6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcca:	d00b      	beq.n	800bce4 <_vfiprintf_r+0xc0>
 800bccc:	465b      	mov	r3, fp
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff ff94 	bl	800bc00 <__sfputs_r>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	f000 80aa 	beq.w	800be32 <_vfiprintf_r+0x20e>
 800bcde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bce0:	445a      	add	r2, fp
 800bce2:	9209      	str	r2, [sp, #36]	; 0x24
 800bce4:	f89a 3000 	ldrb.w	r3, [sl]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80a2 	beq.w	800be32 <_vfiprintf_r+0x20e>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcf8:	f10a 0a01 	add.w	sl, sl, #1
 800bcfc:	9304      	str	r3, [sp, #16]
 800bcfe:	9307      	str	r3, [sp, #28]
 800bd00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd04:	931a      	str	r3, [sp, #104]	; 0x68
 800bd06:	4654      	mov	r4, sl
 800bd08:	2205      	movs	r2, #5
 800bd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0e:	4858      	ldr	r0, [pc, #352]	; (800be70 <_vfiprintf_r+0x24c>)
 800bd10:	f7f4 fa7e 	bl	8000210 <memchr>
 800bd14:	9a04      	ldr	r2, [sp, #16]
 800bd16:	b9d8      	cbnz	r0, 800bd50 <_vfiprintf_r+0x12c>
 800bd18:	06d1      	lsls	r1, r2, #27
 800bd1a:	bf44      	itt	mi
 800bd1c:	2320      	movmi	r3, #32
 800bd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd22:	0713      	lsls	r3, r2, #28
 800bd24:	bf44      	itt	mi
 800bd26:	232b      	movmi	r3, #43	; 0x2b
 800bd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd30:	2b2a      	cmp	r3, #42	; 0x2a
 800bd32:	d015      	beq.n	800bd60 <_vfiprintf_r+0x13c>
 800bd34:	9a07      	ldr	r2, [sp, #28]
 800bd36:	4654      	mov	r4, sl
 800bd38:	2000      	movs	r0, #0
 800bd3a:	f04f 0c0a 	mov.w	ip, #10
 800bd3e:	4621      	mov	r1, r4
 800bd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd44:	3b30      	subs	r3, #48	; 0x30
 800bd46:	2b09      	cmp	r3, #9
 800bd48:	d94e      	bls.n	800bde8 <_vfiprintf_r+0x1c4>
 800bd4a:	b1b0      	cbz	r0, 800bd7a <_vfiprintf_r+0x156>
 800bd4c:	9207      	str	r2, [sp, #28]
 800bd4e:	e014      	b.n	800bd7a <_vfiprintf_r+0x156>
 800bd50:	eba0 0308 	sub.w	r3, r0, r8
 800bd54:	fa09 f303 	lsl.w	r3, r9, r3
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	46a2      	mov	sl, r4
 800bd5e:	e7d2      	b.n	800bd06 <_vfiprintf_r+0xe2>
 800bd60:	9b03      	ldr	r3, [sp, #12]
 800bd62:	1d19      	adds	r1, r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	9103      	str	r1, [sp, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bfbb      	ittet	lt
 800bd6c:	425b      	neglt	r3, r3
 800bd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd72:	9307      	strge	r3, [sp, #28]
 800bd74:	9307      	strlt	r3, [sp, #28]
 800bd76:	bfb8      	it	lt
 800bd78:	9204      	strlt	r2, [sp, #16]
 800bd7a:	7823      	ldrb	r3, [r4, #0]
 800bd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd7e:	d10c      	bne.n	800bd9a <_vfiprintf_r+0x176>
 800bd80:	7863      	ldrb	r3, [r4, #1]
 800bd82:	2b2a      	cmp	r3, #42	; 0x2a
 800bd84:	d135      	bne.n	800bdf2 <_vfiprintf_r+0x1ce>
 800bd86:	9b03      	ldr	r3, [sp, #12]
 800bd88:	1d1a      	adds	r2, r3, #4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	9203      	str	r2, [sp, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	bfb8      	it	lt
 800bd92:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd96:	3402      	adds	r4, #2
 800bd98:	9305      	str	r3, [sp, #20]
 800bd9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be80 <_vfiprintf_r+0x25c>
 800bd9e:	7821      	ldrb	r1, [r4, #0]
 800bda0:	2203      	movs	r2, #3
 800bda2:	4650      	mov	r0, sl
 800bda4:	f7f4 fa34 	bl	8000210 <memchr>
 800bda8:	b140      	cbz	r0, 800bdbc <_vfiprintf_r+0x198>
 800bdaa:	2340      	movs	r3, #64	; 0x40
 800bdac:	eba0 000a 	sub.w	r0, r0, sl
 800bdb0:	fa03 f000 	lsl.w	r0, r3, r0
 800bdb4:	9b04      	ldr	r3, [sp, #16]
 800bdb6:	4303      	orrs	r3, r0
 800bdb8:	3401      	adds	r4, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc0:	482c      	ldr	r0, [pc, #176]	; (800be74 <_vfiprintf_r+0x250>)
 800bdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdc6:	2206      	movs	r2, #6
 800bdc8:	f7f4 fa22 	bl	8000210 <memchr>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d03f      	beq.n	800be50 <_vfiprintf_r+0x22c>
 800bdd0:	4b29      	ldr	r3, [pc, #164]	; (800be78 <_vfiprintf_r+0x254>)
 800bdd2:	bb1b      	cbnz	r3, 800be1c <_vfiprintf_r+0x1f8>
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	3307      	adds	r3, #7
 800bdd8:	f023 0307 	bic.w	r3, r3, #7
 800bddc:	3308      	adds	r3, #8
 800bdde:	9303      	str	r3, [sp, #12]
 800bde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde2:	443b      	add	r3, r7
 800bde4:	9309      	str	r3, [sp, #36]	; 0x24
 800bde6:	e767      	b.n	800bcb8 <_vfiprintf_r+0x94>
 800bde8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdec:	460c      	mov	r4, r1
 800bdee:	2001      	movs	r0, #1
 800bdf0:	e7a5      	b.n	800bd3e <_vfiprintf_r+0x11a>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	3401      	adds	r4, #1
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f04f 0c0a 	mov.w	ip, #10
 800bdfe:	4620      	mov	r0, r4
 800be00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be04:	3a30      	subs	r2, #48	; 0x30
 800be06:	2a09      	cmp	r2, #9
 800be08:	d903      	bls.n	800be12 <_vfiprintf_r+0x1ee>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0c5      	beq.n	800bd9a <_vfiprintf_r+0x176>
 800be0e:	9105      	str	r1, [sp, #20]
 800be10:	e7c3      	b.n	800bd9a <_vfiprintf_r+0x176>
 800be12:	fb0c 2101 	mla	r1, ip, r1, r2
 800be16:	4604      	mov	r4, r0
 800be18:	2301      	movs	r3, #1
 800be1a:	e7f0      	b.n	800bdfe <_vfiprintf_r+0x1da>
 800be1c:	ab03      	add	r3, sp, #12
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	462a      	mov	r2, r5
 800be22:	4b16      	ldr	r3, [pc, #88]	; (800be7c <_vfiprintf_r+0x258>)
 800be24:	a904      	add	r1, sp, #16
 800be26:	4630      	mov	r0, r6
 800be28:	f7fc ffbe 	bl	8008da8 <_printf_float>
 800be2c:	4607      	mov	r7, r0
 800be2e:	1c78      	adds	r0, r7, #1
 800be30:	d1d6      	bne.n	800bde0 <_vfiprintf_r+0x1bc>
 800be32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be34:	07d9      	lsls	r1, r3, #31
 800be36:	d405      	bmi.n	800be44 <_vfiprintf_r+0x220>
 800be38:	89ab      	ldrh	r3, [r5, #12]
 800be3a:	059a      	lsls	r2, r3, #22
 800be3c:	d402      	bmi.n	800be44 <_vfiprintf_r+0x220>
 800be3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be40:	f7ff fe6b 	bl	800bb1a <__retarget_lock_release_recursive>
 800be44:	89ab      	ldrh	r3, [r5, #12]
 800be46:	065b      	lsls	r3, r3, #25
 800be48:	f53f af12 	bmi.w	800bc70 <_vfiprintf_r+0x4c>
 800be4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be4e:	e711      	b.n	800bc74 <_vfiprintf_r+0x50>
 800be50:	ab03      	add	r3, sp, #12
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	462a      	mov	r2, r5
 800be56:	4b09      	ldr	r3, [pc, #36]	; (800be7c <_vfiprintf_r+0x258>)
 800be58:	a904      	add	r1, sp, #16
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7fd fa48 	bl	80092f0 <_printf_i>
 800be60:	e7e4      	b.n	800be2c <_vfiprintf_r+0x208>
 800be62:	bf00      	nop
 800be64:	0800edd8 	.word	0x0800edd8
 800be68:	0800edf8 	.word	0x0800edf8
 800be6c:	0800edb8 	.word	0x0800edb8
 800be70:	0800ec4c 	.word	0x0800ec4c
 800be74:	0800ec56 	.word	0x0800ec56
 800be78:	08008da9 	.word	0x08008da9
 800be7c:	0800bc01 	.word	0x0800bc01
 800be80:	0800ec52 	.word	0x0800ec52

0800be84 <__swbuf_r>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	460e      	mov	r6, r1
 800be88:	4614      	mov	r4, r2
 800be8a:	4605      	mov	r5, r0
 800be8c:	b118      	cbz	r0, 800be96 <__swbuf_r+0x12>
 800be8e:	6983      	ldr	r3, [r0, #24]
 800be90:	b90b      	cbnz	r3, 800be96 <__swbuf_r+0x12>
 800be92:	f7ff fd91 	bl	800b9b8 <__sinit>
 800be96:	4b21      	ldr	r3, [pc, #132]	; (800bf1c <__swbuf_r+0x98>)
 800be98:	429c      	cmp	r4, r3
 800be9a:	d12b      	bne.n	800bef4 <__swbuf_r+0x70>
 800be9c:	686c      	ldr	r4, [r5, #4]
 800be9e:	69a3      	ldr	r3, [r4, #24]
 800bea0:	60a3      	str	r3, [r4, #8]
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	071a      	lsls	r2, r3, #28
 800bea6:	d52f      	bpl.n	800bf08 <__swbuf_r+0x84>
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	b36b      	cbz	r3, 800bf08 <__swbuf_r+0x84>
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	1ac0      	subs	r0, r0, r3
 800beb2:	6963      	ldr	r3, [r4, #20]
 800beb4:	b2f6      	uxtb	r6, r6
 800beb6:	4283      	cmp	r3, r0
 800beb8:	4637      	mov	r7, r6
 800beba:	dc04      	bgt.n	800bec6 <__swbuf_r+0x42>
 800bebc:	4621      	mov	r1, r4
 800bebe:	4628      	mov	r0, r5
 800bec0:	f7ff fce6 	bl	800b890 <_fflush_r>
 800bec4:	bb30      	cbnz	r0, 800bf14 <__swbuf_r+0x90>
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	3b01      	subs	r3, #1
 800beca:	60a3      	str	r3, [r4, #8]
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	6022      	str	r2, [r4, #0]
 800bed2:	701e      	strb	r6, [r3, #0]
 800bed4:	6963      	ldr	r3, [r4, #20]
 800bed6:	3001      	adds	r0, #1
 800bed8:	4283      	cmp	r3, r0
 800beda:	d004      	beq.n	800bee6 <__swbuf_r+0x62>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	07db      	lsls	r3, r3, #31
 800bee0:	d506      	bpl.n	800bef0 <__swbuf_r+0x6c>
 800bee2:	2e0a      	cmp	r6, #10
 800bee4:	d104      	bne.n	800bef0 <__swbuf_r+0x6c>
 800bee6:	4621      	mov	r1, r4
 800bee8:	4628      	mov	r0, r5
 800beea:	f7ff fcd1 	bl	800b890 <_fflush_r>
 800beee:	b988      	cbnz	r0, 800bf14 <__swbuf_r+0x90>
 800bef0:	4638      	mov	r0, r7
 800bef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef4:	4b0a      	ldr	r3, [pc, #40]	; (800bf20 <__swbuf_r+0x9c>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <__swbuf_r+0x7a>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7cf      	b.n	800be9e <__swbuf_r+0x1a>
 800befe:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <__swbuf_r+0xa0>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7ca      	b.n	800be9e <__swbuf_r+0x1a>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 f81a 	bl	800bf44 <__swsetup_r>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d0cb      	beq.n	800beac <__swbuf_r+0x28>
 800bf14:	f04f 37ff 	mov.w	r7, #4294967295
 800bf18:	e7ea      	b.n	800bef0 <__swbuf_r+0x6c>
 800bf1a:	bf00      	nop
 800bf1c:	0800edd8 	.word	0x0800edd8
 800bf20:	0800edf8 	.word	0x0800edf8
 800bf24:	0800edb8 	.word	0x0800edb8

0800bf28 <__ascii_wctomb>:
 800bf28:	b149      	cbz	r1, 800bf3e <__ascii_wctomb+0x16>
 800bf2a:	2aff      	cmp	r2, #255	; 0xff
 800bf2c:	bf85      	ittet	hi
 800bf2e:	238a      	movhi	r3, #138	; 0x8a
 800bf30:	6003      	strhi	r3, [r0, #0]
 800bf32:	700a      	strbls	r2, [r1, #0]
 800bf34:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf38:	bf98      	it	ls
 800bf3a:	2001      	movls	r0, #1
 800bf3c:	4770      	bx	lr
 800bf3e:	4608      	mov	r0, r1
 800bf40:	4770      	bx	lr
	...

0800bf44 <__swsetup_r>:
 800bf44:	4b32      	ldr	r3, [pc, #200]	; (800c010 <__swsetup_r+0xcc>)
 800bf46:	b570      	push	{r4, r5, r6, lr}
 800bf48:	681d      	ldr	r5, [r3, #0]
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	b125      	cbz	r5, 800bf5a <__swsetup_r+0x16>
 800bf50:	69ab      	ldr	r3, [r5, #24]
 800bf52:	b913      	cbnz	r3, 800bf5a <__swsetup_r+0x16>
 800bf54:	4628      	mov	r0, r5
 800bf56:	f7ff fd2f 	bl	800b9b8 <__sinit>
 800bf5a:	4b2e      	ldr	r3, [pc, #184]	; (800c014 <__swsetup_r+0xd0>)
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	d10f      	bne.n	800bf80 <__swsetup_r+0x3c>
 800bf60:	686c      	ldr	r4, [r5, #4]
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf68:	0719      	lsls	r1, r3, #28
 800bf6a:	d42c      	bmi.n	800bfc6 <__swsetup_r+0x82>
 800bf6c:	06dd      	lsls	r5, r3, #27
 800bf6e:	d411      	bmi.n	800bf94 <__swsetup_r+0x50>
 800bf70:	2309      	movs	r3, #9
 800bf72:	6033      	str	r3, [r6, #0]
 800bf74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7e:	e03e      	b.n	800bffe <__swsetup_r+0xba>
 800bf80:	4b25      	ldr	r3, [pc, #148]	; (800c018 <__swsetup_r+0xd4>)
 800bf82:	429c      	cmp	r4, r3
 800bf84:	d101      	bne.n	800bf8a <__swsetup_r+0x46>
 800bf86:	68ac      	ldr	r4, [r5, #8]
 800bf88:	e7eb      	b.n	800bf62 <__swsetup_r+0x1e>
 800bf8a:	4b24      	ldr	r3, [pc, #144]	; (800c01c <__swsetup_r+0xd8>)
 800bf8c:	429c      	cmp	r4, r3
 800bf8e:	bf08      	it	eq
 800bf90:	68ec      	ldreq	r4, [r5, #12]
 800bf92:	e7e6      	b.n	800bf62 <__swsetup_r+0x1e>
 800bf94:	0758      	lsls	r0, r3, #29
 800bf96:	d512      	bpl.n	800bfbe <__swsetup_r+0x7a>
 800bf98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf9a:	b141      	cbz	r1, 800bfae <__swsetup_r+0x6a>
 800bf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa0:	4299      	cmp	r1, r3
 800bfa2:	d002      	beq.n	800bfaa <__swsetup_r+0x66>
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7fc fd7f 	bl	8008aa8 <_free_r>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6363      	str	r3, [r4, #52]	; 0x34
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	6063      	str	r3, [r4, #4]
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f043 0308 	orr.w	r3, r3, #8
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	b94b      	cbnz	r3, 800bfde <__swsetup_r+0x9a>
 800bfca:	89a3      	ldrh	r3, [r4, #12]
 800bfcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd4:	d003      	beq.n	800bfde <__swsetup_r+0x9a>
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f000 f84d 	bl	800c078 <__smakebuf_r>
 800bfde:	89a0      	ldrh	r0, [r4, #12]
 800bfe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfe4:	f010 0301 	ands.w	r3, r0, #1
 800bfe8:	d00a      	beq.n	800c000 <__swsetup_r+0xbc>
 800bfea:	2300      	movs	r3, #0
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	6963      	ldr	r3, [r4, #20]
 800bff0:	425b      	negs	r3, r3
 800bff2:	61a3      	str	r3, [r4, #24]
 800bff4:	6923      	ldr	r3, [r4, #16]
 800bff6:	b943      	cbnz	r3, 800c00a <__swsetup_r+0xc6>
 800bff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bffc:	d1ba      	bne.n	800bf74 <__swsetup_r+0x30>
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	0781      	lsls	r1, r0, #30
 800c002:	bf58      	it	pl
 800c004:	6963      	ldrpl	r3, [r4, #20]
 800c006:	60a3      	str	r3, [r4, #8]
 800c008:	e7f4      	b.n	800bff4 <__swsetup_r+0xb0>
 800c00a:	2000      	movs	r0, #0
 800c00c:	e7f7      	b.n	800bffe <__swsetup_r+0xba>
 800c00e:	bf00      	nop
 800c010:	20000014 	.word	0x20000014
 800c014:	0800edd8 	.word	0x0800edd8
 800c018:	0800edf8 	.word	0x0800edf8
 800c01c:	0800edb8 	.word	0x0800edb8

0800c020 <abort>:
 800c020:	b508      	push	{r3, lr}
 800c022:	2006      	movs	r0, #6
 800c024:	f000 f898 	bl	800c158 <raise>
 800c028:	2001      	movs	r0, #1
 800c02a:	f7f6 ff47 	bl	8002ebc <_exit>

0800c02e <__swhatbuf_r>:
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	460e      	mov	r6, r1
 800c032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c036:	2900      	cmp	r1, #0
 800c038:	b096      	sub	sp, #88	; 0x58
 800c03a:	4614      	mov	r4, r2
 800c03c:	461d      	mov	r5, r3
 800c03e:	da08      	bge.n	800c052 <__swhatbuf_r+0x24>
 800c040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	602a      	str	r2, [r5, #0]
 800c048:	061a      	lsls	r2, r3, #24
 800c04a:	d410      	bmi.n	800c06e <__swhatbuf_r+0x40>
 800c04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c050:	e00e      	b.n	800c070 <__swhatbuf_r+0x42>
 800c052:	466a      	mov	r2, sp
 800c054:	f000 f89c 	bl	800c190 <_fstat_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	dbf1      	blt.n	800c040 <__swhatbuf_r+0x12>
 800c05c:	9a01      	ldr	r2, [sp, #4]
 800c05e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c066:	425a      	negs	r2, r3
 800c068:	415a      	adcs	r2, r3
 800c06a:	602a      	str	r2, [r5, #0]
 800c06c:	e7ee      	b.n	800c04c <__swhatbuf_r+0x1e>
 800c06e:	2340      	movs	r3, #64	; 0x40
 800c070:	2000      	movs	r0, #0
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	b016      	add	sp, #88	; 0x58
 800c076:	bd70      	pop	{r4, r5, r6, pc}

0800c078 <__smakebuf_r>:
 800c078:	898b      	ldrh	r3, [r1, #12]
 800c07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c07c:	079d      	lsls	r5, r3, #30
 800c07e:	4606      	mov	r6, r0
 800c080:	460c      	mov	r4, r1
 800c082:	d507      	bpl.n	800c094 <__smakebuf_r+0x1c>
 800c084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	6123      	str	r3, [r4, #16]
 800c08c:	2301      	movs	r3, #1
 800c08e:	6163      	str	r3, [r4, #20]
 800c090:	b002      	add	sp, #8
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	ab01      	add	r3, sp, #4
 800c096:	466a      	mov	r2, sp
 800c098:	f7ff ffc9 	bl	800c02e <__swhatbuf_r>
 800c09c:	9900      	ldr	r1, [sp, #0]
 800c09e:	4605      	mov	r5, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7fc fd6d 	bl	8008b80 <_malloc_r>
 800c0a6:	b948      	cbnz	r0, 800c0bc <__smakebuf_r+0x44>
 800c0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ac:	059a      	lsls	r2, r3, #22
 800c0ae:	d4ef      	bmi.n	800c090 <__smakebuf_r+0x18>
 800c0b0:	f023 0303 	bic.w	r3, r3, #3
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	e7e3      	b.n	800c084 <__smakebuf_r+0xc>
 800c0bc:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <__smakebuf_r+0x7c>)
 800c0be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	6020      	str	r0, [r4, #0]
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	6120      	str	r0, [r4, #16]
 800c0d2:	b15b      	cbz	r3, 800c0ec <__smakebuf_r+0x74>
 800c0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f86b 	bl	800c1b4 <_isatty_r>
 800c0de:	b128      	cbz	r0, 800c0ec <__smakebuf_r+0x74>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	89a0      	ldrh	r0, [r4, #12]
 800c0ee:	4305      	orrs	r5, r0
 800c0f0:	81a5      	strh	r5, [r4, #12]
 800c0f2:	e7cd      	b.n	800c090 <__smakebuf_r+0x18>
 800c0f4:	0800b951 	.word	0x0800b951

0800c0f8 <_malloc_usable_size_r>:
 800c0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0fc:	1f18      	subs	r0, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfbc      	itt	lt
 800c102:	580b      	ldrlt	r3, [r1, r0]
 800c104:	18c0      	addlt	r0, r0, r3
 800c106:	4770      	bx	lr

0800c108 <_raise_r>:
 800c108:	291f      	cmp	r1, #31
 800c10a:	b538      	push	{r3, r4, r5, lr}
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	d904      	bls.n	800c11c <_raise_r+0x14>
 800c112:	2316      	movs	r3, #22
 800c114:	6003      	str	r3, [r0, #0]
 800c116:	f04f 30ff 	mov.w	r0, #4294967295
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c11e:	b112      	cbz	r2, 800c126 <_raise_r+0x1e>
 800c120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c124:	b94b      	cbnz	r3, 800c13a <_raise_r+0x32>
 800c126:	4620      	mov	r0, r4
 800c128:	f000 f830 	bl	800c18c <_getpid_r>
 800c12c:	462a      	mov	r2, r5
 800c12e:	4601      	mov	r1, r0
 800c130:	4620      	mov	r0, r4
 800c132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c136:	f000 b817 	b.w	800c168 <_kill_r>
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d00a      	beq.n	800c154 <_raise_r+0x4c>
 800c13e:	1c59      	adds	r1, r3, #1
 800c140:	d103      	bne.n	800c14a <_raise_r+0x42>
 800c142:	2316      	movs	r3, #22
 800c144:	6003      	str	r3, [r0, #0]
 800c146:	2001      	movs	r0, #1
 800c148:	e7e7      	b.n	800c11a <_raise_r+0x12>
 800c14a:	2400      	movs	r4, #0
 800c14c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c150:	4628      	mov	r0, r5
 800c152:	4798      	blx	r3
 800c154:	2000      	movs	r0, #0
 800c156:	e7e0      	b.n	800c11a <_raise_r+0x12>

0800c158 <raise>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <raise+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f7ff bfd3 	b.w	800c108 <_raise_r>
 800c162:	bf00      	nop
 800c164:	20000014 	.word	0x20000014

0800c168 <_kill_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_kill_r+0x20>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	4608      	mov	r0, r1
 800c172:	4611      	mov	r1, r2
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	f7f6 fe91 	bl	8002e9c <_kill>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	d102      	bne.n	800c184 <_kill_r+0x1c>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	b103      	cbz	r3, 800c184 <_kill_r+0x1c>
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	bd38      	pop	{r3, r4, r5, pc}
 800c186:	bf00      	nop
 800c188:	20011d44 	.word	0x20011d44

0800c18c <_getpid_r>:
 800c18c:	f7f6 be7e 	b.w	8002e8c <_getpid>

0800c190 <_fstat_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	; (800c1b0 <_fstat_r+0x20>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	4611      	mov	r1, r2
 800c19c:	602b      	str	r3, [r5, #0]
 800c19e:	f7f6 fedc 	bl	8002f5a <_fstat>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d102      	bne.n	800c1ac <_fstat_r+0x1c>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	b103      	cbz	r3, 800c1ac <_fstat_r+0x1c>
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20011d44 	.word	0x20011d44

0800c1b4 <_isatty_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	; (800c1d0 <_isatty_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f6 fedb 	bl	8002f7a <_isatty>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_isatty_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_isatty_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	20011d44 	.word	0x20011d44
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <cos>:
 800c1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1da:	ec53 2b10 	vmov	r2, r3, d0
 800c1de:	4826      	ldr	r0, [pc, #152]	; (800c278 <cos+0xa0>)
 800c1e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1e4:	4281      	cmp	r1, r0
 800c1e6:	dc06      	bgt.n	800c1f6 <cos+0x1e>
 800c1e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c270 <cos+0x98>
 800c1ec:	b005      	add	sp, #20
 800c1ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f2:	f001 ba41 	b.w	800d678 <__kernel_cos>
 800c1f6:	4821      	ldr	r0, [pc, #132]	; (800c27c <cos+0xa4>)
 800c1f8:	4281      	cmp	r1, r0
 800c1fa:	dd09      	ble.n	800c210 <cos+0x38>
 800c1fc:	ee10 0a10 	vmov	r0, s0
 800c200:	4619      	mov	r1, r3
 800c202:	f7f4 f859 	bl	80002b8 <__aeabi_dsub>
 800c206:	ec41 0b10 	vmov	d0, r0, r1
 800c20a:	b005      	add	sp, #20
 800c20c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c210:	4668      	mov	r0, sp
 800c212:	f000 ff71 	bl	800d0f8 <__ieee754_rem_pio2>
 800c216:	f000 0003 	and.w	r0, r0, #3
 800c21a:	2801      	cmp	r0, #1
 800c21c:	d00b      	beq.n	800c236 <cos+0x5e>
 800c21e:	2802      	cmp	r0, #2
 800c220:	d016      	beq.n	800c250 <cos+0x78>
 800c222:	b9e0      	cbnz	r0, 800c25e <cos+0x86>
 800c224:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c228:	ed9d 0b00 	vldr	d0, [sp]
 800c22c:	f001 fa24 	bl	800d678 <__kernel_cos>
 800c230:	ec51 0b10 	vmov	r0, r1, d0
 800c234:	e7e7      	b.n	800c206 <cos+0x2e>
 800c236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c23a:	ed9d 0b00 	vldr	d0, [sp]
 800c23e:	f001 fe33 	bl	800dea8 <__kernel_sin>
 800c242:	ec53 2b10 	vmov	r2, r3, d0
 800c246:	ee10 0a10 	vmov	r0, s0
 800c24a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c24e:	e7da      	b.n	800c206 <cos+0x2e>
 800c250:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c254:	ed9d 0b00 	vldr	d0, [sp]
 800c258:	f001 fa0e 	bl	800d678 <__kernel_cos>
 800c25c:	e7f1      	b.n	800c242 <cos+0x6a>
 800c25e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c262:	ed9d 0b00 	vldr	d0, [sp]
 800c266:	2001      	movs	r0, #1
 800c268:	f001 fe1e 	bl	800dea8 <__kernel_sin>
 800c26c:	e7e0      	b.n	800c230 <cos+0x58>
 800c26e:	bf00      	nop
	...
 800c278:	3fe921fb 	.word	0x3fe921fb
 800c27c:	7fefffff 	.word	0x7fefffff

0800c280 <round>:
 800c280:	ec51 0b10 	vmov	r0, r1, d0
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c28a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c28e:	2c13      	cmp	r4, #19
 800c290:	ee10 2a10 	vmov	r2, s0
 800c294:	460b      	mov	r3, r1
 800c296:	dc19      	bgt.n	800c2cc <round+0x4c>
 800c298:	2c00      	cmp	r4, #0
 800c29a:	da09      	bge.n	800c2b0 <round+0x30>
 800c29c:	3401      	adds	r4, #1
 800c29e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c2a2:	d103      	bne.n	800c2ac <round+0x2c>
 800c2a4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c2a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	e028      	b.n	800c302 <round+0x82>
 800c2b0:	4d15      	ldr	r5, [pc, #84]	; (800c308 <round+0x88>)
 800c2b2:	4125      	asrs	r5, r4
 800c2b4:	ea01 0605 	and.w	r6, r1, r5
 800c2b8:	4332      	orrs	r2, r6
 800c2ba:	d00e      	beq.n	800c2da <round+0x5a>
 800c2bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c2c0:	fa42 f404 	asr.w	r4, r2, r4
 800c2c4:	4423      	add	r3, r4
 800c2c6:	ea23 0305 	bic.w	r3, r3, r5
 800c2ca:	e7ef      	b.n	800c2ac <round+0x2c>
 800c2cc:	2c33      	cmp	r4, #51	; 0x33
 800c2ce:	dd07      	ble.n	800c2e0 <round+0x60>
 800c2d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c2d4:	d101      	bne.n	800c2da <round+0x5a>
 800c2d6:	f7f3 fff1 	bl	80002bc <__adddf3>
 800c2da:	ec41 0b10 	vmov	d0, r0, r1
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c2e4:	f04f 35ff 	mov.w	r5, #4294967295
 800c2e8:	40f5      	lsrs	r5, r6
 800c2ea:	4228      	tst	r0, r5
 800c2ec:	d0f5      	beq.n	800c2da <round+0x5a>
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c2f4:	fa01 f404 	lsl.w	r4, r1, r4
 800c2f8:	1912      	adds	r2, r2, r4
 800c2fa:	bf28      	it	cs
 800c2fc:	185b      	addcs	r3, r3, r1
 800c2fe:	ea22 0205 	bic.w	r2, r2, r5
 800c302:	4619      	mov	r1, r3
 800c304:	4610      	mov	r0, r2
 800c306:	e7e8      	b.n	800c2da <round+0x5a>
 800c308:	000fffff 	.word	0x000fffff
 800c30c:	00000000 	.word	0x00000000

0800c310 <sin>:
 800c310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c312:	ec53 2b10 	vmov	r2, r3, d0
 800c316:	4828      	ldr	r0, [pc, #160]	; (800c3b8 <sin+0xa8>)
 800c318:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c31c:	4281      	cmp	r1, r0
 800c31e:	dc07      	bgt.n	800c330 <sin+0x20>
 800c320:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c3b0 <sin+0xa0>
 800c324:	2000      	movs	r0, #0
 800c326:	b005      	add	sp, #20
 800c328:	f85d eb04 	ldr.w	lr, [sp], #4
 800c32c:	f001 bdbc 	b.w	800dea8 <__kernel_sin>
 800c330:	4822      	ldr	r0, [pc, #136]	; (800c3bc <sin+0xac>)
 800c332:	4281      	cmp	r1, r0
 800c334:	dd09      	ble.n	800c34a <sin+0x3a>
 800c336:	ee10 0a10 	vmov	r0, s0
 800c33a:	4619      	mov	r1, r3
 800c33c:	f7f3 ffbc 	bl	80002b8 <__aeabi_dsub>
 800c340:	ec41 0b10 	vmov	d0, r0, r1
 800c344:	b005      	add	sp, #20
 800c346:	f85d fb04 	ldr.w	pc, [sp], #4
 800c34a:	4668      	mov	r0, sp
 800c34c:	f000 fed4 	bl	800d0f8 <__ieee754_rem_pio2>
 800c350:	f000 0003 	and.w	r0, r0, #3
 800c354:	2801      	cmp	r0, #1
 800c356:	d00c      	beq.n	800c372 <sin+0x62>
 800c358:	2802      	cmp	r0, #2
 800c35a:	d011      	beq.n	800c380 <sin+0x70>
 800c35c:	b9f0      	cbnz	r0, 800c39c <sin+0x8c>
 800c35e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c362:	ed9d 0b00 	vldr	d0, [sp]
 800c366:	2001      	movs	r0, #1
 800c368:	f001 fd9e 	bl	800dea8 <__kernel_sin>
 800c36c:	ec51 0b10 	vmov	r0, r1, d0
 800c370:	e7e6      	b.n	800c340 <sin+0x30>
 800c372:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c376:	ed9d 0b00 	vldr	d0, [sp]
 800c37a:	f001 f97d 	bl	800d678 <__kernel_cos>
 800c37e:	e7f5      	b.n	800c36c <sin+0x5c>
 800c380:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c384:	ed9d 0b00 	vldr	d0, [sp]
 800c388:	2001      	movs	r0, #1
 800c38a:	f001 fd8d 	bl	800dea8 <__kernel_sin>
 800c38e:	ec53 2b10 	vmov	r2, r3, d0
 800c392:	ee10 0a10 	vmov	r0, s0
 800c396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c39a:	e7d1      	b.n	800c340 <sin+0x30>
 800c39c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3a0:	ed9d 0b00 	vldr	d0, [sp]
 800c3a4:	f001 f968 	bl	800d678 <__kernel_cos>
 800c3a8:	e7f1      	b.n	800c38e <sin+0x7e>
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w
	...
 800c3b8:	3fe921fb 	.word	0x3fe921fb
 800c3bc:	7fefffff 	.word	0x7fefffff

0800c3c0 <atan2>:
 800c3c0:	f000 b89e 	b.w	800c500 <__ieee754_atan2>

0800c3c4 <pow>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	ed2d 8b02 	vpush	{d8}
 800c3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c3ce:	eef0 8a60 	vmov.f32	s17, s1
 800c3d2:	ec55 4b11 	vmov	r4, r5, d1
 800c3d6:	f000 f95f 	bl	800c698 <__ieee754_pow>
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	4620      	mov	r0, r4
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	ec57 6b10 	vmov	r6, r7, d0
 800c3e6:	f7f4 fbb9 	bl	8000b5c <__aeabi_dcmpun>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d13b      	bne.n	800c466 <pow+0xa2>
 800c3ee:	ec51 0b18 	vmov	r0, r1, d8
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f7f4 fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 800c3fa:	b1b8      	cbz	r0, 800c42c <pow+0x68>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2300      	movs	r3, #0
 800c400:	4620      	mov	r0, r4
 800c402:	4629      	mov	r1, r5
 800c404:	f7f4 fb78 	bl	8000af8 <__aeabi_dcmpeq>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d146      	bne.n	800c49a <pow+0xd6>
 800c40c:	ec45 4b10 	vmov	d0, r4, r5
 800c410:	f001 ffe3 	bl	800e3da <finite>
 800c414:	b338      	cbz	r0, 800c466 <pow+0xa2>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 fb75 	bl	8000b0c <__aeabi_dcmplt>
 800c422:	b300      	cbz	r0, 800c466 <pow+0xa2>
 800c424:	f7fc fb06 	bl	8008a34 <__errno>
 800c428:	2322      	movs	r3, #34	; 0x22
 800c42a:	e01b      	b.n	800c464 <pow+0xa0>
 800c42c:	ec47 6b10 	vmov	d0, r6, r7
 800c430:	f001 ffd3 	bl	800e3da <finite>
 800c434:	b9e0      	cbnz	r0, 800c470 <pow+0xac>
 800c436:	eeb0 0a48 	vmov.f32	s0, s16
 800c43a:	eef0 0a68 	vmov.f32	s1, s17
 800c43e:	f001 ffcc 	bl	800e3da <finite>
 800c442:	b1a8      	cbz	r0, 800c470 <pow+0xac>
 800c444:	ec45 4b10 	vmov	d0, r4, r5
 800c448:	f001 ffc7 	bl	800e3da <finite>
 800c44c:	b180      	cbz	r0, 800c470 <pow+0xac>
 800c44e:	4632      	mov	r2, r6
 800c450:	463b      	mov	r3, r7
 800c452:	4630      	mov	r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	f7f4 fb81 	bl	8000b5c <__aeabi_dcmpun>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d0e2      	beq.n	800c424 <pow+0x60>
 800c45e:	f7fc fae9 	bl	8008a34 <__errno>
 800c462:	2321      	movs	r3, #33	; 0x21
 800c464:	6003      	str	r3, [r0, #0]
 800c466:	ecbd 8b02 	vpop	{d8}
 800c46a:	ec47 6b10 	vmov	d0, r6, r7
 800c46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c470:	2200      	movs	r2, #0
 800c472:	2300      	movs	r3, #0
 800c474:	4630      	mov	r0, r6
 800c476:	4639      	mov	r1, r7
 800c478:	f7f4 fb3e 	bl	8000af8 <__aeabi_dcmpeq>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d0f2      	beq.n	800c466 <pow+0xa2>
 800c480:	eeb0 0a48 	vmov.f32	s0, s16
 800c484:	eef0 0a68 	vmov.f32	s1, s17
 800c488:	f001 ffa7 	bl	800e3da <finite>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d0ea      	beq.n	800c466 <pow+0xa2>
 800c490:	ec45 4b10 	vmov	d0, r4, r5
 800c494:	f001 ffa1 	bl	800e3da <finite>
 800c498:	e7c3      	b.n	800c422 <pow+0x5e>
 800c49a:	4f01      	ldr	r7, [pc, #4]	; (800c4a0 <pow+0xdc>)
 800c49c:	2600      	movs	r6, #0
 800c49e:	e7e2      	b.n	800c466 <pow+0xa2>
 800c4a0:	3ff00000 	.word	0x3ff00000

0800c4a4 <sqrt>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	ed2d 8b02 	vpush	{d8}
 800c4aa:	ec55 4b10 	vmov	r4, r5, d0
 800c4ae:	f001 f82f 	bl	800d510 <__ieee754_sqrt>
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	eeb0 8a40 	vmov.f32	s16, s0
 800c4be:	eef0 8a60 	vmov.f32	s17, s1
 800c4c2:	f7f4 fb4b 	bl	8000b5c <__aeabi_dcmpun>
 800c4c6:	b990      	cbnz	r0, 800c4ee <sqrt+0x4a>
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f4 fb1c 	bl	8000b0c <__aeabi_dcmplt>
 800c4d4:	b158      	cbz	r0, 800c4ee <sqrt+0x4a>
 800c4d6:	f7fc faad 	bl	8008a34 <__errno>
 800c4da:	2321      	movs	r3, #33	; 0x21
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f7f4 f9c9 	bl	800087c <__aeabi_ddiv>
 800c4ea:	ec41 0b18 	vmov	d8, r0, r1
 800c4ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c4f2:	eef0 0a68 	vmov.f32	s1, s17
 800c4f6:	ecbd 8b02 	vpop	{d8}
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	0000      	movs	r0, r0
	...

0800c500 <__ieee754_atan2>:
 800c500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c504:	ec57 6b11 	vmov	r6, r7, d1
 800c508:	4273      	negs	r3, r6
 800c50a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c690 <__ieee754_atan2+0x190>
 800c50e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c512:	4333      	orrs	r3, r6
 800c514:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c518:	4573      	cmp	r3, lr
 800c51a:	ec51 0b10 	vmov	r0, r1, d0
 800c51e:	ee11 8a10 	vmov	r8, s2
 800c522:	d80a      	bhi.n	800c53a <__ieee754_atan2+0x3a>
 800c524:	4244      	negs	r4, r0
 800c526:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c52a:	4304      	orrs	r4, r0
 800c52c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c530:	4574      	cmp	r4, lr
 800c532:	ee10 9a10 	vmov	r9, s0
 800c536:	468c      	mov	ip, r1
 800c538:	d907      	bls.n	800c54a <__ieee754_atan2+0x4a>
 800c53a:	4632      	mov	r2, r6
 800c53c:	463b      	mov	r3, r7
 800c53e:	f7f3 febd 	bl	80002bc <__adddf3>
 800c542:	ec41 0b10 	vmov	d0, r0, r1
 800c546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c54e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c552:	4334      	orrs	r4, r6
 800c554:	d103      	bne.n	800c55e <__ieee754_atan2+0x5e>
 800c556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55a:	f001 bd95 	b.w	800e088 <atan>
 800c55e:	17bc      	asrs	r4, r7, #30
 800c560:	f004 0402 	and.w	r4, r4, #2
 800c564:	ea53 0909 	orrs.w	r9, r3, r9
 800c568:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c56c:	d107      	bne.n	800c57e <__ieee754_atan2+0x7e>
 800c56e:	2c02      	cmp	r4, #2
 800c570:	d060      	beq.n	800c634 <__ieee754_atan2+0x134>
 800c572:	2c03      	cmp	r4, #3
 800c574:	d1e5      	bne.n	800c542 <__ieee754_atan2+0x42>
 800c576:	a142      	add	r1, pc, #264	; (adr r1, 800c680 <__ieee754_atan2+0x180>)
 800c578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c57c:	e7e1      	b.n	800c542 <__ieee754_atan2+0x42>
 800c57e:	ea52 0808 	orrs.w	r8, r2, r8
 800c582:	d106      	bne.n	800c592 <__ieee754_atan2+0x92>
 800c584:	f1bc 0f00 	cmp.w	ip, #0
 800c588:	da5f      	bge.n	800c64a <__ieee754_atan2+0x14a>
 800c58a:	a13f      	add	r1, pc, #252	; (adr r1, 800c688 <__ieee754_atan2+0x188>)
 800c58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c590:	e7d7      	b.n	800c542 <__ieee754_atan2+0x42>
 800c592:	4572      	cmp	r2, lr
 800c594:	d10f      	bne.n	800c5b6 <__ieee754_atan2+0xb6>
 800c596:	4293      	cmp	r3, r2
 800c598:	f104 34ff 	add.w	r4, r4, #4294967295
 800c59c:	d107      	bne.n	800c5ae <__ieee754_atan2+0xae>
 800c59e:	2c02      	cmp	r4, #2
 800c5a0:	d84c      	bhi.n	800c63c <__ieee754_atan2+0x13c>
 800c5a2:	4b35      	ldr	r3, [pc, #212]	; (800c678 <__ieee754_atan2+0x178>)
 800c5a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c5a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c5ac:	e7c9      	b.n	800c542 <__ieee754_atan2+0x42>
 800c5ae:	2c02      	cmp	r4, #2
 800c5b0:	d848      	bhi.n	800c644 <__ieee754_atan2+0x144>
 800c5b2:	4b32      	ldr	r3, [pc, #200]	; (800c67c <__ieee754_atan2+0x17c>)
 800c5b4:	e7f6      	b.n	800c5a4 <__ieee754_atan2+0xa4>
 800c5b6:	4573      	cmp	r3, lr
 800c5b8:	d0e4      	beq.n	800c584 <__ieee754_atan2+0x84>
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c5c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5c4:	da1e      	bge.n	800c604 <__ieee754_atan2+0x104>
 800c5c6:	2f00      	cmp	r7, #0
 800c5c8:	da01      	bge.n	800c5ce <__ieee754_atan2+0xce>
 800c5ca:	323c      	adds	r2, #60	; 0x3c
 800c5cc:	db1e      	blt.n	800c60c <__ieee754_atan2+0x10c>
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	f7f4 f953 	bl	800087c <__aeabi_ddiv>
 800c5d6:	ec41 0b10 	vmov	d0, r0, r1
 800c5da:	f001 fef5 	bl	800e3c8 <fabs>
 800c5de:	f001 fd53 	bl	800e088 <atan>
 800c5e2:	ec51 0b10 	vmov	r0, r1, d0
 800c5e6:	2c01      	cmp	r4, #1
 800c5e8:	d013      	beq.n	800c612 <__ieee754_atan2+0x112>
 800c5ea:	2c02      	cmp	r4, #2
 800c5ec:	d015      	beq.n	800c61a <__ieee754_atan2+0x11a>
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	d0a7      	beq.n	800c542 <__ieee754_atan2+0x42>
 800c5f2:	a319      	add	r3, pc, #100	; (adr r3, 800c658 <__ieee754_atan2+0x158>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f3 fe5e 	bl	80002b8 <__aeabi_dsub>
 800c5fc:	a318      	add	r3, pc, #96	; (adr r3, 800c660 <__ieee754_atan2+0x160>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	e014      	b.n	800c62e <__ieee754_atan2+0x12e>
 800c604:	a118      	add	r1, pc, #96	; (adr r1, 800c668 <__ieee754_atan2+0x168>)
 800c606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60a:	e7ec      	b.n	800c5e6 <__ieee754_atan2+0xe6>
 800c60c:	2000      	movs	r0, #0
 800c60e:	2100      	movs	r1, #0
 800c610:	e7e9      	b.n	800c5e6 <__ieee754_atan2+0xe6>
 800c612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c616:	4619      	mov	r1, r3
 800c618:	e793      	b.n	800c542 <__ieee754_atan2+0x42>
 800c61a:	a30f      	add	r3, pc, #60	; (adr r3, 800c658 <__ieee754_atan2+0x158>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fe4a 	bl	80002b8 <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	a10d      	add	r1, pc, #52	; (adr r1, 800c660 <__ieee754_atan2+0x160>)
 800c62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c62e:	f7f3 fe43 	bl	80002b8 <__aeabi_dsub>
 800c632:	e786      	b.n	800c542 <__ieee754_atan2+0x42>
 800c634:	a10a      	add	r1, pc, #40	; (adr r1, 800c660 <__ieee754_atan2+0x160>)
 800c636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c63a:	e782      	b.n	800c542 <__ieee754_atan2+0x42>
 800c63c:	a10c      	add	r1, pc, #48	; (adr r1, 800c670 <__ieee754_atan2+0x170>)
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	e77e      	b.n	800c542 <__ieee754_atan2+0x42>
 800c644:	2000      	movs	r0, #0
 800c646:	2100      	movs	r1, #0
 800c648:	e77b      	b.n	800c542 <__ieee754_atan2+0x42>
 800c64a:	a107      	add	r1, pc, #28	; (adr r1, 800c668 <__ieee754_atan2+0x168>)
 800c64c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c650:	e777      	b.n	800c542 <__ieee754_atan2+0x42>
 800c652:	bf00      	nop
 800c654:	f3af 8000 	nop.w
 800c658:	33145c07 	.word	0x33145c07
 800c65c:	3ca1a626 	.word	0x3ca1a626
 800c660:	54442d18 	.word	0x54442d18
 800c664:	400921fb 	.word	0x400921fb
 800c668:	54442d18 	.word	0x54442d18
 800c66c:	3ff921fb 	.word	0x3ff921fb
 800c670:	54442d18 	.word	0x54442d18
 800c674:	3fe921fb 	.word	0x3fe921fb
 800c678:	0800ee28 	.word	0x0800ee28
 800c67c:	0800ee40 	.word	0x0800ee40
 800c680:	54442d18 	.word	0x54442d18
 800c684:	c00921fb 	.word	0xc00921fb
 800c688:	54442d18 	.word	0x54442d18
 800c68c:	bff921fb 	.word	0xbff921fb
 800c690:	7ff00000 	.word	0x7ff00000
 800c694:	00000000 	.word	0x00000000

0800c698 <__ieee754_pow>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ed2d 8b06 	vpush	{d8-d10}
 800c6a0:	b089      	sub	sp, #36	; 0x24
 800c6a2:	ed8d 1b00 	vstr	d1, [sp]
 800c6a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c6aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c6ae:	ea58 0102 	orrs.w	r1, r8, r2
 800c6b2:	ec57 6b10 	vmov	r6, r7, d0
 800c6b6:	d115      	bne.n	800c6e4 <__ieee754_pow+0x4c>
 800c6b8:	19b3      	adds	r3, r6, r6
 800c6ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c6be:	4152      	adcs	r2, r2
 800c6c0:	4299      	cmp	r1, r3
 800c6c2:	4b89      	ldr	r3, [pc, #548]	; (800c8e8 <__ieee754_pow+0x250>)
 800c6c4:	4193      	sbcs	r3, r2
 800c6c6:	f080 84d2 	bcs.w	800d06e <__ieee754_pow+0x9d6>
 800c6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	f7f3 fdf3 	bl	80002bc <__adddf3>
 800c6d6:	ec41 0b10 	vmov	d0, r0, r1
 800c6da:	b009      	add	sp, #36	; 0x24
 800c6dc:	ecbd 8b06 	vpop	{d8-d10}
 800c6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e4:	4b81      	ldr	r3, [pc, #516]	; (800c8ec <__ieee754_pow+0x254>)
 800c6e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	ee10 aa10 	vmov	sl, s0
 800c6f0:	463d      	mov	r5, r7
 800c6f2:	dc06      	bgt.n	800c702 <__ieee754_pow+0x6a>
 800c6f4:	d101      	bne.n	800c6fa <__ieee754_pow+0x62>
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	d1e7      	bne.n	800c6ca <__ieee754_pow+0x32>
 800c6fa:	4598      	cmp	r8, r3
 800c6fc:	dc01      	bgt.n	800c702 <__ieee754_pow+0x6a>
 800c6fe:	d10f      	bne.n	800c720 <__ieee754_pow+0x88>
 800c700:	b172      	cbz	r2, 800c720 <__ieee754_pow+0x88>
 800c702:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c706:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c70a:	ea55 050a 	orrs.w	r5, r5, sl
 800c70e:	d1dc      	bne.n	800c6ca <__ieee754_pow+0x32>
 800c710:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c714:	18db      	adds	r3, r3, r3
 800c716:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c71a:	4152      	adcs	r2, r2
 800c71c:	429d      	cmp	r5, r3
 800c71e:	e7d0      	b.n	800c6c2 <__ieee754_pow+0x2a>
 800c720:	2d00      	cmp	r5, #0
 800c722:	da3b      	bge.n	800c79c <__ieee754_pow+0x104>
 800c724:	4b72      	ldr	r3, [pc, #456]	; (800c8f0 <__ieee754_pow+0x258>)
 800c726:	4598      	cmp	r8, r3
 800c728:	dc51      	bgt.n	800c7ce <__ieee754_pow+0x136>
 800c72a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c72e:	4598      	cmp	r8, r3
 800c730:	f340 84ac 	ble.w	800d08c <__ieee754_pow+0x9f4>
 800c734:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c738:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c73c:	2b14      	cmp	r3, #20
 800c73e:	dd0f      	ble.n	800c760 <__ieee754_pow+0xc8>
 800c740:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c744:	fa22 f103 	lsr.w	r1, r2, r3
 800c748:	fa01 f303 	lsl.w	r3, r1, r3
 800c74c:	4293      	cmp	r3, r2
 800c74e:	f040 849d 	bne.w	800d08c <__ieee754_pow+0x9f4>
 800c752:	f001 0101 	and.w	r1, r1, #1
 800c756:	f1c1 0302 	rsb	r3, r1, #2
 800c75a:	9304      	str	r3, [sp, #16]
 800c75c:	b182      	cbz	r2, 800c780 <__ieee754_pow+0xe8>
 800c75e:	e05f      	b.n	800c820 <__ieee754_pow+0x188>
 800c760:	2a00      	cmp	r2, #0
 800c762:	d15b      	bne.n	800c81c <__ieee754_pow+0x184>
 800c764:	f1c3 0314 	rsb	r3, r3, #20
 800c768:	fa48 f103 	asr.w	r1, r8, r3
 800c76c:	fa01 f303 	lsl.w	r3, r1, r3
 800c770:	4543      	cmp	r3, r8
 800c772:	f040 8488 	bne.w	800d086 <__ieee754_pow+0x9ee>
 800c776:	f001 0101 	and.w	r1, r1, #1
 800c77a:	f1c1 0302 	rsb	r3, r1, #2
 800c77e:	9304      	str	r3, [sp, #16]
 800c780:	4b5c      	ldr	r3, [pc, #368]	; (800c8f4 <__ieee754_pow+0x25c>)
 800c782:	4598      	cmp	r8, r3
 800c784:	d132      	bne.n	800c7ec <__ieee754_pow+0x154>
 800c786:	f1b9 0f00 	cmp.w	r9, #0
 800c78a:	f280 8478 	bge.w	800d07e <__ieee754_pow+0x9e6>
 800c78e:	4959      	ldr	r1, [pc, #356]	; (800c8f4 <__ieee754_pow+0x25c>)
 800c790:	4632      	mov	r2, r6
 800c792:	463b      	mov	r3, r7
 800c794:	2000      	movs	r0, #0
 800c796:	f7f4 f871 	bl	800087c <__aeabi_ddiv>
 800c79a:	e79c      	b.n	800c6d6 <__ieee754_pow+0x3e>
 800c79c:	2300      	movs	r3, #0
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d13d      	bne.n	800c820 <__ieee754_pow+0x188>
 800c7a4:	4b51      	ldr	r3, [pc, #324]	; (800c8ec <__ieee754_pow+0x254>)
 800c7a6:	4598      	cmp	r8, r3
 800c7a8:	d1ea      	bne.n	800c780 <__ieee754_pow+0xe8>
 800c7aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c7ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c7b2:	ea53 030a 	orrs.w	r3, r3, sl
 800c7b6:	f000 845a 	beq.w	800d06e <__ieee754_pow+0x9d6>
 800c7ba:	4b4f      	ldr	r3, [pc, #316]	; (800c8f8 <__ieee754_pow+0x260>)
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	dd08      	ble.n	800c7d2 <__ieee754_pow+0x13a>
 800c7c0:	f1b9 0f00 	cmp.w	r9, #0
 800c7c4:	f2c0 8457 	blt.w	800d076 <__ieee754_pow+0x9de>
 800c7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7cc:	e783      	b.n	800c6d6 <__ieee754_pow+0x3e>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	e7e5      	b.n	800c79e <__ieee754_pow+0x106>
 800c7d2:	f1b9 0f00 	cmp.w	r9, #0
 800c7d6:	f04f 0000 	mov.w	r0, #0
 800c7da:	f04f 0100 	mov.w	r1, #0
 800c7de:	f6bf af7a 	bge.w	800c6d6 <__ieee754_pow+0x3e>
 800c7e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c7e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7ea:	e774      	b.n	800c6d6 <__ieee754_pow+0x3e>
 800c7ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7f0:	d106      	bne.n	800c800 <__ieee754_pow+0x168>
 800c7f2:	4632      	mov	r2, r6
 800c7f4:	463b      	mov	r3, r7
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	4639      	mov	r1, r7
 800c7fa:	f7f3 ff15 	bl	8000628 <__aeabi_dmul>
 800c7fe:	e76a      	b.n	800c6d6 <__ieee754_pow+0x3e>
 800c800:	4b3e      	ldr	r3, [pc, #248]	; (800c8fc <__ieee754_pow+0x264>)
 800c802:	4599      	cmp	r9, r3
 800c804:	d10c      	bne.n	800c820 <__ieee754_pow+0x188>
 800c806:	2d00      	cmp	r5, #0
 800c808:	db0a      	blt.n	800c820 <__ieee754_pow+0x188>
 800c80a:	ec47 6b10 	vmov	d0, r6, r7
 800c80e:	b009      	add	sp, #36	; 0x24
 800c810:	ecbd 8b06 	vpop	{d8-d10}
 800c814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	f000 be7a 	b.w	800d510 <__ieee754_sqrt>
 800c81c:	2300      	movs	r3, #0
 800c81e:	9304      	str	r3, [sp, #16]
 800c820:	ec47 6b10 	vmov	d0, r6, r7
 800c824:	f001 fdd0 	bl	800e3c8 <fabs>
 800c828:	ec51 0b10 	vmov	r0, r1, d0
 800c82c:	f1ba 0f00 	cmp.w	sl, #0
 800c830:	d129      	bne.n	800c886 <__ieee754_pow+0x1ee>
 800c832:	b124      	cbz	r4, 800c83e <__ieee754_pow+0x1a6>
 800c834:	4b2f      	ldr	r3, [pc, #188]	; (800c8f4 <__ieee754_pow+0x25c>)
 800c836:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d123      	bne.n	800c886 <__ieee754_pow+0x1ee>
 800c83e:	f1b9 0f00 	cmp.w	r9, #0
 800c842:	da05      	bge.n	800c850 <__ieee754_pow+0x1b8>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	2000      	movs	r0, #0
 800c84a:	492a      	ldr	r1, [pc, #168]	; (800c8f4 <__ieee754_pow+0x25c>)
 800c84c:	f7f4 f816 	bl	800087c <__aeabi_ddiv>
 800c850:	2d00      	cmp	r5, #0
 800c852:	f6bf af40 	bge.w	800c6d6 <__ieee754_pow+0x3e>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c85c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c860:	4323      	orrs	r3, r4
 800c862:	d108      	bne.n	800c876 <__ieee754_pow+0x1de>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4610      	mov	r0, r2
 800c86a:	4619      	mov	r1, r3
 800c86c:	f7f3 fd24 	bl	80002b8 <__aeabi_dsub>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	e78f      	b.n	800c796 <__ieee754_pow+0xfe>
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	f47f af2c 	bne.w	800c6d6 <__ieee754_pow+0x3e>
 800c87e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c882:	4619      	mov	r1, r3
 800c884:	e727      	b.n	800c6d6 <__ieee754_pow+0x3e>
 800c886:	0feb      	lsrs	r3, r5, #31
 800c888:	3b01      	subs	r3, #1
 800c88a:	9306      	str	r3, [sp, #24]
 800c88c:	9a06      	ldr	r2, [sp, #24]
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	4313      	orrs	r3, r2
 800c892:	d102      	bne.n	800c89a <__ieee754_pow+0x202>
 800c894:	4632      	mov	r2, r6
 800c896:	463b      	mov	r3, r7
 800c898:	e7e6      	b.n	800c868 <__ieee754_pow+0x1d0>
 800c89a:	4b19      	ldr	r3, [pc, #100]	; (800c900 <__ieee754_pow+0x268>)
 800c89c:	4598      	cmp	r8, r3
 800c89e:	f340 80fb 	ble.w	800ca98 <__ieee754_pow+0x400>
 800c8a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c8a6:	4598      	cmp	r8, r3
 800c8a8:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <__ieee754_pow+0x260>)
 800c8aa:	dd0c      	ble.n	800c8c6 <__ieee754_pow+0x22e>
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	dc0f      	bgt.n	800c8d0 <__ieee754_pow+0x238>
 800c8b0:	f1b9 0f00 	cmp.w	r9, #0
 800c8b4:	da0f      	bge.n	800c8d6 <__ieee754_pow+0x23e>
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	b009      	add	sp, #36	; 0x24
 800c8ba:	ecbd 8b06 	vpop	{d8-d10}
 800c8be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c2:	f001 bbd6 	b.w	800e072 <__math_oflow>
 800c8c6:	429c      	cmp	r4, r3
 800c8c8:	dbf2      	blt.n	800c8b0 <__ieee754_pow+0x218>
 800c8ca:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <__ieee754_pow+0x25c>)
 800c8cc:	429c      	cmp	r4, r3
 800c8ce:	dd19      	ble.n	800c904 <__ieee754_pow+0x26c>
 800c8d0:	f1b9 0f00 	cmp.w	r9, #0
 800c8d4:	dcef      	bgt.n	800c8b6 <__ieee754_pow+0x21e>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	b009      	add	sp, #36	; 0x24
 800c8da:	ecbd 8b06 	vpop	{d8-d10}
 800c8de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e2:	f001 bbbd 	b.w	800e060 <__math_uflow>
 800c8e6:	bf00      	nop
 800c8e8:	fff00000 	.word	0xfff00000
 800c8ec:	7ff00000 	.word	0x7ff00000
 800c8f0:	433fffff 	.word	0x433fffff
 800c8f4:	3ff00000 	.word	0x3ff00000
 800c8f8:	3fefffff 	.word	0x3fefffff
 800c8fc:	3fe00000 	.word	0x3fe00000
 800c900:	41e00000 	.word	0x41e00000
 800c904:	4b60      	ldr	r3, [pc, #384]	; (800ca88 <__ieee754_pow+0x3f0>)
 800c906:	2200      	movs	r2, #0
 800c908:	f7f3 fcd6 	bl	80002b8 <__aeabi_dsub>
 800c90c:	a354      	add	r3, pc, #336	; (adr r3, 800ca60 <__ieee754_pow+0x3c8>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	f7f3 fe87 	bl	8000628 <__aeabi_dmul>
 800c91a:	a353      	add	r3, pc, #332	; (adr r3, 800ca68 <__ieee754_pow+0x3d0>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fe7e 	bl	8000628 <__aeabi_dmul>
 800c92c:	4b57      	ldr	r3, [pc, #348]	; (800ca8c <__ieee754_pow+0x3f4>)
 800c92e:	4682      	mov	sl, r0
 800c930:	468b      	mov	fp, r1
 800c932:	2200      	movs	r2, #0
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f3 fe76 	bl	8000628 <__aeabi_dmul>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	a14b      	add	r1, pc, #300	; (adr r1, 800ca70 <__ieee754_pow+0x3d8>)
 800c942:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c946:	f7f3 fcb7 	bl	80002b8 <__aeabi_dsub>
 800c94a:	4622      	mov	r2, r4
 800c94c:	462b      	mov	r3, r5
 800c94e:	f7f3 fe6b 	bl	8000628 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	2000      	movs	r0, #0
 800c958:	494d      	ldr	r1, [pc, #308]	; (800ca90 <__ieee754_pow+0x3f8>)
 800c95a:	f7f3 fcad 	bl	80002b8 <__aeabi_dsub>
 800c95e:	4622      	mov	r2, r4
 800c960:	4680      	mov	r8, r0
 800c962:	4689      	mov	r9, r1
 800c964:	462b      	mov	r3, r5
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f3 fe5d 	bl	8000628 <__aeabi_dmul>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fe57 	bl	8000628 <__aeabi_dmul>
 800c97a:	a33f      	add	r3, pc, #252	; (adr r3, 800ca78 <__ieee754_pow+0x3e0>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fe52 	bl	8000628 <__aeabi_dmul>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4650      	mov	r0, sl
 800c98a:	4659      	mov	r1, fp
 800c98c:	f7f3 fc94 	bl	80002b8 <__aeabi_dsub>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4680      	mov	r8, r0
 800c996:	4689      	mov	r9, r1
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f3 fc8e 	bl	80002bc <__adddf3>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	463b      	mov	r3, r7
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	f7f3 fc85 	bl	80002b8 <__aeabi_dsub>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	f7f3 fc7f 	bl	80002b8 <__aeabi_dsub>
 800c9ba:	9b04      	ldr	r3, [sp, #16]
 800c9bc:	9a06      	ldr	r2, [sp, #24]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	4682      	mov	sl, r0
 800c9c4:	468b      	mov	fp, r1
 800c9c6:	f040 81e7 	bne.w	800cd98 <__ieee754_pow+0x700>
 800c9ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ca80 <__ieee754_pow+0x3e8>
 800c9ce:	eeb0 8a47 	vmov.f32	s16, s14
 800c9d2:	eef0 8a67 	vmov.f32	s17, s15
 800c9d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9da:	2600      	movs	r6, #0
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9e4:	f7f3 fc68 	bl	80002b8 <__aeabi_dsub>
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	f7f3 fe1c 	bl	8000628 <__aeabi_dmul>
 800c9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4689      	mov	r9, r1
 800c9f8:	4650      	mov	r0, sl
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	f7f3 fe14 	bl	8000628 <__aeabi_dmul>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4640      	mov	r0, r8
 800ca06:	4649      	mov	r1, r9
 800ca08:	f7f3 fc58 	bl	80002bc <__adddf3>
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	463b      	mov	r3, r7
 800ca10:	4680      	mov	r8, r0
 800ca12:	4689      	mov	r9, r1
 800ca14:	4620      	mov	r0, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	f7f3 fe06 	bl	8000628 <__aeabi_dmul>
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	4602      	mov	r2, r0
 800ca24:	4649      	mov	r1, r9
 800ca26:	4640      	mov	r0, r8
 800ca28:	f7f3 fc48 	bl	80002bc <__adddf3>
 800ca2c:	4b19      	ldr	r3, [pc, #100]	; (800ca94 <__ieee754_pow+0x3fc>)
 800ca2e:	4299      	cmp	r1, r3
 800ca30:	ec45 4b19 	vmov	d9, r4, r5
 800ca34:	4606      	mov	r6, r0
 800ca36:	460f      	mov	r7, r1
 800ca38:	468b      	mov	fp, r1
 800ca3a:	f340 82f1 	ble.w	800d020 <__ieee754_pow+0x988>
 800ca3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ca42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ca46:	4303      	orrs	r3, r0
 800ca48:	f000 81e4 	beq.w	800ce14 <__ieee754_pow+0x77c>
 800ca4c:	ec51 0b18 	vmov	r0, r1, d8
 800ca50:	2200      	movs	r2, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	f7f4 f85a 	bl	8000b0c <__aeabi_dcmplt>
 800ca58:	3800      	subs	r0, #0
 800ca5a:	bf18      	it	ne
 800ca5c:	2001      	movne	r0, #1
 800ca5e:	e72b      	b.n	800c8b8 <__ieee754_pow+0x220>
 800ca60:	60000000 	.word	0x60000000
 800ca64:	3ff71547 	.word	0x3ff71547
 800ca68:	f85ddf44 	.word	0xf85ddf44
 800ca6c:	3e54ae0b 	.word	0x3e54ae0b
 800ca70:	55555555 	.word	0x55555555
 800ca74:	3fd55555 	.word	0x3fd55555
 800ca78:	652b82fe 	.word	0x652b82fe
 800ca7c:	3ff71547 	.word	0x3ff71547
 800ca80:	00000000 	.word	0x00000000
 800ca84:	bff00000 	.word	0xbff00000
 800ca88:	3ff00000 	.word	0x3ff00000
 800ca8c:	3fd00000 	.word	0x3fd00000
 800ca90:	3fe00000 	.word	0x3fe00000
 800ca94:	408fffff 	.word	0x408fffff
 800ca98:	4bd5      	ldr	r3, [pc, #852]	; (800cdf0 <__ieee754_pow+0x758>)
 800ca9a:	402b      	ands	r3, r5
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	b92b      	cbnz	r3, 800caac <__ieee754_pow+0x414>
 800caa0:	4bd4      	ldr	r3, [pc, #848]	; (800cdf4 <__ieee754_pow+0x75c>)
 800caa2:	f7f3 fdc1 	bl	8000628 <__aeabi_dmul>
 800caa6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800caaa:	460c      	mov	r4, r1
 800caac:	1523      	asrs	r3, r4, #20
 800caae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cab2:	4413      	add	r3, r2
 800cab4:	9305      	str	r3, [sp, #20]
 800cab6:	4bd0      	ldr	r3, [pc, #832]	; (800cdf8 <__ieee754_pow+0x760>)
 800cab8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cabc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cac0:	429c      	cmp	r4, r3
 800cac2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cac6:	dd08      	ble.n	800cada <__ieee754_pow+0x442>
 800cac8:	4bcc      	ldr	r3, [pc, #816]	; (800cdfc <__ieee754_pow+0x764>)
 800caca:	429c      	cmp	r4, r3
 800cacc:	f340 8162 	ble.w	800cd94 <__ieee754_pow+0x6fc>
 800cad0:	9b05      	ldr	r3, [sp, #20]
 800cad2:	3301      	adds	r3, #1
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cada:	2400      	movs	r4, #0
 800cadc:	00e3      	lsls	r3, r4, #3
 800cade:	9307      	str	r3, [sp, #28]
 800cae0:	4bc7      	ldr	r3, [pc, #796]	; (800ce00 <__ieee754_pow+0x768>)
 800cae2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cae6:	ed93 7b00 	vldr	d7, [r3]
 800caea:	4629      	mov	r1, r5
 800caec:	ec53 2b17 	vmov	r2, r3, d7
 800caf0:	eeb0 9a47 	vmov.f32	s18, s14
 800caf4:	eef0 9a67 	vmov.f32	s19, s15
 800caf8:	4682      	mov	sl, r0
 800cafa:	f7f3 fbdd 	bl	80002b8 <__aeabi_dsub>
 800cafe:	4652      	mov	r2, sl
 800cb00:	4606      	mov	r6, r0
 800cb02:	460f      	mov	r7, r1
 800cb04:	462b      	mov	r3, r5
 800cb06:	ec51 0b19 	vmov	r0, r1, d9
 800cb0a:	f7f3 fbd7 	bl	80002bc <__adddf3>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	2000      	movs	r0, #0
 800cb14:	49bb      	ldr	r1, [pc, #748]	; (800ce04 <__ieee754_pow+0x76c>)
 800cb16:	f7f3 feb1 	bl	800087c <__aeabi_ddiv>
 800cb1a:	ec41 0b1a 	vmov	d10, r0, r1
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	f7f3 fd7f 	bl	8000628 <__aeabi_dmul>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb36:	46ab      	mov	fp, r5
 800cb38:	106d      	asrs	r5, r5, #1
 800cb3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cb3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cb42:	ec41 0b18 	vmov	d8, r0, r1
 800cb46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4614      	mov	r4, r2
 800cb52:	461d      	mov	r5, r3
 800cb54:	f7f3 fd68 	bl	8000628 <__aeabi_dmul>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f7f3 fbaa 	bl	80002b8 <__aeabi_dsub>
 800cb64:	ec53 2b19 	vmov	r2, r3, d9
 800cb68:	4606      	mov	r6, r0
 800cb6a:	460f      	mov	r7, r1
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fba2 	bl	80002b8 <__aeabi_dsub>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4650      	mov	r0, sl
 800cb7a:	4659      	mov	r1, fp
 800cb7c:	f7f3 fb9c 	bl	80002b8 <__aeabi_dsub>
 800cb80:	4642      	mov	r2, r8
 800cb82:	464b      	mov	r3, r9
 800cb84:	f7f3 fd50 	bl	8000628 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f3 fb92 	bl	80002b8 <__aeabi_dsub>
 800cb94:	ec53 2b1a 	vmov	r2, r3, d10
 800cb98:	f7f3 fd46 	bl	8000628 <__aeabi_dmul>
 800cb9c:	ec53 2b18 	vmov	r2, r3, d8
 800cba0:	ec41 0b19 	vmov	d9, r0, r1
 800cba4:	ec51 0b18 	vmov	r0, r1, d8
 800cba8:	f7f3 fd3e 	bl	8000628 <__aeabi_dmul>
 800cbac:	a37c      	add	r3, pc, #496	; (adr r3, 800cda0 <__ieee754_pow+0x708>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	460d      	mov	r5, r1
 800cbb6:	f7f3 fd37 	bl	8000628 <__aeabi_dmul>
 800cbba:	a37b      	add	r3, pc, #492	; (adr r3, 800cda8 <__ieee754_pow+0x710>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f7f3 fb7c 	bl	80002bc <__adddf3>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	f7f3 fd2e 	bl	8000628 <__aeabi_dmul>
 800cbcc:	a378      	add	r3, pc, #480	; (adr r3, 800cdb0 <__ieee754_pow+0x718>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	f7f3 fb73 	bl	80002bc <__adddf3>
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	462b      	mov	r3, r5
 800cbda:	f7f3 fd25 	bl	8000628 <__aeabi_dmul>
 800cbde:	a376      	add	r3, pc, #472	; (adr r3, 800cdb8 <__ieee754_pow+0x720>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7f3 fb6a 	bl	80002bc <__adddf3>
 800cbe8:	4622      	mov	r2, r4
 800cbea:	462b      	mov	r3, r5
 800cbec:	f7f3 fd1c 	bl	8000628 <__aeabi_dmul>
 800cbf0:	a373      	add	r3, pc, #460	; (adr r3, 800cdc0 <__ieee754_pow+0x728>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 fb61 	bl	80002bc <__adddf3>
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	f7f3 fd13 	bl	8000628 <__aeabi_dmul>
 800cc02:	a371      	add	r3, pc, #452	; (adr r3, 800cdc8 <__ieee754_pow+0x730>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb58 	bl	80002bc <__adddf3>
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	462b      	mov	r3, r5
 800cc14:	4620      	mov	r0, r4
 800cc16:	4629      	mov	r1, r5
 800cc18:	f7f3 fd06 	bl	8000628 <__aeabi_dmul>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 fd00 	bl	8000628 <__aeabi_dmul>
 800cc28:	4642      	mov	r2, r8
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	464b      	mov	r3, r9
 800cc30:	ec51 0b18 	vmov	r0, r1, d8
 800cc34:	f7f3 fb42 	bl	80002bc <__adddf3>
 800cc38:	ec53 2b19 	vmov	r2, r3, d9
 800cc3c:	f7f3 fcf4 	bl	8000628 <__aeabi_dmul>
 800cc40:	4622      	mov	r2, r4
 800cc42:	462b      	mov	r3, r5
 800cc44:	f7f3 fb3a 	bl	80002bc <__adddf3>
 800cc48:	4642      	mov	r2, r8
 800cc4a:	4682      	mov	sl, r0
 800cc4c:	468b      	mov	fp, r1
 800cc4e:	464b      	mov	r3, r9
 800cc50:	4640      	mov	r0, r8
 800cc52:	4649      	mov	r1, r9
 800cc54:	f7f3 fce8 	bl	8000628 <__aeabi_dmul>
 800cc58:	4b6b      	ldr	r3, [pc, #428]	; (800ce08 <__ieee754_pow+0x770>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	f7f3 fb2c 	bl	80002bc <__adddf3>
 800cc64:	4652      	mov	r2, sl
 800cc66:	465b      	mov	r3, fp
 800cc68:	f7f3 fb28 	bl	80002bc <__adddf3>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fcd5 	bl	8000628 <__aeabi_dmul>
 800cc7e:	4b62      	ldr	r3, [pc, #392]	; (800ce08 <__ieee754_pow+0x770>)
 800cc80:	4680      	mov	r8, r0
 800cc82:	4689      	mov	r9, r1
 800cc84:	2200      	movs	r2, #0
 800cc86:	4620      	mov	r0, r4
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7f3 fb15 	bl	80002b8 <__aeabi_dsub>
 800cc8e:	4632      	mov	r2, r6
 800cc90:	463b      	mov	r3, r7
 800cc92:	f7f3 fb11 	bl	80002b8 <__aeabi_dsub>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4650      	mov	r0, sl
 800cc9c:	4659      	mov	r1, fp
 800cc9e:	f7f3 fb0b 	bl	80002b8 <__aeabi_dsub>
 800cca2:	ec53 2b18 	vmov	r2, r3, d8
 800cca6:	f7f3 fcbf 	bl	8000628 <__aeabi_dmul>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	4606      	mov	r6, r0
 800ccae:	460f      	mov	r7, r1
 800ccb0:	462b      	mov	r3, r5
 800ccb2:	ec51 0b19 	vmov	r0, r1, d9
 800ccb6:	f7f3 fcb7 	bl	8000628 <__aeabi_dmul>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	4639      	mov	r1, r7
 800ccc2:	f7f3 fafb 	bl	80002bc <__adddf3>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	460f      	mov	r7, r1
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4640      	mov	r0, r8
 800ccd0:	4649      	mov	r1, r9
 800ccd2:	f7f3 faf3 	bl	80002bc <__adddf3>
 800ccd6:	a33e      	add	r3, pc, #248	; (adr r3, 800cdd0 <__ieee754_pow+0x738>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	2000      	movs	r0, #0
 800ccde:	4604      	mov	r4, r0
 800cce0:	460d      	mov	r5, r1
 800cce2:	f7f3 fca1 	bl	8000628 <__aeabi_dmul>
 800cce6:	4642      	mov	r2, r8
 800cce8:	ec41 0b18 	vmov	d8, r0, r1
 800ccec:	464b      	mov	r3, r9
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fae1 	bl	80002b8 <__aeabi_dsub>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fadb 	bl	80002b8 <__aeabi_dsub>
 800cd02:	a335      	add	r3, pc, #212	; (adr r3, 800cdd8 <__ieee754_pow+0x740>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fc8e 	bl	8000628 <__aeabi_dmul>
 800cd0c:	a334      	add	r3, pc, #208	; (adr r3, 800cde0 <__ieee754_pow+0x748>)
 800cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	4620      	mov	r0, r4
 800cd18:	4629      	mov	r1, r5
 800cd1a:	f7f3 fc85 	bl	8000628 <__aeabi_dmul>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4630      	mov	r0, r6
 800cd24:	4639      	mov	r1, r7
 800cd26:	f7f3 fac9 	bl	80002bc <__adddf3>
 800cd2a:	9a07      	ldr	r2, [sp, #28]
 800cd2c:	4b37      	ldr	r3, [pc, #220]	; (800ce0c <__ieee754_pow+0x774>)
 800cd2e:	4413      	add	r3, r2
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	f7f3 fac2 	bl	80002bc <__adddf3>
 800cd38:	4682      	mov	sl, r0
 800cd3a:	9805      	ldr	r0, [sp, #20]
 800cd3c:	468b      	mov	fp, r1
 800cd3e:	f7f3 fc09 	bl	8000554 <__aeabi_i2d>
 800cd42:	9a07      	ldr	r2, [sp, #28]
 800cd44:	4b32      	ldr	r3, [pc, #200]	; (800ce10 <__ieee754_pow+0x778>)
 800cd46:	4413      	add	r3, r2
 800cd48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	460f      	mov	r7, r1
 800cd50:	4652      	mov	r2, sl
 800cd52:	465b      	mov	r3, fp
 800cd54:	ec51 0b18 	vmov	r0, r1, d8
 800cd58:	f7f3 fab0 	bl	80002bc <__adddf3>
 800cd5c:	4642      	mov	r2, r8
 800cd5e:	464b      	mov	r3, r9
 800cd60:	f7f3 faac 	bl	80002bc <__adddf3>
 800cd64:	4632      	mov	r2, r6
 800cd66:	463b      	mov	r3, r7
 800cd68:	f7f3 faa8 	bl	80002bc <__adddf3>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	4632      	mov	r2, r6
 800cd70:	463b      	mov	r3, r7
 800cd72:	4604      	mov	r4, r0
 800cd74:	460d      	mov	r5, r1
 800cd76:	f7f3 fa9f 	bl	80002b8 <__aeabi_dsub>
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	464b      	mov	r3, r9
 800cd7e:	f7f3 fa9b 	bl	80002b8 <__aeabi_dsub>
 800cd82:	ec53 2b18 	vmov	r2, r3, d8
 800cd86:	f7f3 fa97 	bl	80002b8 <__aeabi_dsub>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	e610      	b.n	800c9b6 <__ieee754_pow+0x31e>
 800cd94:	2401      	movs	r4, #1
 800cd96:	e6a1      	b.n	800cadc <__ieee754_pow+0x444>
 800cd98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cde8 <__ieee754_pow+0x750>
 800cd9c:	e617      	b.n	800c9ce <__ieee754_pow+0x336>
 800cd9e:	bf00      	nop
 800cda0:	4a454eef 	.word	0x4a454eef
 800cda4:	3fca7e28 	.word	0x3fca7e28
 800cda8:	93c9db65 	.word	0x93c9db65
 800cdac:	3fcd864a 	.word	0x3fcd864a
 800cdb0:	a91d4101 	.word	0xa91d4101
 800cdb4:	3fd17460 	.word	0x3fd17460
 800cdb8:	518f264d 	.word	0x518f264d
 800cdbc:	3fd55555 	.word	0x3fd55555
 800cdc0:	db6fabff 	.word	0xdb6fabff
 800cdc4:	3fdb6db6 	.word	0x3fdb6db6
 800cdc8:	33333303 	.word	0x33333303
 800cdcc:	3fe33333 	.word	0x3fe33333
 800cdd0:	e0000000 	.word	0xe0000000
 800cdd4:	3feec709 	.word	0x3feec709
 800cdd8:	dc3a03fd 	.word	0xdc3a03fd
 800cddc:	3feec709 	.word	0x3feec709
 800cde0:	145b01f5 	.word	0x145b01f5
 800cde4:	be3e2fe0 	.word	0xbe3e2fe0
 800cde8:	00000000 	.word	0x00000000
 800cdec:	3ff00000 	.word	0x3ff00000
 800cdf0:	7ff00000 	.word	0x7ff00000
 800cdf4:	43400000 	.word	0x43400000
 800cdf8:	0003988e 	.word	0x0003988e
 800cdfc:	000bb679 	.word	0x000bb679
 800ce00:	0800ee58 	.word	0x0800ee58
 800ce04:	3ff00000 	.word	0x3ff00000
 800ce08:	40080000 	.word	0x40080000
 800ce0c:	0800ee78 	.word	0x0800ee78
 800ce10:	0800ee68 	.word	0x0800ee68
 800ce14:	a3b5      	add	r3, pc, #724	; (adr r3, 800d0ec <__ieee754_pow+0xa54>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	4649      	mov	r1, r9
 800ce1e:	f7f3 fa4d 	bl	80002bc <__adddf3>
 800ce22:	4622      	mov	r2, r4
 800ce24:	ec41 0b1a 	vmov	d10, r0, r1
 800ce28:	462b      	mov	r3, r5
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	f7f3 fa43 	bl	80002b8 <__aeabi_dsub>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	ec51 0b1a 	vmov	r0, r1, d10
 800ce3a:	f7f3 fe85 	bl	8000b48 <__aeabi_dcmpgt>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	f47f ae04 	bne.w	800ca4c <__ieee754_pow+0x3b4>
 800ce44:	4aa4      	ldr	r2, [pc, #656]	; (800d0d8 <__ieee754_pow+0xa40>)
 800ce46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	f340 8108 	ble.w	800d060 <__ieee754_pow+0x9c8>
 800ce50:	151b      	asrs	r3, r3, #20
 800ce52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce5a:	fa4a f303 	asr.w	r3, sl, r3
 800ce5e:	445b      	add	r3, fp
 800ce60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce64:	4e9d      	ldr	r6, [pc, #628]	; (800d0dc <__ieee754_pow+0xa44>)
 800ce66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce6a:	4116      	asrs	r6, r2
 800ce6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce70:	2000      	movs	r0, #0
 800ce72:	ea23 0106 	bic.w	r1, r3, r6
 800ce76:	f1c2 0214 	rsb	r2, r2, #20
 800ce7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce7e:	fa4a fa02 	asr.w	sl, sl, r2
 800ce82:	f1bb 0f00 	cmp.w	fp, #0
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	bfb8      	it	lt
 800ce90:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce94:	f7f3 fa10 	bl	80002b8 <__aeabi_dsub>
 800ce98:	ec41 0b19 	vmov	d9, r0, r1
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	464b      	mov	r3, r9
 800cea0:	ec51 0b19 	vmov	r0, r1, d9
 800cea4:	f7f3 fa0a 	bl	80002bc <__adddf3>
 800cea8:	a37b      	add	r3, pc, #492	; (adr r3, 800d098 <__ieee754_pow+0xa00>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	2000      	movs	r0, #0
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	f7f3 fbb8 	bl	8000628 <__aeabi_dmul>
 800ceb8:	ec53 2b19 	vmov	r2, r3, d9
 800cebc:	4606      	mov	r6, r0
 800cebe:	460f      	mov	r7, r1
 800cec0:	4620      	mov	r0, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7f3 f9f8 	bl	80002b8 <__aeabi_dsub>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4640      	mov	r0, r8
 800cece:	4649      	mov	r1, r9
 800ced0:	f7f3 f9f2 	bl	80002b8 <__aeabi_dsub>
 800ced4:	a372      	add	r3, pc, #456	; (adr r3, 800d0a0 <__ieee754_pow+0xa08>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	f7f3 fba5 	bl	8000628 <__aeabi_dmul>
 800cede:	a372      	add	r3, pc, #456	; (adr r3, 800d0a8 <__ieee754_pow+0xa10>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	4680      	mov	r8, r0
 800cee6:	4689      	mov	r9, r1
 800cee8:	4620      	mov	r0, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 fb9c 	bl	8000628 <__aeabi_dmul>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4640      	mov	r0, r8
 800cef6:	4649      	mov	r1, r9
 800cef8:	f7f3 f9e0 	bl	80002bc <__adddf3>
 800cefc:	4604      	mov	r4, r0
 800cefe:	460d      	mov	r5, r1
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4630      	mov	r0, r6
 800cf06:	4639      	mov	r1, r7
 800cf08:	f7f3 f9d8 	bl	80002bc <__adddf3>
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	463b      	mov	r3, r7
 800cf10:	4680      	mov	r8, r0
 800cf12:	4689      	mov	r9, r1
 800cf14:	f7f3 f9d0 	bl	80002b8 <__aeabi_dsub>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	4629      	mov	r1, r5
 800cf20:	f7f3 f9ca 	bl	80002b8 <__aeabi_dsub>
 800cf24:	4642      	mov	r2, r8
 800cf26:	4606      	mov	r6, r0
 800cf28:	460f      	mov	r7, r1
 800cf2a:	464b      	mov	r3, r9
 800cf2c:	4640      	mov	r0, r8
 800cf2e:	4649      	mov	r1, r9
 800cf30:	f7f3 fb7a 	bl	8000628 <__aeabi_dmul>
 800cf34:	a35e      	add	r3, pc, #376	; (adr r3, 800d0b0 <__ieee754_pow+0xa18>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	460d      	mov	r5, r1
 800cf3e:	f7f3 fb73 	bl	8000628 <__aeabi_dmul>
 800cf42:	a35d      	add	r3, pc, #372	; (adr r3, 800d0b8 <__ieee754_pow+0xa20>)
 800cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf48:	f7f3 f9b6 	bl	80002b8 <__aeabi_dsub>
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	462b      	mov	r3, r5
 800cf50:	f7f3 fb6a 	bl	8000628 <__aeabi_dmul>
 800cf54:	a35a      	add	r3, pc, #360	; (adr r3, 800d0c0 <__ieee754_pow+0xa28>)
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	f7f3 f9af 	bl	80002bc <__adddf3>
 800cf5e:	4622      	mov	r2, r4
 800cf60:	462b      	mov	r3, r5
 800cf62:	f7f3 fb61 	bl	8000628 <__aeabi_dmul>
 800cf66:	a358      	add	r3, pc, #352	; (adr r3, 800d0c8 <__ieee754_pow+0xa30>)
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	f7f3 f9a4 	bl	80002b8 <__aeabi_dsub>
 800cf70:	4622      	mov	r2, r4
 800cf72:	462b      	mov	r3, r5
 800cf74:	f7f3 fb58 	bl	8000628 <__aeabi_dmul>
 800cf78:	a355      	add	r3, pc, #340	; (adr r3, 800d0d0 <__ieee754_pow+0xa38>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	f7f3 f99d 	bl	80002bc <__adddf3>
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	f7f3 fb4f 	bl	8000628 <__aeabi_dmul>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 f991 	bl	80002b8 <__aeabi_dsub>
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	f7f3 fb41 	bl	8000628 <__aeabi_dmul>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	ec41 0b19 	vmov	d9, r0, r1
 800cfac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7f3 f980 	bl	80002b8 <__aeabi_dsub>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	ec51 0b19 	vmov	r0, r1, d9
 800cfc0:	f7f3 fc5c 	bl	800087c <__aeabi_ddiv>
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	460d      	mov	r5, r1
 800cfca:	463b      	mov	r3, r7
 800cfcc:	4640      	mov	r0, r8
 800cfce:	4649      	mov	r1, r9
 800cfd0:	f7f3 fb2a 	bl	8000628 <__aeabi_dmul>
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	463b      	mov	r3, r7
 800cfd8:	f7f3 f970 	bl	80002bc <__adddf3>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 f968 	bl	80002b8 <__aeabi_dsub>
 800cfe8:	4642      	mov	r2, r8
 800cfea:	464b      	mov	r3, r9
 800cfec:	f7f3 f964 	bl	80002b8 <__aeabi_dsub>
 800cff0:	460b      	mov	r3, r1
 800cff2:	4602      	mov	r2, r0
 800cff4:	493a      	ldr	r1, [pc, #232]	; (800d0e0 <__ieee754_pow+0xa48>)
 800cff6:	2000      	movs	r0, #0
 800cff8:	f7f3 f95e 	bl	80002b8 <__aeabi_dsub>
 800cffc:	ec41 0b10 	vmov	d0, r0, r1
 800d000:	ee10 3a90 	vmov	r3, s1
 800d004:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d00c:	da2b      	bge.n	800d066 <__ieee754_pow+0x9ce>
 800d00e:	4650      	mov	r0, sl
 800d010:	f001 fa6e 	bl	800e4f0 <scalbn>
 800d014:	ec51 0b10 	vmov	r0, r1, d0
 800d018:	ec53 2b18 	vmov	r2, r3, d8
 800d01c:	f7ff bbed 	b.w	800c7fa <__ieee754_pow+0x162>
 800d020:	4b30      	ldr	r3, [pc, #192]	; (800d0e4 <__ieee754_pow+0xa4c>)
 800d022:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d026:	429e      	cmp	r6, r3
 800d028:	f77f af0c 	ble.w	800ce44 <__ieee754_pow+0x7ac>
 800d02c:	4b2e      	ldr	r3, [pc, #184]	; (800d0e8 <__ieee754_pow+0xa50>)
 800d02e:	440b      	add	r3, r1
 800d030:	4303      	orrs	r3, r0
 800d032:	d009      	beq.n	800d048 <__ieee754_pow+0x9b0>
 800d034:	ec51 0b18 	vmov	r0, r1, d8
 800d038:	2200      	movs	r2, #0
 800d03a:	2300      	movs	r3, #0
 800d03c:	f7f3 fd66 	bl	8000b0c <__aeabi_dcmplt>
 800d040:	3800      	subs	r0, #0
 800d042:	bf18      	it	ne
 800d044:	2001      	movne	r0, #1
 800d046:	e447      	b.n	800c8d8 <__ieee754_pow+0x240>
 800d048:	4622      	mov	r2, r4
 800d04a:	462b      	mov	r3, r5
 800d04c:	f7f3 f934 	bl	80002b8 <__aeabi_dsub>
 800d050:	4642      	mov	r2, r8
 800d052:	464b      	mov	r3, r9
 800d054:	f7f3 fd6e 	bl	8000b34 <__aeabi_dcmpge>
 800d058:	2800      	cmp	r0, #0
 800d05a:	f43f aef3 	beq.w	800ce44 <__ieee754_pow+0x7ac>
 800d05e:	e7e9      	b.n	800d034 <__ieee754_pow+0x99c>
 800d060:	f04f 0a00 	mov.w	sl, #0
 800d064:	e71a      	b.n	800ce9c <__ieee754_pow+0x804>
 800d066:	ec51 0b10 	vmov	r0, r1, d0
 800d06a:	4619      	mov	r1, r3
 800d06c:	e7d4      	b.n	800d018 <__ieee754_pow+0x980>
 800d06e:	491c      	ldr	r1, [pc, #112]	; (800d0e0 <__ieee754_pow+0xa48>)
 800d070:	2000      	movs	r0, #0
 800d072:	f7ff bb30 	b.w	800c6d6 <__ieee754_pow+0x3e>
 800d076:	2000      	movs	r0, #0
 800d078:	2100      	movs	r1, #0
 800d07a:	f7ff bb2c 	b.w	800c6d6 <__ieee754_pow+0x3e>
 800d07e:	4630      	mov	r0, r6
 800d080:	4639      	mov	r1, r7
 800d082:	f7ff bb28 	b.w	800c6d6 <__ieee754_pow+0x3e>
 800d086:	9204      	str	r2, [sp, #16]
 800d088:	f7ff bb7a 	b.w	800c780 <__ieee754_pow+0xe8>
 800d08c:	2300      	movs	r3, #0
 800d08e:	f7ff bb64 	b.w	800c75a <__ieee754_pow+0xc2>
 800d092:	bf00      	nop
 800d094:	f3af 8000 	nop.w
 800d098:	00000000 	.word	0x00000000
 800d09c:	3fe62e43 	.word	0x3fe62e43
 800d0a0:	fefa39ef 	.word	0xfefa39ef
 800d0a4:	3fe62e42 	.word	0x3fe62e42
 800d0a8:	0ca86c39 	.word	0x0ca86c39
 800d0ac:	be205c61 	.word	0xbe205c61
 800d0b0:	72bea4d0 	.word	0x72bea4d0
 800d0b4:	3e663769 	.word	0x3e663769
 800d0b8:	c5d26bf1 	.word	0xc5d26bf1
 800d0bc:	3ebbbd41 	.word	0x3ebbbd41
 800d0c0:	af25de2c 	.word	0xaf25de2c
 800d0c4:	3f11566a 	.word	0x3f11566a
 800d0c8:	16bebd93 	.word	0x16bebd93
 800d0cc:	3f66c16c 	.word	0x3f66c16c
 800d0d0:	5555553e 	.word	0x5555553e
 800d0d4:	3fc55555 	.word	0x3fc55555
 800d0d8:	3fe00000 	.word	0x3fe00000
 800d0dc:	000fffff 	.word	0x000fffff
 800d0e0:	3ff00000 	.word	0x3ff00000
 800d0e4:	4090cbff 	.word	0x4090cbff
 800d0e8:	3f6f3400 	.word	0x3f6f3400
 800d0ec:	652b82fe 	.word	0x652b82fe
 800d0f0:	3c971547 	.word	0x3c971547
 800d0f4:	00000000 	.word	0x00000000

0800d0f8 <__ieee754_rem_pio2>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	ed2d 8b02 	vpush	{d8}
 800d100:	ec55 4b10 	vmov	r4, r5, d0
 800d104:	4bca      	ldr	r3, [pc, #808]	; (800d430 <__ieee754_rem_pio2+0x338>)
 800d106:	b08b      	sub	sp, #44	; 0x2c
 800d108:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d10c:	4598      	cmp	r8, r3
 800d10e:	4682      	mov	sl, r0
 800d110:	9502      	str	r5, [sp, #8]
 800d112:	dc08      	bgt.n	800d126 <__ieee754_rem_pio2+0x2e>
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	ed80 0b00 	vstr	d0, [r0]
 800d11c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d120:	f04f 0b00 	mov.w	fp, #0
 800d124:	e028      	b.n	800d178 <__ieee754_rem_pio2+0x80>
 800d126:	4bc3      	ldr	r3, [pc, #780]	; (800d434 <__ieee754_rem_pio2+0x33c>)
 800d128:	4598      	cmp	r8, r3
 800d12a:	dc78      	bgt.n	800d21e <__ieee754_rem_pio2+0x126>
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	4ec2      	ldr	r6, [pc, #776]	; (800d438 <__ieee754_rem_pio2+0x340>)
 800d130:	2b00      	cmp	r3, #0
 800d132:	ee10 0a10 	vmov	r0, s0
 800d136:	a3b0      	add	r3, pc, #704	; (adr r3, 800d3f8 <__ieee754_rem_pio2+0x300>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	4629      	mov	r1, r5
 800d13e:	dd39      	ble.n	800d1b4 <__ieee754_rem_pio2+0xbc>
 800d140:	f7f3 f8ba 	bl	80002b8 <__aeabi_dsub>
 800d144:	45b0      	cmp	r8, r6
 800d146:	4604      	mov	r4, r0
 800d148:	460d      	mov	r5, r1
 800d14a:	d01b      	beq.n	800d184 <__ieee754_rem_pio2+0x8c>
 800d14c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d400 <__ieee754_rem_pio2+0x308>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f8b1 	bl	80002b8 <__aeabi_dsub>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	e9ca 2300 	strd	r2, r3, [sl]
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 f8a9 	bl	80002b8 <__aeabi_dsub>
 800d166:	a3a6      	add	r3, pc, #664	; (adr r3, 800d400 <__ieee754_rem_pio2+0x308>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f8a4 	bl	80002b8 <__aeabi_dsub>
 800d170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d174:	f04f 0b01 	mov.w	fp, #1
 800d178:	4658      	mov	r0, fp
 800d17a:	b00b      	add	sp, #44	; 0x2c
 800d17c:	ecbd 8b02 	vpop	{d8}
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	a3a0      	add	r3, pc, #640	; (adr r3, 800d408 <__ieee754_rem_pio2+0x310>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f7f3 f895 	bl	80002b8 <__aeabi_dsub>
 800d18e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d410 <__ieee754_rem_pio2+0x318>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	4604      	mov	r4, r0
 800d196:	460d      	mov	r5, r1
 800d198:	f7f3 f88e 	bl	80002b8 <__aeabi_dsub>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	e9ca 2300 	strd	r2, r3, [sl]
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 f886 	bl	80002b8 <__aeabi_dsub>
 800d1ac:	a398      	add	r3, pc, #608	; (adr r3, 800d410 <__ieee754_rem_pio2+0x318>)
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	e7db      	b.n	800d16c <__ieee754_rem_pio2+0x74>
 800d1b4:	f7f3 f882 	bl	80002bc <__adddf3>
 800d1b8:	45b0      	cmp	r8, r6
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	460d      	mov	r5, r1
 800d1be:	d016      	beq.n	800d1ee <__ieee754_rem_pio2+0xf6>
 800d1c0:	a38f      	add	r3, pc, #572	; (adr r3, 800d400 <__ieee754_rem_pio2+0x308>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	f7f3 f879 	bl	80002bc <__adddf3>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	e9ca 2300 	strd	r2, r3, [sl]
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 f86f 	bl	80002b8 <__aeabi_dsub>
 800d1da:	a389      	add	r3, pc, #548	; (adr r3, 800d400 <__ieee754_rem_pio2+0x308>)
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 f86c 	bl	80002bc <__adddf3>
 800d1e4:	f04f 3bff 	mov.w	fp, #4294967295
 800d1e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1ec:	e7c4      	b.n	800d178 <__ieee754_rem_pio2+0x80>
 800d1ee:	a386      	add	r3, pc, #536	; (adr r3, 800d408 <__ieee754_rem_pio2+0x310>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f7f3 f862 	bl	80002bc <__adddf3>
 800d1f8:	a385      	add	r3, pc, #532	; (adr r3, 800d410 <__ieee754_rem_pio2+0x318>)
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	4604      	mov	r4, r0
 800d200:	460d      	mov	r5, r1
 800d202:	f7f3 f85b 	bl	80002bc <__adddf3>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	e9ca 2300 	strd	r2, r3, [sl]
 800d20e:	4620      	mov	r0, r4
 800d210:	4629      	mov	r1, r5
 800d212:	f7f3 f851 	bl	80002b8 <__aeabi_dsub>
 800d216:	a37e      	add	r3, pc, #504	; (adr r3, 800d410 <__ieee754_rem_pio2+0x318>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	e7e0      	b.n	800d1e0 <__ieee754_rem_pio2+0xe8>
 800d21e:	4b87      	ldr	r3, [pc, #540]	; (800d43c <__ieee754_rem_pio2+0x344>)
 800d220:	4598      	cmp	r8, r3
 800d222:	f300 80d9 	bgt.w	800d3d8 <__ieee754_rem_pio2+0x2e0>
 800d226:	f001 f8cf 	bl	800e3c8 <fabs>
 800d22a:	ec55 4b10 	vmov	r4, r5, d0
 800d22e:	ee10 0a10 	vmov	r0, s0
 800d232:	a379      	add	r3, pc, #484	; (adr r3, 800d418 <__ieee754_rem_pio2+0x320>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	4629      	mov	r1, r5
 800d23a:	f7f3 f9f5 	bl	8000628 <__aeabi_dmul>
 800d23e:	4b80      	ldr	r3, [pc, #512]	; (800d440 <__ieee754_rem_pio2+0x348>)
 800d240:	2200      	movs	r2, #0
 800d242:	f7f3 f83b 	bl	80002bc <__adddf3>
 800d246:	f7f3 fc9f 	bl	8000b88 <__aeabi_d2iz>
 800d24a:	4683      	mov	fp, r0
 800d24c:	f7f3 f982 	bl	8000554 <__aeabi_i2d>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	ec43 2b18 	vmov	d8, r2, r3
 800d258:	a367      	add	r3, pc, #412	; (adr r3, 800d3f8 <__ieee754_rem_pio2+0x300>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 f9e3 	bl	8000628 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 f825 	bl	80002b8 <__aeabi_dsub>
 800d26e:	a364      	add	r3, pc, #400	; (adr r3, 800d400 <__ieee754_rem_pio2+0x308>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	ec51 0b18 	vmov	r0, r1, d8
 800d27c:	f7f3 f9d4 	bl	8000628 <__aeabi_dmul>
 800d280:	f1bb 0f1f 	cmp.w	fp, #31
 800d284:	4604      	mov	r4, r0
 800d286:	460d      	mov	r5, r1
 800d288:	dc0d      	bgt.n	800d2a6 <__ieee754_rem_pio2+0x1ae>
 800d28a:	4b6e      	ldr	r3, [pc, #440]	; (800d444 <__ieee754_rem_pio2+0x34c>)
 800d28c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d294:	4543      	cmp	r3, r8
 800d296:	d006      	beq.n	800d2a6 <__ieee754_rem_pio2+0x1ae>
 800d298:	4622      	mov	r2, r4
 800d29a:	462b      	mov	r3, r5
 800d29c:	4630      	mov	r0, r6
 800d29e:	4639      	mov	r1, r7
 800d2a0:	f7f3 f80a 	bl	80002b8 <__aeabi_dsub>
 800d2a4:	e00f      	b.n	800d2c6 <__ieee754_rem_pio2+0x1ce>
 800d2a6:	462b      	mov	r3, r5
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7f3 f803 	bl	80002b8 <__aeabi_dsub>
 800d2b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d2b6:	9303      	str	r3, [sp, #12]
 800d2b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d2c0:	f1b8 0f10 	cmp.w	r8, #16
 800d2c4:	dc02      	bgt.n	800d2cc <__ieee754_rem_pio2+0x1d4>
 800d2c6:	e9ca 0100 	strd	r0, r1, [sl]
 800d2ca:	e039      	b.n	800d340 <__ieee754_rem_pio2+0x248>
 800d2cc:	a34e      	add	r3, pc, #312	; (adr r3, 800d408 <__ieee754_rem_pio2+0x310>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	ec51 0b18 	vmov	r0, r1, d8
 800d2d6:	f7f3 f9a7 	bl	8000628 <__aeabi_dmul>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	460d      	mov	r5, r1
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f2 ffe7 	bl	80002b8 <__aeabi_dsub>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	4689      	mov	r9, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f2 ffdf 	bl	80002b8 <__aeabi_dsub>
 800d2fa:	4622      	mov	r2, r4
 800d2fc:	462b      	mov	r3, r5
 800d2fe:	f7f2 ffdb 	bl	80002b8 <__aeabi_dsub>
 800d302:	a343      	add	r3, pc, #268	; (adr r3, 800d410 <__ieee754_rem_pio2+0x318>)
 800d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d308:	4604      	mov	r4, r0
 800d30a:	460d      	mov	r5, r1
 800d30c:	ec51 0b18 	vmov	r0, r1, d8
 800d310:	f7f3 f98a 	bl	8000628 <__aeabi_dmul>
 800d314:	4622      	mov	r2, r4
 800d316:	462b      	mov	r3, r5
 800d318:	f7f2 ffce 	bl	80002b8 <__aeabi_dsub>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4604      	mov	r4, r0
 800d322:	460d      	mov	r5, r1
 800d324:	4640      	mov	r0, r8
 800d326:	4649      	mov	r1, r9
 800d328:	f7f2 ffc6 	bl	80002b8 <__aeabi_dsub>
 800d32c:	9a03      	ldr	r2, [sp, #12]
 800d32e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2b31      	cmp	r3, #49	; 0x31
 800d336:	dc24      	bgt.n	800d382 <__ieee754_rem_pio2+0x28a>
 800d338:	e9ca 0100 	strd	r0, r1, [sl]
 800d33c:	4646      	mov	r6, r8
 800d33e:	464f      	mov	r7, r9
 800d340:	e9da 8900 	ldrd	r8, r9, [sl]
 800d344:	4630      	mov	r0, r6
 800d346:	4642      	mov	r2, r8
 800d348:	464b      	mov	r3, r9
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f2 ffb4 	bl	80002b8 <__aeabi_dsub>
 800d350:	462b      	mov	r3, r5
 800d352:	4622      	mov	r2, r4
 800d354:	f7f2 ffb0 	bl	80002b8 <__aeabi_dsub>
 800d358:	9b02      	ldr	r3, [sp, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d360:	f6bf af0a 	bge.w	800d178 <__ieee754_rem_pio2+0x80>
 800d364:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d368:	f8ca 3004 	str.w	r3, [sl, #4]
 800d36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d370:	f8ca 8000 	str.w	r8, [sl]
 800d374:	f8ca 0008 	str.w	r0, [sl, #8]
 800d378:	f8ca 300c 	str.w	r3, [sl, #12]
 800d37c:	f1cb 0b00 	rsb	fp, fp, #0
 800d380:	e6fa      	b.n	800d178 <__ieee754_rem_pio2+0x80>
 800d382:	a327      	add	r3, pc, #156	; (adr r3, 800d420 <__ieee754_rem_pio2+0x328>)
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	ec51 0b18 	vmov	r0, r1, d8
 800d38c:	f7f3 f94c 	bl	8000628 <__aeabi_dmul>
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4640      	mov	r0, r8
 800d39a:	4649      	mov	r1, r9
 800d39c:	f7f2 ff8c 	bl	80002b8 <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	460f      	mov	r7, r1
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f2 ff84 	bl	80002b8 <__aeabi_dsub>
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	462b      	mov	r3, r5
 800d3b4:	f7f2 ff80 	bl	80002b8 <__aeabi_dsub>
 800d3b8:	a31b      	add	r3, pc, #108	; (adr r3, 800d428 <__ieee754_rem_pio2+0x330>)
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	4604      	mov	r4, r0
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	ec51 0b18 	vmov	r0, r1, d8
 800d3c6:	f7f3 f92f 	bl	8000628 <__aeabi_dmul>
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	462b      	mov	r3, r5
 800d3ce:	f7f2 ff73 	bl	80002b8 <__aeabi_dsub>
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	e75f      	b.n	800d298 <__ieee754_rem_pio2+0x1a0>
 800d3d8:	4b1b      	ldr	r3, [pc, #108]	; (800d448 <__ieee754_rem_pio2+0x350>)
 800d3da:	4598      	cmp	r8, r3
 800d3dc:	dd36      	ble.n	800d44c <__ieee754_rem_pio2+0x354>
 800d3de:	ee10 2a10 	vmov	r2, s0
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f7f2 ff66 	bl	80002b8 <__aeabi_dsub>
 800d3ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3f0:	e9ca 0100 	strd	r0, r1, [sl]
 800d3f4:	e694      	b.n	800d120 <__ieee754_rem_pio2+0x28>
 800d3f6:	bf00      	nop
 800d3f8:	54400000 	.word	0x54400000
 800d3fc:	3ff921fb 	.word	0x3ff921fb
 800d400:	1a626331 	.word	0x1a626331
 800d404:	3dd0b461 	.word	0x3dd0b461
 800d408:	1a600000 	.word	0x1a600000
 800d40c:	3dd0b461 	.word	0x3dd0b461
 800d410:	2e037073 	.word	0x2e037073
 800d414:	3ba3198a 	.word	0x3ba3198a
 800d418:	6dc9c883 	.word	0x6dc9c883
 800d41c:	3fe45f30 	.word	0x3fe45f30
 800d420:	2e000000 	.word	0x2e000000
 800d424:	3ba3198a 	.word	0x3ba3198a
 800d428:	252049c1 	.word	0x252049c1
 800d42c:	397b839a 	.word	0x397b839a
 800d430:	3fe921fb 	.word	0x3fe921fb
 800d434:	4002d97b 	.word	0x4002d97b
 800d438:	3ff921fb 	.word	0x3ff921fb
 800d43c:	413921fb 	.word	0x413921fb
 800d440:	3fe00000 	.word	0x3fe00000
 800d444:	0800ee88 	.word	0x0800ee88
 800d448:	7fefffff 	.word	0x7fefffff
 800d44c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d450:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d454:	ee10 0a10 	vmov	r0, s0
 800d458:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d45c:	ee10 6a10 	vmov	r6, s0
 800d460:	460f      	mov	r7, r1
 800d462:	f7f3 fb91 	bl	8000b88 <__aeabi_d2iz>
 800d466:	f7f3 f875 	bl	8000554 <__aeabi_i2d>
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	4630      	mov	r0, r6
 800d470:	4639      	mov	r1, r7
 800d472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d476:	f7f2 ff1f 	bl	80002b8 <__aeabi_dsub>
 800d47a:	4b23      	ldr	r3, [pc, #140]	; (800d508 <__ieee754_rem_pio2+0x410>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	f7f3 f8d3 	bl	8000628 <__aeabi_dmul>
 800d482:	460f      	mov	r7, r1
 800d484:	4606      	mov	r6, r0
 800d486:	f7f3 fb7f 	bl	8000b88 <__aeabi_d2iz>
 800d48a:	f7f3 f863 	bl	8000554 <__aeabi_i2d>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d49a:	f7f2 ff0d 	bl	80002b8 <__aeabi_dsub>
 800d49e:	4b1a      	ldr	r3, [pc, #104]	; (800d508 <__ieee754_rem_pio2+0x410>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f7f3 f8c1 	bl	8000628 <__aeabi_dmul>
 800d4a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4aa:	ad04      	add	r5, sp, #16
 800d4ac:	f04f 0803 	mov.w	r8, #3
 800d4b0:	46a9      	mov	r9, r5
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	2700      	movs	r7, #0
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	463b      	mov	r3, r7
 800d4ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d4be:	46c3      	mov	fp, r8
 800d4c0:	3d08      	subs	r5, #8
 800d4c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4c6:	f7f3 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d1f3      	bne.n	800d4b6 <__ieee754_rem_pio2+0x3be>
 800d4ce:	4b0f      	ldr	r3, [pc, #60]	; (800d50c <__ieee754_rem_pio2+0x414>)
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	465b      	mov	r3, fp
 800d4da:	4651      	mov	r1, sl
 800d4dc:	4648      	mov	r0, r9
 800d4de:	f000 f993 	bl	800d808 <__kernel_rem_pio2>
 800d4e2:	9b02      	ldr	r3, [sp, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	4683      	mov	fp, r0
 800d4e8:	f6bf ae46 	bge.w	800d178 <__ieee754_rem_pio2+0x80>
 800d4ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800d4f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4f4:	e9ca 2300 	strd	r2, r3, [sl]
 800d4f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d4fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d500:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d504:	e73a      	b.n	800d37c <__ieee754_rem_pio2+0x284>
 800d506:	bf00      	nop
 800d508:	41700000 	.word	0x41700000
 800d50c:	0800ef08 	.word	0x0800ef08

0800d510 <__ieee754_sqrt>:
 800d510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d514:	ec55 4b10 	vmov	r4, r5, d0
 800d518:	4e55      	ldr	r6, [pc, #340]	; (800d670 <__ieee754_sqrt+0x160>)
 800d51a:	43ae      	bics	r6, r5
 800d51c:	ee10 0a10 	vmov	r0, s0
 800d520:	ee10 3a10 	vmov	r3, s0
 800d524:	462a      	mov	r2, r5
 800d526:	4629      	mov	r1, r5
 800d528:	d110      	bne.n	800d54c <__ieee754_sqrt+0x3c>
 800d52a:	ee10 2a10 	vmov	r2, s0
 800d52e:	462b      	mov	r3, r5
 800d530:	f7f3 f87a 	bl	8000628 <__aeabi_dmul>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 febe 	bl	80002bc <__adddf3>
 800d540:	4604      	mov	r4, r0
 800d542:	460d      	mov	r5, r1
 800d544:	ec45 4b10 	vmov	d0, r4, r5
 800d548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54c:	2d00      	cmp	r5, #0
 800d54e:	dc10      	bgt.n	800d572 <__ieee754_sqrt+0x62>
 800d550:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d554:	4330      	orrs	r0, r6
 800d556:	d0f5      	beq.n	800d544 <__ieee754_sqrt+0x34>
 800d558:	b15d      	cbz	r5, 800d572 <__ieee754_sqrt+0x62>
 800d55a:	ee10 2a10 	vmov	r2, s0
 800d55e:	462b      	mov	r3, r5
 800d560:	ee10 0a10 	vmov	r0, s0
 800d564:	f7f2 fea8 	bl	80002b8 <__aeabi_dsub>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	f7f3 f986 	bl	800087c <__aeabi_ddiv>
 800d570:	e7e6      	b.n	800d540 <__ieee754_sqrt+0x30>
 800d572:	1512      	asrs	r2, r2, #20
 800d574:	d074      	beq.n	800d660 <__ieee754_sqrt+0x150>
 800d576:	07d4      	lsls	r4, r2, #31
 800d578:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d57c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d584:	bf5e      	ittt	pl
 800d586:	0fda      	lsrpl	r2, r3, #31
 800d588:	005b      	lslpl	r3, r3, #1
 800d58a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d58e:	2400      	movs	r4, #0
 800d590:	0fda      	lsrs	r2, r3, #31
 800d592:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d596:	107f      	asrs	r7, r7, #1
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	2516      	movs	r5, #22
 800d59c:	4620      	mov	r0, r4
 800d59e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d5a2:	1886      	adds	r6, r0, r2
 800d5a4:	428e      	cmp	r6, r1
 800d5a6:	bfde      	ittt	le
 800d5a8:	1b89      	suble	r1, r1, r6
 800d5aa:	18b0      	addle	r0, r6, r2
 800d5ac:	18a4      	addle	r4, r4, r2
 800d5ae:	0049      	lsls	r1, r1, #1
 800d5b0:	3d01      	subs	r5, #1
 800d5b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d5b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d5ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5be:	d1f0      	bne.n	800d5a2 <__ieee754_sqrt+0x92>
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	f04f 0e20 	mov.w	lr, #32
 800d5c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d5ca:	4281      	cmp	r1, r0
 800d5cc:	eb06 0c05 	add.w	ip, r6, r5
 800d5d0:	dc02      	bgt.n	800d5d8 <__ieee754_sqrt+0xc8>
 800d5d2:	d113      	bne.n	800d5fc <__ieee754_sqrt+0xec>
 800d5d4:	459c      	cmp	ip, r3
 800d5d6:	d811      	bhi.n	800d5fc <__ieee754_sqrt+0xec>
 800d5d8:	f1bc 0f00 	cmp.w	ip, #0
 800d5dc:	eb0c 0506 	add.w	r5, ip, r6
 800d5e0:	da43      	bge.n	800d66a <__ieee754_sqrt+0x15a>
 800d5e2:	2d00      	cmp	r5, #0
 800d5e4:	db41      	blt.n	800d66a <__ieee754_sqrt+0x15a>
 800d5e6:	f100 0801 	add.w	r8, r0, #1
 800d5ea:	1a09      	subs	r1, r1, r0
 800d5ec:	459c      	cmp	ip, r3
 800d5ee:	bf88      	it	hi
 800d5f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d5f4:	eba3 030c 	sub.w	r3, r3, ip
 800d5f8:	4432      	add	r2, r6
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d600:	f1be 0e01 	subs.w	lr, lr, #1
 800d604:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d608:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d60c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d610:	d1db      	bne.n	800d5ca <__ieee754_sqrt+0xba>
 800d612:	430b      	orrs	r3, r1
 800d614:	d006      	beq.n	800d624 <__ieee754_sqrt+0x114>
 800d616:	1c50      	adds	r0, r2, #1
 800d618:	bf13      	iteet	ne
 800d61a:	3201      	addne	r2, #1
 800d61c:	3401      	addeq	r4, #1
 800d61e:	4672      	moveq	r2, lr
 800d620:	f022 0201 	bicne.w	r2, r2, #1
 800d624:	1063      	asrs	r3, r4, #1
 800d626:	0852      	lsrs	r2, r2, #1
 800d628:	07e1      	lsls	r1, r4, #31
 800d62a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d62e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d632:	bf48      	it	mi
 800d634:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d638:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d63c:	4614      	mov	r4, r2
 800d63e:	e781      	b.n	800d544 <__ieee754_sqrt+0x34>
 800d640:	0ad9      	lsrs	r1, r3, #11
 800d642:	3815      	subs	r0, #21
 800d644:	055b      	lsls	r3, r3, #21
 800d646:	2900      	cmp	r1, #0
 800d648:	d0fa      	beq.n	800d640 <__ieee754_sqrt+0x130>
 800d64a:	02cd      	lsls	r5, r1, #11
 800d64c:	d50a      	bpl.n	800d664 <__ieee754_sqrt+0x154>
 800d64e:	f1c2 0420 	rsb	r4, r2, #32
 800d652:	fa23 f404 	lsr.w	r4, r3, r4
 800d656:	1e55      	subs	r5, r2, #1
 800d658:	4093      	lsls	r3, r2
 800d65a:	4321      	orrs	r1, r4
 800d65c:	1b42      	subs	r2, r0, r5
 800d65e:	e78a      	b.n	800d576 <__ieee754_sqrt+0x66>
 800d660:	4610      	mov	r0, r2
 800d662:	e7f0      	b.n	800d646 <__ieee754_sqrt+0x136>
 800d664:	0049      	lsls	r1, r1, #1
 800d666:	3201      	adds	r2, #1
 800d668:	e7ef      	b.n	800d64a <__ieee754_sqrt+0x13a>
 800d66a:	4680      	mov	r8, r0
 800d66c:	e7bd      	b.n	800d5ea <__ieee754_sqrt+0xda>
 800d66e:	bf00      	nop
 800d670:	7ff00000 	.word	0x7ff00000
 800d674:	00000000 	.word	0x00000000

0800d678 <__kernel_cos>:
 800d678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	ec57 6b10 	vmov	r6, r7, d0
 800d680:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d684:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d688:	ed8d 1b00 	vstr	d1, [sp]
 800d68c:	da07      	bge.n	800d69e <__kernel_cos+0x26>
 800d68e:	ee10 0a10 	vmov	r0, s0
 800d692:	4639      	mov	r1, r7
 800d694:	f7f3 fa78 	bl	8000b88 <__aeabi_d2iz>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f000 8088 	beq.w	800d7ae <__kernel_cos+0x136>
 800d69e:	4632      	mov	r2, r6
 800d6a0:	463b      	mov	r3, r7
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f7f2 ffbf 	bl	8000628 <__aeabi_dmul>
 800d6aa:	4b51      	ldr	r3, [pc, #324]	; (800d7f0 <__kernel_cos+0x178>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	f7f2 ffb9 	bl	8000628 <__aeabi_dmul>
 800d6b6:	a340      	add	r3, pc, #256	; (adr r3, 800d7b8 <__kernel_cos+0x140>)
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	4682      	mov	sl, r0
 800d6be:	468b      	mov	fp, r1
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	f7f2 ffb0 	bl	8000628 <__aeabi_dmul>
 800d6c8:	a33d      	add	r3, pc, #244	; (adr r3, 800d7c0 <__kernel_cos+0x148>)
 800d6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ce:	f7f2 fdf5 	bl	80002bc <__adddf3>
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	f7f2 ffa7 	bl	8000628 <__aeabi_dmul>
 800d6da:	a33b      	add	r3, pc, #236	; (adr r3, 800d7c8 <__kernel_cos+0x150>)
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f7f2 fdea 	bl	80002b8 <__aeabi_dsub>
 800d6e4:	4622      	mov	r2, r4
 800d6e6:	462b      	mov	r3, r5
 800d6e8:	f7f2 ff9e 	bl	8000628 <__aeabi_dmul>
 800d6ec:	a338      	add	r3, pc, #224	; (adr r3, 800d7d0 <__kernel_cos+0x158>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 fde3 	bl	80002bc <__adddf3>
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	462b      	mov	r3, r5
 800d6fa:	f7f2 ff95 	bl	8000628 <__aeabi_dmul>
 800d6fe:	a336      	add	r3, pc, #216	; (adr r3, 800d7d8 <__kernel_cos+0x160>)
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f7f2 fdd8 	bl	80002b8 <__aeabi_dsub>
 800d708:	4622      	mov	r2, r4
 800d70a:	462b      	mov	r3, r5
 800d70c:	f7f2 ff8c 	bl	8000628 <__aeabi_dmul>
 800d710:	a333      	add	r3, pc, #204	; (adr r3, 800d7e0 <__kernel_cos+0x168>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f2 fdd1 	bl	80002bc <__adddf3>
 800d71a:	4622      	mov	r2, r4
 800d71c:	462b      	mov	r3, r5
 800d71e:	f7f2 ff83 	bl	8000628 <__aeabi_dmul>
 800d722:	4622      	mov	r2, r4
 800d724:	462b      	mov	r3, r5
 800d726:	f7f2 ff7f 	bl	8000628 <__aeabi_dmul>
 800d72a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d72e:	4604      	mov	r4, r0
 800d730:	460d      	mov	r5, r1
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f2 ff77 	bl	8000628 <__aeabi_dmul>
 800d73a:	460b      	mov	r3, r1
 800d73c:	4602      	mov	r2, r0
 800d73e:	4629      	mov	r1, r5
 800d740:	4620      	mov	r0, r4
 800d742:	f7f2 fdb9 	bl	80002b8 <__aeabi_dsub>
 800d746:	4b2b      	ldr	r3, [pc, #172]	; (800d7f4 <__kernel_cos+0x17c>)
 800d748:	4598      	cmp	r8, r3
 800d74a:	4606      	mov	r6, r0
 800d74c:	460f      	mov	r7, r1
 800d74e:	dc10      	bgt.n	800d772 <__kernel_cos+0xfa>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4650      	mov	r0, sl
 800d756:	4659      	mov	r1, fp
 800d758:	f7f2 fdae 	bl	80002b8 <__aeabi_dsub>
 800d75c:	460b      	mov	r3, r1
 800d75e:	4926      	ldr	r1, [pc, #152]	; (800d7f8 <__kernel_cos+0x180>)
 800d760:	4602      	mov	r2, r0
 800d762:	2000      	movs	r0, #0
 800d764:	f7f2 fda8 	bl	80002b8 <__aeabi_dsub>
 800d768:	ec41 0b10 	vmov	d0, r0, r1
 800d76c:	b003      	add	sp, #12
 800d76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d772:	4b22      	ldr	r3, [pc, #136]	; (800d7fc <__kernel_cos+0x184>)
 800d774:	4920      	ldr	r1, [pc, #128]	; (800d7f8 <__kernel_cos+0x180>)
 800d776:	4598      	cmp	r8, r3
 800d778:	bfcc      	ite	gt
 800d77a:	4d21      	ldrgt	r5, [pc, #132]	; (800d800 <__kernel_cos+0x188>)
 800d77c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d780:	2400      	movs	r4, #0
 800d782:	4622      	mov	r2, r4
 800d784:	462b      	mov	r3, r5
 800d786:	2000      	movs	r0, #0
 800d788:	f7f2 fd96 	bl	80002b8 <__aeabi_dsub>
 800d78c:	4622      	mov	r2, r4
 800d78e:	4680      	mov	r8, r0
 800d790:	4689      	mov	r9, r1
 800d792:	462b      	mov	r3, r5
 800d794:	4650      	mov	r0, sl
 800d796:	4659      	mov	r1, fp
 800d798:	f7f2 fd8e 	bl	80002b8 <__aeabi_dsub>
 800d79c:	4632      	mov	r2, r6
 800d79e:	463b      	mov	r3, r7
 800d7a0:	f7f2 fd8a 	bl	80002b8 <__aeabi_dsub>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	e7da      	b.n	800d764 <__kernel_cos+0xec>
 800d7ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d7e8 <__kernel_cos+0x170>
 800d7b2:	e7db      	b.n	800d76c <__kernel_cos+0xf4>
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	be8838d4 	.word	0xbe8838d4
 800d7bc:	bda8fae9 	.word	0xbda8fae9
 800d7c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d7c4:	3e21ee9e 	.word	0x3e21ee9e
 800d7c8:	809c52ad 	.word	0x809c52ad
 800d7cc:	3e927e4f 	.word	0x3e927e4f
 800d7d0:	19cb1590 	.word	0x19cb1590
 800d7d4:	3efa01a0 	.word	0x3efa01a0
 800d7d8:	16c15177 	.word	0x16c15177
 800d7dc:	3f56c16c 	.word	0x3f56c16c
 800d7e0:	5555554c 	.word	0x5555554c
 800d7e4:	3fa55555 	.word	0x3fa55555
 800d7e8:	00000000 	.word	0x00000000
 800d7ec:	3ff00000 	.word	0x3ff00000
 800d7f0:	3fe00000 	.word	0x3fe00000
 800d7f4:	3fd33332 	.word	0x3fd33332
 800d7f8:	3ff00000 	.word	0x3ff00000
 800d7fc:	3fe90000 	.word	0x3fe90000
 800d800:	3fd20000 	.word	0x3fd20000
 800d804:	00000000 	.word	0x00000000

0800d808 <__kernel_rem_pio2>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	ed2d 8b02 	vpush	{d8}
 800d810:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d814:	f112 0f14 	cmn.w	r2, #20
 800d818:	9308      	str	r3, [sp, #32]
 800d81a:	9101      	str	r1, [sp, #4]
 800d81c:	4bc4      	ldr	r3, [pc, #784]	; (800db30 <__kernel_rem_pio2+0x328>)
 800d81e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d820:	900b      	str	r0, [sp, #44]	; 0x2c
 800d822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	9b08      	ldr	r3, [sp, #32]
 800d82a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d82e:	bfa8      	it	ge
 800d830:	1ed4      	subge	r4, r2, #3
 800d832:	9306      	str	r3, [sp, #24]
 800d834:	bfb2      	itee	lt
 800d836:	2400      	movlt	r4, #0
 800d838:	2318      	movge	r3, #24
 800d83a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d83e:	f06f 0317 	mvn.w	r3, #23
 800d842:	fb04 3303 	mla	r3, r4, r3, r3
 800d846:	eb03 0a02 	add.w	sl, r3, r2
 800d84a:	9b02      	ldr	r3, [sp, #8]
 800d84c:	9a06      	ldr	r2, [sp, #24]
 800d84e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800db20 <__kernel_rem_pio2+0x318>
 800d852:	eb03 0802 	add.w	r8, r3, r2
 800d856:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d858:	1aa7      	subs	r7, r4, r2
 800d85a:	ae22      	add	r6, sp, #136	; 0x88
 800d85c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d860:	2500      	movs	r5, #0
 800d862:	4545      	cmp	r5, r8
 800d864:	dd13      	ble.n	800d88e <__kernel_rem_pio2+0x86>
 800d866:	9b08      	ldr	r3, [sp, #32]
 800d868:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800db20 <__kernel_rem_pio2+0x318>
 800d86c:	aa22      	add	r2, sp, #136	; 0x88
 800d86e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d872:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d876:	f04f 0800 	mov.w	r8, #0
 800d87a:	9b02      	ldr	r3, [sp, #8]
 800d87c:	4598      	cmp	r8, r3
 800d87e:	dc2f      	bgt.n	800d8e0 <__kernel_rem_pio2+0xd8>
 800d880:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d884:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d888:	462f      	mov	r7, r5
 800d88a:	2600      	movs	r6, #0
 800d88c:	e01b      	b.n	800d8c6 <__kernel_rem_pio2+0xbe>
 800d88e:	42ef      	cmn	r7, r5
 800d890:	d407      	bmi.n	800d8a2 <__kernel_rem_pio2+0x9a>
 800d892:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d896:	f7f2 fe5d 	bl	8000554 <__aeabi_i2d>
 800d89a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d89e:	3501      	adds	r5, #1
 800d8a0:	e7df      	b.n	800d862 <__kernel_rem_pio2+0x5a>
 800d8a2:	ec51 0b18 	vmov	r0, r1, d8
 800d8a6:	e7f8      	b.n	800d89a <__kernel_rem_pio2+0x92>
 800d8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d8b0:	f7f2 feba 	bl	8000628 <__aeabi_dmul>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8bc:	f7f2 fcfe 	bl	80002bc <__adddf3>
 800d8c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8c4:	3601      	adds	r6, #1
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	429e      	cmp	r6, r3
 800d8ca:	f1a7 0708 	sub.w	r7, r7, #8
 800d8ce:	ddeb      	ble.n	800d8a8 <__kernel_rem_pio2+0xa0>
 800d8d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d8d4:	f108 0801 	add.w	r8, r8, #1
 800d8d8:	ecab 7b02 	vstmia	fp!, {d7}
 800d8dc:	3508      	adds	r5, #8
 800d8de:	e7cc      	b.n	800d87a <__kernel_rem_pio2+0x72>
 800d8e0:	9b02      	ldr	r3, [sp, #8]
 800d8e2:	aa0e      	add	r2, sp, #56	; 0x38
 800d8e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d8ea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d8ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8f0:	9c02      	ldr	r4, [sp, #8]
 800d8f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d8f4:	00e3      	lsls	r3, r4, #3
 800d8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8f8:	ab9a      	add	r3, sp, #616	; 0x268
 800d8fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d902:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d906:	ab72      	add	r3, sp, #456	; 0x1c8
 800d908:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d90c:	46c3      	mov	fp, r8
 800d90e:	46a1      	mov	r9, r4
 800d910:	f1b9 0f00 	cmp.w	r9, #0
 800d914:	f1a5 0508 	sub.w	r5, r5, #8
 800d918:	dc77      	bgt.n	800da0a <__kernel_rem_pio2+0x202>
 800d91a:	ec47 6b10 	vmov	d0, r6, r7
 800d91e:	4650      	mov	r0, sl
 800d920:	f000 fde6 	bl	800e4f0 <scalbn>
 800d924:	ec57 6b10 	vmov	r6, r7, d0
 800d928:	2200      	movs	r2, #0
 800d92a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d92e:	ee10 0a10 	vmov	r0, s0
 800d932:	4639      	mov	r1, r7
 800d934:	f7f2 fe78 	bl	8000628 <__aeabi_dmul>
 800d938:	ec41 0b10 	vmov	d0, r0, r1
 800d93c:	f000 fd58 	bl	800e3f0 <floor>
 800d940:	4b7c      	ldr	r3, [pc, #496]	; (800db34 <__kernel_rem_pio2+0x32c>)
 800d942:	ec51 0b10 	vmov	r0, r1, d0
 800d946:	2200      	movs	r2, #0
 800d948:	f7f2 fe6e 	bl	8000628 <__aeabi_dmul>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4630      	mov	r0, r6
 800d952:	4639      	mov	r1, r7
 800d954:	f7f2 fcb0 	bl	80002b8 <__aeabi_dsub>
 800d958:	460f      	mov	r7, r1
 800d95a:	4606      	mov	r6, r0
 800d95c:	f7f3 f914 	bl	8000b88 <__aeabi_d2iz>
 800d960:	9004      	str	r0, [sp, #16]
 800d962:	f7f2 fdf7 	bl	8000554 <__aeabi_i2d>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4630      	mov	r0, r6
 800d96c:	4639      	mov	r1, r7
 800d96e:	f7f2 fca3 	bl	80002b8 <__aeabi_dsub>
 800d972:	f1ba 0f00 	cmp.w	sl, #0
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	dd6d      	ble.n	800da58 <__kernel_rem_pio2+0x250>
 800d97c:	1e62      	subs	r2, r4, #1
 800d97e:	ab0e      	add	r3, sp, #56	; 0x38
 800d980:	9d04      	ldr	r5, [sp, #16]
 800d982:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d986:	f1ca 0118 	rsb	r1, sl, #24
 800d98a:	fa40 f301 	asr.w	r3, r0, r1
 800d98e:	441d      	add	r5, r3
 800d990:	408b      	lsls	r3, r1
 800d992:	1ac0      	subs	r0, r0, r3
 800d994:	ab0e      	add	r3, sp, #56	; 0x38
 800d996:	9504      	str	r5, [sp, #16]
 800d998:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d99c:	f1ca 0317 	rsb	r3, sl, #23
 800d9a0:	fa40 fb03 	asr.w	fp, r0, r3
 800d9a4:	f1bb 0f00 	cmp.w	fp, #0
 800d9a8:	dd65      	ble.n	800da76 <__kernel_rem_pio2+0x26e>
 800d9aa:	9b04      	ldr	r3, [sp, #16]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	9304      	str	r3, [sp, #16]
 800d9b2:	4615      	mov	r5, r2
 800d9b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d9b8:	4294      	cmp	r4, r2
 800d9ba:	f300 809c 	bgt.w	800daf6 <__kernel_rem_pio2+0x2ee>
 800d9be:	f1ba 0f00 	cmp.w	sl, #0
 800d9c2:	dd07      	ble.n	800d9d4 <__kernel_rem_pio2+0x1cc>
 800d9c4:	f1ba 0f01 	cmp.w	sl, #1
 800d9c8:	f000 80c0 	beq.w	800db4c <__kernel_rem_pio2+0x344>
 800d9cc:	f1ba 0f02 	cmp.w	sl, #2
 800d9d0:	f000 80c6 	beq.w	800db60 <__kernel_rem_pio2+0x358>
 800d9d4:	f1bb 0f02 	cmp.w	fp, #2
 800d9d8:	d14d      	bne.n	800da76 <__kernel_rem_pio2+0x26e>
 800d9da:	4632      	mov	r2, r6
 800d9dc:	463b      	mov	r3, r7
 800d9de:	4956      	ldr	r1, [pc, #344]	; (800db38 <__kernel_rem_pio2+0x330>)
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	f7f2 fc69 	bl	80002b8 <__aeabi_dsub>
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460f      	mov	r7, r1
 800d9ea:	2d00      	cmp	r5, #0
 800d9ec:	d043      	beq.n	800da76 <__kernel_rem_pio2+0x26e>
 800d9ee:	4650      	mov	r0, sl
 800d9f0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800db28 <__kernel_rem_pio2+0x320>
 800d9f4:	f000 fd7c 	bl	800e4f0 <scalbn>
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	ec53 2b10 	vmov	r2, r3, d0
 800da00:	f7f2 fc5a 	bl	80002b8 <__aeabi_dsub>
 800da04:	4606      	mov	r6, r0
 800da06:	460f      	mov	r7, r1
 800da08:	e035      	b.n	800da76 <__kernel_rem_pio2+0x26e>
 800da0a:	4b4c      	ldr	r3, [pc, #304]	; (800db3c <__kernel_rem_pio2+0x334>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	f7f2 fe09 	bl	8000628 <__aeabi_dmul>
 800da16:	f7f3 f8b7 	bl	8000b88 <__aeabi_d2iz>
 800da1a:	f7f2 fd9b 	bl	8000554 <__aeabi_i2d>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	ec43 2b18 	vmov	d8, r2, r3
 800da26:	4b46      	ldr	r3, [pc, #280]	; (800db40 <__kernel_rem_pio2+0x338>)
 800da28:	2200      	movs	r2, #0
 800da2a:	f7f2 fdfd 	bl	8000628 <__aeabi_dmul>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4630      	mov	r0, r6
 800da34:	4639      	mov	r1, r7
 800da36:	f7f2 fc3f 	bl	80002b8 <__aeabi_dsub>
 800da3a:	f7f3 f8a5 	bl	8000b88 <__aeabi_d2iz>
 800da3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da42:	f84b 0b04 	str.w	r0, [fp], #4
 800da46:	ec51 0b18 	vmov	r0, r1, d8
 800da4a:	f7f2 fc37 	bl	80002bc <__adddf3>
 800da4e:	f109 39ff 	add.w	r9, r9, #4294967295
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	e75b      	b.n	800d910 <__kernel_rem_pio2+0x108>
 800da58:	d106      	bne.n	800da68 <__kernel_rem_pio2+0x260>
 800da5a:	1e63      	subs	r3, r4, #1
 800da5c:	aa0e      	add	r2, sp, #56	; 0x38
 800da5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800da62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800da66:	e79d      	b.n	800d9a4 <__kernel_rem_pio2+0x19c>
 800da68:	4b36      	ldr	r3, [pc, #216]	; (800db44 <__kernel_rem_pio2+0x33c>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f7f3 f862 	bl	8000b34 <__aeabi_dcmpge>
 800da70:	2800      	cmp	r0, #0
 800da72:	d13d      	bne.n	800daf0 <__kernel_rem_pio2+0x2e8>
 800da74:	4683      	mov	fp, r0
 800da76:	2200      	movs	r2, #0
 800da78:	2300      	movs	r3, #0
 800da7a:	4630      	mov	r0, r6
 800da7c:	4639      	mov	r1, r7
 800da7e:	f7f3 f83b 	bl	8000af8 <__aeabi_dcmpeq>
 800da82:	2800      	cmp	r0, #0
 800da84:	f000 80c0 	beq.w	800dc08 <__kernel_rem_pio2+0x400>
 800da88:	1e65      	subs	r5, r4, #1
 800da8a:	462b      	mov	r3, r5
 800da8c:	2200      	movs	r2, #0
 800da8e:	9902      	ldr	r1, [sp, #8]
 800da90:	428b      	cmp	r3, r1
 800da92:	da6c      	bge.n	800db6e <__kernel_rem_pio2+0x366>
 800da94:	2a00      	cmp	r2, #0
 800da96:	f000 8089 	beq.w	800dbac <__kernel_rem_pio2+0x3a4>
 800da9a:	ab0e      	add	r3, sp, #56	; 0x38
 800da9c:	f1aa 0a18 	sub.w	sl, sl, #24
 800daa0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80ad 	beq.w	800dc04 <__kernel_rem_pio2+0x3fc>
 800daaa:	4650      	mov	r0, sl
 800daac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800db28 <__kernel_rem_pio2+0x320>
 800dab0:	f000 fd1e 	bl	800e4f0 <scalbn>
 800dab4:	ab9a      	add	r3, sp, #616	; 0x268
 800dab6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800daba:	ec57 6b10 	vmov	r6, r7, d0
 800dabe:	00ec      	lsls	r4, r5, #3
 800dac0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800dac4:	46aa      	mov	sl, r5
 800dac6:	f1ba 0f00 	cmp.w	sl, #0
 800daca:	f280 80d6 	bge.w	800dc7a <__kernel_rem_pio2+0x472>
 800dace:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800db20 <__kernel_rem_pio2+0x318>
 800dad2:	462e      	mov	r6, r5
 800dad4:	2e00      	cmp	r6, #0
 800dad6:	f2c0 8104 	blt.w	800dce2 <__kernel_rem_pio2+0x4da>
 800dada:	ab72      	add	r3, sp, #456	; 0x1c8
 800dadc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800dae0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800db48 <__kernel_rem_pio2+0x340>
 800dae4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800dae8:	f04f 0800 	mov.w	r8, #0
 800daec:	1baf      	subs	r7, r5, r6
 800daee:	e0ea      	b.n	800dcc6 <__kernel_rem_pio2+0x4be>
 800daf0:	f04f 0b02 	mov.w	fp, #2
 800daf4:	e759      	b.n	800d9aa <__kernel_rem_pio2+0x1a2>
 800daf6:	f8d8 3000 	ldr.w	r3, [r8]
 800dafa:	b955      	cbnz	r5, 800db12 <__kernel_rem_pio2+0x30a>
 800dafc:	b123      	cbz	r3, 800db08 <__kernel_rem_pio2+0x300>
 800dafe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800db02:	f8c8 3000 	str.w	r3, [r8]
 800db06:	2301      	movs	r3, #1
 800db08:	3201      	adds	r2, #1
 800db0a:	f108 0804 	add.w	r8, r8, #4
 800db0e:	461d      	mov	r5, r3
 800db10:	e752      	b.n	800d9b8 <__kernel_rem_pio2+0x1b0>
 800db12:	1acb      	subs	r3, r1, r3
 800db14:	f8c8 3000 	str.w	r3, [r8]
 800db18:	462b      	mov	r3, r5
 800db1a:	e7f5      	b.n	800db08 <__kernel_rem_pio2+0x300>
 800db1c:	f3af 8000 	nop.w
	...
 800db2c:	3ff00000 	.word	0x3ff00000
 800db30:	0800f050 	.word	0x0800f050
 800db34:	40200000 	.word	0x40200000
 800db38:	3ff00000 	.word	0x3ff00000
 800db3c:	3e700000 	.word	0x3e700000
 800db40:	41700000 	.word	0x41700000
 800db44:	3fe00000 	.word	0x3fe00000
 800db48:	0800f010 	.word	0x0800f010
 800db4c:	1e62      	subs	r2, r4, #1
 800db4e:	ab0e      	add	r3, sp, #56	; 0x38
 800db50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db58:	a90e      	add	r1, sp, #56	; 0x38
 800db5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db5e:	e739      	b.n	800d9d4 <__kernel_rem_pio2+0x1cc>
 800db60:	1e62      	subs	r2, r4, #1
 800db62:	ab0e      	add	r3, sp, #56	; 0x38
 800db64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db6c:	e7f4      	b.n	800db58 <__kernel_rem_pio2+0x350>
 800db6e:	a90e      	add	r1, sp, #56	; 0x38
 800db70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db74:	3b01      	subs	r3, #1
 800db76:	430a      	orrs	r2, r1
 800db78:	e789      	b.n	800da8e <__kernel_rem_pio2+0x286>
 800db7a:	3301      	adds	r3, #1
 800db7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800db80:	2900      	cmp	r1, #0
 800db82:	d0fa      	beq.n	800db7a <__kernel_rem_pio2+0x372>
 800db84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db86:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800db8a:	446a      	add	r2, sp
 800db8c:	3a98      	subs	r2, #152	; 0x98
 800db8e:	920a      	str	r2, [sp, #40]	; 0x28
 800db90:	9a08      	ldr	r2, [sp, #32]
 800db92:	18e3      	adds	r3, r4, r3
 800db94:	18a5      	adds	r5, r4, r2
 800db96:	aa22      	add	r2, sp, #136	; 0x88
 800db98:	f104 0801 	add.w	r8, r4, #1
 800db9c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dba0:	9304      	str	r3, [sp, #16]
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	4543      	cmp	r3, r8
 800dba6:	da04      	bge.n	800dbb2 <__kernel_rem_pio2+0x3aa>
 800dba8:	461c      	mov	r4, r3
 800dbaa:	e6a3      	b.n	800d8f4 <__kernel_rem_pio2+0xec>
 800dbac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e7e4      	b.n	800db7c <__kernel_rem_pio2+0x374>
 800dbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dbb8:	f7f2 fccc 	bl	8000554 <__aeabi_i2d>
 800dbbc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc2:	46ab      	mov	fp, r5
 800dbc4:	461c      	mov	r4, r3
 800dbc6:	f04f 0900 	mov.w	r9, #0
 800dbca:	2600      	movs	r6, #0
 800dbcc:	2700      	movs	r7, #0
 800dbce:	9b06      	ldr	r3, [sp, #24]
 800dbd0:	4599      	cmp	r9, r3
 800dbd2:	dd06      	ble.n	800dbe2 <__kernel_rem_pio2+0x3da>
 800dbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dbda:	f108 0801 	add.w	r8, r8, #1
 800dbde:	930a      	str	r3, [sp, #40]	; 0x28
 800dbe0:	e7df      	b.n	800dba2 <__kernel_rem_pio2+0x39a>
 800dbe2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dbe6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dbea:	f7f2 fd1d 	bl	8000628 <__aeabi_dmul>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	f7f2 fb61 	bl	80002bc <__adddf3>
 800dbfa:	f109 0901 	add.w	r9, r9, #1
 800dbfe:	4606      	mov	r6, r0
 800dc00:	460f      	mov	r7, r1
 800dc02:	e7e4      	b.n	800dbce <__kernel_rem_pio2+0x3c6>
 800dc04:	3d01      	subs	r5, #1
 800dc06:	e748      	b.n	800da9a <__kernel_rem_pio2+0x292>
 800dc08:	ec47 6b10 	vmov	d0, r6, r7
 800dc0c:	f1ca 0000 	rsb	r0, sl, #0
 800dc10:	f000 fc6e 	bl	800e4f0 <scalbn>
 800dc14:	ec57 6b10 	vmov	r6, r7, d0
 800dc18:	4ba0      	ldr	r3, [pc, #640]	; (800de9c <__kernel_rem_pio2+0x694>)
 800dc1a:	ee10 0a10 	vmov	r0, s0
 800dc1e:	2200      	movs	r2, #0
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7f2 ff87 	bl	8000b34 <__aeabi_dcmpge>
 800dc26:	b1f8      	cbz	r0, 800dc68 <__kernel_rem_pio2+0x460>
 800dc28:	4b9d      	ldr	r3, [pc, #628]	; (800dea0 <__kernel_rem_pio2+0x698>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 fcfa 	bl	8000628 <__aeabi_dmul>
 800dc34:	f7f2 ffa8 	bl	8000b88 <__aeabi_d2iz>
 800dc38:	4680      	mov	r8, r0
 800dc3a:	f7f2 fc8b 	bl	8000554 <__aeabi_i2d>
 800dc3e:	4b97      	ldr	r3, [pc, #604]	; (800de9c <__kernel_rem_pio2+0x694>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	f7f2 fcf1 	bl	8000628 <__aeabi_dmul>
 800dc46:	460b      	mov	r3, r1
 800dc48:	4602      	mov	r2, r0
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7f2 fb33 	bl	80002b8 <__aeabi_dsub>
 800dc52:	f7f2 ff99 	bl	8000b88 <__aeabi_d2iz>
 800dc56:	1c65      	adds	r5, r4, #1
 800dc58:	ab0e      	add	r3, sp, #56	; 0x38
 800dc5a:	f10a 0a18 	add.w	sl, sl, #24
 800dc5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dc62:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dc66:	e720      	b.n	800daaa <__kernel_rem_pio2+0x2a2>
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 ff8c 	bl	8000b88 <__aeabi_d2iz>
 800dc70:	ab0e      	add	r3, sp, #56	; 0x38
 800dc72:	4625      	mov	r5, r4
 800dc74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dc78:	e717      	b.n	800daaa <__kernel_rem_pio2+0x2a2>
 800dc7a:	ab0e      	add	r3, sp, #56	; 0x38
 800dc7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dc80:	f7f2 fc68 	bl	8000554 <__aeabi_i2d>
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	f7f2 fcce 	bl	8000628 <__aeabi_dmul>
 800dc8c:	4b84      	ldr	r3, [pc, #528]	; (800dea0 <__kernel_rem_pio2+0x698>)
 800dc8e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dc92:	2200      	movs	r2, #0
 800dc94:	4630      	mov	r0, r6
 800dc96:	4639      	mov	r1, r7
 800dc98:	f7f2 fcc6 	bl	8000628 <__aeabi_dmul>
 800dc9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dca0:	4606      	mov	r6, r0
 800dca2:	460f      	mov	r7, r1
 800dca4:	e70f      	b.n	800dac6 <__kernel_rem_pio2+0x2be>
 800dca6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dcaa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dcae:	f7f2 fcbb 	bl	8000628 <__aeabi_dmul>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcba:	f7f2 faff 	bl	80002bc <__adddf3>
 800dcbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcc2:	f108 0801 	add.w	r8, r8, #1
 800dcc6:	9b02      	ldr	r3, [sp, #8]
 800dcc8:	4598      	cmp	r8, r3
 800dcca:	dc01      	bgt.n	800dcd0 <__kernel_rem_pio2+0x4c8>
 800dccc:	45b8      	cmp	r8, r7
 800dcce:	ddea      	ble.n	800dca6 <__kernel_rem_pio2+0x49e>
 800dcd0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dcd4:	ab4a      	add	r3, sp, #296	; 0x128
 800dcd6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dcda:	ed87 7b00 	vstr	d7, [r7]
 800dcde:	3e01      	subs	r6, #1
 800dce0:	e6f8      	b.n	800dad4 <__kernel_rem_pio2+0x2cc>
 800dce2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	dc0b      	bgt.n	800dd00 <__kernel_rem_pio2+0x4f8>
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	dc35      	bgt.n	800dd58 <__kernel_rem_pio2+0x550>
 800dcec:	d059      	beq.n	800dda2 <__kernel_rem_pio2+0x59a>
 800dcee:	9b04      	ldr	r3, [sp, #16]
 800dcf0:	f003 0007 	and.w	r0, r3, #7
 800dcf4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dcf8:	ecbd 8b02 	vpop	{d8}
 800dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d1f3      	bne.n	800dcee <__kernel_rem_pio2+0x4e6>
 800dd06:	ab4a      	add	r3, sp, #296	; 0x128
 800dd08:	4423      	add	r3, r4
 800dd0a:	9306      	str	r3, [sp, #24]
 800dd0c:	461c      	mov	r4, r3
 800dd0e:	469a      	mov	sl, r3
 800dd10:	9502      	str	r5, [sp, #8]
 800dd12:	9b02      	ldr	r3, [sp, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f1aa 0a08 	sub.w	sl, sl, #8
 800dd1a:	dc6b      	bgt.n	800ddf4 <__kernel_rem_pio2+0x5ec>
 800dd1c:	46aa      	mov	sl, r5
 800dd1e:	f1ba 0f01 	cmp.w	sl, #1
 800dd22:	f1a4 0408 	sub.w	r4, r4, #8
 800dd26:	f300 8085 	bgt.w	800de34 <__kernel_rem_pio2+0x62c>
 800dd2a:	9c06      	ldr	r4, [sp, #24]
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	3408      	adds	r4, #8
 800dd30:	2100      	movs	r1, #0
 800dd32:	2d01      	cmp	r5, #1
 800dd34:	f300 809d 	bgt.w	800de72 <__kernel_rem_pio2+0x66a>
 800dd38:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dd3c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dd40:	f1bb 0f00 	cmp.w	fp, #0
 800dd44:	f040 809b 	bne.w	800de7e <__kernel_rem_pio2+0x676>
 800dd48:	9b01      	ldr	r3, [sp, #4]
 800dd4a:	e9c3 5600 	strd	r5, r6, [r3]
 800dd4e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd52:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd56:	e7ca      	b.n	800dcee <__kernel_rem_pio2+0x4e6>
 800dd58:	3408      	adds	r4, #8
 800dd5a:	ab4a      	add	r3, sp, #296	; 0x128
 800dd5c:	441c      	add	r4, r3
 800dd5e:	462e      	mov	r6, r5
 800dd60:	2000      	movs	r0, #0
 800dd62:	2100      	movs	r1, #0
 800dd64:	2e00      	cmp	r6, #0
 800dd66:	da36      	bge.n	800ddd6 <__kernel_rem_pio2+0x5ce>
 800dd68:	f1bb 0f00 	cmp.w	fp, #0
 800dd6c:	d039      	beq.n	800dde2 <__kernel_rem_pio2+0x5da>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd74:	9c01      	ldr	r4, [sp, #4]
 800dd76:	e9c4 2300 	strd	r2, r3, [r4]
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dd82:	f7f2 fa99 	bl	80002b8 <__aeabi_dsub>
 800dd86:	ae4c      	add	r6, sp, #304	; 0x130
 800dd88:	2401      	movs	r4, #1
 800dd8a:	42a5      	cmp	r5, r4
 800dd8c:	da2c      	bge.n	800dde8 <__kernel_rem_pio2+0x5e0>
 800dd8e:	f1bb 0f00 	cmp.w	fp, #0
 800dd92:	d002      	beq.n	800dd9a <__kernel_rem_pio2+0x592>
 800dd94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd98:	4619      	mov	r1, r3
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dda0:	e7a5      	b.n	800dcee <__kernel_rem_pio2+0x4e6>
 800dda2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dda6:	eb0d 0403 	add.w	r4, sp, r3
 800ddaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ddae:	2000      	movs	r0, #0
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	da09      	bge.n	800ddca <__kernel_rem_pio2+0x5c2>
 800ddb6:	f1bb 0f00 	cmp.w	fp, #0
 800ddba:	d002      	beq.n	800ddc2 <__kernel_rem_pio2+0x5ba>
 800ddbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	e9c3 0100 	strd	r0, r1, [r3]
 800ddc8:	e791      	b.n	800dcee <__kernel_rem_pio2+0x4e6>
 800ddca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddce:	f7f2 fa75 	bl	80002bc <__adddf3>
 800ddd2:	3d01      	subs	r5, #1
 800ddd4:	e7ed      	b.n	800ddb2 <__kernel_rem_pio2+0x5aa>
 800ddd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddda:	f7f2 fa6f 	bl	80002bc <__adddf3>
 800ddde:	3e01      	subs	r6, #1
 800dde0:	e7c0      	b.n	800dd64 <__kernel_rem_pio2+0x55c>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	e7c5      	b.n	800dd74 <__kernel_rem_pio2+0x56c>
 800dde8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ddec:	f7f2 fa66 	bl	80002bc <__adddf3>
 800ddf0:	3401      	adds	r4, #1
 800ddf2:	e7ca      	b.n	800dd8a <__kernel_rem_pio2+0x582>
 800ddf4:	e9da 8900 	ldrd	r8, r9, [sl]
 800ddf8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ddfc:	9b02      	ldr	r3, [sp, #8]
 800ddfe:	3b01      	subs	r3, #1
 800de00:	9302      	str	r3, [sp, #8]
 800de02:	4632      	mov	r2, r6
 800de04:	463b      	mov	r3, r7
 800de06:	4640      	mov	r0, r8
 800de08:	4649      	mov	r1, r9
 800de0a:	f7f2 fa57 	bl	80002bc <__adddf3>
 800de0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4640      	mov	r0, r8
 800de18:	4649      	mov	r1, r9
 800de1a:	f7f2 fa4d 	bl	80002b8 <__aeabi_dsub>
 800de1e:	4632      	mov	r2, r6
 800de20:	463b      	mov	r3, r7
 800de22:	f7f2 fa4b 	bl	80002bc <__adddf3>
 800de26:	ed9d 7b08 	vldr	d7, [sp, #32]
 800de2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de2e:	ed8a 7b00 	vstr	d7, [sl]
 800de32:	e76e      	b.n	800dd12 <__kernel_rem_pio2+0x50a>
 800de34:	e9d4 8900 	ldrd	r8, r9, [r4]
 800de38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800de3c:	4640      	mov	r0, r8
 800de3e:	4632      	mov	r2, r6
 800de40:	463b      	mov	r3, r7
 800de42:	4649      	mov	r1, r9
 800de44:	f7f2 fa3a 	bl	80002bc <__adddf3>
 800de48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7f2 fa30 	bl	80002b8 <__aeabi_dsub>
 800de58:	4632      	mov	r2, r6
 800de5a:	463b      	mov	r3, r7
 800de5c:	f7f2 fa2e 	bl	80002bc <__adddf3>
 800de60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de68:	ed84 7b00 	vstr	d7, [r4]
 800de6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de70:	e755      	b.n	800dd1e <__kernel_rem_pio2+0x516>
 800de72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de76:	f7f2 fa21 	bl	80002bc <__adddf3>
 800de7a:	3d01      	subs	r5, #1
 800de7c:	e759      	b.n	800dd32 <__kernel_rem_pio2+0x52a>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	9a01      	ldr	r2, [sp, #4]
 800de82:	601d      	str	r5, [r3, #0]
 800de84:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800de88:	605c      	str	r4, [r3, #4]
 800de8a:	609f      	str	r7, [r3, #8]
 800de8c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800de90:	60d3      	str	r3, [r2, #12]
 800de92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de96:	6110      	str	r0, [r2, #16]
 800de98:	6153      	str	r3, [r2, #20]
 800de9a:	e728      	b.n	800dcee <__kernel_rem_pio2+0x4e6>
 800de9c:	41700000 	.word	0x41700000
 800dea0:	3e700000 	.word	0x3e700000
 800dea4:	00000000 	.word	0x00000000

0800dea8 <__kernel_sin>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	ed2d 8b04 	vpush	{d8-d9}
 800deb0:	eeb0 8a41 	vmov.f32	s16, s2
 800deb4:	eef0 8a61 	vmov.f32	s17, s3
 800deb8:	ec55 4b10 	vmov	r4, r5, d0
 800debc:	b083      	sub	sp, #12
 800debe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dec2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dec6:	9001      	str	r0, [sp, #4]
 800dec8:	da06      	bge.n	800ded8 <__kernel_sin+0x30>
 800deca:	ee10 0a10 	vmov	r0, s0
 800dece:	4629      	mov	r1, r5
 800ded0:	f7f2 fe5a 	bl	8000b88 <__aeabi_d2iz>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d051      	beq.n	800df7c <__kernel_sin+0xd4>
 800ded8:	4622      	mov	r2, r4
 800deda:	462b      	mov	r3, r5
 800dedc:	4620      	mov	r0, r4
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 fba2 	bl	8000628 <__aeabi_dmul>
 800dee4:	4682      	mov	sl, r0
 800dee6:	468b      	mov	fp, r1
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	4620      	mov	r0, r4
 800deee:	4629      	mov	r1, r5
 800def0:	f7f2 fb9a 	bl	8000628 <__aeabi_dmul>
 800def4:	a341      	add	r3, pc, #260	; (adr r3, 800dffc <__kernel_sin+0x154>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	4680      	mov	r8, r0
 800defc:	4689      	mov	r9, r1
 800defe:	4650      	mov	r0, sl
 800df00:	4659      	mov	r1, fp
 800df02:	f7f2 fb91 	bl	8000628 <__aeabi_dmul>
 800df06:	a33f      	add	r3, pc, #252	; (adr r3, 800e004 <__kernel_sin+0x15c>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 f9d4 	bl	80002b8 <__aeabi_dsub>
 800df10:	4652      	mov	r2, sl
 800df12:	465b      	mov	r3, fp
 800df14:	f7f2 fb88 	bl	8000628 <__aeabi_dmul>
 800df18:	a33c      	add	r3, pc, #240	; (adr r3, 800e00c <__kernel_sin+0x164>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	f7f2 f9cd 	bl	80002bc <__adddf3>
 800df22:	4652      	mov	r2, sl
 800df24:	465b      	mov	r3, fp
 800df26:	f7f2 fb7f 	bl	8000628 <__aeabi_dmul>
 800df2a:	a33a      	add	r3, pc, #232	; (adr r3, 800e014 <__kernel_sin+0x16c>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f9c2 	bl	80002b8 <__aeabi_dsub>
 800df34:	4652      	mov	r2, sl
 800df36:	465b      	mov	r3, fp
 800df38:	f7f2 fb76 	bl	8000628 <__aeabi_dmul>
 800df3c:	a337      	add	r3, pc, #220	; (adr r3, 800e01c <__kernel_sin+0x174>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9bb 	bl	80002bc <__adddf3>
 800df46:	9b01      	ldr	r3, [sp, #4]
 800df48:	4606      	mov	r6, r0
 800df4a:	460f      	mov	r7, r1
 800df4c:	b9eb      	cbnz	r3, 800df8a <__kernel_sin+0xe2>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4650      	mov	r0, sl
 800df54:	4659      	mov	r1, fp
 800df56:	f7f2 fb67 	bl	8000628 <__aeabi_dmul>
 800df5a:	a325      	add	r3, pc, #148	; (adr r3, 800dff0 <__kernel_sin+0x148>)
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f7f2 f9aa 	bl	80002b8 <__aeabi_dsub>
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	f7f2 fb5e 	bl	8000628 <__aeabi_dmul>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4620      	mov	r0, r4
 800df72:	4629      	mov	r1, r5
 800df74:	f7f2 f9a2 	bl	80002bc <__adddf3>
 800df78:	4604      	mov	r4, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	ec45 4b10 	vmov	d0, r4, r5
 800df80:	b003      	add	sp, #12
 800df82:	ecbd 8b04 	vpop	{d8-d9}
 800df86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8a:	4b1b      	ldr	r3, [pc, #108]	; (800dff8 <__kernel_sin+0x150>)
 800df8c:	ec51 0b18 	vmov	r0, r1, d8
 800df90:	2200      	movs	r2, #0
 800df92:	f7f2 fb49 	bl	8000628 <__aeabi_dmul>
 800df96:	4632      	mov	r2, r6
 800df98:	ec41 0b19 	vmov	d9, r0, r1
 800df9c:	463b      	mov	r3, r7
 800df9e:	4640      	mov	r0, r8
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	f7f2 fb41 	bl	8000628 <__aeabi_dmul>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	ec51 0b19 	vmov	r0, r1, d9
 800dfae:	f7f2 f983 	bl	80002b8 <__aeabi_dsub>
 800dfb2:	4652      	mov	r2, sl
 800dfb4:	465b      	mov	r3, fp
 800dfb6:	f7f2 fb37 	bl	8000628 <__aeabi_dmul>
 800dfba:	ec53 2b18 	vmov	r2, r3, d8
 800dfbe:	f7f2 f97b 	bl	80002b8 <__aeabi_dsub>
 800dfc2:	a30b      	add	r3, pc, #44	; (adr r3, 800dff0 <__kernel_sin+0x148>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	4640      	mov	r0, r8
 800dfce:	4649      	mov	r1, r9
 800dfd0:	f7f2 fb2a 	bl	8000628 <__aeabi_dmul>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 f96e 	bl	80002bc <__adddf3>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 f966 	bl	80002b8 <__aeabi_dsub>
 800dfec:	e7c4      	b.n	800df78 <__kernel_sin+0xd0>
 800dfee:	bf00      	nop
 800dff0:	55555549 	.word	0x55555549
 800dff4:	3fc55555 	.word	0x3fc55555
 800dff8:	3fe00000 	.word	0x3fe00000
 800dffc:	5acfd57c 	.word	0x5acfd57c
 800e000:	3de5d93a 	.word	0x3de5d93a
 800e004:	8a2b9ceb 	.word	0x8a2b9ceb
 800e008:	3e5ae5e6 	.word	0x3e5ae5e6
 800e00c:	57b1fe7d 	.word	0x57b1fe7d
 800e010:	3ec71de3 	.word	0x3ec71de3
 800e014:	19c161d5 	.word	0x19c161d5
 800e018:	3f2a01a0 	.word	0x3f2a01a0
 800e01c:	1110f8a6 	.word	0x1110f8a6
 800e020:	3f811111 	.word	0x3f811111

0800e024 <with_errno>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	4616      	mov	r6, r2
 800e02c:	f7fa fd02 	bl	8008a34 <__errno>
 800e030:	4629      	mov	r1, r5
 800e032:	6006      	str	r6, [r0, #0]
 800e034:	4620      	mov	r0, r4
 800e036:	bd70      	pop	{r4, r5, r6, pc}

0800e038 <xflow>:
 800e038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e03a:	4614      	mov	r4, r2
 800e03c:	461d      	mov	r5, r3
 800e03e:	b108      	cbz	r0, 800e044 <xflow+0xc>
 800e040:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e044:	e9cd 2300 	strd	r2, r3, [sp]
 800e048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 faea 	bl	8000628 <__aeabi_dmul>
 800e054:	2222      	movs	r2, #34	; 0x22
 800e056:	b003      	add	sp, #12
 800e058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e05c:	f7ff bfe2 	b.w	800e024 <with_errno>

0800e060 <__math_uflow>:
 800e060:	b508      	push	{r3, lr}
 800e062:	2200      	movs	r2, #0
 800e064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e068:	f7ff ffe6 	bl	800e038 <xflow>
 800e06c:	ec41 0b10 	vmov	d0, r0, r1
 800e070:	bd08      	pop	{r3, pc}

0800e072 <__math_oflow>:
 800e072:	b508      	push	{r3, lr}
 800e074:	2200      	movs	r2, #0
 800e076:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e07a:	f7ff ffdd 	bl	800e038 <xflow>
 800e07e:	ec41 0b10 	vmov	d0, r0, r1
 800e082:	bd08      	pop	{r3, pc}
 800e084:	0000      	movs	r0, r0
	...

0800e088 <atan>:
 800e088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	ec55 4b10 	vmov	r4, r5, d0
 800e090:	4bc3      	ldr	r3, [pc, #780]	; (800e3a0 <atan+0x318>)
 800e092:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e096:	429e      	cmp	r6, r3
 800e098:	46ab      	mov	fp, r5
 800e09a:	dd18      	ble.n	800e0ce <atan+0x46>
 800e09c:	4bc1      	ldr	r3, [pc, #772]	; (800e3a4 <atan+0x31c>)
 800e09e:	429e      	cmp	r6, r3
 800e0a0:	dc01      	bgt.n	800e0a6 <atan+0x1e>
 800e0a2:	d109      	bne.n	800e0b8 <atan+0x30>
 800e0a4:	b144      	cbz	r4, 800e0b8 <atan+0x30>
 800e0a6:	4622      	mov	r2, r4
 800e0a8:	462b      	mov	r3, r5
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	f7f2 f905 	bl	80002bc <__adddf3>
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	460d      	mov	r5, r1
 800e0b6:	e006      	b.n	800e0c6 <atan+0x3e>
 800e0b8:	f1bb 0f00 	cmp.w	fp, #0
 800e0bc:	f300 8131 	bgt.w	800e322 <atan+0x29a>
 800e0c0:	a59b      	add	r5, pc, #620	; (adr r5, 800e330 <atan+0x2a8>)
 800e0c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0c6:	ec45 4b10 	vmov	d0, r4, r5
 800e0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ce:	4bb6      	ldr	r3, [pc, #728]	; (800e3a8 <atan+0x320>)
 800e0d0:	429e      	cmp	r6, r3
 800e0d2:	dc14      	bgt.n	800e0fe <atan+0x76>
 800e0d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e0d8:	429e      	cmp	r6, r3
 800e0da:	dc0d      	bgt.n	800e0f8 <atan+0x70>
 800e0dc:	a396      	add	r3, pc, #600	; (adr r3, 800e338 <atan+0x2b0>)
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	ee10 0a10 	vmov	r0, s0
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	f7f2 f8e8 	bl	80002bc <__adddf3>
 800e0ec:	4baf      	ldr	r3, [pc, #700]	; (800e3ac <atan+0x324>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f7f2 fd2a 	bl	8000b48 <__aeabi_dcmpgt>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d1e6      	bne.n	800e0c6 <atan+0x3e>
 800e0f8:	f04f 3aff 	mov.w	sl, #4294967295
 800e0fc:	e02b      	b.n	800e156 <atan+0xce>
 800e0fe:	f000 f963 	bl	800e3c8 <fabs>
 800e102:	4bab      	ldr	r3, [pc, #684]	; (800e3b0 <atan+0x328>)
 800e104:	429e      	cmp	r6, r3
 800e106:	ec55 4b10 	vmov	r4, r5, d0
 800e10a:	f300 80bf 	bgt.w	800e28c <atan+0x204>
 800e10e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e112:	429e      	cmp	r6, r3
 800e114:	f300 80a0 	bgt.w	800e258 <atan+0x1d0>
 800e118:	ee10 2a10 	vmov	r2, s0
 800e11c:	ee10 0a10 	vmov	r0, s0
 800e120:	462b      	mov	r3, r5
 800e122:	4629      	mov	r1, r5
 800e124:	f7f2 f8ca 	bl	80002bc <__adddf3>
 800e128:	4ba0      	ldr	r3, [pc, #640]	; (800e3ac <atan+0x324>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	f7f2 f8c4 	bl	80002b8 <__aeabi_dsub>
 800e130:	2200      	movs	r2, #0
 800e132:	4606      	mov	r6, r0
 800e134:	460f      	mov	r7, r1
 800e136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e13a:	4620      	mov	r0, r4
 800e13c:	4629      	mov	r1, r5
 800e13e:	f7f2 f8bd 	bl	80002bc <__adddf3>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 fb97 	bl	800087c <__aeabi_ddiv>
 800e14e:	f04f 0a00 	mov.w	sl, #0
 800e152:	4604      	mov	r4, r0
 800e154:	460d      	mov	r5, r1
 800e156:	4622      	mov	r2, r4
 800e158:	462b      	mov	r3, r5
 800e15a:	4620      	mov	r0, r4
 800e15c:	4629      	mov	r1, r5
 800e15e:	f7f2 fa63 	bl	8000628 <__aeabi_dmul>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4680      	mov	r8, r0
 800e168:	4689      	mov	r9, r1
 800e16a:	f7f2 fa5d 	bl	8000628 <__aeabi_dmul>
 800e16e:	a374      	add	r3, pc, #464	; (adr r3, 800e340 <atan+0x2b8>)
 800e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e174:	4606      	mov	r6, r0
 800e176:	460f      	mov	r7, r1
 800e178:	f7f2 fa56 	bl	8000628 <__aeabi_dmul>
 800e17c:	a372      	add	r3, pc, #456	; (adr r3, 800e348 <atan+0x2c0>)
 800e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e182:	f7f2 f89b 	bl	80002bc <__adddf3>
 800e186:	4632      	mov	r2, r6
 800e188:	463b      	mov	r3, r7
 800e18a:	f7f2 fa4d 	bl	8000628 <__aeabi_dmul>
 800e18e:	a370      	add	r3, pc, #448	; (adr r3, 800e350 <atan+0x2c8>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	f7f2 f892 	bl	80002bc <__adddf3>
 800e198:	4632      	mov	r2, r6
 800e19a:	463b      	mov	r3, r7
 800e19c:	f7f2 fa44 	bl	8000628 <__aeabi_dmul>
 800e1a0:	a36d      	add	r3, pc, #436	; (adr r3, 800e358 <atan+0x2d0>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	f7f2 f889 	bl	80002bc <__adddf3>
 800e1aa:	4632      	mov	r2, r6
 800e1ac:	463b      	mov	r3, r7
 800e1ae:	f7f2 fa3b 	bl	8000628 <__aeabi_dmul>
 800e1b2:	a36b      	add	r3, pc, #428	; (adr r3, 800e360 <atan+0x2d8>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 f880 	bl	80002bc <__adddf3>
 800e1bc:	4632      	mov	r2, r6
 800e1be:	463b      	mov	r3, r7
 800e1c0:	f7f2 fa32 	bl	8000628 <__aeabi_dmul>
 800e1c4:	a368      	add	r3, pc, #416	; (adr r3, 800e368 <atan+0x2e0>)
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	f7f2 f877 	bl	80002bc <__adddf3>
 800e1ce:	4642      	mov	r2, r8
 800e1d0:	464b      	mov	r3, r9
 800e1d2:	f7f2 fa29 	bl	8000628 <__aeabi_dmul>
 800e1d6:	a366      	add	r3, pc, #408	; (adr r3, 800e370 <atan+0x2e8>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	4680      	mov	r8, r0
 800e1de:	4689      	mov	r9, r1
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	4639      	mov	r1, r7
 800e1e4:	f7f2 fa20 	bl	8000628 <__aeabi_dmul>
 800e1e8:	a363      	add	r3, pc, #396	; (adr r3, 800e378 <atan+0x2f0>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f2 f863 	bl	80002b8 <__aeabi_dsub>
 800e1f2:	4632      	mov	r2, r6
 800e1f4:	463b      	mov	r3, r7
 800e1f6:	f7f2 fa17 	bl	8000628 <__aeabi_dmul>
 800e1fa:	a361      	add	r3, pc, #388	; (adr r3, 800e380 <atan+0x2f8>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f2 f85a 	bl	80002b8 <__aeabi_dsub>
 800e204:	4632      	mov	r2, r6
 800e206:	463b      	mov	r3, r7
 800e208:	f7f2 fa0e 	bl	8000628 <__aeabi_dmul>
 800e20c:	a35e      	add	r3, pc, #376	; (adr r3, 800e388 <atan+0x300>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f7f2 f851 	bl	80002b8 <__aeabi_dsub>
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	f7f2 fa05 	bl	8000628 <__aeabi_dmul>
 800e21e:	a35c      	add	r3, pc, #368	; (adr r3, 800e390 <atan+0x308>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f2 f848 	bl	80002b8 <__aeabi_dsub>
 800e228:	4632      	mov	r2, r6
 800e22a:	463b      	mov	r3, r7
 800e22c:	f7f2 f9fc 	bl	8000628 <__aeabi_dmul>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	4640      	mov	r0, r8
 800e236:	4649      	mov	r1, r9
 800e238:	f7f2 f840 	bl	80002bc <__adddf3>
 800e23c:	4622      	mov	r2, r4
 800e23e:	462b      	mov	r3, r5
 800e240:	f7f2 f9f2 	bl	8000628 <__aeabi_dmul>
 800e244:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	d14b      	bne.n	800e2e6 <atan+0x25e>
 800e24e:	4620      	mov	r0, r4
 800e250:	4629      	mov	r1, r5
 800e252:	f7f2 f831 	bl	80002b8 <__aeabi_dsub>
 800e256:	e72c      	b.n	800e0b2 <atan+0x2a>
 800e258:	ee10 0a10 	vmov	r0, s0
 800e25c:	4b53      	ldr	r3, [pc, #332]	; (800e3ac <atan+0x324>)
 800e25e:	2200      	movs	r2, #0
 800e260:	4629      	mov	r1, r5
 800e262:	f7f2 f829 	bl	80002b8 <__aeabi_dsub>
 800e266:	4b51      	ldr	r3, [pc, #324]	; (800e3ac <atan+0x324>)
 800e268:	4606      	mov	r6, r0
 800e26a:	460f      	mov	r7, r1
 800e26c:	2200      	movs	r2, #0
 800e26e:	4620      	mov	r0, r4
 800e270:	4629      	mov	r1, r5
 800e272:	f7f2 f823 	bl	80002bc <__adddf3>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4630      	mov	r0, r6
 800e27c:	4639      	mov	r1, r7
 800e27e:	f7f2 fafd 	bl	800087c <__aeabi_ddiv>
 800e282:	f04f 0a01 	mov.w	sl, #1
 800e286:	4604      	mov	r4, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	e764      	b.n	800e156 <atan+0xce>
 800e28c:	4b49      	ldr	r3, [pc, #292]	; (800e3b4 <atan+0x32c>)
 800e28e:	429e      	cmp	r6, r3
 800e290:	da1d      	bge.n	800e2ce <atan+0x246>
 800e292:	ee10 0a10 	vmov	r0, s0
 800e296:	4b48      	ldr	r3, [pc, #288]	; (800e3b8 <atan+0x330>)
 800e298:	2200      	movs	r2, #0
 800e29a:	4629      	mov	r1, r5
 800e29c:	f7f2 f80c 	bl	80002b8 <__aeabi_dsub>
 800e2a0:	4b45      	ldr	r3, [pc, #276]	; (800e3b8 <atan+0x330>)
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	460f      	mov	r7, r1
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	f7f2 f9bc 	bl	8000628 <__aeabi_dmul>
 800e2b0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <atan+0x324>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f7f2 f802 	bl	80002bc <__adddf3>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4630      	mov	r0, r6
 800e2be:	4639      	mov	r1, r7
 800e2c0:	f7f2 fadc 	bl	800087c <__aeabi_ddiv>
 800e2c4:	f04f 0a02 	mov.w	sl, #2
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	e743      	b.n	800e156 <atan+0xce>
 800e2ce:	462b      	mov	r3, r5
 800e2d0:	ee10 2a10 	vmov	r2, s0
 800e2d4:	4939      	ldr	r1, [pc, #228]	; (800e3bc <atan+0x334>)
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	f7f2 fad0 	bl	800087c <__aeabi_ddiv>
 800e2dc:	f04f 0a03 	mov.w	sl, #3
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	460d      	mov	r5, r1
 800e2e4:	e737      	b.n	800e156 <atan+0xce>
 800e2e6:	4b36      	ldr	r3, [pc, #216]	; (800e3c0 <atan+0x338>)
 800e2e8:	4e36      	ldr	r6, [pc, #216]	; (800e3c4 <atan+0x33c>)
 800e2ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e2ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e2f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e2f6:	f7f1 ffdf 	bl	80002b8 <__aeabi_dsub>
 800e2fa:	4622      	mov	r2, r4
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	f7f1 ffdb 	bl	80002b8 <__aeabi_dsub>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e30a:	f7f1 ffd5 	bl	80002b8 <__aeabi_dsub>
 800e30e:	f1bb 0f00 	cmp.w	fp, #0
 800e312:	4604      	mov	r4, r0
 800e314:	460d      	mov	r5, r1
 800e316:	f6bf aed6 	bge.w	800e0c6 <atan+0x3e>
 800e31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e31e:	461d      	mov	r5, r3
 800e320:	e6d1      	b.n	800e0c6 <atan+0x3e>
 800e322:	a51d      	add	r5, pc, #116	; (adr r5, 800e398 <atan+0x310>)
 800e324:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e328:	e6cd      	b.n	800e0c6 <atan+0x3e>
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	54442d18 	.word	0x54442d18
 800e334:	bff921fb 	.word	0xbff921fb
 800e338:	8800759c 	.word	0x8800759c
 800e33c:	7e37e43c 	.word	0x7e37e43c
 800e340:	e322da11 	.word	0xe322da11
 800e344:	3f90ad3a 	.word	0x3f90ad3a
 800e348:	24760deb 	.word	0x24760deb
 800e34c:	3fa97b4b 	.word	0x3fa97b4b
 800e350:	a0d03d51 	.word	0xa0d03d51
 800e354:	3fb10d66 	.word	0x3fb10d66
 800e358:	c54c206e 	.word	0xc54c206e
 800e35c:	3fb745cd 	.word	0x3fb745cd
 800e360:	920083ff 	.word	0x920083ff
 800e364:	3fc24924 	.word	0x3fc24924
 800e368:	5555550d 	.word	0x5555550d
 800e36c:	3fd55555 	.word	0x3fd55555
 800e370:	2c6a6c2f 	.word	0x2c6a6c2f
 800e374:	bfa2b444 	.word	0xbfa2b444
 800e378:	52defd9a 	.word	0x52defd9a
 800e37c:	3fadde2d 	.word	0x3fadde2d
 800e380:	af749a6d 	.word	0xaf749a6d
 800e384:	3fb3b0f2 	.word	0x3fb3b0f2
 800e388:	fe231671 	.word	0xfe231671
 800e38c:	3fbc71c6 	.word	0x3fbc71c6
 800e390:	9998ebc4 	.word	0x9998ebc4
 800e394:	3fc99999 	.word	0x3fc99999
 800e398:	54442d18 	.word	0x54442d18
 800e39c:	3ff921fb 	.word	0x3ff921fb
 800e3a0:	440fffff 	.word	0x440fffff
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	3fdbffff 	.word	0x3fdbffff
 800e3ac:	3ff00000 	.word	0x3ff00000
 800e3b0:	3ff2ffff 	.word	0x3ff2ffff
 800e3b4:	40038000 	.word	0x40038000
 800e3b8:	3ff80000 	.word	0x3ff80000
 800e3bc:	bff00000 	.word	0xbff00000
 800e3c0:	0800f080 	.word	0x0800f080
 800e3c4:	0800f060 	.word	0x0800f060

0800e3c8 <fabs>:
 800e3c8:	ec51 0b10 	vmov	r0, r1, d0
 800e3cc:	ee10 2a10 	vmov	r2, s0
 800e3d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3d4:	ec43 2b10 	vmov	d0, r2, r3
 800e3d8:	4770      	bx	lr

0800e3da <finite>:
 800e3da:	b082      	sub	sp, #8
 800e3dc:	ed8d 0b00 	vstr	d0, [sp]
 800e3e0:	9801      	ldr	r0, [sp, #4]
 800e3e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e3e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e3ea:	0fc0      	lsrs	r0, r0, #31
 800e3ec:	b002      	add	sp, #8
 800e3ee:	4770      	bx	lr

0800e3f0 <floor>:
 800e3f0:	ec51 0b10 	vmov	r0, r1, d0
 800e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e400:	2e13      	cmp	r6, #19
 800e402:	ee10 5a10 	vmov	r5, s0
 800e406:	ee10 8a10 	vmov	r8, s0
 800e40a:	460c      	mov	r4, r1
 800e40c:	dc32      	bgt.n	800e474 <floor+0x84>
 800e40e:	2e00      	cmp	r6, #0
 800e410:	da14      	bge.n	800e43c <floor+0x4c>
 800e412:	a333      	add	r3, pc, #204	; (adr r3, 800e4e0 <floor+0xf0>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f7f1 ff50 	bl	80002bc <__adddf3>
 800e41c:	2200      	movs	r2, #0
 800e41e:	2300      	movs	r3, #0
 800e420:	f7f2 fb92 	bl	8000b48 <__aeabi_dcmpgt>
 800e424:	b138      	cbz	r0, 800e436 <floor+0x46>
 800e426:	2c00      	cmp	r4, #0
 800e428:	da57      	bge.n	800e4da <floor+0xea>
 800e42a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e42e:	431d      	orrs	r5, r3
 800e430:	d001      	beq.n	800e436 <floor+0x46>
 800e432:	4c2d      	ldr	r4, [pc, #180]	; (800e4e8 <floor+0xf8>)
 800e434:	2500      	movs	r5, #0
 800e436:	4621      	mov	r1, r4
 800e438:	4628      	mov	r0, r5
 800e43a:	e025      	b.n	800e488 <floor+0x98>
 800e43c:	4f2b      	ldr	r7, [pc, #172]	; (800e4ec <floor+0xfc>)
 800e43e:	4137      	asrs	r7, r6
 800e440:	ea01 0307 	and.w	r3, r1, r7
 800e444:	4303      	orrs	r3, r0
 800e446:	d01f      	beq.n	800e488 <floor+0x98>
 800e448:	a325      	add	r3, pc, #148	; (adr r3, 800e4e0 <floor+0xf0>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f7f1 ff35 	bl	80002bc <__adddf3>
 800e452:	2200      	movs	r2, #0
 800e454:	2300      	movs	r3, #0
 800e456:	f7f2 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0eb      	beq.n	800e436 <floor+0x46>
 800e45e:	2c00      	cmp	r4, #0
 800e460:	bfbe      	ittt	lt
 800e462:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e466:	fa43 f606 	asrlt.w	r6, r3, r6
 800e46a:	19a4      	addlt	r4, r4, r6
 800e46c:	ea24 0407 	bic.w	r4, r4, r7
 800e470:	2500      	movs	r5, #0
 800e472:	e7e0      	b.n	800e436 <floor+0x46>
 800e474:	2e33      	cmp	r6, #51	; 0x33
 800e476:	dd0b      	ble.n	800e490 <floor+0xa0>
 800e478:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e47c:	d104      	bne.n	800e488 <floor+0x98>
 800e47e:	ee10 2a10 	vmov	r2, s0
 800e482:	460b      	mov	r3, r1
 800e484:	f7f1 ff1a 	bl	80002bc <__adddf3>
 800e488:	ec41 0b10 	vmov	d0, r0, r1
 800e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e490:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e494:	f04f 33ff 	mov.w	r3, #4294967295
 800e498:	fa23 f707 	lsr.w	r7, r3, r7
 800e49c:	4207      	tst	r7, r0
 800e49e:	d0f3      	beq.n	800e488 <floor+0x98>
 800e4a0:	a30f      	add	r3, pc, #60	; (adr r3, 800e4e0 <floor+0xf0>)
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	f7f1 ff09 	bl	80002bc <__adddf3>
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	f7f2 fb4b 	bl	8000b48 <__aeabi_dcmpgt>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	d0bf      	beq.n	800e436 <floor+0x46>
 800e4b6:	2c00      	cmp	r4, #0
 800e4b8:	da02      	bge.n	800e4c0 <floor+0xd0>
 800e4ba:	2e14      	cmp	r6, #20
 800e4bc:	d103      	bne.n	800e4c6 <floor+0xd6>
 800e4be:	3401      	adds	r4, #1
 800e4c0:	ea25 0507 	bic.w	r5, r5, r7
 800e4c4:	e7b7      	b.n	800e436 <floor+0x46>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e4cc:	fa03 f606 	lsl.w	r6, r3, r6
 800e4d0:	4435      	add	r5, r6
 800e4d2:	4545      	cmp	r5, r8
 800e4d4:	bf38      	it	cc
 800e4d6:	18e4      	addcc	r4, r4, r3
 800e4d8:	e7f2      	b.n	800e4c0 <floor+0xd0>
 800e4da:	2500      	movs	r5, #0
 800e4dc:	462c      	mov	r4, r5
 800e4de:	e7aa      	b.n	800e436 <floor+0x46>
 800e4e0:	8800759c 	.word	0x8800759c
 800e4e4:	7e37e43c 	.word	0x7e37e43c
 800e4e8:	bff00000 	.word	0xbff00000
 800e4ec:	000fffff 	.word	0x000fffff

0800e4f0 <scalbn>:
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	ec55 4b10 	vmov	r4, r5, d0
 800e4f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	462b      	mov	r3, r5
 800e4fe:	b99a      	cbnz	r2, 800e528 <scalbn+0x38>
 800e500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e504:	4323      	orrs	r3, r4
 800e506:	d036      	beq.n	800e576 <scalbn+0x86>
 800e508:	4b39      	ldr	r3, [pc, #228]	; (800e5f0 <scalbn+0x100>)
 800e50a:	4629      	mov	r1, r5
 800e50c:	ee10 0a10 	vmov	r0, s0
 800e510:	2200      	movs	r2, #0
 800e512:	f7f2 f889 	bl	8000628 <__aeabi_dmul>
 800e516:	4b37      	ldr	r3, [pc, #220]	; (800e5f4 <scalbn+0x104>)
 800e518:	429e      	cmp	r6, r3
 800e51a:	4604      	mov	r4, r0
 800e51c:	460d      	mov	r5, r1
 800e51e:	da10      	bge.n	800e542 <scalbn+0x52>
 800e520:	a32b      	add	r3, pc, #172	; (adr r3, 800e5d0 <scalbn+0xe0>)
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	e03a      	b.n	800e59e <scalbn+0xae>
 800e528:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e52c:	428a      	cmp	r2, r1
 800e52e:	d10c      	bne.n	800e54a <scalbn+0x5a>
 800e530:	ee10 2a10 	vmov	r2, s0
 800e534:	4620      	mov	r0, r4
 800e536:	4629      	mov	r1, r5
 800e538:	f7f1 fec0 	bl	80002bc <__adddf3>
 800e53c:	4604      	mov	r4, r0
 800e53e:	460d      	mov	r5, r1
 800e540:	e019      	b.n	800e576 <scalbn+0x86>
 800e542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e546:	460b      	mov	r3, r1
 800e548:	3a36      	subs	r2, #54	; 0x36
 800e54a:	4432      	add	r2, r6
 800e54c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e550:	428a      	cmp	r2, r1
 800e552:	dd08      	ble.n	800e566 <scalbn+0x76>
 800e554:	2d00      	cmp	r5, #0
 800e556:	a120      	add	r1, pc, #128	; (adr r1, 800e5d8 <scalbn+0xe8>)
 800e558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e55c:	da1c      	bge.n	800e598 <scalbn+0xa8>
 800e55e:	a120      	add	r1, pc, #128	; (adr r1, 800e5e0 <scalbn+0xf0>)
 800e560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e564:	e018      	b.n	800e598 <scalbn+0xa8>
 800e566:	2a00      	cmp	r2, #0
 800e568:	dd08      	ble.n	800e57c <scalbn+0x8c>
 800e56a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e56e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e576:	ec45 4b10 	vmov	d0, r4, r5
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e580:	da19      	bge.n	800e5b6 <scalbn+0xc6>
 800e582:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e586:	429e      	cmp	r6, r3
 800e588:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e58c:	dd0a      	ble.n	800e5a4 <scalbn+0xb4>
 800e58e:	a112      	add	r1, pc, #72	; (adr r1, 800e5d8 <scalbn+0xe8>)
 800e590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1e2      	bne.n	800e55e <scalbn+0x6e>
 800e598:	a30f      	add	r3, pc, #60	; (adr r3, 800e5d8 <scalbn+0xe8>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f2 f843 	bl	8000628 <__aeabi_dmul>
 800e5a2:	e7cb      	b.n	800e53c <scalbn+0x4c>
 800e5a4:	a10a      	add	r1, pc, #40	; (adr r1, 800e5d0 <scalbn+0xe0>)
 800e5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0b8      	beq.n	800e520 <scalbn+0x30>
 800e5ae:	a10e      	add	r1, pc, #56	; (adr r1, 800e5e8 <scalbn+0xf8>)
 800e5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b4:	e7b4      	b.n	800e520 <scalbn+0x30>
 800e5b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5ba:	3236      	adds	r2, #54	; 0x36
 800e5bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	4b0c      	ldr	r3, [pc, #48]	; (800e5f8 <scalbn+0x108>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	e7e8      	b.n	800e59e <scalbn+0xae>
 800e5cc:	f3af 8000 	nop.w
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	01a56e1f 	.word	0x01a56e1f
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	8800759c 	.word	0x8800759c
 800e5e4:	fe37e43c 	.word	0xfe37e43c
 800e5e8:	c2f8f359 	.word	0xc2f8f359
 800e5ec:	81a56e1f 	.word	0x81a56e1f
 800e5f0:	43500000 	.word	0x43500000
 800e5f4:	ffff3cb0 	.word	0xffff3cb0
 800e5f8:	3c900000 	.word	0x3c900000

0800e5fc <_sbrk>:
 800e5fc:	4a04      	ldr	r2, [pc, #16]	; (800e610 <_sbrk+0x14>)
 800e5fe:	6811      	ldr	r1, [r2, #0]
 800e600:	4603      	mov	r3, r0
 800e602:	b909      	cbnz	r1, 800e608 <_sbrk+0xc>
 800e604:	4903      	ldr	r1, [pc, #12]	; (800e614 <_sbrk+0x18>)
 800e606:	6011      	str	r1, [r2, #0]
 800e608:	6810      	ldr	r0, [r2, #0]
 800e60a:	4403      	add	r3, r0
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	4770      	bx	lr
 800e610:	20011d4c 	.word	0x20011d4c
 800e614:	20011d50 	.word	0x20011d50

0800e618 <_init>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	bf00      	nop
 800e61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61e:	bc08      	pop	{r3}
 800e620:	469e      	mov	lr, r3
 800e622:	4770      	bx	lr

0800e624 <_fini>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	bf00      	nop
 800e628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62a:	bc08      	pop	{r3}
 800e62c:	469e      	mov	lr, r3
 800e62e:	4770      	bx	lr
