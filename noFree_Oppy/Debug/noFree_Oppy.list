
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800f3e8  0800f3e8  0001f3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff88  0800ff88  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff88  0800ff88  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff88  0800ff88  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff88  0800ff88  0001ff88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff8c  0800ff8c  0001ff8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ff90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011bb0  200001e8  08010174  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011d98  08010174  00021d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008684  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001851  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011372  00000000  00000000  0002aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b33  00000000  00000000  0003c242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059395  00000000  00000000  00045d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009f10a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  0009f15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3d0 	.word	0x0800f3d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800f3d0 	.word	0x0800f3d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <main+0x198>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a62      	ldr	r2, [pc, #392]	; (8000e50 <main+0x198>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f007 fb08 	bl	80082e4 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd4:	f000 fa3c 	bl	8001150 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <main+0x19c>)
 8000cda:	4a5f      	ldr	r2, [pc, #380]	; (8000e58 <main+0x1a0>)
 8000cdc:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000cde:	2102      	movs	r1, #2
 8000ce0:	485e      	ldr	r0, [pc, #376]	; (8000e5c <main+0x1a4>)
 8000ce2:	f000 ff05 	bl	8001af0 <calibracionGyros>
 8000ce6:	ee10 3a10 	vmov	r3, s0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc44 	bl	8000578 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	495a      	ldr	r1, [pc, #360]	; (8000e60 <main+0x1a8>)
 8000cf6:	e9c1 2300 	strd	r2, r3, [r1]

	double angleToGo_Relative = 0;
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double angle_start = 0;
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2300 	strd	r2, r3, [r7]

    /* Loop forever */
	while(1){

		if (!flag_Astar){
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <main+0x1ac>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <main+0x66>
			fillComand(); // Se puede leer cualquier comando excepto cuando se esta lleyendo el grid de Astar
 8000d1a:	f002 fabb 	bl	8003294 <fillComand>
		}

		if (flag_NOP){
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <main+0x1b0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01b      	beq.n	8000d5e <main+0xa6>

			 NOP(handler_Motor_Array,
 8000d26:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <main+0x1a8>)
 8000d28:	ed93 7b00 	vldr	d7, [r3]
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <main+0x1b4>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000d34:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <main+0x1b8>)
 8000d36:	9303      	str	r3, [sp, #12]
 8000d38:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <main+0x1bc>)
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <main+0x1c0>)
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <main+0x1c4>)
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	eeb0 0a47 	vmov.f32	s0, s14
 8000d48:	eef0 0a67 	vmov.f32	s1, s15
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <main+0x1c8>)
 8000d4e:	4a4d      	ldr	r2, [pc, #308]	; (8000e84 <main+0x1cc>)
 8000d50:	4942      	ldr	r1, [pc, #264]	; (8000e5c <main+0x1a4>)
 8000d52:	484d      	ldr	r0, [pc, #308]	; (8000e88 <main+0x1d0>)
 8000d54:	f002 fa74 	bl	8003240 <NOP>
				 &flag_measurements,
				 &flag_control,
				 data,
				 Mode_dir);

			 flag_NOP = RESET;
 8000d58:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <main+0x1b0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		}

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <main+0x1d4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d01a      	beq.n	8000d9c <main+0xe4>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <main+0x1a8>)
 8000d68:	ed93 7b00 	vldr	d7, [r3]
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <main+0x1b4>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <main+0x1b8>)
 8000d76:	9304      	str	r3, [sp, #16]
 8000d78:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <main+0x1bc>)
 8000d7a:	9303      	str	r3, [sp, #12]
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <main+0x1c0>)
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <main+0x1c4>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <main+0x1d8>)
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8c:	eef0 0a67 	vmov.f32	s1, s15
 8000d90:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <main+0x1c8>)
 8000d92:	4a3c      	ldr	r2, [pc, #240]	; (8000e84 <main+0x1cc>)
 8000d94:	4931      	ldr	r1, [pc, #196]	; (8000e5c <main+0x1a4>)
 8000d96:	483c      	ldr	r0, [pc, #240]	; (8000e88 <main+0x1d0>)
 8000d98:	f002 f9a8 	bl	80030ec <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <main+0x1dc>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d029      	beq.n	8000df8 <main+0x140>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			Done = goTo(handler_Motor_Array,
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <main+0x1a8>)
 8000da6:	ed93 7b00 	vldr	d7, [r3]
					    cal_Gyro,
					    &flag_angulo,
					    &flag_measurements,
					    &flag_control,
					    data,
					    parameters_Path_Robot.line_Distance,
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <main+0x1c8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			Done = goTo(handler_Motor_Array,
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <main+0x1b4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8000db8:	9205      	str	r2, [sp, #20]
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <main+0x1b8>)
 8000dbc:	9304      	str	r3, [sp, #16]
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <main+0x1bc>)
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <main+0x1c0>)
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <main+0x1c4>)
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <main+0x1d8>)
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd2:	eef0 0a67 	vmov.f32	s1, s15
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <main+0x1c8>)
 8000dd8:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <main+0x1cc>)
 8000dda:	4920      	ldr	r1, [pc, #128]	; (8000e5c <main+0x1a4>)
 8000ddc:	482a      	ldr	r0, [pc, #168]	; (8000e88 <main+0x1d0>)
 8000dde:	f001 ff6b 	bl	8002cb8 <goTo>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <main+0x1e0>)
 8000de8:	701a      	strb	r2, [r3, #0]
					    Mode_dir);

			if (Done){parseCommands("stop");}
 8000dea:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <main+0x1e0>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <main+0x140>
 8000df2:	482a      	ldr	r0, [pc, #168]	; (8000e9c <main+0x1e4>)
 8000df4:	f000 fc10 	bl	8001618 <parseCommands>

		}

		if (flag_Roll){
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <main+0x1e8>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d018      	beq.n	8000e32 <main+0x17a>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			NOP(handler_Motor_Array,
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <main+0x1a8>)
 8000e02:	ed93 7b00 	vldr	d7, [r3]
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <main+0x1b4>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <main+0x1b8>)
 8000e10:	9303      	str	r3, [sp, #12]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <main+0x1bc>)
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <main+0x1c0>)
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <main+0x1c4>)
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e22:	eef0 0a67 	vmov.f32	s1, s15
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <main+0x1c8>)
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <main+0x1cc>)
 8000e2a:	490c      	ldr	r1, [pc, #48]	; (8000e5c <main+0x1a4>)
 8000e2c:	4816      	ldr	r0, [pc, #88]	; (8000e88 <main+0x1d0>)
 8000e2e:	f002 fa07 	bl	8003240 <NOP>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <main+0x1ec>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 809d 	beq.w	8000f76 <main+0x2be>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <main+0x1e0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <main+0x1cc>)
 8000e44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e48:	e9c7 2300 	strd	r2, r3, [r7]

			while (!Done){
 8000e4c:	e07f      	b.n	8000f4e <main+0x296>
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	20001140 	.word	0x20001140
 8000e58:	3ddfaebc 	.word	0x3ddfaebc
 8000e5c:	200003d0 	.word	0x200003d0
 8000e60:	20001130 	.word	0x20001130
 8000e64:	20001023 	.word	0x20001023
 8000e68:	20001026 	.word	0x20001026
 8000e6c:	20001018 	.word	0x20001018
 8000e70:	20000504 	.word	0x20000504
 8000e74:	2000101f 	.word	0x2000101f
 8000e78:	2000101c 	.word	0x2000101c
 8000e7c:	2000101b 	.word	0x2000101b
 8000e80:	20001050 	.word	0x20001050
 8000e84:	200010b8 	.word	0x200010b8
 8000e88:	200003e0 	.word	0x200003e0
 8000e8c:	2000101d 	.word	0x2000101d
 8000e90:	20001030 	.word	0x20001030
 8000e94:	2000101e 	.word	0x2000101e
 8000e98:	20001022 	.word	0x20001022
 8000e9c:	0800f450 	.word	0x0800f450
 8000ea0:	20001020 	.word	0x20001020
 8000ea4:	20001021 	.word	0x20001021

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000ea8:	4b8a      	ldr	r3, [pc, #552]	; (80010d4 <main+0x41c>)
 8000eaa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb2:	f7ff fa01 	bl	80002b8 <__aeabi_dsub>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fe63 	bl	8000b88 <__aeabi_d2iz>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bfb8      	it	lt
 8000ec8:	425b      	neglt	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb42 	bl	8000554 <__aeabi_i2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8000ed8:	4b7f      	ldr	r3, [pc, #508]	; (80010d8 <main+0x420>)
 8000eda:	ed93 7b00 	vldr	d7, [r3]
 8000ede:	4b7f      	ldr	r3, [pc, #508]	; (80010dc <main+0x424>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000ee6:	4b7e      	ldr	r3, [pc, #504]	; (80010e0 <main+0x428>)
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	4b7e      	ldr	r3, [pc, #504]	; (80010e4 <main+0x42c>)
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <main+0x430>)
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	4b7e      	ldr	r3, [pc, #504]	; (80010ec <main+0x434>)
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8000efa:	eef0 0a67 	vmov.f32	s1, s15
 8000efe:	4b7c      	ldr	r3, [pc, #496]	; (80010f0 <main+0x438>)
 8000f00:	4a74      	ldr	r2, [pc, #464]	; (80010d4 <main+0x41c>)
 8000f02:	497c      	ldr	r1, [pc, #496]	; (80010f4 <main+0x43c>)
 8000f04:	487c      	ldr	r0, [pc, #496]	; (80010f8 <main+0x440>)
 8000f06:	f002 f99b 	bl	8003240 <NOP>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8000f0a:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <main+0x438>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb20 	bl	8000554 <__aeabi_i2d>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	2101      	movs	r1, #1
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f20:	f7ff fdf4 	bl	8000b0c <__aeabi_dcmplt>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <main+0x276>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	b2e3      	uxtb	r3, r4
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d009      	beq.n	8000f4e <main+0x296>
 8000f3a:	4b70      	ldr	r3, [pc, #448]	; (80010fc <main+0x444>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf0c      	ite	eq
 8000f42:	2301      	moveq	r3, #1
 8000f44:	2300      	movne	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <main+0x444>)
 8000f4c:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <main+0x444>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0a8      	beq.n	8000ea8 <main+0x1f0>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <main+0x444>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <main+0x2ac>
 8000f5e:	4868      	ldr	r0, [pc, #416]	; (8001100 <main+0x448>)
 8000f60:	f000 fb5a 	bl	8001618 <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Done = RESET; // Reseteamos la bandera
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <main+0x444>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
		}

		if (flag_Astar){
 8000f76:	4b63      	ldr	r3, [pc, #396]	; (8001104 <main+0x44c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8097 	beq.w	80010ae <main+0x3f6>

			if (rxData != '\0'){
 8000f80:	4b61      	ldr	r3, [pc, #388]	; (8001108 <main+0x450>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d059      	beq.n	800103c <main+0x384>

				if (rxData != '\r'){
 8000f88:	4b5f      	ldr	r3, [pc, #380]	; (8001108 <main+0x450>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b0d      	cmp	r3, #13
 8000f8e:	d016      	beq.n	8000fbe <main+0x306>
					stringMatrix[stringRow][stringColumn] = rxData;
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <main+0x454>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461c      	mov	r4, r3
 8000f96:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <main+0x458>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <main+0x450>)
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a5c      	ldr	r2, [pc, #368]	; (8001114 <main+0x45c>)
 8000fa2:	2334      	movs	r3, #52	; 0x34
 8000fa4:	fb04 f303 	mul.w	r3, r4, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	4403      	add	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
					stringColumn++;
 8000fb0:	4b57      	ldr	r3, [pc, #348]	; (8001110 <main+0x458>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <main+0x458>)
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e008      	b.n	8000fd0 <main+0x318>
				}else{
					stringRow++;
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <main+0x454>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <main+0x454>)
 8000fc8:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8000fca:	4b51      	ldr	r3, [pc, #324]	; (8001110 <main+0x458>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
				}

				if (rxData == '@'){
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <main+0x450>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	d114      	bne.n	8001002 <main+0x34a>
					doneTransaction = SET;
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <main+0x460>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]

					stringMatrix[stringRow][stringColumn - 1] = '\0';
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <main+0x454>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <main+0x458>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	494a      	ldr	r1, [pc, #296]	; (8001114 <main+0x45c>)
 8000fec:	2234      	movs	r2, #52	; 0x34
 8000fee:	fb00 f202 	mul.w	r2, r0, r2
 8000ff2:	440a      	add	r2, r1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <main+0x458>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e019      	b.n	8001036 <main+0x37e>

				}else if (rxData == 'z'){
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <main+0x450>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b7a      	cmp	r3, #122	; 0x7a
 8001008:	d115      	bne.n	8001036 <main+0x37e>

					memset(stringMatrix, 0, sizeof(stringMatrix));
 800100a:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 800100e:	2100      	movs	r1, #0
 8001010:	4840      	ldr	r0, [pc, #256]	; (8001114 <main+0x45c>)
 8001012:	f008 fc1d 	bl	8009850 <memset>
					stringRow    = 0;
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <main+0x454>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <main+0x458>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8001022:	493e      	ldr	r1, [pc, #248]	; (800111c <main+0x464>)
 8001024:	483e      	ldr	r0, [pc, #248]	; (8001120 <main+0x468>)
 8001026:	f008 f8c9 	bl	80091bc <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <main+0x46c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	483b      	ldr	r0, [pc, #236]	; (8001120 <main+0x468>)
 8001032:	f008 f8c3 	bl	80091bc <writeMsg>
				}

				rxData = '\0';
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <main+0x450>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

			}

			// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
			if (doneTransaction){
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <main+0x460>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d034      	beq.n	80010ae <main+0x3f6>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <main+0x470>)
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <main+0x474>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <main+0x478>)
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <main+0x47c>)
 8001050:	4939      	ldr	r1, [pc, #228]	; (8001138 <main+0x480>)
 8001052:	4830      	ldr	r0, [pc, #192]	; (8001114 <main+0x45c>)
 8001054:	f002 fa52 	bl	80034fc <findShorterWay>
 8001058:	4603      	mov	r3, r0
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <main+0x484>)
 800105e:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 8001060:	4b36      	ldr	r3, [pc, #216]	; (800113c <main+0x484>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <main+0x3bc>
					// si se llego hasta aca es porque Astar si funciona correctamente
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <main+0x488>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	482c      	ldr	r0, [pc, #176]	; (8001120 <main+0x468>)
 8001070:	f008 f8a4 	bl	80091bc <writeMsg>
				}
				memset(stringMatrix, 0, sizeof(stringMatrix));
 8001074:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 8001078:	2100      	movs	r1, #0
 800107a:	4826      	ldr	r0, [pc, #152]	; (8001114 <main+0x45c>)
 800107c:	f008 fbe8 	bl	8009850 <memset>
				stringRow    = 0;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <main+0x454>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <main+0x458>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 800108c:	4923      	ldr	r1, [pc, #140]	; (800111c <main+0x464>)
 800108e:	4824      	ldr	r0, [pc, #144]	; (8001120 <main+0x468>)
 8001090:	f008 f894 	bl	80091bc <writeMsg>

				flagAstar = RESET;
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <main+0x48c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <main+0x460>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				Do_the_track = SET;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <main+0x490>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]

				parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE ASTAR
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <main+0x494>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}


		if (Do_the_track){
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <main+0x490>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <main+0x40e>

			// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
			switch (parameters_op_Robot.op_Mode) {
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <main+0x494>)
 80010b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <main+0x412>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d004      	beq.n	80010ce <main+0x416>
					// hallado los puntos a recorrer


					break;
				}
				default:{break;}
 80010c4:	e004      	b.n	80010d0 <main+0x418>
			}// Fin del switch case



		}
 80010c6:	bf00      	nop
 80010c8:	e623      	b.n	8000d12 <main+0x5a>
					break;
 80010ca:	bf00      	nop
 80010cc:	e621      	b.n	8000d12 <main+0x5a>
					break;
 80010ce:	bf00      	nop
		if (!flag_Astar){
 80010d0:	e61f      	b.n	8000d12 <main+0x5a>
 80010d2:	bf00      	nop
 80010d4:	200010b8 	.word	0x200010b8
 80010d8:	20001130 	.word	0x20001130
 80010dc:	20001018 	.word	0x20001018
 80010e0:	20000504 	.word	0x20000504
 80010e4:	2000101f 	.word	0x2000101f
 80010e8:	2000101c 	.word	0x2000101c
 80010ec:	2000101b 	.word	0x2000101b
 80010f0:	20001050 	.word	0x20001050
 80010f4:	200003d0 	.word	0x200003d0
 80010f8:	200003e0 	.word	0x200003e0
 80010fc:	20001022 	.word	0x20001022
 8001100:	0800f450 	.word	0x0800f450
 8001104:	20001023 	.word	0x20001023
 8001108:	200004d6 	.word	0x200004d6
 800110c:	20001015 	.word	0x20001015
 8001110:	20001014 	.word	0x20001014
 8001114:	20000584 	.word	0x20000584
 8001118:	200004d5 	.word	0x200004d5
 800111c:	0800f458 	.word	0x0800f458
 8001120:	20000330 	.word	0x20000330
 8001124:	20000004 	.word	0x20000004
 8001128:	20011a48 	.word	0x20011a48
 800112c:	2000044c 	.word	0x2000044c
 8001130:	20000440 	.word	0x20000440
 8001134:	20001238 	.word	0x20001238
 8001138:	20010fb8 	.word	0x20010fb8
 800113c:	20001017 	.word	0x20001017
 8001140:	20000000 	.word	0x20000000
 8001144:	20001016 	.word	0x20001016
 8001148:	20001024 	.word	0x20001024
 800114c:	20001108 	.word	0x20001108

08001150 <inSystem>:
}




void inSystem (void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8001156:	4bae      	ldr	r3, [pc, #696]	; (8001410 <inSystem+0x2c0>)
 8001158:	4aae      	ldr	r2, [pc, #696]	; (8001414 <inSystem+0x2c4>)
 800115a:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 800115c:	4bac      	ldr	r3, [pc, #688]	; (8001410 <inSystem+0x2c0>)
 800115e:	2200      	movs	r2, #0
 8001160:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001162:	4bab      	ldr	r3, [pc, #684]	; (8001410 <inSystem+0x2c0>)
 8001164:	2201      	movs	r2, #1
 8001166:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001168:	4ba9      	ldr	r3, [pc, #676]	; (8001410 <inSystem+0x2c0>)
 800116a:	2200      	movs	r2, #0
 800116c:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800116e:	4ba8      	ldr	r3, [pc, #672]	; (8001410 <inSystem+0x2c0>)
 8001170:	2205      	movs	r2, #5
 8001172:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001174:	4ba6      	ldr	r3, [pc, #664]	; (8001410 <inSystem+0x2c0>)
 8001176:	2200      	movs	r2, #0
 8001178:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 800117a:	4ba5      	ldr	r3, [pc, #660]	; (8001410 <inSystem+0x2c0>)
 800117c:	2202      	movs	r2, #2
 800117e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8001180:	48a3      	ldr	r0, [pc, #652]	; (8001410 <inSystem+0x2c0>)
 8001182:	f005 fda9 	bl	8006cd8 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8001186:	2101      	movs	r1, #1
 8001188:	48a1      	ldr	r0, [pc, #644]	; (8001410 <inSystem+0x2c0>)
 800118a:	f005 fecf 	bl	8006f2c <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 800118e:	4ba2      	ldr	r3, [pc, #648]	; (8001418 <inSystem+0x2c8>)
 8001190:	4aa2      	ldr	r2, [pc, #648]	; (800141c <inSystem+0x2cc>)
 8001192:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001194:	4ba0      	ldr	r3, [pc, #640]	; (8001418 <inSystem+0x2c8>)
 8001196:	2201      	movs	r2, #1
 8001198:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800119a:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <inSystem+0x2c8>)
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80011a0:	4b9d      	ldr	r3, [pc, #628]	; (8001418 <inSystem+0x2c8>)
 80011a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80011a6:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 80011a8:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <inSystem+0x2c8>)
 80011aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011ae:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 80011b0:	4899      	ldr	r0, [pc, #612]	; (8001418 <inSystem+0x2c8>)
 80011b2:	f004 f925 	bl	8005400 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 80011b6:	4898      	ldr	r0, [pc, #608]	; (8001418 <inSystem+0x2c8>)
 80011b8:	f004 fd1e 	bl	8005bf8 <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80011bc:	f004 f904 	bl	80053c8 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace, Mode_dir);
 80011c0:	4b97      	ldr	r3, [pc, #604]	; (8001420 <inSystem+0x2d0>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f8ad 3000 	strh.w	r3, [sp]
 80011c8:	4b96      	ldr	r3, [pc, #600]	; (8001424 <inSystem+0x2d4>)
 80011ca:	4a97      	ldr	r2, [pc, #604]	; (8001428 <inSystem+0x2d8>)
 80011cc:	4997      	ldr	r1, [pc, #604]	; (800142c <inSystem+0x2dc>)
 80011ce:	4898      	ldr	r0, [pc, #608]	; (8001430 <inSystem+0x2e0>)
 80011d0:	f001 fc48 	bl	8002a64 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 80011d4:	4b97      	ldr	r3, [pc, #604]	; (8001434 <inSystem+0x2e4>)
 80011d6:	4a8f      	ldr	r2, [pc, #572]	; (8001414 <inSystem+0x2c4>)
 80011d8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80011da:	4b96      	ldr	r3, [pc, #600]	; (8001434 <inSystem+0x2e4>)
 80011dc:	2202      	movs	r2, #2
 80011de:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011e0:	4b94      	ldr	r3, [pc, #592]	; (8001434 <inSystem+0x2e4>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011e6:	4b93      	ldr	r3, [pc, #588]	; (8001434 <inSystem+0x2e4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 80011ec:	4b91      	ldr	r3, [pc, #580]	; (8001434 <inSystem+0x2e4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011f2:	4b90      	ldr	r3, [pc, #576]	; (8001434 <inSystem+0x2e4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011f8:	4b8e      	ldr	r3, [pc, #568]	; (8001434 <inSystem+0x2e4>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 80011fe:	488d      	ldr	r0, [pc, #564]	; (8001434 <inSystem+0x2e4>)
 8001200:	f005 fd6a 	bl	8006cd8 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <inSystem+0x2e8>)
 8001206:	4a8d      	ldr	r2, [pc, #564]	; (800143c <inSystem+0x2ec>)
 8001208:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <inSystem+0x2e8>)
 800120c:	2200      	movs	r2, #0
 800120e:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001210:	4b89      	ldr	r3, [pc, #548]	; (8001438 <inSystem+0x2e8>)
 8001212:	4a8b      	ldr	r2, [pc, #556]	; (8001440 <inSystem+0x2f0>)
 8001214:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001216:	4988      	ldr	r1, [pc, #544]	; (8001438 <inSystem+0x2e8>)
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b89      	ldr	r3, [pc, #548]	; (8001444 <inSystem+0x2f4>)
 800121e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <inSystem+0x2e8>)
 8001224:	2264      	movs	r2, #100	; 0x64
 8001226:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001228:	4b83      	ldr	r3, [pc, #524]	; (8001438 <inSystem+0x2e8>)
 800122a:	2201      	movs	r2, #1
 800122c:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800122e:	4b82      	ldr	r3, [pc, #520]	; (8001438 <inSystem+0x2e8>)
 8001230:	2201      	movs	r2, #1
 8001232:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001234:	4880      	ldr	r0, [pc, #512]	; (8001438 <inSystem+0x2e8>)
 8001236:	f006 fb59 	bl	80078ec <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 800123a:	487f      	ldr	r0, [pc, #508]	; (8001438 <inSystem+0x2e8>)
 800123c:	f006 fc40 	bl	8007ac0 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001240:	4b81      	ldr	r3, [pc, #516]	; (8001448 <inSystem+0x2f8>)
 8001242:	4a74      	ldr	r2, [pc, #464]	; (8001414 <inSystem+0x2c4>)
 8001244:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001246:	4b80      	ldr	r3, [pc, #512]	; (8001448 <inSystem+0x2f8>)
 8001248:	2202      	movs	r2, #2
 800124a:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <inSystem+0x2f8>)
 800124e:	2202      	movs	r2, #2
 8001250:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001252:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <inSystem+0x2f8>)
 8001254:	2200      	movs	r2, #0
 8001256:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001258:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <inSystem+0x2f8>)
 800125a:	2201      	movs	r2, #1
 800125c:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800125e:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <inSystem+0x2f8>)
 8001260:	2200      	movs	r2, #0
 8001262:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001264:	4b78      	ldr	r3, [pc, #480]	; (8001448 <inSystem+0x2f8>)
 8001266:	2202      	movs	r2, #2
 8001268:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800126a:	4877      	ldr	r0, [pc, #476]	; (8001448 <inSystem+0x2f8>)
 800126c:	f005 fd34 	bl	8006cd8 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <inSystem+0x2fc>)
 8001272:	4a72      	ldr	r2, [pc, #456]	; (800143c <inSystem+0x2ec>)
 8001274:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001276:	4b75      	ldr	r3, [pc, #468]	; (800144c <inSystem+0x2fc>)
 8001278:	2201      	movs	r2, #1
 800127a:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <inSystem+0x2fc>)
 800127e:	4a70      	ldr	r2, [pc, #448]	; (8001440 <inSystem+0x2f0>)
 8001280:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001282:	4972      	ldr	r1, [pc, #456]	; (800144c <inSystem+0x2fc>)
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <inSystem+0x2f4>)
 800128a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800128e:	4b6f      	ldr	r3, [pc, #444]	; (800144c <inSystem+0x2fc>)
 8001290:	2264      	movs	r2, #100	; 0x64
 8001292:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <inSystem+0x2fc>)
 8001296:	2201      	movs	r2, #1
 8001298:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800129a:	4b6c      	ldr	r3, [pc, #432]	; (800144c <inSystem+0x2fc>)
 800129c:	2201      	movs	r2, #1
 800129e:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80012a0:	486a      	ldr	r0, [pc, #424]	; (800144c <inSystem+0x2fc>)
 80012a2:	f006 fb23 	bl	80078ec <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80012a6:	4869      	ldr	r0, [pc, #420]	; (800144c <inSystem+0x2fc>)
 80012a8:	f006 fc0a 	bl	8007ac0 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <inSystem+0x300>)
 80012ae:	4a69      	ldr	r2, [pc, #420]	; (8001454 <inSystem+0x304>)
 80012b0:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <inSystem+0x300>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <inSystem+0x300>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <inSystem+0x300>)
 80012c0:	220a      	movs	r2, #10
 80012c2:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <inSystem+0x300>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <inSystem+0x300>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012d0:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <inSystem+0x300>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 80012d6:	485e      	ldr	r0, [pc, #376]	; (8001450 <inSystem+0x300>)
 80012d8:	f005 fcfe 	bl	8006cd8 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 80012dc:	2100      	movs	r1, #0
 80012de:	485c      	ldr	r0, [pc, #368]	; (8001450 <inSystem+0x300>)
 80012e0:	f005 fe4f 	bl	8006f82 <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80012e4:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <inSystem+0x308>)
 80012e6:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <inSystem+0x304>)
 80012e8:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <inSystem+0x308>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <inSystem+0x308>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <inSystem+0x308>)
 80012f8:	220b      	movs	r2, #11
 80012fa:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012fc:	4b56      	ldr	r3, [pc, #344]	; (8001458 <inSystem+0x308>)
 80012fe:	2200      	movs	r2, #0
 8001300:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <inSystem+0x308>)
 8001304:	2200      	movs	r2, #0
 8001306:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <inSystem+0x308>)
 800130a:	2202      	movs	r2, #2
 800130c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 800130e:	4852      	ldr	r0, [pc, #328]	; (8001458 <inSystem+0x308>)
 8001310:	f005 fce2 	bl	8006cd8 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001314:	2100      	movs	r1, #0
 8001316:	4850      	ldr	r0, [pc, #320]	; (8001458 <inSystem+0x308>)
 8001318:	f005 fe33 	bl	8006f82 <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800131c:	4b4f      	ldr	r3, [pc, #316]	; (800145c <inSystem+0x30c>)
 800131e:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <inSystem+0x304>)
 8001320:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001322:	4b4e      	ldr	r3, [pc, #312]	; (800145c <inSystem+0x30c>)
 8001324:	2200      	movs	r2, #0
 8001326:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <inSystem+0x30c>)
 800132a:	2201      	movs	r2, #1
 800132c:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800132e:	4b4b      	ldr	r3, [pc, #300]	; (800145c <inSystem+0x30c>)
 8001330:	220c      	movs	r2, #12
 8001332:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001334:	4b49      	ldr	r3, [pc, #292]	; (800145c <inSystem+0x30c>)
 8001336:	2200      	movs	r2, #0
 8001338:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800133a:	4b48      	ldr	r3, [pc, #288]	; (800145c <inSystem+0x30c>)
 800133c:	2200      	movs	r2, #0
 800133e:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <inSystem+0x30c>)
 8001342:	2202      	movs	r2, #2
 8001344:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <inSystem+0x30c>)
 8001348:	f005 fcc6 	bl	8006cd8 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800134c:	2100      	movs	r1, #0
 800134e:	4843      	ldr	r0, [pc, #268]	; (800145c <inSystem+0x30c>)
 8001350:	f005 fe17 	bl	8006f82 <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <inSystem+0x2e0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <inSystem+0x310>)
 800135e:	4a41      	ldr	r2, [pc, #260]	; (8001464 <inSystem+0x314>)
 8001360:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <inSystem+0x310>)
 8001364:	2200      	movs	r2, #0
 8001366:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <inSystem+0x310>)
 800136a:	2201      	movs	r2, #1
 800136c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <inSystem+0x310>)
 8001370:	2202      	movs	r2, #2
 8001372:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <inSystem+0x310>)
 8001376:	2200      	movs	r2, #0
 8001378:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <inSystem+0x310>)
 800137c:	2200      	movs	r2, #0
 800137e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <inSystem+0x310>)
 8001382:	2202      	movs	r2, #2
 8001384:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001386:	4836      	ldr	r0, [pc, #216]	; (8001460 <inSystem+0x310>)
 8001388:	f005 fca6 	bl	8006cd8 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800138c:	2100      	movs	r1, #0
 800138e:	4834      	ldr	r0, [pc, #208]	; (8001460 <inSystem+0x310>)
 8001390:	f005 fdf7 	bl	8006f82 <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <inSystem+0x2e0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <inSystem+0x318>)
 800139e:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <inSystem+0x304>)
 80013a0:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <inSystem+0x318>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <inSystem+0x318>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <inSystem+0x318>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <inSystem+0x318>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013ba:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <inSystem+0x318>)
 80013bc:	2200      	movs	r2, #0
 80013be:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <inSystem+0x318>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <inSystem+0x31c>)
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <inSystem+0x318>)
 80013ca:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <inSystem+0x31c>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80013d2:	4826      	ldr	r0, [pc, #152]	; (800146c <inSystem+0x31c>)
 80013d4:	f004 fc52 	bl	8005c7c <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <inSystem+0x320>)
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <inSystem+0x304>)
 80013dc:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <inSystem+0x320>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <inSystem+0x320>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <inSystem+0x320>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <inSystem+0x320>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <inSystem+0x320>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <inSystem+0x320>)
 80013fe:	2202      	movs	r2, #2
 8001400:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <inSystem+0x324>)
 8001404:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <inSystem+0x320>)
 8001406:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <inSystem+0x324>)
 800140a:	2202      	movs	r2, #2
 800140c:	711a      	strb	r2, [r3, #4]
 800140e:	e033      	b.n	8001478 <inSystem+0x328>
 8001410:	20000204 	.word	0x20000204
 8001414:	40020000 	.word	0x40020000
 8001418:	200002b0 	.word	0x200002b0
 800141c:	40000400 	.word	0x40000400
 8001420:	20001018 	.word	0x20001018
 8001424:	20001030 	.word	0x20001030
 8001428:	20001050 	.word	0x20001050
 800142c:	200010b8 	.word	0x200010b8
 8001430:	200003e0 	.word	0x200003e0
 8001434:	20000210 	.word	0x20000210
 8001438:	200002f0 	.word	0x200002f0
 800143c:	40000c00 	.word	0x40000c00
 8001440:	41e00000 	.word	0x41e00000
 8001444:	40408000 	.word	0x40408000
 8001448:	2000021c 	.word	0x2000021c
 800144c:	20000310 	.word	0x20000310
 8001450:	2000024c 	.word	0x2000024c
 8001454:	40020800 	.word	0x40020800
 8001458:	20000240 	.word	0x20000240
 800145c:	20000264 	.word	0x20000264
 8001460:	20000258 	.word	0x20000258
 8001464:	40020c00 	.word	0x40020c00
 8001468:	20000270 	.word	0x20000270
 800146c:	200002a0 	.word	0x200002a0
 8001470:	2000027c 	.word	0x2000027c
 8001474:	200002a8 	.word	0x200002a8
	extInt_Config(&handlerExtiConEnc_2);
 8001478:	4859      	ldr	r0, [pc, #356]	; (80015e0 <inSystem+0x490>)
 800147a:	f004 fbff 	bl	8005c7c <extInt_Config>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <inSystem+0x494>)
 8001480:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <inSystem+0x498>)
 8001482:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <inSystem+0x494>)
 8001486:	2207      	movs	r2, #7
 8001488:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <inSystem+0x494>)
 800148c:	2202      	movs	r2, #2
 800148e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001490:	4b54      	ldr	r3, [pc, #336]	; (80015e4 <inSystem+0x494>)
 8001492:	2200      	movs	r2, #0
 8001494:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001496:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <inSystem+0x494>)
 8001498:	2209      	movs	r2, #9
 800149a:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <inSystem+0x494>)
 800149e:	2200      	movs	r2, #0
 80014a0:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <inSystem+0x494>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80014a8:	484e      	ldr	r0, [pc, #312]	; (80015e4 <inSystem+0x494>)
 80014aa:	f005 fc15 	bl	8006cd8 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <inSystem+0x49c>)
 80014b0:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <inSystem+0x498>)
 80014b2:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <inSystem+0x49c>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <inSystem+0x49c>)
 80014bc:	2202      	movs	r2, #2
 80014be:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <inSystem+0x49c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <inSystem+0x49c>)
 80014c8:	220a      	movs	r2, #10
 80014ca:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014cc:	4b47      	ldr	r3, [pc, #284]	; (80015ec <inSystem+0x49c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <inSystem+0x49c>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80014d8:	4844      	ldr	r0, [pc, #272]	; (80015ec <inSystem+0x49c>)
 80014da:	f005 fbfd 	bl	8006cd8 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <inSystem+0x4a0>)
 80014e0:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <inSystem+0x4a4>)
 80014e2:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <inSystem+0x4a0>)
 80014e6:	4a44      	ldr	r2, [pc, #272]	; (80015f8 <inSystem+0x4a8>)
 80014e8:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <inSystem+0x4a0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <inSystem+0x4a0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <inSystem+0x4a0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <inSystem+0x4a0>)
 80014fe:	2202      	movs	r2, #2
 8001500:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <inSystem+0x4a0>)
 8001504:	2200      	movs	r2, #0
 8001506:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <inSystem+0x4a0>)
 800150a:	2200      	movs	r2, #0
 800150c:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <inSystem+0x4a0>)
 8001510:	2200      	movs	r2, #0
 8001512:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8001514:	4836      	ldr	r0, [pc, #216]	; (80015f0 <inSystem+0x4a0>)
 8001516:	f007 fa63 	bl	80089e0 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <inSystem+0x4ac>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <inSystem+0x4ac>)
 8001524:	2201      	movs	r2, #1
 8001526:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <inSystem+0x4ac>)
 800152a:	2200      	movs	r2, #0
 800152c:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <inSystem+0x4ac>)
 8001530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001534:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <inSystem+0x4ac>)
 8001538:	2210      	movs	r2, #16
 800153a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <inSystem+0x4ac>)
 800153e:	f003 ff5f 	bl	8005400 <BasicTimer_Config>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001542:	482e      	ldr	r0, [pc, #184]	; (80015fc <inSystem+0x4ac>)
 8001544:	f004 fb58 	bl	8005bf8 <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <inSystem+0x4b0>)
 800154a:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <inSystem+0x4b4>)
 800154c:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <inSystem+0x4b0>)
 8001550:	2204      	movs	r2, #4
 8001552:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <inSystem+0x4b0>)
 8001556:	2202      	movs	r2, #2
 8001558:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <inSystem+0x4b0>)
 800155c:	2208      	movs	r2, #8
 800155e:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <inSystem+0x4b0>)
 8001562:	2201      	movs	r2, #1
 8001564:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <inSystem+0x4b0>)
 8001568:	2200      	movs	r2, #0
 800156a:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <inSystem+0x4b0>)
 800156e:	2202      	movs	r2, #2
 8001570:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <inSystem+0x4b8>)
 8001574:	4a23      	ldr	r2, [pc, #140]	; (8001604 <inSystem+0x4b4>)
 8001576:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <inSystem+0x4b8>)
 800157a:	2204      	movs	r2, #4
 800157c:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <inSystem+0x4b8>)
 8001580:	2202      	movs	r2, #2
 8001582:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <inSystem+0x4b8>)
 8001586:	2209      	movs	r2, #9
 8001588:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <inSystem+0x4b8>)
 800158c:	2201      	movs	r2, #1
 800158e:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <inSystem+0x4b8>)
 8001592:	2200      	movs	r2, #0
 8001594:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <inSystem+0x4b8>)
 8001598:	2202      	movs	r2, #2
 800159a:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <inSystem+0x4bc>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <inSystem+0x4c0>)
 80015a0:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <inSystem+0x4bc>)
 80015a4:	2232      	movs	r2, #50	; 0x32
 80015a6:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <inSystem+0x4bc>)
 80015aa:	2268      	movs	r2, #104	; 0x68
 80015ac:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <inSystem+0x4bc>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <inSystem+0x4c4>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <inSystem+0x4b0>)
 80015b8:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <inSystem+0x4c4>)
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <inSystem+0x4b8>)
 80015be:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <inSystem+0x4c4>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <inSystem+0x4bc>)
 80015c4:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <inSystem+0x4c4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <inSystem+0x4c4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <inSystem+0x4c4>)
 80015d4:	f005 fd38 	bl	8007048 <configMPUAccel>

}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a8 	.word	0x200002a8
 80015e4:	20000234 	.word	0x20000234
 80015e8:	40020000 	.word	0x40020000
 80015ec:	20000228 	.word	0x20000228
 80015f0:	20000330 	.word	0x20000330
 80015f4:	40011000 	.word	0x40011000
 80015f8:	05f5e100 	.word	0x05f5e100
 80015fc:	200002c4 	.word	0x200002c4
 8001600:	20000288 	.word	0x20000288
 8001604:	40020400 	.word	0x40020400
 8001608:	20000294 	.word	0x20000294
 800160c:	200003c4 	.word	0x200003c4
 8001610:	40005400 	.word	0x40005400
 8001614:	200003d0 	.word	0x200003d0

08001618 <parseCommands>:


void parseCommands(char *stringVector){
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af04      	add	r7, sp, #16
 800161e:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <parseCommands+0x228>)
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	4b87      	ldr	r3, [pc, #540]	; (8001844 <parseCommands+0x22c>)
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	4b87      	ldr	r3, [pc, #540]	; (8001848 <parseCommands+0x230>)
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4b87      	ldr	r3, [pc, #540]	; (800184c <parseCommands+0x234>)
 800162e:	4a88      	ldr	r2, [pc, #544]	; (8001850 <parseCommands+0x238>)
 8001630:	4988      	ldr	r1, [pc, #544]	; (8001854 <parseCommands+0x23c>)
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f008 fe8e 	bl	800a354 <siscanf>


	if (strcmp(cmd, "help") == 0){
 8001638:	4987      	ldr	r1, [pc, #540]	; (8001858 <parseCommands+0x240>)
 800163a:	4885      	ldr	r0, [pc, #532]	; (8001850 <parseCommands+0x238>)
 800163c:	f7fe fdd0 	bl	80001e0 <strcmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d128      	bne.n	8001698 <parseCommands+0x80>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8001646:	4985      	ldr	r1, [pc, #532]	; (800185c <parseCommands+0x244>)
 8001648:	4885      	ldr	r0, [pc, #532]	; (8001860 <parseCommands+0x248>)
 800164a:	f007 fdb7 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 800164e:	4985      	ldr	r1, [pc, #532]	; (8001864 <parseCommands+0x24c>)
 8001650:	4883      	ldr	r0, [pc, #524]	; (8001860 <parseCommands+0x248>)
 8001652:	f007 fdb3 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 8001656:	4984      	ldr	r1, [pc, #528]	; (8001868 <parseCommands+0x250>)
 8001658:	4881      	ldr	r0, [pc, #516]	; (8001860 <parseCommands+0x248>)
 800165a:	f007 fdaf 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 800165e:	4983      	ldr	r1, [pc, #524]	; (800186c <parseCommands+0x254>)
 8001660:	487f      	ldr	r0, [pc, #508]	; (8001860 <parseCommands+0x248>)
 8001662:	f007 fdab 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 8001666:	4982      	ldr	r1, [pc, #520]	; (8001870 <parseCommands+0x258>)
 8001668:	487d      	ldr	r0, [pc, #500]	; (8001860 <parseCommands+0x248>)
 800166a:	f007 fda7 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 800166e:	4981      	ldr	r1, [pc, #516]	; (8001874 <parseCommands+0x25c>)
 8001670:	487b      	ldr	r0, [pc, #492]	; (8001860 <parseCommands+0x248>)
 8001672:	f007 fda3 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "6)  square #dir_roll #side_distance  \n");
 8001676:	4980      	ldr	r1, [pc, #512]	; (8001878 <parseCommands+0x260>)
 8001678:	4879      	ldr	r0, [pc, #484]	; (8001860 <parseCommands+0x248>)
 800167a:	f007 fd9f 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "7)  Astar  #Parallel-distance #Diagonal-distance \n");
 800167e:	497f      	ldr	r1, [pc, #508]	; (800187c <parseCommands+0x264>)
 8001680:	4877      	ldr	r0, [pc, #476]	; (8001860 <parseCommands+0x248>)
 8001682:	f007 fd9b 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "8)  reinit  \n");
 8001686:	497e      	ldr	r1, [pc, #504]	; (8001880 <parseCommands+0x268>)
 8001688:	4875      	ldr	r0, [pc, #468]	; (8001860 <parseCommands+0x248>)
 800168a:	f007 fd97 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, " \n");
 800168e:	497d      	ldr	r1, [pc, #500]	; (8001884 <parseCommands+0x26c>)
 8001690:	4873      	ldr	r0, [pc, #460]	; (8001860 <parseCommands+0x248>)
 8001692:	f007 fd93 	bl	80091bc <writeMsg>
	else {
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
	}


}
 8001696:	e186      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "go") == 0){
 8001698:	497b      	ldr	r1, [pc, #492]	; (8001888 <parseCommands+0x270>)
 800169a:	486d      	ldr	r0, [pc, #436]	; (8001850 <parseCommands+0x238>)
 800169c:	f7fe fda0 	bl	80001e0 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <parseCommands+0xc0>
		Mode_dir.Mode = Mode = sLine;
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <parseCommands+0x274>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <parseCommands+0x274>)
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	4b77      	ldr	r3, [pc, #476]	; (8001890 <parseCommands+0x278>)
 80016b2:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <parseCommands+0x234>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b75      	ldr	r3, [pc, #468]	; (8001890 <parseCommands+0x278>)
 80016bc:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <parseCommands+0x278>)
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	4874      	ldr	r0, [pc, #464]	; (8001894 <parseCommands+0x27c>)
 80016c4:	f000 ffe8 	bl	8002698 <On_motor_Straigh_Roll>
		flag_Go_Straigh = SET;
 80016c8:	4b73      	ldr	r3, [pc, #460]	; (8001898 <parseCommands+0x280>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 80016ce:	4973      	ldr	r1, [pc, #460]	; (800189c <parseCommands+0x284>)
 80016d0:	4863      	ldr	r0, [pc, #396]	; (8001860 <parseCommands+0x248>)
 80016d2:	f007 fd73 	bl	80091bc <writeMsg>
}
 80016d6:	e166      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "goto") == 0){
 80016d8:	4971      	ldr	r1, [pc, #452]	; (80018a0 <parseCommands+0x288>)
 80016da:	485d      	ldr	r0, [pc, #372]	; (8001850 <parseCommands+0x238>)
 80016dc:	f7fe fd80 	bl	80001e0 <strcmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11d      	bne.n	8001722 <parseCommands+0x10a>
		Mode_dir.Mode = Mode = sLine ;
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <parseCommands+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	4b67      	ldr	r3, [pc, #412]	; (800188c <parseCommands+0x274>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b67      	ldr	r3, [pc, #412]	; (8001890 <parseCommands+0x278>)
 80016f2:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <parseCommands+0x234>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b65      	ldr	r3, [pc, #404]	; (8001890 <parseCommands+0x278>)
 80016fc:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80016fe:	4b64      	ldr	r3, [pc, #400]	; (8001890 <parseCommands+0x278>)
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	4864      	ldr	r0, [pc, #400]	; (8001894 <parseCommands+0x27c>)
 8001704:	f000 ffc8 	bl	8002698 <On_motor_Straigh_Roll>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <parseCommands+0x230>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <parseCommands+0x28c>)
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <parseCommands+0x290>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 8001718:	4964      	ldr	r1, [pc, #400]	; (80018ac <parseCommands+0x294>)
 800171a:	4851      	ldr	r0, [pc, #324]	; (8001860 <parseCommands+0x248>)
 800171c:	f007 fd4e 	bl	80091bc <writeMsg>
}
 8001720:	e141      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "roll") == 0){
 8001722:	4963      	ldr	r1, [pc, #396]	; (80018b0 <parseCommands+0x298>)
 8001724:	484a      	ldr	r0, [pc, #296]	; (8001850 <parseCommands+0x238>)
 8001726:	f7fe fd5b 	bl	80001e0 <strcmp>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d118      	bne.n	8001762 <parseCommands+0x14a>
		Mode_dir.Mode = Mode = sRoll;
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <parseCommands+0x274>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	4b55      	ldr	r3, [pc, #340]	; (800188c <parseCommands+0x274>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b55      	ldr	r3, [pc, #340]	; (8001890 <parseCommands+0x278>)
 800173c:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <parseCommands+0x234>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b52      	ldr	r3, [pc, #328]	; (8001890 <parseCommands+0x278>)
 8001746:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <parseCommands+0x278>)
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	4851      	ldr	r0, [pc, #324]	; (8001894 <parseCommands+0x27c>)
 800174e:	f000 ffa3 	bl	8002698 <On_motor_Straigh_Roll>
		flag_Roll = SET;
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <parseCommands+0x29c>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 8001758:	4957      	ldr	r1, [pc, #348]	; (80018b8 <parseCommands+0x2a0>)
 800175a:	4841      	ldr	r0, [pc, #260]	; (8001860 <parseCommands+0x248>)
 800175c:	f007 fd2e 	bl	80091bc <writeMsg>
}
 8001760:	e121      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "rollto") == 0){
 8001762:	4956      	ldr	r1, [pc, #344]	; (80018bc <parseCommands+0x2a4>)
 8001764:	483a      	ldr	r0, [pc, #232]	; (8001850 <parseCommands+0x238>)
 8001766:	f7fe fd3b 	bl	80001e0 <strcmp>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11d      	bne.n	80017ac <parseCommands+0x194>
		Mode_dir.Mode = Mode = sRoll;
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <parseCommands+0x274>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <parseCommands+0x274>)
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	4b45      	ldr	r3, [pc, #276]	; (8001890 <parseCommands+0x278>)
 800177c:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <parseCommands+0x234>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <parseCommands+0x278>)
 8001786:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <parseCommands+0x278>)
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	4841      	ldr	r0, [pc, #260]	; (8001894 <parseCommands+0x27c>)
 800178e:	f000 ff83 	bl	8002698 <On_motor_Straigh_Roll>
		parameters_Path_Robot.angle = secondParameter;
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <parseCommands+0x230>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <parseCommands+0x28c>)
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
		flag_RollTo = SET;
 800179c:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <parseCommands+0x2a8>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 80017a2:	4948      	ldr	r1, [pc, #288]	; (80018c4 <parseCommands+0x2ac>)
 80017a4:	482e      	ldr	r0, [pc, #184]	; (8001860 <parseCommands+0x248>)
 80017a6:	f007 fd09 	bl	80091bc <writeMsg>
}
 80017aa:	e0fc      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "reinit") == 0){
 80017ac:	4946      	ldr	r1, [pc, #280]	; (80018c8 <parseCommands+0x2b0>)
 80017ae:	4828      	ldr	r0, [pc, #160]	; (8001850 <parseCommands+0x238>)
 80017b0:	f7fe fd16 	bl	80001e0 <strcmp>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10e      	bne.n	80017d8 <parseCommands+0x1c0>
		int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace, Mode_dir);
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <parseCommands+0x278>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f8ad 3000 	strh.w	r3, [sp]
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <parseCommands+0x2b4>)
 80017c4:	4a37      	ldr	r2, [pc, #220]	; (80018a4 <parseCommands+0x28c>)
 80017c6:	4942      	ldr	r1, [pc, #264]	; (80018d0 <parseCommands+0x2b8>)
 80017c8:	4832      	ldr	r0, [pc, #200]	; (8001894 <parseCommands+0x27c>)
 80017ca:	f001 f94b 	bl	8002a64 <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 80017ce:	4941      	ldr	r1, [pc, #260]	; (80018d4 <parseCommands+0x2bc>)
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <parseCommands+0x248>)
 80017d2:	f007 fcf3 	bl	80091bc <writeMsg>
}
 80017d6:	e0e6      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "change") == 0){
 80017d8:	493f      	ldr	r1, [pc, #252]	; (80018d8 <parseCommands+0x2c0>)
 80017da:	481d      	ldr	r0, [pc, #116]	; (8001850 <parseCommands+0x238>)
 80017dc:	f7fe fd00 	bl	80001e0 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d121      	bne.n	800182a <parseCommands+0x212>
		if (Mode == sLine ){
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <parseCommands+0x274>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <parseCommands+0x1ec>
			Mode_dir.direction_s_r = firstParameter;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <parseCommands+0x234>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <parseCommands+0x278>)
 80017f6:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <parseCommands+0x278>)
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	4825      	ldr	r0, [pc, #148]	; (8001894 <parseCommands+0x27c>)
 80017fe:	f001 f836 	bl	800286e <change_dir_straigh_Roll>
 8001802:	e00d      	b.n	8001820 <parseCommands+0x208>
		}else if (Mode == sRoll ){
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <parseCommands+0x274>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d109      	bne.n	8001820 <parseCommands+0x208>
			Mode_dir.direction_s_r = firstParameter;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <parseCommands+0x234>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <parseCommands+0x278>)
 8001814:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <parseCommands+0x278>)
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	481e      	ldr	r0, [pc, #120]	; (8001894 <parseCommands+0x27c>)
 800181c:	f001 f827 	bl	800286e <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001820:	492c      	ldr	r1, [pc, #176]	; (80018d4 <parseCommands+0x2bc>)
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <parseCommands+0x248>)
 8001824:	f007 fcca 	bl	80091bc <writeMsg>
}
 8001828:	e0bd      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "square") == 0){
 800182a:	492c      	ldr	r1, [pc, #176]	; (80018dc <parseCommands+0x2c4>)
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <parseCommands+0x238>)
 800182e:	f7fe fcd7 	bl	80001e0 <strcmp>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d155      	bne.n	80018e4 <parseCommands+0x2cc>
		flag_square = SET; // Levantamos la bandera para Square
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <parseCommands+0x2c8>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
}
 800183e:	e0b2      	b.n	80019a6 <parseCommands+0x38e>
 8001840:	20000544 	.word	0x20000544
 8001844:	20000500 	.word	0x20000500
 8001848:	200004fc 	.word	0x200004fc
 800184c:	200004f8 	.word	0x200004f8
 8001850:	200004d8 	.word	0x200004d8
 8001854:	0800f478 	.word	0x0800f478
 8001858:	0800f488 	.word	0x0800f488
 800185c:	0800f490 	.word	0x0800f490
 8001860:	20000330 	.word	0x20000330
 8001864:	0800f4a4 	.word	0x0800f4a4
 8001868:	0800f4cc 	.word	0x0800f4cc
 800186c:	0800f4e8 	.word	0x0800f4e8
 8001870:	0800f510 	.word	0x0800f510
 8001874:	0800f530 	.word	0x0800f530
 8001878:	0800f564 	.word	0x0800f564
 800187c:	0800f58c 	.word	0x0800f58c
 8001880:	0800f5c0 	.word	0x0800f5c0
 8001884:	0800f5d0 	.word	0x0800f5d0
 8001888:	0800f5d4 	.word	0x0800f5d4
 800188c:	2000101a 	.word	0x2000101a
 8001890:	20001018 	.word	0x20001018
 8001894:	200003e0 	.word	0x200003e0
 8001898:	2000101d 	.word	0x2000101d
 800189c:	0800f5d8 	.word	0x0800f5d8
 80018a0:	0800f5f8 	.word	0x0800f5f8
 80018a4:	20001050 	.word	0x20001050
 80018a8:	2000101e 	.word	0x2000101e
 80018ac:	0800f600 	.word	0x0800f600
 80018b0:	0800f624 	.word	0x0800f624
 80018b4:	20001020 	.word	0x20001020
 80018b8:	0800f62c 	.word	0x0800f62c
 80018bc:	0800f650 	.word	0x0800f650
 80018c0:	20001021 	.word	0x20001021
 80018c4:	0800f658 	.word	0x0800f658
 80018c8:	0800f67c 	.word	0x0800f67c
 80018cc:	20001030 	.word	0x20001030
 80018d0:	200010b8 	.word	0x200010b8
 80018d4:	0800f684 	.word	0x0800f684
 80018d8:	0800f6a8 	.word	0x0800f6a8
 80018dc:	0800f6b0 	.word	0x0800f6b0
 80018e0:	20001025 	.word	0x20001025
	}else if (strcmp(cmd, "Astar") == 0){
 80018e4:	4932      	ldr	r1, [pc, #200]	; (80019b0 <parseCommands+0x398>)
 80018e6:	4833      	ldr	r0, [pc, #204]	; (80019b4 <parseCommands+0x39c>)
 80018e8:	f7fe fc7a 	bl	80001e0 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d130      	bne.n	8001954 <parseCommands+0x33c>
		handlerAstarParameters.parallelDistance  = firstParameter;
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <parseCommands+0x3a0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <parseCommands+0x3a4>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <parseCommands+0x3a8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <parseCommands+0x3a4>)
 8001912:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <parseCommands+0x3ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	482a      	ldr	r0, [pc, #168]	; (80019c8 <parseCommands+0x3b0>)
 800191e:	f007 fc4d 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8001922:	492a      	ldr	r1, [pc, #168]	; (80019cc <parseCommands+0x3b4>)
 8001924:	4828      	ldr	r0, [pc, #160]	; (80019c8 <parseCommands+0x3b0>)
 8001926:	f007 fc49 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 800192a:	4929      	ldr	r1, [pc, #164]	; (80019d0 <parseCommands+0x3b8>)
 800192c:	4826      	ldr	r0, [pc, #152]	; (80019c8 <parseCommands+0x3b0>)
 800192e:	f007 fc45 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8001932:	4928      	ldr	r1, [pc, #160]	; (80019d4 <parseCommands+0x3bc>)
 8001934:	4824      	ldr	r0, [pc, #144]	; (80019c8 <parseCommands+0x3b0>)
 8001936:	f007 fc41 	bl	80091bc <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <parseCommands+0x3c0>)
 800193c:	4822      	ldr	r0, [pc, #136]	; (80019c8 <parseCommands+0x3b0>)
 800193e:	f007 fc3d 	bl	80091bc <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <parseCommands+0x3c4>)
 8001944:	4926      	ldr	r1, [pc, #152]	; (80019e0 <parseCommands+0x3c8>)
 8001946:	4820      	ldr	r0, [pc, #128]	; (80019c8 <parseCommands+0x3b0>)
 8001948:	f003 fcb6 	bl	80052b8 <initSerialComunication>
		flagAstar = SET;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <parseCommands+0x3cc>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
}
 8001952:	e028      	b.n	80019a6 <parseCommands+0x38e>
	else if (strcmp(cmd, "stop") == 0){
 8001954:	4924      	ldr	r1, [pc, #144]	; (80019e8 <parseCommands+0x3d0>)
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <parseCommands+0x39c>)
 8001958:	f7fe fc42 	bl	80001e0 <strcmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d112      	bne.n	8001988 <parseCommands+0x370>
		stop(handler_Motor_Array); // Apagamos los motores
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <parseCommands+0x3d4>)
 8001964:	f001 f85a 	bl	8002a1c <stop>
		flag_Go_Straigh   = RESET;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <parseCommands+0x3d8>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <parseCommands+0x3dc>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <parseCommands+0x3e0>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <parseCommands+0x3e4>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
		Mode_dir.Mode     = sNone;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <parseCommands+0x3e8>)
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	e00e      	b.n	80019a6 <parseCommands+0x38e>
	}else if (strcmp(cmd, "stoptimer") == 0){
 8001988:	491e      	ldr	r1, [pc, #120]	; (8001a04 <parseCommands+0x3ec>)
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <parseCommands+0x39c>)
 800198c:	f7fe fc28 	bl	80001e0 <strcmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <parseCommands+0x386>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Paramos de medir
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <parseCommands+0x3f0>)
 8001998:	f004 f940 	bl	8005c1c <stopTimer>
}
 800199c:	e003      	b.n	80019a6 <parseCommands+0x38e>
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
 800199e:	491b      	ldr	r1, [pc, #108]	; (8001a0c <parseCommands+0x3f4>)
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <parseCommands+0x3b0>)
 80019a2:	f007 fc0b 	bl	80091bc <writeMsg>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	0800f6b8 	.word	0x0800f6b8
 80019b4:	200004d8 	.word	0x200004d8
 80019b8:	200004f8 	.word	0x200004f8
 80019bc:	20000440 	.word	0x20000440
 80019c0:	200004fc 	.word	0x200004fc
 80019c4:	20000004 	.word	0x20000004
 80019c8:	20000330 	.word	0x20000330
 80019cc:	0800f6c0 	.word	0x0800f6c0
 80019d0:	0800f6f8 	.word	0x0800f6f8
 80019d4:	0800f730 	.word	0x0800f730
 80019d8:	0800f768 	.word	0x0800f768
 80019dc:	20000234 	.word	0x20000234
 80019e0:	20000228 	.word	0x20000228
 80019e4:	20001016 	.word	0x20001016
 80019e8:	0800f450 	.word	0x0800f450
 80019ec:	200003e0 	.word	0x200003e0
 80019f0:	2000101d 	.word	0x2000101d
 80019f4:	2000101e 	.word	0x2000101e
 80019f8:	20001020 	.word	0x20001020
 80019fc:	20001021 	.word	0x20001021
 8001a00:	20001018 	.word	0x20001018
 8001a04:	0800f7a0 	.word	0x0800f7a0
 8001a08:	200002c4 	.word	0x200002c4
 8001a0c:	0800f7ac 	.word	0x0800f7ac

08001a10 <usart1Rx_Callback>:


// Interrupcion usart 1
void usart1Rx_Callback(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001a14:	f007 fbfa 	bl	800920c <getRxData>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <usart1Rx_Callback+0x14>)
 8001a1e:	701a      	strb	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200004d6 	.word	0x200004d6

08001a28 <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <BasicTimer3_Callback+0x10>)
 8001a2e:	f005 faf4 	bl	800701a <GPIOxTooglePin>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000204 	.word	0x20000204

08001a3c <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <BasicTimer2_Callback+0x44>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <BasicTimer2_Callback+0x48>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <BasicTimer2_Callback+0x4c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d803      	bhi.n	8001a5c <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <BasicTimer2_Callback+0x50>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e005      	b.n	8001a68 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <BasicTimer2_Callback+0x4c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <BasicTimer2_Callback+0x4c>)
 8001a66:	801a      	strh	r2, [r3, #0]

	if (Mode_dir.Mode == sNone){
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <BasicTimer2_Callback+0x54>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d102      	bne.n	8001a76 <BasicTimer2_Callback+0x3a>
		flag_NOP = SET;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <BasicTimer2_Callback+0x58>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
	}

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	2000101b 	.word	0x2000101b
 8001a84:	20000008 	.word	0x20000008
 8001a88:	2000102a 	.word	0x2000102a
 8001a8c:	2000101c 	.word	0x2000101c
 8001a90:	20001018 	.word	0x20001018
 8001a94:	20001026 	.word	0x20001026

08001a98 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <callback_extInt1+0x24>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d005      	beq.n	8001ab0 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <callback_extInt1+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	791a      	ldrb	r2, [r3, #4]
 8001aaa:	3201      	adds	r2, #1
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	711a      	strb	r2, [r3, #4]
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20001018 	.word	0x20001018
 8001ac0:	200003e0 	.word	0x200003e0

08001ac4 <callback_extInt3>:

void callback_extInt3(void){
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <callback_extInt3+0x24>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d005      	beq.n	8001adc <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <callback_extInt3+0x28>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	791a      	ldrb	r2, [r3, #4]
 8001ad6:	3201      	adds	r2, #1
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	711a      	strb	r2, [r3, #4]
	}
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20001018 	.word	0x20001018
 8001aec:	200003e0 	.word	0x200003e0

08001af0 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001afc:	23c8      	movs	r3, #200	; 0xc8
 8001afe:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d061      	beq.n	8001be0 <calibracionGyros+0xf0>
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	dc70      	bgt.n	8001c02 <calibracionGyros+0x112>
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <calibracionGyros+0x60>
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d037      	beq.n	8001b98 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001b28:	e06b      	b.n	8001c02 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f005 fc18 	bl	8007360 <readGyro_X>
 8001b30:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001b34:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001b44:	7efb      	ldrb	r3, [r7, #27]
 8001b46:	3301      	adds	r3, #1
 8001b48:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f003 fdde 	bl	800570c <delay_ms>
			while (contador < numMedidas){
 8001b50:	7efb      	ldrb	r3, [r7, #27]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	8a7a      	ldrh	r2, [r7, #18]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d8e7      	bhi.n	8001b2a <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001b5a:	8a7b      	ldrh	r3, [r7, #18]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001b70:	e048      	b.n	8001c04 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fc7c 	bl	8007470 <readGyro_Y>
 8001b78:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001b7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001b8c:	7efb      	ldrb	r3, [r7, #27]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001b92:	2001      	movs	r0, #1
 8001b94:	f003 fdba 	bl	800570c <delay_ms>
			while (contador < numMedidas){
 8001b98:	7efb      	ldrb	r3, [r7, #27]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	8a7a      	ldrh	r2, [r7, #18]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d8e7      	bhi.n	8001b72 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001ba2:	8a7b      	ldrh	r3, [r7, #18]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001bb8:	e024      	b.n	8001c04 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f005 fce0 	bl	8007580 <readGyro_Z>
 8001bc0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001bc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001bd4:	7efb      	ldrb	r3, [r7, #27]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f003 fd96 	bl	800570c <delay_ms>
			while (contador < numMedidas){
 8001be0:	7efb      	ldrb	r3, [r7, #27]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8a7a      	ldrh	r2, [r7, #18]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8e7      	bhi.n	8001bba <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001bea:	8a7b      	ldrh	r3, [r7, #18]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c00:	e000      	b.n	8001c04 <calibracionGyros+0x114>
			break;
 8001c02:	bf00      	nop
		}
	}


	return promedio;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	ee07 3a90 	vmov	s15, r3
}
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6178      	str	r0, [r7, #20]
 8001c1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c20:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c24:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f005 fcaa 	bl	8007580 <readGyro_Z>
 8001c2c:	ee10 3a10 	vmov	r3, s0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fca1 	bl	8000578 <__aeabi_f2d>
 8001c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c3a:	f7fe fb3d 	bl	80002b8 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001c4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c52:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c5a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001cc0 <getAngle+0xac>
 8001c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001c6e:	69b8      	ldr	r0, [r7, #24]
 8001c70:	f7fe fc82 	bl	8000578 <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <getAngle+0xb0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc78 	bl	8000578 <__aeabi_f2d>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fb15 	bl	80002bc <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe ffbd 	bl	8000c18 <__aeabi_d2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <getAngle+0xb0>)
 8001ca2:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <getAngle+0xb4>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <getAngle+0xb8>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <getAngle+0xb8>)
 8001cb4:	801a      	strh	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	447a0000 	.word	0x447a0000
 8001cc4:	20001138 	.word	0x20001138
 8001cc8:	200002c4 	.word	0x200002c4
 8001ccc:	20001028 	.word	0x20001028

08001cd0 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	ed2d 8b02 	vpush	{d8}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001ce0:	793b      	ldrb	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 81d4 	bne.w	8002090 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001ce8:	4bab      	ldr	r3, [pc, #684]	; (8001f98 <get_measuremets_parameters+0x2c8>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4bab      	ldr	r3, [pc, #684]	; (8001f9c <get_measuremets_parameters+0x2cc>)
 8001cf0:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001cf2:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <get_measuremets_parameters+0x2d0>)
 8001cf4:	edd3 6a00 	vldr	s13, [r3]
 8001cf8:	4baa      	ldr	r3, [pc, #680]	; (8001fa4 <get_measuremets_parameters+0x2d4>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d08:	4ba7      	ldr	r3, [pc, #668]	; (8001fa8 <get_measuremets_parameters+0x2d8>)
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001d0e:	4ba6      	ldr	r3, [pc, #664]	; (8001fa8 <get_measuremets_parameters+0x2d8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc30 	bl	8000578 <__aeabi_f2d>
 8001d18:	a39b      	add	r3, pc, #620	; (adr r3, 8001f88 <get_measuremets_parameters+0x2b8>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc83 	bl	8000628 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b9f      	ldr	r3, [pc, #636]	; (8001fac <get_measuremets_parameters+0x2dc>)
 8001d30:	f7fe fda4 	bl	800087c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001d3e:	4b98      	ldr	r3, [pc, #608]	; (8001fa0 <get_measuremets_parameters+0x2d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc18 	bl	8000578 <__aeabi_f2d>
 8001d48:	a38f      	add	r3, pc, #572	; (adr r3, 8001f88 <get_measuremets_parameters+0x2b8>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fc6b 	bl	8000628 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b93      	ldr	r3, [pc, #588]	; (8001fac <get_measuremets_parameters+0x2dc>)
 8001d60:	f7fe fd8c 	bl	800087c <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	ec43 2b17 	vmov	d7, r2, r3
 8001d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d70:	eef0 0a67 	vmov.f32	s1, s15
 8001d74:	f00b f9a8 	bl	800d0c8 <sin>
 8001d78:	eeb0 8a40 	vmov.f32	s16, s0
 8001d7c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <get_measuremets_parameters+0x2d0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbf7 	bl	8000578 <__aeabi_f2d>
 8001d8a:	a37f      	add	r3, pc, #508	; (adr r3, 8001f88 <get_measuremets_parameters+0x2b8>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc4a 	bl	8000628 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <get_measuremets_parameters+0x2dc>)
 8001da2:	f7fe fd6b 	bl	800087c <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b17 	vmov	d7, r2, r3
 8001dae:	eeb0 0a47 	vmov.f32	s0, s14
 8001db2:	eef0 0a67 	vmov.f32	s1, s15
 8001db6:	f00b f8eb 	bl	800cf90 <cos>
 8001dba:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbe:	eef0 7a60 	vmov.f32	s15, s1
 8001dc2:	eeb0 1a47 	vmov.f32	s2, s14
 8001dc6:	eef0 1a67 	vmov.f32	s3, s15
 8001dca:	eeb0 0a48 	vmov.f32	s0, s16
 8001dce:	eef0 0a68 	vmov.f32	s1, s17
 8001dd2:	f00b f9d1 	bl	800d178 <atan2>
 8001dd6:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001dda:	a36d      	add	r3, pc, #436	; (adr r3, 8001f90 <get_measuremets_parameters+0x2c0>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fc22 	bl	8000628 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001df2:	f7fe fa63 	bl	80002bc <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e06:	a360      	add	r3, pc, #384	; (adr r3, 8001f88 <get_measuremets_parameters+0x2b8>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fc0c 	bl	8000628 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b63      	ldr	r3, [pc, #396]	; (8001fac <get_measuremets_parameters+0x2dc>)
 8001e1e:	f7fe fd2d 	bl	800087c <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	ec43 2b17 	vmov	d7, r2, r3
 8001e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2e:	eef0 0a67 	vmov.f32	s1, s15
 8001e32:	f00b f949 	bl	800d0c8 <sin>
 8001e36:	eeb0 8a40 	vmov.f32	s16, s0
 8001e3a:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e44:	a350      	add	r3, pc, #320	; (adr r3, 8001f88 <get_measuremets_parameters+0x2b8>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fbed 	bl	8000628 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <get_measuremets_parameters+0x2dc>)
 8001e5c:	f7fe fd0e 	bl	800087c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	ec43 2b17 	vmov	d7, r2, r3
 8001e68:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6c:	eef0 0a67 	vmov.f32	s1, s15
 8001e70:	f00b f88e 	bl	800cf90 <cos>
 8001e74:	eeb0 7a40 	vmov.f32	s14, s0
 8001e78:	eef0 7a60 	vmov.f32	s15, s1
 8001e7c:	eeb0 1a47 	vmov.f32	s2, s14
 8001e80:	eef0 1a67 	vmov.f32	s3, s15
 8001e84:	eeb0 0a48 	vmov.f32	s0, s16
 8001e88:	eef0 0a68 	vmov.f32	s1, s17
 8001e8c:	f00b f974 	bl	800d178 <atan2>
 8001e90:	eeb0 7a40 	vmov.f32	s14, s0
 8001e94:	eef0 7a60 	vmov.f32	s15, s1
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea8:	eef0 0a67 	vmov.f32	s1, s15
 8001eac:	f00b f90c 	bl	800d0c8 <sin>
 8001eb0:	eeb0 8a40 	vmov.f32	s16, s0
 8001eb4:	eef0 8a60 	vmov.f32	s17, s1
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec2:	eef0 0a67 	vmov.f32	s1, s15
 8001ec6:	f00b f863 	bl	800cf90 <cos>
 8001eca:	eeb0 7a40 	vmov.f32	s14, s0
 8001ece:	eef0 7a60 	vmov.f32	s15, s1
 8001ed2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ed6:	eef0 1a67 	vmov.f32	s3, s15
 8001eda:	eeb0 0a48 	vmov.f32	s0, s16
 8001ede:	eef0 0a68 	vmov.f32	s1, s17
 8001ee2:	f00b f949 	bl	800d178 <atan2>
 8001ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eea:	eef0 7a60 	vmov.f32	s15, s1
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8001ef4:	797b      	ldrb	r3, [r7, #5]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d15e      	bne.n	8001fb8 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <get_measuremets_parameters+0x2e0>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <get_measuremets_parameters+0x2e4>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3304      	adds	r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3a:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <get_measuremets_parameters+0x2cc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5a:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <get_measuremets_parameters+0x2cc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f82:	e065      	b.n	8002050 <get_measuremets_parameters+0x380>
 8001f84:	f3af 8000 	nop.w
 8001f88:	54442d18 	.word	0x54442d18
 8001f8c:	400921fb 	.word	0x400921fb
 8001f90:	1a63c1f8 	.word	0x1a63c1f8
 8001f94:	404ca5dc 	.word	0x404ca5dc
 8001f98:	20001028 	.word	0x20001028
 8001f9c:	2000102c 	.word	0x2000102c
 8001fa0:	20001138 	.word	0x20001138
 8001fa4:	2000102a 	.word	0x2000102a
 8001fa8:	2000113c 	.word	0x2000113c
 8001fac:	40668000 	.word	0x40668000
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	20000010 	.word	0x20000010

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <get_measuremets_parameters+0x3a8>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	eef1 7a67 	vneg.f32	s15, s15
 8001fd8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <get_measuremets_parameters+0x3ac>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	eef1 7a67 	vneg.f32	s15, s15
 8002000:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	edd3 7a03 	vldr	s15, [r3, #12]
 800200c:	eef1 6a67 	vneg.f32	s13, s15
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <get_measuremets_parameters+0x3b0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002024:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3304      	adds	r3, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002032:	eef1 6a67 	vneg.f32	s13, s15
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <get_measuremets_parameters+0x3b0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3304      	adds	r3, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204c:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3304      	adds	r3, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <get_measuremets_parameters+0x3b4>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <get_measuremets_parameters+0x3b8>)
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <get_measuremets_parameters+0x3bc>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
		//Reiniciamos el contador de acción
		counting_action  = 0;

	}

}
 8002076:	e2f0      	b.n	800265a <get_measuremets_parameters+0x98a>
 8002078:	2000000c 	.word	0x2000000c
 800207c:	20000010 	.word	0x20000010
 8002080:	2000102c 	.word	0x2000102c
 8002084:	20001138 	.word	0x20001138
 8002088:	20001028 	.word	0x20001028
 800208c:	2000102a 	.word	0x2000102a
	else if(operation_mode_dir.Mode == sRoll)
 8002090:	793b      	ldrb	r3, [r7, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	f040 81c8 	bne.w	8002428 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002098:	4bad      	ldr	r3, [pc, #692]	; (8002350 <get_measuremets_parameters+0x680>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4bad      	ldr	r3, [pc, #692]	; (8002354 <get_measuremets_parameters+0x684>)
 80020a0:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 80020a2:	4bad      	ldr	r3, [pc, #692]	; (8002358 <get_measuremets_parameters+0x688>)
 80020a4:	edd3 6a00 	vldr	s13, [r3]
 80020a8:	4bac      	ldr	r3, [pc, #688]	; (800235c <get_measuremets_parameters+0x68c>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b8:	4ba9      	ldr	r3, [pc, #676]	; (8002360 <get_measuremets_parameters+0x690>)
 80020ba:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80020be:	4ba8      	ldr	r3, [pc, #672]	; (8002360 <get_measuremets_parameters+0x690>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa58 	bl	8000578 <__aeabi_f2d>
 80020c8:	a39d      	add	r3, pc, #628	; (adr r3, 8002340 <get_measuremets_parameters+0x670>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe faab 	bl	8000628 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4ba1      	ldr	r3, [pc, #644]	; (8002364 <get_measuremets_parameters+0x694>)
 80020e0:	f7fe fbcc 	bl	800087c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80020ee:	4b9a      	ldr	r3, [pc, #616]	; (8002358 <get_measuremets_parameters+0x688>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa40 	bl	8000578 <__aeabi_f2d>
 80020f8:	a391      	add	r3, pc, #580	; (adr r3, 8002340 <get_measuremets_parameters+0x670>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b95      	ldr	r3, [pc, #596]	; (8002364 <get_measuremets_parameters+0x694>)
 8002110:	f7fe fbb4 	bl	800087c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	ec43 2b17 	vmov	d7, r2, r3
 800211c:	eeb0 0a47 	vmov.f32	s0, s14
 8002120:	eef0 0a67 	vmov.f32	s1, s15
 8002124:	f00a ffd0 	bl	800d0c8 <sin>
 8002128:	eeb0 8a40 	vmov.f32	s16, s0
 800212c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002130:	4b89      	ldr	r3, [pc, #548]	; (8002358 <get_measuremets_parameters+0x688>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa1f 	bl	8000578 <__aeabi_f2d>
 800213a:	a381      	add	r3, pc, #516	; (adr r3, 8002340 <get_measuremets_parameters+0x670>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe fa72 	bl	8000628 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <get_measuremets_parameters+0x694>)
 8002152:	f7fe fb93 	bl	800087c <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	ec43 2b17 	vmov	d7, r2, r3
 800215e:	eeb0 0a47 	vmov.f32	s0, s14
 8002162:	eef0 0a67 	vmov.f32	s1, s15
 8002166:	f00a ff13 	bl	800cf90 <cos>
 800216a:	eeb0 7a40 	vmov.f32	s14, s0
 800216e:	eef0 7a60 	vmov.f32	s15, s1
 8002172:	eeb0 1a47 	vmov.f32	s2, s14
 8002176:	eef0 1a67 	vmov.f32	s3, s15
 800217a:	eeb0 0a48 	vmov.f32	s0, s16
 800217e:	eef0 0a68 	vmov.f32	s1, s17
 8002182:	f00a fff9 	bl	800d178 <atan2>
 8002186:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800218a:	a36f      	add	r3, pc, #444	; (adr r3, 8002348 <get_measuremets_parameters+0x678>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fa4a 	bl	8000628 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021a2:	f7fe f88b 	bl	80002bc <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021b6:	a362      	add	r3, pc, #392	; (adr r3, 8002340 <get_measuremets_parameters+0x670>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa34 	bl	8000628 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b65      	ldr	r3, [pc, #404]	; (8002364 <get_measuremets_parameters+0x694>)
 80021ce:	f7fe fb55 	bl	800087c <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	ec43 2b17 	vmov	d7, r2, r3
 80021da:	eeb0 0a47 	vmov.f32	s0, s14
 80021de:	eef0 0a67 	vmov.f32	s1, s15
 80021e2:	f00a ff71 	bl	800d0c8 <sin>
 80021e6:	eeb0 8a40 	vmov.f32	s16, s0
 80021ea:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021f4:	a352      	add	r3, pc, #328	; (adr r3, 8002340 <get_measuremets_parameters+0x670>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fa15 	bl	8000628 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b56      	ldr	r3, [pc, #344]	; (8002364 <get_measuremets_parameters+0x694>)
 800220c:	f7fe fb36 	bl	800087c <__aeabi_ddiv>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	ec43 2b17 	vmov	d7, r2, r3
 8002218:	eeb0 0a47 	vmov.f32	s0, s14
 800221c:	eef0 0a67 	vmov.f32	s1, s15
 8002220:	f00a feb6 	bl	800cf90 <cos>
 8002224:	eeb0 7a40 	vmov.f32	s14, s0
 8002228:	eef0 7a60 	vmov.f32	s15, s1
 800222c:	eeb0 1a47 	vmov.f32	s2, s14
 8002230:	eef0 1a67 	vmov.f32	s3, s15
 8002234:	eeb0 0a48 	vmov.f32	s0, s16
 8002238:	eef0 0a68 	vmov.f32	s1, s17
 800223c:	f00a ff9c 	bl	800d178 <atan2>
 8002240:	eeb0 7a40 	vmov.f32	s14, s0
 8002244:	eef0 7a60 	vmov.f32	s15, s1
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	ed93 7b02 	vldr	d7, [r3, #8]
 8002254:	eeb0 0a47 	vmov.f32	s0, s14
 8002258:	eef0 0a67 	vmov.f32	s1, s15
 800225c:	f00a ff34 	bl	800d0c8 <sin>
 8002260:	eeb0 8a40 	vmov.f32	s16, s0
 8002264:	eef0 8a60 	vmov.f32	s17, s1
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	ed93 7b02 	vldr	d7, [r3, #8]
 800226e:	eeb0 0a47 	vmov.f32	s0, s14
 8002272:	eef0 0a67 	vmov.f32	s1, s15
 8002276:	f00a fe8b 	bl	800cf90 <cos>
 800227a:	eeb0 7a40 	vmov.f32	s14, s0
 800227e:	eef0 7a60 	vmov.f32	s15, s1
 8002282:	eeb0 1a47 	vmov.f32	s2, s14
 8002286:	eef0 1a67 	vmov.f32	s3, s15
 800228a:	eeb0 0a48 	vmov.f32	s0, s16
 800228e:	eef0 0a68 	vmov.f32	s1, s17
 8002292:	f00a ff71 	bl	800d178 <atan2>
 8002296:	eeb0 7a40 	vmov.f32	s14, s0
 800229a:	eef0 7a60 	vmov.f32	s15, s1
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 80022a4:	797b      	ldrb	r3, [r7, #5]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d162      	bne.n	8002370 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <get_measuremets_parameters+0x698>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <get_measuremets_parameters+0x69c>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3304      	adds	r3, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	eef1 7a67 	vneg.f32	s15, s15
 80022ee:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <get_measuremets_parameters+0x684>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230e:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3304      	adds	r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	edd3 7a03 	vldr	s15, [r3, #12]
 800231c:	eef1 6a67 	vneg.f32	s13, s15
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <get_measuremets_parameters+0x684>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002336:	edc3 7a02 	vstr	s15, [r3, #8]
 800233a:	e061      	b.n	8002400 <get_measuremets_parameters+0x730>
 800233c:	f3af 8000 	nop.w
 8002340:	54442d18 	.word	0x54442d18
 8002344:	400921fb 	.word	0x400921fb
 8002348:	1a63c1f8 	.word	0x1a63c1f8
 800234c:	404ca5dc 	.word	0x404ca5dc
 8002350:	20001028 	.word	0x20001028
 8002354:	2000102c 	.word	0x2000102c
 8002358:	20001138 	.word	0x20001138
 800235c:	2000102a 	.word	0x2000102a
 8002360:	2000113c 	.word	0x2000113c
 8002364:	40668000 	.word	0x40668000
 8002368:	2000000c 	.word	0x2000000c
 800236c:	20000010 	.word	0x20000010
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	4bbe      	ldr	r3, [pc, #760]	; (8002678 <get_measuremets_parameters+0x9a8>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	eef1 7a67 	vneg.f32	s15, s15
 8002390:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a4:	4bb5      	ldr	r3, [pc, #724]	; (800267c <get_measuremets_parameters+0x9ac>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b4:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80023c0:	eef1 6a67 	vneg.f32	s13, s15
 80023c4:	4bae      	ldr	r3, [pc, #696]	; (8002680 <get_measuremets_parameters+0x9b0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d8:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3304      	adds	r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80023e6:	4ba6      	ldr	r3, [pc, #664]	; (8002680 <get_measuremets_parameters+0x9b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fc:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 8002412:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <get_measuremets_parameters+0x9b4>)
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 800241a:	4b9b      	ldr	r3, [pc, #620]	; (8002688 <get_measuremets_parameters+0x9b8>)
 800241c:	2200      	movs	r2, #0
 800241e:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002420:	4b9a      	ldr	r3, [pc, #616]	; (800268c <get_measuremets_parameters+0x9bc>)
 8002422:	2200      	movs	r2, #0
 8002424:	801a      	strh	r2, [r3, #0]
}
 8002426:	e118      	b.n	800265a <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 8002428:	4b97      	ldr	r3, [pc, #604]	; (8002688 <get_measuremets_parameters+0x9b8>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b94      	ldr	r3, [pc, #592]	; (8002680 <get_measuremets_parameters+0x9b0>)
 8002430:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <get_measuremets_parameters+0x9b4>)
 8002434:	edd3 6a00 	vldr	s13, [r3]
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <get_measuremets_parameters+0x9bc>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <get_measuremets_parameters+0x9c0>)
 800244a:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800244e:	4b90      	ldr	r3, [pc, #576]	; (8002690 <get_measuremets_parameters+0x9c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f890 	bl	8000578 <__aeabi_f2d>
 8002458:	a383      	add	r3, pc, #524	; (adr r3, 8002668 <get_measuremets_parameters+0x998>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8e3 	bl	8000628 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <get_measuremets_parameters+0x9c4>)
 8002470:	f7fe fa04 	bl	800087c <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800247e:	4b81      	ldr	r3, [pc, #516]	; (8002684 <get_measuremets_parameters+0x9b4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f878 	bl	8000578 <__aeabi_f2d>
 8002488:	a377      	add	r3, pc, #476	; (adr r3, 8002668 <get_measuremets_parameters+0x998>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f8cb 	bl	8000628 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <get_measuremets_parameters+0x9c4>)
 80024a0:	f7fe f9ec 	bl	800087c <__aeabi_ddiv>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	ec43 2b17 	vmov	d7, r2, r3
 80024ac:	eeb0 0a47 	vmov.f32	s0, s14
 80024b0:	eef0 0a67 	vmov.f32	s1, s15
 80024b4:	f00a fe08 	bl	800d0c8 <sin>
 80024b8:	eeb0 8a40 	vmov.f32	s16, s0
 80024bc:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <get_measuremets_parameters+0x9b4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f857 	bl	8000578 <__aeabi_f2d>
 80024ca:	a367      	add	r3, pc, #412	; (adr r3, 8002668 <get_measuremets_parameters+0x998>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f7fe f8aa 	bl	8000628 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <get_measuremets_parameters+0x9c4>)
 80024e2:	f7fe f9cb 	bl	800087c <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ec43 2b17 	vmov	d7, r2, r3
 80024ee:	eeb0 0a47 	vmov.f32	s0, s14
 80024f2:	eef0 0a67 	vmov.f32	s1, s15
 80024f6:	f00a fd4b 	bl	800cf90 <cos>
 80024fa:	eeb0 7a40 	vmov.f32	s14, s0
 80024fe:	eef0 7a60 	vmov.f32	s15, s1
 8002502:	eeb0 1a47 	vmov.f32	s2, s14
 8002506:	eef0 1a67 	vmov.f32	s3, s15
 800250a:	eeb0 0a48 	vmov.f32	s0, s16
 800250e:	eef0 0a68 	vmov.f32	s1, s17
 8002512:	f00a fe31 	bl	800d178 <atan2>
 8002516:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800251a:	a355      	add	r3, pc, #340	; (adr r3, 8002670 <get_measuremets_parameters+0x9a0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe f882 	bl	8000628 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002532:	f7fd fec3 	bl	80002bc <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002546:	a348      	add	r3, pc, #288	; (adr r3, 8002668 <get_measuremets_parameters+0x998>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f86c 	bl	8000628 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <get_measuremets_parameters+0x9c4>)
 800255e:	f7fe f98d 	bl	800087c <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	ec43 2b17 	vmov	d7, r2, r3
 800256a:	eeb0 0a47 	vmov.f32	s0, s14
 800256e:	eef0 0a67 	vmov.f32	s1, s15
 8002572:	f00a fda9 	bl	800d0c8 <sin>
 8002576:	eeb0 8a40 	vmov.f32	s16, s0
 800257a:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002584:	a338      	add	r3, pc, #224	; (adr r3, 8002668 <get_measuremets_parameters+0x998>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f84d 	bl	8000628 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <get_measuremets_parameters+0x9c4>)
 800259c:	f7fe f96e 	bl	800087c <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	ec43 2b17 	vmov	d7, r2, r3
 80025a8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ac:	eef0 0a67 	vmov.f32	s1, s15
 80025b0:	f00a fcee 	bl	800cf90 <cos>
 80025b4:	eeb0 7a40 	vmov.f32	s14, s0
 80025b8:	eef0 7a60 	vmov.f32	s15, s1
 80025bc:	eeb0 1a47 	vmov.f32	s2, s14
 80025c0:	eef0 1a67 	vmov.f32	s3, s15
 80025c4:	eeb0 0a48 	vmov.f32	s0, s16
 80025c8:	eef0 0a68 	vmov.f32	s1, s17
 80025cc:	f00a fdd4 	bl	800d178 <atan2>
 80025d0:	eeb0 7a40 	vmov.f32	s14, s0
 80025d4:	eef0 7a60 	vmov.f32	s15, s1
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80025e4:	eeb0 0a47 	vmov.f32	s0, s14
 80025e8:	eef0 0a67 	vmov.f32	s1, s15
 80025ec:	f00a fd6c 	bl	800d0c8 <sin>
 80025f0:	eeb0 8a40 	vmov.f32	s16, s0
 80025f4:	eef0 8a60 	vmov.f32	s17, s1
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80025fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002602:	eef0 0a67 	vmov.f32	s1, s15
 8002606:	f00a fcc3 	bl	800cf90 <cos>
 800260a:	eeb0 7a40 	vmov.f32	s14, s0
 800260e:	eef0 7a60 	vmov.f32	s15, s1
 8002612:	eeb0 1a47 	vmov.f32	s2, s14
 8002616:	eef0 1a67 	vmov.f32	s3, s15
 800261a:	eeb0 0a48 	vmov.f32	s0, s16
 800261e:	eef0 0a68 	vmov.f32	s1, s17
 8002622:	f00a fda9 	bl	800d178 <atan2>
 8002626:	eeb0 7a40 	vmov.f32	s14, s0
 800262a:	eef0 7a60 	vmov.f32	s15, s1
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <get_measuremets_parameters+0x9b4>)
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <get_measuremets_parameters+0x9b8>)
 8002650:	2200      	movs	r2, #0
 8002652:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <get_measuremets_parameters+0x9bc>)
 8002656:	2200      	movs	r2, #0
 8002658:	801a      	strh	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	ecbd 8b02 	vpop	{d8}
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	54442d18 	.word	0x54442d18
 800266c:	400921fb 	.word	0x400921fb
 8002670:	1a63c1f8 	.word	0x1a63c1f8
 8002674:	404ca5dc 	.word	0x404ca5dc
 8002678:	2000000c 	.word	0x2000000c
 800267c:	20000010 	.word	0x20000010
 8002680:	2000102c 	.word	0x2000102c
 8002684:	20001138 	.word	0x20001138
 8002688:	20001028 	.word	0x20001028
 800268c:	2000102a 	.word	0x2000102a
 8002690:	2000113c 	.word	0x2000113c
 8002694:	40668000 	.word	0x40668000

08002698 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 80026a2:	783b      	ldrb	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d120      	bne.n	80026ea <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f844 	bl	8002738 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 fa14 	bl	8007ae4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fc5c 	bl	8006f82 <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 fa06 	bl	8007ae4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fc4d 	bl	8006f82 <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 80026e8:	e022      	b.n	8002730 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 80026ea:	783b      	ldrb	r3, [r7, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d11f      	bne.n	8002730 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f820 	bl	8002738 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 f9f0 	bl	8007ae4 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2101      	movs	r1, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f004 fc38 	bl	8006f82 <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	4618      	mov	r0, r3
 800271c:	f005 f9e2 	bl	8007ae4 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fc29 	bl	8006f82 <GPIO_WritePin_Afopt>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 8002742:	783b      	ldrb	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d143      	bne.n	80027d0 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	7f1a      	ldrb	r2, [r3, #28]
 800274e:	787b      	ldrb	r3, [r7, #1]
 8002750:	429a      	cmp	r2, r3
 8002752:	d018      	beq.n	8002786 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	787a      	ldrb	r2, [r7, #1]
 800275a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	7f1b      	ldrb	r3, [r3, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f004 fc04 	bl	8006f82 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4618      	mov	r0, r3
 8002782:	f005 fd6f 	bl	8008264 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	7f1a      	ldrb	r2, [r3, #28]
 800278e:	787b      	ldrb	r3, [r7, #1]
 8002790:	429a      	cmp	r2, r3
 8002792:	d068      	beq.n	8002866 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	787a      	ldrb	r2, [r7, #1]
 800279c:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a1a      	ldr	r2, [r3, #32]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	7f1b      	ldrb	r3, [r3, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f004 fbe1 	bl	8006f82 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	4618      	mov	r0, r3
 80027ca:	f005 fd4b 	bl	8008264 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80027ce:	e04a      	b.n	8002866 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 80027d0:	783b      	ldrb	r3, [r7, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d147      	bne.n	8002866 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	7f1a      	ldrb	r2, [r3, #28]
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11d      	bne.n	800281e <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	7f1b      	ldrb	r3, [r3, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f004 fbb8 	bl	8006f82 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	4618      	mov	r0, r3
 800281a:	f005 fd23 	bl	8008264 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	7f1a      	ldrb	r2, [r3, #28]
 8002826:	787b      	ldrb	r3, [r7, #1]
 8002828:	429a      	cmp	r2, r3
 800282a:	d01c      	beq.n	8002866 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	787a      	ldrb	r2, [r7, #1]
 8002834:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	7f1b      	ldrb	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f004 fb95 	bl	8006f82 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	4618      	mov	r0, r3
 8002862:	f005 fcff 	bl	8008264 <PWMx_Toggle>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002878:	783b      	ldrb	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d161      	bne.n	8002942 <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f004 fb7b 	bl	8006f82 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fb73 	bl	8006f82 <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	7f1a      	ldrb	r2, [r3, #28]
 80028a2:	787b      	ldrb	r3, [r7, #1]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d018      	beq.n	80028da <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	787a      	ldrb	r2, [r7, #1]
 80028ae:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	7f1b      	ldrb	r3, [r3, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f004 fb5a 	bl	8006f82 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	4618      	mov	r0, r3
 80028d6:	f005 fcc5 	bl	8008264 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	7f1a      	ldrb	r2, [r3, #28]
 80028e2:	787b      	ldrb	r3, [r7, #1]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d01c      	beq.n	8002922 <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	787a      	ldrb	r2, [r7, #1]
 80028f0:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	7f1b      	ldrb	r3, [r3, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f004 fb37 	bl	8006f82 <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	4618      	mov	r0, r3
 800291e:	f005 fca1 	bl	8008264 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fb29 	bl	8006f82 <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f004 fb21 	bl	8006f82 <GPIO_WritePin_Afopt>
			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);

	}
}
 8002940:	e068      	b.n	8002a14 <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 8002942:	783b      	ldrb	r3, [r7, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d165      	bne.n	8002a14 <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fb16 	bl	8006f82 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f004 fb0e 	bl	8006f82 <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	7f1a      	ldrb	r2, [r3, #28]
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	429a      	cmp	r2, r3
 8002970:	d11d      	bne.n	80029ae <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 8002972:	787b      	ldrb	r3, [r7, #1]
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	7f1b      	ldrb	r3, [r3, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f004 faf0 	bl	8006f82 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	4618      	mov	r0, r3
 80029aa:	f005 fc5b 	bl	8008264 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	7f1a      	ldrb	r2, [r3, #28]
 80029b6:	787b      	ldrb	r3, [r7, #1]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d01c      	beq.n	80029f6 <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	787a      	ldrb	r2, [r7, #1]
 80029c4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	7f1b      	ldrb	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f004 facd 	bl	8006f82 <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fc37 	bl	8008264 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 fabf 	bl	8006f82 <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fab7 	bl	8006f82 <GPIO_WritePin_Afopt>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f005 fbda 	bl	80081e4 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 faa2 	bl	8006f82 <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	4618      	mov	r0, r3
 8002a48:	f005 fbcc 	bl	80081e4 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 fa93 	bl	8006f82 <GPIO_WritePin_Afopt>


}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t operation_mode_dir){
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <int_Config_Motor+0x220>)
 8002a76:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a82      	ldr	r2, [pc, #520]	; (8002c88 <int_Config_Motor+0x224>)
 8002a7e:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a81      	ldr	r2, [pc, #516]	; (8002c8c <int_Config_Motor+0x228>)
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <int_Config_Motor+0x22c>)
 8002a8e:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM    = &handlerPWM_1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7f      	ldr	r2, [pc, #508]	; (8002c94 <int_Config_Motor+0x230>)
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a72      	ldr	r2, [pc, #456]	; (8002c98 <int_Config_Motor+0x234>)
 8002ad0:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6d      	ldr	r2, [pc, #436]	; (8002c9c <int_Config_Motor+0x238>)
 8002ae6:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4a6c      	ldr	r2, [pc, #432]	; (8002ca0 <int_Config_Motor+0x23c>)
 8002aee:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a64      	ldr	r2, [pc, #400]	; (8002c88 <int_Config_Motor+0x224>)
 8002af8:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <int_Config_Motor+0x240>)
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3304      	adds	r3, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <int_Config_Motor+0x244>)
 8002b0c:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	; (8002cac <int_Config_Motor+0x248>)
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3304      	adds	r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3304      	adds	r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3304      	adds	r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4f      	ldr	r2, [pc, #316]	; (8002c98 <int_Config_Motor+0x234>)
 8002b5a:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <int_Config_Motor+0x238>)
 8002b74:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b9c:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <int_Config_Motor+0x24c>)
 8002ba2:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4a43      	ldr	r2, [pc, #268]	; (8002cb4 <int_Config_Motor+0x250>)
 8002ba8:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir.Mode = sNone;
 8002c72:	2302      	movs	r3, #2
 8002c74:	763b      	strb	r3, [r7, #24]
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200003e8 	.word	0x200003e8
 8002c88:	41e00000 	.word	0x41e00000
 8002c8c:	2000024c 	.word	0x2000024c
 8002c90:	20000264 	.word	0x20000264
 8002c94:	200002f0 	.word	0x200002f0
 8002c98:	437a0000 	.word	0x437a0000
 8002c9c:	42c80000 	.word	0x42c80000
 8002ca0:	20000414 	.word	0x20000414
 8002ca4:	20000240 	.word	0x20000240
 8002ca8:	20000258 	.word	0x20000258
 8002cac:	20000310 	.word	0x20000310
 8002cb0:	3dcccccd 	.word	0x3dcccccd
 8002cb4:	3f4ccccd 	.word	0x3f4ccccd

08002cb8 <goTo>:
		 uint8_t *fAnglulo,
		 uint8_t *fMeasurements,
		 uint8_t *fcontrol,
		 char buff[64],
		 uint32_t distance_mm ,
		 state_dir_t operation_mode_dir){
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b090      	sub	sp, #64	; 0x40
 8002cbc:	af06      	add	r7, sp, #24
 8002cbe:	6178      	str	r0, [r7, #20]
 8002cc0:	6139      	str	r1, [r7, #16]
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t done = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8002cf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cf6:	f7fd fc1d 	bl	8000534 <__aeabi_ui2d>
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	460d      	mov	r5, r1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d04:	eeb0 0a47 	vmov.f32	s0, s14
 8002d08:	eef0 0a67 	vmov.f32	s1, s15
 8002d0c:	f00a f940 	bl	800cf90 <cos>
 8002d10:	ec53 2b10 	vmov	r2, r3, d0
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fc86 	bl	8000628 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002d2a:	f7fd fac7 	bl	80002bc <__adddf3>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8002d38:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d3a:	f7fd fbfb 	bl	8000534 <__aeabi_ui2d>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d48:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4c:	eef0 0a67 	vmov.f32	s1, s15
 8002d50:	f00a f9ba 	bl	800d0c8 <sin>
 8002d54:	ec53 2b10 	vmov	r2, r3, d0
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f7fd fc64 	bl	8000628 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002d6e:	f7fd faa5 	bl	80002bc <__adddf3>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f004 fc87 	bl	8007690 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 8002d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f7ff fc87 	bl	8002698 <On_motor_Straigh_Roll>

	while(!done){
 8002d8a:	e049      	b.n	8002e20 <goTo+0x168>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002d98:	eeb0 1a46 	vmov.f32	s2, s12
 8002d9c:	eef0 1a66 	vmov.f32	s3, s13
 8002da0:	eeb0 0a47 	vmov.f32	s0, s14
 8002da4:	eef0 0a67 	vmov.f32	s1, s15
 8002da8:	68b8      	ldr	r0, [r7, #8]
 8002daa:	f004 fd5d 	bl	8007868 <distance_traveled>
 8002dae:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 8002db2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002db6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	ed97 0b00 	vldr	d0, [r7]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f000 f987 	bl	80030ec <go>
		   fMeasurements,
		   fcontrol,
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

		if (!(distance_to_go < distance_mm)){
 8002dde:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002de0:	f7fd fba8 	bl	8000534 <__aeabi_ui2d>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	2101      	movs	r1, #1
 8002dea:	460c      	mov	r4, r1
 8002dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df0:	f7fd fe8c 	bl	8000b0c <__aeabi_dcmplt>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <goTo+0x146>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	461c      	mov	r4, r3
 8002dfe:	b2e3      	uxtb	r3, r4
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <goTo+0x164>
			// Paramos el proceso
			done = !done;
 8002e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Observamos si hay algun comando en espera
		fillComand();
 8002e1c:	f000 fa3a 	bl	8003294 <fillComand>
	while(!done){
 8002e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0b1      	beq.n	8002d8c <goTo+0xd4>

	}


	return done;
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3728      	adds	r7, #40	; 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}

08002e34 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8002e42:	4b6f      	ldr	r3, [pc, #444]	; (8003000 <PID_control+0x1cc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a6f      	ldr	r2, [pc, #444]	; (8003004 <PID_control+0x1d0>)
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e56:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003008 <PID_control+0x1d4>
 8002e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5e:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002e6e:	eeb0 1a46 	vmov.f32	s2, s12
 8002e72:	eef0 1a66 	vmov.f32	s3, s13
 8002e76:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f004 fcae 	bl	80077e0 <distance_to_straight_line>
 8002e84:	ec51 0b10 	vmov	r0, r1, d0
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <PID_control+0x1d8>)
 8002e8e:	f7fd fcf5 	bl	800087c <__aeabi_ddiv>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7fd febd 	bl	8000c18 <__aeabi_d2f>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8002ea2:	ed97 1a04 	vldr	s2, [r7, #16]
 8002ea6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003010 <PID_control+0x1dc>
 8002eaa:	ed97 0a05 	vldr	s0, [r7, #20]
 8002eae:	6838      	ldr	r0, [r7, #0]
 8002eb0:	f000 f8bc 	bl	800302c <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002eb4:	4b57      	ldr	r3, [pc, #348]	; (8003014 <PID_control+0x1e0>)
 8002eb6:	ed93 7a00 	vldr	s14, [r3]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <PID_control+0x1e4>)
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	ed93 7a00 	vldr	s14, [r3]
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <PID_control+0x1e0>)
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	4b50      	ldr	r3, [pc, #320]	; (800301c <PID_control+0x1e8>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <PID_control+0x1e4>)
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ef4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ef8:	eef0 0a67 	vmov.f32	s1, s15
 8002efc:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 f893 	bl	800302c <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b43      	ldr	r3, [pc, #268]	; (800301c <PID_control+0x1e8>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3304      	adds	r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f1e:	eeb0 1a47 	vmov.f32	s2, s14
 8002f22:	eef0 0a67 	vmov.f32	s1, s15
 8002f26:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f000 f87e 	bl	800302c <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4a:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3304      	adds	r3, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3304      	adds	r3, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6e:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f7a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003020 <PID_control+0x1ec>
 8002f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f86:	db04      	blt.n	8002f92 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	; (8003024 <PID_control+0x1f0>)
 8002f8e:	615a      	str	r2, [r3, #20]
 8002f90:	e00e      	b.n	8002fb0 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f9a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d803      	bhi.n	8002fb0 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <PID_control+0x1f4>)
 8002fae:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003020 <PID_control+0x1ec>
 8002fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	db05      	blt.n	8002fd4 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a15      	ldr	r2, [pc, #84]	; (8003024 <PID_control+0x1f0>)
 8002fd0:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002fd2:	e011      	b.n	8002ff8 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fde:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	d900      	bls.n	8002fee <PID_control+0x1ba>
}
 8002fec:	e004      	b.n	8002ff8 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <PID_control+0x1f4>)
 8002ff6:	615a      	str	r2, [r3, #20]
}
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200002c4 	.word	0x200002c4
 8003004:	20000008 	.word	0x20000008
 8003008:	447a0000 	.word	0x447a0000
 800300c:	408f4000 	.word	0x408f4000
 8003010:	00000000 	.word	0x00000000
 8003014:	20001140 	.word	0x20001140
 8003018:	20001144 	.word	0x20001144
 800301c:	20001148 	.word	0x20001148
 8003020:	42700000 	.word	0x42700000
 8003024:	42700000 	.word	0x42700000
 8003028:	41b80000 	.word	0x41b80000

0800302c <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	ed87 0a02 	vstr	s0, [r7, #8]
 8003038:	edc7 0a01 	vstr	s1, [r7, #4]
 800303c:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003040:	ed97 7a01 	vldr	s14, [r7, #4]
 8003044:	edd7 7a00 	vldr	s15, [r7]
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	ed93 7a04 	vldr	s14, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	edd3 7a01 	vldr	s15, [r3, #4]
 800305e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003062:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	ed93 7a02 	vldr	s14, [r3, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003072:	edd7 7a02 	vldr	s15, [r7, #8]
 8003076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800307a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	ed93 7a05 	vldr	s14, [r3, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003094:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	ed93 7a06 	vldr	s14, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80030aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80030b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ba:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 80030be:	ed97 7a07 	vldr	s14, [r7, #28]
 80030c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	60da      	str	r2, [r3, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3724      	adds	r7, #36	; 0x24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6178      	str	r0, [r7, #20]
 80030f4:	6139      	str	r1, [r7, #16]
 80030f6:	60fa      	str	r2, [r7, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	ed97 1b00 	vldr	d1, [r7]
 800310c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003234 <go+0x148>
 8003110:	6938      	ldr	r0, [r7, #16]
 8003112:	f7fe fd7f 	bl	8001c14 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler,operation_mode_dir );
 8003124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	6978      	ldr	r0, [r7, #20]
 800312a:	f7fe fdd1 	bl	8001cd0 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d073      	beq.n	800322a <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3304      	adds	r3, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	ed93 7a03 	vldr	s14, [r3, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	edd3 7a03 	vldr	s15, [r3, #12]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800315c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003160:	ee16 0a90 	vmov	r0, s13
 8003164:	f7fd fa08 	bl	8000578 <__aeabi_f2d>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	ed93 7b04 	vldr	d7, [r3, #16]
 8003176:	eeb0 0a47 	vmov.f32	s0, s14
 800317a:	eef0 0a67 	vmov.f32	s1, s15
 800317e:	f009 ff07 	bl	800cf90 <cos>
 8003182:	ec51 0b10 	vmov	r0, r1, d0
 8003186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318a:	f7fd fa4d 	bl	8000628 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	ed93 7b04 	vldr	d7, [r3, #16]
 800319e:	eeb0 0a47 	vmov.f32	s0, s14
 80031a2:	eef0 0a67 	vmov.f32	s1, s15
 80031a6:	f009 ff8f 	bl	800d0c8 <sin>
 80031aa:	ec51 0b10 	vmov	r0, r1, d0
 80031ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b2:	f7fd fa39 	bl	8000628 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031cc:	f7fd f876 	bl	80002bc <__adddf3>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80031e6:	f7fd f869 	bl	80002bc <__adddf3>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003200:	e9cd 2300 	strd	r2, r3, [sp]
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	490b      	ldr	r1, [pc, #44]	; (8003238 <go+0x14c>)
 800320a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800320c:	f007 f882 	bl	800a314 <siprintf>

		writeMsg(&handlerUSART, buff);
 8003210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003212:	480a      	ldr	r0, [pc, #40]	; (800323c <go+0x150>)
 8003214:	f005 ffd2 	bl	80091bc <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff fe08 	bl	8002e34 <PID_control>

		*fcontrol = RESET;
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
	}
}
 800322a:	bf00      	nop
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	00000000 	.word	0x00000000
 8003238:	0800f7e4 	.word	0x0800f7e4
 800323c:	20000330 	.word	0x20000330

08003240 <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6178      	str	r0, [r7, #20]
 8003248:	6139      	str	r1, [r7, #16]
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	ed97 1b00 	vldr	d1, [r7]
 8003260:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003290 <NOP+0x50>
 8003264:	6938      	ldr	r0, [r7, #16]
 8003266:	f7fe fcd5 	bl	8001c14 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7fe fd27 	bl	8001cd0 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
	}

}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	00000000 	.word	0x00000000

08003294 <fillComand>:



void fillComand(void){
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <fillComand+0x8c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03c      	beq.n	800331a <fillComand+0x86>
		writeChar(&handlerUSART, rxData);
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <fillComand+0x8c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	481f      	ldr	r0, [pc, #124]	; (8003324 <fillComand+0x90>)
 80032a8:	f005 ff70 	bl	800918c <writeChar>
		bufferReception[counterReception] = rxData;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <fillComand+0x94>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <fillComand+0x8c>)
 80032b4:	7819      	ldrb	r1, [r3, #0]
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <fillComand+0x98>)
 80032b8:	5499      	strb	r1, [r3, r2]
		counterReception++;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <fillComand+0x94>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <fillComand+0x94>)
 80032c4:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <fillComand+0x8c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d10f      	bne.n	80032ee <fillComand+0x5a>
			doneTransaction = SET;
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <fillComand+0x9c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <fillComand+0x94>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <fillComand+0x98>)
 80032dc:	2100      	movs	r1, #0
 80032de:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <fillComand+0x94>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 80032e6:	4811      	ldr	r0, [pc, #68]	; (800332c <fillComand+0x98>)
 80032e8:	f7fe f996 	bl	8001618 <parseCommands>
 80032ec:	e012      	b.n	8003314 <fillComand+0x80>

		}else if (rxData == 'z'){
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <fillComand+0x8c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b7a      	cmp	r3, #122	; 0x7a
 80032f4:	d10e      	bne.n	8003314 <fillComand+0x80>

			memset(bufferReception, 0, sizeof(bufferReception));
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	2100      	movs	r1, #0
 80032fa:	480c      	ldr	r0, [pc, #48]	; (800332c <fillComand+0x98>)
 80032fc:	f006 faa8 	bl	8009850 <memset>
			counterReception = 0;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <fillComand+0x94>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 8003306:	490b      	ldr	r1, [pc, #44]	; (8003334 <fillComand+0xa0>)
 8003308:	4806      	ldr	r0, [pc, #24]	; (8003324 <fillComand+0x90>)
 800330a:	f005 ff57 	bl	80091bc <writeMsg>
			rxData = '\0';
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <fillComand+0x8c>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 8003314:	4b02      	ldr	r3, [pc, #8]	; (8003320 <fillComand+0x8c>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
	}

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200004d6 	.word	0x200004d6
 8003324:	20000330 	.word	0x20000330
 8003328:	200004d4 	.word	0x200004d4
 800332c:	20000494 	.word	0x20000494
 8003330:	200004d5 	.word	0x200004d5
 8003334:	0800f7f4 	.word	0x0800f7f4

08003338 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <ITM_SendChar+0x48>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <ITM_SendChar+0x48>)
 8003348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <ITM_SendChar+0x4c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <ITM_SendChar+0x4c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800335a:	bf00      	nop
 800335c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f8      	beq.n	800335c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800336a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000edfc 	.word	0xe000edfc
 8003384:	e0000e00 	.word	0xe0000e00

08003388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
	return 1;
 800338c:	2301      	movs	r3, #1
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_kill>:

int _kill(int pid, int sig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033a2:	f006 fa23 	bl	80097ec <__errno>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2216      	movs	r2, #22
 80033aa:	601a      	str	r2, [r3, #0]
	return -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_exit>:

void _exit (int status)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffe7 	bl	8003398 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033ca:	e7fe      	b.n	80033ca <_exit+0x12>

080033cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00a      	b.n	80033f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033de:	f3af 8000 	nop.w
 80033e2:	4601      	mov	r1, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60ba      	str	r2, [r7, #8]
 80033ea:	b2ca      	uxtb	r2, r1
 80033ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf0      	blt.n	80033de <_read+0x12>
	}

return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e009      	b.n	800342c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	60ba      	str	r2, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff89 	bl	8003338 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3301      	adds	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	dbf1      	blt.n	8003418 <_write+0x12>
	}
	return len;
 8003434:	687b      	ldr	r3, [r7, #4]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_close>:

int _close(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return -1;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003466:	605a      	str	r2, [r3, #4]
	return 0;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <_isatty>:

int _isatty(int file)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	return 1;
 800347e:	2301      	movs	r3, #1
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034b0:	480c      	ldr	r0, [pc, #48]	; (80034e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80034b2:	490d      	ldr	r1, [pc, #52]	; (80034e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <LoopForever+0xe>)
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b8:	e002      	b.n	80034c0 <LoopCopyDataInit>

080034ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034be:	3304      	adds	r3, #4

080034c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c4:	d3f9      	bcc.n	80034ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034c8:	4c0a      	ldr	r4, [pc, #40]	; (80034f4 <LoopForever+0x16>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034cc:	e001      	b.n	80034d2 <LoopFillZerobss>

080034ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d0:	3204      	adds	r2, #4

080034d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d4:	d3fb      	bcc.n	80034ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034d6:	f006 f98f 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034da:	f7fd fbed 	bl	8000cb8 <main>

080034de <LoopForever>:

LoopForever:
    b LoopForever
 80034de:	e7fe      	b.n	80034de <LoopForever>
  ldr   r0, =_estack
 80034e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80034ec:	0800ff90 	.word	0x0800ff90
  ldr r2, =_sbss
 80034f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80034f4:	20011d98 	.word	0x20011d98

080034f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034f8:	e7fe      	b.n	80034f8 <ADC_IRQHandler>
	...

080034fc <findShorterWay>:
int findShorterWay(char terminalGrid[52][52],
				   char Gridcopy[52][52],
				   float matrixCosts[52][52][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[100][2]){
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 800350a:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 800350e:	6020      	str	r0, [r4, #0]
 8003510:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 8003514:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 8003518:	6001      	str	r1, [r0, #0]
 800351a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800351e:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003522:	600a      	str	r2, [r1, #0]
 8003524:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003528:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 800352c:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 800352e:	49b5      	ldr	r1, [pc, #724]	; (8003804 <findShorterWay+0x308>)
 8003530:	48b5      	ldr	r0, [pc, #724]	; (8003808 <findShorterWay+0x30c>)
 8003532:	f005 fe43 	bl	80091bc <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8003536:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800353a:	f103 0318 	add.w	r3, r3, #24
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800354c:	f102 020f 	add.w	r2, r2, #15
 8003550:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003558:	f102 020e 	add.w	r2, r2, #14
 800355c:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003564:	f102 020d 	add.w	r2, r2, #13
 8003568:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003570:	f102 020c 	add.w	r2, r2, #12
 8003574:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800357c:	f102 020b 	add.w	r2, r2, #11
 8003580:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003588:	f102 020a 	add.w	r2, r2, #10
 800358c:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 800358e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003592:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 8003596:	4618      	mov	r0, r3
 8003598:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800359c:	461a      	mov	r2, r3
 800359e:	2100      	movs	r1, #0
 80035a0:	f006 f956 	bl	8009850 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80035a4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035a8:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f001 fd63 	bl	8005078 <getRows>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035ba:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80035c2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035c6:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	f001 fd78 	bl	80050c0 <getColums>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035d8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80035e0:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035e4:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 80035e8:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035ec:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 80035f0:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80035f4:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6809      	ldr	r1, [r1, #0]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f001 fce8 	bl	8004fd2 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8003602:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003606:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 800360a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800360e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003612:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003616:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003622:	6809      	ldr	r1, [r1, #0]
 8003624:	6800      	ldr	r0, [r0, #0]
 8003626:	f001 fa4b 	bl	8004ac0 <setHeuristic>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8003630:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8003632:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003636:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 800363a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800363e:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003642:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	6809      	ldr	r1, [r1, #0]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f001 fc55 	bl	8004efa <findStart>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d026      	beq.n	80036a4 <findShorterWay+0x1a8>
 8003656:	e002      	b.n	800365e <findShorterWay+0x162>
    	return 0;
 8003658:	2300      	movs	r3, #0
 800365a:	f001 b96e 	b.w	800493a <findShorterWay+0x143e>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 800365e:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8003660:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003668:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8003670:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003678:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8003680:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003688:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8003690:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003698:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 80036a0:	f001 b801 	b.w	80046a6 <findShorterWay+0x11aa>
    	return 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f001 b948 	b.w	800493a <findShorterWay+0x143e>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 80036aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80036ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80036ca:	2300      	movs	r3, #0
 80036cc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80036d0:	f102 020e 	add.w	r2, r2, #14
 80036d4:	7013      	strb	r3, [r2, #0]
 80036d6:	e0ee      	b.n	80038b6 <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 80036d8:	2300      	movs	r3, #0
 80036da:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80036de:	f102 020d 	add.w	r2, r2, #13
 80036e2:	7013      	strb	r3, [r2, #0]
 80036e4:	e0d4      	b.n	8003890 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80036e6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80036f2:	f103 030e 	add.w	r3, r3, #14
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dd0b      	ble.n	8003716 <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 80036fe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800370a:	f103 030d 	add.w	r3, r3, #13
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4413      	add	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	dc16      	bgt.n	8003744 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 8003716:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800371a:	f103 030e 	add.w	r3, r3, #14
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003724:	f103 030d 	add.w	r3, r3, #13
 8003728:	7819      	ldrb	r1, [r3, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003734:	f103 0310 	add.w	r3, r3, #16
 8003738:	443b      	add	r3, r7
 800373a:	440b      	add	r3, r1
 800373c:	3b18      	subs	r3, #24
 800373e:	2230      	movs	r2, #48	; 0x30
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e09a      	b.n	800387a <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8003744:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003750:	f103 030e 	add.w	r3, r3, #14
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4413      	add	r3, r2
 8003758:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800375c:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	7a12      	ldrb	r2, [r2, #8]
 8003764:	4293      	cmp	r3, r2
 8003766:	dc11      	bgt.n	800378c <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 8003768:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003774:	f103 030d 	add.w	r3, r3, #13
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003780:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	7a52      	ldrb	r2, [r2, #9]
 8003788:	4293      	cmp	r3, r2
 800378a:	dd16      	ble.n	80037ba <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 800378c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003790:	f103 030e 	add.w	r3, r3, #14
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800379a:	f103 030d 	add.w	r3, r3, #13
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80037aa:	f103 0310 	add.w	r3, r3, #16
 80037ae:	443b      	add	r3, r7
 80037b0:	440b      	add	r3, r1
 80037b2:	3b18      	subs	r3, #24
 80037b4:	2230      	movs	r2, #48	; 0x30
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e05f      	b.n	800387a <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 80037ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037be:	f103 030e 	add.w	r3, r3, #14
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d121      	bne.n	800380c <findShorterWay+0x310>
 80037c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037cc:	f103 030d 	add.w	r3, r3, #13
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11a      	bne.n	800380c <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 80037d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037da:	f103 030e 	add.w	r3, r3, #14
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80037e4:	f103 030d 	add.w	r3, r3, #13
 80037e8:	7819      	ldrb	r1, [r3, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80037f4:	f103 0310 	add.w	r3, r3, #16
 80037f8:	443b      	add	r3, r7
 80037fa:	440b      	add	r3, r1
 80037fc:	3b18      	subs	r3, #24
 80037fe:	2250      	movs	r2, #80	; 0x50
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e03a      	b.n	800387a <findShorterWay+0x37e>
 8003804:	0800f810 	.word	0x0800f810
 8003808:	2000114c 	.word	0x2000114c
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 800380c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003818:	f103 030e 	add.w	r3, r3, #14
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	4413      	add	r3, r2
 8003820:	461a      	mov	r2, r3
 8003822:	2334      	movs	r3, #52	; 0x34
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	3b34      	subs	r3, #52	; 0x34
 800382a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800382e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	18d0      	adds	r0, r2, r3
 8003836:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003842:	f103 030d 	add.w	r3, r3, #13
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4413      	add	r3, r2
 800384a:	3b01      	subs	r3, #1
 800384c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003850:	f102 020e 	add.w	r2, r2, #14
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 800385a:	f101 010d 	add.w	r1, r1, #13
 800385e:	7809      	ldrb	r1, [r1, #0]
 8003860:	5cc0      	ldrb	r0, [r0, r3]
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800386c:	f103 0310 	add.w	r3, r3, #16
 8003870:	443b      	add	r3, r7
 8003872:	440b      	add	r3, r1
 8003874:	3b18      	subs	r3, #24
 8003876:	4602      	mov	r2, r0
 8003878:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 800387a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800387e:	f103 030d 	add.w	r3, r3, #13
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800388a:	f102 020d 	add.w	r2, r2, #13
 800388e:	7013      	strb	r3, [r2, #0]
 8003890:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003894:	f103 030d 	add.w	r3, r3, #13
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	f67f af23 	bls.w	80036e6 <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 80038a0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80038a4:	f103 030e 	add.w	r3, r3, #14
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80038b0:	f102 020e 	add.w	r2, r2, #14
 80038b4:	7013      	strb	r3, [r2, #0]
 80038b6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80038ba:	f103 030e 	add.w	r3, r3, #14
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f67f af09 	bls.w	80036d8 <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 80038c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80038ca:	f103 030a 	add.w	r3, r3, #10
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	49c9      	ldr	r1, [pc, #804]	; (8003bf8 <findShorterWay+0x6fc>)
 80038d4:	48c9      	ldr	r0, [pc, #804]	; (8003bfc <findShorterWay+0x700>)
 80038d6:	f006 fd1d 	bl	800a314 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80038da:	49c8      	ldr	r1, [pc, #800]	; (8003bfc <findShorterWay+0x700>)
 80038dc:	48c8      	ldr	r0, [pc, #800]	; (8003c00 <findShorterWay+0x704>)
 80038de:	f005 fc6d 	bl	80091bc <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80038e2:	2300      	movs	r3, #0
 80038e4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80038e8:	f102 020e 	add.w	r2, r2, #14
 80038ec:	7013      	strb	r3, [r2, #0]
 80038ee:	e040      	b.n	8003972 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 80038f0:	2300      	movs	r3, #0
 80038f2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80038f6:	f102 020d 	add.w	r2, r2, #13
 80038fa:	7013      	strb	r3, [r2, #0]
 80038fc:	e023      	b.n	8003946 <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 80038fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003902:	f103 030e 	add.w	r3, r3, #14
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800390c:	f103 030d 	add.w	r3, r3, #13
 8003910:	7819      	ldrb	r1, [r3, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800391c:	f103 0310 	add.w	r3, r3, #16
 8003920:	443b      	add	r3, r7
 8003922:	440b      	add	r3, r1
 8003924:	3b18      	subs	r3, #24
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	48b5      	ldr	r0, [pc, #724]	; (8003c00 <findShorterWay+0x704>)
 800392c:	f005 fc2e 	bl	800918c <writeChar>
			for (j = 0; j < 3; j++){
 8003930:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003934:	f103 030d 	add.w	r3, r3, #13
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003940:	f102 020d 	add.w	r2, r2, #13
 8003944:	7013      	strb	r3, [r2, #0]
 8003946:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800394a:	f103 030d 	add.w	r3, r3, #13
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d9d4      	bls.n	80038fe <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 8003954:	210d      	movs	r1, #13
 8003956:	48aa      	ldr	r0, [pc, #680]	; (8003c00 <findShorterWay+0x704>)
 8003958:	f005 fc18 	bl	800918c <writeChar>
    	for(i = 0; i < 3; i++){
 800395c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003960:	f103 030e 	add.w	r3, r3, #14
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800396c:	f102 020e 	add.w	r2, r2, #14
 8003970:	7013      	strb	r3, [r2, #0]
 8003972:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003976:	f103 030e 	add.w	r3, r3, #14
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d9b7      	bls.n	80038f0 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8003980:	210d      	movs	r1, #13
 8003982:	489f      	ldr	r0, [pc, #636]	; (8003c00 <findShorterWay+0x704>)
 8003984:	f005 fc02 	bl	800918c <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003988:	2300      	movs	r3, #0
 800398a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800398e:	f102 0209 	add.w	r2, r2, #9
 8003992:	7013      	strb	r3, [r2, #0]
 8003994:	e01c      	b.n	80039d0 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8003996:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800399a:	f103 0309 	add.w	r3, r3, #9
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2234      	movs	r2, #52	; 0x34
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80039aa:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	4892      	ldr	r0, [pc, #584]	; (8003c00 <findShorterWay+0x704>)
 80039b6:	f005 fc01 	bl	80091bc <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80039ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80039be:	f103 0309 	add.w	r3, r3, #9
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80039ca:	f102 0209 	add.w	r2, r2, #9
 80039ce:	7013      	strb	r3, [r2, #0]
 80039d0:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80039d4:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	7a1b      	ldrb	r3, [r3, #8]
 80039dc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80039e0:	f102 0209 	add.w	r2, r2, #9
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d3d5      	bcc.n	8003996 <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80039ea:	210d      	movs	r1, #13
 80039ec:	4884      	ldr	r0, [pc, #528]	; (8003c00 <findShorterWay+0x704>)
 80039ee:	f005 fbcd 	bl	800918c <writeChar>


    	for(i = 0; i < 3; i++){
 80039f2:	2300      	movs	r3, #0
 80039f4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80039f8:	f102 020e 	add.w	r2, r2, #14
 80039fc:	7013      	strb	r3, [r2, #0]
 80039fe:	e33c      	b.n	800407a <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8003a00:	2300      	movs	r3, #0
 8003a02:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003a06:	f102 020d 	add.w	r2, r2, #13
 8003a0a:	7013      	strb	r3, [r2, #0]
 8003a0c:	e319      	b.n	8004042 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 8003a0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a12:	f103 030e 	add.w	r3, r3, #14
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003a1c:	f103 030d 	add.w	r3, r3, #13
 8003a20:	7819      	ldrb	r1, [r3, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003a2c:	f103 0310 	add.w	r3, r3, #16
 8003a30:	443b      	add	r3, r7
 8003a32:	440b      	add	r3, r1
 8003a34:	3b18      	subs	r3, #24
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b73      	cmp	r3, #115	; 0x73
 8003a3a:	d075      	beq.n	8003b28 <findShorterWay+0x62c>
 8003a3c:	2b73      	cmp	r3, #115	; 0x73
 8003a3e:	f300 82eb 	bgt.w	8004018 <findShorterWay+0xb1c>
 8003a42:	2b50      	cmp	r3, #80	; 0x50
 8003a44:	dc66      	bgt.n	8003b14 <findShorterWay+0x618>
 8003a46:	2b23      	cmp	r3, #35	; 0x23
 8003a48:	f2c0 82e6 	blt.w	8004018 <findShorterWay+0xb1c>
 8003a4c:	3b23      	subs	r3, #35	; 0x23
 8003a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8003a50:	f200 82e2 	bhi.w	8004018 <findShorterWay+0xb1c>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <findShorterWay+0x560>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003b1d 	.word	0x08003b1d
 8003a60:	08004019 	.word	0x08004019
 8003a64:	08004019 	.word	0x08004019
 8003a68:	08004019 	.word	0x08004019
 8003a6c:	08004019 	.word	0x08004019
 8003a70:	08004019 	.word	0x08004019
 8003a74:	08004019 	.word	0x08004019
 8003a78:	08003d2b 	.word	0x08003d2b
 8003a7c:	08004019 	.word	0x08004019
 8003a80:	08004019 	.word	0x08004019
 8003a84:	08004019 	.word	0x08004019
 8003a88:	08004019 	.word	0x08004019
 8003a8c:	08004019 	.word	0x08004019
 8003a90:	08003b25 	.word	0x08003b25
 8003a94:	08004019 	.word	0x08004019
 8003a98:	08004019 	.word	0x08004019
 8003a9c:	08004019 	.word	0x08004019
 8003aa0:	08004019 	.word	0x08004019
 8003aa4:	08004019 	.word	0x08004019
 8003aa8:	08004019 	.word	0x08004019
 8003aac:	08004019 	.word	0x08004019
 8003ab0:	08004019 	.word	0x08004019
 8003ab4:	08004019 	.word	0x08004019
 8003ab8:	08004019 	.word	0x08004019
 8003abc:	08004019 	.word	0x08004019
 8003ac0:	08004019 	.word	0x08004019
 8003ac4:	08004019 	.word	0x08004019
 8003ac8:	08004019 	.word	0x08004019
 8003acc:	08004019 	.word	0x08004019
 8003ad0:	08004019 	.word	0x08004019
 8003ad4:	08004019 	.word	0x08004019
 8003ad8:	08004019 	.word	0x08004019
 8003adc:	08004019 	.word	0x08004019
 8003ae0:	08003b21 	.word	0x08003b21
 8003ae4:	08004019 	.word	0x08004019
 8003ae8:	08004019 	.word	0x08004019
 8003aec:	08004019 	.word	0x08004019
 8003af0:	08004019 	.word	0x08004019
 8003af4:	08004019 	.word	0x08004019
 8003af8:	08004019 	.word	0x08004019
 8003afc:	08004019 	.word	0x08004019
 8003b00:	08004019 	.word	0x08004019
 8003b04:	08004019 	.word	0x08004019
 8003b08:	08004019 	.word	0x08004019
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	2b65      	cmp	r3, #101	; 0x65
 8003b16:	f000 8256 	beq.w	8003fc6 <findShorterWay+0xaca>
 8003b1a:	e27d      	b.n	8004018 <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8003b1c:	bf00      	nop
						break;
 8003b1e:	e27e      	b.n	800401e <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003b20:	bf00      	nop
						break;
 8003b22:	e27c      	b.n	800401e <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8003b24:	bf00      	nop
						break;
 8003b26:	e27a      	b.n	800401e <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8003b28:	bf00      	nop
						break;
 8003b2a:	e278      	b.n	800401e <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8003b2c:	bf00      	nop
						break;
 8003b2e:	e276      	b.n	800401e <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8003b30:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b34:	f103 030e 	add.w	r3, r3, #14
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003b3e:	f102 0210 	add.w	r2, r2, #16
 8003b42:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003b44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003b48:	f103 030d 	add.w	r3, r3, #13
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003b52:	f102 0214 	add.w	r2, r2, #20
 8003b56:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8003b58:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b5c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003b60:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003b64:	f102 0210 	add.w	r2, r2, #16
 8003b68:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003b6c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	6800      	ldr	r0, [r0, #0]
 8003b7a:	f001 f950 	bl	8004e1e <setFcost>
 8003b7e:	eef0 7a40 	vmov.f32	s15, s0
 8003b82:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8003b8c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b96:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ba2:	f103 030e 	add.w	r3, r3, #14
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	461a      	mov	r2, r3
 8003bac:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003bb8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003bbc:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	18d1      	adds	r1, r2, r3
 8003bc4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003bd0:	f103 030d 	add.w	r3, r3, #13
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	3304      	adds	r3, #4
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	db07      	blt.n	8003c04 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8003bf4:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8003bf6:	e212      	b.n	800401e <findShorterWay+0xb22>
 8003bf8:	0800f844 	.word	0x0800f844
 8003bfc:	200011f8 	.word	0x200011f8
 8003c00:	2000114c 	.word	0x2000114c
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003c04:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003c08:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003c0c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003c10:	f102 0210 	add.w	r2, r2, #16
 8003c14:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003c18:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003c22:	6809      	ldr	r1, [r1, #0]
 8003c24:	6800      	ldr	r0, [r0, #0]
 8003c26:	f000 feed 	bl	8004a04 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 8003c2a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003c2e:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003c32:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003c36:	f102 0210 	add.w	r2, r2, #16
 8003c3a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003c3e:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003c48:	6809      	ldr	r1, [r1, #0]
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	f000 ff08 	bl	8004a60 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8003c50:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003c54:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003c58:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003c5c:	f101 0110 	add.w	r1, r1, #16
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f000 fe74 	bl	8004954 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003c6c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c78:	f103 030e 	add.w	r3, r3, #14
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003c8e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003c92:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	18d0      	adds	r0, r2, r3
 8003c9a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ca6:	f103 030d 	add.w	r3, r3, #13
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8003cb0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cbc:	f103 030e 	add.w	r3, r3, #14
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003cd2:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003cd6:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	18cc      	adds	r4, r1, r3
 8003cde:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cea:	f103 030d 	add.w	r3, r3, #13
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	1e59      	subs	r1, r3, #1
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4423      	add	r3, r4
 8003cfe:	3314      	adds	r3, #20
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d08:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4403      	add	r3, r0
 8003d16:	3304      	adds	r3, #4
 8003d18:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8003d1a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003d1e:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8003d22:	0123      	lsls	r3, r4, #4
 8003d24:	440b      	add	r3, r1
 8003d26:	601a      	str	r2, [r3, #0]
						break;
 8003d28:	e179      	b.n	800401e <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8003d2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d2e:	f103 030e 	add.w	r3, r3, #14
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d38:	f102 0210 	add.w	r2, r2, #16
 8003d3c:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003d3e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d42:	f103 030d 	add.w	r3, r3, #13
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d4c:	f102 0214 	add.w	r2, r2, #20
 8003d50:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8003d52:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003d56:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003d5a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d5e:	f102 0210 	add.w	r2, r2, #16
 8003d62:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003d66:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003d70:	6809      	ldr	r1, [r1, #0]
 8003d72:	6800      	ldr	r0, [r0, #0]
 8003d74:	f000 fe46 	bl	8004a04 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8003d78:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003d7c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003d80:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003d84:	f102 0210 	add.w	r2, r2, #16
 8003d88:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003d8c:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	6800      	ldr	r0, [r0, #0]
 8003d9a:	f000 fe61 	bl	8004a60 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8003d9e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003da2:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003da6:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003daa:	f101 0110 	add.w	r1, r1, #16
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f000 fdcd 	bl	8004954 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8003dba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dc6:	f103 030e 	add.w	r3, r3, #14
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2334      	movs	r3, #52	; 0x34
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	3b34      	subs	r3, #52	; 0x34
 8003dd8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ddc:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	441a      	add	r2, r3
 8003de4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68d9      	ldr	r1, [r3, #12]
 8003dec:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003df0:	f103 030d 	add.w	r3, r3, #13
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	440b      	add	r3, r1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	214f      	movs	r1, #79	; 0x4f
 8003dfc:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8003dfe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e0a:	f103 030e 	add.w	r3, r3, #14
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	461a      	mov	r2, r3
 8003e14:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003e20:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003e24:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	18d1      	adds	r1, r2, r3
 8003e2c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e38:	f103 030d 	add.w	r3, r3, #13
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	1e5a      	subs	r2, r3, #1
 8003e42:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e46:	f103 030b 	add.w	r3, r3, #11
 8003e4a:	7818      	ldrb	r0, [r3, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	440b      	add	r3, r1
 8003e56:	3304      	adds	r3, #4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003e5e:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8003e62:	0103      	lsls	r3, r0, #4
 8003e64:	440b      	add	r3, r1
 8003e66:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8003e68:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e74:	f103 030e 	add.w	r3, r3, #14
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003e8a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003e8e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	18d1      	adds	r1, r2, r3
 8003e96:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ea2:	f103 030d 	add.w	r3, r3, #13
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003eb0:	f103 030b 	add.w	r3, r3, #11
 8003eb4:	7818      	ldrb	r0, [r3, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003ec8:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8003ecc:	0103      	lsls	r3, r0, #4
 8003ece:	440b      	add	r3, r1
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8003ed4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ee0:	f103 030e 	add.w	r3, r3, #14
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003eee:	f103 030b 	add.w	r3, r3, #11
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	ee07 2a90 	vmov	s15, r2
 8003ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003f00:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4413      	add	r3, r2
 8003f08:	3308      	adds	r3, #8
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8003f0e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f1a:	f103 030d 	add.w	r3, r3, #13
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f28:	f103 030b 	add.w	r3, r3, #11
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	ee07 2a90 	vmov	s15, r2
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003f3a:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	4413      	add	r3, r2
 8003f42:	330c      	adds	r3, #12
 8003f44:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8003f48:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f54:	f103 030e 	add.w	r3, r3, #14
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8003f6a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003f6e:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f82:	f103 030d 	add.w	r3, r3, #13
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	1e5a      	subs	r2, r3, #1
 8003f8c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f90:	f103 030b 	add.w	r3, r3, #11
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3314      	adds	r3, #20
 8003faa:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8003fae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fb2:	f103 030b 	add.w	r3, r3, #11
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003fbe:	f102 020b 	add.w	r2, r2, #11
 8003fc2:	7013      	strb	r3, [r2, #0]

						break;
 8003fc4:	e02b      	b.n	800401e <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8003fc6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fca:	f103 030e 	add.w	r3, r3, #14
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003fd4:	f102 0210 	add.w	r2, r2, #16
 8003fd8:	6013      	str	r3, [r2, #0]
						position[1] = j;
 8003fda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fde:	f103 030d 	add.w	r3, r3, #13
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8003fe8:	f102 0214 	add.w	r2, r2, #20
 8003fec:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8003fee:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003ff2:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8003ff6:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8003ffa:	f101 0110 	add.w	r1, r1, #16
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f000 fca5 	bl	8004954 <updateParent>
						shorterWayFound = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004010:	f102 020f 	add.w	r2, r2, #15
 8004014:	7013      	strb	r3, [r2, #0]
						break;
 8004016:	e002      	b.n	800401e <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8004018:	2300      	movs	r3, #0
 800401a:	f000 bc8e 	b.w	800493a <findShorterWay+0x143e>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 800401e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004022:	f103 030f 	add.w	r3, r3, #15
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 800402c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004030:	f103 030d 	add.w	r3, r3, #13
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800403c:	f102 020d 	add.w	r2, r2, #13
 8004040:	7013      	strb	r3, [r2, #0]
 8004042:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004046:	f103 030d 	add.w	r3, r3, #13
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	f67f acde 	bls.w	8003a0e <findShorterWay+0x512>
 8004052:	e000      	b.n	8004056 <findShorterWay+0xb5a>
					break;
 8004054:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8004056:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800405a:	f103 030f 	add.w	r3, r3, #15
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 8004064:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004068:	f103 030e 	add.w	r3, r3, #14
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004074:	f102 020e 	add.w	r2, r2, #14
 8004078:	7013      	strb	r3, [r2, #0]
 800407a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800407e:	f103 030e 	add.w	r3, r3, #14
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	f67f acbb 	bls.w	8003a00 <findShorterWay+0x504>
 800408a:	e000      	b.n	800408e <findShorterWay+0xb92>
				break;
 800408c:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 800408e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004092:	f103 030f 	add.w	r3, r3, #15
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8272 	bne.w	8004582 <findShorterWay+0x1086>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 800409e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040a2:	f103 030b 	add.w	r3, r3, #11
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	f107 0310 	add.w	r3, r7, #16
 80040ac:	4619      	mov	r1, r3
 80040ae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	f001 f81a 	bl	80050ec <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 80040b8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 812c 	beq.w	8004320 <findShorterWay+0xe24>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80040c8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80040d8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80040e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	461a      	mov	r2, r3
 80040f2:	2334      	movs	r3, #52	; 0x34
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80040fc:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	441a      	add	r2, r3
 8004104:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	2b73      	cmp	r3, #115	; 0x73
 8004110:	d101      	bne.n	8004116 <findShorterWay+0xc1a>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8004112:	bf00      	nop
 8004114:	e013      	b.n	800413e <findShorterWay+0xc42>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8004116:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	461a      	mov	r2, r3
 8004120:	2334      	movs	r3, #52	; 0x34
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800412a:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	441a      	add	r2, r3
 8004132:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2144      	movs	r1, #68	; 0x44
 800413c:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 800413e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800414a:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	4413      	add	r3, r2
 8004152:	3308      	adds	r3, #8
 8004154:	edd3 7a00 	vldr	s15, [r3]
 8004158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415c:	ee17 2a90 	vmov	r2, s15
 8004160:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8004168:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004174:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	330c      	adds	r3, #12
 800417e:	edd3 7a00 	vldr	s15, [r3]
 8004182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004186:	ee17 2a90 	vmov	r2, s15
 800418a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8004192:	2300      	movs	r3, #0
 8004194:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004198:	f102 020e 	add.w	r2, r2, #14
 800419c:	7013      	strb	r3, [r2, #0]
 800419e:	e01e      	b.n	80041de <findShorterWay+0xce2>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 80041a0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80041a8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041ac:	f103 030e 	add.w	r3, r3, #14
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80041b6:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80041ba:	0089      	lsls	r1, r1, #2
 80041bc:	440b      	add	r3, r1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80041c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041cc:	f103 030e 	add.w	r3, r3, #14
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80041d8:	f102 020e 	add.w	r2, r2, #14
 80041dc:	7013      	strb	r3, [r2, #0]
 80041de:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80041e2:	f103 030e 	add.w	r3, r3, #14
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d9d9      	bls.n	80041a0 <findShorterWay+0xca4>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 80041ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80041fc:	f102 020e 	add.w	r2, r2, #14
 8004200:	7013      	strb	r3, [r2, #0]
 8004202:	e05f      	b.n	80042c4 <findShorterWay+0xdc8>
					for (j = 0 ; j < 4 ; j++){
 8004204:	2300      	movs	r3, #0
 8004206:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800420a:	f102 020d 	add.w	r2, r2, #13
 800420e:	7013      	strb	r3, [r2, #0]
 8004210:	e046      	b.n	80042a0 <findShorterWay+0xda4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8004212:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004216:	f103 030e 	add.w	r3, r3, #14
 800421a:	781c      	ldrb	r4, [r3, #0]
 800421c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004220:	f103 030d 	add.w	r3, r3, #13
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800422a:	f103 030e 	add.w	r3, r3, #14
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	1e58      	subs	r0, r3, #1
 8004232:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004236:	f103 030d 	add.w	r3, r3, #13
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004240:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004244:	00a4      	lsls	r4, r4, #2
 8004246:	4422      	add	r2, r4
 8004248:	0092      	lsls	r2, r2, #2
 800424a:	440a      	add	r2, r1
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004252:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004256:	0080      	lsls	r0, r0, #2
 8004258:	4403      	add	r3, r0
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8004260:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004264:	f103 030e 	add.w	r3, r3, #14
 8004268:	7819      	ldrb	r1, [r3, #0]
 800426a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800426e:	f103 030d 	add.w	r3, r3, #13
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004278:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800427c:	0089      	lsls	r1, r1, #2
 800427e:	440b      	add	r3, r1
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 800428a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800428e:	f103 030d 	add.w	r3, r3, #13
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800429a:	f102 020d 	add.w	r2, r2, #13
 800429e:	7013      	strb	r3, [r2, #0]
 80042a0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042a4:	f103 030d 	add.w	r3, r3, #13
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d9b1      	bls.n	8004212 <findShorterWay+0xd16>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 80042ae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042b2:	f103 030e 	add.w	r3, r3, #14
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80042be:	f102 020e 	add.w	r2, r2, #14
 80042c2:	7013      	strb	r3, [r2, #0]
 80042c4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042c8:	f103 030e 	add.w	r3, r3, #14
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042d2:	f103 030b 	add.w	r3, r3, #11
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d393      	bcc.n	8004204 <findShorterWay+0xd08>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80042dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042e0:	f103 030b 	add.w	r3, r3, #11
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80042ec:	f102 020b 	add.w	r2, r2, #11
 80042f0:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 80042f2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004302:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8004312:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800431e:	e124      	b.n	800456a <findShorterWay+0x106e>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8004320:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8004330:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8004340:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	461a      	mov	r2, r3
 800434a:	2334      	movs	r3, #52	; 0x34
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004354:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	441a      	add	r2, r3
 800435c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	5cd3      	ldrb	r3, [r2, r3]
 8004366:	2b73      	cmp	r3, #115	; 0x73
 8004368:	d101      	bne.n	800436e <findShorterWay+0xe72>
					// Dejamos el char de start tal cual como esta
					__NOP();
 800436a:	bf00      	nop
 800436c:	e013      	b.n	8004396 <findShorterWay+0xe9a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 800436e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	461a      	mov	r2, r3
 8004378:	2334      	movs	r3, #52	; 0x34
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004382:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	441a      	add	r2, r3
 800438a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2144      	movs	r1, #68	; 0x44
 8004394:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8004396:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043a2:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	3308      	adds	r3, #8
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b4:	ee17 2a90 	vmov	r2, s15
 80043b8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 80043c0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043cc:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	330c      	adds	r3, #12
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043de:	ee17 2a90 	vmov	r2, s15
 80043e2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 80043ea:	2300      	movs	r3, #0
 80043ec:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80043f0:	f102 020e 	add.w	r2, r2, #14
 80043f4:	7013      	strb	r3, [r2, #0]
 80043f6:	e01e      	b.n	8004436 <findShorterWay+0xf3a>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 80043f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004400:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004404:	f103 030e 	add.w	r3, r3, #14
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800440e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004412:	0089      	lsls	r1, r1, #2
 8004414:	440b      	add	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8004420:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004424:	f103 030e 	add.w	r3, r3, #14
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004430:	f102 020e 	add.w	r2, r2, #14
 8004434:	7013      	strb	r3, [r2, #0]
 8004436:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800443a:	f103 030e 	add.w	r3, r3, #14
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d9d9      	bls.n	80043f8 <findShorterWay+0xefc>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004444:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004454:	f102 020e 	add.w	r2, r2, #14
 8004458:	7013      	strb	r3, [r2, #0]
 800445a:	e05f      	b.n	800451c <findShorterWay+0x1020>
					for (j = 0 ; j < 4 ; j++){
 800445c:	2300      	movs	r3, #0
 800445e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004462:	f102 020d 	add.w	r2, r2, #13
 8004466:	7013      	strb	r3, [r2, #0]
 8004468:	e046      	b.n	80044f8 <findShorterWay+0xffc>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 800446a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800446e:	f103 030e 	add.w	r3, r3, #14
 8004472:	781c      	ldrb	r4, [r3, #0]
 8004474:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004478:	f103 030d 	add.w	r3, r3, #13
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004482:	f103 030e 	add.w	r3, r3, #14
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	1e58      	subs	r0, r3, #1
 800448a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800448e:	f103 030d 	add.w	r3, r3, #13
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004498:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 800449c:	00a4      	lsls	r4, r4, #2
 800449e:	4422      	add	r2, r4
 80044a0:	0092      	lsls	r2, r2, #2
 80044a2:	440a      	add	r2, r1
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80044aa:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80044ae:	0080      	lsls	r0, r0, #2
 80044b0:	4403      	add	r3, r0
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80044b8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044bc:	f103 030e 	add.w	r3, r3, #14
 80044c0:	7819      	ldrb	r1, [r3, #0]
 80044c2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044c6:	f103 030d 	add.w	r3, r3, #13
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80044d0:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80044d4:	0089      	lsls	r1, r1, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80044e2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044e6:	f103 030d 	add.w	r3, r3, #13
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80044f2:	f102 020d 	add.w	r2, r2, #13
 80044f6:	7013      	strb	r3, [r2, #0]
 80044f8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044fc:	f103 030d 	add.w	r3, r3, #13
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d9b1      	bls.n	800446a <findShorterWay+0xf6e>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004506:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800450a:	f103 030e 	add.w	r3, r3, #14
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004516:	f102 020e 	add.w	r2, r2, #14
 800451a:	7013      	strb	r3, [r2, #0]
 800451c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004520:	f103 030e 	add.w	r3, r3, #14
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800452a:	f103 030b 	add.w	r3, r3, #11
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d393      	bcc.n	800445c <findShorterWay+0xf60>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8004534:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004538:	f103 030b 	add.w	r3, r3, #11
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	3b01      	subs	r3, #1
 8004540:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004544:	f102 020b 	add.w	r2, r2, #11
 8004548:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 800454a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 800455a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 800456a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800456e:	f103 030a 	add.w	r3, r3, #10
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800457a:	f102 020a 	add.w	r2, r2, #10
 800457e:	7013      	strb	r3, [r2, #0]
 8004580:	e091      	b.n	80046a6 <findShorterWay+0x11aa>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8004582:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800458e:	f102 020e 	add.w	r2, r2, #14
 8004592:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 8004594:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80045a0:	f102 020d 	add.w	r2, r2, #13
 80045a4:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 80045a6:	e068      	b.n	800467a <findShorterWay+0x117e>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 80045a8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045ac:	f103 030e 	add.w	r3, r3, #14
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80045be:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	18d1      	adds	r1, r2, r3
 80045c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045ca:	f103 030d 	add.w	r3, r3, #13
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	330c      	adds	r3, #12
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e4:	ee17 3a90 	vmov	r3, s15
 80045e8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80045ec:	f102 0210 	add.w	r2, r2, #16
 80045f0:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 80045f2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045f6:	f103 030e 	add.w	r3, r3, #14
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004608:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	18d1      	adds	r1, r2, r3
 8004610:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004614:	f103 030d 	add.w	r3, r3, #13
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	440b      	add	r3, r1
 8004624:	3310      	adds	r3, #16
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462e:	ee17 3a90 	vmov	r3, s15
 8004632:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004636:	f102 0214 	add.w	r2, r2, #20
 800463a:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 800463c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004640:	f103 0310 	add.w	r3, r3, #16
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800464a:	f102 020e 	add.w	r2, r2, #14
 800464e:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8004650:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004654:	f103 0314 	add.w	r3, r3, #20
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800465e:	f102 020d 	add.w	r2, r2, #13
 8004662:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8004664:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004668:	f103 030c 	add.w	r3, r3, #12
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004674:	f102 020c 	add.w	r2, r2, #12
 8004678:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 800467a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800467e:	f103 030e 	add.w	r3, r3, #14
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2234      	movs	r2, #52	; 0x34
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800468e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	441a      	add	r2, r3
 8004696:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800469a:	f103 030d 	add.w	r3, r3, #13
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	2b73      	cmp	r3, #115	; 0x73
 80046a4:	d180      	bne.n	80045a8 <findShorterWay+0x10ac>
    while(!shorterWayFound){
 80046a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046aa:	f103 030f 	add.w	r3, r3, #15
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f43e affa 	beq.w	80036aa <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 80046b6:	49a4      	ldr	r1, [pc, #656]	; (8004948 <findShorterWay+0x144c>)
 80046b8:	48a4      	ldr	r0, [pc, #656]	; (800494c <findShorterWay+0x1450>)
 80046ba:	f004 fd7f 	bl	80091bc <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 80046be:	210d      	movs	r1, #13
 80046c0:	48a2      	ldr	r0, [pc, #648]	; (800494c <findShorterWay+0x1450>)
 80046c2:	f004 fd63 	bl	800918c <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 80046c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80046ca:	f103 030c 	add.w	r3, r3, #12
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80046d8:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 80046e0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80046ec:	f102 020e 	add.w	r2, r2, #14
 80046f0:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 80046f2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80046fe:	f102 020d 	add.w	r2, r2, #13
 8004702:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004704:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004708:	f103 030c 	add.w	r3, r3, #12
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004712:	f102 0204 	add.w	r2, r2, #4
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e0d1      	b.n	80048be <findShorterWay+0x13c2>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 800471a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800471e:	f103 030e 	add.w	r3, r3, #14
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2234      	movs	r2, #52	; 0x34
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800472e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	441a      	add	r2, r3
 8004736:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800473a:	f103 030d 	add.w	r3, r3, #13
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	2b65      	cmp	r3, #101	; 0x65
 8004744:	d101      	bne.n	800474a <findShorterWay+0x124e>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8004746:	bf00      	nop
 8004748:	e02c      	b.n	80047a4 <findShorterWay+0x12a8>
    	}else if (Gridcopy[i][j] == 's'){
 800474a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800474e:	f103 030e 	add.w	r3, r3, #14
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2234      	movs	r2, #52	; 0x34
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800475e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	441a      	add	r2, r3
 8004766:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800476a:	f103 030d 	add.w	r3, r3, #13
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	2b73      	cmp	r3, #115	; 0x73
 8004774:	d101      	bne.n	800477a <findShorterWay+0x127e>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8004776:	bf00      	nop
 8004778:	e014      	b.n	80047a4 <findShorterWay+0x12a8>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 800477a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800477e:	f103 030e 	add.w	r3, r3, #14
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2234      	movs	r2, #52	; 0x34
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800478e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	441a      	add	r2, r3
 8004796:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800479a:	f103 030d 	add.w	r3, r3, #13
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2149      	movs	r1, #73	; 0x49
 80047a2:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 80047a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047a8:	f103 0304 	add.w	r3, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80047b4:	f102 0204 	add.w	r2, r2, #4
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047c0:	f102 020e 	add.w	r2, r2, #14
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 80047c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047cc:	f103 0304 	add.w	r3, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80047d8:	f102 0204 	add.w	r2, r2, #4
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80047e4:	f102 020d 	add.w	r2, r2, #13
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 80047ec:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047f0:	f103 030e 	add.w	r3, r3, #14
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004802:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	18d1      	adds	r1, r2, r3
 800480a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800480e:	f103 030d 	add.w	r3, r3, #13
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	440b      	add	r3, r1
 800481e:	330c      	adds	r3, #12
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004828:	ee17 3a90 	vmov	r3, s15
 800482c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004830:	f102 0210 	add.w	r2, r2, #16
 8004834:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 8004836:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800483a:	f103 030e 	add.w	r3, r3, #14
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800484c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	18d1      	adds	r1, r2, r3
 8004854:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004858:	f103 030d 	add.w	r3, r3, #13
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	3310      	adds	r3, #16
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004872:	ee17 3a90 	vmov	r3, s15
 8004876:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800487a:	f102 0214 	add.w	r2, r2, #20
 800487e:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 8004880:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004884:	f103 0310 	add.w	r3, r3, #16
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800488e:	f102 020e 	add.w	r2, r2, #14
 8004892:	7013      	strb	r3, [r2, #0]
		j = position[1];
 8004894:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004898:	f103 0314 	add.w	r3, r3, #20
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80048a2:	f102 020d 	add.w	r2, r2, #13
 80048a6:	7013      	strb	r3, [r2, #0]
    for (int  k = numberOfPositions; k >= 0 ; k--){
 80048a8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048ac:	f103 0304 	add.w	r3, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80048b8:	f102 0204 	add.w	r2, r2, #4
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048c2:	f103 0304 	add.w	r3, r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f6bf af26 	bge.w	800471a <findShorterWay+0x121e>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80048ce:	2300      	movs	r3, #0
 80048d0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80048d4:	f102 0203 	add.w	r2, r2, #3
 80048d8:	7013      	strb	r3, [r2, #0]
 80048da:	e01c      	b.n	8004916 <findShorterWay+0x141a>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80048dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80048e0:	f103 0303 	add.w	r3, r3, #3
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2234      	movs	r2, #52	; 0x34
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80048f0:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4814      	ldr	r0, [pc, #80]	; (800494c <findShorterWay+0x1450>)
 80048fc:	f004 fc5e 	bl	80091bc <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004900:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004904:	f103 0303 	add.w	r3, r3, #3
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004910:	f102 0203 	add.w	r2, r2, #3
 8004914:	7013      	strb	r3, [r2, #0]
 8004916:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800491a:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	7a1b      	ldrb	r3, [r3, #8]
 8004922:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004926:	f102 0203 	add.w	r2, r2, #3
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3d5      	bcc.n	80048dc <findShorterWay+0x13e0>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 8004930:	4907      	ldr	r1, [pc, #28]	; (8004950 <findShorterWay+0x1454>)
 8004932:	4806      	ldr	r0, [pc, #24]	; (800494c <findShorterWay+0x1450>)
 8004934:	f004 fc42 	bl	80091bc <writeMsg>

    return 1;
 8004938:	2301      	movs	r3, #1


}
 800493a:	4618      	mov	r0, r3
 800493c:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	0800f86c 	.word	0x0800f86c
 800494c:	2000114c 	.word	0x2000114c
 8004950:	0800f8ac 	.word	0x0800f8ac

08004954 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa9a 	bl	8004e9c <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800496e:	b2d8      	uxtb	r0, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4413      	add	r3, r2
 800497a:	461a      	mov	r2, r3
 800497c:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	18d1      	adds	r1, r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	3304      	adds	r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4413      	add	r3, r2
 8004998:	1e5a      	subs	r2, r3, #1
 800499a:	ee07 0a90 	vmov	s15, r0
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	330c      	adds	r3, #12
 80049ae:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049b8:	b2d8      	uxtb	r0, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4413      	add	r3, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	18d1      	adds	r1, r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3304      	adds	r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	ee07 0a90 	vmov	s15, r0
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	440b      	add	r3, r1
 80049f6:	3310      	adds	r3, #16
 80049f8:	edc3 7a00 	vstr	s15, [r3]

}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	18d5      	adds	r5, r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	1e5c      	subs	r4, r3, #1
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f905 	bl	8004c50 <setGcost>
 8004a46:	eef0 7a40 	vmov.f32	s15, s0
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4423      	add	r3, r4
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	442b      	add	r3, r5
 8004a54:	edc3 7a00 	vstr	s15, [r3]
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bdb0      	pop	{r4, r5, r7, pc}

08004a60 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004a60:	b5b0      	push	{r4, r5, r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	18d5      	adds	r5, r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	1e5c      	subs	r4, r3, #1
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f9bd 	bl	8004e1e <setFcost>
 8004aa4:	eef0 7a40 	vmov.f32	s15, s0
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4423      	add	r3, r4
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	442b      	add	r3, r5
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	edc3 7a00 	vstr	s15, [r3]

}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bdb0      	pop	{r4, r5, r7, pc}

08004ac0 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f000 fa41 	bl	8004f66 <findEnd>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8004aea:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004aec:	2300      	movs	r3, #0
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e0a3      	b.n	8004c3a <setHeuristic+0x17a>
		return RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e0a8      	b.n	8004c48 <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8004af6:	2300      	movs	r3, #0
 8004af8:	77bb      	strb	r3, [r7, #30]
 8004afa:	e095      	b.n	8004c28 <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8004afc:	7ffa      	ldrb	r2, [r7, #31]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bfb8      	it	lt
 8004b08:	425b      	neglt	r3, r3
 8004b0a:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8004b0c:	7fba      	ldrb	r2, [r7, #30]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bfb8      	it	lt
 8004b18:	425b      	neglt	r3, r3
 8004b1a:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	dc3f      	bgt.n	8004ba4 <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b3c:	ee17 3a90 	vmov	r3, s15
 8004b40:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	edd3 6a00 	vldr	s13, [r3]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfb8      	it	lt
 8004b5c:	425b      	neglt	r3, r3
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b72:	ee17 3a90 	vmov	r3, s15
 8004b76:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
 8004b7a:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	18d1      	adds	r1, r2, r3
 8004b86:	7fba      	ldrb	r2, [r7, #30]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	edc3 7a00 	vstr	s15, [r3]
 8004ba2:	e03e      	b.n	8004c22 <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	ed93 7a01 	vldr	s14, [r3, #4]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bbc:	ee17 3a90 	vmov	r3, s15
 8004bc0:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	edd3 6a00 	vldr	s13, [r3]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfb8      	it	lt
 8004bdc:	425b      	neglt	r3, r3
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bf2:	ee17 3a90 	vmov	r3, s15
 8004bf6:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	18d1      	adds	r1, r2, r3
 8004c06:	7fba      	ldrb	r2, [r7, #30]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8004c22:	7fbb      	ldrb	r3, [r7, #30]
 8004c24:	3301      	adds	r3, #1
 8004c26:	77bb      	strb	r3, [r7, #30]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	7a5b      	ldrb	r3, [r3, #9]
 8004c2c:	7fba      	ldrb	r2, [r7, #30]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f4ff af64 	bcc.w	8004afc <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004c34:	7ffb      	ldrb	r3, [r7, #31]
 8004c36:	3301      	adds	r3, #1
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	7a1b      	ldrb	r3, [r3, #8]
 8004c3e:	7ffa      	ldrb	r2, [r7, #31]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f4ff af58 	bcc.w	8004af6 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 8004c46:	2301      	movs	r3, #1

}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfb8      	it	lt
 8004c78:	425b      	neglt	r3, r3
 8004c7a:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	425b      	neglt	r3, r3
 8004c8c:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4413      	add	r3, r2
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d05d      	beq.n	8004d5e <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d052      	beq.n	8004d5e <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	dc25      	bgt.n	8004d12 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	ed97 7a07 	vldr	s14, [r7, #28]
 8004cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	ed93 7a00 	vldr	s14, [r3]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bfb8      	it	lt
 8004cf6:	425b      	neglt	r3, r3
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0c:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004d10:	e077      	b.n	8004e02 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	ed93 7a00 	vldr	s14, [r3]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfb8      	it	lt
 8004d42:	425b      	neglt	r3, r3
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d50:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d58:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8004d5c:	e051      	b.n	8004e02 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dc25      	bgt.n	8004db8 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d80:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d88:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bfb8      	it	lt
 8004d9c:	425b      	neglt	r3, r3
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
 8004db6:	e024      	b.n	8004e02 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd4:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	ed93 7a00 	vldr	s14, [r3]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfb8      	it	lt
 8004de8:	425b      	neglt	r3, r3
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	ee07 3a90 	vmov	s15, r3
}
 8004e10:	eeb0 0a67 	vmov.f32	s0, s15
 8004e14:	3724      	adds	r7, #36	; 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff0d 	bl	8004c50 <setGcost>
 8004e36:	eef0 7a40 	vmov.f32	s15, s0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	18d1      	adds	r1, r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	1e5a      	subs	r2, r3, #1
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	440b      	add	r3, r1
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	ee07 3a90 	vmov	s15, r3

}
 8004e92:	eeb0 0a67 	vmov.f32	s0, s15
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4413      	add	r3, r2
 8004eb0:	1e5a      	subs	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d10c      	bne.n	8004ed4 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d101      	bne.n	8004ed4 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8004ed0:	bf00      	nop
 8004ed2:	e00c      	b.n	8004eee <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
 8004f0a:	e020      	b.n	8004f4e <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75bb      	strb	r3, [r7, #22]
 8004f10:	e015      	b.n	8004f3e <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2234      	movs	r2, #52	; 0x34
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	7dbb      	ldrb	r3, [r7, #22]
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	2b73      	cmp	r3, #115	; 0x73
 8004f24:	d107      	bne.n	8004f36 <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8004f26:	7dfa      	ldrb	r2, [r7, #23]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8004f2c:	7dba      	ldrb	r2, [r7, #22]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e011      	b.n	8004f5a <findStart+0x60>
			}else{
				__NOP();
 8004f36:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004f38:	7dbb      	ldrb	r3, [r7, #22]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	75bb      	strb	r3, [r7, #22]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	7a5b      	ldrb	r3, [r3, #9]
 8004f42:	7dba      	ldrb	r2, [r7, #22]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3e4      	bcc.n	8004f12 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	7a1b      	ldrb	r3, [r3, #8]
 8004f52:	7dfa      	ldrb	r2, [r7, #23]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3d9      	bcc.n	8004f0c <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8004f58:	2300      	movs	r3, #0



}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8004f66:	b480      	push	{r7}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
 8004f76:	e020      	b.n	8004fba <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75bb      	strb	r3, [r7, #22]
 8004f7c:	e015      	b.n	8004faa <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2234      	movs	r2, #52	; 0x34
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	441a      	add	r2, r3
 8004f8a:	7dbb      	ldrb	r3, [r7, #22]
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
 8004f8e:	2b65      	cmp	r3, #101	; 0x65
 8004f90:	d107      	bne.n	8004fa2 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8004f92:	7dfa      	ldrb	r2, [r7, #23]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8004f98:	7dba      	ldrb	r2, [r7, #22]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e011      	b.n	8004fc6 <findEnd+0x60>
			}else{
				__NOP();
 8004fa2:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8004fa4:	7dbb      	ldrb	r3, [r7, #22]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	75bb      	strb	r3, [r7, #22]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	7a5b      	ldrb	r3, [r3, #9]
 8004fae:	7dba      	ldrb	r2, [r7, #22]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3e4      	bcc.n	8004f7e <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	7a1b      	ldrb	r3, [r3, #8]
 8004fbe:	7dfa      	ldrb	r2, [r7, #23]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3d9      	bcc.n	8004f78 <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8004fc4:	2300      	movs	r3, #0

}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 8004fd2:	b480      	push	{r7}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e03d      	b.n	8005060 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	75bb      	strb	r3, [r7, #22]
 8004fe8:	e031      	b.n	800504e <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	7a5b      	ldrb	r3, [r3, #9]
 8004fee:	7dba      	ldrb	r2, [r7, #22]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d109      	bne.n	8005008 <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2234      	movs	r2, #52	; 0x34
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	441a      	add	r2, r3
 8005000:	7dbb      	ldrb	r3, [r7, #22]
 8005002:	210d      	movs	r1, #13
 8005004:	54d1      	strb	r1, [r2, r3]
 8005006:	e01f      	b.n	8005048 <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8005008:	7dba      	ldrb	r2, [r7, #22]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	7a5b      	ldrb	r3, [r3, #9]
 800500e:	3301      	adds	r3, #1
 8005010:	429a      	cmp	r2, r3
 8005012:	d109      	bne.n	8005028 <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2234      	movs	r2, #52	; 0x34
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	441a      	add	r2, r3
 8005020:	7dbb      	ldrb	r3, [r7, #22]
 8005022:	2100      	movs	r1, #0
 8005024:	54d1      	strb	r1, [r2, r3]
 8005026:	e00f      	b.n	8005048 <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	2234      	movs	r2, #52	; 0x34
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	18d0      	adds	r0, r2, r3
 8005034:	7db9      	ldrb	r1, [r7, #22]
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	2234      	movs	r2, #52	; 0x34
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	441a      	add	r2, r3
 8005042:	7dbb      	ldrb	r3, [r7, #22]
 8005044:	5c41      	ldrb	r1, [r0, r1]
 8005046:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8005048:	7dbb      	ldrb	r3, [r7, #22]
 800504a:	3301      	adds	r3, #1
 800504c:	75bb      	strb	r3, [r7, #22]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	7a5b      	ldrb	r3, [r3, #9]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	7dbb      	ldrb	r3, [r7, #22]
 8005056:	429a      	cmp	r2, r3
 8005058:	dac7      	bge.n	8004fea <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	3301      	adds	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	7a1b      	ldrb	r3, [r3, #8]
 8005064:	7dfa      	ldrb	r2, [r7, #23]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3bc      	bcc.n	8004fe4 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8005084:	2300      	movs	r3, #0
 8005086:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8005088:	e00a      	b.n	80050a0 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2234      	movs	r2, #52	; 0x34
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	3301      	adds	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2234      	movs	r2, #52	; 0x34
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1eb      	bne.n	800508a <getRows+0x12>

	}

	return counterRows;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80050cc:	e002      	b.n	80050d4 <getColums+0x14>

		counterColumns++;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	3301      	adds	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	5cd3      	ldrb	r3, [r2, r3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f7      	bne.n	80050ce <getColums+0xe>

	}

	return counterColumns;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8005106:	2300      	movs	r3, #0
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e04d      	b.n	80051a8 <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 800510c:	2300      	movs	r3, #0
 800510e:	77bb      	strb	r3, [r7, #30]
 8005110:	e034      	b.n	800517c <findLesserValue+0x90>
			if (i == j){
 8005112:	7ffa      	ldrb	r2, [r7, #31]
 8005114:	7fbb      	ldrb	r3, [r7, #30]
 8005116:	429a      	cmp	r2, r3
 8005118:	d101      	bne.n	800511e <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 800511a:	bf00      	nop
 800511c:	e02b      	b.n	8005176 <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 800511e:	7ffb      	ldrb	r3, [r7, #31]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 800512a:	7fbb      	ldrb	r3, [r7, #30]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4413      	add	r3, r2
 8005132:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8005136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	d41a      	bmi.n	8005176 <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8005140:	7ffb      	ldrb	r3, [r7, #31]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4413      	add	r3, r2
 8005148:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 800514c:	7fbb      	ldrb	r3, [r7, #30]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4413      	add	r3, r2
 8005154:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8005158:	eeb4 7a67 	vcmp.f32	s14, s15
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	d104      	bne.n	800516c <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800516a:	e004      	b.n	8005176 <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8005174:	e006      	b.n	8005184 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8005176:	7fbb      	ldrb	r3, [r7, #30]
 8005178:	3301      	adds	r3, #1
 800517a:	77bb      	strb	r3, [r7, #30]
 800517c:	7fba      	ldrb	r2, [r7, #30]
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d3c6      	bcc.n	8005112 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8005184:	7fba      	ldrb	r2, [r7, #30]
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	429a      	cmp	r2, r3
 800518a:	d10a      	bne.n	80051a2 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 800518c:	7ffa      	ldrb	r2, [r7, #31]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 80051a0:	e006      	b.n	80051b0 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	3301      	adds	r3, #1
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	7ffa      	ldrb	r2, [r7, #31]
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d3ad      	bcc.n	800510c <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d076      	beq.n	80052a8 <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 80051ba:	2300      	movs	r3, #0
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e06e      	b.n	800529e <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	4413      	add	r3, r2
 80051c8:	edd3 6a00 	vldr	s13, [r3]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80051d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d6:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 80051da:	2300      	movs	r3, #0
 80051dc:	77bb      	strb	r3, [r7, #30]
 80051de:	e045      	b.n	800526c <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 80051e0:	7fbb      	ldrb	r3, [r7, #30]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4413      	add	r3, r2
 80051e8:	edd3 6a00 	vldr	s13, [r3]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 80051fa:	7ffa      	ldrb	r2, [r7, #31]
 80051fc:	7fbb      	ldrb	r3, [r7, #30]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d101      	bne.n	8005206 <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8005202:	bf00      	nop
 8005204:	e02f      	b.n	8005266 <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8005206:	edd7 7a06 	vldr	s15, [r7, #24]
 800520a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800520e:	eef4 7a47 	vcmp.f32	s15, s14
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	d11c      	bne.n	8005252 <findLesserValue+0x166>
 8005218:	edd7 7a05 	vldr	s15, [r7, #20]
 800521c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005220:	eef4 7a47 	vcmp.f32	s15, s14
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	d113      	bne.n	8005252 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4413      	add	r3, r2
 8005232:	ed93 7a01 	vldr	s14, [r3, #4]
 8005236:	7fbb      	ldrb	r3, [r7, #30]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d900      	bls.n	800524e <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 800524c:	e014      	b.n	8005278 <findLesserValue+0x18c>
						__NOP();
 800524e:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8005250:	e009      	b.n	8005266 <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8005252:	edd7 7a06 	vldr	s15, [r7, #24]
 8005256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800525a:	eef4 7a47 	vcmp.f32	s15, s14
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d108      	bne.n	8005276 <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8005264:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8005266:	7fbb      	ldrb	r3, [r7, #30]
 8005268:	3301      	adds	r3, #1
 800526a:	77bb      	strb	r3, [r7, #30]
 800526c:	7fba      	ldrb	r2, [r7, #30]
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d3b5      	bcc.n	80051e0 <findLesserValue+0xf4>
 8005274:	e000      	b.n	8005278 <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8005276:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8005278:	7fba      	ldrb	r2, [r7, #30]
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d10b      	bne.n	8005298 <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8005280:	7ffa      	ldrb	r2, [r7, #31]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8005286:	7ffb      	ldrb	r3, [r7, #31]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8005294:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8005296:	e008      	b.n	80052aa <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8005298:	7ffb      	ldrb	r3, [r7, #31]
 800529a:	3301      	adds	r3, #1
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	7ffa      	ldrb	r2, [r7, #31]
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d38c      	bcc.n	80051c0 <findLesserValue+0xd4>
}
 80052a6:	e000      	b.n	80052aa <findLesserValue+0x1be>
		__NOP();
 80052a8:	bf00      	nop
}
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <initSerialComunication+0xc8>)
 80052ca:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <initSerialComunication+0xc8>)
 80052d2:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	79da      	ldrb	r2, [r3, #7]
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <initSerialComunication+0xc8>)
 80052da:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	791a      	ldrb	r2, [r3, #4]
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <initSerialComunication+0xc8>)
 80052e2:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	799a      	ldrb	r2, [r3, #6]
 80052e8:	4b25      	ldr	r3, [pc, #148]	; (8005380 <initSerialComunication+0xc8>)
 80052ea:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	7a5a      	ldrb	r2, [r3, #9]
 80052f0:	4b23      	ldr	r3, [pc, #140]	; (8005380 <initSerialComunication+0xc8>)
 80052f2:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	7a9a      	ldrb	r2, [r3, #10]
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <initSerialComunication+0xc8>)
 80052fa:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	7a1a      	ldrb	r2, [r3, #8]
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <initSerialComunication+0xc8>)
 8005302:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <initSerialComunication+0xcc>)
 800530a:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	7a5a      	ldrb	r2, [r3, #9]
 8005310:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <initSerialComunication+0xcc>)
 8005312:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	795a      	ldrb	r2, [r3, #5]
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <initSerialComunication+0xcc>)
 800531a:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	7a1a      	ldrb	r2, [r3, #8]
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <initSerialComunication+0xcc>)
 8005322:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	791a      	ldrb	r2, [r3, #4]
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <initSerialComunication+0xcc>)
 800532a:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	79da      	ldrb	r2, [r3, #7]
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <initSerialComunication+0xcc>)
 8005332:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	799a      	ldrb	r2, [r3, #6]
 8005338:	4b12      	ldr	r3, [pc, #72]	; (8005384 <initSerialComunication+0xcc>)
 800533a:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a11      	ldr	r2, [pc, #68]	; (8005388 <initSerialComunication+0xd0>)
 8005342:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	7a5a      	ldrb	r2, [r3, #9]
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <initSerialComunication+0xd0>)
 800534a:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	795a      	ldrb	r2, [r3, #5]
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <initSerialComunication+0xd0>)
 8005352:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7a1a      	ldrb	r2, [r3, #8]
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <initSerialComunication+0xd0>)
 800535a:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	791a      	ldrb	r2, [r3, #4]
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <initSerialComunication+0xd0>)
 8005362:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	79da      	ldrb	r2, [r3, #7]
 8005368:	4b07      	ldr	r3, [pc, #28]	; (8005388 <initSerialComunication+0xd0>)
 800536a:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	799a      	ldrb	r2, [r3, #6]
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <initSerialComunication+0xd0>)
 8005372:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	2000114c 	.word	0x2000114c
 8005384:	200011e0 	.word	0x200011e0
 8005388:	200011ec 	.word	0x200011ec

0800538c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539a:	2b00      	cmp	r3, #0
 800539c:	db0b      	blt.n	80053b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	f003 021f 	and.w	r2, r3, #31
 80053a4:	4907      	ldr	r1, [pc, #28]	; (80053c4 <__NVIC_EnableIRQ+0x38>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2001      	movs	r0, #1
 80053ae:	fa00 f202 	lsl.w	r2, r0, r2
 80053b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	e000e100 	.word	0xe000e100

080053c8 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <inTIM4+0x30>)
 80053ce:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <inTIM4+0x34>)
 80053d0:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <inTIM4+0x30>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <inTIM4+0x30>)
 80053da:	2200      	movs	r2, #0
 80053dc:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <inTIM4+0x30>)
 80053e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80053e4:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 80053e6:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <inTIM4+0x30>)
 80053e8:	220a      	movs	r2, #10
 80053ea:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 80053ec:	4802      	ldr	r0, [pc, #8]	; (80053f8 <inTIM4+0x30>)
 80053ee:	f000 f807 	bl	8005400 <BasicTimer_Config>

}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200002d8 	.word	0x200002d8
 80053fc:	40000800 	.word	0x40000800

08005400 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005410:	b672      	cpsid	i
}
 8005412:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a85      	ldr	r2, [pc, #532]	; (8005630 <BasicTimer_Config+0x230>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d106      	bne.n	800542c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800541e:	4b85      	ldr	r3, [pc, #532]	; (8005634 <BasicTimer_Config+0x234>)
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	4a84      	ldr	r2, [pc, #528]	; (8005634 <BasicTimer_Config+0x234>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	6453      	str	r3, [r2, #68]	; 0x44
 800542a:	e030      	b.n	800548e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d106      	bne.n	8005444 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005436:	4b7f      	ldr	r3, [pc, #508]	; (8005634 <BasicTimer_Config+0x234>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	4a7e      	ldr	r2, [pc, #504]	; (8005634 <BasicTimer_Config+0x234>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6413      	str	r3, [r2, #64]	; 0x40
 8005442:	e024      	b.n	800548e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a7b      	ldr	r2, [pc, #492]	; (8005638 <BasicTimer_Config+0x238>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d106      	bne.n	800545c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800544e:	4b79      	ldr	r3, [pc, #484]	; (8005634 <BasicTimer_Config+0x234>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4a78      	ldr	r2, [pc, #480]	; (8005634 <BasicTimer_Config+0x234>)
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	6413      	str	r3, [r2, #64]	; 0x40
 800545a:	e018      	b.n	800548e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a76      	ldr	r2, [pc, #472]	; (800563c <BasicTimer_Config+0x23c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d106      	bne.n	8005474 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005466:	4b73      	ldr	r3, [pc, #460]	; (8005634 <BasicTimer_Config+0x234>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a72      	ldr	r2, [pc, #456]	; (8005634 <BasicTimer_Config+0x234>)
 800546c:	f043 0304 	orr.w	r3, r3, #4
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	e00c      	b.n	800548e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a71      	ldr	r2, [pc, #452]	; (8005640 <BasicTimer_Config+0x240>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d106      	bne.n	800548c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800547e:	4b6d      	ldr	r3, [pc, #436]	; (8005634 <BasicTimer_Config+0x234>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a6c      	ldr	r2, [pc, #432]	; (8005634 <BasicTimer_Config+0x234>)
 8005484:	f043 0308 	orr.w	r3, r3, #8
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	e000      	b.n	800548e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800548c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800549c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	791b      	ldrb	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 80d3 	bne.w	8005658 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0210 	bic.w	r2, r2, #16
 80054c0:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2ba0      	cmp	r3, #160	; 0xa0
 80054cc:	d022      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2bc8      	cmp	r3, #200	; 0xc8
 80054d2:	d01f      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80054da:	d01b      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80054e2:	d017      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054ea:	d013      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80054f2:	d00f      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80054fa:	d00b      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005502:	d007      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800550a:	d003      	beq.n	8005514 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005512:	d10b      	bne.n	800552c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2264      	movs	r2, #100	; 0x64
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	3a01      	subs	r2, #1
 8005528:	62da      	str	r2, [r3, #44]	; 0x2c
 800552a:	e07c      	b.n	8005626 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005532:	d029      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800553a:	d025      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005542:	4293      	cmp	r3, r2
 8005544:	d020      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800554c:	d01c      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	4293      	cmp	r3, r2
 8005556:	d017      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f241 7270 	movw	r2, #6000	; 0x1770
 800555e:	4293      	cmp	r3, r2
 8005560:	d012      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005568:	4293      	cmp	r3, r2
 800556a:	d00d      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005572:	d009      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f242 3228 	movw	r2, #9000	; 0x2328
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f242 7210 	movw	r2, #10000	; 0x2710
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	3a01      	subs	r2, #1
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c
 80055a0:	e041      	b.n	8005626 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80055a8:	d028      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d023      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01e      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d019      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d014      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a19      	ldr	r2, [pc, #100]	; (8005644 <BasicTimer_Config+0x244>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <BasicTimer_Config+0x248>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4a17      	ldr	r2, [pc, #92]	; (800564c <BasicTimer_Config+0x24c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <BasicTimer_Config+0x250>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d108      	bne.n	800560e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	3a01      	subs	r2, #1
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
 800560c:	e00b      	b.n	8005626 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <BasicTimer_Config+0x254>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	08db      	lsrs	r3, r3, #3
 800561a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	3a01      	subs	r2, #1
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
 800562e:	e027      	b.n	8005680 <BasicTimer_Config+0x280>
 8005630:	40010000 	.word	0x40010000
 8005634:	40023800 	.word	0x40023800
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	00011170 	.word	0x00011170
 8005648:	00013880 	.word	0x00013880
 800564c:	00015f90 	.word	0x00015f90
 8005650:	000186a0 	.word	0x000186a0
 8005654:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0210 	orr.w	r2, r2, #16
 8005666:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3a01      	subs	r2, #1
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3a01      	subs	r2, #1
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7c1b      	ldrb	r3, [r3, #16]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d12d      	bne.n	80056e4 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d103      	bne.n	80056aa <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 80056a2:	201c      	movs	r0, #28
 80056a4:	f7ff fe72 	bl	800538c <__NVIC_EnableIRQ>
 80056a8:	e024      	b.n	80056f4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a14      	ldr	r2, [pc, #80]	; (8005700 <BasicTimer_Config+0x300>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d103      	bne.n	80056bc <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 80056b4:	201d      	movs	r0, #29
 80056b6:	f7ff fe69 	bl	800538c <__NVIC_EnableIRQ>
 80056ba:	e01b      	b.n	80056f4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a10      	ldr	r2, [pc, #64]	; (8005704 <BasicTimer_Config+0x304>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d103      	bne.n	80056ce <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 80056c6:	201e      	movs	r0, #30
 80056c8:	f7ff fe60 	bl	800538c <__NVIC_EnableIRQ>
 80056cc:	e012      	b.n	80056f4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a0d      	ldr	r2, [pc, #52]	; (8005708 <BasicTimer_Config+0x308>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 80056d8:	2032      	movs	r0, #50	; 0x32
 80056da:	f7ff fe57 	bl	800538c <__NVIC_EnableIRQ>
 80056de:	e009      	b.n	80056f4 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 80056e0:	bf00      	nop
 80056e2:	e007      	b.n	80056f4 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80056f4:	b662      	cpsie	i
}
 80056f6:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00

0800570c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8005716:	4818      	ldr	r0, [pc, #96]	; (8005778 <delay_ms+0x6c>)
 8005718:	f000 fa6e 	bl	8005bf8 <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	461a      	mov	r2, r3
 8005720:	0092      	lsls	r2, r2, #2
 8005722:	4413      	add	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8005730:	e016      	b.n	8005760 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <delay_ms+0x6c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <delay_ms+0x6c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	3301      	adds	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	4413      	add	r3, r2
 800574e:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <delay_ms+0x6c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <delay_ms+0x6c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8005760:	89fa      	ldrh	r2, [r7, #14]
 8005762:	89bb      	ldrh	r3, [r7, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d3e4      	bcc.n	8005732 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8005768:	4803      	ldr	r0, [pc, #12]	; (8005778 <delay_ms+0x6c>)
 800576a:	f000 fa57 	bl	8005c1c <stopTimer>
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200002d8 	.word	0x200002d8

0800577c <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005780:	bf00      	nop
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005790:	bf00      	nop
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057a0:	bf00      	nop
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057b0:	bf00      	nop
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057c0:	bf00      	nop
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057d0:	bf00      	nop
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057e0:	bf00      	nop
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80057f0:	bf00      	nop
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005800:	bf00      	nop
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005810:	bf00      	nop
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005820:	bf00      	nop
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005830:	bf00      	nop
}
 8005832:	bf00      	nop
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005840:	bf00      	nop
}
 8005842:	bf00      	nop
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005850:	bf00      	nop
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005860:	bf00      	nop
}
 8005862:	bf00      	nop
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005870:	bf00      	nop
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005880:	bf00      	nop
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800589e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80058ae:	f7fc f8c5 	bl	8001a3c <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80058b2:	e066      	b.n	8005982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80058b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80058c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058cc:	f023 0302 	bic.w	r3, r3, #2
 80058d0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80058d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80058e2:	f7ff ff5b 	bl	800579c <Capture_TIM2_Ch1_Callback>
}
 80058e6:	e04c      	b.n	8005982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80058e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d012      	beq.n	800591c <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80058f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8005906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005914:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8005916:	f7ff ff49 	bl	80057ac <Capture_TIM2_Ch2_Callback>
}
 800591a:	e032      	b.n	8005982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 800591c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800592a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005934:	f023 0308 	bic.w	r3, r3, #8
 8005938:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800593a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005948:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800594a:	f7ff ff37 	bl	80057bc <Capture_TIM2_Ch3_Callback>
}
 800594e:	e018      	b.n	8005982 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8005950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	d011      	beq.n	8005982 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800595e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005968:	f023 0310 	bic.w	r3, r3, #16
 800596c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800596e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800597c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800597e:	f7ff ff25 	bl	80057cc <Capture_TIM2_Ch4_Callback>
}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 800598c:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8005998:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	4a2d      	ldr	r2, [pc, #180]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80059a4:	f7fc f840 	bl	8001a28 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80059a8:	e052      	b.n	8005a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80059aa:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80059b6:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059bc:	f023 0302 	bic.w	r3, r3, #2
 80059c0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80059c2:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059cc:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80059ce:	f7ff ff05 	bl	80057dc <Capture_TIM3_Ch1_Callback>
}
 80059d2:	e03d      	b.n	8005a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80059d4:	4b1f      	ldr	r3, [pc, #124]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00e      	beq.n	80059fe <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80059e0:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059e6:	f023 0304 	bic.w	r3, r3, #4
 80059ea:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 80059f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f6:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80059f8:	f7ff fef8 	bl	80057ec <Capture_TIM3_Ch2_Callback>
}
 80059fc:	e028      	b.n	8005a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a10:	f023 0308 	bic.w	r3, r3, #8
 8005a14:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a20:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8005a22:	f7ff feeb 	bl	80057fc <Capture_TIM3_Ch3_Callback>
}
 8005a26:	e013      	b.n	8005a50 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	4a06      	ldr	r2, [pc, #24]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a3a:	f023 0310 	bic.w	r3, r3, #16
 8005a3e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <TIM3_IRQHandler+0xcc>)
 8005a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a4a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8005a4c:	f7ff fede 	bl	800580c <Capture_TIM3_Ch4_Callback>
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40000400 	.word	0x40000400

08005a58 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8005a5c:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8005a68:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8005a74:	f7ff fe82 	bl	800577c <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8005a78:	e052      	b.n	8005b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8005a86:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4a23      	ldr	r2, [pc, #140]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a9c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8005a9e:	f7ff febd 	bl	800581c <Capture_TIM4_Ch1_Callback>
}
 8005aa2:	e03d      	b.n	8005b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ab6:	f023 0304 	bic.w	r3, r3, #4
 8005aba:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8005ac8:	f7ff fec8 	bl	800585c <Capture_TIM5_Ch2_Callback>
}
 8005acc:	e028      	b.n	8005b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00e      	beq.n	8005af8 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ae0:	f023 0308 	bic.w	r3, r3, #8
 8005ae4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8005af2:	f7ff fe9b 	bl	800582c <Capture_TIM4_Ch3_Callback>
}
 8005af6:	e013      	b.n	8005b20 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4a06      	ldr	r2, [pc, #24]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005b0a:	f023 0310 	bic.w	r3, r3, #16
 8005b0e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <TIM4_IRQHandler+0xcc>)
 8005b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1a:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8005b1c:	f7ff fe8e 	bl	800583c <Capture_TIM4_Ch4_Callback>
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40000800 	.word	0x40000800

08005b28 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8005b2c:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8005b38:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8005b44:	f7ff fe22 	bl	800578c <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8005b48:	e052      	b.n	8005bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b5c:	f023 0302 	bic.w	r3, r3, #2
 8005b60:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8005b6e:	f7ff fe6d 	bl	800584c <Capture_TIM5_Ch1_Callback>
}
 8005b72:	e03d      	b.n	8005bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00e      	beq.n	8005b9e <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b86:	f023 0304 	bic.w	r3, r3, #4
 8005b8a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b96:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8005b98:	f7ff fe60 	bl	800585c <Capture_TIM5_Ch2_Callback>
}
 8005b9c:	e028      	b.n	8005bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00e      	beq.n	8005bc8 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bb0:	f023 0308 	bic.w	r3, r3, #8
 8005bb4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8005bc2:	f7ff fe53 	bl	800586c <Capture_TIM5_Ch3_Callback>
}
 8005bc6:	e013      	b.n	8005bf0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8005bd4:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	4a06      	ldr	r2, [pc, #24]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005bda:	f023 0310 	bic.w	r3, r3, #16
 8005bde:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	4a03      	ldr	r2, [pc, #12]	; (8005bf4 <TIM5_IRQHandler+0xcc>)
 8005be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bea:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8005bec:	f7ff fe46 	bl	800587c <Capture_TIM5_Ch4_Callback>
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40000c00 	.word	0x40000c00

08005bf8 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <__NVIC_EnableIRQ>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db0b      	blt.n	8005c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f003 021f 	and.w	r2, r3, #31
 8005c58:	4907      	ldr	r1, [pc, #28]	; (8005c78 <__NVIC_EnableIRQ+0x38>)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2001      	movs	r0, #1
 8005c62:	fa00 f202 	lsl.w	r2, r0, r2
 8005c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000e100 	.word	0xe000e100

08005c7c <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 f825 	bl	8006cd8 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8005c8e:	4b96      	ldr	r3, [pc, #600]	; (8005ee8 <extInt_Config+0x26c>)
 8005c90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c94:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	2b0f      	cmp	r3, #15
 8005c9e:	f200 85cd 	bhi.w	800683c <extInt_Config+0xbc0>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <extInt_Config+0x2c>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005d9f 	.word	0x08005d9f
 8005cb0:	08005e55 	.word	0x08005e55
 8005cb4:	08005f2b 	.word	0x08005f2b
 8005cb8:	08005fe1 	.word	0x08005fe1
 8005cbc:	0800608f 	.word	0x0800608f
 8005cc0:	08006155 	.word	0x08006155
 8005cc4:	080061fd 	.word	0x080061fd
 8005cc8:	080062a5 	.word	0x080062a5
 8005ccc:	0800634d 	.word	0x0800634d
 8005cd0:	08006413 	.word	0x08006413
 8005cd4:	080064bb 	.word	0x080064bb
 8005cd8:	08006563 	.word	0x08006563
 8005cdc:	08006629 	.word	0x08006629
 8005ce0:	080066cf 	.word	0x080066cf
 8005ce4:	08006777 	.word	0x08006777
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8005ce8:	4b80      	ldr	r3, [pc, #512]	; (8005eec <extInt_Config+0x270>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a7f      	ldr	r2, [pc, #508]	; (8005eec <extInt_Config+0x270>)
 8005cee:	f023 030f 	bic.w	r3, r3, #15
 8005cf2:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a7d      	ldr	r2, [pc, #500]	; (8005ef0 <extInt_Config+0x274>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d105      	bne.n	8005d0c <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8005d00:	4b7a      	ldr	r3, [pc, #488]	; (8005eec <extInt_Config+0x270>)
 8005d02:	4a7a      	ldr	r2, [pc, #488]	; (8005eec <extInt_Config+0x270>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005d08:	f000 bd9a 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a78      	ldr	r2, [pc, #480]	; (8005ef4 <extInt_Config+0x278>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d107      	bne.n	8005d28 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8005d18:	4b74      	ldr	r3, [pc, #464]	; (8005eec <extInt_Config+0x270>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a73      	ldr	r2, [pc, #460]	; (8005eec <extInt_Config+0x270>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6093      	str	r3, [r2, #8]
					break;
 8005d24:	f000 bd8c 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a72      	ldr	r2, [pc, #456]	; (8005ef8 <extInt_Config+0x27c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d107      	bne.n	8005d44 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005d34:	4b6d      	ldr	r3, [pc, #436]	; (8005eec <extInt_Config+0x270>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a6c      	ldr	r2, [pc, #432]	; (8005eec <extInt_Config+0x270>)
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	6093      	str	r3, [r2, #8]
					break;
 8005d40:	f000 bd7e 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6c      	ldr	r2, [pc, #432]	; (8005efc <extInt_Config+0x280>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d107      	bne.n	8005d60 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005d50:	4b66      	ldr	r3, [pc, #408]	; (8005eec <extInt_Config+0x270>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a65      	ldr	r2, [pc, #404]	; (8005eec <extInt_Config+0x270>)
 8005d56:	f043 0303 	orr.w	r3, r3, #3
 8005d5a:	6093      	str	r3, [r2, #8]
					break;
 8005d5c:	f000 bd70 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a66      	ldr	r2, [pc, #408]	; (8005f00 <extInt_Config+0x284>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d107      	bne.n	8005d7c <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005d6c:	4b5f      	ldr	r3, [pc, #380]	; (8005eec <extInt_Config+0x270>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a5e      	ldr	r2, [pc, #376]	; (8005eec <extInt_Config+0x270>)
 8005d72:	f043 0304 	orr.w	r3, r3, #4
 8005d76:	6093      	str	r3, [r2, #8]
					break;
 8005d78:	f000 bd62 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a60      	ldr	r2, [pc, #384]	; (8005f04 <extInt_Config+0x288>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d107      	bne.n	8005d98 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005d88:	4b58      	ldr	r3, [pc, #352]	; (8005eec <extInt_Config+0x270>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a57      	ldr	r2, [pc, #348]	; (8005eec <extInt_Config+0x270>)
 8005d8e:	f043 0307 	orr.w	r3, r3, #7
 8005d92:	6093      	str	r3, [r2, #8]
					break;
 8005d94:	f000 bd54 	b.w	8006840 <extInt_Config+0xbc4>
						__NOP();
 8005d98:	bf00      	nop
					break;
 8005d9a:	f000 bd51 	b.w	8006840 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8005d9e:	4b53      	ldr	r3, [pc, #332]	; (8005eec <extInt_Config+0x270>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a52      	ldr	r2, [pc, #328]	; (8005eec <extInt_Config+0x270>)
 8005da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da8:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <extInt_Config+0x274>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d105      	bne.n	8005dc2 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005db6:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <extInt_Config+0x270>)
 8005db8:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <extInt_Config+0x270>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005dbe:	f000 bd3f 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a4a      	ldr	r2, [pc, #296]	; (8005ef4 <extInt_Config+0x278>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d107      	bne.n	8005dde <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <extInt_Config+0x270>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	4a46      	ldr	r2, [pc, #280]	; (8005eec <extInt_Config+0x270>)
 8005dd4:	f043 0310 	orr.w	r3, r3, #16
 8005dd8:	6093      	str	r3, [r2, #8]
					break;
 8005dda:	f000 bd31 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a44      	ldr	r2, [pc, #272]	; (8005ef8 <extInt_Config+0x27c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d107      	bne.n	8005dfa <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8005dea:	4b40      	ldr	r3, [pc, #256]	; (8005eec <extInt_Config+0x270>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4a3f      	ldr	r2, [pc, #252]	; (8005eec <extInt_Config+0x270>)
 8005df0:	f043 0320 	orr.w	r3, r3, #32
 8005df4:	6093      	str	r3, [r2, #8]
					break;
 8005df6:	f000 bd23 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a3e      	ldr	r2, [pc, #248]	; (8005efc <extInt_Config+0x280>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d107      	bne.n	8005e16 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <extInt_Config+0x270>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <extInt_Config+0x270>)
 8005e0c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005e10:	6093      	str	r3, [r2, #8]
					break;
 8005e12:	f000 bd15 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <extInt_Config+0x284>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d107      	bne.n	8005e32 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005e22:	4b32      	ldr	r3, [pc, #200]	; (8005eec <extInt_Config+0x270>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4a31      	ldr	r2, [pc, #196]	; (8005eec <extInt_Config+0x270>)
 8005e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2c:	6093      	str	r3, [r2, #8]
					break;
 8005e2e:	f000 bd07 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <extInt_Config+0x288>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d107      	bne.n	8005e4e <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005e3e:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <extInt_Config+0x270>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <extInt_Config+0x270>)
 8005e44:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005e48:	6093      	str	r3, [r2, #8]
					break;
 8005e4a:	f000 bcf9 	b.w	8006840 <extInt_Config+0xbc4>
						__NOP();
 8005e4e:	bf00      	nop
					break;
 8005e50:	f000 bcf6 	b.w	8006840 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8005e54:	4b25      	ldr	r3, [pc, #148]	; (8005eec <extInt_Config+0x270>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4a24      	ldr	r2, [pc, #144]	; (8005eec <extInt_Config+0x270>)
 8005e5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e5e:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <extInt_Config+0x274>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d105      	bne.n	8005e78 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005e6c:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <extInt_Config+0x270>)
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <extInt_Config+0x270>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005e74:	f000 bce4 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <extInt_Config+0x278>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d107      	bne.n	8005e94 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <extInt_Config+0x270>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <extInt_Config+0x270>)
 8005e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8e:	6093      	str	r3, [r2, #8]
					break;
 8005e90:	f000 bcd6 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <extInt_Config+0x27c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d107      	bne.n	8005eb0 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005ea0:	4b12      	ldr	r3, [pc, #72]	; (8005eec <extInt_Config+0x270>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4a11      	ldr	r2, [pc, #68]	; (8005eec <extInt_Config+0x270>)
 8005ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eaa:	6093      	str	r3, [r2, #8]
					break;
 8005eac:	f000 bcc8 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <extInt_Config+0x280>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d107      	bne.n	8005ecc <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <extInt_Config+0x270>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <extInt_Config+0x270>)
 8005ec2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ec6:	6093      	str	r3, [r2, #8]
					break;
 8005ec8:	f000 bcba 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <extInt_Config+0x284>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d117      	bne.n	8005f08 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <extInt_Config+0x270>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4a03      	ldr	r2, [pc, #12]	; (8005eec <extInt_Config+0x270>)
 8005ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ee2:	6093      	str	r3, [r2, #8]
					break;
 8005ee4:	f000 bcac 	b.w	8006840 <extInt_Config+0xbc4>
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	40013800 	.word	0x40013800
 8005ef0:	40020000 	.word	0x40020000
 8005ef4:	40020400 	.word	0x40020400
 8005ef8:	40020800 	.word	0x40020800
 8005efc:	40020c00 	.word	0x40020c00
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a8a      	ldr	r2, [pc, #552]	; (8006138 <extInt_Config+0x4bc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d107      	bne.n	8005f24 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005f14:	4b89      	ldr	r3, [pc, #548]	; (800613c <extInt_Config+0x4c0>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a88      	ldr	r2, [pc, #544]	; (800613c <extInt_Config+0x4c0>)
 8005f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f1e:	6093      	str	r3, [r2, #8]
					break;
 8005f20:	f000 bc8e 	b.w	8006840 <extInt_Config+0xbc4>
						__NOP();
 8005f24:	bf00      	nop
					break;
 8005f26:	f000 bc8b 	b.w	8006840 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8005f2a:	4b84      	ldr	r3, [pc, #528]	; (800613c <extInt_Config+0x4c0>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4a83      	ldr	r2, [pc, #524]	; (800613c <extInt_Config+0x4c0>)
 8005f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f34:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a80      	ldr	r2, [pc, #512]	; (8006140 <extInt_Config+0x4c4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d105      	bne.n	8005f4e <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005f42:	4b7e      	ldr	r3, [pc, #504]	; (800613c <extInt_Config+0x4c0>)
 8005f44:	4a7d      	ldr	r2, [pc, #500]	; (800613c <extInt_Config+0x4c0>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005f4a:	f000 bc79 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7b      	ldr	r2, [pc, #492]	; (8006144 <extInt_Config+0x4c8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d107      	bne.n	8005f6a <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8005f5a:	4b78      	ldr	r3, [pc, #480]	; (800613c <extInt_Config+0x4c0>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4a77      	ldr	r2, [pc, #476]	; (800613c <extInt_Config+0x4c0>)
 8005f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f64:	6093      	str	r3, [r2, #8]
					break;
 8005f66:	f000 bc6b 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a75      	ldr	r2, [pc, #468]	; (8006148 <extInt_Config+0x4cc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d107      	bne.n	8005f86 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005f76:	4b71      	ldr	r3, [pc, #452]	; (800613c <extInt_Config+0x4c0>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4a70      	ldr	r2, [pc, #448]	; (800613c <extInt_Config+0x4c0>)
 8005f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f80:	6093      	str	r3, [r2, #8]
					break;
 8005f82:	f000 bc5d 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6f      	ldr	r2, [pc, #444]	; (800614c <extInt_Config+0x4d0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d107      	bne.n	8005fa2 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005f92:	4b6a      	ldr	r3, [pc, #424]	; (800613c <extInt_Config+0x4c0>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a69      	ldr	r2, [pc, #420]	; (800613c <extInt_Config+0x4c0>)
 8005f98:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005f9c:	6093      	str	r3, [r2, #8]
					break;
 8005f9e:	f000 bc4f 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a69      	ldr	r2, [pc, #420]	; (8006150 <extInt_Config+0x4d4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d107      	bne.n	8005fbe <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005fae:	4b63      	ldr	r3, [pc, #396]	; (800613c <extInt_Config+0x4c0>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4a62      	ldr	r2, [pc, #392]	; (800613c <extInt_Config+0x4c0>)
 8005fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb8:	6093      	str	r3, [r2, #8]
					break;
 8005fba:	f000 bc41 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5c      	ldr	r2, [pc, #368]	; (8006138 <extInt_Config+0x4bc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d107      	bne.n	8005fda <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8005fca:	4b5c      	ldr	r3, [pc, #368]	; (800613c <extInt_Config+0x4c0>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a5b      	ldr	r2, [pc, #364]	; (800613c <extInt_Config+0x4c0>)
 8005fd0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005fd4:	6093      	str	r3, [r2, #8]
					break;
 8005fd6:	f000 bc33 	b.w	8006840 <extInt_Config+0xbc4>
						__NOP();
 8005fda:	bf00      	nop
					break;
 8005fdc:	f000 bc30 	b.w	8006840 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8005fe0:	4b56      	ldr	r3, [pc, #344]	; (800613c <extInt_Config+0x4c0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a55      	ldr	r2, [pc, #340]	; (800613c <extInt_Config+0x4c0>)
 8005fe6:	f023 030f 	bic.w	r3, r3, #15
 8005fea:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a53      	ldr	r2, [pc, #332]	; (8006140 <extInt_Config+0x4c4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d105      	bne.n	8006004 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8005ff8:	4b50      	ldr	r3, [pc, #320]	; (800613c <extInt_Config+0x4c0>)
 8005ffa:	4a50      	ldr	r2, [pc, #320]	; (800613c <extInt_Config+0x4c0>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006000:	f000 bc1e 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4e      	ldr	r2, [pc, #312]	; (8006144 <extInt_Config+0x4c8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d107      	bne.n	8006020 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8006010:	4b4a      	ldr	r3, [pc, #296]	; (800613c <extInt_Config+0x4c0>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a49      	ldr	r2, [pc, #292]	; (800613c <extInt_Config+0x4c0>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	60d3      	str	r3, [r2, #12]
					break;
 800601c:	f000 bc10 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a48      	ldr	r2, [pc, #288]	; (8006148 <extInt_Config+0x4cc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d107      	bne.n	800603c <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 800602c:	4b43      	ldr	r3, [pc, #268]	; (800613c <extInt_Config+0x4c0>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a42      	ldr	r2, [pc, #264]	; (800613c <extInt_Config+0x4c0>)
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	60d3      	str	r3, [r2, #12]
					break;
 8006038:	f000 bc02 	b.w	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a42      	ldr	r2, [pc, #264]	; (800614c <extInt_Config+0x4d0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d106      	bne.n	8006056 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006048:	4b3c      	ldr	r3, [pc, #240]	; (800613c <extInt_Config+0x4c0>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a3b      	ldr	r2, [pc, #236]	; (800613c <extInt_Config+0x4c0>)
 800604e:	f043 0303 	orr.w	r3, r3, #3
 8006052:	60d3      	str	r3, [r2, #12]
					break;
 8006054:	e3f4      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <extInt_Config+0x4d4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d106      	bne.n	8006070 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <extInt_Config+0x4c0>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	4a35      	ldr	r2, [pc, #212]	; (800613c <extInt_Config+0x4c0>)
 8006068:	f043 0304 	orr.w	r3, r3, #4
 800606c:	60d3      	str	r3, [r2, #12]
					break;
 800606e:	e3e7      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a30      	ldr	r2, [pc, #192]	; (8006138 <extInt_Config+0x4bc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d106      	bne.n	800608a <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 800607c:	4b2f      	ldr	r3, [pc, #188]	; (800613c <extInt_Config+0x4c0>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a2e      	ldr	r2, [pc, #184]	; (800613c <extInt_Config+0x4c0>)
 8006082:	f043 0307 	orr.w	r3, r3, #7
 8006086:	60d3      	str	r3, [r2, #12]
					break;
 8006088:	e3da      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 800608a:	bf00      	nop
					break;
 800608c:	e3d8      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 800608e:	4b2b      	ldr	r3, [pc, #172]	; (800613c <extInt_Config+0x4c0>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <extInt_Config+0x4c0>)
 8006094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006098:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <extInt_Config+0x4c4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d104      	bne.n	80060b0 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <extInt_Config+0x4c0>)
 80060a8:	4a24      	ldr	r2, [pc, #144]	; (800613c <extInt_Config+0x4c0>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80060ae:	e3c7      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a23      	ldr	r2, [pc, #140]	; (8006144 <extInt_Config+0x4c8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d106      	bne.n	80060ca <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <extInt_Config+0x4c0>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a1e      	ldr	r2, [pc, #120]	; (800613c <extInt_Config+0x4c0>)
 80060c2:	f043 0310 	orr.w	r3, r3, #16
 80060c6:	60d3      	str	r3, [r2, #12]
					break;
 80060c8:	e3ba      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <extInt_Config+0x4cc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d106      	bne.n	80060e4 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80060d6:	4b19      	ldr	r3, [pc, #100]	; (800613c <extInt_Config+0x4c0>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <extInt_Config+0x4c0>)
 80060dc:	f043 0320 	orr.w	r3, r3, #32
 80060e0:	60d3      	str	r3, [r2, #12]
					break;
 80060e2:	e3ad      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <extInt_Config+0x4d0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d106      	bne.n	80060fe <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80060f0:	4b12      	ldr	r3, [pc, #72]	; (800613c <extInt_Config+0x4c0>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a11      	ldr	r2, [pc, #68]	; (800613c <extInt_Config+0x4c0>)
 80060f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80060fa:	60d3      	str	r3, [r2, #12]
					break;
 80060fc:	e3a0      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a12      	ldr	r2, [pc, #72]	; (8006150 <extInt_Config+0x4d4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d106      	bne.n	8006118 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <extInt_Config+0x4c0>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4a0b      	ldr	r2, [pc, #44]	; (800613c <extInt_Config+0x4c0>)
 8006110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006114:	60d3      	str	r3, [r2, #12]
					break;
 8006116:	e393      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a06      	ldr	r2, [pc, #24]	; (8006138 <extInt_Config+0x4bc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d106      	bne.n	8006132 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <extInt_Config+0x4c0>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <extInt_Config+0x4c0>)
 800612a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800612e:	60d3      	str	r3, [r2, #12]
					break;
 8006130:	e386      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 8006132:	bf00      	nop
					break;
 8006134:	e384      	b.n	8006840 <extInt_Config+0xbc4>
 8006136:	bf00      	nop
 8006138:	40021c00 	.word	0x40021c00
 800613c:	40013800 	.word	0x40013800
 8006140:	40020000 	.word	0x40020000
 8006144:	40020400 	.word	0x40020400
 8006148:	40020800 	.word	0x40020800
 800614c:	40020c00 	.word	0x40020c00
 8006150:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006154:	4b86      	ldr	r3, [pc, #536]	; (8006370 <extInt_Config+0x6f4>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a85      	ldr	r2, [pc, #532]	; (8006370 <extInt_Config+0x6f4>)
 800615a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800615e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a83      	ldr	r2, [pc, #524]	; (8006374 <extInt_Config+0x6f8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d104      	bne.n	8006176 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 800616c:	4b80      	ldr	r3, [pc, #512]	; (8006370 <extInt_Config+0x6f4>)
 800616e:	4a80      	ldr	r2, [pc, #512]	; (8006370 <extInt_Config+0x6f4>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006174:	e364      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7e      	ldr	r2, [pc, #504]	; (8006378 <extInt_Config+0x6fc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d106      	bne.n	8006190 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006182:	4b7b      	ldr	r3, [pc, #492]	; (8006370 <extInt_Config+0x6f4>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4a7a      	ldr	r2, [pc, #488]	; (8006370 <extInt_Config+0x6f4>)
 8006188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618c:	60d3      	str	r3, [r2, #12]
					break;
 800618e:	e357      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a79      	ldr	r2, [pc, #484]	; (800637c <extInt_Config+0x700>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d106      	bne.n	80061aa <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 800619c:	4b74      	ldr	r3, [pc, #464]	; (8006370 <extInt_Config+0x6f4>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a73      	ldr	r2, [pc, #460]	; (8006370 <extInt_Config+0x6f4>)
 80061a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a6:	60d3      	str	r3, [r2, #12]
					break;
 80061a8:	e34a      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a73      	ldr	r2, [pc, #460]	; (8006380 <extInt_Config+0x704>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d106      	bne.n	80061c4 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80061b6:	4b6e      	ldr	r3, [pc, #440]	; (8006370 <extInt_Config+0x6f4>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4a6d      	ldr	r2, [pc, #436]	; (8006370 <extInt_Config+0x6f4>)
 80061bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061c0:	60d3      	str	r3, [r2, #12]
					break;
 80061c2:	e33d      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6e      	ldr	r2, [pc, #440]	; (8006384 <extInt_Config+0x708>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d106      	bne.n	80061de <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80061d0:	4b67      	ldr	r3, [pc, #412]	; (8006370 <extInt_Config+0x6f4>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4a66      	ldr	r2, [pc, #408]	; (8006370 <extInt_Config+0x6f4>)
 80061d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061da:	60d3      	str	r3, [r2, #12]
					break;
 80061dc:	e330      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a68      	ldr	r2, [pc, #416]	; (8006388 <extInt_Config+0x70c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d106      	bne.n	80061f8 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80061ea:	4b61      	ldr	r3, [pc, #388]	; (8006370 <extInt_Config+0x6f4>)
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	4a60      	ldr	r2, [pc, #384]	; (8006370 <extInt_Config+0x6f4>)
 80061f0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061f4:	60d3      	str	r3, [r2, #12]
					break;
 80061f6:	e323      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 80061f8:	bf00      	nop
					break;
 80061fa:	e321      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80061fc:	4b5c      	ldr	r3, [pc, #368]	; (8006370 <extInt_Config+0x6f4>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a5b      	ldr	r2, [pc, #364]	; (8006370 <extInt_Config+0x6f4>)
 8006202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006206:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a59      	ldr	r2, [pc, #356]	; (8006374 <extInt_Config+0x6f8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d104      	bne.n	800621e <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8006214:	4b56      	ldr	r3, [pc, #344]	; (8006370 <extInt_Config+0x6f4>)
 8006216:	4a56      	ldr	r2, [pc, #344]	; (8006370 <extInt_Config+0x6f4>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800621c:	e310      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a54      	ldr	r2, [pc, #336]	; (8006378 <extInt_Config+0x6fc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d106      	bne.n	8006238 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800622a:	4b51      	ldr	r3, [pc, #324]	; (8006370 <extInt_Config+0x6f4>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	4a50      	ldr	r2, [pc, #320]	; (8006370 <extInt_Config+0x6f4>)
 8006230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006234:	60d3      	str	r3, [r2, #12]
					break;
 8006236:	e303      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a4f      	ldr	r2, [pc, #316]	; (800637c <extInt_Config+0x700>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d106      	bne.n	8006252 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006244:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <extInt_Config+0x6f4>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a49      	ldr	r2, [pc, #292]	; (8006370 <extInt_Config+0x6f4>)
 800624a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800624e:	60d3      	str	r3, [r2, #12]
					break;
 8006250:	e2f6      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a49      	ldr	r2, [pc, #292]	; (8006380 <extInt_Config+0x704>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d106      	bne.n	800626c <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800625e:	4b44      	ldr	r3, [pc, #272]	; (8006370 <extInt_Config+0x6f4>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	4a43      	ldr	r2, [pc, #268]	; (8006370 <extInt_Config+0x6f4>)
 8006264:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006268:	60d3      	str	r3, [r2, #12]
					break;
 800626a:	e2e9      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a44      	ldr	r2, [pc, #272]	; (8006384 <extInt_Config+0x708>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d106      	bne.n	8006286 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8006278:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <extInt_Config+0x6f4>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4a3c      	ldr	r2, [pc, #240]	; (8006370 <extInt_Config+0x6f4>)
 800627e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006282:	60d3      	str	r3, [r2, #12]
					break;
 8006284:	e2dc      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a3e      	ldr	r2, [pc, #248]	; (8006388 <extInt_Config+0x70c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d106      	bne.n	80062a0 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006292:	4b37      	ldr	r3, [pc, #220]	; (8006370 <extInt_Config+0x6f4>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4a36      	ldr	r2, [pc, #216]	; (8006370 <extInt_Config+0x6f4>)
 8006298:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800629c:	60d3      	str	r3, [r2, #12]
					break;
 800629e:	e2cf      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 80062a0:	bf00      	nop
					break;
 80062a2:	e2cd      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 80062a4:	4b32      	ldr	r3, [pc, #200]	; (8006370 <extInt_Config+0x6f4>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a31      	ldr	r2, [pc, #196]	; (8006370 <extInt_Config+0x6f4>)
 80062aa:	f023 030f 	bic.w	r3, r3, #15
 80062ae:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2f      	ldr	r2, [pc, #188]	; (8006374 <extInt_Config+0x6f8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d104      	bne.n	80062c6 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80062bc:	4b2c      	ldr	r3, [pc, #176]	; (8006370 <extInt_Config+0x6f4>)
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <extInt_Config+0x6f4>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80062c4:	e2bc      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <extInt_Config+0x6fc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d106      	bne.n	80062e0 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80062d2:	4b27      	ldr	r3, [pc, #156]	; (8006370 <extInt_Config+0x6f4>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <extInt_Config+0x6f4>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6113      	str	r3, [r2, #16]
					break;
 80062de:	e2af      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <extInt_Config+0x700>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d106      	bne.n	80062fa <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80062ec:	4b20      	ldr	r3, [pc, #128]	; (8006370 <extInt_Config+0x6f4>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <extInt_Config+0x6f4>)
 80062f2:	f043 0302 	orr.w	r3, r3, #2
 80062f6:	6113      	str	r3, [r2, #16]
					break;
 80062f8:	e2a2      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <extInt_Config+0x704>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d106      	bne.n	8006314 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <extInt_Config+0x6f4>)
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	4a19      	ldr	r2, [pc, #100]	; (8006370 <extInt_Config+0x6f4>)
 800630c:	f043 0303 	orr.w	r3, r3, #3
 8006310:	6113      	str	r3, [r2, #16]
					break;
 8006312:	e295      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <extInt_Config+0x708>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d106      	bne.n	800632e <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <extInt_Config+0x6f4>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a12      	ldr	r2, [pc, #72]	; (8006370 <extInt_Config+0x6f4>)
 8006326:	f043 0304 	orr.w	r3, r3, #4
 800632a:	6113      	str	r3, [r2, #16]
					break;
 800632c:	e288      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a14      	ldr	r2, [pc, #80]	; (8006388 <extInt_Config+0x70c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d106      	bne.n	8006348 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <extInt_Config+0x6f4>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <extInt_Config+0x6f4>)
 8006340:	f043 0307 	orr.w	r3, r3, #7
 8006344:	6113      	str	r3, [r2, #16]
					break;
 8006346:	e27b      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 8006348:	bf00      	nop
					break;
 800634a:	e279      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <extInt_Config+0x6f4>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	4a07      	ldr	r2, [pc, #28]	; (8006370 <extInt_Config+0x6f4>)
 8006352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006356:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a05      	ldr	r2, [pc, #20]	; (8006374 <extInt_Config+0x6f8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d113      	bne.n	800638c <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <extInt_Config+0x6f4>)
 8006366:	4a02      	ldr	r2, [pc, #8]	; (8006370 <extInt_Config+0x6f4>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800636c:	e268      	b.n	8006840 <extInt_Config+0xbc4>
 800636e:	bf00      	nop
 8006370:	40013800 	.word	0x40013800
 8006374:	40020000 	.word	0x40020000
 8006378:	40020400 	.word	0x40020400
 800637c:	40020800 	.word	0x40020800
 8006380:	40020c00 	.word	0x40020c00
 8006384:	40021000 	.word	0x40021000
 8006388:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a83      	ldr	r2, [pc, #524]	; (80065a0 <extInt_Config+0x924>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d106      	bne.n	80063a6 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006398:	4b82      	ldr	r3, [pc, #520]	; (80065a4 <extInt_Config+0x928>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	4a81      	ldr	r2, [pc, #516]	; (80065a4 <extInt_Config+0x928>)
 800639e:	f043 0310 	orr.w	r3, r3, #16
 80063a2:	6113      	str	r3, [r2, #16]
					break;
 80063a4:	e24c      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a7e      	ldr	r2, [pc, #504]	; (80065a8 <extInt_Config+0x92c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d106      	bne.n	80063c0 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80063b2:	4b7c      	ldr	r3, [pc, #496]	; (80065a4 <extInt_Config+0x928>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4a7b      	ldr	r2, [pc, #492]	; (80065a4 <extInt_Config+0x928>)
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	6113      	str	r3, [r2, #16]
					break;
 80063be:	e23f      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a79      	ldr	r2, [pc, #484]	; (80065ac <extInt_Config+0x930>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d106      	bne.n	80063da <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80063cc:	4b75      	ldr	r3, [pc, #468]	; (80065a4 <extInt_Config+0x928>)
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	4a74      	ldr	r2, [pc, #464]	; (80065a4 <extInt_Config+0x928>)
 80063d2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80063d6:	6113      	str	r3, [r2, #16]
					break;
 80063d8:	e232      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a73      	ldr	r2, [pc, #460]	; (80065b0 <extInt_Config+0x934>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d106      	bne.n	80063f4 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80063e6:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <extInt_Config+0x928>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	4a6e      	ldr	r2, [pc, #440]	; (80065a4 <extInt_Config+0x928>)
 80063ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f0:	6113      	str	r3, [r2, #16]
					break;
 80063f2:	e225      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6e      	ldr	r2, [pc, #440]	; (80065b4 <extInt_Config+0x938>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d106      	bne.n	800640e <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006400:	4b68      	ldr	r3, [pc, #416]	; (80065a4 <extInt_Config+0x928>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	4a67      	ldr	r2, [pc, #412]	; (80065a4 <extInt_Config+0x928>)
 8006406:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800640a:	6113      	str	r3, [r2, #16]
					break;
 800640c:	e218      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 800640e:	bf00      	nop
					break;
 8006410:	e216      	b.n	8006840 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8006412:	4b64      	ldr	r3, [pc, #400]	; (80065a4 <extInt_Config+0x928>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	4a63      	ldr	r2, [pc, #396]	; (80065a4 <extInt_Config+0x928>)
 8006418:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800641c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <extInt_Config+0x93c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d104      	bne.n	8006434 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800642a:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <extInt_Config+0x928>)
 800642c:	4a5d      	ldr	r2, [pc, #372]	; (80065a4 <extInt_Config+0x928>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006432:	e205      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a59      	ldr	r2, [pc, #356]	; (80065a0 <extInt_Config+0x924>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d106      	bne.n	800644e <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006440:	4b58      	ldr	r3, [pc, #352]	; (80065a4 <extInt_Config+0x928>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <extInt_Config+0x928>)
 8006446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644a:	6113      	str	r3, [r2, #16]
					break;
 800644c:	e1f8      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a54      	ldr	r2, [pc, #336]	; (80065a8 <extInt_Config+0x92c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d106      	bne.n	8006468 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800645a:	4b52      	ldr	r3, [pc, #328]	; (80065a4 <extInt_Config+0x928>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4a51      	ldr	r2, [pc, #324]	; (80065a4 <extInt_Config+0x928>)
 8006460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006464:	6113      	str	r3, [r2, #16]
					break;
 8006466:	e1eb      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a4f      	ldr	r2, [pc, #316]	; (80065ac <extInt_Config+0x930>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d106      	bne.n	8006482 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006474:	4b4b      	ldr	r3, [pc, #300]	; (80065a4 <extInt_Config+0x928>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4a4a      	ldr	r2, [pc, #296]	; (80065a4 <extInt_Config+0x928>)
 800647a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800647e:	6113      	str	r3, [r2, #16]
					break;
 8006480:	e1de      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <extInt_Config+0x934>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d106      	bne.n	800649c <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800648e:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <extInt_Config+0x928>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	4a44      	ldr	r2, [pc, #272]	; (80065a4 <extInt_Config+0x928>)
 8006494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006498:	6113      	str	r3, [r2, #16]
					break;
 800649a:	e1d1      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a44      	ldr	r2, [pc, #272]	; (80065b4 <extInt_Config+0x938>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d106      	bne.n	80064b6 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80064a8:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <extInt_Config+0x928>)
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	4a3d      	ldr	r2, [pc, #244]	; (80065a4 <extInt_Config+0x928>)
 80064ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064b2:	6113      	str	r3, [r2, #16]
					break;
 80064b4:	e1c4      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 80064b6:	bf00      	nop
					break;
 80064b8:	e1c2      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80064ba:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <extInt_Config+0x928>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4a39      	ldr	r2, [pc, #228]	; (80065a4 <extInt_Config+0x928>)
 80064c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <extInt_Config+0x93c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d104      	bne.n	80064dc <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80064d2:	4b34      	ldr	r3, [pc, #208]	; (80065a4 <extInt_Config+0x928>)
 80064d4:	4a33      	ldr	r2, [pc, #204]	; (80065a4 <extInt_Config+0x928>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80064da:	e1b1      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a2f      	ldr	r2, [pc, #188]	; (80065a0 <extInt_Config+0x924>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d106      	bne.n	80064f6 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <extInt_Config+0x928>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <extInt_Config+0x928>)
 80064ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064f2:	6113      	str	r3, [r2, #16]
					break;
 80064f4:	e1a4      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <extInt_Config+0x92c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d106      	bne.n	8006510 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006502:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <extInt_Config+0x928>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <extInt_Config+0x928>)
 8006508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800650c:	6113      	str	r3, [r2, #16]
					break;
 800650e:	e197      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a25      	ldr	r2, [pc, #148]	; (80065ac <extInt_Config+0x930>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d106      	bne.n	800652a <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <extInt_Config+0x928>)
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <extInt_Config+0x928>)
 8006522:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006526:	6113      	str	r3, [r2, #16]
					break;
 8006528:	e18a      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <extInt_Config+0x934>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d106      	bne.n	8006544 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <extInt_Config+0x928>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <extInt_Config+0x928>)
 800653c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006540:	6113      	str	r3, [r2, #16]
					break;
 8006542:	e17d      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <extInt_Config+0x938>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d106      	bne.n	800655e <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <extInt_Config+0x928>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <extInt_Config+0x928>)
 8006556:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800655a:	6113      	str	r3, [r2, #16]
					break;
 800655c:	e170      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 800655e:	bf00      	nop
					break;
 8006560:	e16e      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <extInt_Config+0x928>)
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <extInt_Config+0x928>)
 8006568:	f023 030f 	bic.w	r3, r3, #15
 800656c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <extInt_Config+0x93c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d104      	bne.n	8006584 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800657a:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <extInt_Config+0x928>)
 800657c:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <extInt_Config+0x928>)
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006582:	e15d      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <extInt_Config+0x924>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d115      	bne.n	80065bc <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <extInt_Config+0x928>)
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	4a03      	ldr	r2, [pc, #12]	; (80065a4 <extInt_Config+0x928>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6153      	str	r3, [r2, #20]
					break;
 800659c:	e150      	b.n	8006840 <extInt_Config+0xbc4>
 800659e:	bf00      	nop
 80065a0:	40020400 	.word	0x40020400
 80065a4:	40013800 	.word	0x40013800
 80065a8:	40020800 	.word	0x40020800
 80065ac:	40020c00 	.word	0x40020c00
 80065b0:	40021000 	.word	0x40021000
 80065b4:	40021c00 	.word	0x40021c00
 80065b8:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a89      	ldr	r2, [pc, #548]	; (80067e8 <extInt_Config+0xb6c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d106      	bne.n	80065d6 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80065c8:	4b88      	ldr	r3, [pc, #544]	; (80067ec <extInt_Config+0xb70>)
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	4a87      	ldr	r2, [pc, #540]	; (80067ec <extInt_Config+0xb70>)
 80065ce:	f043 0302 	orr.w	r3, r3, #2
 80065d2:	6153      	str	r3, [r2, #20]
					break;
 80065d4:	e134      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a84      	ldr	r2, [pc, #528]	; (80067f0 <extInt_Config+0xb74>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d106      	bne.n	80065f0 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80065e2:	4b82      	ldr	r3, [pc, #520]	; (80067ec <extInt_Config+0xb70>)
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	4a81      	ldr	r2, [pc, #516]	; (80067ec <extInt_Config+0xb70>)
 80065e8:	f043 0303 	orr.w	r3, r3, #3
 80065ec:	6153      	str	r3, [r2, #20]
					break;
 80065ee:	e127      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a7f      	ldr	r2, [pc, #508]	; (80067f4 <extInt_Config+0xb78>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d106      	bne.n	800660a <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80065fc:	4b7b      	ldr	r3, [pc, #492]	; (80067ec <extInt_Config+0xb70>)
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	4a7a      	ldr	r2, [pc, #488]	; (80067ec <extInt_Config+0xb70>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6153      	str	r3, [r2, #20]
					break;
 8006608:	e11a      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a79      	ldr	r2, [pc, #484]	; (80067f8 <extInt_Config+0xb7c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d106      	bne.n	8006624 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8006616:	4b75      	ldr	r3, [pc, #468]	; (80067ec <extInt_Config+0xb70>)
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4a74      	ldr	r2, [pc, #464]	; (80067ec <extInt_Config+0xb70>)
 800661c:	f043 0307 	orr.w	r3, r3, #7
 8006620:	6153      	str	r3, [r2, #20]
					break;
 8006622:	e10d      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 8006624:	bf00      	nop
					break;
 8006626:	e10b      	b.n	8006840 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8006628:	4b70      	ldr	r3, [pc, #448]	; (80067ec <extInt_Config+0xb70>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	4a6f      	ldr	r2, [pc, #444]	; (80067ec <extInt_Config+0xb70>)
 800662e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006632:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a70      	ldr	r2, [pc, #448]	; (80067fc <extInt_Config+0xb80>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d104      	bne.n	800664a <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006640:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <extInt_Config+0xb70>)
 8006642:	4a6a      	ldr	r2, [pc, #424]	; (80067ec <extInt_Config+0xb70>)
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	6153      	str	r3, [r2, #20]
 8006648:	e041      	b.n	80066ce <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6b      	ldr	r2, [pc, #428]	; (8006800 <extInt_Config+0xb84>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d106      	bne.n	8006664 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8006656:	4b65      	ldr	r3, [pc, #404]	; (80067ec <extInt_Config+0xb70>)
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4a64      	ldr	r2, [pc, #400]	; (80067ec <extInt_Config+0xb70>)
 800665c:	f043 0310 	orr.w	r3, r3, #16
 8006660:	6153      	str	r3, [r2, #20]
 8006662:	e034      	b.n	80066ce <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5f      	ldr	r2, [pc, #380]	; (80067e8 <extInt_Config+0xb6c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d106      	bne.n	800667e <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006670:	4b5e      	ldr	r3, [pc, #376]	; (80067ec <extInt_Config+0xb70>)
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	4a5d      	ldr	r2, [pc, #372]	; (80067ec <extInt_Config+0xb70>)
 8006676:	f043 0320 	orr.w	r3, r3, #32
 800667a:	6153      	str	r3, [r2, #20]
 800667c:	e027      	b.n	80066ce <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5a      	ldr	r2, [pc, #360]	; (80067f0 <extInt_Config+0xb74>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d106      	bne.n	8006698 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800668a:	4b58      	ldr	r3, [pc, #352]	; (80067ec <extInt_Config+0xb70>)
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	4a57      	ldr	r2, [pc, #348]	; (80067ec <extInt_Config+0xb70>)
 8006690:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006694:	6153      	str	r3, [r2, #20]
 8006696:	e01a      	b.n	80066ce <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a55      	ldr	r2, [pc, #340]	; (80067f4 <extInt_Config+0xb78>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d106      	bne.n	80066b2 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 80066a4:	4b51      	ldr	r3, [pc, #324]	; (80067ec <extInt_Config+0xb70>)
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	4a50      	ldr	r2, [pc, #320]	; (80067ec <extInt_Config+0xb70>)
 80066aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ae:	6153      	str	r3, [r2, #20]
 80066b0:	e00d      	b.n	80066ce <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a4f      	ldr	r2, [pc, #316]	; (80067f8 <extInt_Config+0xb7c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d106      	bne.n	80066cc <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80066be:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <extInt_Config+0xb70>)
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	4a4a      	ldr	r2, [pc, #296]	; (80067ec <extInt_Config+0xb70>)
 80066c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80066c8:	6153      	str	r3, [r2, #20]
 80066ca:	e000      	b.n	80066ce <extInt_Config+0xa52>

					} else {
						__NOP();
 80066cc:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <extInt_Config+0xb70>)
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	4a46      	ldr	r2, [pc, #280]	; (80067ec <extInt_Config+0xb70>)
 80066d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066d8:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a46      	ldr	r2, [pc, #280]	; (80067fc <extInt_Config+0xb80>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d104      	bne.n	80066f0 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80066e6:	4b41      	ldr	r3, [pc, #260]	; (80067ec <extInt_Config+0xb70>)
 80066e8:	4a40      	ldr	r2, [pc, #256]	; (80067ec <extInt_Config+0xb70>)
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80066ee:	e0a7      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a42      	ldr	r2, [pc, #264]	; (8006800 <extInt_Config+0xb84>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d106      	bne.n	800670a <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80066fc:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <extInt_Config+0xb70>)
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	4a3a      	ldr	r2, [pc, #232]	; (80067ec <extInt_Config+0xb70>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6153      	str	r3, [r2, #20]
					break;
 8006708:	e09a      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <extInt_Config+0xb6c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d106      	bne.n	8006724 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8006716:	4b35      	ldr	r3, [pc, #212]	; (80067ec <extInt_Config+0xb70>)
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	4a34      	ldr	r2, [pc, #208]	; (80067ec <extInt_Config+0xb70>)
 800671c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006720:	6153      	str	r3, [r2, #20]
					break;
 8006722:	e08d      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a31      	ldr	r2, [pc, #196]	; (80067f0 <extInt_Config+0xb74>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d106      	bne.n	800673e <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006730:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <extInt_Config+0xb70>)
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <extInt_Config+0xb70>)
 8006736:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800673a:	6153      	str	r3, [r2, #20]
					break;
 800673c:	e080      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <extInt_Config+0xb78>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d106      	bne.n	8006758 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800674a:	4b28      	ldr	r3, [pc, #160]	; (80067ec <extInt_Config+0xb70>)
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <extInt_Config+0xb70>)
 8006750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006754:	6153      	str	r3, [r2, #20]
					break;
 8006756:	e073      	b.n	8006840 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <extInt_Config+0xb7c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d106      	bne.n	8006772 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006764:	4b21      	ldr	r3, [pc, #132]	; (80067ec <extInt_Config+0xb70>)
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <extInt_Config+0xb70>)
 800676a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800676e:	6153      	str	r3, [r2, #20]
					break;
 8006770:	e066      	b.n	8006840 <extInt_Config+0xbc4>
						__NOP();
 8006772:	bf00      	nop
					break;
 8006774:	e064      	b.n	8006840 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <extInt_Config+0xb70>)
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <extInt_Config+0xb70>)
 800677c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006780:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <extInt_Config+0xb80>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d104      	bne.n	8006798 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <extInt_Config+0xb70>)
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <extInt_Config+0xb70>)
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8006796:	e053      	b.n	8006840 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <extInt_Config+0xb84>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d106      	bne.n	80067b2 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <extInt_Config+0xb70>)
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	4a10      	ldr	r2, [pc, #64]	; (80067ec <extInt_Config+0xb70>)
 80067aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067ae:	6153      	str	r3, [r2, #20]
						break;
 80067b0:	e046      	b.n	8006840 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <extInt_Config+0xb6c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d106      	bne.n	80067cc <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <extInt_Config+0xb70>)
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <extInt_Config+0xb70>)
 80067c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067c8:	6153      	str	r3, [r2, #20]
						break;
 80067ca:	e039      	b.n	8006840 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <extInt_Config+0xb74>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d115      	bne.n	8006804 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <extInt_Config+0xb70>)
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	4a03      	ldr	r2, [pc, #12]	; (80067ec <extInt_Config+0xb70>)
 80067de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80067e2:	6153      	str	r3, [r2, #20]
						break;
 80067e4:	e02c      	b.n	8006840 <extInt_Config+0xbc4>
 80067e6:	bf00      	nop
 80067e8:	40020800 	.word	0x40020800
 80067ec:	40013800 	.word	0x40013800
 80067f0:	40020c00 	.word	0x40020c00
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40021c00 	.word	0x40021c00
 80067fc:	40020000 	.word	0x40020000
 8006800:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6c      	ldr	r2, [pc, #432]	; (80069bc <extInt_Config+0xd40>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d106      	bne.n	800681e <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006810:	4b6b      	ldr	r3, [pc, #428]	; (80069c0 <extInt_Config+0xd44>)
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	4a6a      	ldr	r2, [pc, #424]	; (80069c0 <extInt_Config+0xd44>)
 8006816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800681a:	6153      	str	r3, [r2, #20]
						break;
 800681c:	e010      	b.n	8006840 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a67      	ldr	r2, [pc, #412]	; (80069c4 <extInt_Config+0xd48>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d106      	bne.n	8006838 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800682a:	4b65      	ldr	r3, [pc, #404]	; (80069c0 <extInt_Config+0xd44>)
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4a64      	ldr	r2, [pc, #400]	; (80069c0 <extInt_Config+0xd44>)
 8006830:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006834:	6153      	str	r3, [r2, #20]
						break;
 8006836:	e003      	b.n	8006840 <extInt_Config+0xbc4>
							__NOP();
 8006838:	bf00      	nop
						break;
 800683a:	e001      	b.n	8006840 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 800683c:	bf00      	nop
						break;
 800683e:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	791b      	ldrb	r3, [r3, #4]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d020      	beq.n	800688a <extInt_Config+0xc0e>
 8006848:	2b02      	cmp	r3, #2
 800684a:	dc37      	bgt.n	80068bc <extInt_Config+0xc40>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <extInt_Config+0xbda>
 8006850:	2b01      	cmp	r3, #1
 8006852:	d00d      	beq.n	8006870 <extInt_Config+0xbf4>
 8006854:	e032      	b.n	80068bc <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006856:	4b5c      	ldr	r3, [pc, #368]	; (80069c8 <extInt_Config+0xd4c>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	7912      	ldrb	r2, [r2, #4]
 8006860:	4611      	mov	r1, r2
 8006862:	2201      	movs	r2, #1
 8006864:	408a      	lsls	r2, r1
 8006866:	4611      	mov	r1, r2
 8006868:	4a57      	ldr	r2, [pc, #348]	; (80069c8 <extInt_Config+0xd4c>)
 800686a:	430b      	orrs	r3, r1
 800686c:	60d3      	str	r3, [r2, #12]

		break;
 800686e:	e027      	b.n	80068c0 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006870:	4b55      	ldr	r3, [pc, #340]	; (80069c8 <extInt_Config+0xd4c>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	7912      	ldrb	r2, [r2, #4]
 800687a:	4611      	mov	r1, r2
 800687c:	2201      	movs	r2, #1
 800687e:	408a      	lsls	r2, r1
 8006880:	4611      	mov	r1, r2
 8006882:	4a51      	ldr	r2, [pc, #324]	; (80069c8 <extInt_Config+0xd4c>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6093      	str	r3, [r2, #8]

		break;
 8006888:	e01a      	b.n	80068c0 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800688a:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <extInt_Config+0xd4c>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	7912      	ldrb	r2, [r2, #4]
 8006894:	4611      	mov	r1, r2
 8006896:	2201      	movs	r2, #1
 8006898:	408a      	lsls	r2, r1
 800689a:	4611      	mov	r1, r2
 800689c:	4a4a      	ldr	r2, [pc, #296]	; (80069c8 <extInt_Config+0xd4c>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068a2:	4b49      	ldr	r3, [pc, #292]	; (80069c8 <extInt_Config+0xd4c>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	7912      	ldrb	r2, [r2, #4]
 80068ac:	4611      	mov	r1, r2
 80068ae:	2201      	movs	r2, #1
 80068b0:	408a      	lsls	r2, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	4a44      	ldr	r2, [pc, #272]	; (80069c8 <extInt_Config+0xd4c>)
 80068b6:	430b      	orrs	r3, r1
 80068b8:	6093      	str	r3, [r2, #8]

		break;
 80068ba:	e001      	b.n	80068c0 <extInt_Config+0xc44>

	}default :{

		__NOP();
 80068bc:	bf00      	nop
		break;
 80068be:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80068c0:	b672      	cpsid	i
}
 80068c2:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068c4:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <extInt_Config+0xd4c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	7912      	ldrb	r2, [r2, #4]
 80068ce:	4611      	mov	r1, r2
 80068d0:	2201      	movs	r2, #1
 80068d2:	408a      	lsls	r2, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	4a3c      	ldr	r2, [pc, #240]	; (80069c8 <extInt_Config+0xd4c>)
 80068d8:	430b      	orrs	r3, r1
 80068da:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	791b      	ldrb	r3, [r3, #4]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	d862      	bhi.n	80069ac <extInt_Config+0xd30>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <extInt_Config+0xc70>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	0800692d 	.word	0x0800692d
 80068f0:	08006935 	.word	0x08006935
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	08006945 	.word	0x08006945
 80068fc:	0800694d 	.word	0x0800694d
 8006900:	08006955 	.word	0x08006955
 8006904:	0800695d 	.word	0x0800695d
 8006908:	08006965 	.word	0x08006965
 800690c:	0800696d 	.word	0x0800696d
 8006910:	08006975 	.word	0x08006975
 8006914:	0800697d 	.word	0x0800697d
 8006918:	08006985 	.word	0x08006985
 800691c:	0800698d 	.word	0x0800698d
 8006920:	08006995 	.word	0x08006995
 8006924:	0800699d 	.word	0x0800699d
 8006928:	080069a5 	.word	0x080069a5
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 800692c:	2006      	movs	r0, #6
 800692e:	f7ff f987 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006932:	e03d      	b.n	80069b0 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8006934:	2007      	movs	r0, #7
 8006936:	f7ff f983 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800693a:	e039      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 800693c:	2008      	movs	r0, #8
 800693e:	f7ff f97f 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006942:	e035      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8006944:	2009      	movs	r0, #9
 8006946:	f7ff f97b 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800694a:	e031      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800694c:	200a      	movs	r0, #10
 800694e:	f7ff f977 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006952:	e02d      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006954:	2017      	movs	r0, #23
 8006956:	f7ff f973 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800695a:	e029      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800695c:	2017      	movs	r0, #23
 800695e:	f7ff f96f 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006962:	e025      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006964:	2017      	movs	r0, #23
 8006966:	f7ff f96b 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800696a:	e021      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800696c:	2017      	movs	r0, #23
 800696e:	f7ff f967 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006972:	e01d      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006974:	2017      	movs	r0, #23
 8006976:	f7ff f963 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800697a:	e019      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800697c:	2028      	movs	r0, #40	; 0x28
 800697e:	f7ff f95f 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006982:	e015      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006984:	2028      	movs	r0, #40	; 0x28
 8006986:	f7ff f95b 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800698a:	e011      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800698c:	2028      	movs	r0, #40	; 0x28
 800698e:	f7ff f957 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 8006992:	e00d      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006994:	2028      	movs	r0, #40	; 0x28
 8006996:	f7ff f953 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 800699a:	e009      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800699c:	2028      	movs	r0, #40	; 0x28
 800699e:	f7ff f94f 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 80069a2:	e005      	b.n	80069b0 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069a4:	2028      	movs	r0, #40	; 0x28
 80069a6:	f7ff f94b 	bl	8005c40 <__NVIC_EnableIRQ>
			break;
 80069aa:	e001      	b.n	80069b0 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 80069ac:	bf00      	nop
			break;
 80069ae:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80069b0:	b662      	cpsie	i
}
 80069b2:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40021000 	.word	0x40021000
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40021c00 	.word	0x40021c00
 80069c8:	40013c00 	.word	0x40013c00

080069cc <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
	__NOP();
 80069d0:	bf00      	nop
}
 80069d2:	bf00      	nop
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
	__NOP();
 80069e0:	bf00      	nop
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
	__NOP();
 80069f0:	bf00      	nop
}
 80069f2:	bf00      	nop
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
	__NOP();
 8006a00:	bf00      	nop
}
 8006a02:	bf00      	nop
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
	__NOP();
 8006a10:	bf00      	nop
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
	__NOP();
 8006a20:	bf00      	nop
}
 8006a22:	bf00      	nop
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
	__NOP();
 8006a30:	bf00      	nop
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	__NOP();
 8006a40:	bf00      	nop
}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
	__NOP();
 8006a50:	bf00      	nop
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
	__NOP();
 8006a60:	bf00      	nop
}
 8006a62:	bf00      	nop
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
	__NOP();
 8006a70:	bf00      	nop
}
 8006a72:	bf00      	nop
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
	__NOP();
 8006a80:	bf00      	nop
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
	__NOP();
 8006a90:	bf00      	nop
}
 8006a92:	bf00      	nop
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
	__NOP();
 8006aa0:	bf00      	nop
}
 8006aa2:	bf00      	nop
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <EXTI0_IRQHandler+0x24>)
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <EXTI0_IRQHandler+0x24>)
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <EXTI0_IRQHandler+0x24>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8006ac8:	f7ff ff80 	bl	80069cc <callback_extInt0>
	}
}
 8006acc:	bf00      	nop
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40013c00 	.word	0x40013c00

08006ad4 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <EXTI1_IRQHandler+0x24>)
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <EXTI1_IRQHandler+0x24>)
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	4a03      	ldr	r2, [pc, #12]	; (8006af8 <EXTI1_IRQHandler+0x24>)
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8006af0:	f7fa ffd2 	bl	8001a98 <callback_extInt1>
	}
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40013c00 	.word	0x40013c00

08006afc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <EXTI2_IRQHandler+0x24>)
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <EXTI2_IRQHandler+0x24>)
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	4a03      	ldr	r2, [pc, #12]	; (8006b20 <EXTI2_IRQHandler+0x24>)
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8006b18:	f7ff ff60 	bl	80069dc <callback_extInt2>
	}
}
 8006b1c:	bf00      	nop
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40013c00 	.word	0x40013c00

08006b24 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <EXTI3_IRQHandler+0x24>)
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <EXTI3_IRQHandler+0x24>)
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	4a03      	ldr	r2, [pc, #12]	; (8006b48 <EXTI3_IRQHandler+0x24>)
 8006b3a:	f043 0308 	orr.w	r3, r3, #8
 8006b3e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006b40:	f7fa ffc0 	bl	8001ac4 <callback_extInt3>
	}
}
 8006b44:	bf00      	nop
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40013c00 	.word	0x40013c00

08006b4c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <EXTI4_IRQHandler+0x24>)
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8006b5c:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <EXTI4_IRQHandler+0x24>)
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	4a03      	ldr	r2, [pc, #12]	; (8006b70 <EXTI4_IRQHandler+0x24>)
 8006b62:	f043 0310 	orr.w	r3, r3, #16
 8006b66:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8006b68:	f7ff ff40 	bl	80069ec <callback_extInt4>
	}
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40013c00 	.word	0x40013c00

08006b74 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8006b78:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8006b84:	4b23      	ldr	r3, [pc, #140]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006b8a:	f043 0320 	orr.w	r3, r3, #32
 8006b8e:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8006b90:	f7ff ff34 	bl	80069fc <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8006b94:	e03c      	b.n	8006c10 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8006b96:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8006bae:	f7ff ff2d 	bl	8006a0c <callback_extInt6>
}
 8006bb2:	e02d      	b.n	8006c10 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8006bb4:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8006bc0:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8006bcc:	f7ff ff26 	bl	8006a1c <callback_extInt7>
}
 8006bd0:	e01e      	b.n	8006c10 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4a0c      	ldr	r2, [pc, #48]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be8:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8006bea:	f7ff ff1f 	bl	8006a2c <callback_extInt8>
}
 8006bee:	e00f      	b.n	8006c10 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <EXTI9_5_IRQHandler+0xa0>)
 8006c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c06:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8006c08:	f7ff ff18 	bl	8006a3c <callback_extInt9>
}
 8006c0c:	e000      	b.n	8006c10 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006c0e:	bf00      	nop
}
 8006c10:	bf00      	nop
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40013c00 	.word	0x40013c00

08006c18 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8006c28:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	4a29      	ldr	r2, [pc, #164]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c32:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8006c34:	f7ff ff0a 	bl	8006a4c <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8006c38:	e049      	b.n	8006cce <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c50:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8006c52:	f7ff ff03 	bl	8006a5c <callback_extInt11>
}
 8006c56:	e03a      	b.n	8006cce <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c6e:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8006c70:	f7ff fefc 	bl	8006a6c <callback_extInt12>
}
 8006c74:	e02b      	b.n	8006cce <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8006c76:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c8c:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8006c8e:	f7ff fef5 	bl	8006a7c <callback_extInt13>
}
 8006c92:	e01c      	b.n	8006cce <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006caa:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8006cac:	f7ff feee 	bl	8006a8c <callback_extInt14>
}
 8006cb0:	e00d      	b.n	8006cce <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <EXTI15_10_IRQHandler+0xbc>)
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc8:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8006cca:	f7ff fee7 	bl	8006a9c <callback_extInt15>
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40013c00 	.word	0x40013c00

08006cd8 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a88      	ldr	r2, [pc, #544]	; (8006f10 <GPIO_Config+0x238>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d106      	bne.n	8006d00 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8006cf2:	4b88      	ldr	r3, [pc, #544]	; (8006f14 <GPIO_Config+0x23c>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	4a87      	ldr	r2, [pc, #540]	; (8006f14 <GPIO_Config+0x23c>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	e03a      	b.n	8006d76 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a84      	ldr	r2, [pc, #528]	; (8006f18 <GPIO_Config+0x240>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d106      	bne.n	8006d18 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8006d0a:	4b82      	ldr	r3, [pc, #520]	; (8006f14 <GPIO_Config+0x23c>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	4a81      	ldr	r2, [pc, #516]	; (8006f14 <GPIO_Config+0x23c>)
 8006d10:	f043 0302 	orr.w	r3, r3, #2
 8006d14:	6313      	str	r3, [r2, #48]	; 0x30
 8006d16:	e02e      	b.n	8006d76 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7f      	ldr	r2, [pc, #508]	; (8006f1c <GPIO_Config+0x244>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d106      	bne.n	8006d30 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8006d22:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <GPIO_Config+0x23c>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a7b      	ldr	r2, [pc, #492]	; (8006f14 <GPIO_Config+0x23c>)
 8006d28:	f043 0304 	orr.w	r3, r3, #4
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	e022      	b.n	8006d76 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7a      	ldr	r2, [pc, #488]	; (8006f20 <GPIO_Config+0x248>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d106      	bne.n	8006d48 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8006d3a:	4b76      	ldr	r3, [pc, #472]	; (8006f14 <GPIO_Config+0x23c>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	4a75      	ldr	r2, [pc, #468]	; (8006f14 <GPIO_Config+0x23c>)
 8006d40:	f043 0308 	orr.w	r3, r3, #8
 8006d44:	6313      	str	r3, [r2, #48]	; 0x30
 8006d46:	e016      	b.n	8006d76 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a75      	ldr	r2, [pc, #468]	; (8006f24 <GPIO_Config+0x24c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d106      	bne.n	8006d60 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8006d52:	4b70      	ldr	r3, [pc, #448]	; (8006f14 <GPIO_Config+0x23c>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	4a6f      	ldr	r2, [pc, #444]	; (8006f14 <GPIO_Config+0x23c>)
 8006d58:	f043 0310 	orr.w	r3, r3, #16
 8006d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5e:	e00a      	b.n	8006d76 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a70      	ldr	r2, [pc, #448]	; (8006f28 <GPIO_Config+0x250>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d105      	bne.n	8006d76 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8006d6a:	4b6a      	ldr	r3, [pc, #424]	; (8006f14 <GPIO_Config+0x23c>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4a69      	ldr	r2, [pc, #420]	; (8006f14 <GPIO_Config+0x23c>)
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	795b      	ldrb	r3, [r3, #5]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d143      	bne.n	8006e06 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	791b      	ldrb	r3, [r3, #4]
 8006d82:	2b07      	cmp	r3, #7
 8006d84:	d81f      	bhi.n	8006dc6 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a1a      	ldr	r2, [r3, #32]
 8006d94:	210f      	movs	r1, #15
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	400a      	ands	r2, r1
 8006da6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7a5b      	ldrb	r3, [r3, #9]
 8006db2:	4619      	mov	r1, r3
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	621a      	str	r2, [r3, #32]
 8006dc4:	e01f      	b.n	8006e06 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	791b      	ldrb	r3, [r3, #4]
 8006dca:	3b08      	subs	r3, #8
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd6:	210f      	movs	r1, #15
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	fa01 f303 	lsl.w	r3, r1, r3
 8006dde:	43db      	mvns	r3, r3
 8006de0:	4619      	mov	r1, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	400a      	ands	r2, r1
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7a5b      	ldrb	r3, [r3, #9]
 8006df4:	4619      	mov	r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	791b      	ldrb	r3, [r3, #4]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	2103      	movs	r1, #3
 8006e26:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	400a      	ands	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6819      	ldr	r1, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7a1b      	ldrb	r3, [r3, #8]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	4619      	mov	r1, r3
 8006e62:	2301      	movs	r3, #1
 8006e64:	408b      	lsls	r3, r1
 8006e66:	43db      	mvns	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	400a      	ands	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6859      	ldr	r1, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	799b      	ldrb	r3, [r3, #6]
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	791b      	ldrb	r3, [r3, #4]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	2103      	movs	r1, #3
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	400a      	ands	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6899      	ldr	r1, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	79db      	ldrb	r3, [r3, #7]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	791b      	ldrb	r3, [r3, #4]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	2103      	movs	r1, #3
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	400a      	ands	r2, r1
 8006ef0:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68d9      	ldr	r1, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40020000 	.word	0x40020000
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40020400 	.word	0x40020400
 8006f1c:	40020800 	.word	0x40020800
 8006f20:	40020c00 	.word	0x40020c00
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40021c00 	.word	0x40021c00

08006f2c <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10d      	bne.n	8006f5a <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	791b      	ldrb	r3, [r3, #4]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	408b      	lsls	r3, r1
 8006f4e:	4619      	mov	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8006f58:	e00d      	b.n	8006f76 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	3310      	adds	r3, #16
 8006f66:	2101      	movs	r1, #1
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	619a      	str	r2, [r3, #24]
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	791b      	ldrb	r3, [r3, #4]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	408b      	lsls	r3, r1
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8006fae:	e00d      	b.n	8006fcc <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	3310      	adds	r3, #16
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	619a      	str	r2, [r3, #24]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2301      	movs	r3, #1
 8006fec:	4093      	lsls	r3, r2
 8006fee:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8006ff8:	897b      	ldrh	r3, [r7, #10]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	461a      	mov	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	40d3      	lsrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ffd8 	bl	8006fd8 <GPIO_ReadPin>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ff76 	bl	8006f2c <GPIO_WritePin>
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fe3b 	bl	8006cd8 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fe36 	bl	8006cd8 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4618      	mov	r0, r3
 8007072:	f002 f969 	bl	8009348 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8007076:	e004      	b.n	8007082 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f94f 	bl	800731c <WHOIAM>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f7      	beq.n	8007078 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8007088:	216b      	movs	r1, #107	; 0x6b
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8f1 	bl	8007272 <readData>
 8007090:	4603      	mov	r3, r0
 8007092:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	461a      	mov	r2, r3
 800709c:	216b      	movs	r1, #107	; 0x6b
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f89c 	bl	80071dc <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 80070a4:	216b      	movs	r1, #107	; 0x6b
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8e3 	bl	8007272 <readData>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 80070b0:	211c      	movs	r1, #28
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8dd 	bl	8007272 <readData>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	f023 0318 	bic.w	r3, r3, #24
 80070c2:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d833      	bhi.n	8007134 <configMPUAccel+0xec>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <configMPUAccel+0x8c>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070f3 	.word	0x080070f3
 80070dc:	08007109 	.word	0x08007109
 80070e0:	0800711f 	.word	0x0800711f
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	461a      	mov	r2, r3
 80070e8:	211c      	movs	r1, #28
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f876 	bl	80071dc <writeData>


				break;
 80070f0:	e021      	b.n	8007136 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	461a      	mov	r2, r3
 80070fe:	211c      	movs	r1, #28
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f86b 	bl	80071dc <writeData>


				break;
 8007106:	e016      	b.n	8007136 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	f043 0310 	orr.w	r3, r3, #16
 800710e:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	461a      	mov	r2, r3
 8007114:	211c      	movs	r1, #28
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f860 	bl	80071dc <writeData>


				break;
 800711c:	e00b      	b.n	8007136 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	f043 0318 	orr.w	r3, r3, #24
 8007124:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	461a      	mov	r2, r3
 800712a:	211c      	movs	r1, #28
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f855 	bl	80071dc <writeData>


				break;
 8007132:	e000      	b.n	8007136 <configMPUAccel+0xee>
			}default:{
				break;
 8007134:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8007136:	211c      	movs	r1, #28
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f89a 	bl	8007272 <readData>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8007142:	211b      	movs	r1, #27
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f894 	bl	8007272 <readData>
 800714a:	4603      	mov	r3, r0
 800714c:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	f023 0318 	bic.w	r3, r3, #24
 8007154:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d832      	bhi.n	80071c4 <configMPUAccel+0x17c>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <configMPUAccel+0x11c>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	08007183 	.word	0x08007183
 800716c:	08007199 	.word	0x08007199
 8007170:	080071af 	.word	0x080071af
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	461a      	mov	r2, r3
 8007178:	211b      	movs	r1, #27
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f82e 	bl	80071dc <writeData>


				break;
 8007180:	e021      	b.n	80071c6 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f043 0308 	orr.w	r3, r3, #8
 8007188:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	461a      	mov	r2, r3
 800718e:	211b      	movs	r1, #27
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f823 	bl	80071dc <writeData>


				break;
 8007196:	e016      	b.n	80071c6 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	f043 0310 	orr.w	r3, r3, #16
 800719e:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	461a      	mov	r2, r3
 80071a4:	211b      	movs	r1, #27
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f818 	bl	80071dc <writeData>


				break;
 80071ac:	e00b      	b.n	80071c6 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	f043 0318 	orr.w	r3, r3, #24
 80071b4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	461a      	mov	r2, r3
 80071ba:	211b      	movs	r1, #27
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f80d 	bl	80071dc <writeData>


				break;
 80071c2:	e000      	b.n	80071c6 <configMPUAccel+0x17e>
			}default:{
				break;
 80071c4:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80071c6:	211b      	movs	r1, #27
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f852 	bl	8007272 <readData>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]


}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop

080071dc <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
 80071e8:	4613      	mov	r3, r2
 80071ea:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071fe:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4618      	mov	r0, r3
 8007206:	f002 fa0f 	bl	8009628 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68d8      	ldr	r0, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	791b      	ldrb	r3, [r3, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	4619      	mov	r1, r3
 8007218:	f002 fa71 	bl	80096fe <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f002 fa92 	bl	800974e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800722a:	e000      	b.n	800722e <writeData+0x52>
		__NOP();
 800722c:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f6      	bne.n	800722c <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	78ba      	ldrb	r2, [r7, #2]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f002 fa9b 	bl	8009782 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800724c:	e000      	b.n	8007250 <writeData+0x74>
		__NOP();
 800724e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f6      	bne.n	800724e <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	4618      	mov	r0, r3
 8007266:	f002 f9cd 	bl	8009604 <i2c_stopTransaction>



}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007294:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4618      	mov	r0, r3
 800729c:	f002 f9c4 	bl	8009628 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68d8      	ldr	r0, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	4619      	mov	r1, r3
 80072ae:	f002 fa26 	bl	80096fe <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	78fa      	ldrb	r2, [r7, #3]
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f002 fa47 	bl	800974e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80072c0:	e000      	b.n	80072c4 <readData+0x52>
		__NOP();
 80072c2:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f6      	bne.n	80072c2 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4618      	mov	r0, r3
 80072da:	f002 f9d6 	bl	800968a <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68d8      	ldr	r0, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	791b      	ldrb	r3, [r3, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	4619      	mov	r1, r3
 80072ec:	f002 fa07 	bl	80096fe <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f002 f9f0 	bl	80096da <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 f980 	bl	8009604 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4618      	mov	r0, r3
 800730a:	f002 fa54 	bl	80097b6 <i2c_readDataByte>
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 800732c:	2175      	movs	r1, #117	; 0x75
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff ff9f 	bl	8007272 <readData>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800733e:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8007352:	7bbb      	ldrb	r3, [r7, #14]

}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	0000      	movs	r0, r0
	...

08007360 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007380:	2143      	movs	r1, #67	; 0x43
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff ff75 	bl	8007272 <readData>
 8007388:	4603      	mov	r3, r0
 800738a:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800738c:	2144      	movs	r1, #68	; 0x44
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff6f 	bl	8007272 <readData>
 8007394:	4603      	mov	r3, r0
 8007396:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8007398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b21a      	sxth	r2, r3
 80073a0:	89bb      	ldrh	r3, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d846      	bhi.n	800743c <readGyro_X+0xdc>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <readGyro_X+0x54>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073e3 	.word	0x080073e3
 80073bc:	08007401 	.word	0x08007401
 80073c0:	0800741f 	.word	0x0800741f
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 80073c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7f9 f8c3 	bl	8000554 <__aeabi_i2d>
 80073ce:	a325      	add	r3, pc, #148	; (adr r3, 8007464 <readGyro_X+0x104>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f9 fa52 	bl	800087c <__aeabi_ddiv>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80073e0:	e02d      	b.n	800743e <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 80073e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7f9 f8b4 	bl	8000554 <__aeabi_i2d>
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <readGyro_X+0xf8>)
 80073f2:	f7f9 fa43 	bl	800087c <__aeabi_ddiv>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80073fe:	e01e      	b.n	800743e <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8007400:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007404:	4618      	mov	r0, r3
 8007406:	f7f9 f8a5 	bl	8000554 <__aeabi_i2d>
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <readGyro_X+0xfc>)
 8007410:	f7f9 fa34 	bl	800087c <__aeabi_ddiv>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800741c:	e00f      	b.n	800743e <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800741e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007422:	4618      	mov	r0, r3
 8007424:	f7f9 f896 	bl	8000554 <__aeabi_i2d>
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <readGyro_X+0x100>)
 800742e:	f7f9 fa25 	bl	800087c <__aeabi_ddiv>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800743a:	e000      	b.n	800743e <readGyro_X+0xde>
		}default:{
			break;
 800743c:	bf00      	nop
		}

	}

	return GYROX_R;
 800743e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007442:	f7f9 fbe9 	bl	8000c18 <__aeabi_d2f>
 8007446:	4603      	mov	r3, r0
 8007448:	ee07 3a90 	vmov	s15, r3

}
 800744c:	eeb0 0a67 	vmov.f32	s0, s15
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40508000 	.word	0x40508000
 800745c:	40408000 	.word	0x40408000
 8007460:	40300000 	.word	0x40300000
 8007464:	00000000 	.word	0x00000000
 8007468:	40606000 	.word	0x40606000
 800746c:	00000000 	.word	0x00000000

08007470 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8007490:	2145      	movs	r1, #69	; 0x45
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff feed 	bl	8007272 <readData>
 8007498:	4603      	mov	r3, r0
 800749a:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800749c:	2146      	movs	r1, #70	; 0x46
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fee7 	bl	8007272 <readData>
 80074a4:	4603      	mov	r3, r0
 80074a6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 80074a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	b21a      	sxth	r2, r3
 80074b0:	89bb      	ldrh	r3, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d846      	bhi.n	800754c <readGyro_Y+0xdc>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <readGyro_Y+0x54>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074d5 	.word	0x080074d5
 80074c8:	080074f3 	.word	0x080074f3
 80074cc:	08007511 	.word	0x08007511
 80074d0:	0800752f 	.word	0x0800752f
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 80074d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 f83b 	bl	8000554 <__aeabi_i2d>
 80074de:	a325      	add	r3, pc, #148	; (adr r3, 8007574 <readGyro_Y+0x104>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f9 f9ca 	bl	800087c <__aeabi_ddiv>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80074f0:	e02d      	b.n	800754e <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 80074f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7f9 f82c 	bl	8000554 <__aeabi_i2d>
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <readGyro_Y+0xf8>)
 8007502:	f7f9 f9bb 	bl	800087c <__aeabi_ddiv>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800750e:	e01e      	b.n	800754e <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8007510:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007514:	4618      	mov	r0, r3
 8007516:	f7f9 f81d 	bl	8000554 <__aeabi_i2d>
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <readGyro_Y+0xfc>)
 8007520:	f7f9 f9ac 	bl	800087c <__aeabi_ddiv>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800752c:	e00f      	b.n	800754e <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800752e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007532:	4618      	mov	r0, r3
 8007534:	f7f9 f80e 	bl	8000554 <__aeabi_i2d>
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <readGyro_Y+0x100>)
 800753e:	f7f9 f99d 	bl	800087c <__aeabi_ddiv>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800754a:	e000      	b.n	800754e <readGyro_Y+0xde>
		}default:{
			break;
 800754c:	bf00      	nop
		}

	}

	return GYROY_R;
 800754e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007552:	f7f9 fb61 	bl	8000c18 <__aeabi_d2f>
 8007556:	4603      	mov	r3, r0
 8007558:	ee07 3a90 	vmov	s15, r3

}
 800755c:	eeb0 0a67 	vmov.f32	s0, s15
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40508000 	.word	0x40508000
 800756c:	40408000 	.word	0x40408000
 8007570:	40300000 	.word	0x40300000
 8007574:	00000000 	.word	0x00000000
 8007578:	40606000 	.word	0x40606000
 800757c:	00000000 	.word	0x00000000

08007580 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 80075a0:	2147      	movs	r1, #71	; 0x47
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fe65 	bl	8007272 <readData>
 80075a8:	4603      	mov	r3, r0
 80075aa:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 80075ac:	2148      	movs	r1, #72	; 0x48
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff fe5f 	bl	8007272 <readData>
 80075b4:	4603      	mov	r3, r0
 80075b6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 80075b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b21a      	sxth	r2, r3
 80075c0:	89bb      	ldrh	r3, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d846      	bhi.n	800765c <readGyro_Z+0xdc>
 80075ce:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <readGyro_Z+0x54>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	080075e5 	.word	0x080075e5
 80075d8:	08007603 	.word	0x08007603
 80075dc:	08007621 	.word	0x08007621
 80075e0:	0800763f 	.word	0x0800763f
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 80075e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7f8 ffb3 	bl	8000554 <__aeabi_i2d>
 80075ee:	a325      	add	r3, pc, #148	; (adr r3, 8007684 <readGyro_Z+0x104>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f9 f942 	bl	800087c <__aeabi_ddiv>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007600:	e02d      	b.n	800765e <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8007602:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007606:	4618      	mov	r0, r3
 8007608:	f7f8 ffa4 	bl	8000554 <__aeabi_i2d>
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <readGyro_Z+0xf8>)
 8007612:	f7f9 f933 	bl	800087c <__aeabi_ddiv>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800761e:	e01e      	b.n	800765e <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8007620:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 ff95 	bl	8000554 <__aeabi_i2d>
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <readGyro_Z+0xfc>)
 8007630:	f7f9 f924 	bl	800087c <__aeabi_ddiv>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800763c:	e00f      	b.n	800765e <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800763e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007642:	4618      	mov	r0, r3
 8007644:	f7f8 ff86 	bl	8000554 <__aeabi_i2d>
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <readGyro_Z+0x100>)
 800764e:	f7f9 f915 	bl	800087c <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800765a:	e000      	b.n	800765e <readGyro_Z+0xde>
		}default:{
			break;
 800765c:	bf00      	nop
		}

	}

	return GYROZ_R;
 800765e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007662:	f7f9 fad9 	bl	8000c18 <__aeabi_d2f>
 8007666:	4603      	mov	r3, r0
 8007668:	ee07 3a90 	vmov	s15, r3

}
 800766c:	eeb0 0a67 	vmov.f32	s0, s15
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40508000 	.word	0x40508000
 800767c:	40408000 	.word	0x40408000
 8007680:	40300000 	.word	0x40300000
 8007684:	00000000 	.word	0x00000000
 8007688:	40606000 	.word	0x40606000
 800768c:	00000000 	.word	0x00000000

08007690 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8007690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007694:	b08a      	sub	sp, #40	; 0x28
 8007696:	af00      	add	r7, sp, #0
 8007698:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80076a6:	f7f8 fe07 	bl	80002b8 <__aeabi_dsub>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80076be:	f7f8 fdfb 	bl	80002b8 <__aeabi_dsub>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 80076ca:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80077d8 <calculation_parameter_distance+0x148>
 80076ce:	ed97 0b08 	vldr	d0, [r7, #32]
 80076d2:	f005 fd53 	bl	800d17c <pow>
 80076d6:	ec59 8b10 	vmov	r8, r9, d0
 80076da:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80077d8 <calculation_parameter_distance+0x148>
 80076de:	ed97 0b06 	vldr	d0, [r7, #24]
 80076e2:	f005 fd4b 	bl	800d17c <pow>
 80076e6:	ec53 2b10 	vmov	r2, r3, d0
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f8 fde5 	bl	80002bc <__adddf3>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	ec43 2b17 	vmov	d7, r2, r3
 80076fa:	eeb0 0a47 	vmov.f32	s0, s14
 80076fe:	eef0 0a67 	vmov.f32	s1, s15
 8007702:	f005 fdab 	bl	800d25c <sqrt>
 8007706:	eeb0 7a40 	vmov.f32	s14, s0
 800770a:	eef0 7a60 	vmov.f32	s15, s1
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 8007714:	6979      	ldr	r1, [r7, #20]
 8007716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800771a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 800771e:	6979      	ldr	r1, [r7, #20]
 8007720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007724:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	60bb      	str	r3, [r7, #8]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800773a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800773e:	f7f8 ff73 	bl	8000628 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4690      	mov	r8, r2
 8007748:	4699      	mov	r9, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007754:	f7f8 ff68 	bl	8000628 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4640      	mov	r0, r8
 800775e:	4649      	mov	r1, r9
 8007760:	f7f8 fdaa 	bl	80002b8 <__aeabi_dsub>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	6979      	ldr	r1, [r7, #20]
 800776a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007774:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8007778:	6a3c      	ldr	r4, [r7, #32]
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	f7f8 ff44 	bl	8000628 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	461d      	mov	r5, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80077ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077b2:	f7f8 ff39 	bl	8000628 <__aeabi_dmul>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f8 fd7d 	bl	80002bc <__adddf3>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80077cc:	bf00      	nop
 80077ce:	3728      	adds	r7, #40	; 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80077d6:	bf00      	nop
 80077d8:	00000000 	.word	0x00000000
 80077dc:	40000000 	.word	0x40000000

080077e0 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80077e0:	b5b0      	push	{r4, r5, r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6178      	str	r0, [r7, #20]
 80077e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80077ec:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80077f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077fa:	f7f8 ff15 	bl	8000628 <__aeabi_dmul>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4614      	mov	r4, r2
 8007804:	461d      	mov	r5, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	f7f8 ff0a 	bl	8000628 <__aeabi_dmul>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4620      	mov	r0, r4
 800781a:	4629      	mov	r1, r5
 800781c:	f7f8 fd4e 	bl	80002bc <__adddf3>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800782e:	f7f8 fd45 	bl	80002bc <__adddf3>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4610      	mov	r0, r2
 8007838:	4619      	mov	r1, r3
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f9 f81c 	bl	800087c <__aeabi_ddiv>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8007848:	4611      	mov	r1, r2
 800784a:	61b9      	str	r1, [r7, #24]
 800784c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007850:	61fb      	str	r3, [r7, #28]

	return distance;
 8007852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007856:	ec43 2b17 	vmov	d7, r2, r3
}
 800785a:	eeb0 0a47 	vmov.f32	s0, s14
 800785e:	eef0 0a67 	vmov.f32	s1, s15
 8007862:	3720      	adds	r7, #32
 8007864:	46bd      	mov	sp, r7
 8007866:	bdb0      	pop	{r4, r5, r7, pc}

08007868 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8007868:	b5b0      	push	{r4, r5, r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6178      	str	r0, [r7, #20]
 8007870:	ed87 0b02 	vstr	d0, [r7, #8]
 8007874:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800787e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007882:	f7f8 fed1 	bl	8000628 <__aeabi_dmul>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4614      	mov	r4, r2
 800788c:	461d      	mov	r5, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007898:	f7f8 fec6 	bl	8000628 <__aeabi_dmul>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4620      	mov	r0, r4
 80078a2:	4629      	mov	r1, r5
 80078a4:	f7f8 fd0a 	bl	80002bc <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80078b6:	f7f8 fd01 	bl	80002bc <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80078c8:	f7f8 ffd8 	bl	800087c <__aeabi_ddiv>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80078d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80078dc:	eeb0 0a47 	vmov.f32	s0, s14
 80078e0:	eef0 0a67 	vmov.f32	s1, s15
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078ec <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a6c      	ldr	r2, [pc, #432]	; (8007aac <pwm_Config+0x1c0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d106      	bne.n	800790c <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80078fe:	4b6c      	ldr	r3, [pc, #432]	; (8007ab0 <pwm_Config+0x1c4>)
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	4a6b      	ldr	r2, [pc, #428]	; (8007ab0 <pwm_Config+0x1c4>)
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	6453      	str	r3, [r2, #68]	; 0x44
 800790a:	e030      	b.n	800796e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007914:	d106      	bne.n	8007924 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007916:	4b66      	ldr	r3, [pc, #408]	; (8007ab0 <pwm_Config+0x1c4>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	4a65      	ldr	r2, [pc, #404]	; (8007ab0 <pwm_Config+0x1c4>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6413      	str	r3, [r2, #64]	; 0x40
 8007922:	e024      	b.n	800796e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a62      	ldr	r2, [pc, #392]	; (8007ab4 <pwm_Config+0x1c8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d106      	bne.n	800793c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800792e:	4b60      	ldr	r3, [pc, #384]	; (8007ab0 <pwm_Config+0x1c4>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	4a5f      	ldr	r2, [pc, #380]	; (8007ab0 <pwm_Config+0x1c4>)
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	6413      	str	r3, [r2, #64]	; 0x40
 800793a:	e018      	b.n	800796e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a5d      	ldr	r2, [pc, #372]	; (8007ab8 <pwm_Config+0x1cc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d106      	bne.n	8007954 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007946:	4b5a      	ldr	r3, [pc, #360]	; (8007ab0 <pwm_Config+0x1c4>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	4a59      	ldr	r2, [pc, #356]	; (8007ab0 <pwm_Config+0x1c4>)
 800794c:	f043 0304 	orr.w	r3, r3, #4
 8007950:	6413      	str	r3, [r2, #64]	; 0x40
 8007952:	e00c      	b.n	800796e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a58      	ldr	r2, [pc, #352]	; (8007abc <pwm_Config+0x1d0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d106      	bne.n	800796c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800795e:	4b54      	ldr	r3, [pc, #336]	; (8007ab0 <pwm_Config+0x1c4>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a53      	ldr	r2, [pc, #332]	; (8007ab0 <pwm_Config+0x1c4>)
 8007964:	f043 0308 	orr.w	r3, r3, #8
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	e000      	b.n	800796e <pwm_Config+0x82>
	}
	else{
		__NOP();
 800796c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800797c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7f5b      	ldrb	r3, [r3, #29]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f930 	bl	8007bec <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa67 	bl	8007e60 <setDuttyCycle>
 8007992:	e005      	b.n	80079a0 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f929 	bl	8007bec <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb38 	bl	8008010 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0210 	bic.w	r2, r2, #16
 80079ae:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7a1b      	ldrb	r3, [r3, #8]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d86f      	bhi.n	8007aa0 <pwm_Config+0x1b4>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <pwm_Config+0xdc>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	08007a3d 	.word	0x08007a3d
 80079d4:	08007a6f 	.word	0x08007a6f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0203 	bic.w	r2, r2, #3
 80079e6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80079f6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	619a      	str	r2, [r3, #24]


		break;
 8007a08:	e04b      	b.n	8007aa2 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a18:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007a28:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a38:	619a      	str	r2, [r3, #24]

		break;
 8007a3a:	e032      	b.n	8007aa2 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69da      	ldr	r2, [r3, #28]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0203 	bic.w	r2, r2, #3
 8007a4a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69da      	ldr	r2, [r3, #28]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007a5a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69da      	ldr	r2, [r3, #28]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0208 	orr.w	r2, r2, #8
 8007a6a:	61da      	str	r2, [r3, #28]

		break;
 8007a6c:	e019      	b.n	8007aa2 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a7c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007a8c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a9c:	61da      	str	r2, [r3, #28]

		break;
 8007a9e:	e000      	b.n	8007aa2 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8007aa0:	bf00      	nop
	}// fin del switch-case




}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00

08007ac0 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a3d      	ldr	r2, [pc, #244]	; (8007be8 <enableOutput+0x104>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d13a      	bne.n	8007b6c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b04:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7a1b      	ldrb	r3, [r3, #8]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d862      	bhi.n	8007bd4 <enableOutput+0xf0>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <enableOutput+0x30>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b37 	.word	0x08007b37
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b5b 	.word	0x08007b5b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	621a      	str	r2, [r3, #32]

				break;
 8007b34:	e051      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a1a      	ldr	r2, [r3, #32]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0210 	orr.w	r2, r2, #16
 8007b44:	621a      	str	r2, [r3, #32]

				break;
 8007b46:	e048      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b56:	621a      	str	r2, [r3, #32]

				break;
 8007b58:	e03f      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b68:	621a      	str	r2, [r3, #32]

				break;
 8007b6a:	e036      	b.n	8007bda <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7a1b      	ldrb	r3, [r3, #8]
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d831      	bhi.n	8007bd8 <enableOutput+0xf4>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <enableOutput+0x98>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007b9f 	.word	0x08007b9f
 8007b84:	08007bb1 	.word	0x08007bb1
 8007b88:	08007bc3 	.word	0x08007bc3
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0201 	orr.w	r2, r2, #1
 8007b9a:	621a      	str	r2, [r3, #32]

				break;
 8007b9c:	e01d      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0210 	orr.w	r2, r2, #16
 8007bac:	621a      	str	r2, [r3, #32]

				break;
 8007bae:	e014      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6a1a      	ldr	r2, [r3, #32]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bbe:	621a      	str	r2, [r3, #32]

				break;
 8007bc0:	e00b      	b.n	8007bda <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a1a      	ldr	r2, [r3, #32]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bd0:	621a      	str	r2, [r3, #32]

				break;
 8007bd2:	e002      	b.n	8007bda <enableOutput+0xf6>
				break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <enableOutput+0xf6>
			}

			default: {
				break;
 8007bd8:	bf00      	nop
			}

		}
	}
	return SET;
 8007bda:	2301      	movs	r3, #1
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40010000 	.word	0x40010000

08007bec <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68d2      	ldr	r2, [r2, #12]
 8007c00:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d01a      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b14      	cmp	r3, #20
 8007c12:	d017      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b1e      	cmp	r3, #30
 8007c18:	d014      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b28      	cmp	r3, #40	; 0x28
 8007c1e:	d011      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b32      	cmp	r3, #50	; 0x32
 8007c24:	d00e      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b3c      	cmp	r3, #60	; 0x3c
 8007c2a:	d00b      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b46      	cmp	r3, #70	; 0x46
 8007c30:	d008      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b50      	cmp	r3, #80	; 0x50
 8007c36:	d005      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b5a      	cmp	r3, #90	; 0x5a
 8007c3c:	d002      	beq.n	8007c44 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b64      	cmp	r3, #100	; 0x64
 8007c42:	d118      	bne.n	8007c76 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	4b7b      	ldr	r3, [pc, #492]	; (8007e3c <setFrequency+0x250>)
 8007c50:	f7f8 fcea 	bl	8000628 <__aeabi_dmul>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	f7f8 ffbc 	bl	8000bd8 <__aeabi_d2uiz>
 8007c60:	4603      	mov	r3, r0
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	4b76      	ldr	r3, [pc, #472]	; (8007e40 <setFrequency+0x254>)
 8007c66:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007c68:	4b75      	ldr	r3, [pc, #468]	; (8007e40 <setFrequency+0x254>)
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	1e5a      	subs	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c74:	e0dd      	b.n	8007e32 <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2ba0      	cmp	r3, #160	; 0xa0
 8007c7a:	d022      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2bc8      	cmp	r3, #200	; 0xc8
 8007c80:	d01f      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007c88:	d01b      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007c90:	d017      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c98:	d013      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8007ca0:	d00f      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007ca8:	d00b      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007cb0:	d007      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8007cb8:	d003      	beq.n	8007cc2 <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cc0:	d118      	bne.n	8007cf4 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <setFrequency+0x258>)
 8007cce:	f7f8 fcab 	bl	8000628 <__aeabi_dmul>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f7f8 ff7d 	bl	8000bd8 <__aeabi_d2uiz>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	4b57      	ldr	r3, [pc, #348]	; (8007e40 <setFrequency+0x254>)
 8007ce4:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007ce6:	4b56      	ldr	r3, [pc, #344]	; (8007e40 <setFrequency+0x254>)
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007cf2:	e09e      	b.n	8007e32 <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007cfa:	d029      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d02:	d025      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d020      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8007d14:	d01c      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d017      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f241 7270 	movw	r2, #6000	; 0x1770
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d012      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00d      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007d3a:	d009      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f242 3228 	movw	r2, #9000	; 0x2328
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d118      	bne.n	8007d82 <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	4b3b      	ldr	r3, [pc, #236]	; (8007e48 <setFrequency+0x25c>)
 8007d5c:	f7f8 fc64 	bl	8000628 <__aeabi_dmul>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	f7f8 ff36 	bl	8000bd8 <__aeabi_d2uiz>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <setFrequency+0x254>)
 8007d72:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007d74:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <setFrequency+0x254>)
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	1e5a      	subs	r2, r3, #1
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d80:	e057      	b.n	8007e32 <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007d88:	d028      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d023      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f247 5230 	movw	r2, #30000	; 0x7530
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d01e      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d019      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d014      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00f      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <setFrequency+0x260>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00b      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <setFrequency+0x264>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d007      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <setFrequency+0x268>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d003      	beq.n	8007ddc <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <setFrequency+0x26c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d111      	bne.n	8007e00 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007de2:	4610      	mov	r0, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	f7f8 fef7 	bl	8000bd8 <__aeabi_d2uiz>
 8007dea:	4603      	mov	r3, r0
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <setFrequency+0x254>)
 8007df0:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007df2:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <setFrequency+0x254>)
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dfe:	e018      	b.n	8007e32 <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <setFrequency+0x270>)
 8007e0c:	f7f8 fd36 	bl	800087c <__aeabi_ddiv>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4610      	mov	r0, r2
 8007e16:	4619      	mov	r1, r3
 8007e18:	f7f8 fede 	bl	8000bd8 <__aeabi_d2uiz>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <setFrequency+0x254>)
 8007e22:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <setFrequency+0x254>)
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	1e5a      	subs	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	408f4000 	.word	0x408f4000
 8007e40:	20011d68 	.word	0x20011d68
 8007e44:	40590000 	.word	0x40590000
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	00011170 	.word	0x00011170
 8007e50:	00013880 	.word	0x00013880
 8007e54:	00015f90 	.word	0x00015f90
 8007e58:	000186a0 	.word	0x000186a0
 8007e5c:	40340000 	.word	0x40340000

08007e60 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b08b      	sub	sp, #44	; 0x2c
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7a1b      	ldrb	r3, [r3, #8]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	f200 80c3 	bhi.w	8007ff8 <setDuttyCycle+0x198>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <setDuttyCycle+0x18>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007ee5 	.word	0x08007ee5
 8007e80:	08007f41 	.word	0x08007f41
 8007e84:	08007f9d 	.word	0x08007f9d
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	ed93 7a06 	vldr	s14, [r3, #24]
 8007e8e:	4b5d      	ldr	r3, [pc, #372]	; (8008004 <setDuttyCycle+0x1a4>)
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9e:	ee17 0a90 	vmov	r0, s15
 8007ea2:	f7f8 fb69 	bl	8000578 <__aeabi_f2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	4b55      	ldr	r3, [pc, #340]	; (8008008 <setDuttyCycle+0x1a8>)
 8007eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eb8:	f7f8 fce0 	bl	800087c <__aeabi_ddiv>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	4b50      	ldr	r3, [pc, #320]	; (800800c <setDuttyCycle+0x1ac>)
 8007eca:	f7f8 f9f5 	bl	80002b8 <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681c      	ldr	r4, [r3, #0]
 8007eda:	f7f8 fe7d 	bl	8000bd8 <__aeabi_d2uiz>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8007ee2:	e08a      	b.n	8007ffa <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	ed93 7a06 	vldr	s14, [r3, #24]
 8007eea:	4b46      	ldr	r3, [pc, #280]	; (8008004 <setDuttyCycle+0x1a4>)
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efa:	ee17 0a90 	vmov	r0, s15
 8007efe:	f7f8 fb3b 	bl	8000578 <__aeabi_f2d>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	4b3e      	ldr	r3, [pc, #248]	; (8008008 <setDuttyCycle+0x1a8>)
 8007f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f14:	f7f8 fcb2 	bl	800087c <__aeabi_ddiv>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	4b39      	ldr	r3, [pc, #228]	; (800800c <setDuttyCycle+0x1ac>)
 8007f26:	f7f8 f9c7 	bl	80002b8 <__aeabi_dsub>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681c      	ldr	r4, [r3, #0]
 8007f36:	f7f8 fe4f 	bl	8000bd8 <__aeabi_d2uiz>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8007f3e:	e05c      	b.n	8007ffa <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	ed93 7a06 	vldr	s14, [r3, #24]
 8007f46:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <setDuttyCycle+0x1a4>)
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	ee17 0a90 	vmov	r0, s15
 8007f5a:	f7f8 fb0d 	bl	8000578 <__aeabi_f2d>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <setDuttyCycle+0x1a8>)
 8007f6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f70:	f7f8 fc84 	bl	800087c <__aeabi_ddiv>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	4b22      	ldr	r3, [pc, #136]	; (800800c <setDuttyCycle+0x1ac>)
 8007f82:	f7f8 f999 	bl	80002b8 <__aeabi_dsub>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681c      	ldr	r4, [r3, #0]
 8007f92:	f7f8 fe21 	bl	8000bd8 <__aeabi_d2uiz>
 8007f96:	4603      	mov	r3, r0
 8007f98:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8007f9a:	e02e      	b.n	8007ffa <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8007fa2:	4b18      	ldr	r3, [pc, #96]	; (8008004 <setDuttyCycle+0x1a4>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	ee17 0a90 	vmov	r0, s15
 8007fb6:	f7f8 fadf 	bl	8000578 <__aeabi_f2d>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <setDuttyCycle+0x1a8>)
 8007fc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fcc:	f7f8 fc56 	bl	800087c <__aeabi_ddiv>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <setDuttyCycle+0x1ac>)
 8007fde:	f7f8 f96b 	bl	80002b8 <__aeabi_dsub>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681c      	ldr	r4, [r3, #0]
 8007fee:	f7f8 fdf3 	bl	8000bd8 <__aeabi_d2uiz>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8007ff6:	e000      	b.n	8007ffa <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8007ff8:	bf00      	nop
	}

	}// fin del switch-case

}
 8007ffa:	bf00      	nop
 8007ffc:	372c      	adds	r7, #44	; 0x2c
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd90      	pop	{r4, r7, pc}
 8008002:	bf00      	nop
 8008004:	20011d68 	.word	0x20011d68
 8008008:	40590000 	.word	0x40590000
 800800c:	3ff00000 	.word	0x3ff00000

08008010 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008010:	b590      	push	{r4, r7, lr}
 8008012:	b08b      	sub	sp, #44	; 0x2c
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7a1b      	ldrb	r3, [r3, #8]
 800801c:	2b03      	cmp	r3, #3
 800801e:	f200 80d3 	bhi.w	80081c8 <setDuttyCycleAfOpt+0x1b8>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <setDuttyCycleAfOpt+0x18>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008039 	.word	0x08008039
 800802c:	0800809d 	.word	0x0800809d
 8008030:	08008101 	.word	0x08008101
 8008034:	08008165 	.word	0x08008165
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	edd3 7a06 	vldr	s15, [r3, #24]
 800803e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80081d4 <setDuttyCycleAfOpt+0x1c4>
 8008042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008046:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <setDuttyCycleAfOpt+0x1c8>)
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	ee17 0a90 	vmov	r0, s15
 800805a:	f7f8 fa8d 	bl	8000578 <__aeabi_f2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	4b5c      	ldr	r3, [pc, #368]	; (80081dc <setDuttyCycleAfOpt+0x1cc>)
 800806c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008070:	f7f8 fc04 	bl	800087c <__aeabi_ddiv>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	4b57      	ldr	r3, [pc, #348]	; (80081e0 <setDuttyCycleAfOpt+0x1d0>)
 8008082:	f7f8 f919 	bl	80002b8 <__aeabi_dsub>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4610      	mov	r0, r2
 800808c:	4619      	mov	r1, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681c      	ldr	r4, [r3, #0]
 8008092:	f7f8 fda1 	bl	8000bd8 <__aeabi_d2uiz>
 8008096:	4603      	mov	r3, r0
 8008098:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800809a:	e096      	b.n	80081ca <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	edd3 7a06 	vldr	s15, [r3, #24]
 80080a2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80081d4 <setDuttyCycleAfOpt+0x1c4>
 80080a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080aa:	4b4b      	ldr	r3, [pc, #300]	; (80081d8 <setDuttyCycleAfOpt+0x1c8>)
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ba:	ee17 0a90 	vmov	r0, s15
 80080be:	f7f8 fa5b 	bl	8000578 <__aeabi_f2d>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	4b43      	ldr	r3, [pc, #268]	; (80081dc <setDuttyCycleAfOpt+0x1cc>)
 80080d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080d4:	f7f8 fbd2 	bl	800087c <__aeabi_ddiv>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4610      	mov	r0, r2
 80080de:	4619      	mov	r1, r3
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <setDuttyCycleAfOpt+0x1d0>)
 80080e6:	f7f8 f8e7 	bl	80002b8 <__aeabi_dsub>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	f7f8 fd6f 	bl	8000bd8 <__aeabi_d2uiz>
 80080fa:	4603      	mov	r3, r0
 80080fc:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80080fe:	e064      	b.n	80081ca <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	edd3 7a06 	vldr	s15, [r3, #24]
 8008106:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80081d4 <setDuttyCycleAfOpt+0x1c4>
 800810a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800810e:	4b32      	ldr	r3, [pc, #200]	; (80081d8 <setDuttyCycleAfOpt+0x1c8>)
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800811a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811e:	ee17 0a90 	vmov	r0, s15
 8008122:	f7f8 fa29 	bl	8000578 <__aeabi_f2d>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	4b2a      	ldr	r3, [pc, #168]	; (80081dc <setDuttyCycleAfOpt+0x1cc>)
 8008134:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008138:	f7f8 fba0 	bl	800087c <__aeabi_ddiv>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <setDuttyCycleAfOpt+0x1d0>)
 800814a:	f7f8 f8b5 	bl	80002b8 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681c      	ldr	r4, [r3, #0]
 800815a:	f7f8 fd3d 	bl	8000bd8 <__aeabi_d2uiz>
 800815e:	4603      	mov	r3, r0
 8008160:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008162:	e032      	b.n	80081ca <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	edd3 7a06 	vldr	s15, [r3, #24]
 800816a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80081d4 <setDuttyCycleAfOpt+0x1c4>
 800816e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008172:	4b19      	ldr	r3, [pc, #100]	; (80081d8 <setDuttyCycleAfOpt+0x1c8>)
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	ee17 0a90 	vmov	r0, s15
 8008186:	f7f8 f9f7 	bl	8000578 <__aeabi_f2d>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <setDuttyCycleAfOpt+0x1cc>)
 8008198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800819c:	f7f8 fb6e 	bl	800087c <__aeabi_ddiv>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <setDuttyCycleAfOpt+0x1d0>)
 80081ae:	f7f8 f883 	bl	80002b8 <__aeabi_dsub>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681c      	ldr	r4, [r3, #0]
 80081be:	f7f8 fd0b 	bl	8000bd8 <__aeabi_d2uiz>
 80081c2:	4603      	mov	r3, r0
 80081c4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80081c6:	e000      	b.n	80081ca <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 80081c8:	bf00      	nop
	}

	}// fin del switch-case


}
 80081ca:	bf00      	nop
 80081cc:	372c      	adds	r7, #44	; 0x2c
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd90      	pop	{r4, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	42c80000 	.word	0x42c80000
 80081d8:	20011d68 	.word	0x20011d68
 80081dc:	40590000 	.word	0x40590000
 80081e0:	3ff00000 	.word	0x3ff00000

080081e4 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7a1b      	ldrb	r3, [r3, #8]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d82f      	bhi.n	8008254 <disableOutput+0x70>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <disableOutput+0x18>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	0800821f 	.word	0x0800821f
 8008204:	08008231 	.word	0x08008231
 8008208:	08008243 	.word	0x08008243
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a1a      	ldr	r2, [r3, #32]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	621a      	str	r2, [r3, #32]

			break;
 800821c:	e01b      	b.n	8008256 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6a1a      	ldr	r2, [r3, #32]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0210 	bic.w	r2, r2, #16
 800822c:	621a      	str	r2, [r3, #32]

			break;
 800822e:	e012      	b.n	8008256 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a1a      	ldr	r2, [r3, #32]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800823e:	621a      	str	r2, [r3, #32]

			break;
 8008240:	e009      	b.n	8008256 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008250:	621a      	str	r2, [r3, #32]

			break;
 8008252:	e000      	b.n	8008256 <disableOutput+0x72>
		}

		default: {
			break;
 8008254:	bf00      	nop
		}
		}

	return RESET;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7a1b      	ldrb	r3, [r3, #8]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d82f      	bhi.n	80082d4 <PWMx_Toggle+0x70>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <PWMx_Toggle+0x18>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829f 	.word	0x0800829f
 8008284:	080082b1 	.word	0x080082b1
 8008288:	080082c3 	.word	0x080082c3
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a1a      	ldr	r2, [r3, #32]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f082 0202 	eor.w	r2, r2, #2
 800829a:	621a      	str	r2, [r3, #32]

				break;
 800829c:	e01b      	b.n	80082d6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f082 0220 	eor.w	r2, r2, #32
 80082ac:	621a      	str	r2, [r3, #32]

				break;
 80082ae:	e012      	b.n	80082d6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6a1a      	ldr	r2, [r3, #32]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80082be:	621a      	str	r2, [r3, #32]

				break;
 80082c0:	e009      	b.n	80082d6 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a1a      	ldr	r2, [r3, #32]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80082d0:	621a      	str	r2, [r3, #32]

				break;
 80082d2:	e000      	b.n	80082d6 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 80082d4:	bf00      	nop
			}
			}


}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80082ee:	4b92      	ldr	r3, [pc, #584]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a91      	ldr	r2, [pc, #580]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80082f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082f8:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80082fa:	4b8f      	ldr	r3, [pc, #572]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80082fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008302:	4b8e      	ldr	r3, [pc, #568]	; (800853c <RCC_enableMaxFrequencies+0x258>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a8d      	ldr	r2, [pc, #564]	; (800853c <RCC_enableMaxFrequencies+0x258>)
 8008308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800830c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800830e:	4b8a      	ldr	r3, [pc, #552]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4a89      	ldr	r2, [pc, #548]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008314:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008318:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	2b08      	cmp	r3, #8
 800831e:	f200 82fc 	bhi.w	800891a <RCC_enableMaxFrequencies+0x636>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <RCC_enableMaxFrequencies+0x44>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800834d 	.word	0x0800834d
 800832c:	080083ef 	.word	0x080083ef
 8008330:	08008491 	.word	0x08008491
 8008334:	08008545 	.word	0x08008545
 8008338:	080085e7 	.word	0x080085e7
 800833c:	08008689 	.word	0x08008689
 8008340:	08008735 	.word	0x08008735
 8008344:	080087d7 	.word	0x080087d7
 8008348:	08008879 	.word	0x08008879
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800834c:	4b7a      	ldr	r3, [pc, #488]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a79      	ldr	r2, [pc, #484]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008356:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008358:	4b77      	ldr	r3, [pc, #476]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	4a76      	ldr	r2, [pc, #472]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800835e:	f043 0310 	orr.w	r3, r3, #16
 8008362:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008364:	4b74      	ldr	r3, [pc, #464]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a73      	ldr	r2, [pc, #460]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800836a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800836e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008372:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008374:	4b70      	ldr	r3, [pc, #448]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a6f      	ldr	r2, [pc, #444]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800837a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800837e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008380:	4b6d      	ldr	r3, [pc, #436]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4a6c      	ldr	r2, [pc, #432]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008386:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800838a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800838c:	4b6a      	ldr	r3, [pc, #424]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4a69      	ldr	r2, [pc, #420]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008396:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008398:	4b67      	ldr	r3, [pc, #412]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4a66      	ldr	r2, [pc, #408]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800839e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80083a4:	4b64      	ldr	r3, [pc, #400]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	4a63      	ldr	r2, [pc, #396]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80083b0:	4b61      	ldr	r3, [pc, #388]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	4a60      	ldr	r2, [pc, #384]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ba:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80083bc:	4b5e      	ldr	r3, [pc, #376]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a5d      	ldr	r2, [pc, #372]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80083c8:	e000      	b.n	80083cc <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80083ca:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80083cc:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f8      	beq.n	80083ca <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80083d8:	4b59      	ldr	r3, [pc, #356]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a58      	ldr	r2, [pc, #352]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 80083de:	f023 030f 	bic.w	r3, r3, #15
 80083e2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80083e4:	4b56      	ldr	r3, [pc, #344]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 80083e6:	4a56      	ldr	r2, [pc, #344]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6013      	str	r3, [r2, #0]

			break;
 80083ec:	e296      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80083ee:	4b52      	ldr	r3, [pc, #328]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	4a51      	ldr	r2, [pc, #324]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80083fa:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	4a4e      	ldr	r2, [pc, #312]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008400:	f043 0310 	orr.w	r3, r3, #16
 8008404:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008406:	4b4c      	ldr	r3, [pc, #304]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4a4b      	ldr	r2, [pc, #300]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800840c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008414:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008416:	4b48      	ldr	r3, [pc, #288]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	4a47      	ldr	r2, [pc, #284]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800841c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008420:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008422:	4b45      	ldr	r3, [pc, #276]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	4a44      	ldr	r2, [pc, #272]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008428:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800842c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800842e:	4b42      	ldr	r3, [pc, #264]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	4a41      	ldr	r2, [pc, #260]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008438:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800843a:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	4a3e      	ldr	r2, [pc, #248]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008444:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008446:	4b3c      	ldr	r3, [pc, #240]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	4a3b      	ldr	r2, [pc, #236]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800844c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008450:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008452:	4b39      	ldr	r3, [pc, #228]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	4a38      	ldr	r2, [pc, #224]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800845e:	4b36      	ldr	r3, [pc, #216]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a35      	ldr	r2, [pc, #212]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008468:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800846a:	e000      	b.n	800846e <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800846c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800846e:	4b32      	ldr	r3, [pc, #200]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f8      	beq.n	800846c <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800847a:	4b31      	ldr	r3, [pc, #196]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a30      	ldr	r2, [pc, #192]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 8008480:	f023 030f 	bic.w	r3, r3, #15
 8008484:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008486:	4b2e      	ldr	r3, [pc, #184]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 8008488:	4a2d      	ldr	r2, [pc, #180]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6013      	str	r3, [r2, #0]

			break;
 800848e:	e245      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008490:	4b29      	ldr	r3, [pc, #164]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4a28      	ldr	r2, [pc, #160]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800849a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800849c:	4b26      	ldr	r3, [pc, #152]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4a25      	ldr	r2, [pc, #148]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084a2:	f043 0310 	orr.w	r3, r3, #16
 80084a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80084a8:	4b23      	ldr	r3, [pc, #140]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084be:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80084c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80084c4:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80084ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80084d0:	4b19      	ldr	r3, [pc, #100]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	4a18      	ldr	r2, [pc, #96]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084da:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4a15      	ldr	r2, [pc, #84]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80084e8:	4b13      	ldr	r3, [pc, #76]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	4a12      	ldr	r2, [pc, #72]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80084f4:	4b10      	ldr	r3, [pc, #64]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4a0f      	ldr	r2, [pc, #60]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 80084fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008500:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a0c      	ldr	r2, [pc, #48]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800850a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800850c:	e000      	b.n	8008510 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800850e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <RCC_enableMaxFrequencies+0x254>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0f8      	beq.n	800850e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a07      	ldr	r2, [pc, #28]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 8008522:	f023 030f 	bic.w	r3, r3, #15
 8008526:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a04      	ldr	r2, [pc, #16]	; (8008540 <RCC_enableMaxFrequencies+0x25c>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6013      	str	r3, [r2, #0]


			break;
 8008534:	e1f2      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
 8008536:	bf00      	nop
 8008538:	40023800 	.word	0x40023800
 800853c:	40007000 	.word	0x40007000
 8008540:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008544:	4b79      	ldr	r3, [pc, #484]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4a78      	ldr	r2, [pc, #480]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800854a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800854e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008550:	4b76      	ldr	r3, [pc, #472]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a75      	ldr	r2, [pc, #468]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008556:	f043 0310 	orr.w	r3, r3, #16
 800855a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800855c:	4b73      	ldr	r3, [pc, #460]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4a72      	ldr	r2, [pc, #456]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008562:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800856c:	4b6f      	ldr	r3, [pc, #444]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4a6e      	ldr	r2, [pc, #440]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008572:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8008576:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008578:	4b6c      	ldr	r3, [pc, #432]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4a6b      	ldr	r2, [pc, #428]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800857e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008582:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008584:	4b69      	ldr	r3, [pc, #420]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008586:	4a69      	ldr	r2, [pc, #420]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800858c:	4b67      	ldr	r3, [pc, #412]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a66      	ldr	r2, [pc, #408]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008596:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008598:	4b64      	ldr	r3, [pc, #400]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	4a63      	ldr	r2, [pc, #396]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800859e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085a2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80085a4:	4b61      	ldr	r3, [pc, #388]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	4a60      	ldr	r2, [pc, #384]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ae:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80085b0:	4b5e      	ldr	r3, [pc, #376]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a5d      	ldr	r2, [pc, #372]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085ba:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80085bc:	e000      	b.n	80085c0 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80085be:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80085c0:	4b5a      	ldr	r3, [pc, #360]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f8      	beq.n	80085be <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80085cc:	4b58      	ldr	r3, [pc, #352]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a57      	ldr	r2, [pc, #348]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 80085d2:	f023 030f 	bic.w	r3, r3, #15
 80085d6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80085d8:	4b55      	ldr	r3, [pc, #340]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a54      	ldr	r2, [pc, #336]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 80085de:	f043 0301 	orr.w	r3, r3, #1
 80085e2:	6013      	str	r3, [r2, #0]

			break;
 80085e4:	e19a      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80085e6:	4b51      	ldr	r3, [pc, #324]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	4a50      	ldr	r2, [pc, #320]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085f0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80085f2:	4b4e      	ldr	r3, [pc, #312]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	4a4d      	ldr	r2, [pc, #308]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80085f8:	f043 0310 	orr.w	r3, r3, #16
 80085fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80085fe:	4b4b      	ldr	r3, [pc, #300]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	4a4a      	ldr	r2, [pc, #296]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008604:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800860e:	4b47      	ldr	r3, [pc, #284]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	4a46      	ldr	r2, [pc, #280]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008614:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008618:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800861a:	4b44      	ldr	r3, [pc, #272]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	4a43      	ldr	r2, [pc, #268]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008620:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008624:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008626:	4b41      	ldr	r3, [pc, #260]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008628:	4a40      	ldr	r2, [pc, #256]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	4a3e      	ldr	r2, [pc, #248]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008638:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800863a:	4b3c      	ldr	r3, [pc, #240]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	4a3b      	ldr	r2, [pc, #236]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008644:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008646:	4b39      	ldr	r3, [pc, #228]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	4a38      	ldr	r2, [pc, #224]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800864c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008650:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008652:	4b36      	ldr	r3, [pc, #216]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a35      	ldr	r2, [pc, #212]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800865c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800865e:	e000      	b.n	8008662 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8008660:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008662:	4b32      	ldr	r3, [pc, #200]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f8      	beq.n	8008660 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800866e:	4b30      	ldr	r3, [pc, #192]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a2f      	ldr	r2, [pc, #188]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008674:	f023 030f 	bic.w	r3, r3, #15
 8008678:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800867a:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	6013      	str	r3, [r2, #0]

			break;
 8008686:	e149      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008688:	4b28      	ldr	r3, [pc, #160]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a27      	ldr	r2, [pc, #156]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800868e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008692:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4a24      	ldr	r2, [pc, #144]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 800869a:	f043 0310 	orr.w	r3, r3, #16
 800869e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80086a0:	4b22      	ldr	r3, [pc, #136]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	4a21      	ldr	r2, [pc, #132]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80086b0:	4b1e      	ldr	r3, [pc, #120]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4a1d      	ldr	r2, [pc, #116]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086b6:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80086ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80086bc:	4b1b      	ldr	r3, [pc, #108]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a1a      	ldr	r2, [pc, #104]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80086c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80086c8:	4b18      	ldr	r3, [pc, #96]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086ca:	4a18      	ldr	r2, [pc, #96]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80086d0:	4b16      	ldr	r3, [pc, #88]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086da:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80086dc:	4b13      	ldr	r3, [pc, #76]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	4a12      	ldr	r2, [pc, #72]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	4a0f      	ldr	r2, [pc, #60]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086f2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80086f4:	4b0d      	ldr	r3, [pc, #52]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a0c      	ldr	r2, [pc, #48]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 80086fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086fe:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008700:	e000      	b.n	8008704 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8008702:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <RCC_enableMaxFrequencies+0x448>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f8      	beq.n	8008702 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008716:	f023 030f 	bic.w	r3, r3, #15
 800871a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a03      	ldr	r2, [pc, #12]	; (8008730 <RCC_enableMaxFrequencies+0x44c>)
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	6013      	str	r3, [r2, #0]

			break;
 8008728:	e0f8      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008734:	4b84      	ldr	r3, [pc, #528]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4a83      	ldr	r2, [pc, #524]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800873a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800873e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008740:	4b81      	ldr	r3, [pc, #516]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4a80      	ldr	r2, [pc, #512]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008746:	f043 0310 	orr.w	r3, r3, #16
 800874a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800874c:	4b7e      	ldr	r3, [pc, #504]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a7d      	ldr	r2, [pc, #500]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008752:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800875c:	4b7a      	ldr	r3, [pc, #488]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4a79      	ldr	r2, [pc, #484]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008762:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008766:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008768:	4b77      	ldr	r3, [pc, #476]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a76      	ldr	r2, [pc, #472]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800876e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008772:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008774:	4b74      	ldr	r3, [pc, #464]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008776:	4a74      	ldr	r2, [pc, #464]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800877c:	4b72      	ldr	r3, [pc, #456]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	4a71      	ldr	r2, [pc, #452]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008786:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008788:	4b6f      	ldr	r3, [pc, #444]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	4a6e      	ldr	r2, [pc, #440]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800878e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008792:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008794:	4b6c      	ldr	r3, [pc, #432]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	4a6b      	ldr	r2, [pc, #428]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800879a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800879e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80087a0:	4b69      	ldr	r3, [pc, #420]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a68      	ldr	r2, [pc, #416]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087aa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80087ac:	e000      	b.n	80087b0 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80087ae:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80087b0:	4b65      	ldr	r3, [pc, #404]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f8      	beq.n	80087ae <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80087bc:	4b63      	ldr	r3, [pc, #396]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a62      	ldr	r2, [pc, #392]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 80087c2:	f023 030f 	bic.w	r3, r3, #15
 80087c6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80087c8:	4b60      	ldr	r3, [pc, #384]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a5f      	ldr	r2, [pc, #380]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 80087ce:	f043 0302 	orr.w	r3, r3, #2
 80087d2:	6013      	str	r3, [r2, #0]

			break;
 80087d4:	e0a2      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80087d6:	4b5c      	ldr	r3, [pc, #368]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	4a5b      	ldr	r2, [pc, #364]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80087e0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80087e2:	4b59      	ldr	r3, [pc, #356]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4a58      	ldr	r2, [pc, #352]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087e8:	f043 0310 	orr.w	r3, r3, #16
 80087ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80087ee:	4b56      	ldr	r3, [pc, #344]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4a55      	ldr	r2, [pc, #340]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80087f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80087f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 80087fe:	4b52      	ldr	r3, [pc, #328]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	4a51      	ldr	r2, [pc, #324]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008804:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8008808:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800880a:	4b4f      	ldr	r3, [pc, #316]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	4a4e      	ldr	r2, [pc, #312]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008810:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008814:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008816:	4b4c      	ldr	r3, [pc, #304]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008818:	4a4b      	ldr	r2, [pc, #300]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800881e:	4b4a      	ldr	r3, [pc, #296]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	4a49      	ldr	r2, [pc, #292]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008828:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800882a:	4b47      	ldr	r3, [pc, #284]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4a46      	ldr	r2, [pc, #280]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008834:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008836:	4b44      	ldr	r3, [pc, #272]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	4a43      	ldr	r2, [pc, #268]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800883c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008840:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008842:	4b41      	ldr	r3, [pc, #260]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a40      	ldr	r2, [pc, #256]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800884c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800884e:	e000      	b.n	8008852 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8008850:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008852:	4b3d      	ldr	r3, [pc, #244]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f8      	beq.n	8008850 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800885e:	4b3b      	ldr	r3, [pc, #236]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3a      	ldr	r2, [pc, #232]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008864:	f023 030f 	bic.w	r3, r3, #15
 8008868:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800886a:	4b38      	ldr	r3, [pc, #224]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a37      	ldr	r2, [pc, #220]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	6013      	str	r3, [r2, #0]

			break;
 8008876:	e051      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008878:	4b33      	ldr	r3, [pc, #204]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a32      	ldr	r2, [pc, #200]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800887e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008882:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8008884:	4b30      	ldr	r3, [pc, #192]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	4a2f      	ldr	r2, [pc, #188]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800888a:	f043 0308 	orr.w	r3, r3, #8
 800888e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008890:	4b2d      	ldr	r3, [pc, #180]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4a2c      	ldr	r2, [pc, #176]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800889a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800889e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80088a0:	4b29      	ldr	r3, [pc, #164]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4a28      	ldr	r2, [pc, #160]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088a6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80088aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80088ac:	4b26      	ldr	r3, [pc, #152]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4a25      	ldr	r2, [pc, #148]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80088b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80088b8:	4b23      	ldr	r3, [pc, #140]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088ba:	4a23      	ldr	r2, [pc, #140]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80088c0:	4b21      	ldr	r3, [pc, #132]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	4a20      	ldr	r2, [pc, #128]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ca:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	4a1d      	ldr	r2, [pc, #116]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80088d8:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	4a1a      	ldr	r2, [pc, #104]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088e2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80088e4:	4b18      	ldr	r3, [pc, #96]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a17      	ldr	r2, [pc, #92]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ee:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80088f0:	e000      	b.n	80088f4 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 80088f2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80088f4:	4b14      	ldr	r3, [pc, #80]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0f8      	beq.n	80088f2 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008900:	4b12      	ldr	r3, [pc, #72]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a11      	ldr	r2, [pc, #68]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008906:	f023 030f 	bic.w	r3, r3, #15
 800890a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0e      	ldr	r2, [pc, #56]	; (800894c <RCC_enableMaxFrequencies+0x668>)
 8008912:	f043 0303 	orr.w	r3, r3, #3
 8008916:	6013      	str	r3, [r2, #0]

			break;
 8008918:	e000      	b.n	800891c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800891a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	4a09      	ldr	r2, [pc, #36]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8008928:	e000      	b.n	800892c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800892a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <RCC_enableMaxFrequencies+0x664>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f8      	beq.n	800892a <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40023800 	.word	0x40023800
 800894c:	40023c00 	.word	0x40023c00

08008950 <__NVIC_EnableIRQ>:
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800895a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	db0b      	blt.n	800897a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	f003 021f 	and.w	r2, r3, #31
 8008968:	4907      	ldr	r1, [pc, #28]	; (8008988 <__NVIC_EnableIRQ+0x38>)
 800896a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	2001      	movs	r0, #1
 8008972:	fa00 f202 	lsl.w	r2, r0, r2
 8008976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	e000e100 	.word	0xe000e100

0800898c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899c:	2b00      	cmp	r3, #0
 800899e:	db0a      	blt.n	80089b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	490c      	ldr	r1, [pc, #48]	; (80089d8 <__NVIC_SetPriority+0x4c>)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	0112      	lsls	r2, r2, #4
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	440b      	add	r3, r1
 80089b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089b4:	e00a      	b.n	80089cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4908      	ldr	r1, [pc, #32]	; (80089dc <__NVIC_SetPriority+0x50>)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	3b04      	subs	r3, #4
 80089c4:	0112      	lsls	r2, r2, #4
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	440b      	add	r3, r1
 80089ca:	761a      	strb	r2, [r3, #24]
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	e000e100 	.word	0xe000e100
 80089dc:	e000ed00 	.word	0xe000ed00

080089e0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80089e8:	b672      	cpsid	i
}
 80089ea:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a91      	ldr	r2, [pc, #580]	; (8008c38 <USART_Config+0x258>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d106      	bne.n	8008a04 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80089f6:	4b91      	ldr	r3, [pc, #580]	; (8008c3c <USART_Config+0x25c>)
 80089f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fa:	4a90      	ldr	r2, [pc, #576]	; (8008c3c <USART_Config+0x25c>)
 80089fc:	f043 0310 	orr.w	r3, r3, #16
 8008a00:	6453      	str	r3, [r2, #68]	; 0x44
 8008a02:	e018      	b.n	8008a36 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a8d      	ldr	r2, [pc, #564]	; (8008c40 <USART_Config+0x260>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d106      	bne.n	8008a1c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8008a0e:	4b8b      	ldr	r3, [pc, #556]	; (8008c3c <USART_Config+0x25c>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	4a8a      	ldr	r2, [pc, #552]	; (8008c3c <USART_Config+0x25c>)
 8008a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a18:	6413      	str	r3, [r2, #64]	; 0x40
 8008a1a:	e00c      	b.n	8008a36 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a88      	ldr	r2, [pc, #544]	; (8008c44 <USART_Config+0x264>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d106      	bne.n	8008a34 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8008a26:	4b85      	ldr	r3, [pc, #532]	; (8008c3c <USART_Config+0x25c>)
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	4a84      	ldr	r2, [pc, #528]	; (8008c3c <USART_Config+0x25c>)
 8008a2c:	f043 0320 	orr.w	r3, r3, #32
 8008a30:	6453      	str	r3, [r2, #68]	; 0x44
 8008a32:	e000      	b.n	8008a36 <USART_Config+0x56>
	}
	else{
		__NOP();
 8008a34:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2200      	movs	r2, #0
 8008a44:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7a5b      	ldrb	r3, [r3, #9]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d025      	beq.n	8008a9a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7a5b      	ldrb	r3, [r3, #9]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d110      	bne.n	8008a78 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a64:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a74:	60da      	str	r2, [r3, #12]
 8008a76:	e018      	b.n	8008aaa <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a86:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a96:	60da      	str	r2, [r3, #12]
 8008a98:	e007      	b.n	8008aaa <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa8:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7a1b      	ldrb	r3, [r3, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d108      	bne.n	8008ac4 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ac0:	60da      	str	r2, [r3, #12]
 8008ac2:	e007      	b.n	8008ad4 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ad2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7a9b      	ldrb	r3, [r3, #10]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d82f      	bhi.n	8008b3c <USART_Config+0x15c>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <USART_Config+0x104>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008b07 	.word	0x08008b07
 8008aec:	08008b19 	.word	0x08008b19
 8008af0:	08008b2b 	.word	0x08008b2b
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b02:	611a      	str	r2, [r3, #16]
			break;
 8008b04:	e023      	b.n	8008b4e <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b14:	611a      	str	r2, [r3, #16]
			break;
 8008b16:	e01a      	b.n	8008b4e <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b26:	611a      	str	r2, [r3, #16]
			break;
 8008b28:	e011      	b.n	8008b4e <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691a      	ldr	r2, [r3, #16]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8008b38:	611a      	str	r2, [r3, #16]
			break;
 8008b3a:	e008      	b.n	8008b4e <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b4a:	611a      	str	r2, [r3, #16]
			break;
 8008b4c:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681c      	ldr	r4, [r3, #0]
 8008b56:	4611      	mov	r1, r2
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8d9 	bl	8008d10 <brrCalculus>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	799b      	ldrb	r3, [r3, #6]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d82e      	bhi.n	8008bc8 <USART_Config+0x1e8>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <USART_Config+0x190>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b93 	.word	0x08008b93
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008bb7 	.word	0x08008bb7
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0208 	orr.w	r2, r2, #8
 8008b8e:	60da      	str	r2, [r3, #12]
			break;
 8008b90:	e023      	b.n	8008bda <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0204 	orr.w	r2, r2, #4
 8008ba0:	60da      	str	r2, [r3, #12]
			break;
 8008ba2:	e01a      	b.n	8008bda <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 020c 	orr.w	r2, r2, #12
 8008bb2:	60da      	str	r2, [r3, #12]
			break;
 8008bb4:	e011      	b.n	8008bda <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 020c 	bic.w	r2, r2, #12
 8008bc4:	60da      	str	r2, [r3, #12]
			break;
 8008bc6:	e008      	b.n	8008bda <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 020c 	bic.w	r2, r2, #12
 8008bd6:	60da      	str	r2, [r3, #12]
			break;
 8008bd8:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	799b      	ldrb	r3, [r3, #6]
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d008      	beq.n	8008bf4 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	e007      	b.n	8008c04 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c02:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	795b      	ldrb	r3, [r3, #5]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d139      	bne.n	8008c80 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0220 	orr.w	r2, r2, #32
 8008c1a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a05      	ldr	r2, [pc, #20]	; (8008c38 <USART_Config+0x258>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d110      	bne.n	8008c48 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8008c26:	2025      	movs	r0, #37	; 0x25
 8008c28:	f7ff fe92 	bl	8008950 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	2025      	movs	r0, #37	; 0x25
 8008c30:	f7ff feac 	bl	800898c <__NVIC_SetPriority>
 8008c34:	e02c      	b.n	8008c90 <USART_Config+0x2b0>
 8008c36:	bf00      	nop
 8008c38:	40011000 	.word	0x40011000
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	40004400 	.word	0x40004400
 8008c44:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a2c      	ldr	r2, [pc, #176]	; (8008d00 <USART_Config+0x320>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d107      	bne.n	8008c62 <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8008c52:	2026      	movs	r0, #38	; 0x26
 8008c54:	f7ff fe7c 	bl	8008950 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8008c58:	2101      	movs	r1, #1
 8008c5a:	2026      	movs	r0, #38	; 0x26
 8008c5c:	f7ff fe96 	bl	800898c <__NVIC_SetPriority>
 8008c60:	e016      	b.n	8008c90 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a27      	ldr	r2, [pc, #156]	; (8008d04 <USART_Config+0x324>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d107      	bne.n	8008c7c <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8008c6c:	2047      	movs	r0, #71	; 0x47
 8008c6e:	f7ff fe6f 	bl	8008950 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 8008c72:	2101      	movs	r1, #1
 8008c74:	2047      	movs	r0, #71	; 0x47
 8008c76:	f7ff fe89 	bl	800898c <__NVIC_SetPriority>
 8008c7a:	e009      	b.n	8008c90 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8008c7c:	bf00      	nop
 8008c7e:	e007      	b.n	8008c90 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0220 	bic.w	r2, r2, #32
 8008c8e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	791b      	ldrb	r3, [r3, #4]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d124      	bne.n	8008ce2 <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ca6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a16      	ldr	r2, [pc, #88]	; (8008d08 <USART_Config+0x328>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d103      	bne.n	8008cba <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8008cb2:	2025      	movs	r0, #37	; 0x25
 8008cb4:	f7ff fe4c 	bl	8008950 <__NVIC_EnableIRQ>
 8008cb8:	e01b      	b.n	8008cf2 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <USART_Config+0x320>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d103      	bne.n	8008ccc <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8008cc4:	2026      	movs	r0, #38	; 0x26
 8008cc6:	f7ff fe43 	bl	8008950 <__NVIC_EnableIRQ>
 8008cca:	e012      	b.n	8008cf2 <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <USART_Config+0x324>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d103      	bne.n	8008cde <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8008cd6:	2047      	movs	r0, #71	; 0x47
 8008cd8:	f7ff fe3a 	bl	8008950 <__NVIC_EnableIRQ>
 8008cdc:	e009      	b.n	8008cf2 <USART_Config+0x312>
		}
		else{
				__NOP();
 8008cde:	bf00      	nop
 8008ce0:	e007      	b.n	8008cf2 <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8008cf2:	b662      	cpsie	i
}
 8008cf4:	bf00      	nop
	}

	__enable_irq();
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	40004400 	.word	0x40004400
 8008d04:	40011400 	.word	0x40011400
 8008d08:	40011000 	.word	0x40011000
 8008d0c:	00000000 	.word	0x00000000

08008d10 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8008d10:	b5b0      	push	{r4, r5, r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	79db      	ldrb	r3, [r3, #7]
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f200 8217 	bhi.w	8009152 <brrCalculus+0x442>
 8008d24:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <brrCalculus+0x1c>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d3d 	.word	0x08008d3d
 8008d30:	08008e37 	.word	0x08008e37
 8008d34:	08008f51 	.word	0x08008f51
 8008d38:	08009059 	.word	0x08009059

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8008d3c:	4980      	ldr	r1, [pc, #512]	; (8008f40 <brrCalculus+0x230>)
 8008d3e:	a37c      	add	r3, pc, #496	; (adr r3, 8008f30 <brrCalculus+0x220>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	ee17 0a90 	vmov	r0, s15
 8008d56:	f7f7 fc0f 	bl	8000578 <__aeabi_f2d>
 8008d5a:	4b79      	ldr	r3, [pc, #484]	; (8008f40 <brrCalculus+0x230>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fc62 	bl	8000628 <__aeabi_dmul>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4975      	ldr	r1, [pc, #468]	; (8008f40 <brrCalculus+0x230>)
 8008d6a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8008d6e:	4b74      	ldr	r3, [pc, #464]	; (8008f40 <brrCalculus+0x230>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	4610      	mov	r0, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	f7f7 ff06 	bl	8000b88 <__aeabi_d2iz>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	4b70      	ldr	r3, [pc, #448]	; (8008f44 <brrCalculus+0x234>)
 8008d82:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008d84:	4b6e      	ldr	r3, [pc, #440]	; (8008f40 <brrCalculus+0x230>)
 8008d86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d8a:	4b6d      	ldr	r3, [pc, #436]	; (8008f40 <brrCalculus+0x230>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	4610      	mov	r0, r2
 8008d92:	4619      	mov	r1, r3
 8008d94:	f7f7 fef8 	bl	8000b88 <__aeabi_d2iz>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f7 fbda 	bl	8000554 <__aeabi_i2d>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4620      	mov	r0, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 fa86 	bl	80002b8 <__aeabi_dsub>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4610      	mov	r0, r2
 8008db2:	4619      	mov	r1, r3
 8008db4:	f7f7 ff30 	bl	8000c18 <__aeabi_d2f>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4a63      	ldr	r2, [pc, #396]	; (8008f48 <brrCalculus+0x238>)
 8008dbc:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008dbe:	4b62      	ldr	r3, [pc, #392]	; (8008f48 <brrCalculus+0x238>)
 8008dc0:	edd3 7a00 	vldr	s15, [r3]
 8008dc4:	2004      	movs	r0, #4
 8008dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dca:	f000 fa6d 	bl	80092a8 <roundToNDecimals>
 8008dce:	eef0 7a40 	vmov.f32	s15, s0
 8008dd2:	4b5d      	ldr	r3, [pc, #372]	; (8008f48 <brrCalculus+0x238>)
 8008dd4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008dd8:	4b5b      	ldr	r3, [pc, #364]	; (8008f48 <brrCalculus+0x238>)
 8008dda:	edd3 7a00 	vldr	s15, [r3]
 8008dde:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008de6:	4b58      	ldr	r3, [pc, #352]	; (8008f48 <brrCalculus+0x238>)
 8008de8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8008dec:	4b56      	ldr	r3, [pc, #344]	; (8008f48 <brrCalculus+0x238>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 fbc1 	bl	8000578 <__aeabi_f2d>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	ec43 2b10 	vmov	d0, r2, r3
 8008dfe:	f004 f91b 	bl	800d038 <round>
 8008e02:	ec53 2b10 	vmov	r2, r3, d0
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f7f7 ff05 	bl	8000c18 <__aeabi_d2f>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4a4d      	ldr	r2, [pc, #308]	; (8008f48 <brrCalculus+0x238>)
 8008e12:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8008e14:	4b4b      	ldr	r3, [pc, #300]	; (8008f44 <brrCalculus+0x234>)
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	4b4a      	ldr	r3, [pc, #296]	; (8008f48 <brrCalculus+0x238>)
 8008e1e:	edd3 7a00 	vldr	s15, [r3]
 8008e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e26:	ee17 3a90 	vmov	r3, s15
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	4b46      	ldr	r3, [pc, #280]	; (8008f4c <brrCalculus+0x23c>)
 8008e32:	801a      	strh	r2, [r3, #0]


		break;
 8008e34:	e18f      	b.n	8009156 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8008e36:	4942      	ldr	r1, [pc, #264]	; (8008f40 <brrCalculus+0x230>)
 8008e38:	a33f      	add	r3, pc, #252	; (adr r3, 8008f38 <brrCalculus+0x228>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4c:	ee17 0a90 	vmov	r0, s15
 8008e50:	f7f7 fb92 	bl	8000578 <__aeabi_f2d>
 8008e54:	4b3a      	ldr	r3, [pc, #232]	; (8008f40 <brrCalculus+0x230>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 fbe5 	bl	8000628 <__aeabi_dmul>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4937      	ldr	r1, [pc, #220]	; (8008f40 <brrCalculus+0x230>)
 8008e64:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8008e68:	4b35      	ldr	r3, [pc, #212]	; (8008f40 <brrCalculus+0x230>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4619      	mov	r1, r3
 8008e72:	f7f7 fe89 	bl	8000b88 <__aeabi_d2iz>
 8008e76:	4603      	mov	r3, r0
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	4b32      	ldr	r3, [pc, #200]	; (8008f44 <brrCalculus+0x234>)
 8008e7c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008e7e:	4b30      	ldr	r3, [pc, #192]	; (8008f40 <brrCalculus+0x230>)
 8008e80:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008e84:	4b2e      	ldr	r3, [pc, #184]	; (8008f40 <brrCalculus+0x230>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f7f7 fe7b 	bl	8000b88 <__aeabi_d2iz>
 8008e92:	4603      	mov	r3, r0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f7 fb5d 	bl	8000554 <__aeabi_i2d>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fa09 	bl	80002b8 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4619      	mov	r1, r3
 8008eae:	f7f7 feb3 	bl	8000c18 <__aeabi_d2f>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4a24      	ldr	r2, [pc, #144]	; (8008f48 <brrCalculus+0x238>)
 8008eb6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008eb8:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <brrCalculus+0x238>)
 8008eba:	edd3 7a00 	vldr	s15, [r3]
 8008ebe:	2004      	movs	r0, #4
 8008ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ec4:	f000 f9f0 	bl	80092a8 <roundToNDecimals>
 8008ec8:	eef0 7a40 	vmov.f32	s15, s0
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <brrCalculus+0x238>)
 8008ece:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <brrCalculus+0x238>)
 8008ed4:	edd3 7a00 	vldr	s15, [r3]
 8008ed8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <brrCalculus+0x238>)
 8008ee2:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <brrCalculus+0x238>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 fb44 	bl	8000578 <__aeabi_f2d>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	ec43 2b10 	vmov	d0, r2, r3
 8008ef8:	f004 f89e 	bl	800d038 <round>
 8008efc:	ec53 2b10 	vmov	r2, r3, d0
 8008f00:	4610      	mov	r0, r2
 8008f02:	4619      	mov	r1, r3
 8008f04:	f7f7 fe88 	bl	8000c18 <__aeabi_d2f>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4a0f      	ldr	r2, [pc, #60]	; (8008f48 <brrCalculus+0x238>)
 8008f0c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <brrCalculus+0x234>)
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <brrCalculus+0x238>)
 8008f18:	edd3 7a00 	vldr	s15, [r3]
 8008f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f20:	ee17 3a90 	vmov	r3, s15
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	4313      	orrs	r3, r2
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <brrCalculus+0x23c>)
 8008f2c:	801a      	strh	r2, [r3, #0]


		break;
 8008f2e:	e112      	b.n	8009156 <brrCalculus+0x446>
 8008f30:	b4e81b4f 	.word	0xb4e81b4f
 8008f34:	3edb4e81 	.word	0x3edb4e81
 8008f38:	b4e81b4f 	.word	0xb4e81b4f
 8008f3c:	3ecb4e81 	.word	0x3ecb4e81
 8008f40:	20011d78 	.word	0x20011d78
 8008f44:	20011d6c 	.word	0x20011d6c
 8008f48:	20011d70 	.word	0x20011d70
 8008f4c:	20011d6a 	.word	0x20011d6a
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8008f50:	4989      	ldr	r1, [pc, #548]	; (8009178 <brrCalculus+0x468>)
 8008f52:	a385      	add	r3, pc, #532	; (adr r3, 8009168 <brrCalculus+0x458>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	ee17 0a90 	vmov	r0, s15
 8008f6a:	f7f7 fb05 	bl	8000578 <__aeabi_f2d>
 8008f6e:	4b82      	ldr	r3, [pc, #520]	; (8009178 <brrCalculus+0x468>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 fb58 	bl	8000628 <__aeabi_dmul>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	497e      	ldr	r1, [pc, #504]	; (8009178 <brrCalculus+0x468>)
 8008f7e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8008f82:	4b7d      	ldr	r3, [pc, #500]	; (8009178 <brrCalculus+0x468>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f7f7 fdfc 	bl	8000b88 <__aeabi_d2iz>
 8008f90:	4603      	mov	r3, r0
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	4b79      	ldr	r3, [pc, #484]	; (800917c <brrCalculus+0x46c>)
 8008f96:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008f98:	4b77      	ldr	r3, [pc, #476]	; (8009178 <brrCalculus+0x468>)
 8008f9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f9e:	4b76      	ldr	r3, [pc, #472]	; (8009178 <brrCalculus+0x468>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f7f7 fdee 	bl	8000b88 <__aeabi_d2iz>
 8008fac:	4603      	mov	r3, r0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7f7 fad0 	bl	8000554 <__aeabi_i2d>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 f97c 	bl	80002b8 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	f7f7 fe26 	bl	8000c18 <__aeabi_d2f>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	4a6c      	ldr	r2, [pc, #432]	; (8009180 <brrCalculus+0x470>)
 8008fd0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008fd2:	4b6b      	ldr	r3, [pc, #428]	; (8009180 <brrCalculus+0x470>)
 8008fd4:	edd3 7a00 	vldr	s15, [r3]
 8008fd8:	2004      	movs	r0, #4
 8008fda:	eeb0 0a67 	vmov.f32	s0, s15
 8008fde:	f000 f963 	bl	80092a8 <roundToNDecimals>
 8008fe2:	eef0 7a40 	vmov.f32	s15, s0
 8008fe6:	4b66      	ldr	r3, [pc, #408]	; (8009180 <brrCalculus+0x470>)
 8008fe8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008fec:	4b64      	ldr	r3, [pc, #400]	; (8009180 <brrCalculus+0x470>)
 8008fee:	edd3 7a00 	vldr	s15, [r3]
 8008ff2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ffa:	4b61      	ldr	r3, [pc, #388]	; (8009180 <brrCalculus+0x470>)
 8008ffc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009000:	4b5f      	ldr	r3, [pc, #380]	; (8009180 <brrCalculus+0x470>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f7f7 fab7 	bl	8000578 <__aeabi_f2d>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	ec43 2b10 	vmov	d0, r2, r3
 8009012:	f004 f811 	bl	800d038 <round>
 8009016:	ec51 0b10 	vmov	r0, r1, d0
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	4b59      	ldr	r3, [pc, #356]	; (8009184 <brrCalculus+0x474>)
 8009020:	f7f7 f94c 	bl	80002bc <__adddf3>
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	4610      	mov	r0, r2
 800902a:	4619      	mov	r1, r3
 800902c:	f7f7 fdf4 	bl	8000c18 <__aeabi_d2f>
 8009030:	4603      	mov	r3, r0
 8009032:	4a53      	ldr	r2, [pc, #332]	; (8009180 <brrCalculus+0x470>)
 8009034:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009036:	4b51      	ldr	r3, [pc, #324]	; (800917c <brrCalculus+0x46c>)
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	b29a      	uxth	r2, r3
 800903e:	4b50      	ldr	r3, [pc, #320]	; (8009180 <brrCalculus+0x470>)
 8009040:	edd3 7a00 	vldr	s15, [r3]
 8009044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009048:	ee17 3a90 	vmov	r3, s15
 800904c:	b29b      	uxth	r3, r3
 800904e:	4313      	orrs	r3, r2
 8009050:	b29a      	uxth	r2, r3
 8009052:	4b4d      	ldr	r3, [pc, #308]	; (8009188 <brrCalculus+0x478>)
 8009054:	801a      	strh	r2, [r3, #0]


		break;
 8009056:	e07e      	b.n	8009156 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009058:	4947      	ldr	r1, [pc, #284]	; (8009178 <brrCalculus+0x468>)
 800905a:	a345      	add	r3, pc, #276	; (adr r3, 8009170 <brrCalculus+0x460>)
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	ee17 0a90 	vmov	r0, s15
 8009072:	f7f7 fa81 	bl	8000578 <__aeabi_f2d>
 8009076:	4b40      	ldr	r3, [pc, #256]	; (8009178 <brrCalculus+0x468>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 fad4 	bl	8000628 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	493c      	ldr	r1, [pc, #240]	; (8009178 <brrCalculus+0x468>)
 8009086:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800908a:	4b3b      	ldr	r3, [pc, #236]	; (8009178 <brrCalculus+0x468>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	4610      	mov	r0, r2
 8009092:	4619      	mov	r1, r3
 8009094:	f7f7 fd78 	bl	8000b88 <__aeabi_d2iz>
 8009098:	4603      	mov	r3, r0
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b37      	ldr	r3, [pc, #220]	; (800917c <brrCalculus+0x46c>)
 800909e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <brrCalculus+0x468>)
 80090a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090a6:	4b34      	ldr	r3, [pc, #208]	; (8009178 <brrCalculus+0x468>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	f7f7 fd6a 	bl	8000b88 <__aeabi_d2iz>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f7 fa4c 	bl	8000554 <__aeabi_i2d>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4620      	mov	r0, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	f7f7 f8f8 	bl	80002b8 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4610      	mov	r0, r2
 80090ce:	4619      	mov	r1, r3
 80090d0:	f7f7 fda2 	bl	8000c18 <__aeabi_d2f>
 80090d4:	4603      	mov	r3, r0
 80090d6:	4a2a      	ldr	r2, [pc, #168]	; (8009180 <brrCalculus+0x470>)
 80090d8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80090da:	4b29      	ldr	r3, [pc, #164]	; (8009180 <brrCalculus+0x470>)
 80090dc:	edd3 7a00 	vldr	s15, [r3]
 80090e0:	2004      	movs	r0, #4
 80090e2:	eeb0 0a67 	vmov.f32	s0, s15
 80090e6:	f000 f8df 	bl	80092a8 <roundToNDecimals>
 80090ea:	eef0 7a40 	vmov.f32	s15, s0
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <brrCalculus+0x470>)
 80090f0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80090f4:	4b22      	ldr	r3, [pc, #136]	; (8009180 <brrCalculus+0x470>)
 80090f6:	edd3 7a00 	vldr	s15, [r3]
 80090fa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80090fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009102:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <brrCalculus+0x470>)
 8009104:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009108:	4b1d      	ldr	r3, [pc, #116]	; (8009180 <brrCalculus+0x470>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f7f7 fa33 	bl	8000578 <__aeabi_f2d>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	ec43 2b10 	vmov	d0, r2, r3
 800911a:	f003 ff8d 	bl	800d038 <round>
 800911e:	ec53 2b10 	vmov	r2, r3, d0
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	f7f7 fd77 	bl	8000c18 <__aeabi_d2f>
 800912a:	4603      	mov	r3, r0
 800912c:	4a14      	ldr	r2, [pc, #80]	; (8009180 <brrCalculus+0x470>)
 800912e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <brrCalculus+0x46c>)
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	b29a      	uxth	r2, r3
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <brrCalculus+0x470>)
 800913a:	edd3 7a00 	vldr	s15, [r3]
 800913e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009142:	ee17 3a90 	vmov	r3, s15
 8009146:	b29b      	uxth	r3, r3
 8009148:	4313      	orrs	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <brrCalculus+0x478>)
 800914e:	801a      	strh	r2, [r3, #0]


		break;
 8009150:	e001      	b.n	8009156 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009152:	bf00      	nop
		break;
 8009154:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <brrCalculus+0x478>)
 8009158:	881b      	ldrh	r3, [r3, #0]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bdb0      	pop	{r4, r5, r7, pc}
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	789abcdf 	.word	0x789abcdf
 800916c:	3ec23456 	.word	0x3ec23456
 8009170:	789abcdf 	.word	0x789abcdf
 8009174:	3ea23456 	.word	0x3ea23456
 8009178:	20011d78 	.word	0x20011d78
 800917c:	20011d6c 	.word	0x20011d6c
 8009180:	20011d70 	.word	0x20011d70
 8009184:	3ff00000 	.word	0x3ff00000
 8009188:	20011d6a 	.word	0x20011d6a

0800918c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009196:	e000      	b.n	800919a <writeChar+0xe>
		__NOP();
 8009198:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0f7      	beq.n	8009198 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	605a      	str	r2, [r3, #4]

}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80091c6:	e008      	b.n	80091da <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff ffdc 	bl	800918c <writeChar>
		msgToSend ++ ;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f2      	bne.n	80091c8 <writeMsg+0xc>
	}
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
	__NOP();
 80091f0:	bf00      	nop
}
 80091f2:	bf00      	nop
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
	__NOP();
 8009200:	bf00      	nop
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
	return auxRxData;
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <getRxData+0x14>)
 8009212:	781b      	ldrb	r3, [r3, #0]
}
 8009214:	4618      	mov	r0, r3
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20011d80 	.word	0x20011d80

08009224 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <USART2_IRQHandler+0x24>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <USART2_IRQHandler+0x24>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <USART2_IRQHandler+0x28>)
 800923c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800923e:	f7ff ffd5 	bl	80091ec <usart2Rx_Callback>
	}

}
 8009242:	bf00      	nop
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40004400 	.word	0x40004400
 800924c:	20011d80 	.word	0x20011d80

08009250 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <USART1_IRQHandler+0x24>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <USART1_IRQHandler+0x24>)
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <USART1_IRQHandler+0x28>)
 8009268:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800926a:	f7f8 fbd1 	bl	8001a10 <usart1Rx_Callback>
	}
}
 800926e:	bf00      	nop
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40011000 	.word	0x40011000
 8009278:	20011d80 	.word	0x20011d80

0800927c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <USART6_IRQHandler+0x24>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d006      	beq.n	800929a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800928c:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <USART6_IRQHandler+0x24>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <USART6_IRQHandler+0x28>)
 8009294:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009296:	f7ff ffb1 	bl	80091fc <usart6Rx_Callback>
	}

}
 800929a:	bf00      	nop
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40011400 	.word	0x40011400
 80092a4:	20011d80 	.word	0x20011d80

080092a8 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80092b2:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 80092b4:	6838      	ldr	r0, [r7, #0]
 80092b6:	f7f7 f94d 	bl	8000554 <__aeabi_i2d>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	ec43 2b11 	vmov	d1, r2, r3
 80092c2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009340 <roundToNDecimals+0x98>
 80092c6:	f003 ff59 	bl	800d17c <pow>
 80092ca:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7f7 f952 	bl	8000578 <__aeabi_f2d>
 80092d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d8:	f7f7 f9a6 	bl	8000628 <__aeabi_dmul>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4610      	mov	r0, r2
 80092e2:	4619      	mov	r1, r3
 80092e4:	f7f7 fc98 	bl	8000c18 <__aeabi_d2f>
 80092e8:	4603      	mov	r3, r0
 80092ea:	607b      	str	r3, [r7, #4]

    number = round(number);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7f7 f943 	bl	8000578 <__aeabi_f2d>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	ec43 2b10 	vmov	d0, r2, r3
 80092fa:	f003 fe9d 	bl	800d038 <round>
 80092fe:	ec53 2b10 	vmov	r2, r3, d0
 8009302:	4610      	mov	r0, r2
 8009304:	4619      	mov	r1, r3
 8009306:	f7f7 fc87 	bl	8000c18 <__aeabi_d2f>
 800930a:	4603      	mov	r3, r0
 800930c:	607b      	str	r3, [r7, #4]

    number /= factor;
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f7 f932 	bl	8000578 <__aeabi_f2d>
 8009314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009318:	f7f7 fab0 	bl	800087c <__aeabi_ddiv>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	f7f7 fc78 	bl	8000c18 <__aeabi_d2f>
 8009328:	4603      	mov	r3, r0
 800932a:	607b      	str	r3, [r7, #4]

    return number;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	ee07 3a90 	vmov	s15, r3
}
 8009332:	eeb0 0a67 	vmov.f32	s0, s15
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	f3af 8000 	nop.w
 8009340:	00000000 	.word	0x00000000
 8009344:	40240000 	.word	0x40240000

08009348 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a89      	ldr	r2, [pc, #548]	; (800957c <i2c_config+0x234>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d106      	bne.n	8009368 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800935a:	4b89      	ldr	r3, [pc, #548]	; (8009580 <i2c_config+0x238>)
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	4a88      	ldr	r2, [pc, #544]	; (8009580 <i2c_config+0x238>)
 8009360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009364:	6413      	str	r3, [r2, #64]	; 0x40
 8009366:	e016      	b.n	8009396 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a85      	ldr	r2, [pc, #532]	; (8009584 <i2c_config+0x23c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d106      	bne.n	8009380 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009372:	4b83      	ldr	r3, [pc, #524]	; (8009580 <i2c_config+0x238>)
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	4a82      	ldr	r2, [pc, #520]	; (8009580 <i2c_config+0x238>)
 8009378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800937c:	6413      	str	r3, [r2, #64]	; 0x40
 800937e:	e00a      	b.n	8009396 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a80      	ldr	r2, [pc, #512]	; (8009588 <i2c_config+0x240>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d105      	bne.n	8009396 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800938a:	4b7d      	ldr	r3, [pc, #500]	; (8009580 <i2c_config+0x238>)
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	4a7c      	ldr	r2, [pc, #496]	; (8009580 <i2c_config+0x238>)
 8009390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009394:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 0201 	bic.w	r2, r2, #1
 80093a4:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80093a6:	e000      	b.n	80093aa <i2c_config+0x62>
		__NOP();
 80093a8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f7      	bne.n	80093a8 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	601a      	str	r2, [r3, #0]

	__NOP();
 80093c8:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d8:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80093e8:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	79db      	ldrb	r3, [r3, #7]
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d108      	bne.n	8009404 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0210 	orr.w	r2, r2, #16
 8009400:	605a      	str	r2, [r3, #4]
 8009402:	e018      	b.n	8009436 <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	79db      	ldrb	r3, [r3, #7]
 8009408:	2b19      	cmp	r3, #25
 800940a:	d108      	bne.n	800941e <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0219 	orr.w	r2, r2, #25
 800941a:	605a      	str	r2, [r3, #4]
 800941c:	e00b      	b.n	8009436 <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	79db      	ldrb	r3, [r3, #7]
 8009422:	2b32      	cmp	r3, #50	; 0x32
 8009424:	d107      	bne.n	8009436 <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8009434:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	795b      	ldrb	r3, [r3, #5]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d15c      	bne.n	8009508 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800945c:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	79db      	ldrb	r3, [r3, #7]
 8009462:	2b32      	cmp	r3, #50	; 0x32
 8009464:	d03f      	beq.n	80094e6 <i2c_config+0x19e>
 8009466:	2b32      	cmp	r3, #50	; 0x32
 8009468:	f300 80b2 	bgt.w	80095d0 <i2c_config+0x288>
 800946c:	2b19      	cmp	r3, #25
 800946e:	d029      	beq.n	80094c4 <i2c_config+0x17c>
 8009470:	2b19      	cmp	r3, #25
 8009472:	f300 80ad 	bgt.w	80095d0 <i2c_config+0x288>
 8009476:	2b04      	cmp	r3, #4
 8009478:	d002      	beq.n	8009480 <i2c_config+0x138>
 800947a:	2b10      	cmp	r3, #16
 800947c:	d011      	beq.n	80094a2 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800947e:	e0a7      	b.n	80095d0 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	69da      	ldr	r2, [r3, #28]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0214 	orr.w	r2, r2, #20
 800948e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a1a      	ldr	r2, [r3, #32]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0205 	orr.w	r2, r2, #5
 800949e:	621a      	str	r2, [r3, #32]
				break;
 80094a0:	e099      	b.n	80095d6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69da      	ldr	r2, [r3, #28]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80094b0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6a1a      	ldr	r2, [r3, #32]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0211 	orr.w	r2, r2, #17
 80094c0:	621a      	str	r2, [r3, #32]
				break;
 80094c2:	e088      	b.n	80095d6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 80094d2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0215 	orr.w	r2, r2, #21
 80094e2:	621a      	str	r2, [r3, #32]
				break;
 80094e4:	e077      	b.n	80095d6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 80094f4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6a1a      	ldr	r2, [r3, #32]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8009504:	621a      	str	r2, [r3, #32]
				break;
 8009506:	e066      	b.n	80095d6 <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69da      	ldr	r2, [r3, #28]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009516:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	79db      	ldrb	r3, [r3, #7]
 800951c:	2b32      	cmp	r3, #50	; 0x32
 800951e:	d046      	beq.n	80095ae <i2c_config+0x266>
 8009520:	2b32      	cmp	r3, #50	; 0x32
 8009522:	dc57      	bgt.n	80095d4 <i2c_config+0x28c>
 8009524:	2b19      	cmp	r3, #25
 8009526:	d031      	beq.n	800958c <i2c_config+0x244>
 8009528:	2b19      	cmp	r3, #25
 800952a:	dc53      	bgt.n	80095d4 <i2c_config+0x28c>
 800952c:	2b04      	cmp	r3, #4
 800952e:	d002      	beq.n	8009536 <i2c_config+0x1ee>
 8009530:	2b10      	cmp	r3, #16
 8009532:	d011      	beq.n	8009558 <i2c_config+0x210>


				break;
			}default:{

				break;
 8009534:	e04e      	b.n	80095d4 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69da      	ldr	r2, [r3, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f042 0203 	orr.w	r2, r2, #3
 8009544:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a1a      	ldr	r2, [r3, #32]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0202 	orr.w	r2, r2, #2
 8009554:	621a      	str	r2, [r3, #32]
				break;
 8009556:	e03e      	b.n	80095d6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69da      	ldr	r2, [r3, #28]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 020d 	orr.w	r2, r2, #13
 8009566:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6a1a      	ldr	r2, [r3, #32]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0206 	orr.w	r2, r2, #6
 8009576:	621a      	str	r2, [r3, #32]
				break;
 8009578:	e02d      	b.n	80095d6 <i2c_config+0x28e>
 800957a:	bf00      	nop
 800957c:	40005400 	.word	0x40005400
 8009580:	40023800 	.word	0x40023800
 8009584:	40005800 	.word	0x40005800
 8009588:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69da      	ldr	r2, [r3, #28]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0215 	orr.w	r2, r2, #21
 800959a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0208 	orr.w	r2, r2, #8
 80095aa:	621a      	str	r2, [r3, #32]
				break;
 80095ac:	e013      	b.n	80095d6 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80095bc:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6a1a      	ldr	r2, [r3, #32]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0210 	orr.w	r2, r2, #16
 80095cc:	621a      	str	r2, [r3, #32]
				break;
 80095ce:	e002      	b.n	80095d6 <i2c_config+0x28e>
				break;
 80095d0:	bf00      	nop
 80095d2:	e002      	b.n	80095da <i2c_config+0x292>
				break;
 80095d4:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80095d6:	e000      	b.n	80095da <i2c_config+0x292>
		__NOP();
 80095d8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f7      	bne.n	80095d8 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]


}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800961a:	601a      	str	r2, [r3, #0]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7a1b      	ldrb	r3, [r3, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d009      	beq.n	800964c <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009646:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009648:	e000      	b.n	800964c <i2c_startTransaction+0x24>
		__NOP();
 800964a:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f7      	bne.n	800964a <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009668:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800966a:	e000      	b.n	800966e <i2c_startTransaction+0x46>
		__NOP();
 800966c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0f7      	beq.n	800966c <i2c_startTransaction+0x44>
	}
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7a1b      	ldrb	r3, [r3, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a8:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096b8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80096ba:	e000      	b.n	80096be <i2c_reStartTransaction+0x34>
		__NOP();
 80096bc:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d0f7      	beq.n	80096bc <i2c_reStartTransaction+0x32>
	}
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f0:	601a      	str	r2, [r3, #0]
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
 800970a:	4613      	mov	r3, r2
 800970c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	005a      	lsls	r2, r3, #1
 8009716:	78bb      	ldrb	r3, [r7, #2]
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8009720:	e000      	b.n	8009724 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8009722:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0f7      	beq.n	8009722 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	73fb      	strb	r3, [r7, #15]

}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8009762:	e000      	b.n	8009766 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8009764:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f7      	beq.n	8009764 <i2c_sendMemoryAddress+0x16>
	}
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8009796:	e000      	b.n	800979a <i2c_sendDataByte+0x18>
		__NOP();
 8009798:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0f7      	beq.n	8009798 <i2c_sendDataByte+0x16>
	}
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80097be:	e000      	b.n	80097c2 <i2c_readDataByte+0xc>
		__NOP();
 80097c0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0f7      	beq.n	80097c0 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	799b      	ldrb	r3, [r3, #6]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <__errno>:
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <__errno+0x8>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000014 	.word	0x20000014

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4d0d      	ldr	r5, [pc, #52]	; (8009830 <__libc_init_array+0x38>)
 80097fc:	4c0d      	ldr	r4, [pc, #52]	; (8009834 <__libc_init_array+0x3c>)
 80097fe:	1b64      	subs	r4, r4, r5
 8009800:	10a4      	asrs	r4, r4, #2
 8009802:	2600      	movs	r6, #0
 8009804:	42a6      	cmp	r6, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4d0b      	ldr	r5, [pc, #44]	; (8009838 <__libc_init_array+0x40>)
 800980a:	4c0c      	ldr	r4, [pc, #48]	; (800983c <__libc_init_array+0x44>)
 800980c:	f005 fde0 	bl	800f3d0 <_init>
 8009810:	1b64      	subs	r4, r4, r5
 8009812:	10a4      	asrs	r4, r4, #2
 8009814:	2600      	movs	r6, #0
 8009816:	42a6      	cmp	r6, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009820:	4798      	blx	r3
 8009822:	3601      	adds	r6, #1
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f855 3b04 	ldr.w	r3, [r5], #4
 800982a:	4798      	blx	r3
 800982c:	3601      	adds	r6, #1
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	0800ff88 	.word	0x0800ff88
 8009834:	0800ff88 	.word	0x0800ff88
 8009838:	0800ff88 	.word	0x0800ff88
 800983c:	0800ff8c 	.word	0x0800ff8c

08009840 <malloc>:
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <malloc+0xc>)
 8009842:	4601      	mov	r1, r0
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	f000 b877 	b.w	8009938 <_malloc_r>
 800984a:	bf00      	nop
 800984c:	20000014 	.word	0x20000014

08009850 <memset>:
 8009850:	4402      	add	r2, r0
 8009852:	4603      	mov	r3, r0
 8009854:	4293      	cmp	r3, r2
 8009856:	d100      	bne.n	800985a <memset+0xa>
 8009858:	4770      	bx	lr
 800985a:	f803 1b01 	strb.w	r1, [r3], #1
 800985e:	e7f9      	b.n	8009854 <memset+0x4>

08009860 <_free_r>:
 8009860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009862:	2900      	cmp	r1, #0
 8009864:	d044      	beq.n	80098f0 <_free_r+0x90>
 8009866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986a:	9001      	str	r0, [sp, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f1a1 0404 	sub.w	r4, r1, #4
 8009872:	bfb8      	it	lt
 8009874:	18e4      	addlt	r4, r4, r3
 8009876:	f001 fca1 	bl	800b1bc <__malloc_lock>
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <_free_r+0x94>)
 800987c:	9801      	ldr	r0, [sp, #4]
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	b933      	cbnz	r3, 8009890 <_free_r+0x30>
 8009882:	6063      	str	r3, [r4, #4]
 8009884:	6014      	str	r4, [r2, #0]
 8009886:	b003      	add	sp, #12
 8009888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988c:	f001 bc9c 	b.w	800b1c8 <__malloc_unlock>
 8009890:	42a3      	cmp	r3, r4
 8009892:	d908      	bls.n	80098a6 <_free_r+0x46>
 8009894:	6825      	ldr	r5, [r4, #0]
 8009896:	1961      	adds	r1, r4, r5
 8009898:	428b      	cmp	r3, r1
 800989a:	bf01      	itttt	eq
 800989c:	6819      	ldreq	r1, [r3, #0]
 800989e:	685b      	ldreq	r3, [r3, #4]
 80098a0:	1949      	addeq	r1, r1, r5
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	e7ed      	b.n	8009882 <_free_r+0x22>
 80098a6:	461a      	mov	r2, r3
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	b10b      	cbz	r3, 80098b0 <_free_r+0x50>
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	d9fa      	bls.n	80098a6 <_free_r+0x46>
 80098b0:	6811      	ldr	r1, [r2, #0]
 80098b2:	1855      	adds	r5, r2, r1
 80098b4:	42a5      	cmp	r5, r4
 80098b6:	d10b      	bne.n	80098d0 <_free_r+0x70>
 80098b8:	6824      	ldr	r4, [r4, #0]
 80098ba:	4421      	add	r1, r4
 80098bc:	1854      	adds	r4, r2, r1
 80098be:	42a3      	cmp	r3, r4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	d1e0      	bne.n	8009886 <_free_r+0x26>
 80098c4:	681c      	ldr	r4, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	6053      	str	r3, [r2, #4]
 80098ca:	4421      	add	r1, r4
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	e7da      	b.n	8009886 <_free_r+0x26>
 80098d0:	d902      	bls.n	80098d8 <_free_r+0x78>
 80098d2:	230c      	movs	r3, #12
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	e7d6      	b.n	8009886 <_free_r+0x26>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf04      	itt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	bf04      	itt	eq
 80098e8:	1949      	addeq	r1, r1, r5
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	6054      	str	r4, [r2, #4]
 80098ee:	e7ca      	b.n	8009886 <_free_r+0x26>
 80098f0:	b003      	add	sp, #12
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	20011d84 	.word	0x20011d84

080098f8 <sbrk_aligned>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4e0e      	ldr	r6, [pc, #56]	; (8009934 <sbrk_aligned+0x3c>)
 80098fc:	460c      	mov	r4, r1
 80098fe:	6831      	ldr	r1, [r6, #0]
 8009900:	4605      	mov	r5, r0
 8009902:	b911      	cbnz	r1, 800990a <sbrk_aligned+0x12>
 8009904:	f000 fcf6 	bl	800a2f4 <_sbrk_r>
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 fcf1 	bl	800a2f4 <_sbrk_r>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d00a      	beq.n	800992c <sbrk_aligned+0x34>
 8009916:	1cc4      	adds	r4, r0, #3
 8009918:	f024 0403 	bic.w	r4, r4, #3
 800991c:	42a0      	cmp	r0, r4
 800991e:	d007      	beq.n	8009930 <sbrk_aligned+0x38>
 8009920:	1a21      	subs	r1, r4, r0
 8009922:	4628      	mov	r0, r5
 8009924:	f000 fce6 	bl	800a2f4 <_sbrk_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d101      	bne.n	8009930 <sbrk_aligned+0x38>
 800992c:	f04f 34ff 	mov.w	r4, #4294967295
 8009930:	4620      	mov	r0, r4
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	20011d88 	.word	0x20011d88

08009938 <_malloc_r>:
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	1ccd      	adds	r5, r1, #3
 800993e:	f025 0503 	bic.w	r5, r5, #3
 8009942:	3508      	adds	r5, #8
 8009944:	2d0c      	cmp	r5, #12
 8009946:	bf38      	it	cc
 8009948:	250c      	movcc	r5, #12
 800994a:	2d00      	cmp	r5, #0
 800994c:	4607      	mov	r7, r0
 800994e:	db01      	blt.n	8009954 <_malloc_r+0x1c>
 8009950:	42a9      	cmp	r1, r5
 8009952:	d905      	bls.n	8009960 <_malloc_r+0x28>
 8009954:	230c      	movs	r3, #12
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	2600      	movs	r6, #0
 800995a:	4630      	mov	r0, r6
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	4e2e      	ldr	r6, [pc, #184]	; (8009a1c <_malloc_r+0xe4>)
 8009962:	f001 fc2b 	bl	800b1bc <__malloc_lock>
 8009966:	6833      	ldr	r3, [r6, #0]
 8009968:	461c      	mov	r4, r3
 800996a:	bb34      	cbnz	r4, 80099ba <_malloc_r+0x82>
 800996c:	4629      	mov	r1, r5
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff ffc2 	bl	80098f8 <sbrk_aligned>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	4604      	mov	r4, r0
 8009978:	d14d      	bne.n	8009a16 <_malloc_r+0xde>
 800997a:	6834      	ldr	r4, [r6, #0]
 800997c:	4626      	mov	r6, r4
 800997e:	2e00      	cmp	r6, #0
 8009980:	d140      	bne.n	8009a04 <_malloc_r+0xcc>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	4631      	mov	r1, r6
 8009986:	4638      	mov	r0, r7
 8009988:	eb04 0803 	add.w	r8, r4, r3
 800998c:	f000 fcb2 	bl	800a2f4 <_sbrk_r>
 8009990:	4580      	cmp	r8, r0
 8009992:	d13a      	bne.n	8009a0a <_malloc_r+0xd2>
 8009994:	6821      	ldr	r1, [r4, #0]
 8009996:	3503      	adds	r5, #3
 8009998:	1a6d      	subs	r5, r5, r1
 800999a:	f025 0503 	bic.w	r5, r5, #3
 800999e:	3508      	adds	r5, #8
 80099a0:	2d0c      	cmp	r5, #12
 80099a2:	bf38      	it	cc
 80099a4:	250c      	movcc	r5, #12
 80099a6:	4629      	mov	r1, r5
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7ff ffa5 	bl	80098f8 <sbrk_aligned>
 80099ae:	3001      	adds	r0, #1
 80099b0:	d02b      	beq.n	8009a0a <_malloc_r+0xd2>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	442b      	add	r3, r5
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	e00e      	b.n	80099d8 <_malloc_r+0xa0>
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	1b52      	subs	r2, r2, r5
 80099be:	d41e      	bmi.n	80099fe <_malloc_r+0xc6>
 80099c0:	2a0b      	cmp	r2, #11
 80099c2:	d916      	bls.n	80099f2 <_malloc_r+0xba>
 80099c4:	1961      	adds	r1, r4, r5
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	6025      	str	r5, [r4, #0]
 80099ca:	bf18      	it	ne
 80099cc:	6059      	strne	r1, [r3, #4]
 80099ce:	6863      	ldr	r3, [r4, #4]
 80099d0:	bf08      	it	eq
 80099d2:	6031      	streq	r1, [r6, #0]
 80099d4:	5162      	str	r2, [r4, r5]
 80099d6:	604b      	str	r3, [r1, #4]
 80099d8:	4638      	mov	r0, r7
 80099da:	f104 060b 	add.w	r6, r4, #11
 80099de:	f001 fbf3 	bl	800b1c8 <__malloc_unlock>
 80099e2:	f026 0607 	bic.w	r6, r6, #7
 80099e6:	1d23      	adds	r3, r4, #4
 80099e8:	1af2      	subs	r2, r6, r3
 80099ea:	d0b6      	beq.n	800995a <_malloc_r+0x22>
 80099ec:	1b9b      	subs	r3, r3, r6
 80099ee:	50a3      	str	r3, [r4, r2]
 80099f0:	e7b3      	b.n	800995a <_malloc_r+0x22>
 80099f2:	6862      	ldr	r2, [r4, #4]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	bf0c      	ite	eq
 80099f8:	6032      	streq	r2, [r6, #0]
 80099fa:	605a      	strne	r2, [r3, #4]
 80099fc:	e7ec      	b.n	80099d8 <_malloc_r+0xa0>
 80099fe:	4623      	mov	r3, r4
 8009a00:	6864      	ldr	r4, [r4, #4]
 8009a02:	e7b2      	b.n	800996a <_malloc_r+0x32>
 8009a04:	4634      	mov	r4, r6
 8009a06:	6876      	ldr	r6, [r6, #4]
 8009a08:	e7b9      	b.n	800997e <_malloc_r+0x46>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	603b      	str	r3, [r7, #0]
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f001 fbda 	bl	800b1c8 <__malloc_unlock>
 8009a14:	e7a1      	b.n	800995a <_malloc_r+0x22>
 8009a16:	6025      	str	r5, [r4, #0]
 8009a18:	e7de      	b.n	80099d8 <_malloc_r+0xa0>
 8009a1a:	bf00      	nop
 8009a1c:	20011d84 	.word	0x20011d84

08009a20 <__cvt>:
 8009a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	ec55 4b10 	vmov	r4, r5, d0
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	462b      	mov	r3, r5
 8009a30:	bfbb      	ittet	lt
 8009a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a36:	461d      	movlt	r5, r3
 8009a38:	2300      	movge	r3, #0
 8009a3a:	232d      	movlt	r3, #45	; 0x2d
 8009a3c:	700b      	strb	r3, [r1, #0]
 8009a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a44:	4691      	mov	r9, r2
 8009a46:	f023 0820 	bic.w	r8, r3, #32
 8009a4a:	bfbc      	itt	lt
 8009a4c:	4622      	movlt	r2, r4
 8009a4e:	4614      	movlt	r4, r2
 8009a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a54:	d005      	beq.n	8009a62 <__cvt+0x42>
 8009a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a5a:	d100      	bne.n	8009a5e <__cvt+0x3e>
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	2102      	movs	r1, #2
 8009a60:	e000      	b.n	8009a64 <__cvt+0x44>
 8009a62:	2103      	movs	r1, #3
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	ab02      	add	r3, sp, #8
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	ec45 4b10 	vmov	d0, r4, r5
 8009a70:	4653      	mov	r3, sl
 8009a72:	4632      	mov	r2, r6
 8009a74:	f000 fd90 	bl	800a598 <_dtoa_r>
 8009a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	d102      	bne.n	8009a86 <__cvt+0x66>
 8009a80:	f019 0f01 	tst.w	r9, #1
 8009a84:	d022      	beq.n	8009acc <__cvt+0xac>
 8009a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a8a:	eb07 0906 	add.w	r9, r7, r6
 8009a8e:	d110      	bne.n	8009ab2 <__cvt+0x92>
 8009a90:	783b      	ldrb	r3, [r7, #0]
 8009a92:	2b30      	cmp	r3, #48	; 0x30
 8009a94:	d10a      	bne.n	8009aac <__cvt+0x8c>
 8009a96:	2200      	movs	r2, #0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f7 f82b 	bl	8000af8 <__aeabi_dcmpeq>
 8009aa2:	b918      	cbnz	r0, 8009aac <__cvt+0x8c>
 8009aa4:	f1c6 0601 	rsb	r6, r6, #1
 8009aa8:	f8ca 6000 	str.w	r6, [sl]
 8009aac:	f8da 3000 	ldr.w	r3, [sl]
 8009ab0:	4499      	add	r9, r3
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f7 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 8009abe:	b108      	cbz	r0, 8009ac4 <__cvt+0xa4>
 8009ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ac4:	2230      	movs	r2, #48	; 0x30
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	454b      	cmp	r3, r9
 8009aca:	d307      	bcc.n	8009adc <__cvt+0xbc>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ad0:	1bdb      	subs	r3, r3, r7
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	b004      	add	sp, #16
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	1c59      	adds	r1, r3, #1
 8009ade:	9103      	str	r1, [sp, #12]
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	e7f0      	b.n	8009ac6 <__cvt+0xa6>

08009ae4 <__exponent>:
 8009ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	bfb8      	it	lt
 8009aec:	4249      	neglt	r1, r1
 8009aee:	f803 2b02 	strb.w	r2, [r3], #2
 8009af2:	bfb4      	ite	lt
 8009af4:	222d      	movlt	r2, #45	; 0x2d
 8009af6:	222b      	movge	r2, #43	; 0x2b
 8009af8:	2909      	cmp	r1, #9
 8009afa:	7042      	strb	r2, [r0, #1]
 8009afc:	dd2a      	ble.n	8009b54 <__exponent+0x70>
 8009afe:	f10d 0407 	add.w	r4, sp, #7
 8009b02:	46a4      	mov	ip, r4
 8009b04:	270a      	movs	r7, #10
 8009b06:	46a6      	mov	lr, r4
 8009b08:	460a      	mov	r2, r1
 8009b0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b0e:	fb07 1516 	mls	r5, r7, r6, r1
 8009b12:	3530      	adds	r5, #48	; 0x30
 8009b14:	2a63      	cmp	r2, #99	; 0x63
 8009b16:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b1e:	4631      	mov	r1, r6
 8009b20:	dcf1      	bgt.n	8009b06 <__exponent+0x22>
 8009b22:	3130      	adds	r1, #48	; 0x30
 8009b24:	f1ae 0502 	sub.w	r5, lr, #2
 8009b28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b2c:	1c44      	adds	r4, r0, #1
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4561      	cmp	r1, ip
 8009b32:	d30a      	bcc.n	8009b4a <__exponent+0x66>
 8009b34:	f10d 0209 	add.w	r2, sp, #9
 8009b38:	eba2 020e 	sub.w	r2, r2, lr
 8009b3c:	4565      	cmp	r5, ip
 8009b3e:	bf88      	it	hi
 8009b40:	2200      	movhi	r2, #0
 8009b42:	4413      	add	r3, r2
 8009b44:	1a18      	subs	r0, r3, r0
 8009b46:	b003      	add	sp, #12
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b52:	e7ed      	b.n	8009b30 <__exponent+0x4c>
 8009b54:	2330      	movs	r3, #48	; 0x30
 8009b56:	3130      	adds	r1, #48	; 0x30
 8009b58:	7083      	strb	r3, [r0, #2]
 8009b5a:	70c1      	strb	r1, [r0, #3]
 8009b5c:	1d03      	adds	r3, r0, #4
 8009b5e:	e7f1      	b.n	8009b44 <__exponent+0x60>

08009b60 <_printf_float>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	ed2d 8b02 	vpush	{d8}
 8009b68:	b08d      	sub	sp, #52	; 0x34
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b70:	4616      	mov	r6, r2
 8009b72:	461f      	mov	r7, r3
 8009b74:	4605      	mov	r5, r0
 8009b76:	f001 fafd 	bl	800b174 <_localeconv_r>
 8009b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b7e:	4650      	mov	r0, sl
 8009b80:	f7f6 fb38 	bl	80001f4 <strlen>
 8009b84:	2300      	movs	r3, #0
 8009b86:	930a      	str	r3, [sp, #40]	; 0x28
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	9305      	str	r3, [sp, #20]
 8009b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b94:	3307      	adds	r3, #7
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	f103 0208 	add.w	r2, r3, #8
 8009b9e:	f8c8 2000 	str.w	r2, [r8]
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009baa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bb8:	ee08 0a10 	vmov	s16, r0
 8009bbc:	4b9f      	ldr	r3, [pc, #636]	; (8009e3c <_printf_float+0x2dc>)
 8009bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	f7f6 ffc9 	bl	8000b5c <__aeabi_dcmpun>
 8009bca:	bb88      	cbnz	r0, 8009c30 <_printf_float+0xd0>
 8009bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bd0:	4b9a      	ldr	r3, [pc, #616]	; (8009e3c <_printf_float+0x2dc>)
 8009bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd6:	f7f6 ffa3 	bl	8000b20 <__aeabi_dcmple>
 8009bda:	bb48      	cbnz	r0, 8009c30 <_printf_float+0xd0>
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2300      	movs	r3, #0
 8009be0:	4640      	mov	r0, r8
 8009be2:	4649      	mov	r1, r9
 8009be4:	f7f6 ff92 	bl	8000b0c <__aeabi_dcmplt>
 8009be8:	b110      	cbz	r0, 8009bf0 <_printf_float+0x90>
 8009bea:	232d      	movs	r3, #45	; 0x2d
 8009bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf0:	4b93      	ldr	r3, [pc, #588]	; (8009e40 <_printf_float+0x2e0>)
 8009bf2:	4894      	ldr	r0, [pc, #592]	; (8009e44 <_printf_float+0x2e4>)
 8009bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009bf8:	bf94      	ite	ls
 8009bfa:	4698      	movls	r8, r3
 8009bfc:	4680      	movhi	r8, r0
 8009bfe:	2303      	movs	r3, #3
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	9b05      	ldr	r3, [sp, #20]
 8009c04:	f023 0204 	bic.w	r2, r3, #4
 8009c08:	6022      	str	r2, [r4, #0]
 8009c0a:	f04f 0900 	mov.w	r9, #0
 8009c0e:	9700      	str	r7, [sp, #0]
 8009c10:	4633      	mov	r3, r6
 8009c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f9d8 	bl	8009fcc <_printf_common>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	f040 8090 	bne.w	8009d42 <_printf_float+0x1e2>
 8009c22:	f04f 30ff 	mov.w	r0, #4294967295
 8009c26:	b00d      	add	sp, #52	; 0x34
 8009c28:	ecbd 8b02 	vpop	{d8}
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	4642      	mov	r2, r8
 8009c32:	464b      	mov	r3, r9
 8009c34:	4640      	mov	r0, r8
 8009c36:	4649      	mov	r1, r9
 8009c38:	f7f6 ff90 	bl	8000b5c <__aeabi_dcmpun>
 8009c3c:	b140      	cbz	r0, 8009c50 <_printf_float+0xf0>
 8009c3e:	464b      	mov	r3, r9
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bfbc      	itt	lt
 8009c44:	232d      	movlt	r3, #45	; 0x2d
 8009c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c4a:	487f      	ldr	r0, [pc, #508]	; (8009e48 <_printf_float+0x2e8>)
 8009c4c:	4b7f      	ldr	r3, [pc, #508]	; (8009e4c <_printf_float+0x2ec>)
 8009c4e:	e7d1      	b.n	8009bf4 <_printf_float+0x94>
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c56:	9206      	str	r2, [sp, #24]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	d13f      	bne.n	8009cdc <_printf_float+0x17c>
 8009c5c:	2306      	movs	r3, #6
 8009c5e:	6063      	str	r3, [r4, #4]
 8009c60:	9b05      	ldr	r3, [sp, #20]
 8009c62:	6861      	ldr	r1, [r4, #4]
 8009c64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8009c6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c72:	ab09      	add	r3, sp, #36	; 0x24
 8009c74:	ec49 8b10 	vmov	d0, r8, r9
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c80:	4628      	mov	r0, r5
 8009c82:	f7ff fecd 	bl	8009a20 <__cvt>
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c8a:	2b47      	cmp	r3, #71	; 0x47
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	d108      	bne.n	8009ca2 <_printf_float+0x142>
 8009c90:	1cc8      	adds	r0, r1, #3
 8009c92:	db02      	blt.n	8009c9a <_printf_float+0x13a>
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	4299      	cmp	r1, r3
 8009c98:	dd41      	ble.n	8009d1e <_printf_float+0x1be>
 8009c9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c9e:	fa5f fb8b 	uxtb.w	fp, fp
 8009ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ca6:	d820      	bhi.n	8009cea <_printf_float+0x18a>
 8009ca8:	3901      	subs	r1, #1
 8009caa:	465a      	mov	r2, fp
 8009cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8009cb2:	f7ff ff17 	bl	8009ae4 <__exponent>
 8009cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb8:	1813      	adds	r3, r2, r0
 8009cba:	2a01      	cmp	r2, #1
 8009cbc:	4681      	mov	r9, r0
 8009cbe:	6123      	str	r3, [r4, #16]
 8009cc0:	dc02      	bgt.n	8009cc8 <_printf_float+0x168>
 8009cc2:	6822      	ldr	r2, [r4, #0]
 8009cc4:	07d2      	lsls	r2, r2, #31
 8009cc6:	d501      	bpl.n	8009ccc <_printf_float+0x16c>
 8009cc8:	3301      	adds	r3, #1
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d09c      	beq.n	8009c0e <_printf_float+0xae>
 8009cd4:	232d      	movs	r3, #45	; 0x2d
 8009cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cda:	e798      	b.n	8009c0e <_printf_float+0xae>
 8009cdc:	9a06      	ldr	r2, [sp, #24]
 8009cde:	2a47      	cmp	r2, #71	; 0x47
 8009ce0:	d1be      	bne.n	8009c60 <_printf_float+0x100>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1bc      	bne.n	8009c60 <_printf_float+0x100>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e7b9      	b.n	8009c5e <_printf_float+0xfe>
 8009cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009cee:	d118      	bne.n	8009d22 <_printf_float+0x1c2>
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	6863      	ldr	r3, [r4, #4]
 8009cf4:	dd0b      	ble.n	8009d0e <_printf_float+0x1ae>
 8009cf6:	6121      	str	r1, [r4, #16]
 8009cf8:	b913      	cbnz	r3, 8009d00 <_printf_float+0x1a0>
 8009cfa:	6822      	ldr	r2, [r4, #0]
 8009cfc:	07d0      	lsls	r0, r2, #31
 8009cfe:	d502      	bpl.n	8009d06 <_printf_float+0x1a6>
 8009d00:	3301      	adds	r3, #1
 8009d02:	440b      	add	r3, r1
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d08:	f04f 0900 	mov.w	r9, #0
 8009d0c:	e7de      	b.n	8009ccc <_printf_float+0x16c>
 8009d0e:	b913      	cbnz	r3, 8009d16 <_printf_float+0x1b6>
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	07d2      	lsls	r2, r2, #31
 8009d14:	d501      	bpl.n	8009d1a <_printf_float+0x1ba>
 8009d16:	3302      	adds	r3, #2
 8009d18:	e7f4      	b.n	8009d04 <_printf_float+0x1a4>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e7f2      	b.n	8009d04 <_printf_float+0x1a4>
 8009d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d24:	4299      	cmp	r1, r3
 8009d26:	db05      	blt.n	8009d34 <_printf_float+0x1d4>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	6121      	str	r1, [r4, #16]
 8009d2c:	07d8      	lsls	r0, r3, #31
 8009d2e:	d5ea      	bpl.n	8009d06 <_printf_float+0x1a6>
 8009d30:	1c4b      	adds	r3, r1, #1
 8009d32:	e7e7      	b.n	8009d04 <_printf_float+0x1a4>
 8009d34:	2900      	cmp	r1, #0
 8009d36:	bfd4      	ite	le
 8009d38:	f1c1 0202 	rsble	r2, r1, #2
 8009d3c:	2201      	movgt	r2, #1
 8009d3e:	4413      	add	r3, r2
 8009d40:	e7e0      	b.n	8009d04 <_printf_float+0x1a4>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	055a      	lsls	r2, r3, #21
 8009d46:	d407      	bmi.n	8009d58 <_printf_float+0x1f8>
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	4642      	mov	r2, r8
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	d12c      	bne.n	8009db0 <_printf_float+0x250>
 8009d56:	e764      	b.n	8009c22 <_printf_float+0xc2>
 8009d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d5c:	f240 80e0 	bls.w	8009f20 <_printf_float+0x3c0>
 8009d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d64:	2200      	movs	r2, #0
 8009d66:	2300      	movs	r3, #0
 8009d68:	f7f6 fec6 	bl	8000af8 <__aeabi_dcmpeq>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d034      	beq.n	8009dda <_printf_float+0x27a>
 8009d70:	4a37      	ldr	r2, [pc, #220]	; (8009e50 <_printf_float+0x2f0>)
 8009d72:	2301      	movs	r3, #1
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af51 	beq.w	8009c22 <_printf_float+0xc2>
 8009d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d84:	429a      	cmp	r2, r3
 8009d86:	db02      	blt.n	8009d8e <_printf_float+0x22e>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	07d8      	lsls	r0, r3, #31
 8009d8c:	d510      	bpl.n	8009db0 <_printf_float+0x250>
 8009d8e:	ee18 3a10 	vmov	r3, s16
 8009d92:	4652      	mov	r2, sl
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af41 	beq.w	8009c22 <_printf_float+0xc2>
 8009da0:	f04f 0800 	mov.w	r8, #0
 8009da4:	f104 091a 	add.w	r9, r4, #26
 8009da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009daa:	3b01      	subs	r3, #1
 8009dac:	4543      	cmp	r3, r8
 8009dae:	dc09      	bgt.n	8009dc4 <_printf_float+0x264>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	079b      	lsls	r3, r3, #30
 8009db4:	f100 8105 	bmi.w	8009fc2 <_printf_float+0x462>
 8009db8:	68e0      	ldr	r0, [r4, #12]
 8009dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	bfb8      	it	lt
 8009dc0:	4618      	movlt	r0, r3
 8009dc2:	e730      	b.n	8009c26 <_printf_float+0xc6>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	464a      	mov	r2, r9
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b8      	blx	r7
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f43f af27 	beq.w	8009c22 <_printf_float+0xc2>
 8009dd4:	f108 0801 	add.w	r8, r8, #1
 8009dd8:	e7e6      	b.n	8009da8 <_printf_float+0x248>
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dc39      	bgt.n	8009e54 <_printf_float+0x2f4>
 8009de0:	4a1b      	ldr	r2, [pc, #108]	; (8009e50 <_printf_float+0x2f0>)
 8009de2:	2301      	movs	r3, #1
 8009de4:	4631      	mov	r1, r6
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f af19 	beq.w	8009c22 <_printf_float+0xc2>
 8009df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009df4:	4313      	orrs	r3, r2
 8009df6:	d102      	bne.n	8009dfe <_printf_float+0x29e>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d5d8      	bpl.n	8009db0 <_printf_float+0x250>
 8009dfe:	ee18 3a10 	vmov	r3, s16
 8009e02:	4652      	mov	r2, sl
 8009e04:	4631      	mov	r1, r6
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f43f af09 	beq.w	8009c22 <_printf_float+0xc2>
 8009e10:	f04f 0900 	mov.w	r9, #0
 8009e14:	f104 0a1a 	add.w	sl, r4, #26
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	425b      	negs	r3, r3
 8009e1c:	454b      	cmp	r3, r9
 8009e1e:	dc01      	bgt.n	8009e24 <_printf_float+0x2c4>
 8009e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e22:	e792      	b.n	8009d4a <_printf_float+0x1ea>
 8009e24:	2301      	movs	r3, #1
 8009e26:	4652      	mov	r2, sl
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f43f aef7 	beq.w	8009c22 <_printf_float+0xc2>
 8009e34:	f109 0901 	add.w	r9, r9, #1
 8009e38:	e7ee      	b.n	8009e18 <_printf_float+0x2b8>
 8009e3a:	bf00      	nop
 8009e3c:	7fefffff 	.word	0x7fefffff
 8009e40:	0800f918 	.word	0x0800f918
 8009e44:	0800f91c 	.word	0x0800f91c
 8009e48:	0800f924 	.word	0x0800f924
 8009e4c:	0800f920 	.word	0x0800f920
 8009e50:	0800fb49 	.word	0x0800fb49
 8009e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	bfa8      	it	ge
 8009e5c:	461a      	movge	r2, r3
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	4691      	mov	r9, r2
 8009e62:	dc37      	bgt.n	8009ed4 <_printf_float+0x374>
 8009e64:	f04f 0b00 	mov.w	fp, #0
 8009e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e6c:	f104 021a 	add.w	r2, r4, #26
 8009e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	eba3 0309 	sub.w	r3, r3, r9
 8009e78:	455b      	cmp	r3, fp
 8009e7a:	dc33      	bgt.n	8009ee4 <_printf_float+0x384>
 8009e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e80:	429a      	cmp	r2, r3
 8009e82:	db3b      	blt.n	8009efc <_printf_float+0x39c>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	07da      	lsls	r2, r3, #31
 8009e88:	d438      	bmi.n	8009efc <_printf_float+0x39c>
 8009e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e8c:	9a05      	ldr	r2, [sp, #20]
 8009e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e90:	1a9a      	subs	r2, r3, r2
 8009e92:	eba3 0901 	sub.w	r9, r3, r1
 8009e96:	4591      	cmp	r9, r2
 8009e98:	bfa8      	it	ge
 8009e9a:	4691      	movge	r9, r2
 8009e9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ea0:	dc35      	bgt.n	8009f0e <_printf_float+0x3ae>
 8009ea2:	f04f 0800 	mov.w	r8, #0
 8009ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eaa:	f104 0a1a 	add.w	sl, r4, #26
 8009eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	eba3 0309 	sub.w	r3, r3, r9
 8009eb8:	4543      	cmp	r3, r8
 8009eba:	f77f af79 	ble.w	8009db0 <_printf_float+0x250>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f aeaa 	beq.w	8009c22 <_printf_float+0xc2>
 8009ece:	f108 0801 	add.w	r8, r8, #1
 8009ed2:	e7ec      	b.n	8009eae <_printf_float+0x34e>
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4642      	mov	r2, r8
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d1c0      	bne.n	8009e64 <_printf_float+0x304>
 8009ee2:	e69e      	b.n	8009c22 <_printf_float+0xc2>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4628      	mov	r0, r5
 8009eea:	9205      	str	r2, [sp, #20]
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f43f ae97 	beq.w	8009c22 <_printf_float+0xc2>
 8009ef4:	9a05      	ldr	r2, [sp, #20]
 8009ef6:	f10b 0b01 	add.w	fp, fp, #1
 8009efa:	e7b9      	b.n	8009e70 <_printf_float+0x310>
 8009efc:	ee18 3a10 	vmov	r3, s16
 8009f00:	4652      	mov	r2, sl
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d1be      	bne.n	8009e8a <_printf_float+0x32a>
 8009f0c:	e689      	b.n	8009c22 <_printf_float+0xc2>
 8009f0e:	9a05      	ldr	r2, [sp, #20]
 8009f10:	464b      	mov	r3, r9
 8009f12:	4442      	add	r2, r8
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d1c1      	bne.n	8009ea2 <_printf_float+0x342>
 8009f1e:	e680      	b.n	8009c22 <_printf_float+0xc2>
 8009f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f22:	2a01      	cmp	r2, #1
 8009f24:	dc01      	bgt.n	8009f2a <_printf_float+0x3ca>
 8009f26:	07db      	lsls	r3, r3, #31
 8009f28:	d538      	bpl.n	8009f9c <_printf_float+0x43c>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4642      	mov	r2, r8
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b8      	blx	r7
 8009f34:	3001      	adds	r0, #1
 8009f36:	f43f ae74 	beq.w	8009c22 <_printf_float+0xc2>
 8009f3a:	ee18 3a10 	vmov	r3, s16
 8009f3e:	4652      	mov	r2, sl
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f ae6b 	beq.w	8009c22 <_printf_float+0xc2>
 8009f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	f7f6 fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 8009f58:	b9d8      	cbnz	r0, 8009f92 <_printf_float+0x432>
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5c:	f108 0201 	add.w	r2, r8, #1
 8009f60:	3b01      	subs	r3, #1
 8009f62:	4631      	mov	r1, r6
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b8      	blx	r7
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d10e      	bne.n	8009f8a <_printf_float+0x42a>
 8009f6c:	e659      	b.n	8009c22 <_printf_float+0xc2>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4652      	mov	r2, sl
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f ae52 	beq.w	8009c22 <_printf_float+0xc2>
 8009f7e:	f108 0801 	add.w	r8, r8, #1
 8009f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f84:	3b01      	subs	r3, #1
 8009f86:	4543      	cmp	r3, r8
 8009f88:	dcf1      	bgt.n	8009f6e <_printf_float+0x40e>
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f90:	e6dc      	b.n	8009d4c <_printf_float+0x1ec>
 8009f92:	f04f 0800 	mov.w	r8, #0
 8009f96:	f104 0a1a 	add.w	sl, r4, #26
 8009f9a:	e7f2      	b.n	8009f82 <_printf_float+0x422>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4642      	mov	r2, r8
 8009fa0:	e7df      	b.n	8009f62 <_printf_float+0x402>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	464a      	mov	r2, r9
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	f43f ae38 	beq.w	8009c22 <_printf_float+0xc2>
 8009fb2:	f108 0801 	add.w	r8, r8, #1
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fba:	1a5b      	subs	r3, r3, r1
 8009fbc:	4543      	cmp	r3, r8
 8009fbe:	dcf0      	bgt.n	8009fa2 <_printf_float+0x442>
 8009fc0:	e6fa      	b.n	8009db8 <_printf_float+0x258>
 8009fc2:	f04f 0800 	mov.w	r8, #0
 8009fc6:	f104 0919 	add.w	r9, r4, #25
 8009fca:	e7f4      	b.n	8009fb6 <_printf_float+0x456>

08009fcc <_printf_common>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	4616      	mov	r6, r2
 8009fd2:	4699      	mov	r9, r3
 8009fd4:	688a      	ldr	r2, [r1, #8]
 8009fd6:	690b      	ldr	r3, [r1, #16]
 8009fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bfb8      	it	lt
 8009fe0:	4613      	movlt	r3, r2
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fe8:	4607      	mov	r7, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	b10a      	cbz	r2, 8009ff2 <_printf_common+0x26>
 8009fee:	3301      	adds	r3, #1
 8009ff0:	6033      	str	r3, [r6, #0]
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	0699      	lsls	r1, r3, #26
 8009ff6:	bf42      	ittt	mi
 8009ff8:	6833      	ldrmi	r3, [r6, #0]
 8009ffa:	3302      	addmi	r3, #2
 8009ffc:	6033      	strmi	r3, [r6, #0]
 8009ffe:	6825      	ldr	r5, [r4, #0]
 800a000:	f015 0506 	ands.w	r5, r5, #6
 800a004:	d106      	bne.n	800a014 <_printf_common+0x48>
 800a006:	f104 0a19 	add.w	sl, r4, #25
 800a00a:	68e3      	ldr	r3, [r4, #12]
 800a00c:	6832      	ldr	r2, [r6, #0]
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	42ab      	cmp	r3, r5
 800a012:	dc26      	bgt.n	800a062 <_printf_common+0x96>
 800a014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a018:	1e13      	subs	r3, r2, #0
 800a01a:	6822      	ldr	r2, [r4, #0]
 800a01c:	bf18      	it	ne
 800a01e:	2301      	movne	r3, #1
 800a020:	0692      	lsls	r2, r2, #26
 800a022:	d42b      	bmi.n	800a07c <_printf_common+0xb0>
 800a024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a028:	4649      	mov	r1, r9
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c0      	blx	r8
 800a02e:	3001      	adds	r0, #1
 800a030:	d01e      	beq.n	800a070 <_printf_common+0xa4>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	68e5      	ldr	r5, [r4, #12]
 800a036:	6832      	ldr	r2, [r6, #0]
 800a038:	f003 0306 	and.w	r3, r3, #6
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	bf08      	it	eq
 800a040:	1aad      	subeq	r5, r5, r2
 800a042:	68a3      	ldr	r3, [r4, #8]
 800a044:	6922      	ldr	r2, [r4, #16]
 800a046:	bf0c      	ite	eq
 800a048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a04c:	2500      	movne	r5, #0
 800a04e:	4293      	cmp	r3, r2
 800a050:	bfc4      	itt	gt
 800a052:	1a9b      	subgt	r3, r3, r2
 800a054:	18ed      	addgt	r5, r5, r3
 800a056:	2600      	movs	r6, #0
 800a058:	341a      	adds	r4, #26
 800a05a:	42b5      	cmp	r5, r6
 800a05c:	d11a      	bne.n	800a094 <_printf_common+0xc8>
 800a05e:	2000      	movs	r0, #0
 800a060:	e008      	b.n	800a074 <_printf_common+0xa8>
 800a062:	2301      	movs	r3, #1
 800a064:	4652      	mov	r2, sl
 800a066:	4649      	mov	r1, r9
 800a068:	4638      	mov	r0, r7
 800a06a:	47c0      	blx	r8
 800a06c:	3001      	adds	r0, #1
 800a06e:	d103      	bne.n	800a078 <_printf_common+0xac>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	3501      	adds	r5, #1
 800a07a:	e7c6      	b.n	800a00a <_printf_common+0x3e>
 800a07c:	18e1      	adds	r1, r4, r3
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	2030      	movs	r0, #48	; 0x30
 800a082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a086:	4422      	add	r2, r4
 800a088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a08c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a090:	3302      	adds	r3, #2
 800a092:	e7c7      	b.n	800a024 <_printf_common+0x58>
 800a094:	2301      	movs	r3, #1
 800a096:	4622      	mov	r2, r4
 800a098:	4649      	mov	r1, r9
 800a09a:	4638      	mov	r0, r7
 800a09c:	47c0      	blx	r8
 800a09e:	3001      	adds	r0, #1
 800a0a0:	d0e6      	beq.n	800a070 <_printf_common+0xa4>
 800a0a2:	3601      	adds	r6, #1
 800a0a4:	e7d9      	b.n	800a05a <_printf_common+0x8e>
	...

0800a0a8 <_printf_i>:
 800a0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	7e0f      	ldrb	r7, [r1, #24]
 800a0ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0b0:	2f78      	cmp	r7, #120	; 0x78
 800a0b2:	4691      	mov	r9, r2
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	469a      	mov	sl, r3
 800a0ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0be:	d807      	bhi.n	800a0d0 <_printf_i+0x28>
 800a0c0:	2f62      	cmp	r7, #98	; 0x62
 800a0c2:	d80a      	bhi.n	800a0da <_printf_i+0x32>
 800a0c4:	2f00      	cmp	r7, #0
 800a0c6:	f000 80d8 	beq.w	800a27a <_printf_i+0x1d2>
 800a0ca:	2f58      	cmp	r7, #88	; 0x58
 800a0cc:	f000 80a3 	beq.w	800a216 <_printf_i+0x16e>
 800a0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0d8:	e03a      	b.n	800a150 <_printf_i+0xa8>
 800a0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0de:	2b15      	cmp	r3, #21
 800a0e0:	d8f6      	bhi.n	800a0d0 <_printf_i+0x28>
 800a0e2:	a101      	add	r1, pc, #4	; (adr r1, 800a0e8 <_printf_i+0x40>)
 800a0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0e8:	0800a141 	.word	0x0800a141
 800a0ec:	0800a155 	.word	0x0800a155
 800a0f0:	0800a0d1 	.word	0x0800a0d1
 800a0f4:	0800a0d1 	.word	0x0800a0d1
 800a0f8:	0800a0d1 	.word	0x0800a0d1
 800a0fc:	0800a0d1 	.word	0x0800a0d1
 800a100:	0800a155 	.word	0x0800a155
 800a104:	0800a0d1 	.word	0x0800a0d1
 800a108:	0800a0d1 	.word	0x0800a0d1
 800a10c:	0800a0d1 	.word	0x0800a0d1
 800a110:	0800a0d1 	.word	0x0800a0d1
 800a114:	0800a261 	.word	0x0800a261
 800a118:	0800a185 	.word	0x0800a185
 800a11c:	0800a243 	.word	0x0800a243
 800a120:	0800a0d1 	.word	0x0800a0d1
 800a124:	0800a0d1 	.word	0x0800a0d1
 800a128:	0800a283 	.word	0x0800a283
 800a12c:	0800a0d1 	.word	0x0800a0d1
 800a130:	0800a185 	.word	0x0800a185
 800a134:	0800a0d1 	.word	0x0800a0d1
 800a138:	0800a0d1 	.word	0x0800a0d1
 800a13c:	0800a24b 	.word	0x0800a24b
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	1d1a      	adds	r2, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	602a      	str	r2, [r5, #0]
 800a148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a150:	2301      	movs	r3, #1
 800a152:	e0a3      	b.n	800a29c <_printf_i+0x1f4>
 800a154:	6820      	ldr	r0, [r4, #0]
 800a156:	6829      	ldr	r1, [r5, #0]
 800a158:	0606      	lsls	r6, r0, #24
 800a15a:	f101 0304 	add.w	r3, r1, #4
 800a15e:	d50a      	bpl.n	800a176 <_printf_i+0xce>
 800a160:	680e      	ldr	r6, [r1, #0]
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	2e00      	cmp	r6, #0
 800a166:	da03      	bge.n	800a170 <_printf_i+0xc8>
 800a168:	232d      	movs	r3, #45	; 0x2d
 800a16a:	4276      	negs	r6, r6
 800a16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a170:	485e      	ldr	r0, [pc, #376]	; (800a2ec <_printf_i+0x244>)
 800a172:	230a      	movs	r3, #10
 800a174:	e019      	b.n	800a1aa <_printf_i+0x102>
 800a176:	680e      	ldr	r6, [r1, #0]
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a17e:	bf18      	it	ne
 800a180:	b236      	sxthne	r6, r6
 800a182:	e7ef      	b.n	800a164 <_printf_i+0xbc>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	1d19      	adds	r1, r3, #4
 800a18a:	6029      	str	r1, [r5, #0]
 800a18c:	0601      	lsls	r1, r0, #24
 800a18e:	d501      	bpl.n	800a194 <_printf_i+0xec>
 800a190:	681e      	ldr	r6, [r3, #0]
 800a192:	e002      	b.n	800a19a <_printf_i+0xf2>
 800a194:	0646      	lsls	r6, r0, #25
 800a196:	d5fb      	bpl.n	800a190 <_printf_i+0xe8>
 800a198:	881e      	ldrh	r6, [r3, #0]
 800a19a:	4854      	ldr	r0, [pc, #336]	; (800a2ec <_printf_i+0x244>)
 800a19c:	2f6f      	cmp	r7, #111	; 0x6f
 800a19e:	bf0c      	ite	eq
 800a1a0:	2308      	moveq	r3, #8
 800a1a2:	230a      	movne	r3, #10
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1aa:	6865      	ldr	r5, [r4, #4]
 800a1ac:	60a5      	str	r5, [r4, #8]
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	bfa2      	ittt	ge
 800a1b2:	6821      	ldrge	r1, [r4, #0]
 800a1b4:	f021 0104 	bicge.w	r1, r1, #4
 800a1b8:	6021      	strge	r1, [r4, #0]
 800a1ba:	b90e      	cbnz	r6, 800a1c0 <_printf_i+0x118>
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	d04d      	beq.n	800a25c <_printf_i+0x1b4>
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1ca:	5dc7      	ldrb	r7, [r0, r7]
 800a1cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1d0:	4637      	mov	r7, r6
 800a1d2:	42bb      	cmp	r3, r7
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	d9f4      	bls.n	800a1c2 <_printf_i+0x11a>
 800a1d8:	2b08      	cmp	r3, #8
 800a1da:	d10b      	bne.n	800a1f4 <_printf_i+0x14c>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	07de      	lsls	r6, r3, #31
 800a1e0:	d508      	bpl.n	800a1f4 <_printf_i+0x14c>
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	6861      	ldr	r1, [r4, #4]
 800a1e6:	4299      	cmp	r1, r3
 800a1e8:	bfde      	ittt	le
 800a1ea:	2330      	movle	r3, #48	; 0x30
 800a1ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1f4:	1b52      	subs	r2, r2, r5
 800a1f6:	6122      	str	r2, [r4, #16]
 800a1f8:	f8cd a000 	str.w	sl, [sp]
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	aa03      	add	r2, sp, #12
 800a200:	4621      	mov	r1, r4
 800a202:	4640      	mov	r0, r8
 800a204:	f7ff fee2 	bl	8009fcc <_printf_common>
 800a208:	3001      	adds	r0, #1
 800a20a:	d14c      	bne.n	800a2a6 <_printf_i+0x1fe>
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	b004      	add	sp, #16
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a216:	4835      	ldr	r0, [pc, #212]	; (800a2ec <_printf_i+0x244>)
 800a218:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a21c:	6829      	ldr	r1, [r5, #0]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	f851 6b04 	ldr.w	r6, [r1], #4
 800a224:	6029      	str	r1, [r5, #0]
 800a226:	061d      	lsls	r5, r3, #24
 800a228:	d514      	bpl.n	800a254 <_printf_i+0x1ac>
 800a22a:	07df      	lsls	r7, r3, #31
 800a22c:	bf44      	itt	mi
 800a22e:	f043 0320 	orrmi.w	r3, r3, #32
 800a232:	6023      	strmi	r3, [r4, #0]
 800a234:	b91e      	cbnz	r6, 800a23e <_printf_i+0x196>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	f023 0320 	bic.w	r3, r3, #32
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	2310      	movs	r3, #16
 800a240:	e7b0      	b.n	800a1a4 <_printf_i+0xfc>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	f043 0320 	orr.w	r3, r3, #32
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	2378      	movs	r3, #120	; 0x78
 800a24c:	4828      	ldr	r0, [pc, #160]	; (800a2f0 <_printf_i+0x248>)
 800a24e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a252:	e7e3      	b.n	800a21c <_printf_i+0x174>
 800a254:	0659      	lsls	r1, r3, #25
 800a256:	bf48      	it	mi
 800a258:	b2b6      	uxthmi	r6, r6
 800a25a:	e7e6      	b.n	800a22a <_printf_i+0x182>
 800a25c:	4615      	mov	r5, r2
 800a25e:	e7bb      	b.n	800a1d8 <_printf_i+0x130>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	6826      	ldr	r6, [r4, #0]
 800a264:	6961      	ldr	r1, [r4, #20]
 800a266:	1d18      	adds	r0, r3, #4
 800a268:	6028      	str	r0, [r5, #0]
 800a26a:	0635      	lsls	r5, r6, #24
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	d501      	bpl.n	800a274 <_printf_i+0x1cc>
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	e002      	b.n	800a27a <_printf_i+0x1d2>
 800a274:	0670      	lsls	r0, r6, #25
 800a276:	d5fb      	bpl.n	800a270 <_printf_i+0x1c8>
 800a278:	8019      	strh	r1, [r3, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	4615      	mov	r5, r2
 800a280:	e7ba      	b.n	800a1f8 <_printf_i+0x150>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	1d1a      	adds	r2, r3, #4
 800a286:	602a      	str	r2, [r5, #0]
 800a288:	681d      	ldr	r5, [r3, #0]
 800a28a:	6862      	ldr	r2, [r4, #4]
 800a28c:	2100      	movs	r1, #0
 800a28e:	4628      	mov	r0, r5
 800a290:	f7f5 ffbe 	bl	8000210 <memchr>
 800a294:	b108      	cbz	r0, 800a29a <_printf_i+0x1f2>
 800a296:	1b40      	subs	r0, r0, r5
 800a298:	6060      	str	r0, [r4, #4]
 800a29a:	6863      	ldr	r3, [r4, #4]
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a4:	e7a8      	b.n	800a1f8 <_printf_i+0x150>
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	47d0      	blx	sl
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d0ab      	beq.n	800a20c <_printf_i+0x164>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	079b      	lsls	r3, r3, #30
 800a2b8:	d413      	bmi.n	800a2e2 <_printf_i+0x23a>
 800a2ba:	68e0      	ldr	r0, [r4, #12]
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	4298      	cmp	r0, r3
 800a2c0:	bfb8      	it	lt
 800a2c2:	4618      	movlt	r0, r3
 800a2c4:	e7a4      	b.n	800a210 <_printf_i+0x168>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	47d0      	blx	sl
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d09b      	beq.n	800a20c <_printf_i+0x164>
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	68e3      	ldr	r3, [r4, #12]
 800a2d8:	9903      	ldr	r1, [sp, #12]
 800a2da:	1a5b      	subs	r3, r3, r1
 800a2dc:	42ab      	cmp	r3, r5
 800a2de:	dcf2      	bgt.n	800a2c6 <_printf_i+0x21e>
 800a2e0:	e7eb      	b.n	800a2ba <_printf_i+0x212>
 800a2e2:	2500      	movs	r5, #0
 800a2e4:	f104 0619 	add.w	r6, r4, #25
 800a2e8:	e7f5      	b.n	800a2d6 <_printf_i+0x22e>
 800a2ea:	bf00      	nop
 800a2ec:	0800f928 	.word	0x0800f928
 800a2f0:	0800f939 	.word	0x0800f939

0800a2f4 <_sbrk_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_sbrk_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f005 f858 	bl	800f3b4 <_sbrk>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_sbrk_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_sbrk_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20011d8c 	.word	0x20011d8c

0800a314 <siprintf>:
 800a314:	b40e      	push	{r1, r2, r3}
 800a316:	b500      	push	{lr}
 800a318:	b09c      	sub	sp, #112	; 0x70
 800a31a:	ab1d      	add	r3, sp, #116	; 0x74
 800a31c:	9002      	str	r0, [sp, #8]
 800a31e:	9006      	str	r0, [sp, #24]
 800a320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a324:	4809      	ldr	r0, [pc, #36]	; (800a34c <siprintf+0x38>)
 800a326:	9107      	str	r1, [sp, #28]
 800a328:	9104      	str	r1, [sp, #16]
 800a32a:	4909      	ldr	r1, [pc, #36]	; (800a350 <siprintf+0x3c>)
 800a32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a330:	9105      	str	r1, [sp, #20]
 800a332:	6800      	ldr	r0, [r0, #0]
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	a902      	add	r1, sp, #8
 800a338:	f001 fb42 	bl	800b9c0 <_svfiprintf_r>
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	b01c      	add	sp, #112	; 0x70
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	20000014 	.word	0x20000014
 800a350:	ffff0208 	.word	0xffff0208

0800a354 <siscanf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	b510      	push	{r4, lr}
 800a358:	b09f      	sub	sp, #124	; 0x7c
 800a35a:	ac21      	add	r4, sp, #132	; 0x84
 800a35c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a360:	f854 2b04 	ldr.w	r2, [r4], #4
 800a364:	9201      	str	r2, [sp, #4]
 800a366:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a36a:	9004      	str	r0, [sp, #16]
 800a36c:	9008      	str	r0, [sp, #32]
 800a36e:	f7f5 ff41 	bl	80001f4 <strlen>
 800a372:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <siscanf+0x50>)
 800a374:	9005      	str	r0, [sp, #20]
 800a376:	9009      	str	r0, [sp, #36]	; 0x24
 800a378:	930d      	str	r3, [sp, #52]	; 0x34
 800a37a:	480b      	ldr	r0, [pc, #44]	; (800a3a8 <siscanf+0x54>)
 800a37c:	9a01      	ldr	r2, [sp, #4]
 800a37e:	6800      	ldr	r0, [r0, #0]
 800a380:	9403      	str	r4, [sp, #12]
 800a382:	2300      	movs	r3, #0
 800a384:	9311      	str	r3, [sp, #68]	; 0x44
 800a386:	9316      	str	r3, [sp, #88]	; 0x58
 800a388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a38c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a390:	a904      	add	r1, sp, #16
 800a392:	4623      	mov	r3, r4
 800a394:	f001 fc6e 	bl	800bc74 <__ssvfiscanf_r>
 800a398:	b01f      	add	sp, #124	; 0x7c
 800a39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a39e:	b003      	add	sp, #12
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	0800a3cf 	.word	0x0800a3cf
 800a3a8:	20000014 	.word	0x20000014

0800a3ac <__sread>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b4:	f001 ff28 	bl	800c208 <_read_r>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	bfab      	itete	ge
 800a3bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3be:	89a3      	ldrhlt	r3, [r4, #12]
 800a3c0:	181b      	addge	r3, r3, r0
 800a3c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3c6:	bfac      	ite	ge
 800a3c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ca:	81a3      	strhlt	r3, [r4, #12]
 800a3cc:	bd10      	pop	{r4, pc}

0800a3ce <__seofread>:
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	4770      	bx	lr

0800a3d2 <__swrite>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	05db      	lsls	r3, r3, #23
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	d505      	bpl.n	800a3f0 <__swrite+0x1e>
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f000 fec6 	bl	800b17c <_lseek_r>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	f000 b817 	b.w	800a438 <_write_r>

0800a40a <__sseek>:
 800a40a:	b510      	push	{r4, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 feb3 	bl	800b17c <_lseek_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	bf15      	itete	ne
 800a41c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a41e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a426:	81a3      	strheq	r3, [r4, #12]
 800a428:	bf18      	it	ne
 800a42a:	81a3      	strhne	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__sclose>:
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 b813 	b.w	800a45c <_close_r>
	...

0800a438 <_write_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	; (800a458 <_write_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f8 ffdd 	bl	8003406 <_write>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_write_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_write_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20011d8c 	.word	0x20011d8c

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f8 ffe9 	bl	800343e <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20011d8c 	.word	0x20011d8c

0800a47c <quorem>:
 800a47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	6903      	ldr	r3, [r0, #16]
 800a482:	690c      	ldr	r4, [r1, #16]
 800a484:	42a3      	cmp	r3, r4
 800a486:	4607      	mov	r7, r0
 800a488:	f2c0 8081 	blt.w	800a58e <quorem+0x112>
 800a48c:	3c01      	subs	r4, #1
 800a48e:	f101 0814 	add.w	r8, r1, #20
 800a492:	f100 0514 	add.w	r5, r0, #20
 800a496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4b4:	d331      	bcc.n	800a51a <quorem+0x9e>
 800a4b6:	f04f 0e00 	mov.w	lr, #0
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	46ac      	mov	ip, r5
 800a4be:	46f2      	mov	sl, lr
 800a4c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4c4:	b293      	uxth	r3, r2
 800a4c6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4d4:	f8dc a000 	ldr.w	sl, [ip]
 800a4d8:	0c12      	lsrs	r2, r2, #16
 800a4da:	fa13 f38a 	uxtah	r3, r3, sl
 800a4de:	fb06 e202 	mla	r2, r6, r2, lr
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	9b00      	ldr	r3, [sp, #0]
 800a4e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4ea:	b292      	uxth	r2, r2
 800a4ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4f8:	4581      	cmp	r9, r0
 800a4fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4fe:	f84c 3b04 	str.w	r3, [ip], #4
 800a502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a506:	d2db      	bcs.n	800a4c0 <quorem+0x44>
 800a508:	f855 300b 	ldr.w	r3, [r5, fp]
 800a50c:	b92b      	cbnz	r3, 800a51a <quorem+0x9e>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	3b04      	subs	r3, #4
 800a512:	429d      	cmp	r5, r3
 800a514:	461a      	mov	r2, r3
 800a516:	d32e      	bcc.n	800a576 <quorem+0xfa>
 800a518:	613c      	str	r4, [r7, #16]
 800a51a:	4638      	mov	r0, r7
 800a51c:	f001 f8dc 	bl	800b6d8 <__mcmp>
 800a520:	2800      	cmp	r0, #0
 800a522:	db24      	blt.n	800a56e <quorem+0xf2>
 800a524:	3601      	adds	r6, #1
 800a526:	4628      	mov	r0, r5
 800a528:	f04f 0c00 	mov.w	ip, #0
 800a52c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a530:	f8d0 e000 	ldr.w	lr, [r0]
 800a534:	b293      	uxth	r3, r2
 800a536:	ebac 0303 	sub.w	r3, ip, r3
 800a53a:	0c12      	lsrs	r2, r2, #16
 800a53c:	fa13 f38e 	uxtah	r3, r3, lr
 800a540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a548:	b29b      	uxth	r3, r3
 800a54a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a54e:	45c1      	cmp	r9, r8
 800a550:	f840 3b04 	str.w	r3, [r0], #4
 800a554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a558:	d2e8      	bcs.n	800a52c <quorem+0xb0>
 800a55a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a562:	b922      	cbnz	r2, 800a56e <quorem+0xf2>
 800a564:	3b04      	subs	r3, #4
 800a566:	429d      	cmp	r5, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	d30a      	bcc.n	800a582 <quorem+0x106>
 800a56c:	613c      	str	r4, [r7, #16]
 800a56e:	4630      	mov	r0, r6
 800a570:	b003      	add	sp, #12
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	3b04      	subs	r3, #4
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	d1cc      	bne.n	800a518 <quorem+0x9c>
 800a57e:	3c01      	subs	r4, #1
 800a580:	e7c7      	b.n	800a512 <quorem+0x96>
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	3b04      	subs	r3, #4
 800a586:	2a00      	cmp	r2, #0
 800a588:	d1f0      	bne.n	800a56c <quorem+0xf0>
 800a58a:	3c01      	subs	r4, #1
 800a58c:	e7eb      	b.n	800a566 <quorem+0xea>
 800a58e:	2000      	movs	r0, #0
 800a590:	e7ee      	b.n	800a570 <quorem+0xf4>
 800a592:	0000      	movs	r0, r0
 800a594:	0000      	movs	r0, r0
	...

0800a598 <_dtoa_r>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	ed2d 8b04 	vpush	{d8-d9}
 800a5a0:	ec57 6b10 	vmov	r6, r7, d0
 800a5a4:	b093      	sub	sp, #76	; 0x4c
 800a5a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5ac:	9106      	str	r1, [sp, #24]
 800a5ae:	ee10 aa10 	vmov	sl, s0
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b8:	46bb      	mov	fp, r7
 800a5ba:	b975      	cbnz	r5, 800a5da <_dtoa_r+0x42>
 800a5bc:	2010      	movs	r0, #16
 800a5be:	f7ff f93f 	bl	8009840 <malloc>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5c6:	b920      	cbnz	r0, 800a5d2 <_dtoa_r+0x3a>
 800a5c8:	4ba7      	ldr	r3, [pc, #668]	; (800a868 <_dtoa_r+0x2d0>)
 800a5ca:	21ea      	movs	r1, #234	; 0xea
 800a5cc:	48a7      	ldr	r0, [pc, #668]	; (800a86c <_dtoa_r+0x2d4>)
 800a5ce:	f001 ff97 	bl	800c500 <__assert_func>
 800a5d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5d6:	6005      	str	r5, [r0, #0]
 800a5d8:	60c5      	str	r5, [r0, #12]
 800a5da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5dc:	6819      	ldr	r1, [r3, #0]
 800a5de:	b151      	cbz	r1, 800a5f6 <_dtoa_r+0x5e>
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	604a      	str	r2, [r1, #4]
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	4093      	lsls	r3, r2
 800a5e8:	608b      	str	r3, [r1, #8]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fe32 	bl	800b254 <_Bfree>
 800a5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	1e3b      	subs	r3, r7, #0
 800a5f8:	bfaa      	itet	ge
 800a5fa:	2300      	movge	r3, #0
 800a5fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a600:	f8c8 3000 	strge.w	r3, [r8]
 800a604:	4b9a      	ldr	r3, [pc, #616]	; (800a870 <_dtoa_r+0x2d8>)
 800a606:	bfbc      	itt	lt
 800a608:	2201      	movlt	r2, #1
 800a60a:	f8c8 2000 	strlt.w	r2, [r8]
 800a60e:	ea33 030b 	bics.w	r3, r3, fp
 800a612:	d11b      	bne.n	800a64c <_dtoa_r+0xb4>
 800a614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a616:	f242 730f 	movw	r3, #9999	; 0x270f
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a620:	4333      	orrs	r3, r6
 800a622:	f000 8592 	beq.w	800b14a <_dtoa_r+0xbb2>
 800a626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a628:	b963      	cbnz	r3, 800a644 <_dtoa_r+0xac>
 800a62a:	4b92      	ldr	r3, [pc, #584]	; (800a874 <_dtoa_r+0x2dc>)
 800a62c:	e022      	b.n	800a674 <_dtoa_r+0xdc>
 800a62e:	4b92      	ldr	r3, [pc, #584]	; (800a878 <_dtoa_r+0x2e0>)
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	3308      	adds	r3, #8
 800a634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	9801      	ldr	r0, [sp, #4]
 800a63a:	b013      	add	sp, #76	; 0x4c
 800a63c:	ecbd 8b04 	vpop	{d8-d9}
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	4b8b      	ldr	r3, [pc, #556]	; (800a874 <_dtoa_r+0x2dc>)
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	3303      	adds	r3, #3
 800a64a:	e7f3      	b.n	800a634 <_dtoa_r+0x9c>
 800a64c:	2200      	movs	r2, #0
 800a64e:	2300      	movs	r3, #0
 800a650:	4650      	mov	r0, sl
 800a652:	4659      	mov	r1, fp
 800a654:	f7f6 fa50 	bl	8000af8 <__aeabi_dcmpeq>
 800a658:	ec4b ab19 	vmov	d9, sl, fp
 800a65c:	4680      	mov	r8, r0
 800a65e:	b158      	cbz	r0, 800a678 <_dtoa_r+0xe0>
 800a660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a662:	2301      	movs	r3, #1
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 856b 	beq.w	800b144 <_dtoa_r+0xbac>
 800a66e:	4883      	ldr	r0, [pc, #524]	; (800a87c <_dtoa_r+0x2e4>)
 800a670:	6018      	str	r0, [r3, #0]
 800a672:	1e43      	subs	r3, r0, #1
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	e7df      	b.n	800a638 <_dtoa_r+0xa0>
 800a678:	ec4b ab10 	vmov	d0, sl, fp
 800a67c:	aa10      	add	r2, sp, #64	; 0x40
 800a67e:	a911      	add	r1, sp, #68	; 0x44
 800a680:	4620      	mov	r0, r4
 800a682:	f001 f8cf 	bl	800b824 <__d2b>
 800a686:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a68a:	ee08 0a10 	vmov	s16, r0
 800a68e:	2d00      	cmp	r5, #0
 800a690:	f000 8084 	beq.w	800a79c <_dtoa_r+0x204>
 800a694:	ee19 3a90 	vmov	r3, s19
 800a698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a69c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6a0:	4656      	mov	r6, sl
 800a6a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6ae:	4b74      	ldr	r3, [pc, #464]	; (800a880 <_dtoa_r+0x2e8>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fdff 	bl	80002b8 <__aeabi_dsub>
 800a6ba:	a365      	add	r3, pc, #404	; (adr r3, 800a850 <_dtoa_r+0x2b8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 ffb2 	bl	8000628 <__aeabi_dmul>
 800a6c4:	a364      	add	r3, pc, #400	; (adr r3, 800a858 <_dtoa_r+0x2c0>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f5 fdf7 	bl	80002bc <__adddf3>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	460f      	mov	r7, r1
 800a6d4:	f7f5 ff3e 	bl	8000554 <__aeabi_i2d>
 800a6d8:	a361      	add	r3, pc, #388	; (adr r3, 800a860 <_dtoa_r+0x2c8>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ffa3 	bl	8000628 <__aeabi_dmul>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	f7f5 fde7 	bl	80002bc <__adddf3>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	f7f6 fa49 	bl	8000b88 <__aeabi_d2iz>
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	9000      	str	r0, [sp, #0]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f6 fa04 	bl	8000b0c <__aeabi_dcmplt>
 800a704:	b150      	cbz	r0, 800a71c <_dtoa_r+0x184>
 800a706:	9800      	ldr	r0, [sp, #0]
 800a708:	f7f5 ff24 	bl	8000554 <__aeabi_i2d>
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	f7f6 f9f2 	bl	8000af8 <__aeabi_dcmpeq>
 800a714:	b910      	cbnz	r0, 800a71c <_dtoa_r+0x184>
 800a716:	9b00      	ldr	r3, [sp, #0]
 800a718:	3b01      	subs	r3, #1
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	9b00      	ldr	r3, [sp, #0]
 800a71e:	2b16      	cmp	r3, #22
 800a720:	d85a      	bhi.n	800a7d8 <_dtoa_r+0x240>
 800a722:	9a00      	ldr	r2, [sp, #0]
 800a724:	4b57      	ldr	r3, [pc, #348]	; (800a884 <_dtoa_r+0x2ec>)
 800a726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	ec51 0b19 	vmov	r0, r1, d9
 800a732:	f7f6 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	d050      	beq.n	800a7dc <_dtoa_r+0x244>
 800a73a:	9b00      	ldr	r3, [sp, #0]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	930b      	str	r3, [sp, #44]	; 0x2c
 800a744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a746:	1b5d      	subs	r5, r3, r5
 800a748:	1e6b      	subs	r3, r5, #1
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	bf45      	ittet	mi
 800a74e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a752:	9304      	strmi	r3, [sp, #16]
 800a754:	2300      	movpl	r3, #0
 800a756:	2300      	movmi	r3, #0
 800a758:	bf4c      	ite	mi
 800a75a:	9305      	strmi	r3, [sp, #20]
 800a75c:	9304      	strpl	r3, [sp, #16]
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	db3d      	blt.n	800a7e0 <_dtoa_r+0x248>
 800a764:	9b05      	ldr	r3, [sp, #20]
 800a766:	9a00      	ldr	r2, [sp, #0]
 800a768:	920a      	str	r2, [sp, #40]	; 0x28
 800a76a:	4413      	add	r3, r2
 800a76c:	9305      	str	r3, [sp, #20]
 800a76e:	2300      	movs	r3, #0
 800a770:	9307      	str	r3, [sp, #28]
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	2b09      	cmp	r3, #9
 800a776:	f200 8089 	bhi.w	800a88c <_dtoa_r+0x2f4>
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	bfc4      	itt	gt
 800a77e:	3b04      	subgt	r3, #4
 800a780:	9306      	strgt	r3, [sp, #24]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	f1a3 0302 	sub.w	r3, r3, #2
 800a788:	bfcc      	ite	gt
 800a78a:	2500      	movgt	r5, #0
 800a78c:	2501      	movle	r5, #1
 800a78e:	2b03      	cmp	r3, #3
 800a790:	f200 8087 	bhi.w	800a8a2 <_dtoa_r+0x30a>
 800a794:	e8df f003 	tbb	[pc, r3]
 800a798:	59383a2d 	.word	0x59383a2d
 800a79c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7a0:	441d      	add	r5, r3
 800a7a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	bfc1      	itttt	gt
 800a7aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7ba:	bfda      	itte	le
 800a7bc:	f1c3 0320 	rsble	r3, r3, #32
 800a7c0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7c4:	4318      	orrgt	r0, r3
 800a7c6:	f7f5 feb5 	bl	8000534 <__aeabi_ui2d>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7d2:	3d01      	subs	r5, #1
 800a7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7d6:	e76a      	b.n	800a6ae <_dtoa_r+0x116>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e7b2      	b.n	800a742 <_dtoa_r+0x1aa>
 800a7dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7de:	e7b1      	b.n	800a744 <_dtoa_r+0x1ac>
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	9a00      	ldr	r2, [sp, #0]
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	4253      	negs	r3, r2
 800a7ea:	9307      	str	r3, [sp, #28]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f0:	e7bf      	b.n	800a772 <_dtoa_r+0x1da>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9308      	str	r3, [sp, #32]
 800a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc55      	bgt.n	800a8a8 <_dtoa_r+0x310>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a802:	461a      	mov	r2, r3
 800a804:	9209      	str	r2, [sp, #36]	; 0x24
 800a806:	e00c      	b.n	800a822 <_dtoa_r+0x28a>
 800a808:	2301      	movs	r3, #1
 800a80a:	e7f3      	b.n	800a7f4 <_dtoa_r+0x25c>
 800a80c:	2300      	movs	r3, #0
 800a80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a810:	9308      	str	r3, [sp, #32]
 800a812:	9b00      	ldr	r3, [sp, #0]
 800a814:	4413      	add	r3, r2
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	3301      	adds	r3, #1
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	bfb8      	it	lt
 800a820:	2301      	movlt	r3, #1
 800a822:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a824:	2200      	movs	r2, #0
 800a826:	6042      	str	r2, [r0, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	f102 0614 	add.w	r6, r2, #20
 800a82e:	429e      	cmp	r6, r3
 800a830:	6841      	ldr	r1, [r0, #4]
 800a832:	d93d      	bls.n	800a8b0 <_dtoa_r+0x318>
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fccd 	bl	800b1d4 <_Balloc>
 800a83a:	9001      	str	r0, [sp, #4]
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d13b      	bne.n	800a8b8 <_dtoa_r+0x320>
 800a840:	4b11      	ldr	r3, [pc, #68]	; (800a888 <_dtoa_r+0x2f0>)
 800a842:	4602      	mov	r2, r0
 800a844:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a848:	e6c0      	b.n	800a5cc <_dtoa_r+0x34>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e7df      	b.n	800a80e <_dtoa_r+0x276>
 800a84e:	bf00      	nop
 800a850:	636f4361 	.word	0x636f4361
 800a854:	3fd287a7 	.word	0x3fd287a7
 800a858:	8b60c8b3 	.word	0x8b60c8b3
 800a85c:	3fc68a28 	.word	0x3fc68a28
 800a860:	509f79fb 	.word	0x509f79fb
 800a864:	3fd34413 	.word	0x3fd34413
 800a868:	0800f957 	.word	0x0800f957
 800a86c:	0800f96e 	.word	0x0800f96e
 800a870:	7ff00000 	.word	0x7ff00000
 800a874:	0800f953 	.word	0x0800f953
 800a878:	0800f94a 	.word	0x0800f94a
 800a87c:	0800fb4a 	.word	0x0800fb4a
 800a880:	3ff80000 	.word	0x3ff80000
 800a884:	0800fa60 	.word	0x0800fa60
 800a888:	0800f9c9 	.word	0x0800f9c9
 800a88c:	2501      	movs	r5, #1
 800a88e:	2300      	movs	r3, #0
 800a890:	9306      	str	r3, [sp, #24]
 800a892:	9508      	str	r5, [sp, #32]
 800a894:	f04f 33ff 	mov.w	r3, #4294967295
 800a898:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a89c:	2200      	movs	r2, #0
 800a89e:	2312      	movs	r3, #18
 800a8a0:	e7b0      	b.n	800a804 <_dtoa_r+0x26c>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	e7f5      	b.n	800a894 <_dtoa_r+0x2fc>
 800a8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ae:	e7b8      	b.n	800a822 <_dtoa_r+0x28a>
 800a8b0:	3101      	adds	r1, #1
 800a8b2:	6041      	str	r1, [r0, #4]
 800a8b4:	0052      	lsls	r2, r2, #1
 800a8b6:	e7b8      	b.n	800a82a <_dtoa_r+0x292>
 800a8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ba:	9a01      	ldr	r2, [sp, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	2b0e      	cmp	r3, #14
 800a8c2:	f200 809d 	bhi.w	800aa00 <_dtoa_r+0x468>
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	f000 809a 	beq.w	800aa00 <_dtoa_r+0x468>
 800a8cc:	9b00      	ldr	r3, [sp, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	dd32      	ble.n	800a938 <_dtoa_r+0x3a0>
 800a8d2:	4ab7      	ldr	r2, [pc, #732]	; (800abb0 <_dtoa_r+0x618>)
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	05d8      	lsls	r0, r3, #23
 800a8e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8e8:	d516      	bpl.n	800a918 <_dtoa_r+0x380>
 800a8ea:	4bb2      	ldr	r3, [pc, #712]	; (800abb4 <_dtoa_r+0x61c>)
 800a8ec:	ec51 0b19 	vmov	r0, r1, d9
 800a8f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8f4:	f7f5 ffc2 	bl	800087c <__aeabi_ddiv>
 800a8f8:	f007 070f 	and.w	r7, r7, #15
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	468b      	mov	fp, r1
 800a900:	2503      	movs	r5, #3
 800a902:	4eac      	ldr	r6, [pc, #688]	; (800abb4 <_dtoa_r+0x61c>)
 800a904:	b957      	cbnz	r7, 800a91c <_dtoa_r+0x384>
 800a906:	4642      	mov	r2, r8
 800a908:	464b      	mov	r3, r9
 800a90a:	4650      	mov	r0, sl
 800a90c:	4659      	mov	r1, fp
 800a90e:	f7f5 ffb5 	bl	800087c <__aeabi_ddiv>
 800a912:	4682      	mov	sl, r0
 800a914:	468b      	mov	fp, r1
 800a916:	e028      	b.n	800a96a <_dtoa_r+0x3d2>
 800a918:	2502      	movs	r5, #2
 800a91a:	e7f2      	b.n	800a902 <_dtoa_r+0x36a>
 800a91c:	07f9      	lsls	r1, r7, #31
 800a91e:	d508      	bpl.n	800a932 <_dtoa_r+0x39a>
 800a920:	4640      	mov	r0, r8
 800a922:	4649      	mov	r1, r9
 800a924:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a928:	f7f5 fe7e 	bl	8000628 <__aeabi_dmul>
 800a92c:	3501      	adds	r5, #1
 800a92e:	4680      	mov	r8, r0
 800a930:	4689      	mov	r9, r1
 800a932:	107f      	asrs	r7, r7, #1
 800a934:	3608      	adds	r6, #8
 800a936:	e7e5      	b.n	800a904 <_dtoa_r+0x36c>
 800a938:	f000 809b 	beq.w	800aa72 <_dtoa_r+0x4da>
 800a93c:	9b00      	ldr	r3, [sp, #0]
 800a93e:	4f9d      	ldr	r7, [pc, #628]	; (800abb4 <_dtoa_r+0x61c>)
 800a940:	425e      	negs	r6, r3
 800a942:	4b9b      	ldr	r3, [pc, #620]	; (800abb0 <_dtoa_r+0x618>)
 800a944:	f006 020f 	and.w	r2, r6, #15
 800a948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	ec51 0b19 	vmov	r0, r1, d9
 800a954:	f7f5 fe68 	bl	8000628 <__aeabi_dmul>
 800a958:	1136      	asrs	r6, r6, #4
 800a95a:	4682      	mov	sl, r0
 800a95c:	468b      	mov	fp, r1
 800a95e:	2300      	movs	r3, #0
 800a960:	2502      	movs	r5, #2
 800a962:	2e00      	cmp	r6, #0
 800a964:	d17a      	bne.n	800aa5c <_dtoa_r+0x4c4>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1d3      	bne.n	800a912 <_dtoa_r+0x37a>
 800a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 8082 	beq.w	800aa76 <_dtoa_r+0x4de>
 800a972:	4b91      	ldr	r3, [pc, #580]	; (800abb8 <_dtoa_r+0x620>)
 800a974:	2200      	movs	r2, #0
 800a976:	4650      	mov	r0, sl
 800a978:	4659      	mov	r1, fp
 800a97a:	f7f6 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d079      	beq.n	800aa76 <_dtoa_r+0x4de>
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d076      	beq.n	800aa76 <_dtoa_r+0x4de>
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dd36      	ble.n	800a9fc <_dtoa_r+0x464>
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	4650      	mov	r0, sl
 800a992:	4659      	mov	r1, fp
 800a994:	1e5f      	subs	r7, r3, #1
 800a996:	2200      	movs	r2, #0
 800a998:	4b88      	ldr	r3, [pc, #544]	; (800abbc <_dtoa_r+0x624>)
 800a99a:	f7f5 fe45 	bl	8000628 <__aeabi_dmul>
 800a99e:	9e02      	ldr	r6, [sp, #8]
 800a9a0:	4682      	mov	sl, r0
 800a9a2:	468b      	mov	fp, r1
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7f5 fdd4 	bl	8000554 <__aeabi_i2d>
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	465b      	mov	r3, fp
 800a9b0:	f7f5 fe3a 	bl	8000628 <__aeabi_dmul>
 800a9b4:	4b82      	ldr	r3, [pc, #520]	; (800abc0 <_dtoa_r+0x628>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f7f5 fc80 	bl	80002bc <__adddf3>
 800a9bc:	46d0      	mov	r8, sl
 800a9be:	46d9      	mov	r9, fp
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9c6:	2e00      	cmp	r6, #0
 800a9c8:	d158      	bne.n	800aa7c <_dtoa_r+0x4e4>
 800a9ca:	4b7e      	ldr	r3, [pc, #504]	; (800abc4 <_dtoa_r+0x62c>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	f7f5 fc71 	bl	80002b8 <__aeabi_dsub>
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	465b      	mov	r3, fp
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4689      	mov	r9, r1
 800a9de:	f7f6 f8b3 	bl	8000b48 <__aeabi_dcmpgt>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f040 8295 	bne.w	800af12 <_dtoa_r+0x97a>
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	f7f6 f88b 	bl	8000b0c <__aeabi_dcmplt>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f040 8289 	bne.w	800af0e <_dtoa_r+0x976>
 800a9fc:	ec5b ab19 	vmov	sl, fp, d9
 800aa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f2c0 8148 	blt.w	800ac98 <_dtoa_r+0x700>
 800aa08:	9a00      	ldr	r2, [sp, #0]
 800aa0a:	2a0e      	cmp	r2, #14
 800aa0c:	f300 8144 	bgt.w	800ac98 <_dtoa_r+0x700>
 800aa10:	4b67      	ldr	r3, [pc, #412]	; (800abb0 <_dtoa_r+0x618>)
 800aa12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f280 80d5 	bge.w	800abcc <_dtoa_r+0x634>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f300 80d1 	bgt.w	800abcc <_dtoa_r+0x634>
 800aa2a:	f040 826f 	bne.w	800af0c <_dtoa_r+0x974>
 800aa2e:	4b65      	ldr	r3, [pc, #404]	; (800abc4 <_dtoa_r+0x62c>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f5 fdf7 	bl	8000628 <__aeabi_dmul>
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	465b      	mov	r3, fp
 800aa3e:	f7f6 f879 	bl	8000b34 <__aeabi_dcmpge>
 800aa42:	9e03      	ldr	r6, [sp, #12]
 800aa44:	4637      	mov	r7, r6
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f040 8245 	bne.w	800aed6 <_dtoa_r+0x93e>
 800aa4c:	9d01      	ldr	r5, [sp, #4]
 800aa4e:	2331      	movs	r3, #49	; 0x31
 800aa50:	f805 3b01 	strb.w	r3, [r5], #1
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	3301      	adds	r3, #1
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	e240      	b.n	800aede <_dtoa_r+0x946>
 800aa5c:	07f2      	lsls	r2, r6, #31
 800aa5e:	d505      	bpl.n	800aa6c <_dtoa_r+0x4d4>
 800aa60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa64:	f7f5 fde0 	bl	8000628 <__aeabi_dmul>
 800aa68:	3501      	adds	r5, #1
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	1076      	asrs	r6, r6, #1
 800aa6e:	3708      	adds	r7, #8
 800aa70:	e777      	b.n	800a962 <_dtoa_r+0x3ca>
 800aa72:	2502      	movs	r5, #2
 800aa74:	e779      	b.n	800a96a <_dtoa_r+0x3d2>
 800aa76:	9f00      	ldr	r7, [sp, #0]
 800aa78:	9e03      	ldr	r6, [sp, #12]
 800aa7a:	e794      	b.n	800a9a6 <_dtoa_r+0x40e>
 800aa7c:	9901      	ldr	r1, [sp, #4]
 800aa7e:	4b4c      	ldr	r3, [pc, #304]	; (800abb0 <_dtoa_r+0x618>)
 800aa80:	4431      	add	r1, r6
 800aa82:	910d      	str	r1, [sp, #52]	; 0x34
 800aa84:	9908      	ldr	r1, [sp, #32]
 800aa86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa8e:	2900      	cmp	r1, #0
 800aa90:	d043      	beq.n	800ab1a <_dtoa_r+0x582>
 800aa92:	494d      	ldr	r1, [pc, #308]	; (800abc8 <_dtoa_r+0x630>)
 800aa94:	2000      	movs	r0, #0
 800aa96:	f7f5 fef1 	bl	800087c <__aeabi_ddiv>
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	f7f5 fc0b 	bl	80002b8 <__aeabi_dsub>
 800aaa2:	9d01      	ldr	r5, [sp, #4]
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7f6 f86c 	bl	8000b88 <__aeabi_d2iz>
 800aab0:	4606      	mov	r6, r0
 800aab2:	f7f5 fd4f 	bl	8000554 <__aeabi_i2d>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fbfb 	bl	80002b8 <__aeabi_dsub>
 800aac2:	3630      	adds	r6, #48	; 0x30
 800aac4:	f805 6b01 	strb.w	r6, [r5], #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	465b      	mov	r3, fp
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	f7f6 f81c 	bl	8000b0c <__aeabi_dcmplt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d163      	bne.n	800aba0 <_dtoa_r+0x608>
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	4936      	ldr	r1, [pc, #216]	; (800abb8 <_dtoa_r+0x620>)
 800aade:	2000      	movs	r0, #0
 800aae0:	f7f5 fbea 	bl	80002b8 <__aeabi_dsub>
 800aae4:	4652      	mov	r2, sl
 800aae6:	465b      	mov	r3, fp
 800aae8:	f7f6 f810 	bl	8000b0c <__aeabi_dcmplt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f040 80b5 	bne.w	800ac5c <_dtoa_r+0x6c4>
 800aaf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaf4:	429d      	cmp	r5, r3
 800aaf6:	d081      	beq.n	800a9fc <_dtoa_r+0x464>
 800aaf8:	4b30      	ldr	r3, [pc, #192]	; (800abbc <_dtoa_r+0x624>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	4650      	mov	r0, sl
 800aafe:	4659      	mov	r1, fp
 800ab00:	f7f5 fd92 	bl	8000628 <__aeabi_dmul>
 800ab04:	4b2d      	ldr	r3, [pc, #180]	; (800abbc <_dtoa_r+0x624>)
 800ab06:	4682      	mov	sl, r0
 800ab08:	468b      	mov	fp, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f7f5 fd8a 	bl	8000628 <__aeabi_dmul>
 800ab14:	4680      	mov	r8, r0
 800ab16:	4689      	mov	r9, r1
 800ab18:	e7c6      	b.n	800aaa8 <_dtoa_r+0x510>
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	4659      	mov	r1, fp
 800ab1e:	f7f5 fd83 	bl	8000628 <__aeabi_dmul>
 800ab22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab24:	9d01      	ldr	r5, [sp, #4]
 800ab26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab28:	4682      	mov	sl, r0
 800ab2a:	468b      	mov	fp, r1
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7f6 f82a 	bl	8000b88 <__aeabi_d2iz>
 800ab34:	4606      	mov	r6, r0
 800ab36:	f7f5 fd0d 	bl	8000554 <__aeabi_i2d>
 800ab3a:	3630      	adds	r6, #48	; 0x30
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4640      	mov	r0, r8
 800ab42:	4649      	mov	r1, r9
 800ab44:	f7f5 fbb8 	bl	80002b8 <__aeabi_dsub>
 800ab48:	f805 6b01 	strb.w	r6, [r5], #1
 800ab4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	4680      	mov	r8, r0
 800ab52:	4689      	mov	r9, r1
 800ab54:	f04f 0200 	mov.w	r2, #0
 800ab58:	d124      	bne.n	800aba4 <_dtoa_r+0x60c>
 800ab5a:	4b1b      	ldr	r3, [pc, #108]	; (800abc8 <_dtoa_r+0x630>)
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fbac 	bl	80002bc <__adddf3>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4640      	mov	r0, r8
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7f5 ffec 	bl	8000b48 <__aeabi_dcmpgt>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d173      	bne.n	800ac5c <_dtoa_r+0x6c4>
 800ab74:	4652      	mov	r2, sl
 800ab76:	465b      	mov	r3, fp
 800ab78:	4913      	ldr	r1, [pc, #76]	; (800abc8 <_dtoa_r+0x630>)
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	f7f5 fb9c 	bl	80002b8 <__aeabi_dsub>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4640      	mov	r0, r8
 800ab86:	4649      	mov	r1, r9
 800ab88:	f7f5 ffc0 	bl	8000b0c <__aeabi_dcmplt>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f43f af35 	beq.w	800a9fc <_dtoa_r+0x464>
 800ab92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab94:	1e6b      	subs	r3, r5, #1
 800ab96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab9c:	2b30      	cmp	r3, #48	; 0x30
 800ab9e:	d0f8      	beq.n	800ab92 <_dtoa_r+0x5fa>
 800aba0:	9700      	str	r7, [sp, #0]
 800aba2:	e049      	b.n	800ac38 <_dtoa_r+0x6a0>
 800aba4:	4b05      	ldr	r3, [pc, #20]	; (800abbc <_dtoa_r+0x624>)
 800aba6:	f7f5 fd3f 	bl	8000628 <__aeabi_dmul>
 800abaa:	4680      	mov	r8, r0
 800abac:	4689      	mov	r9, r1
 800abae:	e7bd      	b.n	800ab2c <_dtoa_r+0x594>
 800abb0:	0800fa60 	.word	0x0800fa60
 800abb4:	0800fa38 	.word	0x0800fa38
 800abb8:	3ff00000 	.word	0x3ff00000
 800abbc:	40240000 	.word	0x40240000
 800abc0:	401c0000 	.word	0x401c0000
 800abc4:	40140000 	.word	0x40140000
 800abc8:	3fe00000 	.word	0x3fe00000
 800abcc:	9d01      	ldr	r5, [sp, #4]
 800abce:	4656      	mov	r6, sl
 800abd0:	465f      	mov	r7, fp
 800abd2:	4642      	mov	r2, r8
 800abd4:	464b      	mov	r3, r9
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fe4f 	bl	800087c <__aeabi_ddiv>
 800abde:	f7f5 ffd3 	bl	8000b88 <__aeabi_d2iz>
 800abe2:	4682      	mov	sl, r0
 800abe4:	f7f5 fcb6 	bl	8000554 <__aeabi_i2d>
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	f7f5 fd1c 	bl	8000628 <__aeabi_dmul>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abfc:	f7f5 fb5c 	bl	80002b8 <__aeabi_dsub>
 800ac00:	f805 6b01 	strb.w	r6, [r5], #1
 800ac04:	9e01      	ldr	r6, [sp, #4]
 800ac06:	9f03      	ldr	r7, [sp, #12]
 800ac08:	1bae      	subs	r6, r5, r6
 800ac0a:	42b7      	cmp	r7, r6
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	d135      	bne.n	800ac7e <_dtoa_r+0x6e6>
 800ac12:	f7f5 fb53 	bl	80002bc <__adddf3>
 800ac16:	4642      	mov	r2, r8
 800ac18:	464b      	mov	r3, r9
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	f7f5 ff93 	bl	8000b48 <__aeabi_dcmpgt>
 800ac22:	b9d0      	cbnz	r0, 800ac5a <_dtoa_r+0x6c2>
 800ac24:	4642      	mov	r2, r8
 800ac26:	464b      	mov	r3, r9
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 ff64 	bl	8000af8 <__aeabi_dcmpeq>
 800ac30:	b110      	cbz	r0, 800ac38 <_dtoa_r+0x6a0>
 800ac32:	f01a 0f01 	tst.w	sl, #1
 800ac36:	d110      	bne.n	800ac5a <_dtoa_r+0x6c2>
 800ac38:	4620      	mov	r0, r4
 800ac3a:	ee18 1a10 	vmov	r1, s16
 800ac3e:	f000 fb09 	bl	800b254 <_Bfree>
 800ac42:	2300      	movs	r3, #0
 800ac44:	9800      	ldr	r0, [sp, #0]
 800ac46:	702b      	strb	r3, [r5, #0]
 800ac48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	6018      	str	r0, [r3, #0]
 800ac4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f43f acf1 	beq.w	800a638 <_dtoa_r+0xa0>
 800ac56:	601d      	str	r5, [r3, #0]
 800ac58:	e4ee      	b.n	800a638 <_dtoa_r+0xa0>
 800ac5a:	9f00      	ldr	r7, [sp, #0]
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	461d      	mov	r5, r3
 800ac60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac64:	2a39      	cmp	r2, #57	; 0x39
 800ac66:	d106      	bne.n	800ac76 <_dtoa_r+0x6de>
 800ac68:	9a01      	ldr	r2, [sp, #4]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d1f7      	bne.n	800ac5e <_dtoa_r+0x6c6>
 800ac6e:	9901      	ldr	r1, [sp, #4]
 800ac70:	2230      	movs	r2, #48	; 0x30
 800ac72:	3701      	adds	r7, #1
 800ac74:	700a      	strb	r2, [r1, #0]
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	3201      	adds	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e790      	b.n	800aba0 <_dtoa_r+0x608>
 800ac7e:	4ba6      	ldr	r3, [pc, #664]	; (800af18 <_dtoa_r+0x980>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	f7f5 fcd1 	bl	8000628 <__aeabi_dmul>
 800ac86:	2200      	movs	r2, #0
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	f7f5 ff33 	bl	8000af8 <__aeabi_dcmpeq>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d09d      	beq.n	800abd2 <_dtoa_r+0x63a>
 800ac96:	e7cf      	b.n	800ac38 <_dtoa_r+0x6a0>
 800ac98:	9a08      	ldr	r2, [sp, #32]
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	f000 80d7 	beq.w	800ae4e <_dtoa_r+0x8b6>
 800aca0:	9a06      	ldr	r2, [sp, #24]
 800aca2:	2a01      	cmp	r2, #1
 800aca4:	f300 80ba 	bgt.w	800ae1c <_dtoa_r+0x884>
 800aca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acaa:	2a00      	cmp	r2, #0
 800acac:	f000 80b2 	beq.w	800ae14 <_dtoa_r+0x87c>
 800acb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acb4:	9e07      	ldr	r6, [sp, #28]
 800acb6:	9d04      	ldr	r5, [sp, #16]
 800acb8:	9a04      	ldr	r2, [sp, #16]
 800acba:	441a      	add	r2, r3
 800acbc:	9204      	str	r2, [sp, #16]
 800acbe:	9a05      	ldr	r2, [sp, #20]
 800acc0:	2101      	movs	r1, #1
 800acc2:	441a      	add	r2, r3
 800acc4:	4620      	mov	r0, r4
 800acc6:	9205      	str	r2, [sp, #20]
 800acc8:	f000 fb7c 	bl	800b3c4 <__i2b>
 800accc:	4607      	mov	r7, r0
 800acce:	2d00      	cmp	r5, #0
 800acd0:	dd0c      	ble.n	800acec <_dtoa_r+0x754>
 800acd2:	9b05      	ldr	r3, [sp, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dd09      	ble.n	800acec <_dtoa_r+0x754>
 800acd8:	42ab      	cmp	r3, r5
 800acda:	9a04      	ldr	r2, [sp, #16]
 800acdc:	bfa8      	it	ge
 800acde:	462b      	movge	r3, r5
 800ace0:	1ad2      	subs	r2, r2, r3
 800ace2:	9204      	str	r2, [sp, #16]
 800ace4:	9a05      	ldr	r2, [sp, #20]
 800ace6:	1aed      	subs	r5, r5, r3
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	9305      	str	r3, [sp, #20]
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	b31b      	cbz	r3, 800ad38 <_dtoa_r+0x7a0>
 800acf0:	9b08      	ldr	r3, [sp, #32]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 80af 	beq.w	800ae56 <_dtoa_r+0x8be>
 800acf8:	2e00      	cmp	r6, #0
 800acfa:	dd13      	ble.n	800ad24 <_dtoa_r+0x78c>
 800acfc:	4639      	mov	r1, r7
 800acfe:	4632      	mov	r2, r6
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fc1f 	bl	800b544 <__pow5mult>
 800ad06:	ee18 2a10 	vmov	r2, s16
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f000 fb6e 	bl	800b3f0 <__multiply>
 800ad14:	ee18 1a10 	vmov	r1, s16
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fa9a 	bl	800b254 <_Bfree>
 800ad20:	ee08 8a10 	vmov	s16, r8
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	1b9a      	subs	r2, r3, r6
 800ad28:	d006      	beq.n	800ad38 <_dtoa_r+0x7a0>
 800ad2a:	ee18 1a10 	vmov	r1, s16
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 fc08 	bl	800b544 <__pow5mult>
 800ad34:	ee08 0a10 	vmov	s16, r0
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fb42 	bl	800b3c4 <__i2b>
 800ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	4606      	mov	r6, r0
 800ad46:	f340 8088 	ble.w	800ae5a <_dtoa_r+0x8c2>
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fbf8 	bl	800b544 <__pow5mult>
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	4606      	mov	r6, r0
 800ad5a:	f340 8081 	ble.w	800ae60 <_dtoa_r+0x8c8>
 800ad5e:	f04f 0800 	mov.w	r8, #0
 800ad62:	6933      	ldr	r3, [r6, #16]
 800ad64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad68:	6918      	ldr	r0, [r3, #16]
 800ad6a:	f000 fadb 	bl	800b324 <__hi0bits>
 800ad6e:	f1c0 0020 	rsb	r0, r0, #32
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	4418      	add	r0, r3
 800ad76:	f010 001f 	ands.w	r0, r0, #31
 800ad7a:	f000 8092 	beq.w	800aea2 <_dtoa_r+0x90a>
 800ad7e:	f1c0 0320 	rsb	r3, r0, #32
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	f340 808a 	ble.w	800ae9c <_dtoa_r+0x904>
 800ad88:	f1c0 001c 	rsb	r0, r0, #28
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	4403      	add	r3, r0
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	4403      	add	r3, r0
 800ad96:	4405      	add	r5, r0
 800ad98:	9305      	str	r3, [sp, #20]
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dd07      	ble.n	800adb0 <_dtoa_r+0x818>
 800ada0:	ee18 1a10 	vmov	r1, s16
 800ada4:	461a      	mov	r2, r3
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fc26 	bl	800b5f8 <__lshift>
 800adac:	ee08 0a10 	vmov	s16, r0
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dd05      	ble.n	800adc2 <_dtoa_r+0x82a>
 800adb6:	4631      	mov	r1, r6
 800adb8:	461a      	mov	r2, r3
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fc1c 	bl	800b5f8 <__lshift>
 800adc0:	4606      	mov	r6, r0
 800adc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d06e      	beq.n	800aea6 <_dtoa_r+0x90e>
 800adc8:	ee18 0a10 	vmov	r0, s16
 800adcc:	4631      	mov	r1, r6
 800adce:	f000 fc83 	bl	800b6d8 <__mcmp>
 800add2:	2800      	cmp	r0, #0
 800add4:	da67      	bge.n	800aea6 <_dtoa_r+0x90e>
 800add6:	9b00      	ldr	r3, [sp, #0]
 800add8:	3b01      	subs	r3, #1
 800adda:	ee18 1a10 	vmov	r1, s16
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	220a      	movs	r2, #10
 800ade2:	2300      	movs	r3, #0
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 fa57 	bl	800b298 <__multadd>
 800adea:	9b08      	ldr	r3, [sp, #32]
 800adec:	ee08 0a10 	vmov	s16, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 81b1 	beq.w	800b158 <_dtoa_r+0xbc0>
 800adf6:	2300      	movs	r3, #0
 800adf8:	4639      	mov	r1, r7
 800adfa:	220a      	movs	r2, #10
 800adfc:	4620      	mov	r0, r4
 800adfe:	f000 fa4b 	bl	800b298 <__multadd>
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	4607      	mov	r7, r0
 800ae08:	f300 808e 	bgt.w	800af28 <_dtoa_r+0x990>
 800ae0c:	9b06      	ldr	r3, [sp, #24]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	dc51      	bgt.n	800aeb6 <_dtoa_r+0x91e>
 800ae12:	e089      	b.n	800af28 <_dtoa_r+0x990>
 800ae14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae1a:	e74b      	b.n	800acb4 <_dtoa_r+0x71c>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	1e5e      	subs	r6, r3, #1
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	42b3      	cmp	r3, r6
 800ae24:	bfbf      	itttt	lt
 800ae26:	9b07      	ldrlt	r3, [sp, #28]
 800ae28:	9607      	strlt	r6, [sp, #28]
 800ae2a:	1af2      	sublt	r2, r6, r3
 800ae2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae2e:	bfb6      	itet	lt
 800ae30:	189b      	addlt	r3, r3, r2
 800ae32:	1b9e      	subge	r6, r3, r6
 800ae34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	bfb8      	it	lt
 800ae3a:	2600      	movlt	r6, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	bfb7      	itett	lt
 800ae40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae48:	1a9d      	sublt	r5, r3, r2
 800ae4a:	2300      	movlt	r3, #0
 800ae4c:	e734      	b.n	800acb8 <_dtoa_r+0x720>
 800ae4e:	9e07      	ldr	r6, [sp, #28]
 800ae50:	9d04      	ldr	r5, [sp, #16]
 800ae52:	9f08      	ldr	r7, [sp, #32]
 800ae54:	e73b      	b.n	800acce <_dtoa_r+0x736>
 800ae56:	9a07      	ldr	r2, [sp, #28]
 800ae58:	e767      	b.n	800ad2a <_dtoa_r+0x792>
 800ae5a:	9b06      	ldr	r3, [sp, #24]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	dc18      	bgt.n	800ae92 <_dtoa_r+0x8fa>
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	d115      	bne.n	800ae92 <_dtoa_r+0x8fa>
 800ae66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae6a:	b993      	cbnz	r3, 800ae92 <_dtoa_r+0x8fa>
 800ae6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae70:	0d1b      	lsrs	r3, r3, #20
 800ae72:	051b      	lsls	r3, r3, #20
 800ae74:	b183      	cbz	r3, 800ae98 <_dtoa_r+0x900>
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	9304      	str	r3, [sp, #16]
 800ae7c:	9b05      	ldr	r3, [sp, #20]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	f04f 0801 	mov.w	r8, #1
 800ae86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f47f af6a 	bne.w	800ad62 <_dtoa_r+0x7ca>
 800ae8e:	2001      	movs	r0, #1
 800ae90:	e76f      	b.n	800ad72 <_dtoa_r+0x7da>
 800ae92:	f04f 0800 	mov.w	r8, #0
 800ae96:	e7f6      	b.n	800ae86 <_dtoa_r+0x8ee>
 800ae98:	4698      	mov	r8, r3
 800ae9a:	e7f4      	b.n	800ae86 <_dtoa_r+0x8ee>
 800ae9c:	f43f af7d 	beq.w	800ad9a <_dtoa_r+0x802>
 800aea0:	4618      	mov	r0, r3
 800aea2:	301c      	adds	r0, #28
 800aea4:	e772      	b.n	800ad8c <_dtoa_r+0x7f4>
 800aea6:	9b03      	ldr	r3, [sp, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc37      	bgt.n	800af1c <_dtoa_r+0x984>
 800aeac:	9b06      	ldr	r3, [sp, #24]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	dd34      	ble.n	800af1c <_dtoa_r+0x984>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	9302      	str	r3, [sp, #8]
 800aeb6:	9b02      	ldr	r3, [sp, #8]
 800aeb8:	b96b      	cbnz	r3, 800aed6 <_dtoa_r+0x93e>
 800aeba:	4631      	mov	r1, r6
 800aebc:	2205      	movs	r2, #5
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 f9ea 	bl	800b298 <__multadd>
 800aec4:	4601      	mov	r1, r0
 800aec6:	4606      	mov	r6, r0
 800aec8:	ee18 0a10 	vmov	r0, s16
 800aecc:	f000 fc04 	bl	800b6d8 <__mcmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f73f adbb 	bgt.w	800aa4c <_dtoa_r+0x4b4>
 800aed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed8:	9d01      	ldr	r5, [sp, #4]
 800aeda:	43db      	mvns	r3, r3
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	f04f 0800 	mov.w	r8, #0
 800aee2:	4631      	mov	r1, r6
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 f9b5 	bl	800b254 <_Bfree>
 800aeea:	2f00      	cmp	r7, #0
 800aeec:	f43f aea4 	beq.w	800ac38 <_dtoa_r+0x6a0>
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	d005      	beq.n	800af02 <_dtoa_r+0x96a>
 800aef6:	45b8      	cmp	r8, r7
 800aef8:	d003      	beq.n	800af02 <_dtoa_r+0x96a>
 800aefa:	4641      	mov	r1, r8
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 f9a9 	bl	800b254 <_Bfree>
 800af02:	4639      	mov	r1, r7
 800af04:	4620      	mov	r0, r4
 800af06:	f000 f9a5 	bl	800b254 <_Bfree>
 800af0a:	e695      	b.n	800ac38 <_dtoa_r+0x6a0>
 800af0c:	2600      	movs	r6, #0
 800af0e:	4637      	mov	r7, r6
 800af10:	e7e1      	b.n	800aed6 <_dtoa_r+0x93e>
 800af12:	9700      	str	r7, [sp, #0]
 800af14:	4637      	mov	r7, r6
 800af16:	e599      	b.n	800aa4c <_dtoa_r+0x4b4>
 800af18:	40240000 	.word	0x40240000
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 80ca 	beq.w	800b0b8 <_dtoa_r+0xb20>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	9302      	str	r3, [sp, #8]
 800af28:	2d00      	cmp	r5, #0
 800af2a:	dd05      	ble.n	800af38 <_dtoa_r+0x9a0>
 800af2c:	4639      	mov	r1, r7
 800af2e:	462a      	mov	r2, r5
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fb61 	bl	800b5f8 <__lshift>
 800af36:	4607      	mov	r7, r0
 800af38:	f1b8 0f00 	cmp.w	r8, #0
 800af3c:	d05b      	beq.n	800aff6 <_dtoa_r+0xa5e>
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	4620      	mov	r0, r4
 800af42:	f000 f947 	bl	800b1d4 <_Balloc>
 800af46:	4605      	mov	r5, r0
 800af48:	b928      	cbnz	r0, 800af56 <_dtoa_r+0x9be>
 800af4a:	4b87      	ldr	r3, [pc, #540]	; (800b168 <_dtoa_r+0xbd0>)
 800af4c:	4602      	mov	r2, r0
 800af4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af52:	f7ff bb3b 	b.w	800a5cc <_dtoa_r+0x34>
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	3202      	adds	r2, #2
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	f107 010c 	add.w	r1, r7, #12
 800af60:	300c      	adds	r0, #12
 800af62:	f000 f91d 	bl	800b1a0 <memcpy>
 800af66:	2201      	movs	r2, #1
 800af68:	4629      	mov	r1, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	f000 fb44 	bl	800b5f8 <__lshift>
 800af70:	9b01      	ldr	r3, [sp, #4]
 800af72:	f103 0901 	add.w	r9, r3, #1
 800af76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af7a:	4413      	add	r3, r2
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	f00a 0301 	and.w	r3, sl, #1
 800af82:	46b8      	mov	r8, r7
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	4607      	mov	r7, r0
 800af88:	4631      	mov	r1, r6
 800af8a:	ee18 0a10 	vmov	r0, s16
 800af8e:	f7ff fa75 	bl	800a47c <quorem>
 800af92:	4641      	mov	r1, r8
 800af94:	9002      	str	r0, [sp, #8]
 800af96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f000 fb9b 	bl	800b6d8 <__mcmp>
 800afa2:	463a      	mov	r2, r7
 800afa4:	9003      	str	r0, [sp, #12]
 800afa6:	4631      	mov	r1, r6
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fbb1 	bl	800b710 <__mdiff>
 800afae:	68c2      	ldr	r2, [r0, #12]
 800afb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afb4:	4605      	mov	r5, r0
 800afb6:	bb02      	cbnz	r2, 800affa <_dtoa_r+0xa62>
 800afb8:	4601      	mov	r1, r0
 800afba:	ee18 0a10 	vmov	r0, s16
 800afbe:	f000 fb8b 	bl	800b6d8 <__mcmp>
 800afc2:	4602      	mov	r2, r0
 800afc4:	4629      	mov	r1, r5
 800afc6:	4620      	mov	r0, r4
 800afc8:	9207      	str	r2, [sp, #28]
 800afca:	f000 f943 	bl	800b254 <_Bfree>
 800afce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afd2:	ea43 0102 	orr.w	r1, r3, r2
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	430b      	orrs	r3, r1
 800afda:	464d      	mov	r5, r9
 800afdc:	d10f      	bne.n	800affe <_dtoa_r+0xa66>
 800afde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afe2:	d02a      	beq.n	800b03a <_dtoa_r+0xaa2>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dd02      	ble.n	800aff0 <_dtoa_r+0xa58>
 800afea:	9b02      	ldr	r3, [sp, #8]
 800afec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aff0:	f88b a000 	strb.w	sl, [fp]
 800aff4:	e775      	b.n	800aee2 <_dtoa_r+0x94a>
 800aff6:	4638      	mov	r0, r7
 800aff8:	e7ba      	b.n	800af70 <_dtoa_r+0x9d8>
 800affa:	2201      	movs	r2, #1
 800affc:	e7e2      	b.n	800afc4 <_dtoa_r+0xa2c>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	db04      	blt.n	800b00e <_dtoa_r+0xa76>
 800b004:	9906      	ldr	r1, [sp, #24]
 800b006:	430b      	orrs	r3, r1
 800b008:	9904      	ldr	r1, [sp, #16]
 800b00a:	430b      	orrs	r3, r1
 800b00c:	d122      	bne.n	800b054 <_dtoa_r+0xabc>
 800b00e:	2a00      	cmp	r2, #0
 800b010:	ddee      	ble.n	800aff0 <_dtoa_r+0xa58>
 800b012:	ee18 1a10 	vmov	r1, s16
 800b016:	2201      	movs	r2, #1
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 faed 	bl	800b5f8 <__lshift>
 800b01e:	4631      	mov	r1, r6
 800b020:	ee08 0a10 	vmov	s16, r0
 800b024:	f000 fb58 	bl	800b6d8 <__mcmp>
 800b028:	2800      	cmp	r0, #0
 800b02a:	dc03      	bgt.n	800b034 <_dtoa_r+0xa9c>
 800b02c:	d1e0      	bne.n	800aff0 <_dtoa_r+0xa58>
 800b02e:	f01a 0f01 	tst.w	sl, #1
 800b032:	d0dd      	beq.n	800aff0 <_dtoa_r+0xa58>
 800b034:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b038:	d1d7      	bne.n	800afea <_dtoa_r+0xa52>
 800b03a:	2339      	movs	r3, #57	; 0x39
 800b03c:	f88b 3000 	strb.w	r3, [fp]
 800b040:	462b      	mov	r3, r5
 800b042:	461d      	mov	r5, r3
 800b044:	3b01      	subs	r3, #1
 800b046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b04a:	2a39      	cmp	r2, #57	; 0x39
 800b04c:	d071      	beq.n	800b132 <_dtoa_r+0xb9a>
 800b04e:	3201      	adds	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	e746      	b.n	800aee2 <_dtoa_r+0x94a>
 800b054:	2a00      	cmp	r2, #0
 800b056:	dd07      	ble.n	800b068 <_dtoa_r+0xad0>
 800b058:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b05c:	d0ed      	beq.n	800b03a <_dtoa_r+0xaa2>
 800b05e:	f10a 0301 	add.w	r3, sl, #1
 800b062:	f88b 3000 	strb.w	r3, [fp]
 800b066:	e73c      	b.n	800aee2 <_dtoa_r+0x94a>
 800b068:	9b05      	ldr	r3, [sp, #20]
 800b06a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b06e:	4599      	cmp	r9, r3
 800b070:	d047      	beq.n	800b102 <_dtoa_r+0xb6a>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f90c 	bl	800b298 <__multadd>
 800b080:	45b8      	cmp	r8, r7
 800b082:	ee08 0a10 	vmov	s16, r0
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	f04f 020a 	mov.w	r2, #10
 800b08e:	4641      	mov	r1, r8
 800b090:	4620      	mov	r0, r4
 800b092:	d106      	bne.n	800b0a2 <_dtoa_r+0xb0a>
 800b094:	f000 f900 	bl	800b298 <__multadd>
 800b098:	4680      	mov	r8, r0
 800b09a:	4607      	mov	r7, r0
 800b09c:	f109 0901 	add.w	r9, r9, #1
 800b0a0:	e772      	b.n	800af88 <_dtoa_r+0x9f0>
 800b0a2:	f000 f8f9 	bl	800b298 <__multadd>
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	220a      	movs	r2, #10
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f8f2 	bl	800b298 <__multadd>
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	e7f1      	b.n	800b09c <_dtoa_r+0xb04>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	9302      	str	r3, [sp, #8]
 800b0bc:	9d01      	ldr	r5, [sp, #4]
 800b0be:	ee18 0a10 	vmov	r0, s16
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	f7ff f9da 	bl	800a47c <quorem>
 800b0c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	f805 ab01 	strb.w	sl, [r5], #1
 800b0d2:	1aea      	subs	r2, r5, r3
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	dd09      	ble.n	800b0ee <_dtoa_r+0xb56>
 800b0da:	ee18 1a10 	vmov	r1, s16
 800b0de:	2300      	movs	r3, #0
 800b0e0:	220a      	movs	r2, #10
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 f8d8 	bl	800b298 <__multadd>
 800b0e8:	ee08 0a10 	vmov	s16, r0
 800b0ec:	e7e7      	b.n	800b0be <_dtoa_r+0xb26>
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bfc8      	it	gt
 800b0f4:	461d      	movgt	r5, r3
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	bfd8      	it	le
 800b0fa:	2501      	movle	r5, #1
 800b0fc:	441d      	add	r5, r3
 800b0fe:	f04f 0800 	mov.w	r8, #0
 800b102:	ee18 1a10 	vmov	r1, s16
 800b106:	2201      	movs	r2, #1
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fa75 	bl	800b5f8 <__lshift>
 800b10e:	4631      	mov	r1, r6
 800b110:	ee08 0a10 	vmov	s16, r0
 800b114:	f000 fae0 	bl	800b6d8 <__mcmp>
 800b118:	2800      	cmp	r0, #0
 800b11a:	dc91      	bgt.n	800b040 <_dtoa_r+0xaa8>
 800b11c:	d102      	bne.n	800b124 <_dtoa_r+0xb8c>
 800b11e:	f01a 0f01 	tst.w	sl, #1
 800b122:	d18d      	bne.n	800b040 <_dtoa_r+0xaa8>
 800b124:	462b      	mov	r3, r5
 800b126:	461d      	mov	r5, r3
 800b128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b12c:	2a30      	cmp	r2, #48	; 0x30
 800b12e:	d0fa      	beq.n	800b126 <_dtoa_r+0xb8e>
 800b130:	e6d7      	b.n	800aee2 <_dtoa_r+0x94a>
 800b132:	9a01      	ldr	r2, [sp, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d184      	bne.n	800b042 <_dtoa_r+0xaaa>
 800b138:	9b00      	ldr	r3, [sp, #0]
 800b13a:	3301      	adds	r3, #1
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2331      	movs	r3, #49	; 0x31
 800b140:	7013      	strb	r3, [r2, #0]
 800b142:	e6ce      	b.n	800aee2 <_dtoa_r+0x94a>
 800b144:	4b09      	ldr	r3, [pc, #36]	; (800b16c <_dtoa_r+0xbd4>)
 800b146:	f7ff ba95 	b.w	800a674 <_dtoa_r+0xdc>
 800b14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f aa6e 	bne.w	800a62e <_dtoa_r+0x96>
 800b152:	4b07      	ldr	r3, [pc, #28]	; (800b170 <_dtoa_r+0xbd8>)
 800b154:	f7ff ba8e 	b.w	800a674 <_dtoa_r+0xdc>
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dcae      	bgt.n	800b0bc <_dtoa_r+0xb24>
 800b15e:	9b06      	ldr	r3, [sp, #24]
 800b160:	2b02      	cmp	r3, #2
 800b162:	f73f aea8 	bgt.w	800aeb6 <_dtoa_r+0x91e>
 800b166:	e7a9      	b.n	800b0bc <_dtoa_r+0xb24>
 800b168:	0800f9c9 	.word	0x0800f9c9
 800b16c:	0800fb49 	.word	0x0800fb49
 800b170:	0800f94a 	.word	0x0800f94a

0800b174 <_localeconv_r>:
 800b174:	4800      	ldr	r0, [pc, #0]	; (800b178 <_localeconv_r+0x4>)
 800b176:	4770      	bx	lr
 800b178:	20000168 	.word	0x20000168

0800b17c <_lseek_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	; (800b19c <_lseek_r+0x20>)
 800b180:	4604      	mov	r4, r0
 800b182:	4608      	mov	r0, r1
 800b184:	4611      	mov	r1, r2
 800b186:	2200      	movs	r2, #0
 800b188:	602a      	str	r2, [r5, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	f7f8 f97e 	bl	800348c <_lseek>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_lseek_r+0x1e>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_lseek_r+0x1e>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20011d8c 	.word	0x20011d8c

0800b1a0 <memcpy>:
 800b1a0:	440a      	add	r2, r1
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a8:	d100      	bne.n	800b1ac <memcpy+0xc>
 800b1aa:	4770      	bx	lr
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b6:	4291      	cmp	r1, r2
 800b1b8:	d1f9      	bne.n	800b1ae <memcpy+0xe>
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <__malloc_lock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__malloc_lock+0x8>)
 800b1be:	f001 bb87 	b.w	800c8d0 <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20011d90 	.word	0x20011d90

0800b1c8 <__malloc_unlock>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__malloc_unlock+0x8>)
 800b1ca:	f001 bb82 	b.w	800c8d2 <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	20011d90 	.word	0x20011d90

0800b1d4 <_Balloc>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	b976      	cbnz	r6, 800b1fc <_Balloc+0x28>
 800b1de:	2010      	movs	r0, #16
 800b1e0:	f7fe fb2e 	bl	8009840 <malloc>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1e8:	b920      	cbnz	r0, 800b1f4 <_Balloc+0x20>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	; (800b24c <_Balloc+0x78>)
 800b1ec:	4818      	ldr	r0, [pc, #96]	; (800b250 <_Balloc+0x7c>)
 800b1ee:	2166      	movs	r1, #102	; 0x66
 800b1f0:	f001 f986 	bl	800c500 <__assert_func>
 800b1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f8:	6006      	str	r6, [r0, #0]
 800b1fa:	60c6      	str	r6, [r0, #12]
 800b1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1fe:	68f3      	ldr	r3, [r6, #12]
 800b200:	b183      	cbz	r3, 800b224 <_Balloc+0x50>
 800b202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b20a:	b9b8      	cbnz	r0, 800b23c <_Balloc+0x68>
 800b20c:	2101      	movs	r1, #1
 800b20e:	fa01 f605 	lsl.w	r6, r1, r5
 800b212:	1d72      	adds	r2, r6, #5
 800b214:	0092      	lsls	r2, r2, #2
 800b216:	4620      	mov	r0, r4
 800b218:	f000 fb60 	bl	800b8dc <_calloc_r>
 800b21c:	b160      	cbz	r0, 800b238 <_Balloc+0x64>
 800b21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b222:	e00e      	b.n	800b242 <_Balloc+0x6e>
 800b224:	2221      	movs	r2, #33	; 0x21
 800b226:	2104      	movs	r1, #4
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fb57 	bl	800b8dc <_calloc_r>
 800b22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b230:	60f0      	str	r0, [r6, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e4      	bne.n	800b202 <_Balloc+0x2e>
 800b238:	2000      	movs	r0, #0
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	6802      	ldr	r2, [r0, #0]
 800b23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b242:	2300      	movs	r3, #0
 800b244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b248:	e7f7      	b.n	800b23a <_Balloc+0x66>
 800b24a:	bf00      	nop
 800b24c:	0800f957 	.word	0x0800f957
 800b250:	0800f9da 	.word	0x0800f9da

0800b254 <_Bfree>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b258:	4605      	mov	r5, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	b976      	cbnz	r6, 800b27c <_Bfree+0x28>
 800b25e:	2010      	movs	r0, #16
 800b260:	f7fe faee 	bl	8009840 <malloc>
 800b264:	4602      	mov	r2, r0
 800b266:	6268      	str	r0, [r5, #36]	; 0x24
 800b268:	b920      	cbnz	r0, 800b274 <_Bfree+0x20>
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <_Bfree+0x3c>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <_Bfree+0x40>)
 800b26e:	218a      	movs	r1, #138	; 0x8a
 800b270:	f001 f946 	bl	800c500 <__assert_func>
 800b274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b278:	6006      	str	r6, [r0, #0]
 800b27a:	60c6      	str	r6, [r0, #12]
 800b27c:	b13c      	cbz	r4, 800b28e <_Bfree+0x3a>
 800b27e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b280:	6862      	ldr	r2, [r4, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b288:	6021      	str	r1, [r4, #0]
 800b28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	0800f957 	.word	0x0800f957
 800b294:	0800f9da 	.word	0x0800f9da

0800b298 <__multadd>:
 800b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	690d      	ldr	r5, [r1, #16]
 800b29e:	4607      	mov	r7, r0
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	461e      	mov	r6, r3
 800b2a4:	f101 0c14 	add.w	ip, r1, #20
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ae:	b299      	uxth	r1, r3
 800b2b0:	fb02 6101 	mla	r1, r2, r1, r6
 800b2b4:	0c1e      	lsrs	r6, r3, #16
 800b2b6:	0c0b      	lsrs	r3, r1, #16
 800b2b8:	fb02 3306 	mla	r3, r2, r6, r3
 800b2bc:	b289      	uxth	r1, r1
 800b2be:	3001      	adds	r0, #1
 800b2c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2c4:	4285      	cmp	r5, r0
 800b2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800b2ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ce:	dcec      	bgt.n	800b2aa <__multadd+0x12>
 800b2d0:	b30e      	cbz	r6, 800b316 <__multadd+0x7e>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	42ab      	cmp	r3, r5
 800b2d6:	dc19      	bgt.n	800b30c <__multadd+0x74>
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	4638      	mov	r0, r7
 800b2dc:	3101      	adds	r1, #1
 800b2de:	f7ff ff79 	bl	800b1d4 <_Balloc>
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	b928      	cbnz	r0, 800b2f2 <__multadd+0x5a>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <__multadd+0x84>)
 800b2ea:	480d      	ldr	r0, [pc, #52]	; (800b320 <__multadd+0x88>)
 800b2ec:	21b5      	movs	r1, #181	; 0xb5
 800b2ee:	f001 f907 	bl	800c500 <__assert_func>
 800b2f2:	6922      	ldr	r2, [r4, #16]
 800b2f4:	3202      	adds	r2, #2
 800b2f6:	f104 010c 	add.w	r1, r4, #12
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	300c      	adds	r0, #12
 800b2fe:	f7ff ff4f 	bl	800b1a0 <memcpy>
 800b302:	4621      	mov	r1, r4
 800b304:	4638      	mov	r0, r7
 800b306:	f7ff ffa5 	bl	800b254 <_Bfree>
 800b30a:	4644      	mov	r4, r8
 800b30c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b310:	3501      	adds	r5, #1
 800b312:	615e      	str	r6, [r3, #20]
 800b314:	6125      	str	r5, [r4, #16]
 800b316:	4620      	mov	r0, r4
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	0800f9c9 	.word	0x0800f9c9
 800b320:	0800f9da 	.word	0x0800f9da

0800b324 <__hi0bits>:
 800b324:	0c03      	lsrs	r3, r0, #16
 800b326:	041b      	lsls	r3, r3, #16
 800b328:	b9d3      	cbnz	r3, 800b360 <__hi0bits+0x3c>
 800b32a:	0400      	lsls	r0, r0, #16
 800b32c:	2310      	movs	r3, #16
 800b32e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b332:	bf04      	itt	eq
 800b334:	0200      	lsleq	r0, r0, #8
 800b336:	3308      	addeq	r3, #8
 800b338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b33c:	bf04      	itt	eq
 800b33e:	0100      	lsleq	r0, r0, #4
 800b340:	3304      	addeq	r3, #4
 800b342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b346:	bf04      	itt	eq
 800b348:	0080      	lsleq	r0, r0, #2
 800b34a:	3302      	addeq	r3, #2
 800b34c:	2800      	cmp	r0, #0
 800b34e:	db05      	blt.n	800b35c <__hi0bits+0x38>
 800b350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b354:	f103 0301 	add.w	r3, r3, #1
 800b358:	bf08      	it	eq
 800b35a:	2320      	moveq	r3, #32
 800b35c:	4618      	mov	r0, r3
 800b35e:	4770      	bx	lr
 800b360:	2300      	movs	r3, #0
 800b362:	e7e4      	b.n	800b32e <__hi0bits+0xa>

0800b364 <__lo0bits>:
 800b364:	6803      	ldr	r3, [r0, #0]
 800b366:	f013 0207 	ands.w	r2, r3, #7
 800b36a:	4601      	mov	r1, r0
 800b36c:	d00b      	beq.n	800b386 <__lo0bits+0x22>
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d423      	bmi.n	800b3ba <__lo0bits+0x56>
 800b372:	0798      	lsls	r0, r3, #30
 800b374:	bf49      	itett	mi
 800b376:	085b      	lsrmi	r3, r3, #1
 800b378:	089b      	lsrpl	r3, r3, #2
 800b37a:	2001      	movmi	r0, #1
 800b37c:	600b      	strmi	r3, [r1, #0]
 800b37e:	bf5c      	itt	pl
 800b380:	600b      	strpl	r3, [r1, #0]
 800b382:	2002      	movpl	r0, #2
 800b384:	4770      	bx	lr
 800b386:	b298      	uxth	r0, r3
 800b388:	b9a8      	cbnz	r0, 800b3b6 <__lo0bits+0x52>
 800b38a:	0c1b      	lsrs	r3, r3, #16
 800b38c:	2010      	movs	r0, #16
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	b90a      	cbnz	r2, 800b396 <__lo0bits+0x32>
 800b392:	3008      	adds	r0, #8
 800b394:	0a1b      	lsrs	r3, r3, #8
 800b396:	071a      	lsls	r2, r3, #28
 800b398:	bf04      	itt	eq
 800b39a:	091b      	lsreq	r3, r3, #4
 800b39c:	3004      	addeq	r0, #4
 800b39e:	079a      	lsls	r2, r3, #30
 800b3a0:	bf04      	itt	eq
 800b3a2:	089b      	lsreq	r3, r3, #2
 800b3a4:	3002      	addeq	r0, #2
 800b3a6:	07da      	lsls	r2, r3, #31
 800b3a8:	d403      	bmi.n	800b3b2 <__lo0bits+0x4e>
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	f100 0001 	add.w	r0, r0, #1
 800b3b0:	d005      	beq.n	800b3be <__lo0bits+0x5a>
 800b3b2:	600b      	str	r3, [r1, #0]
 800b3b4:	4770      	bx	lr
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	e7e9      	b.n	800b38e <__lo0bits+0x2a>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	4770      	bx	lr
 800b3be:	2020      	movs	r0, #32
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <__i2b>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	f7ff ff03 	bl	800b1d4 <_Balloc>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <__i2b+0x1a>
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <__i2b+0x24>)
 800b3d4:	4805      	ldr	r0, [pc, #20]	; (800b3ec <__i2b+0x28>)
 800b3d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3da:	f001 f891 	bl	800c500 <__assert_func>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	6144      	str	r4, [r0, #20]
 800b3e2:	6103      	str	r3, [r0, #16]
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800f9c9 	.word	0x0800f9c9
 800b3ec:	0800f9da 	.word	0x0800f9da

0800b3f0 <__multiply>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	4691      	mov	r9, r2
 800b3f6:	690a      	ldr	r2, [r1, #16]
 800b3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	bfb8      	it	lt
 800b400:	460b      	movlt	r3, r1
 800b402:	460c      	mov	r4, r1
 800b404:	bfbc      	itt	lt
 800b406:	464c      	movlt	r4, r9
 800b408:	4699      	movlt	r9, r3
 800b40a:	6927      	ldr	r7, [r4, #16]
 800b40c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	6861      	ldr	r1, [r4, #4]
 800b414:	eb07 060a 	add.w	r6, r7, sl
 800b418:	42b3      	cmp	r3, r6
 800b41a:	b085      	sub	sp, #20
 800b41c:	bfb8      	it	lt
 800b41e:	3101      	addlt	r1, #1
 800b420:	f7ff fed8 	bl	800b1d4 <_Balloc>
 800b424:	b930      	cbnz	r0, 800b434 <__multiply+0x44>
 800b426:	4602      	mov	r2, r0
 800b428:	4b44      	ldr	r3, [pc, #272]	; (800b53c <__multiply+0x14c>)
 800b42a:	4845      	ldr	r0, [pc, #276]	; (800b540 <__multiply+0x150>)
 800b42c:	f240 115d 	movw	r1, #349	; 0x15d
 800b430:	f001 f866 	bl	800c500 <__assert_func>
 800b434:	f100 0514 	add.w	r5, r0, #20
 800b438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b43c:	462b      	mov	r3, r5
 800b43e:	2200      	movs	r2, #0
 800b440:	4543      	cmp	r3, r8
 800b442:	d321      	bcc.n	800b488 <__multiply+0x98>
 800b444:	f104 0314 	add.w	r3, r4, #20
 800b448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b44c:	f109 0314 	add.w	r3, r9, #20
 800b450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b454:	9202      	str	r2, [sp, #8]
 800b456:	1b3a      	subs	r2, r7, r4
 800b458:	3a15      	subs	r2, #21
 800b45a:	f022 0203 	bic.w	r2, r2, #3
 800b45e:	3204      	adds	r2, #4
 800b460:	f104 0115 	add.w	r1, r4, #21
 800b464:	428f      	cmp	r7, r1
 800b466:	bf38      	it	cc
 800b468:	2204      	movcc	r2, #4
 800b46a:	9201      	str	r2, [sp, #4]
 800b46c:	9a02      	ldr	r2, [sp, #8]
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	429a      	cmp	r2, r3
 800b472:	d80c      	bhi.n	800b48e <__multiply+0x9e>
 800b474:	2e00      	cmp	r6, #0
 800b476:	dd03      	ble.n	800b480 <__multiply+0x90>
 800b478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d05a      	beq.n	800b536 <__multiply+0x146>
 800b480:	6106      	str	r6, [r0, #16]
 800b482:	b005      	add	sp, #20
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	f843 2b04 	str.w	r2, [r3], #4
 800b48c:	e7d8      	b.n	800b440 <__multiply+0x50>
 800b48e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b492:	f1ba 0f00 	cmp.w	sl, #0
 800b496:	d024      	beq.n	800b4e2 <__multiply+0xf2>
 800b498:	f104 0e14 	add.w	lr, r4, #20
 800b49c:	46a9      	mov	r9, r5
 800b49e:	f04f 0c00 	mov.w	ip, #0
 800b4a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4a6:	f8d9 1000 	ldr.w	r1, [r9]
 800b4aa:	fa1f fb82 	uxth.w	fp, r2
 800b4ae:	b289      	uxth	r1, r1
 800b4b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4bc:	4461      	add	r1, ip
 800b4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4d0:	4577      	cmp	r7, lr
 800b4d2:	f849 1b04 	str.w	r1, [r9], #4
 800b4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4da:	d8e2      	bhi.n	800b4a2 <__multiply+0xb2>
 800b4dc:	9a01      	ldr	r2, [sp, #4]
 800b4de:	f845 c002 	str.w	ip, [r5, r2]
 800b4e2:	9a03      	ldr	r2, [sp, #12]
 800b4e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	f1b9 0f00 	cmp.w	r9, #0
 800b4ee:	d020      	beq.n	800b532 <__multiply+0x142>
 800b4f0:	6829      	ldr	r1, [r5, #0]
 800b4f2:	f104 0c14 	add.w	ip, r4, #20
 800b4f6:	46ae      	mov	lr, r5
 800b4f8:	f04f 0a00 	mov.w	sl, #0
 800b4fc:	f8bc b000 	ldrh.w	fp, [ip]
 800b500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b504:	fb09 220b 	mla	r2, r9, fp, r2
 800b508:	4492      	add	sl, r2
 800b50a:	b289      	uxth	r1, r1
 800b50c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b510:	f84e 1b04 	str.w	r1, [lr], #4
 800b514:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b518:	f8be 1000 	ldrh.w	r1, [lr]
 800b51c:	0c12      	lsrs	r2, r2, #16
 800b51e:	fb09 1102 	mla	r1, r9, r2, r1
 800b522:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b526:	4567      	cmp	r7, ip
 800b528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b52c:	d8e6      	bhi.n	800b4fc <__multiply+0x10c>
 800b52e:	9a01      	ldr	r2, [sp, #4]
 800b530:	50a9      	str	r1, [r5, r2]
 800b532:	3504      	adds	r5, #4
 800b534:	e79a      	b.n	800b46c <__multiply+0x7c>
 800b536:	3e01      	subs	r6, #1
 800b538:	e79c      	b.n	800b474 <__multiply+0x84>
 800b53a:	bf00      	nop
 800b53c:	0800f9c9 	.word	0x0800f9c9
 800b540:	0800f9da 	.word	0x0800f9da

0800b544 <__pow5mult>:
 800b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b548:	4615      	mov	r5, r2
 800b54a:	f012 0203 	ands.w	r2, r2, #3
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	d007      	beq.n	800b564 <__pow5mult+0x20>
 800b554:	4c25      	ldr	r4, [pc, #148]	; (800b5ec <__pow5mult+0xa8>)
 800b556:	3a01      	subs	r2, #1
 800b558:	2300      	movs	r3, #0
 800b55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b55e:	f7ff fe9b 	bl	800b298 <__multadd>
 800b562:	4607      	mov	r7, r0
 800b564:	10ad      	asrs	r5, r5, #2
 800b566:	d03d      	beq.n	800b5e4 <__pow5mult+0xa0>
 800b568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b56a:	b97c      	cbnz	r4, 800b58c <__pow5mult+0x48>
 800b56c:	2010      	movs	r0, #16
 800b56e:	f7fe f967 	bl	8009840 <malloc>
 800b572:	4602      	mov	r2, r0
 800b574:	6270      	str	r0, [r6, #36]	; 0x24
 800b576:	b928      	cbnz	r0, 800b584 <__pow5mult+0x40>
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <__pow5mult+0xac>)
 800b57a:	481e      	ldr	r0, [pc, #120]	; (800b5f4 <__pow5mult+0xb0>)
 800b57c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b580:	f000 ffbe 	bl	800c500 <__assert_func>
 800b584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b588:	6004      	str	r4, [r0, #0]
 800b58a:	60c4      	str	r4, [r0, #12]
 800b58c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b594:	b94c      	cbnz	r4, 800b5aa <__pow5mult+0x66>
 800b596:	f240 2171 	movw	r1, #625	; 0x271
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ff12 	bl	800b3c4 <__i2b>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	f04f 0900 	mov.w	r9, #0
 800b5ae:	07eb      	lsls	r3, r5, #31
 800b5b0:	d50a      	bpl.n	800b5c8 <__pow5mult+0x84>
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff ff1a 	bl	800b3f0 <__multiply>
 800b5bc:	4639      	mov	r1, r7
 800b5be:	4680      	mov	r8, r0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff fe47 	bl	800b254 <_Bfree>
 800b5c6:	4647      	mov	r7, r8
 800b5c8:	106d      	asrs	r5, r5, #1
 800b5ca:	d00b      	beq.n	800b5e4 <__pow5mult+0xa0>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	b938      	cbnz	r0, 800b5e0 <__pow5mult+0x9c>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7ff ff0b 	bl	800b3f0 <__multiply>
 800b5da:	6020      	str	r0, [r4, #0]
 800b5dc:	f8c0 9000 	str.w	r9, [r0]
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	e7e4      	b.n	800b5ae <__pow5mult+0x6a>
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800fb28 	.word	0x0800fb28
 800b5f0:	0800f957 	.word	0x0800f957
 800b5f4:	0800f9da 	.word	0x0800f9da

0800b5f8 <__lshift>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	6849      	ldr	r1, [r1, #4]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	4607      	mov	r7, r0
 800b60a:	4691      	mov	r9, r2
 800b60c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b610:	f108 0601 	add.w	r6, r8, #1
 800b614:	42b3      	cmp	r3, r6
 800b616:	db0b      	blt.n	800b630 <__lshift+0x38>
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff fddb 	bl	800b1d4 <_Balloc>
 800b61e:	4605      	mov	r5, r0
 800b620:	b948      	cbnz	r0, 800b636 <__lshift+0x3e>
 800b622:	4602      	mov	r2, r0
 800b624:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <__lshift+0xd8>)
 800b626:	482b      	ldr	r0, [pc, #172]	; (800b6d4 <__lshift+0xdc>)
 800b628:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b62c:	f000 ff68 	bl	800c500 <__assert_func>
 800b630:	3101      	adds	r1, #1
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	e7ee      	b.n	800b614 <__lshift+0x1c>
 800b636:	2300      	movs	r3, #0
 800b638:	f100 0114 	add.w	r1, r0, #20
 800b63c:	f100 0210 	add.w	r2, r0, #16
 800b640:	4618      	mov	r0, r3
 800b642:	4553      	cmp	r3, sl
 800b644:	db37      	blt.n	800b6b6 <__lshift+0xbe>
 800b646:	6920      	ldr	r0, [r4, #16]
 800b648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b64c:	f104 0314 	add.w	r3, r4, #20
 800b650:	f019 091f 	ands.w	r9, r9, #31
 800b654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b65c:	d02f      	beq.n	800b6be <__lshift+0xc6>
 800b65e:	f1c9 0e20 	rsb	lr, r9, #32
 800b662:	468a      	mov	sl, r1
 800b664:	f04f 0c00 	mov.w	ip, #0
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	fa02 f209 	lsl.w	r2, r2, r9
 800b66e:	ea42 020c 	orr.w	r2, r2, ip
 800b672:	f84a 2b04 	str.w	r2, [sl], #4
 800b676:	f853 2b04 	ldr.w	r2, [r3], #4
 800b67a:	4298      	cmp	r0, r3
 800b67c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b680:	d8f2      	bhi.n	800b668 <__lshift+0x70>
 800b682:	1b03      	subs	r3, r0, r4
 800b684:	3b15      	subs	r3, #21
 800b686:	f023 0303 	bic.w	r3, r3, #3
 800b68a:	3304      	adds	r3, #4
 800b68c:	f104 0215 	add.w	r2, r4, #21
 800b690:	4290      	cmp	r0, r2
 800b692:	bf38      	it	cc
 800b694:	2304      	movcc	r3, #4
 800b696:	f841 c003 	str.w	ip, [r1, r3]
 800b69a:	f1bc 0f00 	cmp.w	ip, #0
 800b69e:	d001      	beq.n	800b6a4 <__lshift+0xac>
 800b6a0:	f108 0602 	add.w	r6, r8, #2
 800b6a4:	3e01      	subs	r6, #1
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	612e      	str	r6, [r5, #16]
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f7ff fdd2 	bl	800b254 <_Bfree>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	e7c1      	b.n	800b642 <__lshift+0x4a>
 800b6be:	3904      	subs	r1, #4
 800b6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c8:	4298      	cmp	r0, r3
 800b6ca:	d8f9      	bhi.n	800b6c0 <__lshift+0xc8>
 800b6cc:	e7ea      	b.n	800b6a4 <__lshift+0xac>
 800b6ce:	bf00      	nop
 800b6d0:	0800f9c9 	.word	0x0800f9c9
 800b6d4:	0800f9da 	.word	0x0800f9da

0800b6d8 <__mcmp>:
 800b6d8:	b530      	push	{r4, r5, lr}
 800b6da:	6902      	ldr	r2, [r0, #16]
 800b6dc:	690c      	ldr	r4, [r1, #16]
 800b6de:	1b12      	subs	r2, r2, r4
 800b6e0:	d10e      	bne.n	800b700 <__mcmp+0x28>
 800b6e2:	f100 0314 	add.w	r3, r0, #20
 800b6e6:	3114      	adds	r1, #20
 800b6e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6f8:	42a5      	cmp	r5, r4
 800b6fa:	d003      	beq.n	800b704 <__mcmp+0x2c>
 800b6fc:	d305      	bcc.n	800b70a <__mcmp+0x32>
 800b6fe:	2201      	movs	r2, #1
 800b700:	4610      	mov	r0, r2
 800b702:	bd30      	pop	{r4, r5, pc}
 800b704:	4283      	cmp	r3, r0
 800b706:	d3f3      	bcc.n	800b6f0 <__mcmp+0x18>
 800b708:	e7fa      	b.n	800b700 <__mcmp+0x28>
 800b70a:	f04f 32ff 	mov.w	r2, #4294967295
 800b70e:	e7f7      	b.n	800b700 <__mcmp+0x28>

0800b710 <__mdiff>:
 800b710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	4606      	mov	r6, r0
 800b718:	4611      	mov	r1, r2
 800b71a:	4620      	mov	r0, r4
 800b71c:	4690      	mov	r8, r2
 800b71e:	f7ff ffdb 	bl	800b6d8 <__mcmp>
 800b722:	1e05      	subs	r5, r0, #0
 800b724:	d110      	bne.n	800b748 <__mdiff+0x38>
 800b726:	4629      	mov	r1, r5
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff fd53 	bl	800b1d4 <_Balloc>
 800b72e:	b930      	cbnz	r0, 800b73e <__mdiff+0x2e>
 800b730:	4b3a      	ldr	r3, [pc, #232]	; (800b81c <__mdiff+0x10c>)
 800b732:	4602      	mov	r2, r0
 800b734:	f240 2132 	movw	r1, #562	; 0x232
 800b738:	4839      	ldr	r0, [pc, #228]	; (800b820 <__mdiff+0x110>)
 800b73a:	f000 fee1 	bl	800c500 <__assert_func>
 800b73e:	2301      	movs	r3, #1
 800b740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	bfa4      	itt	ge
 800b74a:	4643      	movge	r3, r8
 800b74c:	46a0      	movge	r8, r4
 800b74e:	4630      	mov	r0, r6
 800b750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b754:	bfa6      	itte	ge
 800b756:	461c      	movge	r4, r3
 800b758:	2500      	movge	r5, #0
 800b75a:	2501      	movlt	r5, #1
 800b75c:	f7ff fd3a 	bl	800b1d4 <_Balloc>
 800b760:	b920      	cbnz	r0, 800b76c <__mdiff+0x5c>
 800b762:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <__mdiff+0x10c>)
 800b764:	4602      	mov	r2, r0
 800b766:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b76a:	e7e5      	b.n	800b738 <__mdiff+0x28>
 800b76c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b770:	6926      	ldr	r6, [r4, #16]
 800b772:	60c5      	str	r5, [r0, #12]
 800b774:	f104 0914 	add.w	r9, r4, #20
 800b778:	f108 0514 	add.w	r5, r8, #20
 800b77c:	f100 0e14 	add.w	lr, r0, #20
 800b780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b788:	f108 0210 	add.w	r2, r8, #16
 800b78c:	46f2      	mov	sl, lr
 800b78e:	2100      	movs	r1, #0
 800b790:	f859 3b04 	ldr.w	r3, [r9], #4
 800b794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b798:	fa1f f883 	uxth.w	r8, r3
 800b79c:	fa11 f18b 	uxtah	r1, r1, fp
 800b7a0:	0c1b      	lsrs	r3, r3, #16
 800b7a2:	eba1 0808 	sub.w	r8, r1, r8
 800b7a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7ae:	fa1f f888 	uxth.w	r8, r8
 800b7b2:	1419      	asrs	r1, r3, #16
 800b7b4:	454e      	cmp	r6, r9
 800b7b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7ba:	f84a 3b04 	str.w	r3, [sl], #4
 800b7be:	d8e7      	bhi.n	800b790 <__mdiff+0x80>
 800b7c0:	1b33      	subs	r3, r6, r4
 800b7c2:	3b15      	subs	r3, #21
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	3415      	adds	r4, #21
 800b7cc:	42a6      	cmp	r6, r4
 800b7ce:	bf38      	it	cc
 800b7d0:	2304      	movcc	r3, #4
 800b7d2:	441d      	add	r5, r3
 800b7d4:	4473      	add	r3, lr
 800b7d6:	469e      	mov	lr, r3
 800b7d8:	462e      	mov	r6, r5
 800b7da:	4566      	cmp	r6, ip
 800b7dc:	d30e      	bcc.n	800b7fc <__mdiff+0xec>
 800b7de:	f10c 0203 	add.w	r2, ip, #3
 800b7e2:	1b52      	subs	r2, r2, r5
 800b7e4:	f022 0203 	bic.w	r2, r2, #3
 800b7e8:	3d03      	subs	r5, #3
 800b7ea:	45ac      	cmp	ip, r5
 800b7ec:	bf38      	it	cc
 800b7ee:	2200      	movcc	r2, #0
 800b7f0:	441a      	add	r2, r3
 800b7f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7f6:	b17b      	cbz	r3, 800b818 <__mdiff+0x108>
 800b7f8:	6107      	str	r7, [r0, #16]
 800b7fa:	e7a3      	b.n	800b744 <__mdiff+0x34>
 800b7fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b800:	fa11 f288 	uxtah	r2, r1, r8
 800b804:	1414      	asrs	r4, r2, #16
 800b806:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b80a:	b292      	uxth	r2, r2
 800b80c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b810:	f84e 2b04 	str.w	r2, [lr], #4
 800b814:	1421      	asrs	r1, r4, #16
 800b816:	e7e0      	b.n	800b7da <__mdiff+0xca>
 800b818:	3f01      	subs	r7, #1
 800b81a:	e7ea      	b.n	800b7f2 <__mdiff+0xe2>
 800b81c:	0800f9c9 	.word	0x0800f9c9
 800b820:	0800f9da 	.word	0x0800f9da

0800b824 <__d2b>:
 800b824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b828:	4689      	mov	r9, r1
 800b82a:	2101      	movs	r1, #1
 800b82c:	ec57 6b10 	vmov	r6, r7, d0
 800b830:	4690      	mov	r8, r2
 800b832:	f7ff fccf 	bl	800b1d4 <_Balloc>
 800b836:	4604      	mov	r4, r0
 800b838:	b930      	cbnz	r0, 800b848 <__d2b+0x24>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b25      	ldr	r3, [pc, #148]	; (800b8d4 <__d2b+0xb0>)
 800b83e:	4826      	ldr	r0, [pc, #152]	; (800b8d8 <__d2b+0xb4>)
 800b840:	f240 310a 	movw	r1, #778	; 0x30a
 800b844:	f000 fe5c 	bl	800c500 <__assert_func>
 800b848:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b84c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b850:	bb35      	cbnz	r5, 800b8a0 <__d2b+0x7c>
 800b852:	2e00      	cmp	r6, #0
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	d028      	beq.n	800b8aa <__d2b+0x86>
 800b858:	4668      	mov	r0, sp
 800b85a:	9600      	str	r6, [sp, #0]
 800b85c:	f7ff fd82 	bl	800b364 <__lo0bits>
 800b860:	9900      	ldr	r1, [sp, #0]
 800b862:	b300      	cbz	r0, 800b8a6 <__d2b+0x82>
 800b864:	9a01      	ldr	r2, [sp, #4]
 800b866:	f1c0 0320 	rsb	r3, r0, #32
 800b86a:	fa02 f303 	lsl.w	r3, r2, r3
 800b86e:	430b      	orrs	r3, r1
 800b870:	40c2      	lsrs	r2, r0
 800b872:	6163      	str	r3, [r4, #20]
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	61a3      	str	r3, [r4, #24]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bf14      	ite	ne
 800b87e:	2202      	movne	r2, #2
 800b880:	2201      	moveq	r2, #1
 800b882:	6122      	str	r2, [r4, #16]
 800b884:	b1d5      	cbz	r5, 800b8bc <__d2b+0x98>
 800b886:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b88a:	4405      	add	r5, r0
 800b88c:	f8c9 5000 	str.w	r5, [r9]
 800b890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b894:	f8c8 0000 	str.w	r0, [r8]
 800b898:	4620      	mov	r0, r4
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8a4:	e7d5      	b.n	800b852 <__d2b+0x2e>
 800b8a6:	6161      	str	r1, [r4, #20]
 800b8a8:	e7e5      	b.n	800b876 <__d2b+0x52>
 800b8aa:	a801      	add	r0, sp, #4
 800b8ac:	f7ff fd5a 	bl	800b364 <__lo0bits>
 800b8b0:	9b01      	ldr	r3, [sp, #4]
 800b8b2:	6163      	str	r3, [r4, #20]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	6122      	str	r2, [r4, #16]
 800b8b8:	3020      	adds	r0, #32
 800b8ba:	e7e3      	b.n	800b884 <__d2b+0x60>
 800b8bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8c4:	f8c9 0000 	str.w	r0, [r9]
 800b8c8:	6918      	ldr	r0, [r3, #16]
 800b8ca:	f7ff fd2b 	bl	800b324 <__hi0bits>
 800b8ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8d2:	e7df      	b.n	800b894 <__d2b+0x70>
 800b8d4:	0800f9c9 	.word	0x0800f9c9
 800b8d8:	0800f9da 	.word	0x0800f9da

0800b8dc <_calloc_r>:
 800b8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8de:	fba1 2402 	umull	r2, r4, r1, r2
 800b8e2:	b94c      	cbnz	r4, 800b8f8 <_calloc_r+0x1c>
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	9201      	str	r2, [sp, #4]
 800b8e8:	f7fe f826 	bl	8009938 <_malloc_r>
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	b930      	cbnz	r0, 800b900 <_calloc_r+0x24>
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	220c      	movs	r2, #12
 800b8fa:	6002      	str	r2, [r0, #0]
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	e7f8      	b.n	800b8f2 <_calloc_r+0x16>
 800b900:	4621      	mov	r1, r4
 800b902:	f7fd ffa5 	bl	8009850 <memset>
 800b906:	e7f4      	b.n	800b8f2 <_calloc_r+0x16>

0800b908 <__ssputs_r>:
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	688e      	ldr	r6, [r1, #8]
 800b90e:	429e      	cmp	r6, r3
 800b910:	4682      	mov	sl, r0
 800b912:	460c      	mov	r4, r1
 800b914:	4690      	mov	r8, r2
 800b916:	461f      	mov	r7, r3
 800b918:	d838      	bhi.n	800b98c <__ssputs_r+0x84>
 800b91a:	898a      	ldrh	r2, [r1, #12]
 800b91c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b920:	d032      	beq.n	800b988 <__ssputs_r+0x80>
 800b922:	6825      	ldr	r5, [r4, #0]
 800b924:	6909      	ldr	r1, [r1, #16]
 800b926:	eba5 0901 	sub.w	r9, r5, r1
 800b92a:	6965      	ldr	r5, [r4, #20]
 800b92c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b934:	3301      	adds	r3, #1
 800b936:	444b      	add	r3, r9
 800b938:	106d      	asrs	r5, r5, #1
 800b93a:	429d      	cmp	r5, r3
 800b93c:	bf38      	it	cc
 800b93e:	461d      	movcc	r5, r3
 800b940:	0553      	lsls	r3, r2, #21
 800b942:	d531      	bpl.n	800b9a8 <__ssputs_r+0xa0>
 800b944:	4629      	mov	r1, r5
 800b946:	f7fd fff7 	bl	8009938 <_malloc_r>
 800b94a:	4606      	mov	r6, r0
 800b94c:	b950      	cbnz	r0, 800b964 <__ssputs_r+0x5c>
 800b94e:	230c      	movs	r3, #12
 800b950:	f8ca 3000 	str.w	r3, [sl]
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b964:	6921      	ldr	r1, [r4, #16]
 800b966:	464a      	mov	r2, r9
 800b968:	f7ff fc1a 	bl	800b1a0 <memcpy>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	6126      	str	r6, [r4, #16]
 800b97a:	6165      	str	r5, [r4, #20]
 800b97c:	444e      	add	r6, r9
 800b97e:	eba5 0509 	sub.w	r5, r5, r9
 800b982:	6026      	str	r6, [r4, #0]
 800b984:	60a5      	str	r5, [r4, #8]
 800b986:	463e      	mov	r6, r7
 800b988:	42be      	cmp	r6, r7
 800b98a:	d900      	bls.n	800b98e <__ssputs_r+0x86>
 800b98c:	463e      	mov	r6, r7
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	4632      	mov	r2, r6
 800b992:	4641      	mov	r1, r8
 800b994:	f000 ffb0 	bl	800c8f8 <memmove>
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	1b9b      	subs	r3, r3, r6
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	4433      	add	r3, r6
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7db      	b.n	800b960 <__ssputs_r+0x58>
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	f000 ffbf 	bl	800c92c <_realloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1e1      	bne.n	800b978 <__ssputs_r+0x70>
 800b9b4:	6921      	ldr	r1, [r4, #16]
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	f7fd ff52 	bl	8009860 <_free_r>
 800b9bc:	e7c7      	b.n	800b94e <__ssputs_r+0x46>
	...

0800b9c0 <_svfiprintf_r>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	4698      	mov	r8, r3
 800b9c6:	898b      	ldrh	r3, [r1, #12]
 800b9c8:	061b      	lsls	r3, r3, #24
 800b9ca:	b09d      	sub	sp, #116	; 0x74
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	460d      	mov	r5, r1
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	d50e      	bpl.n	800b9f2 <_svfiprintf_r+0x32>
 800b9d4:	690b      	ldr	r3, [r1, #16]
 800b9d6:	b963      	cbnz	r3, 800b9f2 <_svfiprintf_r+0x32>
 800b9d8:	2140      	movs	r1, #64	; 0x40
 800b9da:	f7fd ffad 	bl	8009938 <_malloc_r>
 800b9de:	6028      	str	r0, [r5, #0]
 800b9e0:	6128      	str	r0, [r5, #16]
 800b9e2:	b920      	cbnz	r0, 800b9ee <_svfiprintf_r+0x2e>
 800b9e4:	230c      	movs	r3, #12
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	e0d1      	b.n	800bb92 <_svfiprintf_r+0x1d2>
 800b9ee:	2340      	movs	r3, #64	; 0x40
 800b9f0:	616b      	str	r3, [r5, #20]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba00:	2330      	movs	r3, #48	; 0x30
 800ba02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbac <_svfiprintf_r+0x1ec>
 800ba06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba0a:	f04f 0901 	mov.w	r9, #1
 800ba0e:	4623      	mov	r3, r4
 800ba10:	469a      	mov	sl, r3
 800ba12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba16:	b10a      	cbz	r2, 800ba1c <_svfiprintf_r+0x5c>
 800ba18:	2a25      	cmp	r2, #37	; 0x25
 800ba1a:	d1f9      	bne.n	800ba10 <_svfiprintf_r+0x50>
 800ba1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba20:	d00b      	beq.n	800ba3a <_svfiprintf_r+0x7a>
 800ba22:	465b      	mov	r3, fp
 800ba24:	4622      	mov	r2, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ff6d 	bl	800b908 <__ssputs_r>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f000 80aa 	beq.w	800bb88 <_svfiprintf_r+0x1c8>
 800ba34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba36:	445a      	add	r2, fp
 800ba38:	9209      	str	r2, [sp, #36]	; 0x24
 800ba3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 80a2 	beq.w	800bb88 <_svfiprintf_r+0x1c8>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba4e:	f10a 0a01 	add.w	sl, sl, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba5c:	4654      	mov	r4, sl
 800ba5e:	2205      	movs	r2, #5
 800ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba64:	4851      	ldr	r0, [pc, #324]	; (800bbac <_svfiprintf_r+0x1ec>)
 800ba66:	f7f4 fbd3 	bl	8000210 <memchr>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	b9d8      	cbnz	r0, 800baa6 <_svfiprintf_r+0xe6>
 800ba6e:	06d0      	lsls	r0, r2, #27
 800ba70:	bf44      	itt	mi
 800ba72:	2320      	movmi	r3, #32
 800ba74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba78:	0711      	lsls	r1, r2, #28
 800ba7a:	bf44      	itt	mi
 800ba7c:	232b      	movmi	r3, #43	; 0x2b
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba82:	f89a 3000 	ldrb.w	r3, [sl]
 800ba86:	2b2a      	cmp	r3, #42	; 0x2a
 800ba88:	d015      	beq.n	800bab6 <_svfiprintf_r+0xf6>
 800ba8a:	9a07      	ldr	r2, [sp, #28]
 800ba8c:	4654      	mov	r4, sl
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f04f 0c0a 	mov.w	ip, #10
 800ba94:	4621      	mov	r1, r4
 800ba96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d94e      	bls.n	800bb3e <_svfiprintf_r+0x17e>
 800baa0:	b1b0      	cbz	r0, 800bad0 <_svfiprintf_r+0x110>
 800baa2:	9207      	str	r2, [sp, #28]
 800baa4:	e014      	b.n	800bad0 <_svfiprintf_r+0x110>
 800baa6:	eba0 0308 	sub.w	r3, r0, r8
 800baaa:	fa09 f303 	lsl.w	r3, r9, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	46a2      	mov	sl, r4
 800bab4:	e7d2      	b.n	800ba5c <_svfiprintf_r+0x9c>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	1d19      	adds	r1, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9103      	str	r1, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfbb      	ittet	lt
 800bac2:	425b      	neglt	r3, r3
 800bac4:	f042 0202 	orrlt.w	r2, r2, #2
 800bac8:	9307      	strge	r3, [sp, #28]
 800baca:	9307      	strlt	r3, [sp, #28]
 800bacc:	bfb8      	it	lt
 800bace:	9204      	strlt	r2, [sp, #16]
 800bad0:	7823      	ldrb	r3, [r4, #0]
 800bad2:	2b2e      	cmp	r3, #46	; 0x2e
 800bad4:	d10c      	bne.n	800baf0 <_svfiprintf_r+0x130>
 800bad6:	7863      	ldrb	r3, [r4, #1]
 800bad8:	2b2a      	cmp	r3, #42	; 0x2a
 800bada:	d135      	bne.n	800bb48 <_svfiprintf_r+0x188>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9203      	str	r2, [sp, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bfb8      	it	lt
 800bae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800baec:	3402      	adds	r4, #2
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbbc <_svfiprintf_r+0x1fc>
 800baf4:	7821      	ldrb	r1, [r4, #0]
 800baf6:	2203      	movs	r2, #3
 800baf8:	4650      	mov	r0, sl
 800bafa:	f7f4 fb89 	bl	8000210 <memchr>
 800bafe:	b140      	cbz	r0, 800bb12 <_svfiprintf_r+0x152>
 800bb00:	2340      	movs	r3, #64	; 0x40
 800bb02:	eba0 000a 	sub.w	r0, r0, sl
 800bb06:	fa03 f000 	lsl.w	r0, r3, r0
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	4303      	orrs	r3, r0
 800bb0e:	3401      	adds	r4, #1
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4826      	ldr	r0, [pc, #152]	; (800bbb0 <_svfiprintf_r+0x1f0>)
 800bb18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb1c:	2206      	movs	r2, #6
 800bb1e:	f7f4 fb77 	bl	8000210 <memchr>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d038      	beq.n	800bb98 <_svfiprintf_r+0x1d8>
 800bb26:	4b23      	ldr	r3, [pc, #140]	; (800bbb4 <_svfiprintf_r+0x1f4>)
 800bb28:	bb1b      	cbnz	r3, 800bb72 <_svfiprintf_r+0x1b2>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	3307      	adds	r3, #7
 800bb2e:	f023 0307 	bic.w	r3, r3, #7
 800bb32:	3308      	adds	r3, #8
 800bb34:	9303      	str	r3, [sp, #12]
 800bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb38:	4433      	add	r3, r6
 800bb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3c:	e767      	b.n	800ba0e <_svfiprintf_r+0x4e>
 800bb3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb42:	460c      	mov	r4, r1
 800bb44:	2001      	movs	r0, #1
 800bb46:	e7a5      	b.n	800ba94 <_svfiprintf_r+0xd4>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	3401      	adds	r4, #1
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	f04f 0c0a 	mov.w	ip, #10
 800bb54:	4620      	mov	r0, r4
 800bb56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb5a:	3a30      	subs	r2, #48	; 0x30
 800bb5c:	2a09      	cmp	r2, #9
 800bb5e:	d903      	bls.n	800bb68 <_svfiprintf_r+0x1a8>
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d0c5      	beq.n	800baf0 <_svfiprintf_r+0x130>
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	e7c3      	b.n	800baf0 <_svfiprintf_r+0x130>
 800bb68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e7f0      	b.n	800bb54 <_svfiprintf_r+0x194>
 800bb72:	ab03      	add	r3, sp, #12
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	462a      	mov	r2, r5
 800bb78:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <_svfiprintf_r+0x1f8>)
 800bb7a:	a904      	add	r1, sp, #16
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7fd ffef 	bl	8009b60 <_printf_float>
 800bb82:	1c42      	adds	r2, r0, #1
 800bb84:	4606      	mov	r6, r0
 800bb86:	d1d6      	bne.n	800bb36 <_svfiprintf_r+0x176>
 800bb88:	89ab      	ldrh	r3, [r5, #12]
 800bb8a:	065b      	lsls	r3, r3, #25
 800bb8c:	f53f af2c 	bmi.w	800b9e8 <_svfiprintf_r+0x28>
 800bb90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb92:	b01d      	add	sp, #116	; 0x74
 800bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb98:	ab03      	add	r3, sp, #12
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <_svfiprintf_r+0x1f8>)
 800bba0:	a904      	add	r1, sp, #16
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7fe fa80 	bl	800a0a8 <_printf_i>
 800bba8:	e7eb      	b.n	800bb82 <_svfiprintf_r+0x1c2>
 800bbaa:	bf00      	nop
 800bbac:	0800fb34 	.word	0x0800fb34
 800bbb0:	0800fb3e 	.word	0x0800fb3e
 800bbb4:	08009b61 	.word	0x08009b61
 800bbb8:	0800b909 	.word	0x0800b909
 800bbbc:	0800fb3a 	.word	0x0800fb3a

0800bbc0 <_sungetc_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	1c4b      	adds	r3, r1, #1
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	d103      	bne.n	800bbd0 <_sungetc_r+0x10>
 800bbc8:	f04f 35ff 	mov.w	r5, #4294967295
 800bbcc:	4628      	mov	r0, r5
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	8993      	ldrh	r3, [r2, #12]
 800bbd2:	f023 0320 	bic.w	r3, r3, #32
 800bbd6:	8193      	strh	r3, [r2, #12]
 800bbd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbda:	6852      	ldr	r2, [r2, #4]
 800bbdc:	b2cd      	uxtb	r5, r1
 800bbde:	b18b      	cbz	r3, 800bc04 <_sungetc_r+0x44>
 800bbe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	dd08      	ble.n	800bbf8 <_sungetc_r+0x38>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	1e5a      	subs	r2, r3, #1
 800bbea:	6022      	str	r2, [r4, #0]
 800bbec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bbf0:	6863      	ldr	r3, [r4, #4]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	6063      	str	r3, [r4, #4]
 800bbf6:	e7e9      	b.n	800bbcc <_sungetc_r+0xc>
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	f000 fc47 	bl	800c48c <__submore>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d0f1      	beq.n	800bbe6 <_sungetc_r+0x26>
 800bc02:	e7e1      	b.n	800bbc8 <_sungetc_r+0x8>
 800bc04:	6921      	ldr	r1, [r4, #16]
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	b151      	cbz	r1, 800bc20 <_sungetc_r+0x60>
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d208      	bcs.n	800bc20 <_sungetc_r+0x60>
 800bc0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bc12:	42a9      	cmp	r1, r5
 800bc14:	d104      	bne.n	800bc20 <_sungetc_r+0x60>
 800bc16:	3b01      	subs	r3, #1
 800bc18:	3201      	adds	r2, #1
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	6062      	str	r2, [r4, #4]
 800bc1e:	e7d5      	b.n	800bbcc <_sungetc_r+0xc>
 800bc20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bc24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc28:	6363      	str	r3, [r4, #52]	; 0x34
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc2e:	4623      	mov	r3, r4
 800bc30:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	2301      	movs	r3, #1
 800bc38:	e7dc      	b.n	800bbf4 <_sungetc_r+0x34>

0800bc3a <__ssrefill_r>:
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc40:	b169      	cbz	r1, 800bc5e <__ssrefill_r+0x24>
 800bc42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc46:	4299      	cmp	r1, r3
 800bc48:	d001      	beq.n	800bc4e <__ssrefill_r+0x14>
 800bc4a:	f7fd fe09 	bl	8009860 <_free_r>
 800bc4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc50:	6063      	str	r3, [r4, #4]
 800bc52:	2000      	movs	r0, #0
 800bc54:	6360      	str	r0, [r4, #52]	; 0x34
 800bc56:	b113      	cbz	r3, 800bc5e <__ssrefill_r+0x24>
 800bc58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	2300      	movs	r3, #0
 800bc64:	6063      	str	r3, [r4, #4]
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	f043 0320 	orr.w	r3, r3, #32
 800bc6c:	81a3      	strh	r3, [r4, #12]
 800bc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc72:	e7f3      	b.n	800bc5c <__ssrefill_r+0x22>

0800bc74 <__ssvfiscanf_r>:
 800bc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc78:	460c      	mov	r4, r1
 800bc7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bc7e:	2100      	movs	r1, #0
 800bc80:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bc84:	49a6      	ldr	r1, [pc, #664]	; (800bf20 <__ssvfiscanf_r+0x2ac>)
 800bc86:	91a0      	str	r1, [sp, #640]	; 0x280
 800bc88:	f10d 0804 	add.w	r8, sp, #4
 800bc8c:	49a5      	ldr	r1, [pc, #660]	; (800bf24 <__ssvfiscanf_r+0x2b0>)
 800bc8e:	4fa6      	ldr	r7, [pc, #664]	; (800bf28 <__ssvfiscanf_r+0x2b4>)
 800bc90:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bf2c <__ssvfiscanf_r+0x2b8>
 800bc94:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bc98:	4606      	mov	r6, r0
 800bc9a:	91a1      	str	r1, [sp, #644]	; 0x284
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	7813      	ldrb	r3, [r2, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 815a 	beq.w	800bf5a <__ssvfiscanf_r+0x2e6>
 800bca6:	5dd9      	ldrb	r1, [r3, r7]
 800bca8:	f011 0108 	ands.w	r1, r1, #8
 800bcac:	f102 0501 	add.w	r5, r2, #1
 800bcb0:	d019      	beq.n	800bce6 <__ssvfiscanf_r+0x72>
 800bcb2:	6863      	ldr	r3, [r4, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dd0f      	ble.n	800bcd8 <__ssvfiscanf_r+0x64>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	5cba      	ldrb	r2, [r7, r2]
 800bcbe:	0712      	lsls	r2, r2, #28
 800bcc0:	d401      	bmi.n	800bcc6 <__ssvfiscanf_r+0x52>
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	e7eb      	b.n	800bc9e <__ssvfiscanf_r+0x2a>
 800bcc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcc8:	3201      	adds	r2, #1
 800bcca:	9245      	str	r2, [sp, #276]	; 0x114
 800bccc:	6862      	ldr	r2, [r4, #4]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	3a01      	subs	r2, #1
 800bcd2:	6062      	str	r2, [r4, #4]
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	e7ec      	b.n	800bcb2 <__ssvfiscanf_r+0x3e>
 800bcd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4630      	mov	r0, r6
 800bcde:	4798      	blx	r3
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d0e9      	beq.n	800bcb8 <__ssvfiscanf_r+0x44>
 800bce4:	e7ed      	b.n	800bcc2 <__ssvfiscanf_r+0x4e>
 800bce6:	2b25      	cmp	r3, #37	; 0x25
 800bce8:	d012      	beq.n	800bd10 <__ssvfiscanf_r+0x9c>
 800bcea:	469a      	mov	sl, r3
 800bcec:	6863      	ldr	r3, [r4, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f340 8091 	ble.w	800be16 <__ssvfiscanf_r+0x1a2>
 800bcf4:	6822      	ldr	r2, [r4, #0]
 800bcf6:	7813      	ldrb	r3, [r2, #0]
 800bcf8:	4553      	cmp	r3, sl
 800bcfa:	f040 812e 	bne.w	800bf5a <__ssvfiscanf_r+0x2e6>
 800bcfe:	6863      	ldr	r3, [r4, #4]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	6063      	str	r3, [r4, #4]
 800bd04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bd06:	3201      	adds	r2, #1
 800bd08:	3301      	adds	r3, #1
 800bd0a:	6022      	str	r2, [r4, #0]
 800bd0c:	9345      	str	r3, [sp, #276]	; 0x114
 800bd0e:	e7d8      	b.n	800bcc2 <__ssvfiscanf_r+0x4e>
 800bd10:	9141      	str	r1, [sp, #260]	; 0x104
 800bd12:	9143      	str	r1, [sp, #268]	; 0x10c
 800bd14:	7853      	ldrb	r3, [r2, #1]
 800bd16:	2b2a      	cmp	r3, #42	; 0x2a
 800bd18:	bf02      	ittt	eq
 800bd1a:	2310      	moveq	r3, #16
 800bd1c:	1c95      	addeq	r5, r2, #2
 800bd1e:	9341      	streq	r3, [sp, #260]	; 0x104
 800bd20:	220a      	movs	r2, #10
 800bd22:	46aa      	mov	sl, r5
 800bd24:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bd28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d91d      	bls.n	800bd6c <__ssvfiscanf_r+0xf8>
 800bd30:	487e      	ldr	r0, [pc, #504]	; (800bf2c <__ssvfiscanf_r+0x2b8>)
 800bd32:	2203      	movs	r2, #3
 800bd34:	f7f4 fa6c 	bl	8000210 <memchr>
 800bd38:	b140      	cbz	r0, 800bd4c <__ssvfiscanf_r+0xd8>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	eba0 0009 	sub.w	r0, r0, r9
 800bd40:	fa03 f000 	lsl.w	r0, r3, r0
 800bd44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd46:	4318      	orrs	r0, r3
 800bd48:	9041      	str	r0, [sp, #260]	; 0x104
 800bd4a:	4655      	mov	r5, sl
 800bd4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd50:	2b78      	cmp	r3, #120	; 0x78
 800bd52:	d806      	bhi.n	800bd62 <__ssvfiscanf_r+0xee>
 800bd54:	2b57      	cmp	r3, #87	; 0x57
 800bd56:	d810      	bhi.n	800bd7a <__ssvfiscanf_r+0x106>
 800bd58:	2b25      	cmp	r3, #37	; 0x25
 800bd5a:	d0c6      	beq.n	800bcea <__ssvfiscanf_r+0x76>
 800bd5c:	d856      	bhi.n	800be0c <__ssvfiscanf_r+0x198>
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d064      	beq.n	800be2c <__ssvfiscanf_r+0x1b8>
 800bd62:	2303      	movs	r3, #3
 800bd64:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd66:	230a      	movs	r3, #10
 800bd68:	9342      	str	r3, [sp, #264]	; 0x108
 800bd6a:	e071      	b.n	800be50 <__ssvfiscanf_r+0x1dc>
 800bd6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bd6e:	fb02 1103 	mla	r1, r2, r3, r1
 800bd72:	3930      	subs	r1, #48	; 0x30
 800bd74:	9143      	str	r1, [sp, #268]	; 0x10c
 800bd76:	4655      	mov	r5, sl
 800bd78:	e7d3      	b.n	800bd22 <__ssvfiscanf_r+0xae>
 800bd7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bd7e:	2a20      	cmp	r2, #32
 800bd80:	d8ef      	bhi.n	800bd62 <__ssvfiscanf_r+0xee>
 800bd82:	a101      	add	r1, pc, #4	; (adr r1, 800bd88 <__ssvfiscanf_r+0x114>)
 800bd84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bd88:	0800be3b 	.word	0x0800be3b
 800bd8c:	0800bd63 	.word	0x0800bd63
 800bd90:	0800bd63 	.word	0x0800bd63
 800bd94:	0800be99 	.word	0x0800be99
 800bd98:	0800bd63 	.word	0x0800bd63
 800bd9c:	0800bd63 	.word	0x0800bd63
 800bda0:	0800bd63 	.word	0x0800bd63
 800bda4:	0800bd63 	.word	0x0800bd63
 800bda8:	0800bd63 	.word	0x0800bd63
 800bdac:	0800bd63 	.word	0x0800bd63
 800bdb0:	0800bd63 	.word	0x0800bd63
 800bdb4:	0800beaf 	.word	0x0800beaf
 800bdb8:	0800be85 	.word	0x0800be85
 800bdbc:	0800be13 	.word	0x0800be13
 800bdc0:	0800be13 	.word	0x0800be13
 800bdc4:	0800be13 	.word	0x0800be13
 800bdc8:	0800bd63 	.word	0x0800bd63
 800bdcc:	0800be89 	.word	0x0800be89
 800bdd0:	0800bd63 	.word	0x0800bd63
 800bdd4:	0800bd63 	.word	0x0800bd63
 800bdd8:	0800bd63 	.word	0x0800bd63
 800bddc:	0800bd63 	.word	0x0800bd63
 800bde0:	0800bebf 	.word	0x0800bebf
 800bde4:	0800be91 	.word	0x0800be91
 800bde8:	0800be33 	.word	0x0800be33
 800bdec:	0800bd63 	.word	0x0800bd63
 800bdf0:	0800bd63 	.word	0x0800bd63
 800bdf4:	0800bebb 	.word	0x0800bebb
 800bdf8:	0800bd63 	.word	0x0800bd63
 800bdfc:	0800be85 	.word	0x0800be85
 800be00:	0800bd63 	.word	0x0800bd63
 800be04:	0800bd63 	.word	0x0800bd63
 800be08:	0800be3b 	.word	0x0800be3b
 800be0c:	3b45      	subs	r3, #69	; 0x45
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d8a7      	bhi.n	800bd62 <__ssvfiscanf_r+0xee>
 800be12:	2305      	movs	r3, #5
 800be14:	e01b      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800be16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be18:	4621      	mov	r1, r4
 800be1a:	4630      	mov	r0, r6
 800be1c:	4798      	blx	r3
 800be1e:	2800      	cmp	r0, #0
 800be20:	f43f af68 	beq.w	800bcf4 <__ssvfiscanf_r+0x80>
 800be24:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be26:	2800      	cmp	r0, #0
 800be28:	f040 808d 	bne.w	800bf46 <__ssvfiscanf_r+0x2d2>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	e08f      	b.n	800bf52 <__ssvfiscanf_r+0x2de>
 800be32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800be34:	f042 0220 	orr.w	r2, r2, #32
 800be38:	9241      	str	r2, [sp, #260]	; 0x104
 800be3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800be3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be40:	9241      	str	r2, [sp, #260]	; 0x104
 800be42:	2210      	movs	r2, #16
 800be44:	2b6f      	cmp	r3, #111	; 0x6f
 800be46:	9242      	str	r2, [sp, #264]	; 0x108
 800be48:	bf34      	ite	cc
 800be4a:	2303      	movcc	r3, #3
 800be4c:	2304      	movcs	r3, #4
 800be4e:	9347      	str	r3, [sp, #284]	; 0x11c
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	dd42      	ble.n	800bedc <__ssvfiscanf_r+0x268>
 800be56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800be58:	0659      	lsls	r1, r3, #25
 800be5a:	d404      	bmi.n	800be66 <__ssvfiscanf_r+0x1f2>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	5cba      	ldrb	r2, [r7, r2]
 800be62:	0712      	lsls	r2, r2, #28
 800be64:	d441      	bmi.n	800beea <__ssvfiscanf_r+0x276>
 800be66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800be68:	2b02      	cmp	r3, #2
 800be6a:	dc50      	bgt.n	800bf0e <__ssvfiscanf_r+0x29a>
 800be6c:	466b      	mov	r3, sp
 800be6e:	4622      	mov	r2, r4
 800be70:	a941      	add	r1, sp, #260	; 0x104
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f876 	bl	800bf64 <_scanf_chars>
 800be78:	2801      	cmp	r0, #1
 800be7a:	d06e      	beq.n	800bf5a <__ssvfiscanf_r+0x2e6>
 800be7c:	2802      	cmp	r0, #2
 800be7e:	f47f af20 	bne.w	800bcc2 <__ssvfiscanf_r+0x4e>
 800be82:	e7cf      	b.n	800be24 <__ssvfiscanf_r+0x1b0>
 800be84:	220a      	movs	r2, #10
 800be86:	e7dd      	b.n	800be44 <__ssvfiscanf_r+0x1d0>
 800be88:	2300      	movs	r3, #0
 800be8a:	9342      	str	r3, [sp, #264]	; 0x108
 800be8c:	2303      	movs	r3, #3
 800be8e:	e7de      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800be90:	2308      	movs	r3, #8
 800be92:	9342      	str	r3, [sp, #264]	; 0x108
 800be94:	2304      	movs	r3, #4
 800be96:	e7da      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800be98:	4629      	mov	r1, r5
 800be9a:	4640      	mov	r0, r8
 800be9c:	f000 f9c6 	bl	800c22c <__sccl>
 800bea0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea6:	9341      	str	r3, [sp, #260]	; 0x104
 800bea8:	4605      	mov	r5, r0
 800beaa:	2301      	movs	r3, #1
 800beac:	e7cf      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800beae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800beb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb4:	9341      	str	r3, [sp, #260]	; 0x104
 800beb6:	2300      	movs	r3, #0
 800beb8:	e7c9      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800beba:	2302      	movs	r3, #2
 800bebc:	e7c7      	b.n	800be4e <__ssvfiscanf_r+0x1da>
 800bebe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bec0:	06c3      	lsls	r3, r0, #27
 800bec2:	f53f aefe 	bmi.w	800bcc2 <__ssvfiscanf_r+0x4e>
 800bec6:	9b00      	ldr	r3, [sp, #0]
 800bec8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800beca:	1d19      	adds	r1, r3, #4
 800becc:	9100      	str	r1, [sp, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f010 0f01 	tst.w	r0, #1
 800bed4:	bf14      	ite	ne
 800bed6:	801a      	strhne	r2, [r3, #0]
 800bed8:	601a      	streq	r2, [r3, #0]
 800beda:	e6f2      	b.n	800bcc2 <__ssvfiscanf_r+0x4e>
 800bedc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bede:	4621      	mov	r1, r4
 800bee0:	4630      	mov	r0, r6
 800bee2:	4798      	blx	r3
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d0b6      	beq.n	800be56 <__ssvfiscanf_r+0x1e2>
 800bee8:	e79c      	b.n	800be24 <__ssvfiscanf_r+0x1b0>
 800beea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800beec:	3201      	adds	r2, #1
 800beee:	9245      	str	r2, [sp, #276]	; 0x114
 800bef0:	6862      	ldr	r2, [r4, #4]
 800bef2:	3a01      	subs	r2, #1
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	6062      	str	r2, [r4, #4]
 800bef8:	dd02      	ble.n	800bf00 <__ssvfiscanf_r+0x28c>
 800befa:	3301      	adds	r3, #1
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	e7ad      	b.n	800be5c <__ssvfiscanf_r+0x1e8>
 800bf00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf02:	4621      	mov	r1, r4
 800bf04:	4630      	mov	r0, r6
 800bf06:	4798      	blx	r3
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d0a7      	beq.n	800be5c <__ssvfiscanf_r+0x1e8>
 800bf0c:	e78a      	b.n	800be24 <__ssvfiscanf_r+0x1b0>
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	dc0e      	bgt.n	800bf30 <__ssvfiscanf_r+0x2bc>
 800bf12:	466b      	mov	r3, sp
 800bf14:	4622      	mov	r2, r4
 800bf16:	a941      	add	r1, sp, #260	; 0x104
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f87d 	bl	800c018 <_scanf_i>
 800bf1e:	e7ab      	b.n	800be78 <__ssvfiscanf_r+0x204>
 800bf20:	0800bbc1 	.word	0x0800bbc1
 800bf24:	0800bc3b 	.word	0x0800bc3b
 800bf28:	0800fb9d 	.word	0x0800fb9d
 800bf2c:	0800fb3a 	.word	0x0800fb3a
 800bf30:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <__ssvfiscanf_r+0x2ec>)
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f43f aec5 	beq.w	800bcc2 <__ssvfiscanf_r+0x4e>
 800bf38:	466b      	mov	r3, sp
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	a941      	add	r1, sp, #260	; 0x104
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f3af 8000 	nop.w
 800bf44:	e798      	b.n	800be78 <__ssvfiscanf_r+0x204>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bf4c:	bf18      	it	ne
 800bf4e:	f04f 30ff 	movne.w	r0, #4294967295
 800bf52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bf5c:	e7f9      	b.n	800bf52 <__ssvfiscanf_r+0x2de>
 800bf5e:	bf00      	nop
 800bf60:	00000000 	.word	0x00000000

0800bf64 <_scanf_chars>:
 800bf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf68:	4615      	mov	r5, r2
 800bf6a:	688a      	ldr	r2, [r1, #8]
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	b932      	cbnz	r2, 800bf80 <_scanf_chars+0x1c>
 800bf72:	698a      	ldr	r2, [r1, #24]
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	bf0c      	ite	eq
 800bf78:	2201      	moveq	r2, #1
 800bf7a:	f04f 32ff 	movne.w	r2, #4294967295
 800bf7e:	608a      	str	r2, [r1, #8]
 800bf80:	6822      	ldr	r2, [r4, #0]
 800bf82:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c014 <_scanf_chars+0xb0>
 800bf86:	06d1      	lsls	r1, r2, #27
 800bf88:	bf5f      	itttt	pl
 800bf8a:	681a      	ldrpl	r2, [r3, #0]
 800bf8c:	1d11      	addpl	r1, r2, #4
 800bf8e:	6019      	strpl	r1, [r3, #0]
 800bf90:	6816      	ldrpl	r6, [r2, #0]
 800bf92:	2700      	movs	r7, #0
 800bf94:	69a0      	ldr	r0, [r4, #24]
 800bf96:	b188      	cbz	r0, 800bfbc <_scanf_chars+0x58>
 800bf98:	2801      	cmp	r0, #1
 800bf9a:	d107      	bne.n	800bfac <_scanf_chars+0x48>
 800bf9c:	682a      	ldr	r2, [r5, #0]
 800bf9e:	7811      	ldrb	r1, [r2, #0]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	5c52      	ldrb	r2, [r2, r1]
 800bfa4:	b952      	cbnz	r2, 800bfbc <_scanf_chars+0x58>
 800bfa6:	2f00      	cmp	r7, #0
 800bfa8:	d031      	beq.n	800c00e <_scanf_chars+0xaa>
 800bfaa:	e022      	b.n	800bff2 <_scanf_chars+0x8e>
 800bfac:	2802      	cmp	r0, #2
 800bfae:	d120      	bne.n	800bff2 <_scanf_chars+0x8e>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bfb8:	071b      	lsls	r3, r3, #28
 800bfba:	d41a      	bmi.n	800bff2 <_scanf_chars+0x8e>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	06da      	lsls	r2, r3, #27
 800bfc0:	bf5e      	ittt	pl
 800bfc2:	682b      	ldrpl	r3, [r5, #0]
 800bfc4:	781b      	ldrbpl	r3, [r3, #0]
 800bfc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bfca:	682a      	ldr	r2, [r5, #0]
 800bfcc:	686b      	ldr	r3, [r5, #4]
 800bfce:	3201      	adds	r2, #1
 800bfd0:	602a      	str	r2, [r5, #0]
 800bfd2:	68a2      	ldr	r2, [r4, #8]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	3a01      	subs	r2, #1
 800bfd8:	606b      	str	r3, [r5, #4]
 800bfda:	3701      	adds	r7, #1
 800bfdc:	60a2      	str	r2, [r4, #8]
 800bfde:	b142      	cbz	r2, 800bff2 <_scanf_chars+0x8e>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dcd7      	bgt.n	800bf94 <_scanf_chars+0x30>
 800bfe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4640      	mov	r0, r8
 800bfec:	4798      	blx	r3
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d0d0      	beq.n	800bf94 <_scanf_chars+0x30>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	f013 0310 	ands.w	r3, r3, #16
 800bff8:	d105      	bne.n	800c006 <_scanf_chars+0xa2>
 800bffa:	68e2      	ldr	r2, [r4, #12]
 800bffc:	3201      	adds	r2, #1
 800bffe:	60e2      	str	r2, [r4, #12]
 800c000:	69a2      	ldr	r2, [r4, #24]
 800c002:	b102      	cbz	r2, 800c006 <_scanf_chars+0xa2>
 800c004:	7033      	strb	r3, [r6, #0]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	443b      	add	r3, r7
 800c00a:	6123      	str	r3, [r4, #16]
 800c00c:	2000      	movs	r0, #0
 800c00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c012:	bf00      	nop
 800c014:	0800fb9d 	.word	0x0800fb9d

0800c018 <_scanf_i>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	4698      	mov	r8, r3
 800c01e:	4b76      	ldr	r3, [pc, #472]	; (800c1f8 <_scanf_i+0x1e0>)
 800c020:	460c      	mov	r4, r1
 800c022:	4682      	mov	sl, r0
 800c024:	4616      	mov	r6, r2
 800c026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c02a:	b087      	sub	sp, #28
 800c02c:	ab03      	add	r3, sp, #12
 800c02e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c032:	4b72      	ldr	r3, [pc, #456]	; (800c1fc <_scanf_i+0x1e4>)
 800c034:	69a1      	ldr	r1, [r4, #24]
 800c036:	4a72      	ldr	r2, [pc, #456]	; (800c200 <_scanf_i+0x1e8>)
 800c038:	2903      	cmp	r1, #3
 800c03a:	bf18      	it	ne
 800c03c:	461a      	movne	r2, r3
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	9201      	str	r2, [sp, #4]
 800c042:	1e5a      	subs	r2, r3, #1
 800c044:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c048:	bf88      	it	hi
 800c04a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c04e:	4627      	mov	r7, r4
 800c050:	bf82      	ittt	hi
 800c052:	eb03 0905 	addhi.w	r9, r3, r5
 800c056:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c05a:	60a3      	strhi	r3, [r4, #8]
 800c05c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c060:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c064:	bf98      	it	ls
 800c066:	f04f 0900 	movls.w	r9, #0
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	463d      	mov	r5, r7
 800c06e:	f04f 0b00 	mov.w	fp, #0
 800c072:	6831      	ldr	r1, [r6, #0]
 800c074:	ab03      	add	r3, sp, #12
 800c076:	7809      	ldrb	r1, [r1, #0]
 800c078:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c07c:	2202      	movs	r2, #2
 800c07e:	f7f4 f8c7 	bl	8000210 <memchr>
 800c082:	b328      	cbz	r0, 800c0d0 <_scanf_i+0xb8>
 800c084:	f1bb 0f01 	cmp.w	fp, #1
 800c088:	d159      	bne.n	800c13e <_scanf_i+0x126>
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	b92a      	cbnz	r2, 800c09a <_scanf_i+0x82>
 800c08e:	6822      	ldr	r2, [r4, #0]
 800c090:	2308      	movs	r3, #8
 800c092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c096:	6063      	str	r3, [r4, #4]
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	6822      	ldr	r2, [r4, #0]
 800c09c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c0a0:	6022      	str	r2, [r4, #0]
 800c0a2:	68a2      	ldr	r2, [r4, #8]
 800c0a4:	1e51      	subs	r1, r2, #1
 800c0a6:	60a1      	str	r1, [r4, #8]
 800c0a8:	b192      	cbz	r2, 800c0d0 <_scanf_i+0xb8>
 800c0aa:	6832      	ldr	r2, [r6, #0]
 800c0ac:	1c51      	adds	r1, r2, #1
 800c0ae:	6031      	str	r1, [r6, #0]
 800c0b0:	7812      	ldrb	r2, [r2, #0]
 800c0b2:	f805 2b01 	strb.w	r2, [r5], #1
 800c0b6:	6872      	ldr	r2, [r6, #4]
 800c0b8:	3a01      	subs	r2, #1
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	6072      	str	r2, [r6, #4]
 800c0be:	dc07      	bgt.n	800c0d0 <_scanf_i+0xb8>
 800c0c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4650      	mov	r0, sl
 800c0c8:	4790      	blx	r2
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	f040 8085 	bne.w	800c1da <_scanf_i+0x1c2>
 800c0d0:	f10b 0b01 	add.w	fp, fp, #1
 800c0d4:	f1bb 0f03 	cmp.w	fp, #3
 800c0d8:	d1cb      	bne.n	800c072 <_scanf_i+0x5a>
 800c0da:	6863      	ldr	r3, [r4, #4]
 800c0dc:	b90b      	cbnz	r3, 800c0e2 <_scanf_i+0xca>
 800c0de:	230a      	movs	r3, #10
 800c0e0:	6063      	str	r3, [r4, #4]
 800c0e2:	6863      	ldr	r3, [r4, #4]
 800c0e4:	4947      	ldr	r1, [pc, #284]	; (800c204 <_scanf_i+0x1ec>)
 800c0e6:	6960      	ldr	r0, [r4, #20]
 800c0e8:	1ac9      	subs	r1, r1, r3
 800c0ea:	f000 f89f 	bl	800c22c <__sccl>
 800c0ee:	f04f 0b00 	mov.w	fp, #0
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	6822      	ldr	r2, [r4, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d03d      	beq.n	800c176 <_scanf_i+0x15e>
 800c0fa:	6831      	ldr	r1, [r6, #0]
 800c0fc:	6960      	ldr	r0, [r4, #20]
 800c0fe:	f891 c000 	ldrb.w	ip, [r1]
 800c102:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c106:	2800      	cmp	r0, #0
 800c108:	d035      	beq.n	800c176 <_scanf_i+0x15e>
 800c10a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c10e:	d124      	bne.n	800c15a <_scanf_i+0x142>
 800c110:	0510      	lsls	r0, r2, #20
 800c112:	d522      	bpl.n	800c15a <_scanf_i+0x142>
 800c114:	f10b 0b01 	add.w	fp, fp, #1
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	d003      	beq.n	800c126 <_scanf_i+0x10e>
 800c11e:	3301      	adds	r3, #1
 800c120:	f109 39ff 	add.w	r9, r9, #4294967295
 800c124:	60a3      	str	r3, [r4, #8]
 800c126:	6873      	ldr	r3, [r6, #4]
 800c128:	3b01      	subs	r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	6073      	str	r3, [r6, #4]
 800c12e:	dd1b      	ble.n	800c168 <_scanf_i+0x150>
 800c130:	6833      	ldr	r3, [r6, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	6033      	str	r3, [r6, #0]
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	3b01      	subs	r3, #1
 800c13a:	60a3      	str	r3, [r4, #8]
 800c13c:	e7d9      	b.n	800c0f2 <_scanf_i+0xda>
 800c13e:	f1bb 0f02 	cmp.w	fp, #2
 800c142:	d1ae      	bne.n	800c0a2 <_scanf_i+0x8a>
 800c144:	6822      	ldr	r2, [r4, #0]
 800c146:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c14a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c14e:	d1bf      	bne.n	800c0d0 <_scanf_i+0xb8>
 800c150:	2310      	movs	r3, #16
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c158:	e7a2      	b.n	800c0a0 <_scanf_i+0x88>
 800c15a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	780b      	ldrb	r3, [r1, #0]
 800c162:	f805 3b01 	strb.w	r3, [r5], #1
 800c166:	e7de      	b.n	800c126 <_scanf_i+0x10e>
 800c168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c16c:	4631      	mov	r1, r6
 800c16e:	4650      	mov	r0, sl
 800c170:	4798      	blx	r3
 800c172:	2800      	cmp	r0, #0
 800c174:	d0df      	beq.n	800c136 <_scanf_i+0x11e>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	05db      	lsls	r3, r3, #23
 800c17a:	d50d      	bpl.n	800c198 <_scanf_i+0x180>
 800c17c:	42bd      	cmp	r5, r7
 800c17e:	d909      	bls.n	800c194 <_scanf_i+0x17c>
 800c180:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c188:	4632      	mov	r2, r6
 800c18a:	4650      	mov	r0, sl
 800c18c:	4798      	blx	r3
 800c18e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c192:	464d      	mov	r5, r9
 800c194:	42bd      	cmp	r5, r7
 800c196:	d02d      	beq.n	800c1f4 <_scanf_i+0x1dc>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	f012 0210 	ands.w	r2, r2, #16
 800c19e:	d113      	bne.n	800c1c8 <_scanf_i+0x1b0>
 800c1a0:	702a      	strb	r2, [r5, #0]
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	9e01      	ldr	r6, [sp, #4]
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	47b0      	blx	r6
 800c1ac:	6821      	ldr	r1, [r4, #0]
 800c1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b2:	f011 0f20 	tst.w	r1, #32
 800c1b6:	d013      	beq.n	800c1e0 <_scanf_i+0x1c8>
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	f8c8 2000 	str.w	r2, [r8]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6018      	str	r0, [r3, #0]
 800c1c2:	68e3      	ldr	r3, [r4, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60e3      	str	r3, [r4, #12]
 800c1c8:	1bed      	subs	r5, r5, r7
 800c1ca:	44ab      	add	fp, r5
 800c1cc:	6925      	ldr	r5, [r4, #16]
 800c1ce:	445d      	add	r5, fp
 800c1d0:	6125      	str	r5, [r4, #16]
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	b007      	add	sp, #28
 800c1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1da:	f04f 0b00 	mov.w	fp, #0
 800c1de:	e7ca      	b.n	800c176 <_scanf_i+0x15e>
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	f8c8 2000 	str.w	r2, [r8]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f011 0f01 	tst.w	r1, #1
 800c1ec:	bf14      	ite	ne
 800c1ee:	8018      	strhne	r0, [r3, #0]
 800c1f0:	6018      	streq	r0, [r3, #0]
 800c1f2:	e7e6      	b.n	800c1c2 <_scanf_i+0x1aa>
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	e7ed      	b.n	800c1d4 <_scanf_i+0x1bc>
 800c1f8:	0800f908 	.word	0x0800f908
 800c1fc:	0800c489 	.word	0x0800c489
 800c200:	0800c3a1 	.word	0x0800c3a1
 800c204:	0800fb5e 	.word	0x0800fb5e

0800c208 <_read_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	; (800c228 <_read_r+0x20>)
 800c20c:	4604      	mov	r4, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	4611      	mov	r1, r2
 800c212:	2200      	movs	r2, #0
 800c214:	602a      	str	r2, [r5, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	f7f7 f8d8 	bl	80033cc <_read>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_read_r+0x1e>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_read_r+0x1e>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	20011d8c 	.word	0x20011d8c

0800c22c <__sccl>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	780b      	ldrb	r3, [r1, #0]
 800c230:	4604      	mov	r4, r0
 800c232:	2b5e      	cmp	r3, #94	; 0x5e
 800c234:	bf0b      	itete	eq
 800c236:	784b      	ldrbeq	r3, [r1, #1]
 800c238:	1c48      	addne	r0, r1, #1
 800c23a:	1c88      	addeq	r0, r1, #2
 800c23c:	2200      	movne	r2, #0
 800c23e:	bf08      	it	eq
 800c240:	2201      	moveq	r2, #1
 800c242:	1e61      	subs	r1, r4, #1
 800c244:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c248:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c24c:	42a9      	cmp	r1, r5
 800c24e:	d1fb      	bne.n	800c248 <__sccl+0x1c>
 800c250:	b90b      	cbnz	r3, 800c256 <__sccl+0x2a>
 800c252:	3801      	subs	r0, #1
 800c254:	bd70      	pop	{r4, r5, r6, pc}
 800c256:	f082 0201 	eor.w	r2, r2, #1
 800c25a:	54e2      	strb	r2, [r4, r3]
 800c25c:	4605      	mov	r5, r0
 800c25e:	4628      	mov	r0, r5
 800c260:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c264:	292d      	cmp	r1, #45	; 0x2d
 800c266:	d006      	beq.n	800c276 <__sccl+0x4a>
 800c268:	295d      	cmp	r1, #93	; 0x5d
 800c26a:	d0f3      	beq.n	800c254 <__sccl+0x28>
 800c26c:	b909      	cbnz	r1, 800c272 <__sccl+0x46>
 800c26e:	4628      	mov	r0, r5
 800c270:	e7f0      	b.n	800c254 <__sccl+0x28>
 800c272:	460b      	mov	r3, r1
 800c274:	e7f1      	b.n	800c25a <__sccl+0x2e>
 800c276:	786e      	ldrb	r6, [r5, #1]
 800c278:	2e5d      	cmp	r6, #93	; 0x5d
 800c27a:	d0fa      	beq.n	800c272 <__sccl+0x46>
 800c27c:	42b3      	cmp	r3, r6
 800c27e:	dcf8      	bgt.n	800c272 <__sccl+0x46>
 800c280:	3502      	adds	r5, #2
 800c282:	4619      	mov	r1, r3
 800c284:	3101      	adds	r1, #1
 800c286:	428e      	cmp	r6, r1
 800c288:	5462      	strb	r2, [r4, r1]
 800c28a:	dcfb      	bgt.n	800c284 <__sccl+0x58>
 800c28c:	1af1      	subs	r1, r6, r3
 800c28e:	3901      	subs	r1, #1
 800c290:	1c58      	adds	r0, r3, #1
 800c292:	42b3      	cmp	r3, r6
 800c294:	bfa8      	it	ge
 800c296:	2100      	movge	r1, #0
 800c298:	1843      	adds	r3, r0, r1
 800c29a:	e7e0      	b.n	800c25e <__sccl+0x32>

0800c29c <_strtol_l.constprop.0>:
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a2:	d001      	beq.n	800c2a8 <_strtol_l.constprop.0+0xc>
 800c2a4:	2b24      	cmp	r3, #36	; 0x24
 800c2a6:	d906      	bls.n	800c2b6 <_strtol_l.constprop.0+0x1a>
 800c2a8:	f7fd faa0 	bl	80097ec <__errno>
 800c2ac:	2316      	movs	r3, #22
 800c2ae:	6003      	str	r3, [r0, #0]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c39c <_strtol_l.constprop.0+0x100>
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	462e      	mov	r6, r5
 800c2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c2c6:	f017 0708 	ands.w	r7, r7, #8
 800c2ca:	d1f7      	bne.n	800c2bc <_strtol_l.constprop.0+0x20>
 800c2cc:	2c2d      	cmp	r4, #45	; 0x2d
 800c2ce:	d132      	bne.n	800c336 <_strtol_l.constprop.0+0x9a>
 800c2d0:	782c      	ldrb	r4, [r5, #0]
 800c2d2:	2701      	movs	r7, #1
 800c2d4:	1cb5      	adds	r5, r6, #2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05b      	beq.n	800c392 <_strtol_l.constprop.0+0xf6>
 800c2da:	2b10      	cmp	r3, #16
 800c2dc:	d109      	bne.n	800c2f2 <_strtol_l.constprop.0+0x56>
 800c2de:	2c30      	cmp	r4, #48	; 0x30
 800c2e0:	d107      	bne.n	800c2f2 <_strtol_l.constprop.0+0x56>
 800c2e2:	782c      	ldrb	r4, [r5, #0]
 800c2e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2e8:	2c58      	cmp	r4, #88	; 0x58
 800c2ea:	d14d      	bne.n	800c388 <_strtol_l.constprop.0+0xec>
 800c2ec:	786c      	ldrb	r4, [r5, #1]
 800c2ee:	2310      	movs	r3, #16
 800c2f0:	3502      	adds	r5, #2
 800c2f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2fa:	f04f 0c00 	mov.w	ip, #0
 800c2fe:	fbb8 f9f3 	udiv	r9, r8, r3
 800c302:	4666      	mov	r6, ip
 800c304:	fb03 8a19 	mls	sl, r3, r9, r8
 800c308:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c30c:	f1be 0f09 	cmp.w	lr, #9
 800c310:	d816      	bhi.n	800c340 <_strtol_l.constprop.0+0xa4>
 800c312:	4674      	mov	r4, lr
 800c314:	42a3      	cmp	r3, r4
 800c316:	dd24      	ble.n	800c362 <_strtol_l.constprop.0+0xc6>
 800c318:	f1bc 0f00 	cmp.w	ip, #0
 800c31c:	db1e      	blt.n	800c35c <_strtol_l.constprop.0+0xc0>
 800c31e:	45b1      	cmp	r9, r6
 800c320:	d31c      	bcc.n	800c35c <_strtol_l.constprop.0+0xc0>
 800c322:	d101      	bne.n	800c328 <_strtol_l.constprop.0+0x8c>
 800c324:	45a2      	cmp	sl, r4
 800c326:	db19      	blt.n	800c35c <_strtol_l.constprop.0+0xc0>
 800c328:	fb06 4603 	mla	r6, r6, r3, r4
 800c32c:	f04f 0c01 	mov.w	ip, #1
 800c330:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c334:	e7e8      	b.n	800c308 <_strtol_l.constprop.0+0x6c>
 800c336:	2c2b      	cmp	r4, #43	; 0x2b
 800c338:	bf04      	itt	eq
 800c33a:	782c      	ldrbeq	r4, [r5, #0]
 800c33c:	1cb5      	addeq	r5, r6, #2
 800c33e:	e7ca      	b.n	800c2d6 <_strtol_l.constprop.0+0x3a>
 800c340:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c344:	f1be 0f19 	cmp.w	lr, #25
 800c348:	d801      	bhi.n	800c34e <_strtol_l.constprop.0+0xb2>
 800c34a:	3c37      	subs	r4, #55	; 0x37
 800c34c:	e7e2      	b.n	800c314 <_strtol_l.constprop.0+0x78>
 800c34e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c352:	f1be 0f19 	cmp.w	lr, #25
 800c356:	d804      	bhi.n	800c362 <_strtol_l.constprop.0+0xc6>
 800c358:	3c57      	subs	r4, #87	; 0x57
 800c35a:	e7db      	b.n	800c314 <_strtol_l.constprop.0+0x78>
 800c35c:	f04f 3cff 	mov.w	ip, #4294967295
 800c360:	e7e6      	b.n	800c330 <_strtol_l.constprop.0+0x94>
 800c362:	f1bc 0f00 	cmp.w	ip, #0
 800c366:	da05      	bge.n	800c374 <_strtol_l.constprop.0+0xd8>
 800c368:	2322      	movs	r3, #34	; 0x22
 800c36a:	6003      	str	r3, [r0, #0]
 800c36c:	4646      	mov	r6, r8
 800c36e:	b942      	cbnz	r2, 800c382 <_strtol_l.constprop.0+0xe6>
 800c370:	4630      	mov	r0, r6
 800c372:	e79e      	b.n	800c2b2 <_strtol_l.constprop.0+0x16>
 800c374:	b107      	cbz	r7, 800c378 <_strtol_l.constprop.0+0xdc>
 800c376:	4276      	negs	r6, r6
 800c378:	2a00      	cmp	r2, #0
 800c37a:	d0f9      	beq.n	800c370 <_strtol_l.constprop.0+0xd4>
 800c37c:	f1bc 0f00 	cmp.w	ip, #0
 800c380:	d000      	beq.n	800c384 <_strtol_l.constprop.0+0xe8>
 800c382:	1e69      	subs	r1, r5, #1
 800c384:	6011      	str	r1, [r2, #0]
 800c386:	e7f3      	b.n	800c370 <_strtol_l.constprop.0+0xd4>
 800c388:	2430      	movs	r4, #48	; 0x30
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1b1      	bne.n	800c2f2 <_strtol_l.constprop.0+0x56>
 800c38e:	2308      	movs	r3, #8
 800c390:	e7af      	b.n	800c2f2 <_strtol_l.constprop.0+0x56>
 800c392:	2c30      	cmp	r4, #48	; 0x30
 800c394:	d0a5      	beq.n	800c2e2 <_strtol_l.constprop.0+0x46>
 800c396:	230a      	movs	r3, #10
 800c398:	e7ab      	b.n	800c2f2 <_strtol_l.constprop.0+0x56>
 800c39a:	bf00      	nop
 800c39c:	0800fb9d 	.word	0x0800fb9d

0800c3a0 <_strtol_r>:
 800c3a0:	f7ff bf7c 	b.w	800c29c <_strtol_l.constprop.0>

0800c3a4 <_strtoul_l.constprop.0>:
 800c3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	4f36      	ldr	r7, [pc, #216]	; (800c484 <_strtoul_l.constprop.0+0xe0>)
 800c3aa:	4686      	mov	lr, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3b4:	5de6      	ldrb	r6, [r4, r7]
 800c3b6:	f016 0608 	ands.w	r6, r6, #8
 800c3ba:	d1f8      	bne.n	800c3ae <_strtoul_l.constprop.0+0xa>
 800c3bc:	2c2d      	cmp	r4, #45	; 0x2d
 800c3be:	d12f      	bne.n	800c420 <_strtoul_l.constprop.0+0x7c>
 800c3c0:	782c      	ldrb	r4, [r5, #0]
 800c3c2:	2601      	movs	r6, #1
 800c3c4:	1c85      	adds	r5, r0, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d057      	beq.n	800c47a <_strtoul_l.constprop.0+0xd6>
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d109      	bne.n	800c3e2 <_strtoul_l.constprop.0+0x3e>
 800c3ce:	2c30      	cmp	r4, #48	; 0x30
 800c3d0:	d107      	bne.n	800c3e2 <_strtoul_l.constprop.0+0x3e>
 800c3d2:	7828      	ldrb	r0, [r5, #0]
 800c3d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c3d8:	2858      	cmp	r0, #88	; 0x58
 800c3da:	d149      	bne.n	800c470 <_strtoul_l.constprop.0+0xcc>
 800c3dc:	786c      	ldrb	r4, [r5, #1]
 800c3de:	2310      	movs	r3, #16
 800c3e0:	3502      	adds	r5, #2
 800c3e2:	f04f 38ff 	mov.w	r8, #4294967295
 800c3e6:	2700      	movs	r7, #0
 800c3e8:	fbb8 f8f3 	udiv	r8, r8, r3
 800c3ec:	fb03 f908 	mul.w	r9, r3, r8
 800c3f0:	ea6f 0909 	mvn.w	r9, r9
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c3fa:	f1bc 0f09 	cmp.w	ip, #9
 800c3fe:	d814      	bhi.n	800c42a <_strtoul_l.constprop.0+0x86>
 800c400:	4664      	mov	r4, ip
 800c402:	42a3      	cmp	r3, r4
 800c404:	dd22      	ble.n	800c44c <_strtoul_l.constprop.0+0xa8>
 800c406:	2f00      	cmp	r7, #0
 800c408:	db1d      	blt.n	800c446 <_strtoul_l.constprop.0+0xa2>
 800c40a:	4580      	cmp	r8, r0
 800c40c:	d31b      	bcc.n	800c446 <_strtoul_l.constprop.0+0xa2>
 800c40e:	d101      	bne.n	800c414 <_strtoul_l.constprop.0+0x70>
 800c410:	45a1      	cmp	r9, r4
 800c412:	db18      	blt.n	800c446 <_strtoul_l.constprop.0+0xa2>
 800c414:	fb00 4003 	mla	r0, r0, r3, r4
 800c418:	2701      	movs	r7, #1
 800c41a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c41e:	e7ea      	b.n	800c3f6 <_strtoul_l.constprop.0+0x52>
 800c420:	2c2b      	cmp	r4, #43	; 0x2b
 800c422:	bf04      	itt	eq
 800c424:	782c      	ldrbeq	r4, [r5, #0]
 800c426:	1c85      	addeq	r5, r0, #2
 800c428:	e7cd      	b.n	800c3c6 <_strtoul_l.constprop.0+0x22>
 800c42a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c42e:	f1bc 0f19 	cmp.w	ip, #25
 800c432:	d801      	bhi.n	800c438 <_strtoul_l.constprop.0+0x94>
 800c434:	3c37      	subs	r4, #55	; 0x37
 800c436:	e7e4      	b.n	800c402 <_strtoul_l.constprop.0+0x5e>
 800c438:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c43c:	f1bc 0f19 	cmp.w	ip, #25
 800c440:	d804      	bhi.n	800c44c <_strtoul_l.constprop.0+0xa8>
 800c442:	3c57      	subs	r4, #87	; 0x57
 800c444:	e7dd      	b.n	800c402 <_strtoul_l.constprop.0+0x5e>
 800c446:	f04f 37ff 	mov.w	r7, #4294967295
 800c44a:	e7e6      	b.n	800c41a <_strtoul_l.constprop.0+0x76>
 800c44c:	2f00      	cmp	r7, #0
 800c44e:	da07      	bge.n	800c460 <_strtoul_l.constprop.0+0xbc>
 800c450:	2322      	movs	r3, #34	; 0x22
 800c452:	f8ce 3000 	str.w	r3, [lr]
 800c456:	f04f 30ff 	mov.w	r0, #4294967295
 800c45a:	b932      	cbnz	r2, 800c46a <_strtoul_l.constprop.0+0xc6>
 800c45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c460:	b106      	cbz	r6, 800c464 <_strtoul_l.constprop.0+0xc0>
 800c462:	4240      	negs	r0, r0
 800c464:	2a00      	cmp	r2, #0
 800c466:	d0f9      	beq.n	800c45c <_strtoul_l.constprop.0+0xb8>
 800c468:	b107      	cbz	r7, 800c46c <_strtoul_l.constprop.0+0xc8>
 800c46a:	1e69      	subs	r1, r5, #1
 800c46c:	6011      	str	r1, [r2, #0]
 800c46e:	e7f5      	b.n	800c45c <_strtoul_l.constprop.0+0xb8>
 800c470:	2430      	movs	r4, #48	; 0x30
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1b5      	bne.n	800c3e2 <_strtoul_l.constprop.0+0x3e>
 800c476:	2308      	movs	r3, #8
 800c478:	e7b3      	b.n	800c3e2 <_strtoul_l.constprop.0+0x3e>
 800c47a:	2c30      	cmp	r4, #48	; 0x30
 800c47c:	d0a9      	beq.n	800c3d2 <_strtoul_l.constprop.0+0x2e>
 800c47e:	230a      	movs	r3, #10
 800c480:	e7af      	b.n	800c3e2 <_strtoul_l.constprop.0+0x3e>
 800c482:	bf00      	nop
 800c484:	0800fb9d 	.word	0x0800fb9d

0800c488 <_strtoul_r>:
 800c488:	f7ff bf8c 	b.w	800c3a4 <_strtoul_l.constprop.0>

0800c48c <__submore>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	460c      	mov	r4, r1
 800c492:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c498:	4299      	cmp	r1, r3
 800c49a:	d11d      	bne.n	800c4d8 <__submore+0x4c>
 800c49c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c4a0:	f7fd fa4a 	bl	8009938 <_malloc_r>
 800c4a4:	b918      	cbnz	r0, 800c4ae <__submore+0x22>
 800c4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800c4b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c4be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c4c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c4c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c4ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c4ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c4d2:	6020      	str	r0, [r4, #0]
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e7e8      	b.n	800c4aa <__submore+0x1e>
 800c4d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c4da:	0077      	lsls	r7, r6, #1
 800c4dc:	463a      	mov	r2, r7
 800c4de:	f000 fa25 	bl	800c92c <_realloc_r>
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d0de      	beq.n	800c4a6 <__submore+0x1a>
 800c4e8:	eb00 0806 	add.w	r8, r0, r6
 800c4ec:	4601      	mov	r1, r0
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	f7fe fe55 	bl	800b1a0 <memcpy>
 800c4f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c4fa:	f8c4 8000 	str.w	r8, [r4]
 800c4fe:	e7e9      	b.n	800c4d4 <__submore+0x48>

0800c500 <__assert_func>:
 800c500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c502:	4614      	mov	r4, r2
 800c504:	461a      	mov	r2, r3
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <__assert_func+0x2c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4605      	mov	r5, r0
 800c50c:	68d8      	ldr	r0, [r3, #12]
 800c50e:	b14c      	cbz	r4, 800c524 <__assert_func+0x24>
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <__assert_func+0x30>)
 800c512:	9100      	str	r1, [sp, #0]
 800c514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c518:	4906      	ldr	r1, [pc, #24]	; (800c534 <__assert_func+0x34>)
 800c51a:	462b      	mov	r3, r5
 800c51c:	f000 f9a6 	bl	800c86c <fiprintf>
 800c520:	f000 fc5a 	bl	800cdd8 <abort>
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <__assert_func+0x38>)
 800c526:	461c      	mov	r4, r3
 800c528:	e7f3      	b.n	800c512 <__assert_func+0x12>
 800c52a:	bf00      	nop
 800c52c:	20000014 	.word	0x20000014
 800c530:	0800fb60 	.word	0x0800fb60
 800c534:	0800fb6d 	.word	0x0800fb6d
 800c538:	0800fb9b 	.word	0x0800fb9b

0800c53c <__sflush_r>:
 800c53c:	898a      	ldrh	r2, [r1, #12]
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	4605      	mov	r5, r0
 800c544:	0710      	lsls	r0, r2, #28
 800c546:	460c      	mov	r4, r1
 800c548:	d458      	bmi.n	800c5fc <__sflush_r+0xc0>
 800c54a:	684b      	ldr	r3, [r1, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dc05      	bgt.n	800c55c <__sflush_r+0x20>
 800c550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	dc02      	bgt.n	800c55c <__sflush_r+0x20>
 800c556:	2000      	movs	r0, #0
 800c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c55e:	2e00      	cmp	r6, #0
 800c560:	d0f9      	beq.n	800c556 <__sflush_r+0x1a>
 800c562:	2300      	movs	r3, #0
 800c564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c568:	682f      	ldr	r7, [r5, #0]
 800c56a:	602b      	str	r3, [r5, #0]
 800c56c:	d032      	beq.n	800c5d4 <__sflush_r+0x98>
 800c56e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	075a      	lsls	r2, r3, #29
 800c574:	d505      	bpl.n	800c582 <__sflush_r+0x46>
 800c576:	6863      	ldr	r3, [r4, #4]
 800c578:	1ac0      	subs	r0, r0, r3
 800c57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c57c:	b10b      	cbz	r3, 800c582 <__sflush_r+0x46>
 800c57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c580:	1ac0      	subs	r0, r0, r3
 800c582:	2300      	movs	r3, #0
 800c584:	4602      	mov	r2, r0
 800c586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c588:	6a21      	ldr	r1, [r4, #32]
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b0      	blx	r6
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	d106      	bne.n	800c5a2 <__sflush_r+0x66>
 800c594:	6829      	ldr	r1, [r5, #0]
 800c596:	291d      	cmp	r1, #29
 800c598:	d82c      	bhi.n	800c5f4 <__sflush_r+0xb8>
 800c59a:	4a2a      	ldr	r2, [pc, #168]	; (800c644 <__sflush_r+0x108>)
 800c59c:	40ca      	lsrs	r2, r1
 800c59e:	07d6      	lsls	r6, r2, #31
 800c5a0:	d528      	bpl.n	800c5f4 <__sflush_r+0xb8>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	6062      	str	r2, [r4, #4]
 800c5a6:	04d9      	lsls	r1, r3, #19
 800c5a8:	6922      	ldr	r2, [r4, #16]
 800c5aa:	6022      	str	r2, [r4, #0]
 800c5ac:	d504      	bpl.n	800c5b8 <__sflush_r+0x7c>
 800c5ae:	1c42      	adds	r2, r0, #1
 800c5b0:	d101      	bne.n	800c5b6 <__sflush_r+0x7a>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	b903      	cbnz	r3, 800c5b8 <__sflush_r+0x7c>
 800c5b6:	6560      	str	r0, [r4, #84]	; 0x54
 800c5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ba:	602f      	str	r7, [r5, #0]
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	d0ca      	beq.n	800c556 <__sflush_r+0x1a>
 800c5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5c4:	4299      	cmp	r1, r3
 800c5c6:	d002      	beq.n	800c5ce <__sflush_r+0x92>
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f7fd f949 	bl	8009860 <_free_r>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	6360      	str	r0, [r4, #52]	; 0x34
 800c5d2:	e7c1      	b.n	800c558 <__sflush_r+0x1c>
 800c5d4:	6a21      	ldr	r1, [r4, #32]
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4628      	mov	r0, r5
 800c5da:	47b0      	blx	r6
 800c5dc:	1c41      	adds	r1, r0, #1
 800c5de:	d1c7      	bne.n	800c570 <__sflush_r+0x34>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0c4      	beq.n	800c570 <__sflush_r+0x34>
 800c5e6:	2b1d      	cmp	r3, #29
 800c5e8:	d001      	beq.n	800c5ee <__sflush_r+0xb2>
 800c5ea:	2b16      	cmp	r3, #22
 800c5ec:	d101      	bne.n	800c5f2 <__sflush_r+0xb6>
 800c5ee:	602f      	str	r7, [r5, #0]
 800c5f0:	e7b1      	b.n	800c556 <__sflush_r+0x1a>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f8:	81a3      	strh	r3, [r4, #12]
 800c5fa:	e7ad      	b.n	800c558 <__sflush_r+0x1c>
 800c5fc:	690f      	ldr	r7, [r1, #16]
 800c5fe:	2f00      	cmp	r7, #0
 800c600:	d0a9      	beq.n	800c556 <__sflush_r+0x1a>
 800c602:	0793      	lsls	r3, r2, #30
 800c604:	680e      	ldr	r6, [r1, #0]
 800c606:	bf08      	it	eq
 800c608:	694b      	ldreq	r3, [r1, #20]
 800c60a:	600f      	str	r7, [r1, #0]
 800c60c:	bf18      	it	ne
 800c60e:	2300      	movne	r3, #0
 800c610:	eba6 0807 	sub.w	r8, r6, r7
 800c614:	608b      	str	r3, [r1, #8]
 800c616:	f1b8 0f00 	cmp.w	r8, #0
 800c61a:	dd9c      	ble.n	800c556 <__sflush_r+0x1a>
 800c61c:	6a21      	ldr	r1, [r4, #32]
 800c61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c620:	4643      	mov	r3, r8
 800c622:	463a      	mov	r2, r7
 800c624:	4628      	mov	r0, r5
 800c626:	47b0      	blx	r6
 800c628:	2800      	cmp	r0, #0
 800c62a:	dc06      	bgt.n	800c63a <__sflush_r+0xfe>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c632:	81a3      	strh	r3, [r4, #12]
 800c634:	f04f 30ff 	mov.w	r0, #4294967295
 800c638:	e78e      	b.n	800c558 <__sflush_r+0x1c>
 800c63a:	4407      	add	r7, r0
 800c63c:	eba8 0800 	sub.w	r8, r8, r0
 800c640:	e7e9      	b.n	800c616 <__sflush_r+0xda>
 800c642:	bf00      	nop
 800c644:	20400001 	.word	0x20400001

0800c648 <_fflush_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	690b      	ldr	r3, [r1, #16]
 800c64c:	4605      	mov	r5, r0
 800c64e:	460c      	mov	r4, r1
 800c650:	b913      	cbnz	r3, 800c658 <_fflush_r+0x10>
 800c652:	2500      	movs	r5, #0
 800c654:	4628      	mov	r0, r5
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	b118      	cbz	r0, 800c662 <_fflush_r+0x1a>
 800c65a:	6983      	ldr	r3, [r0, #24]
 800c65c:	b90b      	cbnz	r3, 800c662 <_fflush_r+0x1a>
 800c65e:	f000 f887 	bl	800c770 <__sinit>
 800c662:	4b14      	ldr	r3, [pc, #80]	; (800c6b4 <_fflush_r+0x6c>)
 800c664:	429c      	cmp	r4, r3
 800c666:	d11b      	bne.n	800c6a0 <_fflush_r+0x58>
 800c668:	686c      	ldr	r4, [r5, #4]
 800c66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0ef      	beq.n	800c652 <_fflush_r+0xa>
 800c672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c674:	07d0      	lsls	r0, r2, #31
 800c676:	d404      	bmi.n	800c682 <_fflush_r+0x3a>
 800c678:	0599      	lsls	r1, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_fflush_r+0x3a>
 800c67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67e:	f000 f927 	bl	800c8d0 <__retarget_lock_acquire_recursive>
 800c682:	4628      	mov	r0, r5
 800c684:	4621      	mov	r1, r4
 800c686:	f7ff ff59 	bl	800c53c <__sflush_r>
 800c68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c68c:	07da      	lsls	r2, r3, #31
 800c68e:	4605      	mov	r5, r0
 800c690:	d4e0      	bmi.n	800c654 <_fflush_r+0xc>
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	059b      	lsls	r3, r3, #22
 800c696:	d4dd      	bmi.n	800c654 <_fflush_r+0xc>
 800c698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c69a:	f000 f91a 	bl	800c8d2 <__retarget_lock_release_recursive>
 800c69e:	e7d9      	b.n	800c654 <_fflush_r+0xc>
 800c6a0:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <_fflush_r+0x70>)
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	d101      	bne.n	800c6aa <_fflush_r+0x62>
 800c6a6:	68ac      	ldr	r4, [r5, #8]
 800c6a8:	e7df      	b.n	800c66a <_fflush_r+0x22>
 800c6aa:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <_fflush_r+0x74>)
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	bf08      	it	eq
 800c6b0:	68ec      	ldreq	r4, [r5, #12]
 800c6b2:	e7da      	b.n	800c66a <_fflush_r+0x22>
 800c6b4:	0800fcc0 	.word	0x0800fcc0
 800c6b8:	0800fce0 	.word	0x0800fce0
 800c6bc:	0800fca0 	.word	0x0800fca0

0800c6c0 <std>:
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6ce:	6083      	str	r3, [r0, #8]
 800c6d0:	8181      	strh	r1, [r0, #12]
 800c6d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c6d4:	81c2      	strh	r2, [r0, #14]
 800c6d6:	6183      	str	r3, [r0, #24]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	2208      	movs	r2, #8
 800c6dc:	305c      	adds	r0, #92	; 0x5c
 800c6de:	f7fd f8b7 	bl	8009850 <memset>
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <std+0x38>)
 800c6e4:	6263      	str	r3, [r4, #36]	; 0x24
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <std+0x3c>)
 800c6e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <std+0x40>)
 800c6ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <std+0x44>)
 800c6f0:	6224      	str	r4, [r4, #32]
 800c6f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0800a3ad 	.word	0x0800a3ad
 800c6fc:	0800a3d3 	.word	0x0800a3d3
 800c700:	0800a40b 	.word	0x0800a40b
 800c704:	0800a42f 	.word	0x0800a42f

0800c708 <_cleanup_r>:
 800c708:	4901      	ldr	r1, [pc, #4]	; (800c710 <_cleanup_r+0x8>)
 800c70a:	f000 b8c1 	b.w	800c890 <_fwalk_reent>
 800c70e:	bf00      	nop
 800c710:	0800c649 	.word	0x0800c649

0800c714 <__sfmoreglue>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	2268      	movs	r2, #104	; 0x68
 800c718:	1e4d      	subs	r5, r1, #1
 800c71a:	4355      	muls	r5, r2
 800c71c:	460e      	mov	r6, r1
 800c71e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c722:	f7fd f909 	bl	8009938 <_malloc_r>
 800c726:	4604      	mov	r4, r0
 800c728:	b140      	cbz	r0, 800c73c <__sfmoreglue+0x28>
 800c72a:	2100      	movs	r1, #0
 800c72c:	e9c0 1600 	strd	r1, r6, [r0]
 800c730:	300c      	adds	r0, #12
 800c732:	60a0      	str	r0, [r4, #8]
 800c734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c738:	f7fd f88a 	bl	8009850 <memset>
 800c73c:	4620      	mov	r0, r4
 800c73e:	bd70      	pop	{r4, r5, r6, pc}

0800c740 <__sfp_lock_acquire>:
 800c740:	4801      	ldr	r0, [pc, #4]	; (800c748 <__sfp_lock_acquire+0x8>)
 800c742:	f000 b8c5 	b.w	800c8d0 <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	20011d91 	.word	0x20011d91

0800c74c <__sfp_lock_release>:
 800c74c:	4801      	ldr	r0, [pc, #4]	; (800c754 <__sfp_lock_release+0x8>)
 800c74e:	f000 b8c0 	b.w	800c8d2 <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	20011d91 	.word	0x20011d91

0800c758 <__sinit_lock_acquire>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__sinit_lock_acquire+0x8>)
 800c75a:	f000 b8b9 	b.w	800c8d0 <__retarget_lock_acquire_recursive>
 800c75e:	bf00      	nop
 800c760:	20011d92 	.word	0x20011d92

0800c764 <__sinit_lock_release>:
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <__sinit_lock_release+0x8>)
 800c766:	f000 b8b4 	b.w	800c8d2 <__retarget_lock_release_recursive>
 800c76a:	bf00      	nop
 800c76c:	20011d92 	.word	0x20011d92

0800c770 <__sinit>:
 800c770:	b510      	push	{r4, lr}
 800c772:	4604      	mov	r4, r0
 800c774:	f7ff fff0 	bl	800c758 <__sinit_lock_acquire>
 800c778:	69a3      	ldr	r3, [r4, #24]
 800c77a:	b11b      	cbz	r3, 800c784 <__sinit+0x14>
 800c77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c780:	f7ff bff0 	b.w	800c764 <__sinit_lock_release>
 800c784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c788:	6523      	str	r3, [r4, #80]	; 0x50
 800c78a:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <__sinit+0x68>)
 800c78c:	4a13      	ldr	r2, [pc, #76]	; (800c7dc <__sinit+0x6c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	62a2      	str	r2, [r4, #40]	; 0x28
 800c792:	42a3      	cmp	r3, r4
 800c794:	bf04      	itt	eq
 800c796:	2301      	moveq	r3, #1
 800c798:	61a3      	streq	r3, [r4, #24]
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 f820 	bl	800c7e0 <__sfp>
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 f81c 	bl	800c7e0 <__sfp>
 800c7a8:	60a0      	str	r0, [r4, #8]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 f818 	bl	800c7e0 <__sfp>
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	60e0      	str	r0, [r4, #12]
 800c7b4:	2104      	movs	r1, #4
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	f7ff ff82 	bl	800c6c0 <std>
 800c7bc:	68a0      	ldr	r0, [r4, #8]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	2109      	movs	r1, #9
 800c7c2:	f7ff ff7d 	bl	800c6c0 <std>
 800c7c6:	68e0      	ldr	r0, [r4, #12]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	2112      	movs	r1, #18
 800c7cc:	f7ff ff78 	bl	800c6c0 <std>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	61a3      	str	r3, [r4, #24]
 800c7d4:	e7d2      	b.n	800c77c <__sinit+0xc>
 800c7d6:	bf00      	nop
 800c7d8:	0800f914 	.word	0x0800f914
 800c7dc:	0800c709 	.word	0x0800c709

0800c7e0 <__sfp>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	4607      	mov	r7, r0
 800c7e4:	f7ff ffac 	bl	800c740 <__sfp_lock_acquire>
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <__sfp+0x84>)
 800c7ea:	681e      	ldr	r6, [r3, #0]
 800c7ec:	69b3      	ldr	r3, [r6, #24]
 800c7ee:	b913      	cbnz	r3, 800c7f6 <__sfp+0x16>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7ff ffbd 	bl	800c770 <__sinit>
 800c7f6:	3648      	adds	r6, #72	; 0x48
 800c7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	d503      	bpl.n	800c808 <__sfp+0x28>
 800c800:	6833      	ldr	r3, [r6, #0]
 800c802:	b30b      	cbz	r3, 800c848 <__sfp+0x68>
 800c804:	6836      	ldr	r6, [r6, #0]
 800c806:	e7f7      	b.n	800c7f8 <__sfp+0x18>
 800c808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c80c:	b9d5      	cbnz	r5, 800c844 <__sfp+0x64>
 800c80e:	4b16      	ldr	r3, [pc, #88]	; (800c868 <__sfp+0x88>)
 800c810:	60e3      	str	r3, [r4, #12]
 800c812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c816:	6665      	str	r5, [r4, #100]	; 0x64
 800c818:	f000 f859 	bl	800c8ce <__retarget_lock_init_recursive>
 800c81c:	f7ff ff96 	bl	800c74c <__sfp_lock_release>
 800c820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c828:	6025      	str	r5, [r4, #0]
 800c82a:	61a5      	str	r5, [r4, #24]
 800c82c:	2208      	movs	r2, #8
 800c82e:	4629      	mov	r1, r5
 800c830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c834:	f7fd f80c 	bl	8009850 <memset>
 800c838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c840:	4620      	mov	r0, r4
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	3468      	adds	r4, #104	; 0x68
 800c846:	e7d9      	b.n	800c7fc <__sfp+0x1c>
 800c848:	2104      	movs	r1, #4
 800c84a:	4638      	mov	r0, r7
 800c84c:	f7ff ff62 	bl	800c714 <__sfmoreglue>
 800c850:	4604      	mov	r4, r0
 800c852:	6030      	str	r0, [r6, #0]
 800c854:	2800      	cmp	r0, #0
 800c856:	d1d5      	bne.n	800c804 <__sfp+0x24>
 800c858:	f7ff ff78 	bl	800c74c <__sfp_lock_release>
 800c85c:	230c      	movs	r3, #12
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	e7ee      	b.n	800c840 <__sfp+0x60>
 800c862:	bf00      	nop
 800c864:	0800f914 	.word	0x0800f914
 800c868:	ffff0001 	.word	0xffff0001

0800c86c <fiprintf>:
 800c86c:	b40e      	push	{r1, r2, r3}
 800c86e:	b503      	push	{r0, r1, lr}
 800c870:	4601      	mov	r1, r0
 800c872:	ab03      	add	r3, sp, #12
 800c874:	4805      	ldr	r0, [pc, #20]	; (800c88c <fiprintf+0x20>)
 800c876:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	f000 f8ad 	bl	800c9dc <_vfiprintf_r>
 800c882:	b002      	add	sp, #8
 800c884:	f85d eb04 	ldr.w	lr, [sp], #4
 800c888:	b003      	add	sp, #12
 800c88a:	4770      	bx	lr
 800c88c:	20000014 	.word	0x20000014

0800c890 <_fwalk_reent>:
 800c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c894:	4606      	mov	r6, r0
 800c896:	4688      	mov	r8, r1
 800c898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c89c:	2700      	movs	r7, #0
 800c89e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c8a6:	d505      	bpl.n	800c8b4 <_fwalk_reent+0x24>
 800c8a8:	6824      	ldr	r4, [r4, #0]
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	d1f7      	bne.n	800c89e <_fwalk_reent+0xe>
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b4:	89ab      	ldrh	r3, [r5, #12]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d907      	bls.n	800c8ca <_fwalk_reent+0x3a>
 800c8ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	d003      	beq.n	800c8ca <_fwalk_reent+0x3a>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	47c0      	blx	r8
 800c8c8:	4307      	orrs	r7, r0
 800c8ca:	3568      	adds	r5, #104	; 0x68
 800c8cc:	e7e9      	b.n	800c8a2 <_fwalk_reent+0x12>

0800c8ce <__retarget_lock_init_recursive>:
 800c8ce:	4770      	bx	lr

0800c8d0 <__retarget_lock_acquire_recursive>:
 800c8d0:	4770      	bx	lr

0800c8d2 <__retarget_lock_release_recursive>:
 800c8d2:	4770      	bx	lr

0800c8d4 <__ascii_mbtowc>:
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	b901      	cbnz	r1, 800c8da <__ascii_mbtowc+0x6>
 800c8d8:	a901      	add	r1, sp, #4
 800c8da:	b142      	cbz	r2, 800c8ee <__ascii_mbtowc+0x1a>
 800c8dc:	b14b      	cbz	r3, 800c8f2 <__ascii_mbtowc+0x1e>
 800c8de:	7813      	ldrb	r3, [r2, #0]
 800c8e0:	600b      	str	r3, [r1, #0]
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	1e10      	subs	r0, r2, #0
 800c8e6:	bf18      	it	ne
 800c8e8:	2001      	movne	r0, #1
 800c8ea:	b002      	add	sp, #8
 800c8ec:	4770      	bx	lr
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	e7fb      	b.n	800c8ea <__ascii_mbtowc+0x16>
 800c8f2:	f06f 0001 	mvn.w	r0, #1
 800c8f6:	e7f8      	b.n	800c8ea <__ascii_mbtowc+0x16>

0800c8f8 <memmove>:
 800c8f8:	4288      	cmp	r0, r1
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	eb01 0402 	add.w	r4, r1, r2
 800c900:	d902      	bls.n	800c908 <memmove+0x10>
 800c902:	4284      	cmp	r4, r0
 800c904:	4623      	mov	r3, r4
 800c906:	d807      	bhi.n	800c918 <memmove+0x20>
 800c908:	1e43      	subs	r3, r0, #1
 800c90a:	42a1      	cmp	r1, r4
 800c90c:	d008      	beq.n	800c920 <memmove+0x28>
 800c90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c916:	e7f8      	b.n	800c90a <memmove+0x12>
 800c918:	4402      	add	r2, r0
 800c91a:	4601      	mov	r1, r0
 800c91c:	428a      	cmp	r2, r1
 800c91e:	d100      	bne.n	800c922 <memmove+0x2a>
 800c920:	bd10      	pop	{r4, pc}
 800c922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c92a:	e7f7      	b.n	800c91c <memmove+0x24>

0800c92c <_realloc_r>:
 800c92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c930:	4680      	mov	r8, r0
 800c932:	4614      	mov	r4, r2
 800c934:	460e      	mov	r6, r1
 800c936:	b921      	cbnz	r1, 800c942 <_realloc_r+0x16>
 800c938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c93c:	4611      	mov	r1, r2
 800c93e:	f7fc bffb 	b.w	8009938 <_malloc_r>
 800c942:	b92a      	cbnz	r2, 800c950 <_realloc_r+0x24>
 800c944:	f7fc ff8c 	bl	8009860 <_free_r>
 800c948:	4625      	mov	r5, r4
 800c94a:	4628      	mov	r0, r5
 800c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c950:	f000 faae 	bl	800ceb0 <_malloc_usable_size_r>
 800c954:	4284      	cmp	r4, r0
 800c956:	4607      	mov	r7, r0
 800c958:	d802      	bhi.n	800c960 <_realloc_r+0x34>
 800c95a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c95e:	d812      	bhi.n	800c986 <_realloc_r+0x5a>
 800c960:	4621      	mov	r1, r4
 800c962:	4640      	mov	r0, r8
 800c964:	f7fc ffe8 	bl	8009938 <_malloc_r>
 800c968:	4605      	mov	r5, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0ed      	beq.n	800c94a <_realloc_r+0x1e>
 800c96e:	42bc      	cmp	r4, r7
 800c970:	4622      	mov	r2, r4
 800c972:	4631      	mov	r1, r6
 800c974:	bf28      	it	cs
 800c976:	463a      	movcs	r2, r7
 800c978:	f7fe fc12 	bl	800b1a0 <memcpy>
 800c97c:	4631      	mov	r1, r6
 800c97e:	4640      	mov	r0, r8
 800c980:	f7fc ff6e 	bl	8009860 <_free_r>
 800c984:	e7e1      	b.n	800c94a <_realloc_r+0x1e>
 800c986:	4635      	mov	r5, r6
 800c988:	e7df      	b.n	800c94a <_realloc_r+0x1e>

0800c98a <__sfputc_r>:
 800c98a:	6893      	ldr	r3, [r2, #8]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	2b00      	cmp	r3, #0
 800c990:	b410      	push	{r4}
 800c992:	6093      	str	r3, [r2, #8]
 800c994:	da08      	bge.n	800c9a8 <__sfputc_r+0x1e>
 800c996:	6994      	ldr	r4, [r2, #24]
 800c998:	42a3      	cmp	r3, r4
 800c99a:	db01      	blt.n	800c9a0 <__sfputc_r+0x16>
 800c99c:	290a      	cmp	r1, #10
 800c99e:	d103      	bne.n	800c9a8 <__sfputc_r+0x1e>
 800c9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a4:	f000 b94a 	b.w	800cc3c <__swbuf_r>
 800c9a8:	6813      	ldr	r3, [r2, #0]
 800c9aa:	1c58      	adds	r0, r3, #1
 800c9ac:	6010      	str	r0, [r2, #0]
 800c9ae:	7019      	strb	r1, [r3, #0]
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <__sfputs_r>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460f      	mov	r7, r1
 800c9be:	4614      	mov	r4, r2
 800c9c0:	18d5      	adds	r5, r2, r3
 800c9c2:	42ac      	cmp	r4, r5
 800c9c4:	d101      	bne.n	800c9ca <__sfputs_r+0x12>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e007      	b.n	800c9da <__sfputs_r+0x22>
 800c9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ffda 	bl	800c98a <__sfputc_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	d1f3      	bne.n	800c9c2 <__sfputs_r+0xa>
 800c9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9dc <_vfiprintf_r>:
 800c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	b09d      	sub	sp, #116	; 0x74
 800c9e4:	4614      	mov	r4, r2
 800c9e6:	4698      	mov	r8, r3
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	b118      	cbz	r0, 800c9f4 <_vfiprintf_r+0x18>
 800c9ec:	6983      	ldr	r3, [r0, #24]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x18>
 800c9f0:	f7ff febe 	bl	800c770 <__sinit>
 800c9f4:	4b89      	ldr	r3, [pc, #548]	; (800cc1c <_vfiprintf_r+0x240>)
 800c9f6:	429d      	cmp	r5, r3
 800c9f8:	d11b      	bne.n	800ca32 <_vfiprintf_r+0x56>
 800c9fa:	6875      	ldr	r5, [r6, #4]
 800c9fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9fe:	07d9      	lsls	r1, r3, #31
 800ca00:	d405      	bmi.n	800ca0e <_vfiprintf_r+0x32>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	059a      	lsls	r2, r3, #22
 800ca06:	d402      	bmi.n	800ca0e <_vfiprintf_r+0x32>
 800ca08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0a:	f7ff ff61 	bl	800c8d0 <__retarget_lock_acquire_recursive>
 800ca0e:	89ab      	ldrh	r3, [r5, #12]
 800ca10:	071b      	lsls	r3, r3, #28
 800ca12:	d501      	bpl.n	800ca18 <_vfiprintf_r+0x3c>
 800ca14:	692b      	ldr	r3, [r5, #16]
 800ca16:	b9eb      	cbnz	r3, 800ca54 <_vfiprintf_r+0x78>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f000 f96e 	bl	800ccfc <__swsetup_r>
 800ca20:	b1c0      	cbz	r0, 800ca54 <_vfiprintf_r+0x78>
 800ca22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca24:	07dc      	lsls	r4, r3, #31
 800ca26:	d50e      	bpl.n	800ca46 <_vfiprintf_r+0x6a>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	b01d      	add	sp, #116	; 0x74
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca32:	4b7b      	ldr	r3, [pc, #492]	; (800cc20 <_vfiprintf_r+0x244>)
 800ca34:	429d      	cmp	r5, r3
 800ca36:	d101      	bne.n	800ca3c <_vfiprintf_r+0x60>
 800ca38:	68b5      	ldr	r5, [r6, #8]
 800ca3a:	e7df      	b.n	800c9fc <_vfiprintf_r+0x20>
 800ca3c:	4b79      	ldr	r3, [pc, #484]	; (800cc24 <_vfiprintf_r+0x248>)
 800ca3e:	429d      	cmp	r5, r3
 800ca40:	bf08      	it	eq
 800ca42:	68f5      	ldreq	r5, [r6, #12]
 800ca44:	e7da      	b.n	800c9fc <_vfiprintf_r+0x20>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	0598      	lsls	r0, r3, #22
 800ca4a:	d4ed      	bmi.n	800ca28 <_vfiprintf_r+0x4c>
 800ca4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca4e:	f7ff ff40 	bl	800c8d2 <__retarget_lock_release_recursive>
 800ca52:	e7e9      	b.n	800ca28 <_vfiprintf_r+0x4c>
 800ca54:	2300      	movs	r3, #0
 800ca56:	9309      	str	r3, [sp, #36]	; 0x24
 800ca58:	2320      	movs	r3, #32
 800ca5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca62:	2330      	movs	r3, #48	; 0x30
 800ca64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc28 <_vfiprintf_r+0x24c>
 800ca68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca6c:	f04f 0901 	mov.w	r9, #1
 800ca70:	4623      	mov	r3, r4
 800ca72:	469a      	mov	sl, r3
 800ca74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca78:	b10a      	cbz	r2, 800ca7e <_vfiprintf_r+0xa2>
 800ca7a:	2a25      	cmp	r2, #37	; 0x25
 800ca7c:	d1f9      	bne.n	800ca72 <_vfiprintf_r+0x96>
 800ca7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca82:	d00b      	beq.n	800ca9c <_vfiprintf_r+0xc0>
 800ca84:	465b      	mov	r3, fp
 800ca86:	4622      	mov	r2, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff ff94 	bl	800c9b8 <__sfputs_r>
 800ca90:	3001      	adds	r0, #1
 800ca92:	f000 80aa 	beq.w	800cbea <_vfiprintf_r+0x20e>
 800ca96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca98:	445a      	add	r2, fp
 800ca9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca9c:	f89a 3000 	ldrb.w	r3, [sl]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80a2 	beq.w	800cbea <_vfiprintf_r+0x20e>
 800caa6:	2300      	movs	r3, #0
 800caa8:	f04f 32ff 	mov.w	r2, #4294967295
 800caac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cab0:	f10a 0a01 	add.w	sl, sl, #1
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	9307      	str	r3, [sp, #28]
 800cab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cabc:	931a      	str	r3, [sp, #104]	; 0x68
 800cabe:	4654      	mov	r4, sl
 800cac0:	2205      	movs	r2, #5
 800cac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac6:	4858      	ldr	r0, [pc, #352]	; (800cc28 <_vfiprintf_r+0x24c>)
 800cac8:	f7f3 fba2 	bl	8000210 <memchr>
 800cacc:	9a04      	ldr	r2, [sp, #16]
 800cace:	b9d8      	cbnz	r0, 800cb08 <_vfiprintf_r+0x12c>
 800cad0:	06d1      	lsls	r1, r2, #27
 800cad2:	bf44      	itt	mi
 800cad4:	2320      	movmi	r3, #32
 800cad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cada:	0713      	lsls	r3, r2, #28
 800cadc:	bf44      	itt	mi
 800cade:	232b      	movmi	r3, #43	; 0x2b
 800cae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae4:	f89a 3000 	ldrb.w	r3, [sl]
 800cae8:	2b2a      	cmp	r3, #42	; 0x2a
 800caea:	d015      	beq.n	800cb18 <_vfiprintf_r+0x13c>
 800caec:	9a07      	ldr	r2, [sp, #28]
 800caee:	4654      	mov	r4, sl
 800caf0:	2000      	movs	r0, #0
 800caf2:	f04f 0c0a 	mov.w	ip, #10
 800caf6:	4621      	mov	r1, r4
 800caf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cafc:	3b30      	subs	r3, #48	; 0x30
 800cafe:	2b09      	cmp	r3, #9
 800cb00:	d94e      	bls.n	800cba0 <_vfiprintf_r+0x1c4>
 800cb02:	b1b0      	cbz	r0, 800cb32 <_vfiprintf_r+0x156>
 800cb04:	9207      	str	r2, [sp, #28]
 800cb06:	e014      	b.n	800cb32 <_vfiprintf_r+0x156>
 800cb08:	eba0 0308 	sub.w	r3, r0, r8
 800cb0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb10:	4313      	orrs	r3, r2
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	46a2      	mov	sl, r4
 800cb16:	e7d2      	b.n	800cabe <_vfiprintf_r+0xe2>
 800cb18:	9b03      	ldr	r3, [sp, #12]
 800cb1a:	1d19      	adds	r1, r3, #4
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	9103      	str	r1, [sp, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	bfbb      	ittet	lt
 800cb24:	425b      	neglt	r3, r3
 800cb26:	f042 0202 	orrlt.w	r2, r2, #2
 800cb2a:	9307      	strge	r3, [sp, #28]
 800cb2c:	9307      	strlt	r3, [sp, #28]
 800cb2e:	bfb8      	it	lt
 800cb30:	9204      	strlt	r2, [sp, #16]
 800cb32:	7823      	ldrb	r3, [r4, #0]
 800cb34:	2b2e      	cmp	r3, #46	; 0x2e
 800cb36:	d10c      	bne.n	800cb52 <_vfiprintf_r+0x176>
 800cb38:	7863      	ldrb	r3, [r4, #1]
 800cb3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb3c:	d135      	bne.n	800cbaa <_vfiprintf_r+0x1ce>
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	1d1a      	adds	r2, r3, #4
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	9203      	str	r2, [sp, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bfb8      	it	lt
 800cb4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb4e:	3402      	adds	r4, #2
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc38 <_vfiprintf_r+0x25c>
 800cb56:	7821      	ldrb	r1, [r4, #0]
 800cb58:	2203      	movs	r2, #3
 800cb5a:	4650      	mov	r0, sl
 800cb5c:	f7f3 fb58 	bl	8000210 <memchr>
 800cb60:	b140      	cbz	r0, 800cb74 <_vfiprintf_r+0x198>
 800cb62:	2340      	movs	r3, #64	; 0x40
 800cb64:	eba0 000a 	sub.w	r0, r0, sl
 800cb68:	fa03 f000 	lsl.w	r0, r3, r0
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	4303      	orrs	r3, r0
 800cb70:	3401      	adds	r4, #1
 800cb72:	9304      	str	r3, [sp, #16]
 800cb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb78:	482c      	ldr	r0, [pc, #176]	; (800cc2c <_vfiprintf_r+0x250>)
 800cb7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb7e:	2206      	movs	r2, #6
 800cb80:	f7f3 fb46 	bl	8000210 <memchr>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d03f      	beq.n	800cc08 <_vfiprintf_r+0x22c>
 800cb88:	4b29      	ldr	r3, [pc, #164]	; (800cc30 <_vfiprintf_r+0x254>)
 800cb8a:	bb1b      	cbnz	r3, 800cbd4 <_vfiprintf_r+0x1f8>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	3307      	adds	r3, #7
 800cb90:	f023 0307 	bic.w	r3, r3, #7
 800cb94:	3308      	adds	r3, #8
 800cb96:	9303      	str	r3, [sp, #12]
 800cb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb9a:	443b      	add	r3, r7
 800cb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9e:	e767      	b.n	800ca70 <_vfiprintf_r+0x94>
 800cba0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cba4:	460c      	mov	r4, r1
 800cba6:	2001      	movs	r0, #1
 800cba8:	e7a5      	b.n	800caf6 <_vfiprintf_r+0x11a>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	3401      	adds	r4, #1
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	f04f 0c0a 	mov.w	ip, #10
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbbc:	3a30      	subs	r2, #48	; 0x30
 800cbbe:	2a09      	cmp	r2, #9
 800cbc0:	d903      	bls.n	800cbca <_vfiprintf_r+0x1ee>
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0c5      	beq.n	800cb52 <_vfiprintf_r+0x176>
 800cbc6:	9105      	str	r1, [sp, #20]
 800cbc8:	e7c3      	b.n	800cb52 <_vfiprintf_r+0x176>
 800cbca:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbce:	4604      	mov	r4, r0
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e7f0      	b.n	800cbb6 <_vfiprintf_r+0x1da>
 800cbd4:	ab03      	add	r3, sp, #12
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	462a      	mov	r2, r5
 800cbda:	4b16      	ldr	r3, [pc, #88]	; (800cc34 <_vfiprintf_r+0x258>)
 800cbdc:	a904      	add	r1, sp, #16
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7fc ffbe 	bl	8009b60 <_printf_float>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	1c78      	adds	r0, r7, #1
 800cbe8:	d1d6      	bne.n	800cb98 <_vfiprintf_r+0x1bc>
 800cbea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbec:	07d9      	lsls	r1, r3, #31
 800cbee:	d405      	bmi.n	800cbfc <_vfiprintf_r+0x220>
 800cbf0:	89ab      	ldrh	r3, [r5, #12]
 800cbf2:	059a      	lsls	r2, r3, #22
 800cbf4:	d402      	bmi.n	800cbfc <_vfiprintf_r+0x220>
 800cbf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbf8:	f7ff fe6b 	bl	800c8d2 <__retarget_lock_release_recursive>
 800cbfc:	89ab      	ldrh	r3, [r5, #12]
 800cbfe:	065b      	lsls	r3, r3, #25
 800cc00:	f53f af12 	bmi.w	800ca28 <_vfiprintf_r+0x4c>
 800cc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc06:	e711      	b.n	800ca2c <_vfiprintf_r+0x50>
 800cc08:	ab03      	add	r3, sp, #12
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	462a      	mov	r2, r5
 800cc0e:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <_vfiprintf_r+0x258>)
 800cc10:	a904      	add	r1, sp, #16
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7fd fa48 	bl	800a0a8 <_printf_i>
 800cc18:	e7e4      	b.n	800cbe4 <_vfiprintf_r+0x208>
 800cc1a:	bf00      	nop
 800cc1c:	0800fcc0 	.word	0x0800fcc0
 800cc20:	0800fce0 	.word	0x0800fce0
 800cc24:	0800fca0 	.word	0x0800fca0
 800cc28:	0800fb34 	.word	0x0800fb34
 800cc2c:	0800fb3e 	.word	0x0800fb3e
 800cc30:	08009b61 	.word	0x08009b61
 800cc34:	0800c9b9 	.word	0x0800c9b9
 800cc38:	0800fb3a 	.word	0x0800fb3a

0800cc3c <__swbuf_r>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	460e      	mov	r6, r1
 800cc40:	4614      	mov	r4, r2
 800cc42:	4605      	mov	r5, r0
 800cc44:	b118      	cbz	r0, 800cc4e <__swbuf_r+0x12>
 800cc46:	6983      	ldr	r3, [r0, #24]
 800cc48:	b90b      	cbnz	r3, 800cc4e <__swbuf_r+0x12>
 800cc4a:	f7ff fd91 	bl	800c770 <__sinit>
 800cc4e:	4b21      	ldr	r3, [pc, #132]	; (800ccd4 <__swbuf_r+0x98>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	d12b      	bne.n	800ccac <__swbuf_r+0x70>
 800cc54:	686c      	ldr	r4, [r5, #4]
 800cc56:	69a3      	ldr	r3, [r4, #24]
 800cc58:	60a3      	str	r3, [r4, #8]
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	071a      	lsls	r2, r3, #28
 800cc5e:	d52f      	bpl.n	800ccc0 <__swbuf_r+0x84>
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	b36b      	cbz	r3, 800ccc0 <__swbuf_r+0x84>
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	1ac0      	subs	r0, r0, r3
 800cc6a:	6963      	ldr	r3, [r4, #20]
 800cc6c:	b2f6      	uxtb	r6, r6
 800cc6e:	4283      	cmp	r3, r0
 800cc70:	4637      	mov	r7, r6
 800cc72:	dc04      	bgt.n	800cc7e <__swbuf_r+0x42>
 800cc74:	4621      	mov	r1, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	f7ff fce6 	bl	800c648 <_fflush_r>
 800cc7c:	bb30      	cbnz	r0, 800cccc <__swbuf_r+0x90>
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	6022      	str	r2, [r4, #0]
 800cc8a:	701e      	strb	r6, [r3, #0]
 800cc8c:	6963      	ldr	r3, [r4, #20]
 800cc8e:	3001      	adds	r0, #1
 800cc90:	4283      	cmp	r3, r0
 800cc92:	d004      	beq.n	800cc9e <__swbuf_r+0x62>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	07db      	lsls	r3, r3, #31
 800cc98:	d506      	bpl.n	800cca8 <__swbuf_r+0x6c>
 800cc9a:	2e0a      	cmp	r6, #10
 800cc9c:	d104      	bne.n	800cca8 <__swbuf_r+0x6c>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4628      	mov	r0, r5
 800cca2:	f7ff fcd1 	bl	800c648 <_fflush_r>
 800cca6:	b988      	cbnz	r0, 800cccc <__swbuf_r+0x90>
 800cca8:	4638      	mov	r0, r7
 800ccaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <__swbuf_r+0x9c>)
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d101      	bne.n	800ccb6 <__swbuf_r+0x7a>
 800ccb2:	68ac      	ldr	r4, [r5, #8]
 800ccb4:	e7cf      	b.n	800cc56 <__swbuf_r+0x1a>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <__swbuf_r+0xa0>)
 800ccb8:	429c      	cmp	r4, r3
 800ccba:	bf08      	it	eq
 800ccbc:	68ec      	ldreq	r4, [r5, #12]
 800ccbe:	e7ca      	b.n	800cc56 <__swbuf_r+0x1a>
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f000 f81a 	bl	800ccfc <__swsetup_r>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0cb      	beq.n	800cc64 <__swbuf_r+0x28>
 800cccc:	f04f 37ff 	mov.w	r7, #4294967295
 800ccd0:	e7ea      	b.n	800cca8 <__swbuf_r+0x6c>
 800ccd2:	bf00      	nop
 800ccd4:	0800fcc0 	.word	0x0800fcc0
 800ccd8:	0800fce0 	.word	0x0800fce0
 800ccdc:	0800fca0 	.word	0x0800fca0

0800cce0 <__ascii_wctomb>:
 800cce0:	b149      	cbz	r1, 800ccf6 <__ascii_wctomb+0x16>
 800cce2:	2aff      	cmp	r2, #255	; 0xff
 800cce4:	bf85      	ittet	hi
 800cce6:	238a      	movhi	r3, #138	; 0x8a
 800cce8:	6003      	strhi	r3, [r0, #0]
 800ccea:	700a      	strbls	r2, [r1, #0]
 800ccec:	f04f 30ff 	movhi.w	r0, #4294967295
 800ccf0:	bf98      	it	ls
 800ccf2:	2001      	movls	r0, #1
 800ccf4:	4770      	bx	lr
 800ccf6:	4608      	mov	r0, r1
 800ccf8:	4770      	bx	lr
	...

0800ccfc <__swsetup_r>:
 800ccfc:	4b32      	ldr	r3, [pc, #200]	; (800cdc8 <__swsetup_r+0xcc>)
 800ccfe:	b570      	push	{r4, r5, r6, lr}
 800cd00:	681d      	ldr	r5, [r3, #0]
 800cd02:	4606      	mov	r6, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	b125      	cbz	r5, 800cd12 <__swsetup_r+0x16>
 800cd08:	69ab      	ldr	r3, [r5, #24]
 800cd0a:	b913      	cbnz	r3, 800cd12 <__swsetup_r+0x16>
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	f7ff fd2f 	bl	800c770 <__sinit>
 800cd12:	4b2e      	ldr	r3, [pc, #184]	; (800cdcc <__swsetup_r+0xd0>)
 800cd14:	429c      	cmp	r4, r3
 800cd16:	d10f      	bne.n	800cd38 <__swsetup_r+0x3c>
 800cd18:	686c      	ldr	r4, [r5, #4]
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd20:	0719      	lsls	r1, r3, #28
 800cd22:	d42c      	bmi.n	800cd7e <__swsetup_r+0x82>
 800cd24:	06dd      	lsls	r5, r3, #27
 800cd26:	d411      	bmi.n	800cd4c <__swsetup_r+0x50>
 800cd28:	2309      	movs	r3, #9
 800cd2a:	6033      	str	r3, [r6, #0]
 800cd2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	e03e      	b.n	800cdb6 <__swsetup_r+0xba>
 800cd38:	4b25      	ldr	r3, [pc, #148]	; (800cdd0 <__swsetup_r+0xd4>)
 800cd3a:	429c      	cmp	r4, r3
 800cd3c:	d101      	bne.n	800cd42 <__swsetup_r+0x46>
 800cd3e:	68ac      	ldr	r4, [r5, #8]
 800cd40:	e7eb      	b.n	800cd1a <__swsetup_r+0x1e>
 800cd42:	4b24      	ldr	r3, [pc, #144]	; (800cdd4 <__swsetup_r+0xd8>)
 800cd44:	429c      	cmp	r4, r3
 800cd46:	bf08      	it	eq
 800cd48:	68ec      	ldreq	r4, [r5, #12]
 800cd4a:	e7e6      	b.n	800cd1a <__swsetup_r+0x1e>
 800cd4c:	0758      	lsls	r0, r3, #29
 800cd4e:	d512      	bpl.n	800cd76 <__swsetup_r+0x7a>
 800cd50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd52:	b141      	cbz	r1, 800cd66 <__swsetup_r+0x6a>
 800cd54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	d002      	beq.n	800cd62 <__swsetup_r+0x66>
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7fc fd7f 	bl	8009860 <_free_r>
 800cd62:	2300      	movs	r3, #0
 800cd64:	6363      	str	r3, [r4, #52]	; 0x34
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd6c:	81a3      	strh	r3, [r4, #12]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	6063      	str	r3, [r4, #4]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	f043 0308 	orr.w	r3, r3, #8
 800cd7c:	81a3      	strh	r3, [r4, #12]
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	b94b      	cbnz	r3, 800cd96 <__swsetup_r+0x9a>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8c:	d003      	beq.n	800cd96 <__swsetup_r+0x9a>
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4630      	mov	r0, r6
 800cd92:	f000 f84d 	bl	800ce30 <__smakebuf_r>
 800cd96:	89a0      	ldrh	r0, [r4, #12]
 800cd98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd9c:	f010 0301 	ands.w	r3, r0, #1
 800cda0:	d00a      	beq.n	800cdb8 <__swsetup_r+0xbc>
 800cda2:	2300      	movs	r3, #0
 800cda4:	60a3      	str	r3, [r4, #8]
 800cda6:	6963      	ldr	r3, [r4, #20]
 800cda8:	425b      	negs	r3, r3
 800cdaa:	61a3      	str	r3, [r4, #24]
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	b943      	cbnz	r3, 800cdc2 <__swsetup_r+0xc6>
 800cdb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdb4:	d1ba      	bne.n	800cd2c <__swsetup_r+0x30>
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	0781      	lsls	r1, r0, #30
 800cdba:	bf58      	it	pl
 800cdbc:	6963      	ldrpl	r3, [r4, #20]
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	e7f4      	b.n	800cdac <__swsetup_r+0xb0>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e7f7      	b.n	800cdb6 <__swsetup_r+0xba>
 800cdc6:	bf00      	nop
 800cdc8:	20000014 	.word	0x20000014
 800cdcc:	0800fcc0 	.word	0x0800fcc0
 800cdd0:	0800fce0 	.word	0x0800fce0
 800cdd4:	0800fca0 	.word	0x0800fca0

0800cdd8 <abort>:
 800cdd8:	b508      	push	{r3, lr}
 800cdda:	2006      	movs	r0, #6
 800cddc:	f000 f898 	bl	800cf10 <raise>
 800cde0:	2001      	movs	r0, #1
 800cde2:	f7f6 fae9 	bl	80033b8 <_exit>

0800cde6 <__swhatbuf_r>:
 800cde6:	b570      	push	{r4, r5, r6, lr}
 800cde8:	460e      	mov	r6, r1
 800cdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdee:	2900      	cmp	r1, #0
 800cdf0:	b096      	sub	sp, #88	; 0x58
 800cdf2:	4614      	mov	r4, r2
 800cdf4:	461d      	mov	r5, r3
 800cdf6:	da08      	bge.n	800ce0a <__swhatbuf_r+0x24>
 800cdf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	602a      	str	r2, [r5, #0]
 800ce00:	061a      	lsls	r2, r3, #24
 800ce02:	d410      	bmi.n	800ce26 <__swhatbuf_r+0x40>
 800ce04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce08:	e00e      	b.n	800ce28 <__swhatbuf_r+0x42>
 800ce0a:	466a      	mov	r2, sp
 800ce0c:	f000 f89c 	bl	800cf48 <_fstat_r>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	dbf1      	blt.n	800cdf8 <__swhatbuf_r+0x12>
 800ce14:	9a01      	ldr	r2, [sp, #4]
 800ce16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce1e:	425a      	negs	r2, r3
 800ce20:	415a      	adcs	r2, r3
 800ce22:	602a      	str	r2, [r5, #0]
 800ce24:	e7ee      	b.n	800ce04 <__swhatbuf_r+0x1e>
 800ce26:	2340      	movs	r3, #64	; 0x40
 800ce28:	2000      	movs	r0, #0
 800ce2a:	6023      	str	r3, [r4, #0]
 800ce2c:	b016      	add	sp, #88	; 0x58
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}

0800ce30 <__smakebuf_r>:
 800ce30:	898b      	ldrh	r3, [r1, #12]
 800ce32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce34:	079d      	lsls	r5, r3, #30
 800ce36:	4606      	mov	r6, r0
 800ce38:	460c      	mov	r4, r1
 800ce3a:	d507      	bpl.n	800ce4c <__smakebuf_r+0x1c>
 800ce3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	2301      	movs	r3, #1
 800ce46:	6163      	str	r3, [r4, #20]
 800ce48:	b002      	add	sp, #8
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	ab01      	add	r3, sp, #4
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f7ff ffc9 	bl	800cde6 <__swhatbuf_r>
 800ce54:	9900      	ldr	r1, [sp, #0]
 800ce56:	4605      	mov	r5, r0
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7fc fd6d 	bl	8009938 <_malloc_r>
 800ce5e:	b948      	cbnz	r0, 800ce74 <__smakebuf_r+0x44>
 800ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce64:	059a      	lsls	r2, r3, #22
 800ce66:	d4ef      	bmi.n	800ce48 <__smakebuf_r+0x18>
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	f043 0302 	orr.w	r3, r3, #2
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	e7e3      	b.n	800ce3c <__smakebuf_r+0xc>
 800ce74:	4b0d      	ldr	r3, [pc, #52]	; (800ceac <__smakebuf_r+0x7c>)
 800ce76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	6020      	str	r0, [r4, #0]
 800ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	6163      	str	r3, [r4, #20]
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	6120      	str	r0, [r4, #16]
 800ce8a:	b15b      	cbz	r3, 800cea4 <__smakebuf_r+0x74>
 800ce8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce90:	4630      	mov	r0, r6
 800ce92:	f000 f86b 	bl	800cf6c <_isatty_r>
 800ce96:	b128      	cbz	r0, 800cea4 <__smakebuf_r+0x74>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f023 0303 	bic.w	r3, r3, #3
 800ce9e:	f043 0301 	orr.w	r3, r3, #1
 800cea2:	81a3      	strh	r3, [r4, #12]
 800cea4:	89a0      	ldrh	r0, [r4, #12]
 800cea6:	4305      	orrs	r5, r0
 800cea8:	81a5      	strh	r5, [r4, #12]
 800ceaa:	e7cd      	b.n	800ce48 <__smakebuf_r+0x18>
 800ceac:	0800c709 	.word	0x0800c709

0800ceb0 <_malloc_usable_size_r>:
 800ceb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb4:	1f18      	subs	r0, r3, #4
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	bfbc      	itt	lt
 800ceba:	580b      	ldrlt	r3, [r1, r0]
 800cebc:	18c0      	addlt	r0, r0, r3
 800cebe:	4770      	bx	lr

0800cec0 <_raise_r>:
 800cec0:	291f      	cmp	r1, #31
 800cec2:	b538      	push	{r3, r4, r5, lr}
 800cec4:	4604      	mov	r4, r0
 800cec6:	460d      	mov	r5, r1
 800cec8:	d904      	bls.n	800ced4 <_raise_r+0x14>
 800ceca:	2316      	movs	r3, #22
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ced6:	b112      	cbz	r2, 800cede <_raise_r+0x1e>
 800ced8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cedc:	b94b      	cbnz	r3, 800cef2 <_raise_r+0x32>
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 f830 	bl	800cf44 <_getpid_r>
 800cee4:	462a      	mov	r2, r5
 800cee6:	4601      	mov	r1, r0
 800cee8:	4620      	mov	r0, r4
 800ceea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceee:	f000 b817 	b.w	800cf20 <_kill_r>
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d00a      	beq.n	800cf0c <_raise_r+0x4c>
 800cef6:	1c59      	adds	r1, r3, #1
 800cef8:	d103      	bne.n	800cf02 <_raise_r+0x42>
 800cefa:	2316      	movs	r3, #22
 800cefc:	6003      	str	r3, [r0, #0]
 800cefe:	2001      	movs	r0, #1
 800cf00:	e7e7      	b.n	800ced2 <_raise_r+0x12>
 800cf02:	2400      	movs	r4, #0
 800cf04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf08:	4628      	mov	r0, r5
 800cf0a:	4798      	blx	r3
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	e7e0      	b.n	800ced2 <_raise_r+0x12>

0800cf10 <raise>:
 800cf10:	4b02      	ldr	r3, [pc, #8]	; (800cf1c <raise+0xc>)
 800cf12:	4601      	mov	r1, r0
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	f7ff bfd3 	b.w	800cec0 <_raise_r>
 800cf1a:	bf00      	nop
 800cf1c:	20000014 	.word	0x20000014

0800cf20 <_kill_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_kill_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	f7f6 fa33 	bl	8003398 <_kill>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_kill_r+0x1c>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_kill_r+0x1c>
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	20011d8c 	.word	0x20011d8c

0800cf44 <_getpid_r>:
 800cf44:	f7f6 ba20 	b.w	8003388 <_getpid>

0800cf48 <_fstat_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4d07      	ldr	r5, [pc, #28]	; (800cf68 <_fstat_r+0x20>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	602b      	str	r3, [r5, #0]
 800cf56:	f7f6 fa7e 	bl	8003456 <_fstat>
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	d102      	bne.n	800cf64 <_fstat_r+0x1c>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	b103      	cbz	r3, 800cf64 <_fstat_r+0x1c>
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	bd38      	pop	{r3, r4, r5, pc}
 800cf66:	bf00      	nop
 800cf68:	20011d8c 	.word	0x20011d8c

0800cf6c <_isatty_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d06      	ldr	r5, [pc, #24]	; (800cf88 <_isatty_r+0x1c>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	602b      	str	r3, [r5, #0]
 800cf78:	f7f6 fa7d 	bl	8003476 <_isatty>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_isatty_r+0x1a>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_isatty_r+0x1a>
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	20011d8c 	.word	0x20011d8c
 800cf8c:	00000000 	.word	0x00000000

0800cf90 <cos>:
 800cf90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf92:	ec53 2b10 	vmov	r2, r3, d0
 800cf96:	4826      	ldr	r0, [pc, #152]	; (800d030 <cos+0xa0>)
 800cf98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf9c:	4281      	cmp	r1, r0
 800cf9e:	dc06      	bgt.n	800cfae <cos+0x1e>
 800cfa0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d028 <cos+0x98>
 800cfa4:	b005      	add	sp, #20
 800cfa6:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfaa:	f001 ba41 	b.w	800e430 <__kernel_cos>
 800cfae:	4821      	ldr	r0, [pc, #132]	; (800d034 <cos+0xa4>)
 800cfb0:	4281      	cmp	r1, r0
 800cfb2:	dd09      	ble.n	800cfc8 <cos+0x38>
 800cfb4:	ee10 0a10 	vmov	r0, s0
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f7f3 f97d 	bl	80002b8 <__aeabi_dsub>
 800cfbe:	ec41 0b10 	vmov	d0, r0, r1
 800cfc2:	b005      	add	sp, #20
 800cfc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfc8:	4668      	mov	r0, sp
 800cfca:	f000 ff71 	bl	800deb0 <__ieee754_rem_pio2>
 800cfce:	f000 0003 	and.w	r0, r0, #3
 800cfd2:	2801      	cmp	r0, #1
 800cfd4:	d00b      	beq.n	800cfee <cos+0x5e>
 800cfd6:	2802      	cmp	r0, #2
 800cfd8:	d016      	beq.n	800d008 <cos+0x78>
 800cfda:	b9e0      	cbnz	r0, 800d016 <cos+0x86>
 800cfdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfe0:	ed9d 0b00 	vldr	d0, [sp]
 800cfe4:	f001 fa24 	bl	800e430 <__kernel_cos>
 800cfe8:	ec51 0b10 	vmov	r0, r1, d0
 800cfec:	e7e7      	b.n	800cfbe <cos+0x2e>
 800cfee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cff2:	ed9d 0b00 	vldr	d0, [sp]
 800cff6:	f001 fe33 	bl	800ec60 <__kernel_sin>
 800cffa:	ec53 2b10 	vmov	r2, r3, d0
 800cffe:	ee10 0a10 	vmov	r0, s0
 800d002:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d006:	e7da      	b.n	800cfbe <cos+0x2e>
 800d008:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d00c:	ed9d 0b00 	vldr	d0, [sp]
 800d010:	f001 fa0e 	bl	800e430 <__kernel_cos>
 800d014:	e7f1      	b.n	800cffa <cos+0x6a>
 800d016:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d01a:	ed9d 0b00 	vldr	d0, [sp]
 800d01e:	2001      	movs	r0, #1
 800d020:	f001 fe1e 	bl	800ec60 <__kernel_sin>
 800d024:	e7e0      	b.n	800cfe8 <cos+0x58>
 800d026:	bf00      	nop
	...
 800d030:	3fe921fb 	.word	0x3fe921fb
 800d034:	7fefffff 	.word	0x7fefffff

0800d038 <round>:
 800d038:	ec51 0b10 	vmov	r0, r1, d0
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d042:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d046:	2c13      	cmp	r4, #19
 800d048:	ee10 2a10 	vmov	r2, s0
 800d04c:	460b      	mov	r3, r1
 800d04e:	dc19      	bgt.n	800d084 <round+0x4c>
 800d050:	2c00      	cmp	r4, #0
 800d052:	da09      	bge.n	800d068 <round+0x30>
 800d054:	3401      	adds	r4, #1
 800d056:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d05a:	d103      	bne.n	800d064 <round+0x2c>
 800d05c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d064:	2200      	movs	r2, #0
 800d066:	e028      	b.n	800d0ba <round+0x82>
 800d068:	4d15      	ldr	r5, [pc, #84]	; (800d0c0 <round+0x88>)
 800d06a:	4125      	asrs	r5, r4
 800d06c:	ea01 0605 	and.w	r6, r1, r5
 800d070:	4332      	orrs	r2, r6
 800d072:	d00e      	beq.n	800d092 <round+0x5a>
 800d074:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d078:	fa42 f404 	asr.w	r4, r2, r4
 800d07c:	4423      	add	r3, r4
 800d07e:	ea23 0305 	bic.w	r3, r3, r5
 800d082:	e7ef      	b.n	800d064 <round+0x2c>
 800d084:	2c33      	cmp	r4, #51	; 0x33
 800d086:	dd07      	ble.n	800d098 <round+0x60>
 800d088:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d08c:	d101      	bne.n	800d092 <round+0x5a>
 800d08e:	f7f3 f915 	bl	80002bc <__adddf3>
 800d092:	ec41 0b10 	vmov	d0, r0, r1
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d09c:	f04f 35ff 	mov.w	r5, #4294967295
 800d0a0:	40f5      	lsrs	r5, r6
 800d0a2:	4228      	tst	r0, r5
 800d0a4:	d0f5      	beq.n	800d092 <round+0x5a>
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d0ac:	fa01 f404 	lsl.w	r4, r1, r4
 800d0b0:	1912      	adds	r2, r2, r4
 800d0b2:	bf28      	it	cs
 800d0b4:	185b      	addcs	r3, r3, r1
 800d0b6:	ea22 0205 	bic.w	r2, r2, r5
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	e7e8      	b.n	800d092 <round+0x5a>
 800d0c0:	000fffff 	.word	0x000fffff
 800d0c4:	00000000 	.word	0x00000000

0800d0c8 <sin>:
 800d0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0ca:	ec53 2b10 	vmov	r2, r3, d0
 800d0ce:	4828      	ldr	r0, [pc, #160]	; (800d170 <sin+0xa8>)
 800d0d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0d4:	4281      	cmp	r1, r0
 800d0d6:	dc07      	bgt.n	800d0e8 <sin+0x20>
 800d0d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d168 <sin+0xa0>
 800d0dc:	2000      	movs	r0, #0
 800d0de:	b005      	add	sp, #20
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	f001 bdbc 	b.w	800ec60 <__kernel_sin>
 800d0e8:	4822      	ldr	r0, [pc, #136]	; (800d174 <sin+0xac>)
 800d0ea:	4281      	cmp	r1, r0
 800d0ec:	dd09      	ble.n	800d102 <sin+0x3a>
 800d0ee:	ee10 0a10 	vmov	r0, s0
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f7f3 f8e0 	bl	80002b8 <__aeabi_dsub>
 800d0f8:	ec41 0b10 	vmov	d0, r0, r1
 800d0fc:	b005      	add	sp, #20
 800d0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d102:	4668      	mov	r0, sp
 800d104:	f000 fed4 	bl	800deb0 <__ieee754_rem_pio2>
 800d108:	f000 0003 	and.w	r0, r0, #3
 800d10c:	2801      	cmp	r0, #1
 800d10e:	d00c      	beq.n	800d12a <sin+0x62>
 800d110:	2802      	cmp	r0, #2
 800d112:	d011      	beq.n	800d138 <sin+0x70>
 800d114:	b9f0      	cbnz	r0, 800d154 <sin+0x8c>
 800d116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d11a:	ed9d 0b00 	vldr	d0, [sp]
 800d11e:	2001      	movs	r0, #1
 800d120:	f001 fd9e 	bl	800ec60 <__kernel_sin>
 800d124:	ec51 0b10 	vmov	r0, r1, d0
 800d128:	e7e6      	b.n	800d0f8 <sin+0x30>
 800d12a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d12e:	ed9d 0b00 	vldr	d0, [sp]
 800d132:	f001 f97d 	bl	800e430 <__kernel_cos>
 800d136:	e7f5      	b.n	800d124 <sin+0x5c>
 800d138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d13c:	ed9d 0b00 	vldr	d0, [sp]
 800d140:	2001      	movs	r0, #1
 800d142:	f001 fd8d 	bl	800ec60 <__kernel_sin>
 800d146:	ec53 2b10 	vmov	r2, r3, d0
 800d14a:	ee10 0a10 	vmov	r0, s0
 800d14e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d152:	e7d1      	b.n	800d0f8 <sin+0x30>
 800d154:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d158:	ed9d 0b00 	vldr	d0, [sp]
 800d15c:	f001 f968 	bl	800e430 <__kernel_cos>
 800d160:	e7f1      	b.n	800d146 <sin+0x7e>
 800d162:	bf00      	nop
 800d164:	f3af 8000 	nop.w
	...
 800d170:	3fe921fb 	.word	0x3fe921fb
 800d174:	7fefffff 	.word	0x7fefffff

0800d178 <atan2>:
 800d178:	f000 b89e 	b.w	800d2b8 <__ieee754_atan2>

0800d17c <pow>:
 800d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17e:	ed2d 8b02 	vpush	{d8}
 800d182:	eeb0 8a40 	vmov.f32	s16, s0
 800d186:	eef0 8a60 	vmov.f32	s17, s1
 800d18a:	ec55 4b11 	vmov	r4, r5, d1
 800d18e:	f000 f95f 	bl	800d450 <__ieee754_pow>
 800d192:	4622      	mov	r2, r4
 800d194:	462b      	mov	r3, r5
 800d196:	4620      	mov	r0, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	ec57 6b10 	vmov	r6, r7, d0
 800d19e:	f7f3 fcdd 	bl	8000b5c <__aeabi_dcmpun>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d13b      	bne.n	800d21e <pow+0xa2>
 800d1a6:	ec51 0b18 	vmov	r0, r1, d8
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f7f3 fca3 	bl	8000af8 <__aeabi_dcmpeq>
 800d1b2:	b1b8      	cbz	r0, 800d1e4 <pow+0x68>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f7f3 fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d146      	bne.n	800d252 <pow+0xd6>
 800d1c4:	ec45 4b10 	vmov	d0, r4, r5
 800d1c8:	f001 ffe3 	bl	800f192 <finite>
 800d1cc:	b338      	cbz	r0, 800d21e <pow+0xa2>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 fc99 	bl	8000b0c <__aeabi_dcmplt>
 800d1da:	b300      	cbz	r0, 800d21e <pow+0xa2>
 800d1dc:	f7fc fb06 	bl	80097ec <__errno>
 800d1e0:	2322      	movs	r3, #34	; 0x22
 800d1e2:	e01b      	b.n	800d21c <pow+0xa0>
 800d1e4:	ec47 6b10 	vmov	d0, r6, r7
 800d1e8:	f001 ffd3 	bl	800f192 <finite>
 800d1ec:	b9e0      	cbnz	r0, 800d228 <pow+0xac>
 800d1ee:	eeb0 0a48 	vmov.f32	s0, s16
 800d1f2:	eef0 0a68 	vmov.f32	s1, s17
 800d1f6:	f001 ffcc 	bl	800f192 <finite>
 800d1fa:	b1a8      	cbz	r0, 800d228 <pow+0xac>
 800d1fc:	ec45 4b10 	vmov	d0, r4, r5
 800d200:	f001 ffc7 	bl	800f192 <finite>
 800d204:	b180      	cbz	r0, 800d228 <pow+0xac>
 800d206:	4632      	mov	r2, r6
 800d208:	463b      	mov	r3, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 fca5 	bl	8000b5c <__aeabi_dcmpun>
 800d212:	2800      	cmp	r0, #0
 800d214:	d0e2      	beq.n	800d1dc <pow+0x60>
 800d216:	f7fc fae9 	bl	80097ec <__errno>
 800d21a:	2321      	movs	r3, #33	; 0x21
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	ecbd 8b02 	vpop	{d8}
 800d222:	ec47 6b10 	vmov	d0, r6, r7
 800d226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d228:	2200      	movs	r2, #0
 800d22a:	2300      	movs	r3, #0
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 fc62 	bl	8000af8 <__aeabi_dcmpeq>
 800d234:	2800      	cmp	r0, #0
 800d236:	d0f2      	beq.n	800d21e <pow+0xa2>
 800d238:	eeb0 0a48 	vmov.f32	s0, s16
 800d23c:	eef0 0a68 	vmov.f32	s1, s17
 800d240:	f001 ffa7 	bl	800f192 <finite>
 800d244:	2800      	cmp	r0, #0
 800d246:	d0ea      	beq.n	800d21e <pow+0xa2>
 800d248:	ec45 4b10 	vmov	d0, r4, r5
 800d24c:	f001 ffa1 	bl	800f192 <finite>
 800d250:	e7c3      	b.n	800d1da <pow+0x5e>
 800d252:	4f01      	ldr	r7, [pc, #4]	; (800d258 <pow+0xdc>)
 800d254:	2600      	movs	r6, #0
 800d256:	e7e2      	b.n	800d21e <pow+0xa2>
 800d258:	3ff00000 	.word	0x3ff00000

0800d25c <sqrt>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	ed2d 8b02 	vpush	{d8}
 800d262:	ec55 4b10 	vmov	r4, r5, d0
 800d266:	f001 f82f 	bl	800e2c8 <__ieee754_sqrt>
 800d26a:	4622      	mov	r2, r4
 800d26c:	462b      	mov	r3, r5
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	eeb0 8a40 	vmov.f32	s16, s0
 800d276:	eef0 8a60 	vmov.f32	s17, s1
 800d27a:	f7f3 fc6f 	bl	8000b5c <__aeabi_dcmpun>
 800d27e:	b990      	cbnz	r0, 800d2a6 <sqrt+0x4a>
 800d280:	2200      	movs	r2, #0
 800d282:	2300      	movs	r3, #0
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 fc40 	bl	8000b0c <__aeabi_dcmplt>
 800d28c:	b158      	cbz	r0, 800d2a6 <sqrt+0x4a>
 800d28e:	f7fc faad 	bl	80097ec <__errno>
 800d292:	2321      	movs	r3, #33	; 0x21
 800d294:	6003      	str	r3, [r0, #0]
 800d296:	2200      	movs	r2, #0
 800d298:	2300      	movs	r3, #0
 800d29a:	4610      	mov	r0, r2
 800d29c:	4619      	mov	r1, r3
 800d29e:	f7f3 faed 	bl	800087c <__aeabi_ddiv>
 800d2a2:	ec41 0b18 	vmov	d8, r0, r1
 800d2a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d2aa:	eef0 0a68 	vmov.f32	s1, s17
 800d2ae:	ecbd 8b02 	vpop	{d8}
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	0000      	movs	r0, r0
	...

0800d2b8 <__ieee754_atan2>:
 800d2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	ec57 6b11 	vmov	r6, r7, d1
 800d2c0:	4273      	negs	r3, r6
 800d2c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d448 <__ieee754_atan2+0x190>
 800d2c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d2ca:	4333      	orrs	r3, r6
 800d2cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d2d0:	4573      	cmp	r3, lr
 800d2d2:	ec51 0b10 	vmov	r0, r1, d0
 800d2d6:	ee11 8a10 	vmov	r8, s2
 800d2da:	d80a      	bhi.n	800d2f2 <__ieee754_atan2+0x3a>
 800d2dc:	4244      	negs	r4, r0
 800d2de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2e2:	4304      	orrs	r4, r0
 800d2e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d2e8:	4574      	cmp	r4, lr
 800d2ea:	ee10 9a10 	vmov	r9, s0
 800d2ee:	468c      	mov	ip, r1
 800d2f0:	d907      	bls.n	800d302 <__ieee754_atan2+0x4a>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f2 ffe1 	bl	80002bc <__adddf3>
 800d2fa:	ec41 0b10 	vmov	d0, r0, r1
 800d2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d302:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d306:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d30a:	4334      	orrs	r4, r6
 800d30c:	d103      	bne.n	800d316 <__ieee754_atan2+0x5e>
 800d30e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d312:	f001 bd95 	b.w	800ee40 <atan>
 800d316:	17bc      	asrs	r4, r7, #30
 800d318:	f004 0402 	and.w	r4, r4, #2
 800d31c:	ea53 0909 	orrs.w	r9, r3, r9
 800d320:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d324:	d107      	bne.n	800d336 <__ieee754_atan2+0x7e>
 800d326:	2c02      	cmp	r4, #2
 800d328:	d060      	beq.n	800d3ec <__ieee754_atan2+0x134>
 800d32a:	2c03      	cmp	r4, #3
 800d32c:	d1e5      	bne.n	800d2fa <__ieee754_atan2+0x42>
 800d32e:	a142      	add	r1, pc, #264	; (adr r1, 800d438 <__ieee754_atan2+0x180>)
 800d330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d334:	e7e1      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d336:	ea52 0808 	orrs.w	r8, r2, r8
 800d33a:	d106      	bne.n	800d34a <__ieee754_atan2+0x92>
 800d33c:	f1bc 0f00 	cmp.w	ip, #0
 800d340:	da5f      	bge.n	800d402 <__ieee754_atan2+0x14a>
 800d342:	a13f      	add	r1, pc, #252	; (adr r1, 800d440 <__ieee754_atan2+0x188>)
 800d344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d348:	e7d7      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d34a:	4572      	cmp	r2, lr
 800d34c:	d10f      	bne.n	800d36e <__ieee754_atan2+0xb6>
 800d34e:	4293      	cmp	r3, r2
 800d350:	f104 34ff 	add.w	r4, r4, #4294967295
 800d354:	d107      	bne.n	800d366 <__ieee754_atan2+0xae>
 800d356:	2c02      	cmp	r4, #2
 800d358:	d84c      	bhi.n	800d3f4 <__ieee754_atan2+0x13c>
 800d35a:	4b35      	ldr	r3, [pc, #212]	; (800d430 <__ieee754_atan2+0x178>)
 800d35c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d360:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d364:	e7c9      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d366:	2c02      	cmp	r4, #2
 800d368:	d848      	bhi.n	800d3fc <__ieee754_atan2+0x144>
 800d36a:	4b32      	ldr	r3, [pc, #200]	; (800d434 <__ieee754_atan2+0x17c>)
 800d36c:	e7f6      	b.n	800d35c <__ieee754_atan2+0xa4>
 800d36e:	4573      	cmp	r3, lr
 800d370:	d0e4      	beq.n	800d33c <__ieee754_atan2+0x84>
 800d372:	1a9b      	subs	r3, r3, r2
 800d374:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d378:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d37c:	da1e      	bge.n	800d3bc <__ieee754_atan2+0x104>
 800d37e:	2f00      	cmp	r7, #0
 800d380:	da01      	bge.n	800d386 <__ieee754_atan2+0xce>
 800d382:	323c      	adds	r2, #60	; 0x3c
 800d384:	db1e      	blt.n	800d3c4 <__ieee754_atan2+0x10c>
 800d386:	4632      	mov	r2, r6
 800d388:	463b      	mov	r3, r7
 800d38a:	f7f3 fa77 	bl	800087c <__aeabi_ddiv>
 800d38e:	ec41 0b10 	vmov	d0, r0, r1
 800d392:	f001 fef5 	bl	800f180 <fabs>
 800d396:	f001 fd53 	bl	800ee40 <atan>
 800d39a:	ec51 0b10 	vmov	r0, r1, d0
 800d39e:	2c01      	cmp	r4, #1
 800d3a0:	d013      	beq.n	800d3ca <__ieee754_atan2+0x112>
 800d3a2:	2c02      	cmp	r4, #2
 800d3a4:	d015      	beq.n	800d3d2 <__ieee754_atan2+0x11a>
 800d3a6:	2c00      	cmp	r4, #0
 800d3a8:	d0a7      	beq.n	800d2fa <__ieee754_atan2+0x42>
 800d3aa:	a319      	add	r3, pc, #100	; (adr r3, 800d410 <__ieee754_atan2+0x158>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f2 ff82 	bl	80002b8 <__aeabi_dsub>
 800d3b4:	a318      	add	r3, pc, #96	; (adr r3, 800d418 <__ieee754_atan2+0x160>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	e014      	b.n	800d3e6 <__ieee754_atan2+0x12e>
 800d3bc:	a118      	add	r1, pc, #96	; (adr r1, 800d420 <__ieee754_atan2+0x168>)
 800d3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3c2:	e7ec      	b.n	800d39e <__ieee754_atan2+0xe6>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	e7e9      	b.n	800d39e <__ieee754_atan2+0xe6>
 800d3ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	e793      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d3d2:	a30f      	add	r3, pc, #60	; (adr r3, 800d410 <__ieee754_atan2+0x158>)
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f7f2 ff6e 	bl	80002b8 <__aeabi_dsub>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	a10d      	add	r1, pc, #52	; (adr r1, 800d418 <__ieee754_atan2+0x160>)
 800d3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3e6:	f7f2 ff67 	bl	80002b8 <__aeabi_dsub>
 800d3ea:	e786      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d3ec:	a10a      	add	r1, pc, #40	; (adr r1, 800d418 <__ieee754_atan2+0x160>)
 800d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f2:	e782      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d3f4:	a10c      	add	r1, pc, #48	; (adr r1, 800d428 <__ieee754_atan2+0x170>)
 800d3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3fa:	e77e      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	2100      	movs	r1, #0
 800d400:	e77b      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d402:	a107      	add	r1, pc, #28	; (adr r1, 800d420 <__ieee754_atan2+0x168>)
 800d404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d408:	e777      	b.n	800d2fa <__ieee754_atan2+0x42>
 800d40a:	bf00      	nop
 800d40c:	f3af 8000 	nop.w
 800d410:	33145c07 	.word	0x33145c07
 800d414:	3ca1a626 	.word	0x3ca1a626
 800d418:	54442d18 	.word	0x54442d18
 800d41c:	400921fb 	.word	0x400921fb
 800d420:	54442d18 	.word	0x54442d18
 800d424:	3ff921fb 	.word	0x3ff921fb
 800d428:	54442d18 	.word	0x54442d18
 800d42c:	3fe921fb 	.word	0x3fe921fb
 800d430:	0800fd10 	.word	0x0800fd10
 800d434:	0800fd28 	.word	0x0800fd28
 800d438:	54442d18 	.word	0x54442d18
 800d43c:	c00921fb 	.word	0xc00921fb
 800d440:	54442d18 	.word	0x54442d18
 800d444:	bff921fb 	.word	0xbff921fb
 800d448:	7ff00000 	.word	0x7ff00000
 800d44c:	00000000 	.word	0x00000000

0800d450 <__ieee754_pow>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	ed2d 8b06 	vpush	{d8-d10}
 800d458:	b089      	sub	sp, #36	; 0x24
 800d45a:	ed8d 1b00 	vstr	d1, [sp]
 800d45e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d462:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d466:	ea58 0102 	orrs.w	r1, r8, r2
 800d46a:	ec57 6b10 	vmov	r6, r7, d0
 800d46e:	d115      	bne.n	800d49c <__ieee754_pow+0x4c>
 800d470:	19b3      	adds	r3, r6, r6
 800d472:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d476:	4152      	adcs	r2, r2
 800d478:	4299      	cmp	r1, r3
 800d47a:	4b89      	ldr	r3, [pc, #548]	; (800d6a0 <__ieee754_pow+0x250>)
 800d47c:	4193      	sbcs	r3, r2
 800d47e:	f080 84d2 	bcs.w	800de26 <__ieee754_pow+0x9d6>
 800d482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d486:	4630      	mov	r0, r6
 800d488:	4639      	mov	r1, r7
 800d48a:	f7f2 ff17 	bl	80002bc <__adddf3>
 800d48e:	ec41 0b10 	vmov	d0, r0, r1
 800d492:	b009      	add	sp, #36	; 0x24
 800d494:	ecbd 8b06 	vpop	{d8-d10}
 800d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49c:	4b81      	ldr	r3, [pc, #516]	; (800d6a4 <__ieee754_pow+0x254>)
 800d49e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d4a2:	429c      	cmp	r4, r3
 800d4a4:	ee10 aa10 	vmov	sl, s0
 800d4a8:	463d      	mov	r5, r7
 800d4aa:	dc06      	bgt.n	800d4ba <__ieee754_pow+0x6a>
 800d4ac:	d101      	bne.n	800d4b2 <__ieee754_pow+0x62>
 800d4ae:	2e00      	cmp	r6, #0
 800d4b0:	d1e7      	bne.n	800d482 <__ieee754_pow+0x32>
 800d4b2:	4598      	cmp	r8, r3
 800d4b4:	dc01      	bgt.n	800d4ba <__ieee754_pow+0x6a>
 800d4b6:	d10f      	bne.n	800d4d8 <__ieee754_pow+0x88>
 800d4b8:	b172      	cbz	r2, 800d4d8 <__ieee754_pow+0x88>
 800d4ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d4be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d4c2:	ea55 050a 	orrs.w	r5, r5, sl
 800d4c6:	d1dc      	bne.n	800d482 <__ieee754_pow+0x32>
 800d4c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4cc:	18db      	adds	r3, r3, r3
 800d4ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d4d2:	4152      	adcs	r2, r2
 800d4d4:	429d      	cmp	r5, r3
 800d4d6:	e7d0      	b.n	800d47a <__ieee754_pow+0x2a>
 800d4d8:	2d00      	cmp	r5, #0
 800d4da:	da3b      	bge.n	800d554 <__ieee754_pow+0x104>
 800d4dc:	4b72      	ldr	r3, [pc, #456]	; (800d6a8 <__ieee754_pow+0x258>)
 800d4de:	4598      	cmp	r8, r3
 800d4e0:	dc51      	bgt.n	800d586 <__ieee754_pow+0x136>
 800d4e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d4e6:	4598      	cmp	r8, r3
 800d4e8:	f340 84ac 	ble.w	800de44 <__ieee754_pow+0x9f4>
 800d4ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d4f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4f4:	2b14      	cmp	r3, #20
 800d4f6:	dd0f      	ble.n	800d518 <__ieee754_pow+0xc8>
 800d4f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d4fc:	fa22 f103 	lsr.w	r1, r2, r3
 800d500:	fa01 f303 	lsl.w	r3, r1, r3
 800d504:	4293      	cmp	r3, r2
 800d506:	f040 849d 	bne.w	800de44 <__ieee754_pow+0x9f4>
 800d50a:	f001 0101 	and.w	r1, r1, #1
 800d50e:	f1c1 0302 	rsb	r3, r1, #2
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	b182      	cbz	r2, 800d538 <__ieee754_pow+0xe8>
 800d516:	e05f      	b.n	800d5d8 <__ieee754_pow+0x188>
 800d518:	2a00      	cmp	r2, #0
 800d51a:	d15b      	bne.n	800d5d4 <__ieee754_pow+0x184>
 800d51c:	f1c3 0314 	rsb	r3, r3, #20
 800d520:	fa48 f103 	asr.w	r1, r8, r3
 800d524:	fa01 f303 	lsl.w	r3, r1, r3
 800d528:	4543      	cmp	r3, r8
 800d52a:	f040 8488 	bne.w	800de3e <__ieee754_pow+0x9ee>
 800d52e:	f001 0101 	and.w	r1, r1, #1
 800d532:	f1c1 0302 	rsb	r3, r1, #2
 800d536:	9304      	str	r3, [sp, #16]
 800d538:	4b5c      	ldr	r3, [pc, #368]	; (800d6ac <__ieee754_pow+0x25c>)
 800d53a:	4598      	cmp	r8, r3
 800d53c:	d132      	bne.n	800d5a4 <__ieee754_pow+0x154>
 800d53e:	f1b9 0f00 	cmp.w	r9, #0
 800d542:	f280 8478 	bge.w	800de36 <__ieee754_pow+0x9e6>
 800d546:	4959      	ldr	r1, [pc, #356]	; (800d6ac <__ieee754_pow+0x25c>)
 800d548:	4632      	mov	r2, r6
 800d54a:	463b      	mov	r3, r7
 800d54c:	2000      	movs	r0, #0
 800d54e:	f7f3 f995 	bl	800087c <__aeabi_ddiv>
 800d552:	e79c      	b.n	800d48e <__ieee754_pow+0x3e>
 800d554:	2300      	movs	r3, #0
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d13d      	bne.n	800d5d8 <__ieee754_pow+0x188>
 800d55c:	4b51      	ldr	r3, [pc, #324]	; (800d6a4 <__ieee754_pow+0x254>)
 800d55e:	4598      	cmp	r8, r3
 800d560:	d1ea      	bne.n	800d538 <__ieee754_pow+0xe8>
 800d562:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d566:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d56a:	ea53 030a 	orrs.w	r3, r3, sl
 800d56e:	f000 845a 	beq.w	800de26 <__ieee754_pow+0x9d6>
 800d572:	4b4f      	ldr	r3, [pc, #316]	; (800d6b0 <__ieee754_pow+0x260>)
 800d574:	429c      	cmp	r4, r3
 800d576:	dd08      	ble.n	800d58a <__ieee754_pow+0x13a>
 800d578:	f1b9 0f00 	cmp.w	r9, #0
 800d57c:	f2c0 8457 	blt.w	800de2e <__ieee754_pow+0x9de>
 800d580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d584:	e783      	b.n	800d48e <__ieee754_pow+0x3e>
 800d586:	2302      	movs	r3, #2
 800d588:	e7e5      	b.n	800d556 <__ieee754_pow+0x106>
 800d58a:	f1b9 0f00 	cmp.w	r9, #0
 800d58e:	f04f 0000 	mov.w	r0, #0
 800d592:	f04f 0100 	mov.w	r1, #0
 800d596:	f6bf af7a 	bge.w	800d48e <__ieee754_pow+0x3e>
 800d59a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d59e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d5a2:	e774      	b.n	800d48e <__ieee754_pow+0x3e>
 800d5a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d5a8:	d106      	bne.n	800d5b8 <__ieee754_pow+0x168>
 800d5aa:	4632      	mov	r2, r6
 800d5ac:	463b      	mov	r3, r7
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	f7f3 f839 	bl	8000628 <__aeabi_dmul>
 800d5b6:	e76a      	b.n	800d48e <__ieee754_pow+0x3e>
 800d5b8:	4b3e      	ldr	r3, [pc, #248]	; (800d6b4 <__ieee754_pow+0x264>)
 800d5ba:	4599      	cmp	r9, r3
 800d5bc:	d10c      	bne.n	800d5d8 <__ieee754_pow+0x188>
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	db0a      	blt.n	800d5d8 <__ieee754_pow+0x188>
 800d5c2:	ec47 6b10 	vmov	d0, r6, r7
 800d5c6:	b009      	add	sp, #36	; 0x24
 800d5c8:	ecbd 8b06 	vpop	{d8-d10}
 800d5cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	f000 be7a 	b.w	800e2c8 <__ieee754_sqrt>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9304      	str	r3, [sp, #16]
 800d5d8:	ec47 6b10 	vmov	d0, r6, r7
 800d5dc:	f001 fdd0 	bl	800f180 <fabs>
 800d5e0:	ec51 0b10 	vmov	r0, r1, d0
 800d5e4:	f1ba 0f00 	cmp.w	sl, #0
 800d5e8:	d129      	bne.n	800d63e <__ieee754_pow+0x1ee>
 800d5ea:	b124      	cbz	r4, 800d5f6 <__ieee754_pow+0x1a6>
 800d5ec:	4b2f      	ldr	r3, [pc, #188]	; (800d6ac <__ieee754_pow+0x25c>)
 800d5ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d123      	bne.n	800d63e <__ieee754_pow+0x1ee>
 800d5f6:	f1b9 0f00 	cmp.w	r9, #0
 800d5fa:	da05      	bge.n	800d608 <__ieee754_pow+0x1b8>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	2000      	movs	r0, #0
 800d602:	492a      	ldr	r1, [pc, #168]	; (800d6ac <__ieee754_pow+0x25c>)
 800d604:	f7f3 f93a 	bl	800087c <__aeabi_ddiv>
 800d608:	2d00      	cmp	r5, #0
 800d60a:	f6bf af40 	bge.w	800d48e <__ieee754_pow+0x3e>
 800d60e:	9b04      	ldr	r3, [sp, #16]
 800d610:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d614:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d618:	4323      	orrs	r3, r4
 800d61a:	d108      	bne.n	800d62e <__ieee754_pow+0x1de>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	4610      	mov	r0, r2
 800d622:	4619      	mov	r1, r3
 800d624:	f7f2 fe48 	bl	80002b8 <__aeabi_dsub>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	e78f      	b.n	800d54e <__ieee754_pow+0xfe>
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	2b01      	cmp	r3, #1
 800d632:	f47f af2c 	bne.w	800d48e <__ieee754_pow+0x3e>
 800d636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d63a:	4619      	mov	r1, r3
 800d63c:	e727      	b.n	800d48e <__ieee754_pow+0x3e>
 800d63e:	0feb      	lsrs	r3, r5, #31
 800d640:	3b01      	subs	r3, #1
 800d642:	9306      	str	r3, [sp, #24]
 800d644:	9a06      	ldr	r2, [sp, #24]
 800d646:	9b04      	ldr	r3, [sp, #16]
 800d648:	4313      	orrs	r3, r2
 800d64a:	d102      	bne.n	800d652 <__ieee754_pow+0x202>
 800d64c:	4632      	mov	r2, r6
 800d64e:	463b      	mov	r3, r7
 800d650:	e7e6      	b.n	800d620 <__ieee754_pow+0x1d0>
 800d652:	4b19      	ldr	r3, [pc, #100]	; (800d6b8 <__ieee754_pow+0x268>)
 800d654:	4598      	cmp	r8, r3
 800d656:	f340 80fb 	ble.w	800d850 <__ieee754_pow+0x400>
 800d65a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d65e:	4598      	cmp	r8, r3
 800d660:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <__ieee754_pow+0x260>)
 800d662:	dd0c      	ble.n	800d67e <__ieee754_pow+0x22e>
 800d664:	429c      	cmp	r4, r3
 800d666:	dc0f      	bgt.n	800d688 <__ieee754_pow+0x238>
 800d668:	f1b9 0f00 	cmp.w	r9, #0
 800d66c:	da0f      	bge.n	800d68e <__ieee754_pow+0x23e>
 800d66e:	2000      	movs	r0, #0
 800d670:	b009      	add	sp, #36	; 0x24
 800d672:	ecbd 8b06 	vpop	{d8-d10}
 800d676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67a:	f001 bbd6 	b.w	800ee2a <__math_oflow>
 800d67e:	429c      	cmp	r4, r3
 800d680:	dbf2      	blt.n	800d668 <__ieee754_pow+0x218>
 800d682:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <__ieee754_pow+0x25c>)
 800d684:	429c      	cmp	r4, r3
 800d686:	dd19      	ble.n	800d6bc <__ieee754_pow+0x26c>
 800d688:	f1b9 0f00 	cmp.w	r9, #0
 800d68c:	dcef      	bgt.n	800d66e <__ieee754_pow+0x21e>
 800d68e:	2000      	movs	r0, #0
 800d690:	b009      	add	sp, #36	; 0x24
 800d692:	ecbd 8b06 	vpop	{d8-d10}
 800d696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69a:	f001 bbbd 	b.w	800ee18 <__math_uflow>
 800d69e:	bf00      	nop
 800d6a0:	fff00000 	.word	0xfff00000
 800d6a4:	7ff00000 	.word	0x7ff00000
 800d6a8:	433fffff 	.word	0x433fffff
 800d6ac:	3ff00000 	.word	0x3ff00000
 800d6b0:	3fefffff 	.word	0x3fefffff
 800d6b4:	3fe00000 	.word	0x3fe00000
 800d6b8:	41e00000 	.word	0x41e00000
 800d6bc:	4b60      	ldr	r3, [pc, #384]	; (800d840 <__ieee754_pow+0x3f0>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f7f2 fdfa 	bl	80002b8 <__aeabi_dsub>
 800d6c4:	a354      	add	r3, pc, #336	; (adr r3, 800d818 <__ieee754_pow+0x3c8>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	f7f2 ffab 	bl	8000628 <__aeabi_dmul>
 800d6d2:	a353      	add	r3, pc, #332	; (adr r3, 800d820 <__ieee754_pow+0x3d0>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	4606      	mov	r6, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f7f2 ffa2 	bl	8000628 <__aeabi_dmul>
 800d6e4:	4b57      	ldr	r3, [pc, #348]	; (800d844 <__ieee754_pow+0x3f4>)
 800d6e6:	4682      	mov	sl, r0
 800d6e8:	468b      	mov	fp, r1
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	f7f2 ff9a 	bl	8000628 <__aeabi_dmul>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	a14b      	add	r1, pc, #300	; (adr r1, 800d828 <__ieee754_pow+0x3d8>)
 800d6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6fe:	f7f2 fddb 	bl	80002b8 <__aeabi_dsub>
 800d702:	4622      	mov	r2, r4
 800d704:	462b      	mov	r3, r5
 800d706:	f7f2 ff8f 	bl	8000628 <__aeabi_dmul>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	2000      	movs	r0, #0
 800d710:	494d      	ldr	r1, [pc, #308]	; (800d848 <__ieee754_pow+0x3f8>)
 800d712:	f7f2 fdd1 	bl	80002b8 <__aeabi_dsub>
 800d716:	4622      	mov	r2, r4
 800d718:	4680      	mov	r8, r0
 800d71a:	4689      	mov	r9, r1
 800d71c:	462b      	mov	r3, r5
 800d71e:	4620      	mov	r0, r4
 800d720:	4629      	mov	r1, r5
 800d722:	f7f2 ff81 	bl	8000628 <__aeabi_dmul>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4640      	mov	r0, r8
 800d72c:	4649      	mov	r1, r9
 800d72e:	f7f2 ff7b 	bl	8000628 <__aeabi_dmul>
 800d732:	a33f      	add	r3, pc, #252	; (adr r3, 800d830 <__ieee754_pow+0x3e0>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	f7f2 ff76 	bl	8000628 <__aeabi_dmul>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4650      	mov	r0, sl
 800d742:	4659      	mov	r1, fp
 800d744:	f7f2 fdb8 	bl	80002b8 <__aeabi_dsub>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4680      	mov	r8, r0
 800d74e:	4689      	mov	r9, r1
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 fdb2 	bl	80002bc <__adddf3>
 800d758:	2000      	movs	r0, #0
 800d75a:	4632      	mov	r2, r6
 800d75c:	463b      	mov	r3, r7
 800d75e:	4604      	mov	r4, r0
 800d760:	460d      	mov	r5, r1
 800d762:	f7f2 fda9 	bl	80002b8 <__aeabi_dsub>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	4640      	mov	r0, r8
 800d76c:	4649      	mov	r1, r9
 800d76e:	f7f2 fda3 	bl	80002b8 <__aeabi_dsub>
 800d772:	9b04      	ldr	r3, [sp, #16]
 800d774:	9a06      	ldr	r2, [sp, #24]
 800d776:	3b01      	subs	r3, #1
 800d778:	4313      	orrs	r3, r2
 800d77a:	4682      	mov	sl, r0
 800d77c:	468b      	mov	fp, r1
 800d77e:	f040 81e7 	bne.w	800db50 <__ieee754_pow+0x700>
 800d782:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d838 <__ieee754_pow+0x3e8>
 800d786:	eeb0 8a47 	vmov.f32	s16, s14
 800d78a:	eef0 8a67 	vmov.f32	s17, s15
 800d78e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d792:	2600      	movs	r6, #0
 800d794:	4632      	mov	r2, r6
 800d796:	463b      	mov	r3, r7
 800d798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d79c:	f7f2 fd8c 	bl	80002b8 <__aeabi_dsub>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	f7f2 ff40 	bl	8000628 <__aeabi_dmul>
 800d7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	4689      	mov	r9, r1
 800d7b0:	4650      	mov	r0, sl
 800d7b2:	4659      	mov	r1, fp
 800d7b4:	f7f2 ff38 	bl	8000628 <__aeabi_dmul>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4640      	mov	r0, r8
 800d7be:	4649      	mov	r1, r9
 800d7c0:	f7f2 fd7c 	bl	80002bc <__adddf3>
 800d7c4:	4632      	mov	r2, r6
 800d7c6:	463b      	mov	r3, r7
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4689      	mov	r9, r1
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	f7f2 ff2a 	bl	8000628 <__aeabi_dmul>
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	460d      	mov	r5, r1
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4649      	mov	r1, r9
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f7f2 fd6c 	bl	80002bc <__adddf3>
 800d7e4:	4b19      	ldr	r3, [pc, #100]	; (800d84c <__ieee754_pow+0x3fc>)
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	ec45 4b19 	vmov	d9, r4, r5
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	460f      	mov	r7, r1
 800d7f0:	468b      	mov	fp, r1
 800d7f2:	f340 82f1 	ble.w	800ddd8 <__ieee754_pow+0x988>
 800d7f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d7fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d7fe:	4303      	orrs	r3, r0
 800d800:	f000 81e4 	beq.w	800dbcc <__ieee754_pow+0x77c>
 800d804:	ec51 0b18 	vmov	r0, r1, d8
 800d808:	2200      	movs	r2, #0
 800d80a:	2300      	movs	r3, #0
 800d80c:	f7f3 f97e 	bl	8000b0c <__aeabi_dcmplt>
 800d810:	3800      	subs	r0, #0
 800d812:	bf18      	it	ne
 800d814:	2001      	movne	r0, #1
 800d816:	e72b      	b.n	800d670 <__ieee754_pow+0x220>
 800d818:	60000000 	.word	0x60000000
 800d81c:	3ff71547 	.word	0x3ff71547
 800d820:	f85ddf44 	.word	0xf85ddf44
 800d824:	3e54ae0b 	.word	0x3e54ae0b
 800d828:	55555555 	.word	0x55555555
 800d82c:	3fd55555 	.word	0x3fd55555
 800d830:	652b82fe 	.word	0x652b82fe
 800d834:	3ff71547 	.word	0x3ff71547
 800d838:	00000000 	.word	0x00000000
 800d83c:	bff00000 	.word	0xbff00000
 800d840:	3ff00000 	.word	0x3ff00000
 800d844:	3fd00000 	.word	0x3fd00000
 800d848:	3fe00000 	.word	0x3fe00000
 800d84c:	408fffff 	.word	0x408fffff
 800d850:	4bd5      	ldr	r3, [pc, #852]	; (800dba8 <__ieee754_pow+0x758>)
 800d852:	402b      	ands	r3, r5
 800d854:	2200      	movs	r2, #0
 800d856:	b92b      	cbnz	r3, 800d864 <__ieee754_pow+0x414>
 800d858:	4bd4      	ldr	r3, [pc, #848]	; (800dbac <__ieee754_pow+0x75c>)
 800d85a:	f7f2 fee5 	bl	8000628 <__aeabi_dmul>
 800d85e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d862:	460c      	mov	r4, r1
 800d864:	1523      	asrs	r3, r4, #20
 800d866:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d86a:	4413      	add	r3, r2
 800d86c:	9305      	str	r3, [sp, #20]
 800d86e:	4bd0      	ldr	r3, [pc, #832]	; (800dbb0 <__ieee754_pow+0x760>)
 800d870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d874:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d878:	429c      	cmp	r4, r3
 800d87a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d87e:	dd08      	ble.n	800d892 <__ieee754_pow+0x442>
 800d880:	4bcc      	ldr	r3, [pc, #816]	; (800dbb4 <__ieee754_pow+0x764>)
 800d882:	429c      	cmp	r4, r3
 800d884:	f340 8162 	ble.w	800db4c <__ieee754_pow+0x6fc>
 800d888:	9b05      	ldr	r3, [sp, #20]
 800d88a:	3301      	adds	r3, #1
 800d88c:	9305      	str	r3, [sp, #20]
 800d88e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d892:	2400      	movs	r4, #0
 800d894:	00e3      	lsls	r3, r4, #3
 800d896:	9307      	str	r3, [sp, #28]
 800d898:	4bc7      	ldr	r3, [pc, #796]	; (800dbb8 <__ieee754_pow+0x768>)
 800d89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d89e:	ed93 7b00 	vldr	d7, [r3]
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	ec53 2b17 	vmov	r2, r3, d7
 800d8a8:	eeb0 9a47 	vmov.f32	s18, s14
 800d8ac:	eef0 9a67 	vmov.f32	s19, s15
 800d8b0:	4682      	mov	sl, r0
 800d8b2:	f7f2 fd01 	bl	80002b8 <__aeabi_dsub>
 800d8b6:	4652      	mov	r2, sl
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	460f      	mov	r7, r1
 800d8bc:	462b      	mov	r3, r5
 800d8be:	ec51 0b19 	vmov	r0, r1, d9
 800d8c2:	f7f2 fcfb 	bl	80002bc <__adddf3>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	49bb      	ldr	r1, [pc, #748]	; (800dbbc <__ieee754_pow+0x76c>)
 800d8ce:	f7f2 ffd5 	bl	800087c <__aeabi_ddiv>
 800d8d2:	ec41 0b1a 	vmov	d10, r0, r1
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	f7f2 fea3 	bl	8000628 <__aeabi_dmul>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8e8:	9302      	str	r3, [sp, #8]
 800d8ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d8ee:	46ab      	mov	fp, r5
 800d8f0:	106d      	asrs	r5, r5, #1
 800d8f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d8f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d8fa:	ec41 0b18 	vmov	d8, r0, r1
 800d8fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d902:	2200      	movs	r2, #0
 800d904:	4640      	mov	r0, r8
 800d906:	4649      	mov	r1, r9
 800d908:	4614      	mov	r4, r2
 800d90a:	461d      	mov	r5, r3
 800d90c:	f7f2 fe8c 	bl	8000628 <__aeabi_dmul>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4630      	mov	r0, r6
 800d916:	4639      	mov	r1, r7
 800d918:	f7f2 fcce 	bl	80002b8 <__aeabi_dsub>
 800d91c:	ec53 2b19 	vmov	r2, r3, d9
 800d920:	4606      	mov	r6, r0
 800d922:	460f      	mov	r7, r1
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fcc6 	bl	80002b8 <__aeabi_dsub>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4650      	mov	r0, sl
 800d932:	4659      	mov	r1, fp
 800d934:	f7f2 fcc0 	bl	80002b8 <__aeabi_dsub>
 800d938:	4642      	mov	r2, r8
 800d93a:	464b      	mov	r3, r9
 800d93c:	f7f2 fe74 	bl	8000628 <__aeabi_dmul>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4630      	mov	r0, r6
 800d946:	4639      	mov	r1, r7
 800d948:	f7f2 fcb6 	bl	80002b8 <__aeabi_dsub>
 800d94c:	ec53 2b1a 	vmov	r2, r3, d10
 800d950:	f7f2 fe6a 	bl	8000628 <__aeabi_dmul>
 800d954:	ec53 2b18 	vmov	r2, r3, d8
 800d958:	ec41 0b19 	vmov	d9, r0, r1
 800d95c:	ec51 0b18 	vmov	r0, r1, d8
 800d960:	f7f2 fe62 	bl	8000628 <__aeabi_dmul>
 800d964:	a37c      	add	r3, pc, #496	; (adr r3, 800db58 <__ieee754_pow+0x708>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	4604      	mov	r4, r0
 800d96c:	460d      	mov	r5, r1
 800d96e:	f7f2 fe5b 	bl	8000628 <__aeabi_dmul>
 800d972:	a37b      	add	r3, pc, #492	; (adr r3, 800db60 <__ieee754_pow+0x710>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fca0 	bl	80002bc <__adddf3>
 800d97c:	4622      	mov	r2, r4
 800d97e:	462b      	mov	r3, r5
 800d980:	f7f2 fe52 	bl	8000628 <__aeabi_dmul>
 800d984:	a378      	add	r3, pc, #480	; (adr r3, 800db68 <__ieee754_pow+0x718>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fc97 	bl	80002bc <__adddf3>
 800d98e:	4622      	mov	r2, r4
 800d990:	462b      	mov	r3, r5
 800d992:	f7f2 fe49 	bl	8000628 <__aeabi_dmul>
 800d996:	a376      	add	r3, pc, #472	; (adr r3, 800db70 <__ieee754_pow+0x720>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fc8e 	bl	80002bc <__adddf3>
 800d9a0:	4622      	mov	r2, r4
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	f7f2 fe40 	bl	8000628 <__aeabi_dmul>
 800d9a8:	a373      	add	r3, pc, #460	; (adr r3, 800db78 <__ieee754_pow+0x728>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fc85 	bl	80002bc <__adddf3>
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	462b      	mov	r3, r5
 800d9b6:	f7f2 fe37 	bl	8000628 <__aeabi_dmul>
 800d9ba:	a371      	add	r3, pc, #452	; (adr r3, 800db80 <__ieee754_pow+0x730>)
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	f7f2 fc7c 	bl	80002bc <__adddf3>
 800d9c4:	4622      	mov	r2, r4
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f7f2 fe2a 	bl	8000628 <__aeabi_dmul>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4630      	mov	r0, r6
 800d9da:	4639      	mov	r1, r7
 800d9dc:	f7f2 fe24 	bl	8000628 <__aeabi_dmul>
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	460d      	mov	r5, r1
 800d9e6:	464b      	mov	r3, r9
 800d9e8:	ec51 0b18 	vmov	r0, r1, d8
 800d9ec:	f7f2 fc66 	bl	80002bc <__adddf3>
 800d9f0:	ec53 2b19 	vmov	r2, r3, d9
 800d9f4:	f7f2 fe18 	bl	8000628 <__aeabi_dmul>
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	462b      	mov	r3, r5
 800d9fc:	f7f2 fc5e 	bl	80002bc <__adddf3>
 800da00:	4642      	mov	r2, r8
 800da02:	4682      	mov	sl, r0
 800da04:	468b      	mov	fp, r1
 800da06:	464b      	mov	r3, r9
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f2 fe0c 	bl	8000628 <__aeabi_dmul>
 800da10:	4b6b      	ldr	r3, [pc, #428]	; (800dbc0 <__ieee754_pow+0x770>)
 800da12:	2200      	movs	r2, #0
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	f7f2 fc50 	bl	80002bc <__adddf3>
 800da1c:	4652      	mov	r2, sl
 800da1e:	465b      	mov	r3, fp
 800da20:	f7f2 fc4c 	bl	80002bc <__adddf3>
 800da24:	2000      	movs	r0, #0
 800da26:	4604      	mov	r4, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	4640      	mov	r0, r8
 800da30:	4649      	mov	r1, r9
 800da32:	f7f2 fdf9 	bl	8000628 <__aeabi_dmul>
 800da36:	4b62      	ldr	r3, [pc, #392]	; (800dbc0 <__ieee754_pow+0x770>)
 800da38:	4680      	mov	r8, r0
 800da3a:	4689      	mov	r9, r1
 800da3c:	2200      	movs	r2, #0
 800da3e:	4620      	mov	r0, r4
 800da40:	4629      	mov	r1, r5
 800da42:	f7f2 fc39 	bl	80002b8 <__aeabi_dsub>
 800da46:	4632      	mov	r2, r6
 800da48:	463b      	mov	r3, r7
 800da4a:	f7f2 fc35 	bl	80002b8 <__aeabi_dsub>
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	f7f2 fc2f 	bl	80002b8 <__aeabi_dsub>
 800da5a:	ec53 2b18 	vmov	r2, r3, d8
 800da5e:	f7f2 fde3 	bl	8000628 <__aeabi_dmul>
 800da62:	4622      	mov	r2, r4
 800da64:	4606      	mov	r6, r0
 800da66:	460f      	mov	r7, r1
 800da68:	462b      	mov	r3, r5
 800da6a:	ec51 0b19 	vmov	r0, r1, d9
 800da6e:	f7f2 fddb 	bl	8000628 <__aeabi_dmul>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4630      	mov	r0, r6
 800da78:	4639      	mov	r1, r7
 800da7a:	f7f2 fc1f 	bl	80002bc <__adddf3>
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	f7f2 fc17 	bl	80002bc <__adddf3>
 800da8e:	a33e      	add	r3, pc, #248	; (adr r3, 800db88 <__ieee754_pow+0x738>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	2000      	movs	r0, #0
 800da96:	4604      	mov	r4, r0
 800da98:	460d      	mov	r5, r1
 800da9a:	f7f2 fdc5 	bl	8000628 <__aeabi_dmul>
 800da9e:	4642      	mov	r2, r8
 800daa0:	ec41 0b18 	vmov	d8, r0, r1
 800daa4:	464b      	mov	r3, r9
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f7f2 fc05 	bl	80002b8 <__aeabi_dsub>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4630      	mov	r0, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	f7f2 fbff 	bl	80002b8 <__aeabi_dsub>
 800daba:	a335      	add	r3, pc, #212	; (adr r3, 800db90 <__ieee754_pow+0x740>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fdb2 	bl	8000628 <__aeabi_dmul>
 800dac4:	a334      	add	r3, pc, #208	; (adr r3, 800db98 <__ieee754_pow+0x748>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	4606      	mov	r6, r0
 800dacc:	460f      	mov	r7, r1
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fda9 	bl	8000628 <__aeabi_dmul>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4630      	mov	r0, r6
 800dadc:	4639      	mov	r1, r7
 800dade:	f7f2 fbed 	bl	80002bc <__adddf3>
 800dae2:	9a07      	ldr	r2, [sp, #28]
 800dae4:	4b37      	ldr	r3, [pc, #220]	; (800dbc4 <__ieee754_pow+0x774>)
 800dae6:	4413      	add	r3, r2
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fbe6 	bl	80002bc <__adddf3>
 800daf0:	4682      	mov	sl, r0
 800daf2:	9805      	ldr	r0, [sp, #20]
 800daf4:	468b      	mov	fp, r1
 800daf6:	f7f2 fd2d 	bl	8000554 <__aeabi_i2d>
 800dafa:	9a07      	ldr	r2, [sp, #28]
 800dafc:	4b32      	ldr	r3, [pc, #200]	; (800dbc8 <__ieee754_pow+0x778>)
 800dafe:	4413      	add	r3, r2
 800db00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db04:	4606      	mov	r6, r0
 800db06:	460f      	mov	r7, r1
 800db08:	4652      	mov	r2, sl
 800db0a:	465b      	mov	r3, fp
 800db0c:	ec51 0b18 	vmov	r0, r1, d8
 800db10:	f7f2 fbd4 	bl	80002bc <__adddf3>
 800db14:	4642      	mov	r2, r8
 800db16:	464b      	mov	r3, r9
 800db18:	f7f2 fbd0 	bl	80002bc <__adddf3>
 800db1c:	4632      	mov	r2, r6
 800db1e:	463b      	mov	r3, r7
 800db20:	f7f2 fbcc 	bl	80002bc <__adddf3>
 800db24:	2000      	movs	r0, #0
 800db26:	4632      	mov	r2, r6
 800db28:	463b      	mov	r3, r7
 800db2a:	4604      	mov	r4, r0
 800db2c:	460d      	mov	r5, r1
 800db2e:	f7f2 fbc3 	bl	80002b8 <__aeabi_dsub>
 800db32:	4642      	mov	r2, r8
 800db34:	464b      	mov	r3, r9
 800db36:	f7f2 fbbf 	bl	80002b8 <__aeabi_dsub>
 800db3a:	ec53 2b18 	vmov	r2, r3, d8
 800db3e:	f7f2 fbbb 	bl	80002b8 <__aeabi_dsub>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4650      	mov	r0, sl
 800db48:	4659      	mov	r1, fp
 800db4a:	e610      	b.n	800d76e <__ieee754_pow+0x31e>
 800db4c:	2401      	movs	r4, #1
 800db4e:	e6a1      	b.n	800d894 <__ieee754_pow+0x444>
 800db50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dba0 <__ieee754_pow+0x750>
 800db54:	e617      	b.n	800d786 <__ieee754_pow+0x336>
 800db56:	bf00      	nop
 800db58:	4a454eef 	.word	0x4a454eef
 800db5c:	3fca7e28 	.word	0x3fca7e28
 800db60:	93c9db65 	.word	0x93c9db65
 800db64:	3fcd864a 	.word	0x3fcd864a
 800db68:	a91d4101 	.word	0xa91d4101
 800db6c:	3fd17460 	.word	0x3fd17460
 800db70:	518f264d 	.word	0x518f264d
 800db74:	3fd55555 	.word	0x3fd55555
 800db78:	db6fabff 	.word	0xdb6fabff
 800db7c:	3fdb6db6 	.word	0x3fdb6db6
 800db80:	33333303 	.word	0x33333303
 800db84:	3fe33333 	.word	0x3fe33333
 800db88:	e0000000 	.word	0xe0000000
 800db8c:	3feec709 	.word	0x3feec709
 800db90:	dc3a03fd 	.word	0xdc3a03fd
 800db94:	3feec709 	.word	0x3feec709
 800db98:	145b01f5 	.word	0x145b01f5
 800db9c:	be3e2fe0 	.word	0xbe3e2fe0
 800dba0:	00000000 	.word	0x00000000
 800dba4:	3ff00000 	.word	0x3ff00000
 800dba8:	7ff00000 	.word	0x7ff00000
 800dbac:	43400000 	.word	0x43400000
 800dbb0:	0003988e 	.word	0x0003988e
 800dbb4:	000bb679 	.word	0x000bb679
 800dbb8:	0800fd40 	.word	0x0800fd40
 800dbbc:	3ff00000 	.word	0x3ff00000
 800dbc0:	40080000 	.word	0x40080000
 800dbc4:	0800fd60 	.word	0x0800fd60
 800dbc8:	0800fd50 	.word	0x0800fd50
 800dbcc:	a3b5      	add	r3, pc, #724	; (adr r3, 800dea4 <__ieee754_pow+0xa54>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4649      	mov	r1, r9
 800dbd6:	f7f2 fb71 	bl	80002bc <__adddf3>
 800dbda:	4622      	mov	r2, r4
 800dbdc:	ec41 0b1a 	vmov	d10, r0, r1
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	f7f2 fb67 	bl	80002b8 <__aeabi_dsub>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	ec51 0b1a 	vmov	r0, r1, d10
 800dbf2:	f7f2 ffa9 	bl	8000b48 <__aeabi_dcmpgt>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	f47f ae04 	bne.w	800d804 <__ieee754_pow+0x3b4>
 800dbfc:	4aa4      	ldr	r2, [pc, #656]	; (800de90 <__ieee754_pow+0xa40>)
 800dbfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc02:	4293      	cmp	r3, r2
 800dc04:	f340 8108 	ble.w	800de18 <__ieee754_pow+0x9c8>
 800dc08:	151b      	asrs	r3, r3, #20
 800dc0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dc0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dc12:	fa4a f303 	asr.w	r3, sl, r3
 800dc16:	445b      	add	r3, fp
 800dc18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dc1c:	4e9d      	ldr	r6, [pc, #628]	; (800de94 <__ieee754_pow+0xa44>)
 800dc1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dc22:	4116      	asrs	r6, r2
 800dc24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dc28:	2000      	movs	r0, #0
 800dc2a:	ea23 0106 	bic.w	r1, r3, r6
 800dc2e:	f1c2 0214 	rsb	r2, r2, #20
 800dc32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dc36:	fa4a fa02 	asr.w	sl, sl, r2
 800dc3a:	f1bb 0f00 	cmp.w	fp, #0
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4620      	mov	r0, r4
 800dc44:	4629      	mov	r1, r5
 800dc46:	bfb8      	it	lt
 800dc48:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc4c:	f7f2 fb34 	bl	80002b8 <__aeabi_dsub>
 800dc50:	ec41 0b19 	vmov	d9, r0, r1
 800dc54:	4642      	mov	r2, r8
 800dc56:	464b      	mov	r3, r9
 800dc58:	ec51 0b19 	vmov	r0, r1, d9
 800dc5c:	f7f2 fb2e 	bl	80002bc <__adddf3>
 800dc60:	a37b      	add	r3, pc, #492	; (adr r3, 800de50 <__ieee754_pow+0xa00>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	2000      	movs	r0, #0
 800dc68:	4604      	mov	r4, r0
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	f7f2 fcdc 	bl	8000628 <__aeabi_dmul>
 800dc70:	ec53 2b19 	vmov	r2, r3, d9
 800dc74:	4606      	mov	r6, r0
 800dc76:	460f      	mov	r7, r1
 800dc78:	4620      	mov	r0, r4
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	f7f2 fb1c 	bl	80002b8 <__aeabi_dsub>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	4640      	mov	r0, r8
 800dc86:	4649      	mov	r1, r9
 800dc88:	f7f2 fb16 	bl	80002b8 <__aeabi_dsub>
 800dc8c:	a372      	add	r3, pc, #456	; (adr r3, 800de58 <__ieee754_pow+0xa08>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fcc9 	bl	8000628 <__aeabi_dmul>
 800dc96:	a372      	add	r3, pc, #456	; (adr r3, 800de60 <__ieee754_pow+0xa10>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	4689      	mov	r9, r1
 800dca0:	4620      	mov	r0, r4
 800dca2:	4629      	mov	r1, r5
 800dca4:	f7f2 fcc0 	bl	8000628 <__aeabi_dmul>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4640      	mov	r0, r8
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7f2 fb04 	bl	80002bc <__adddf3>
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f7f2 fafc 	bl	80002bc <__adddf3>
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	4680      	mov	r8, r0
 800dcca:	4689      	mov	r9, r1
 800dccc:	f7f2 faf4 	bl	80002b8 <__aeabi_dsub>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f7f2 faee 	bl	80002b8 <__aeabi_dsub>
 800dcdc:	4642      	mov	r2, r8
 800dcde:	4606      	mov	r6, r0
 800dce0:	460f      	mov	r7, r1
 800dce2:	464b      	mov	r3, r9
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f7f2 fc9e 	bl	8000628 <__aeabi_dmul>
 800dcec:	a35e      	add	r3, pc, #376	; (adr r3, 800de68 <__ieee754_pow+0xa18>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	f7f2 fc97 	bl	8000628 <__aeabi_dmul>
 800dcfa:	a35d      	add	r3, pc, #372	; (adr r3, 800de70 <__ieee754_pow+0xa20>)
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	f7f2 fada 	bl	80002b8 <__aeabi_dsub>
 800dd04:	4622      	mov	r2, r4
 800dd06:	462b      	mov	r3, r5
 800dd08:	f7f2 fc8e 	bl	8000628 <__aeabi_dmul>
 800dd0c:	a35a      	add	r3, pc, #360	; (adr r3, 800de78 <__ieee754_pow+0xa28>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fad3 	bl	80002bc <__adddf3>
 800dd16:	4622      	mov	r2, r4
 800dd18:	462b      	mov	r3, r5
 800dd1a:	f7f2 fc85 	bl	8000628 <__aeabi_dmul>
 800dd1e:	a358      	add	r3, pc, #352	; (adr r3, 800de80 <__ieee754_pow+0xa30>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f7f2 fac8 	bl	80002b8 <__aeabi_dsub>
 800dd28:	4622      	mov	r2, r4
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	f7f2 fc7c 	bl	8000628 <__aeabi_dmul>
 800dd30:	a355      	add	r3, pc, #340	; (adr r3, 800de88 <__ieee754_pow+0xa38>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 fac1 	bl	80002bc <__adddf3>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	f7f2 fc73 	bl	8000628 <__aeabi_dmul>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4640      	mov	r0, r8
 800dd48:	4649      	mov	r1, r9
 800dd4a:	f7f2 fab5 	bl	80002b8 <__aeabi_dsub>
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4640      	mov	r0, r8
 800dd58:	4649      	mov	r1, r9
 800dd5a:	f7f2 fc65 	bl	8000628 <__aeabi_dmul>
 800dd5e:	2200      	movs	r2, #0
 800dd60:	ec41 0b19 	vmov	d9, r0, r1
 800dd64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd68:	4620      	mov	r0, r4
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	f7f2 faa4 	bl	80002b8 <__aeabi_dsub>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	ec51 0b19 	vmov	r0, r1, d9
 800dd78:	f7f2 fd80 	bl	800087c <__aeabi_ddiv>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	463b      	mov	r3, r7
 800dd84:	4640      	mov	r0, r8
 800dd86:	4649      	mov	r1, r9
 800dd88:	f7f2 fc4e 	bl	8000628 <__aeabi_dmul>
 800dd8c:	4632      	mov	r2, r6
 800dd8e:	463b      	mov	r3, r7
 800dd90:	f7f2 fa94 	bl	80002bc <__adddf3>
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4620      	mov	r0, r4
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	f7f2 fa8c 	bl	80002b8 <__aeabi_dsub>
 800dda0:	4642      	mov	r2, r8
 800dda2:	464b      	mov	r3, r9
 800dda4:	f7f2 fa88 	bl	80002b8 <__aeabi_dsub>
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4602      	mov	r2, r0
 800ddac:	493a      	ldr	r1, [pc, #232]	; (800de98 <__ieee754_pow+0xa48>)
 800ddae:	2000      	movs	r0, #0
 800ddb0:	f7f2 fa82 	bl	80002b8 <__aeabi_dsub>
 800ddb4:	ec41 0b10 	vmov	d0, r0, r1
 800ddb8:	ee10 3a90 	vmov	r3, s1
 800ddbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ddc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddc4:	da2b      	bge.n	800de1e <__ieee754_pow+0x9ce>
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	f001 fa6e 	bl	800f2a8 <scalbn>
 800ddcc:	ec51 0b10 	vmov	r0, r1, d0
 800ddd0:	ec53 2b18 	vmov	r2, r3, d8
 800ddd4:	f7ff bbed 	b.w	800d5b2 <__ieee754_pow+0x162>
 800ddd8:	4b30      	ldr	r3, [pc, #192]	; (800de9c <__ieee754_pow+0xa4c>)
 800ddda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ddde:	429e      	cmp	r6, r3
 800dde0:	f77f af0c 	ble.w	800dbfc <__ieee754_pow+0x7ac>
 800dde4:	4b2e      	ldr	r3, [pc, #184]	; (800dea0 <__ieee754_pow+0xa50>)
 800dde6:	440b      	add	r3, r1
 800dde8:	4303      	orrs	r3, r0
 800ddea:	d009      	beq.n	800de00 <__ieee754_pow+0x9b0>
 800ddec:	ec51 0b18 	vmov	r0, r1, d8
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f7f2 fe8a 	bl	8000b0c <__aeabi_dcmplt>
 800ddf8:	3800      	subs	r0, #0
 800ddfa:	bf18      	it	ne
 800ddfc:	2001      	movne	r0, #1
 800ddfe:	e447      	b.n	800d690 <__ieee754_pow+0x240>
 800de00:	4622      	mov	r2, r4
 800de02:	462b      	mov	r3, r5
 800de04:	f7f2 fa58 	bl	80002b8 <__aeabi_dsub>
 800de08:	4642      	mov	r2, r8
 800de0a:	464b      	mov	r3, r9
 800de0c:	f7f2 fe92 	bl	8000b34 <__aeabi_dcmpge>
 800de10:	2800      	cmp	r0, #0
 800de12:	f43f aef3 	beq.w	800dbfc <__ieee754_pow+0x7ac>
 800de16:	e7e9      	b.n	800ddec <__ieee754_pow+0x99c>
 800de18:	f04f 0a00 	mov.w	sl, #0
 800de1c:	e71a      	b.n	800dc54 <__ieee754_pow+0x804>
 800de1e:	ec51 0b10 	vmov	r0, r1, d0
 800de22:	4619      	mov	r1, r3
 800de24:	e7d4      	b.n	800ddd0 <__ieee754_pow+0x980>
 800de26:	491c      	ldr	r1, [pc, #112]	; (800de98 <__ieee754_pow+0xa48>)
 800de28:	2000      	movs	r0, #0
 800de2a:	f7ff bb30 	b.w	800d48e <__ieee754_pow+0x3e>
 800de2e:	2000      	movs	r0, #0
 800de30:	2100      	movs	r1, #0
 800de32:	f7ff bb2c 	b.w	800d48e <__ieee754_pow+0x3e>
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	f7ff bb28 	b.w	800d48e <__ieee754_pow+0x3e>
 800de3e:	9204      	str	r2, [sp, #16]
 800de40:	f7ff bb7a 	b.w	800d538 <__ieee754_pow+0xe8>
 800de44:	2300      	movs	r3, #0
 800de46:	f7ff bb64 	b.w	800d512 <__ieee754_pow+0xc2>
 800de4a:	bf00      	nop
 800de4c:	f3af 8000 	nop.w
 800de50:	00000000 	.word	0x00000000
 800de54:	3fe62e43 	.word	0x3fe62e43
 800de58:	fefa39ef 	.word	0xfefa39ef
 800de5c:	3fe62e42 	.word	0x3fe62e42
 800de60:	0ca86c39 	.word	0x0ca86c39
 800de64:	be205c61 	.word	0xbe205c61
 800de68:	72bea4d0 	.word	0x72bea4d0
 800de6c:	3e663769 	.word	0x3e663769
 800de70:	c5d26bf1 	.word	0xc5d26bf1
 800de74:	3ebbbd41 	.word	0x3ebbbd41
 800de78:	af25de2c 	.word	0xaf25de2c
 800de7c:	3f11566a 	.word	0x3f11566a
 800de80:	16bebd93 	.word	0x16bebd93
 800de84:	3f66c16c 	.word	0x3f66c16c
 800de88:	5555553e 	.word	0x5555553e
 800de8c:	3fc55555 	.word	0x3fc55555
 800de90:	3fe00000 	.word	0x3fe00000
 800de94:	000fffff 	.word	0x000fffff
 800de98:	3ff00000 	.word	0x3ff00000
 800de9c:	4090cbff 	.word	0x4090cbff
 800dea0:	3f6f3400 	.word	0x3f6f3400
 800dea4:	652b82fe 	.word	0x652b82fe
 800dea8:	3c971547 	.word	0x3c971547
 800deac:	00000000 	.word	0x00000000

0800deb0 <__ieee754_rem_pio2>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	ed2d 8b02 	vpush	{d8}
 800deb8:	ec55 4b10 	vmov	r4, r5, d0
 800debc:	4bca      	ldr	r3, [pc, #808]	; (800e1e8 <__ieee754_rem_pio2+0x338>)
 800debe:	b08b      	sub	sp, #44	; 0x2c
 800dec0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dec4:	4598      	cmp	r8, r3
 800dec6:	4682      	mov	sl, r0
 800dec8:	9502      	str	r5, [sp, #8]
 800deca:	dc08      	bgt.n	800dede <__ieee754_rem_pio2+0x2e>
 800decc:	2200      	movs	r2, #0
 800dece:	2300      	movs	r3, #0
 800ded0:	ed80 0b00 	vstr	d0, [r0]
 800ded4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ded8:	f04f 0b00 	mov.w	fp, #0
 800dedc:	e028      	b.n	800df30 <__ieee754_rem_pio2+0x80>
 800dede:	4bc3      	ldr	r3, [pc, #780]	; (800e1ec <__ieee754_rem_pio2+0x33c>)
 800dee0:	4598      	cmp	r8, r3
 800dee2:	dc78      	bgt.n	800dfd6 <__ieee754_rem_pio2+0x126>
 800dee4:	9b02      	ldr	r3, [sp, #8]
 800dee6:	4ec2      	ldr	r6, [pc, #776]	; (800e1f0 <__ieee754_rem_pio2+0x340>)
 800dee8:	2b00      	cmp	r3, #0
 800deea:	ee10 0a10 	vmov	r0, s0
 800deee:	a3b0      	add	r3, pc, #704	; (adr r3, 800e1b0 <__ieee754_rem_pio2+0x300>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	4629      	mov	r1, r5
 800def6:	dd39      	ble.n	800df6c <__ieee754_rem_pio2+0xbc>
 800def8:	f7f2 f9de 	bl	80002b8 <__aeabi_dsub>
 800defc:	45b0      	cmp	r8, r6
 800defe:	4604      	mov	r4, r0
 800df00:	460d      	mov	r5, r1
 800df02:	d01b      	beq.n	800df3c <__ieee754_rem_pio2+0x8c>
 800df04:	a3ac      	add	r3, pc, #688	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x308>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	f7f2 f9d5 	bl	80002b8 <__aeabi_dsub>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	e9ca 2300 	strd	r2, r3, [sl]
 800df16:	4620      	mov	r0, r4
 800df18:	4629      	mov	r1, r5
 800df1a:	f7f2 f9cd 	bl	80002b8 <__aeabi_dsub>
 800df1e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x308>)
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	f7f2 f9c8 	bl	80002b8 <__aeabi_dsub>
 800df28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df2c:	f04f 0b01 	mov.w	fp, #1
 800df30:	4658      	mov	r0, fp
 800df32:	b00b      	add	sp, #44	; 0x2c
 800df34:	ecbd 8b02 	vpop	{d8}
 800df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x310>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9b9 	bl	80002b8 <__aeabi_dsub>
 800df46:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x318>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	4604      	mov	r4, r0
 800df4e:	460d      	mov	r5, r1
 800df50:	f7f2 f9b2 	bl	80002b8 <__aeabi_dsub>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	e9ca 2300 	strd	r2, r3, [sl]
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f9aa 	bl	80002b8 <__aeabi_dsub>
 800df64:	a398      	add	r3, pc, #608	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x318>)
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	e7db      	b.n	800df24 <__ieee754_rem_pio2+0x74>
 800df6c:	f7f2 f9a6 	bl	80002bc <__adddf3>
 800df70:	45b0      	cmp	r8, r6
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	d016      	beq.n	800dfa6 <__ieee754_rem_pio2+0xf6>
 800df78:	a38f      	add	r3, pc, #572	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x308>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	f7f2 f99d 	bl	80002bc <__adddf3>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	e9ca 2300 	strd	r2, r3, [sl]
 800df8a:	4620      	mov	r0, r4
 800df8c:	4629      	mov	r1, r5
 800df8e:	f7f2 f993 	bl	80002b8 <__aeabi_dsub>
 800df92:	a389      	add	r3, pc, #548	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x308>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f990 	bl	80002bc <__adddf3>
 800df9c:	f04f 3bff 	mov.w	fp, #4294967295
 800dfa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dfa4:	e7c4      	b.n	800df30 <__ieee754_rem_pio2+0x80>
 800dfa6:	a386      	add	r3, pc, #536	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x310>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 f986 	bl	80002bc <__adddf3>
 800dfb0:	a385      	add	r3, pc, #532	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x318>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	f7f2 f97f 	bl	80002bc <__adddf3>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	e9ca 2300 	strd	r2, r3, [sl]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 f975 	bl	80002b8 <__aeabi_dsub>
 800dfce:	a37e      	add	r3, pc, #504	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x318>)
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	e7e0      	b.n	800df98 <__ieee754_rem_pio2+0xe8>
 800dfd6:	4b87      	ldr	r3, [pc, #540]	; (800e1f4 <__ieee754_rem_pio2+0x344>)
 800dfd8:	4598      	cmp	r8, r3
 800dfda:	f300 80d9 	bgt.w	800e190 <__ieee754_rem_pio2+0x2e0>
 800dfde:	f001 f8cf 	bl	800f180 <fabs>
 800dfe2:	ec55 4b10 	vmov	r4, r5, d0
 800dfe6:	ee10 0a10 	vmov	r0, s0
 800dfea:	a379      	add	r3, pc, #484	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x320>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7f2 fb19 	bl	8000628 <__aeabi_dmul>
 800dff6:	4b80      	ldr	r3, [pc, #512]	; (800e1f8 <__ieee754_rem_pio2+0x348>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	f7f2 f95f 	bl	80002bc <__adddf3>
 800dffe:	f7f2 fdc3 	bl	8000b88 <__aeabi_d2iz>
 800e002:	4683      	mov	fp, r0
 800e004:	f7f2 faa6 	bl	8000554 <__aeabi_i2d>
 800e008:	4602      	mov	r2, r0
 800e00a:	460b      	mov	r3, r1
 800e00c:	ec43 2b18 	vmov	d8, r2, r3
 800e010:	a367      	add	r3, pc, #412	; (adr r3, 800e1b0 <__ieee754_rem_pio2+0x300>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 fb07 	bl	8000628 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4620      	mov	r0, r4
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 f949 	bl	80002b8 <__aeabi_dsub>
 800e026:	a364      	add	r3, pc, #400	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x308>)
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	4606      	mov	r6, r0
 800e02e:	460f      	mov	r7, r1
 800e030:	ec51 0b18 	vmov	r0, r1, d8
 800e034:	f7f2 faf8 	bl	8000628 <__aeabi_dmul>
 800e038:	f1bb 0f1f 	cmp.w	fp, #31
 800e03c:	4604      	mov	r4, r0
 800e03e:	460d      	mov	r5, r1
 800e040:	dc0d      	bgt.n	800e05e <__ieee754_rem_pio2+0x1ae>
 800e042:	4b6e      	ldr	r3, [pc, #440]	; (800e1fc <__ieee754_rem_pio2+0x34c>)
 800e044:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04c:	4543      	cmp	r3, r8
 800e04e:	d006      	beq.n	800e05e <__ieee754_rem_pio2+0x1ae>
 800e050:	4622      	mov	r2, r4
 800e052:	462b      	mov	r3, r5
 800e054:	4630      	mov	r0, r6
 800e056:	4639      	mov	r1, r7
 800e058:	f7f2 f92e 	bl	80002b8 <__aeabi_dsub>
 800e05c:	e00f      	b.n	800e07e <__ieee754_rem_pio2+0x1ce>
 800e05e:	462b      	mov	r3, r5
 800e060:	4622      	mov	r2, r4
 800e062:	4630      	mov	r0, r6
 800e064:	4639      	mov	r1, r7
 800e066:	f7f2 f927 	bl	80002b8 <__aeabi_dsub>
 800e06a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e06e:	9303      	str	r3, [sp, #12]
 800e070:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e074:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e078:	f1b8 0f10 	cmp.w	r8, #16
 800e07c:	dc02      	bgt.n	800e084 <__ieee754_rem_pio2+0x1d4>
 800e07e:	e9ca 0100 	strd	r0, r1, [sl]
 800e082:	e039      	b.n	800e0f8 <__ieee754_rem_pio2+0x248>
 800e084:	a34e      	add	r3, pc, #312	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x310>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	ec51 0b18 	vmov	r0, r1, d8
 800e08e:	f7f2 facb 	bl	8000628 <__aeabi_dmul>
 800e092:	4604      	mov	r4, r0
 800e094:	460d      	mov	r5, r1
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 f90b 	bl	80002b8 <__aeabi_dsub>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4680      	mov	r8, r0
 800e0a8:	4689      	mov	r9, r1
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	f7f2 f903 	bl	80002b8 <__aeabi_dsub>
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	f7f2 f8ff 	bl	80002b8 <__aeabi_dsub>
 800e0ba:	a343      	add	r3, pc, #268	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x318>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	ec51 0b18 	vmov	r0, r1, d8
 800e0c8:	f7f2 faae 	bl	8000628 <__aeabi_dmul>
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	f7f2 f8f2 	bl	80002b8 <__aeabi_dsub>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	4604      	mov	r4, r0
 800e0da:	460d      	mov	r5, r1
 800e0dc:	4640      	mov	r0, r8
 800e0de:	4649      	mov	r1, r9
 800e0e0:	f7f2 f8ea 	bl	80002b8 <__aeabi_dsub>
 800e0e4:	9a03      	ldr	r2, [sp, #12]
 800e0e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	2b31      	cmp	r3, #49	; 0x31
 800e0ee:	dc24      	bgt.n	800e13a <__ieee754_rem_pio2+0x28a>
 800e0f0:	e9ca 0100 	strd	r0, r1, [sl]
 800e0f4:	4646      	mov	r6, r8
 800e0f6:	464f      	mov	r7, r9
 800e0f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	4642      	mov	r2, r8
 800e100:	464b      	mov	r3, r9
 800e102:	4639      	mov	r1, r7
 800e104:	f7f2 f8d8 	bl	80002b8 <__aeabi_dsub>
 800e108:	462b      	mov	r3, r5
 800e10a:	4622      	mov	r2, r4
 800e10c:	f7f2 f8d4 	bl	80002b8 <__aeabi_dsub>
 800e110:	9b02      	ldr	r3, [sp, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e118:	f6bf af0a 	bge.w	800df30 <__ieee754_rem_pio2+0x80>
 800e11c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e120:	f8ca 3004 	str.w	r3, [sl, #4]
 800e124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e128:	f8ca 8000 	str.w	r8, [sl]
 800e12c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e130:	f8ca 300c 	str.w	r3, [sl, #12]
 800e134:	f1cb 0b00 	rsb	fp, fp, #0
 800e138:	e6fa      	b.n	800df30 <__ieee754_rem_pio2+0x80>
 800e13a:	a327      	add	r3, pc, #156	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x328>)
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	ec51 0b18 	vmov	r0, r1, d8
 800e144:	f7f2 fa70 	bl	8000628 <__aeabi_dmul>
 800e148:	4604      	mov	r4, r0
 800e14a:	460d      	mov	r5, r1
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4640      	mov	r0, r8
 800e152:	4649      	mov	r1, r9
 800e154:	f7f2 f8b0 	bl	80002b8 <__aeabi_dsub>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4606      	mov	r6, r0
 800e15e:	460f      	mov	r7, r1
 800e160:	4640      	mov	r0, r8
 800e162:	4649      	mov	r1, r9
 800e164:	f7f2 f8a8 	bl	80002b8 <__aeabi_dsub>
 800e168:	4622      	mov	r2, r4
 800e16a:	462b      	mov	r3, r5
 800e16c:	f7f2 f8a4 	bl	80002b8 <__aeabi_dsub>
 800e170:	a31b      	add	r3, pc, #108	; (adr r3, 800e1e0 <__ieee754_rem_pio2+0x330>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	4604      	mov	r4, r0
 800e178:	460d      	mov	r5, r1
 800e17a:	ec51 0b18 	vmov	r0, r1, d8
 800e17e:	f7f2 fa53 	bl	8000628 <__aeabi_dmul>
 800e182:	4622      	mov	r2, r4
 800e184:	462b      	mov	r3, r5
 800e186:	f7f2 f897 	bl	80002b8 <__aeabi_dsub>
 800e18a:	4604      	mov	r4, r0
 800e18c:	460d      	mov	r5, r1
 800e18e:	e75f      	b.n	800e050 <__ieee754_rem_pio2+0x1a0>
 800e190:	4b1b      	ldr	r3, [pc, #108]	; (800e200 <__ieee754_rem_pio2+0x350>)
 800e192:	4598      	cmp	r8, r3
 800e194:	dd36      	ble.n	800e204 <__ieee754_rem_pio2+0x354>
 800e196:	ee10 2a10 	vmov	r2, s0
 800e19a:	462b      	mov	r3, r5
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 f88a 	bl	80002b8 <__aeabi_dsub>
 800e1a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1a8:	e9ca 0100 	strd	r0, r1, [sl]
 800e1ac:	e694      	b.n	800ded8 <__ieee754_rem_pio2+0x28>
 800e1ae:	bf00      	nop
 800e1b0:	54400000 	.word	0x54400000
 800e1b4:	3ff921fb 	.word	0x3ff921fb
 800e1b8:	1a626331 	.word	0x1a626331
 800e1bc:	3dd0b461 	.word	0x3dd0b461
 800e1c0:	1a600000 	.word	0x1a600000
 800e1c4:	3dd0b461 	.word	0x3dd0b461
 800e1c8:	2e037073 	.word	0x2e037073
 800e1cc:	3ba3198a 	.word	0x3ba3198a
 800e1d0:	6dc9c883 	.word	0x6dc9c883
 800e1d4:	3fe45f30 	.word	0x3fe45f30
 800e1d8:	2e000000 	.word	0x2e000000
 800e1dc:	3ba3198a 	.word	0x3ba3198a
 800e1e0:	252049c1 	.word	0x252049c1
 800e1e4:	397b839a 	.word	0x397b839a
 800e1e8:	3fe921fb 	.word	0x3fe921fb
 800e1ec:	4002d97b 	.word	0x4002d97b
 800e1f0:	3ff921fb 	.word	0x3ff921fb
 800e1f4:	413921fb 	.word	0x413921fb
 800e1f8:	3fe00000 	.word	0x3fe00000
 800e1fc:	0800fd70 	.word	0x0800fd70
 800e200:	7fefffff 	.word	0x7fefffff
 800e204:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e208:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e20c:	ee10 0a10 	vmov	r0, s0
 800e210:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e214:	ee10 6a10 	vmov	r6, s0
 800e218:	460f      	mov	r7, r1
 800e21a:	f7f2 fcb5 	bl	8000b88 <__aeabi_d2iz>
 800e21e:	f7f2 f999 	bl	8000554 <__aeabi_i2d>
 800e222:	4602      	mov	r2, r0
 800e224:	460b      	mov	r3, r1
 800e226:	4630      	mov	r0, r6
 800e228:	4639      	mov	r1, r7
 800e22a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e22e:	f7f2 f843 	bl	80002b8 <__aeabi_dsub>
 800e232:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <__ieee754_rem_pio2+0x410>)
 800e234:	2200      	movs	r2, #0
 800e236:	f7f2 f9f7 	bl	8000628 <__aeabi_dmul>
 800e23a:	460f      	mov	r7, r1
 800e23c:	4606      	mov	r6, r0
 800e23e:	f7f2 fca3 	bl	8000b88 <__aeabi_d2iz>
 800e242:	f7f2 f987 	bl	8000554 <__aeabi_i2d>
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
 800e24a:	4630      	mov	r0, r6
 800e24c:	4639      	mov	r1, r7
 800e24e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e252:	f7f2 f831 	bl	80002b8 <__aeabi_dsub>
 800e256:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <__ieee754_rem_pio2+0x410>)
 800e258:	2200      	movs	r2, #0
 800e25a:	f7f2 f9e5 	bl	8000628 <__aeabi_dmul>
 800e25e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e262:	ad04      	add	r5, sp, #16
 800e264:	f04f 0803 	mov.w	r8, #3
 800e268:	46a9      	mov	r9, r5
 800e26a:	2600      	movs	r6, #0
 800e26c:	2700      	movs	r7, #0
 800e26e:	4632      	mov	r2, r6
 800e270:	463b      	mov	r3, r7
 800e272:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e276:	46c3      	mov	fp, r8
 800e278:	3d08      	subs	r5, #8
 800e27a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e27e:	f7f2 fc3b 	bl	8000af8 <__aeabi_dcmpeq>
 800e282:	2800      	cmp	r0, #0
 800e284:	d1f3      	bne.n	800e26e <__ieee754_rem_pio2+0x3be>
 800e286:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <__ieee754_rem_pio2+0x414>)
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	2302      	movs	r3, #2
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	4622      	mov	r2, r4
 800e290:	465b      	mov	r3, fp
 800e292:	4651      	mov	r1, sl
 800e294:	4648      	mov	r0, r9
 800e296:	f000 f993 	bl	800e5c0 <__kernel_rem_pio2>
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	4683      	mov	fp, r0
 800e2a0:	f6bf ae46 	bge.w	800df30 <__ieee754_rem_pio2+0x80>
 800e2a4:	e9da 2100 	ldrd	r2, r1, [sl]
 800e2a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ac:	e9ca 2300 	strd	r2, r3, [sl]
 800e2b0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2b8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e2bc:	e73a      	b.n	800e134 <__ieee754_rem_pio2+0x284>
 800e2be:	bf00      	nop
 800e2c0:	41700000 	.word	0x41700000
 800e2c4:	0800fdf0 	.word	0x0800fdf0

0800e2c8 <__ieee754_sqrt>:
 800e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2cc:	ec55 4b10 	vmov	r4, r5, d0
 800e2d0:	4e55      	ldr	r6, [pc, #340]	; (800e428 <__ieee754_sqrt+0x160>)
 800e2d2:	43ae      	bics	r6, r5
 800e2d4:	ee10 0a10 	vmov	r0, s0
 800e2d8:	ee10 3a10 	vmov	r3, s0
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4629      	mov	r1, r5
 800e2e0:	d110      	bne.n	800e304 <__ieee754_sqrt+0x3c>
 800e2e2:	ee10 2a10 	vmov	r2, s0
 800e2e6:	462b      	mov	r3, r5
 800e2e8:	f7f2 f99e 	bl	8000628 <__aeabi_dmul>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f1 ffe2 	bl	80002bc <__adddf3>
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	ec45 4b10 	vmov	d0, r4, r5
 800e300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e304:	2d00      	cmp	r5, #0
 800e306:	dc10      	bgt.n	800e32a <__ieee754_sqrt+0x62>
 800e308:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e30c:	4330      	orrs	r0, r6
 800e30e:	d0f5      	beq.n	800e2fc <__ieee754_sqrt+0x34>
 800e310:	b15d      	cbz	r5, 800e32a <__ieee754_sqrt+0x62>
 800e312:	ee10 2a10 	vmov	r2, s0
 800e316:	462b      	mov	r3, r5
 800e318:	ee10 0a10 	vmov	r0, s0
 800e31c:	f7f1 ffcc 	bl	80002b8 <__aeabi_dsub>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	f7f2 faaa 	bl	800087c <__aeabi_ddiv>
 800e328:	e7e6      	b.n	800e2f8 <__ieee754_sqrt+0x30>
 800e32a:	1512      	asrs	r2, r2, #20
 800e32c:	d074      	beq.n	800e418 <__ieee754_sqrt+0x150>
 800e32e:	07d4      	lsls	r4, r2, #31
 800e330:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e334:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e33c:	bf5e      	ittt	pl
 800e33e:	0fda      	lsrpl	r2, r3, #31
 800e340:	005b      	lslpl	r3, r3, #1
 800e342:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e346:	2400      	movs	r4, #0
 800e348:	0fda      	lsrs	r2, r3, #31
 800e34a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e34e:	107f      	asrs	r7, r7, #1
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	2516      	movs	r5, #22
 800e354:	4620      	mov	r0, r4
 800e356:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e35a:	1886      	adds	r6, r0, r2
 800e35c:	428e      	cmp	r6, r1
 800e35e:	bfde      	ittt	le
 800e360:	1b89      	suble	r1, r1, r6
 800e362:	18b0      	addle	r0, r6, r2
 800e364:	18a4      	addle	r4, r4, r2
 800e366:	0049      	lsls	r1, r1, #1
 800e368:	3d01      	subs	r5, #1
 800e36a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e36e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e372:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e376:	d1f0      	bne.n	800e35a <__ieee754_sqrt+0x92>
 800e378:	462a      	mov	r2, r5
 800e37a:	f04f 0e20 	mov.w	lr, #32
 800e37e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e382:	4281      	cmp	r1, r0
 800e384:	eb06 0c05 	add.w	ip, r6, r5
 800e388:	dc02      	bgt.n	800e390 <__ieee754_sqrt+0xc8>
 800e38a:	d113      	bne.n	800e3b4 <__ieee754_sqrt+0xec>
 800e38c:	459c      	cmp	ip, r3
 800e38e:	d811      	bhi.n	800e3b4 <__ieee754_sqrt+0xec>
 800e390:	f1bc 0f00 	cmp.w	ip, #0
 800e394:	eb0c 0506 	add.w	r5, ip, r6
 800e398:	da43      	bge.n	800e422 <__ieee754_sqrt+0x15a>
 800e39a:	2d00      	cmp	r5, #0
 800e39c:	db41      	blt.n	800e422 <__ieee754_sqrt+0x15a>
 800e39e:	f100 0801 	add.w	r8, r0, #1
 800e3a2:	1a09      	subs	r1, r1, r0
 800e3a4:	459c      	cmp	ip, r3
 800e3a6:	bf88      	it	hi
 800e3a8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e3ac:	eba3 030c 	sub.w	r3, r3, ip
 800e3b0:	4432      	add	r2, r6
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e3b8:	f1be 0e01 	subs.w	lr, lr, #1
 800e3bc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e3c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e3c8:	d1db      	bne.n	800e382 <__ieee754_sqrt+0xba>
 800e3ca:	430b      	orrs	r3, r1
 800e3cc:	d006      	beq.n	800e3dc <__ieee754_sqrt+0x114>
 800e3ce:	1c50      	adds	r0, r2, #1
 800e3d0:	bf13      	iteet	ne
 800e3d2:	3201      	addne	r2, #1
 800e3d4:	3401      	addeq	r4, #1
 800e3d6:	4672      	moveq	r2, lr
 800e3d8:	f022 0201 	bicne.w	r2, r2, #1
 800e3dc:	1063      	asrs	r3, r4, #1
 800e3de:	0852      	lsrs	r2, r2, #1
 800e3e0:	07e1      	lsls	r1, r4, #31
 800e3e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e3e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e3ea:	bf48      	it	mi
 800e3ec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e3f0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	e781      	b.n	800e2fc <__ieee754_sqrt+0x34>
 800e3f8:	0ad9      	lsrs	r1, r3, #11
 800e3fa:	3815      	subs	r0, #21
 800e3fc:	055b      	lsls	r3, r3, #21
 800e3fe:	2900      	cmp	r1, #0
 800e400:	d0fa      	beq.n	800e3f8 <__ieee754_sqrt+0x130>
 800e402:	02cd      	lsls	r5, r1, #11
 800e404:	d50a      	bpl.n	800e41c <__ieee754_sqrt+0x154>
 800e406:	f1c2 0420 	rsb	r4, r2, #32
 800e40a:	fa23 f404 	lsr.w	r4, r3, r4
 800e40e:	1e55      	subs	r5, r2, #1
 800e410:	4093      	lsls	r3, r2
 800e412:	4321      	orrs	r1, r4
 800e414:	1b42      	subs	r2, r0, r5
 800e416:	e78a      	b.n	800e32e <__ieee754_sqrt+0x66>
 800e418:	4610      	mov	r0, r2
 800e41a:	e7f0      	b.n	800e3fe <__ieee754_sqrt+0x136>
 800e41c:	0049      	lsls	r1, r1, #1
 800e41e:	3201      	adds	r2, #1
 800e420:	e7ef      	b.n	800e402 <__ieee754_sqrt+0x13a>
 800e422:	4680      	mov	r8, r0
 800e424:	e7bd      	b.n	800e3a2 <__ieee754_sqrt+0xda>
 800e426:	bf00      	nop
 800e428:	7ff00000 	.word	0x7ff00000
 800e42c:	00000000 	.word	0x00000000

0800e430 <__kernel_cos>:
 800e430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e434:	ec57 6b10 	vmov	r6, r7, d0
 800e438:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e43c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e440:	ed8d 1b00 	vstr	d1, [sp]
 800e444:	da07      	bge.n	800e456 <__kernel_cos+0x26>
 800e446:	ee10 0a10 	vmov	r0, s0
 800e44a:	4639      	mov	r1, r7
 800e44c:	f7f2 fb9c 	bl	8000b88 <__aeabi_d2iz>
 800e450:	2800      	cmp	r0, #0
 800e452:	f000 8088 	beq.w	800e566 <__kernel_cos+0x136>
 800e456:	4632      	mov	r2, r6
 800e458:	463b      	mov	r3, r7
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f2 f8e3 	bl	8000628 <__aeabi_dmul>
 800e462:	4b51      	ldr	r3, [pc, #324]	; (800e5a8 <__kernel_cos+0x178>)
 800e464:	2200      	movs	r2, #0
 800e466:	4604      	mov	r4, r0
 800e468:	460d      	mov	r5, r1
 800e46a:	f7f2 f8dd 	bl	8000628 <__aeabi_dmul>
 800e46e:	a340      	add	r3, pc, #256	; (adr r3, 800e570 <__kernel_cos+0x140>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	4682      	mov	sl, r0
 800e476:	468b      	mov	fp, r1
 800e478:	4620      	mov	r0, r4
 800e47a:	4629      	mov	r1, r5
 800e47c:	f7f2 f8d4 	bl	8000628 <__aeabi_dmul>
 800e480:	a33d      	add	r3, pc, #244	; (adr r3, 800e578 <__kernel_cos+0x148>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f7f1 ff19 	bl	80002bc <__adddf3>
 800e48a:	4622      	mov	r2, r4
 800e48c:	462b      	mov	r3, r5
 800e48e:	f7f2 f8cb 	bl	8000628 <__aeabi_dmul>
 800e492:	a33b      	add	r3, pc, #236	; (adr r3, 800e580 <__kernel_cos+0x150>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	f7f1 ff0e 	bl	80002b8 <__aeabi_dsub>
 800e49c:	4622      	mov	r2, r4
 800e49e:	462b      	mov	r3, r5
 800e4a0:	f7f2 f8c2 	bl	8000628 <__aeabi_dmul>
 800e4a4:	a338      	add	r3, pc, #224	; (adr r3, 800e588 <__kernel_cos+0x158>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f1 ff07 	bl	80002bc <__adddf3>
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	f7f2 f8b9 	bl	8000628 <__aeabi_dmul>
 800e4b6:	a336      	add	r3, pc, #216	; (adr r3, 800e590 <__kernel_cos+0x160>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	f7f1 fefc 	bl	80002b8 <__aeabi_dsub>
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	f7f2 f8b0 	bl	8000628 <__aeabi_dmul>
 800e4c8:	a333      	add	r3, pc, #204	; (adr r3, 800e598 <__kernel_cos+0x168>)
 800e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ce:	f7f1 fef5 	bl	80002bc <__adddf3>
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	462b      	mov	r3, r5
 800e4d6:	f7f2 f8a7 	bl	8000628 <__aeabi_dmul>
 800e4da:	4622      	mov	r2, r4
 800e4dc:	462b      	mov	r3, r5
 800e4de:	f7f2 f8a3 	bl	8000628 <__aeabi_dmul>
 800e4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	460d      	mov	r5, r1
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	f7f2 f89b 	bl	8000628 <__aeabi_dmul>
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7f1 fedd 	bl	80002b8 <__aeabi_dsub>
 800e4fe:	4b2b      	ldr	r3, [pc, #172]	; (800e5ac <__kernel_cos+0x17c>)
 800e500:	4598      	cmp	r8, r3
 800e502:	4606      	mov	r6, r0
 800e504:	460f      	mov	r7, r1
 800e506:	dc10      	bgt.n	800e52a <__kernel_cos+0xfa>
 800e508:	4602      	mov	r2, r0
 800e50a:	460b      	mov	r3, r1
 800e50c:	4650      	mov	r0, sl
 800e50e:	4659      	mov	r1, fp
 800e510:	f7f1 fed2 	bl	80002b8 <__aeabi_dsub>
 800e514:	460b      	mov	r3, r1
 800e516:	4926      	ldr	r1, [pc, #152]	; (800e5b0 <__kernel_cos+0x180>)
 800e518:	4602      	mov	r2, r0
 800e51a:	2000      	movs	r0, #0
 800e51c:	f7f1 fecc 	bl	80002b8 <__aeabi_dsub>
 800e520:	ec41 0b10 	vmov	d0, r0, r1
 800e524:	b003      	add	sp, #12
 800e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52a:	4b22      	ldr	r3, [pc, #136]	; (800e5b4 <__kernel_cos+0x184>)
 800e52c:	4920      	ldr	r1, [pc, #128]	; (800e5b0 <__kernel_cos+0x180>)
 800e52e:	4598      	cmp	r8, r3
 800e530:	bfcc      	ite	gt
 800e532:	4d21      	ldrgt	r5, [pc, #132]	; (800e5b8 <__kernel_cos+0x188>)
 800e534:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e538:	2400      	movs	r4, #0
 800e53a:	4622      	mov	r2, r4
 800e53c:	462b      	mov	r3, r5
 800e53e:	2000      	movs	r0, #0
 800e540:	f7f1 feba 	bl	80002b8 <__aeabi_dsub>
 800e544:	4622      	mov	r2, r4
 800e546:	4680      	mov	r8, r0
 800e548:	4689      	mov	r9, r1
 800e54a:	462b      	mov	r3, r5
 800e54c:	4650      	mov	r0, sl
 800e54e:	4659      	mov	r1, fp
 800e550:	f7f1 feb2 	bl	80002b8 <__aeabi_dsub>
 800e554:	4632      	mov	r2, r6
 800e556:	463b      	mov	r3, r7
 800e558:	f7f1 feae 	bl	80002b8 <__aeabi_dsub>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4640      	mov	r0, r8
 800e562:	4649      	mov	r1, r9
 800e564:	e7da      	b.n	800e51c <__kernel_cos+0xec>
 800e566:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e5a0 <__kernel_cos+0x170>
 800e56a:	e7db      	b.n	800e524 <__kernel_cos+0xf4>
 800e56c:	f3af 8000 	nop.w
 800e570:	be8838d4 	.word	0xbe8838d4
 800e574:	bda8fae9 	.word	0xbda8fae9
 800e578:	bdb4b1c4 	.word	0xbdb4b1c4
 800e57c:	3e21ee9e 	.word	0x3e21ee9e
 800e580:	809c52ad 	.word	0x809c52ad
 800e584:	3e927e4f 	.word	0x3e927e4f
 800e588:	19cb1590 	.word	0x19cb1590
 800e58c:	3efa01a0 	.word	0x3efa01a0
 800e590:	16c15177 	.word	0x16c15177
 800e594:	3f56c16c 	.word	0x3f56c16c
 800e598:	5555554c 	.word	0x5555554c
 800e59c:	3fa55555 	.word	0x3fa55555
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	3ff00000 	.word	0x3ff00000
 800e5a8:	3fe00000 	.word	0x3fe00000
 800e5ac:	3fd33332 	.word	0x3fd33332
 800e5b0:	3ff00000 	.word	0x3ff00000
 800e5b4:	3fe90000 	.word	0x3fe90000
 800e5b8:	3fd20000 	.word	0x3fd20000
 800e5bc:	00000000 	.word	0x00000000

0800e5c0 <__kernel_rem_pio2>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	ed2d 8b02 	vpush	{d8}
 800e5c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e5cc:	f112 0f14 	cmn.w	r2, #20
 800e5d0:	9308      	str	r3, [sp, #32]
 800e5d2:	9101      	str	r1, [sp, #4]
 800e5d4:	4bc4      	ldr	r3, [pc, #784]	; (800e8e8 <__kernel_rem_pio2+0x328>)
 800e5d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e5d8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e5da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5de:	9302      	str	r3, [sp, #8]
 800e5e0:	9b08      	ldr	r3, [sp, #32]
 800e5e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5e6:	bfa8      	it	ge
 800e5e8:	1ed4      	subge	r4, r2, #3
 800e5ea:	9306      	str	r3, [sp, #24]
 800e5ec:	bfb2      	itee	lt
 800e5ee:	2400      	movlt	r4, #0
 800e5f0:	2318      	movge	r3, #24
 800e5f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e5f6:	f06f 0317 	mvn.w	r3, #23
 800e5fa:	fb04 3303 	mla	r3, r4, r3, r3
 800e5fe:	eb03 0a02 	add.w	sl, r3, r2
 800e602:	9b02      	ldr	r3, [sp, #8]
 800e604:	9a06      	ldr	r2, [sp, #24]
 800e606:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e8d8 <__kernel_rem_pio2+0x318>
 800e60a:	eb03 0802 	add.w	r8, r3, r2
 800e60e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e610:	1aa7      	subs	r7, r4, r2
 800e612:	ae22      	add	r6, sp, #136	; 0x88
 800e614:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e618:	2500      	movs	r5, #0
 800e61a:	4545      	cmp	r5, r8
 800e61c:	dd13      	ble.n	800e646 <__kernel_rem_pio2+0x86>
 800e61e:	9b08      	ldr	r3, [sp, #32]
 800e620:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e8d8 <__kernel_rem_pio2+0x318>
 800e624:	aa22      	add	r2, sp, #136	; 0x88
 800e626:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e62a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e62e:	f04f 0800 	mov.w	r8, #0
 800e632:	9b02      	ldr	r3, [sp, #8]
 800e634:	4598      	cmp	r8, r3
 800e636:	dc2f      	bgt.n	800e698 <__kernel_rem_pio2+0xd8>
 800e638:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e63c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e640:	462f      	mov	r7, r5
 800e642:	2600      	movs	r6, #0
 800e644:	e01b      	b.n	800e67e <__kernel_rem_pio2+0xbe>
 800e646:	42ef      	cmn	r7, r5
 800e648:	d407      	bmi.n	800e65a <__kernel_rem_pio2+0x9a>
 800e64a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e64e:	f7f1 ff81 	bl	8000554 <__aeabi_i2d>
 800e652:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e656:	3501      	adds	r5, #1
 800e658:	e7df      	b.n	800e61a <__kernel_rem_pio2+0x5a>
 800e65a:	ec51 0b18 	vmov	r0, r1, d8
 800e65e:	e7f8      	b.n	800e652 <__kernel_rem_pio2+0x92>
 800e660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e664:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e668:	f7f1 ffde 	bl	8000628 <__aeabi_dmul>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e674:	f7f1 fe22 	bl	80002bc <__adddf3>
 800e678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e67c:	3601      	adds	r6, #1
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	429e      	cmp	r6, r3
 800e682:	f1a7 0708 	sub.w	r7, r7, #8
 800e686:	ddeb      	ble.n	800e660 <__kernel_rem_pio2+0xa0>
 800e688:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e68c:	f108 0801 	add.w	r8, r8, #1
 800e690:	ecab 7b02 	vstmia	fp!, {d7}
 800e694:	3508      	adds	r5, #8
 800e696:	e7cc      	b.n	800e632 <__kernel_rem_pio2+0x72>
 800e698:	9b02      	ldr	r3, [sp, #8]
 800e69a:	aa0e      	add	r2, sp, #56	; 0x38
 800e69c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6a0:	930d      	str	r3, [sp, #52]	; 0x34
 800e6a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e6a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e6a8:	9c02      	ldr	r4, [sp, #8]
 800e6aa:	930c      	str	r3, [sp, #48]	; 0x30
 800e6ac:	00e3      	lsls	r3, r4, #3
 800e6ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e6b0:	ab9a      	add	r3, sp, #616	; 0x268
 800e6b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e6ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e6be:	ab72      	add	r3, sp, #456	; 0x1c8
 800e6c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e6c4:	46c3      	mov	fp, r8
 800e6c6:	46a1      	mov	r9, r4
 800e6c8:	f1b9 0f00 	cmp.w	r9, #0
 800e6cc:	f1a5 0508 	sub.w	r5, r5, #8
 800e6d0:	dc77      	bgt.n	800e7c2 <__kernel_rem_pio2+0x202>
 800e6d2:	ec47 6b10 	vmov	d0, r6, r7
 800e6d6:	4650      	mov	r0, sl
 800e6d8:	f000 fde6 	bl	800f2a8 <scalbn>
 800e6dc:	ec57 6b10 	vmov	r6, r7, d0
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e6e6:	ee10 0a10 	vmov	r0, s0
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	f7f1 ff9c 	bl	8000628 <__aeabi_dmul>
 800e6f0:	ec41 0b10 	vmov	d0, r0, r1
 800e6f4:	f000 fd58 	bl	800f1a8 <floor>
 800e6f8:	4b7c      	ldr	r3, [pc, #496]	; (800e8ec <__kernel_rem_pio2+0x32c>)
 800e6fa:	ec51 0b10 	vmov	r0, r1, d0
 800e6fe:	2200      	movs	r2, #0
 800e700:	f7f1 ff92 	bl	8000628 <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4630      	mov	r0, r6
 800e70a:	4639      	mov	r1, r7
 800e70c:	f7f1 fdd4 	bl	80002b8 <__aeabi_dsub>
 800e710:	460f      	mov	r7, r1
 800e712:	4606      	mov	r6, r0
 800e714:	f7f2 fa38 	bl	8000b88 <__aeabi_d2iz>
 800e718:	9004      	str	r0, [sp, #16]
 800e71a:	f7f1 ff1b 	bl	8000554 <__aeabi_i2d>
 800e71e:	4602      	mov	r2, r0
 800e720:	460b      	mov	r3, r1
 800e722:	4630      	mov	r0, r6
 800e724:	4639      	mov	r1, r7
 800e726:	f7f1 fdc7 	bl	80002b8 <__aeabi_dsub>
 800e72a:	f1ba 0f00 	cmp.w	sl, #0
 800e72e:	4606      	mov	r6, r0
 800e730:	460f      	mov	r7, r1
 800e732:	dd6d      	ble.n	800e810 <__kernel_rem_pio2+0x250>
 800e734:	1e62      	subs	r2, r4, #1
 800e736:	ab0e      	add	r3, sp, #56	; 0x38
 800e738:	9d04      	ldr	r5, [sp, #16]
 800e73a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e73e:	f1ca 0118 	rsb	r1, sl, #24
 800e742:	fa40 f301 	asr.w	r3, r0, r1
 800e746:	441d      	add	r5, r3
 800e748:	408b      	lsls	r3, r1
 800e74a:	1ac0      	subs	r0, r0, r3
 800e74c:	ab0e      	add	r3, sp, #56	; 0x38
 800e74e:	9504      	str	r5, [sp, #16]
 800e750:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e754:	f1ca 0317 	rsb	r3, sl, #23
 800e758:	fa40 fb03 	asr.w	fp, r0, r3
 800e75c:	f1bb 0f00 	cmp.w	fp, #0
 800e760:	dd65      	ble.n	800e82e <__kernel_rem_pio2+0x26e>
 800e762:	9b04      	ldr	r3, [sp, #16]
 800e764:	2200      	movs	r2, #0
 800e766:	3301      	adds	r3, #1
 800e768:	9304      	str	r3, [sp, #16]
 800e76a:	4615      	mov	r5, r2
 800e76c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e770:	4294      	cmp	r4, r2
 800e772:	f300 809c 	bgt.w	800e8ae <__kernel_rem_pio2+0x2ee>
 800e776:	f1ba 0f00 	cmp.w	sl, #0
 800e77a:	dd07      	ble.n	800e78c <__kernel_rem_pio2+0x1cc>
 800e77c:	f1ba 0f01 	cmp.w	sl, #1
 800e780:	f000 80c0 	beq.w	800e904 <__kernel_rem_pio2+0x344>
 800e784:	f1ba 0f02 	cmp.w	sl, #2
 800e788:	f000 80c6 	beq.w	800e918 <__kernel_rem_pio2+0x358>
 800e78c:	f1bb 0f02 	cmp.w	fp, #2
 800e790:	d14d      	bne.n	800e82e <__kernel_rem_pio2+0x26e>
 800e792:	4632      	mov	r2, r6
 800e794:	463b      	mov	r3, r7
 800e796:	4956      	ldr	r1, [pc, #344]	; (800e8f0 <__kernel_rem_pio2+0x330>)
 800e798:	2000      	movs	r0, #0
 800e79a:	f7f1 fd8d 	bl	80002b8 <__aeabi_dsub>
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	d043      	beq.n	800e82e <__kernel_rem_pio2+0x26e>
 800e7a6:	4650      	mov	r0, sl
 800e7a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e8e0 <__kernel_rem_pio2+0x320>
 800e7ac:	f000 fd7c 	bl	800f2a8 <scalbn>
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	ec53 2b10 	vmov	r2, r3, d0
 800e7b8:	f7f1 fd7e 	bl	80002b8 <__aeabi_dsub>
 800e7bc:	4606      	mov	r6, r0
 800e7be:	460f      	mov	r7, r1
 800e7c0:	e035      	b.n	800e82e <__kernel_rem_pio2+0x26e>
 800e7c2:	4b4c      	ldr	r3, [pc, #304]	; (800e8f4 <__kernel_rem_pio2+0x334>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	f7f1 ff2d 	bl	8000628 <__aeabi_dmul>
 800e7ce:	f7f2 f9db 	bl	8000b88 <__aeabi_d2iz>
 800e7d2:	f7f1 febf 	bl	8000554 <__aeabi_i2d>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	ec43 2b18 	vmov	d8, r2, r3
 800e7de:	4b46      	ldr	r3, [pc, #280]	; (800e8f8 <__kernel_rem_pio2+0x338>)
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f7f1 ff21 	bl	8000628 <__aeabi_dmul>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	f7f1 fd63 	bl	80002b8 <__aeabi_dsub>
 800e7f2:	f7f2 f9c9 	bl	8000b88 <__aeabi_d2iz>
 800e7f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7fa:	f84b 0b04 	str.w	r0, [fp], #4
 800e7fe:	ec51 0b18 	vmov	r0, r1, d8
 800e802:	f7f1 fd5b 	bl	80002bc <__adddf3>
 800e806:	f109 39ff 	add.w	r9, r9, #4294967295
 800e80a:	4606      	mov	r6, r0
 800e80c:	460f      	mov	r7, r1
 800e80e:	e75b      	b.n	800e6c8 <__kernel_rem_pio2+0x108>
 800e810:	d106      	bne.n	800e820 <__kernel_rem_pio2+0x260>
 800e812:	1e63      	subs	r3, r4, #1
 800e814:	aa0e      	add	r2, sp, #56	; 0x38
 800e816:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e81a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e81e:	e79d      	b.n	800e75c <__kernel_rem_pio2+0x19c>
 800e820:	4b36      	ldr	r3, [pc, #216]	; (800e8fc <__kernel_rem_pio2+0x33c>)
 800e822:	2200      	movs	r2, #0
 800e824:	f7f2 f986 	bl	8000b34 <__aeabi_dcmpge>
 800e828:	2800      	cmp	r0, #0
 800e82a:	d13d      	bne.n	800e8a8 <__kernel_rem_pio2+0x2e8>
 800e82c:	4683      	mov	fp, r0
 800e82e:	2200      	movs	r2, #0
 800e830:	2300      	movs	r3, #0
 800e832:	4630      	mov	r0, r6
 800e834:	4639      	mov	r1, r7
 800e836:	f7f2 f95f 	bl	8000af8 <__aeabi_dcmpeq>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f000 80c0 	beq.w	800e9c0 <__kernel_rem_pio2+0x400>
 800e840:	1e65      	subs	r5, r4, #1
 800e842:	462b      	mov	r3, r5
 800e844:	2200      	movs	r2, #0
 800e846:	9902      	ldr	r1, [sp, #8]
 800e848:	428b      	cmp	r3, r1
 800e84a:	da6c      	bge.n	800e926 <__kernel_rem_pio2+0x366>
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	f000 8089 	beq.w	800e964 <__kernel_rem_pio2+0x3a4>
 800e852:	ab0e      	add	r3, sp, #56	; 0x38
 800e854:	f1aa 0a18 	sub.w	sl, sl, #24
 800e858:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 80ad 	beq.w	800e9bc <__kernel_rem_pio2+0x3fc>
 800e862:	4650      	mov	r0, sl
 800e864:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e8e0 <__kernel_rem_pio2+0x320>
 800e868:	f000 fd1e 	bl	800f2a8 <scalbn>
 800e86c:	ab9a      	add	r3, sp, #616	; 0x268
 800e86e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e872:	ec57 6b10 	vmov	r6, r7, d0
 800e876:	00ec      	lsls	r4, r5, #3
 800e878:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e87c:	46aa      	mov	sl, r5
 800e87e:	f1ba 0f00 	cmp.w	sl, #0
 800e882:	f280 80d6 	bge.w	800ea32 <__kernel_rem_pio2+0x472>
 800e886:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e8d8 <__kernel_rem_pio2+0x318>
 800e88a:	462e      	mov	r6, r5
 800e88c:	2e00      	cmp	r6, #0
 800e88e:	f2c0 8104 	blt.w	800ea9a <__kernel_rem_pio2+0x4da>
 800e892:	ab72      	add	r3, sp, #456	; 0x1c8
 800e894:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e898:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e900 <__kernel_rem_pio2+0x340>
 800e89c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e8a0:	f04f 0800 	mov.w	r8, #0
 800e8a4:	1baf      	subs	r7, r5, r6
 800e8a6:	e0ea      	b.n	800ea7e <__kernel_rem_pio2+0x4be>
 800e8a8:	f04f 0b02 	mov.w	fp, #2
 800e8ac:	e759      	b.n	800e762 <__kernel_rem_pio2+0x1a2>
 800e8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b2:	b955      	cbnz	r5, 800e8ca <__kernel_rem_pio2+0x30a>
 800e8b4:	b123      	cbz	r3, 800e8c0 <__kernel_rem_pio2+0x300>
 800e8b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e8ba:	f8c8 3000 	str.w	r3, [r8]
 800e8be:	2301      	movs	r3, #1
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	f108 0804 	add.w	r8, r8, #4
 800e8c6:	461d      	mov	r5, r3
 800e8c8:	e752      	b.n	800e770 <__kernel_rem_pio2+0x1b0>
 800e8ca:	1acb      	subs	r3, r1, r3
 800e8cc:	f8c8 3000 	str.w	r3, [r8]
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	e7f5      	b.n	800e8c0 <__kernel_rem_pio2+0x300>
 800e8d4:	f3af 8000 	nop.w
	...
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	0800ff38 	.word	0x0800ff38
 800e8ec:	40200000 	.word	0x40200000
 800e8f0:	3ff00000 	.word	0x3ff00000
 800e8f4:	3e700000 	.word	0x3e700000
 800e8f8:	41700000 	.word	0x41700000
 800e8fc:	3fe00000 	.word	0x3fe00000
 800e900:	0800fef8 	.word	0x0800fef8
 800e904:	1e62      	subs	r2, r4, #1
 800e906:	ab0e      	add	r3, sp, #56	; 0x38
 800e908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e910:	a90e      	add	r1, sp, #56	; 0x38
 800e912:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e916:	e739      	b.n	800e78c <__kernel_rem_pio2+0x1cc>
 800e918:	1e62      	subs	r2, r4, #1
 800e91a:	ab0e      	add	r3, sp, #56	; 0x38
 800e91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e920:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e924:	e7f4      	b.n	800e910 <__kernel_rem_pio2+0x350>
 800e926:	a90e      	add	r1, sp, #56	; 0x38
 800e928:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	430a      	orrs	r2, r1
 800e930:	e789      	b.n	800e846 <__kernel_rem_pio2+0x286>
 800e932:	3301      	adds	r3, #1
 800e934:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e938:	2900      	cmp	r1, #0
 800e93a:	d0fa      	beq.n	800e932 <__kernel_rem_pio2+0x372>
 800e93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e93e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e942:	446a      	add	r2, sp
 800e944:	3a98      	subs	r2, #152	; 0x98
 800e946:	920a      	str	r2, [sp, #40]	; 0x28
 800e948:	9a08      	ldr	r2, [sp, #32]
 800e94a:	18e3      	adds	r3, r4, r3
 800e94c:	18a5      	adds	r5, r4, r2
 800e94e:	aa22      	add	r2, sp, #136	; 0x88
 800e950:	f104 0801 	add.w	r8, r4, #1
 800e954:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e958:	9304      	str	r3, [sp, #16]
 800e95a:	9b04      	ldr	r3, [sp, #16]
 800e95c:	4543      	cmp	r3, r8
 800e95e:	da04      	bge.n	800e96a <__kernel_rem_pio2+0x3aa>
 800e960:	461c      	mov	r4, r3
 800e962:	e6a3      	b.n	800e6ac <__kernel_rem_pio2+0xec>
 800e964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e966:	2301      	movs	r3, #1
 800e968:	e7e4      	b.n	800e934 <__kernel_rem_pio2+0x374>
 800e96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e96c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e970:	f7f1 fdf0 	bl	8000554 <__aeabi_i2d>
 800e974:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e97a:	46ab      	mov	fp, r5
 800e97c:	461c      	mov	r4, r3
 800e97e:	f04f 0900 	mov.w	r9, #0
 800e982:	2600      	movs	r6, #0
 800e984:	2700      	movs	r7, #0
 800e986:	9b06      	ldr	r3, [sp, #24]
 800e988:	4599      	cmp	r9, r3
 800e98a:	dd06      	ble.n	800e99a <__kernel_rem_pio2+0x3da>
 800e98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e98e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e992:	f108 0801 	add.w	r8, r8, #1
 800e996:	930a      	str	r3, [sp, #40]	; 0x28
 800e998:	e7df      	b.n	800e95a <__kernel_rem_pio2+0x39a>
 800e99a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e99e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e9a2:	f7f1 fe41 	bl	8000628 <__aeabi_dmul>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	f7f1 fc85 	bl	80002bc <__adddf3>
 800e9b2:	f109 0901 	add.w	r9, r9, #1
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	e7e4      	b.n	800e986 <__kernel_rem_pio2+0x3c6>
 800e9bc:	3d01      	subs	r5, #1
 800e9be:	e748      	b.n	800e852 <__kernel_rem_pio2+0x292>
 800e9c0:	ec47 6b10 	vmov	d0, r6, r7
 800e9c4:	f1ca 0000 	rsb	r0, sl, #0
 800e9c8:	f000 fc6e 	bl	800f2a8 <scalbn>
 800e9cc:	ec57 6b10 	vmov	r6, r7, d0
 800e9d0:	4ba0      	ldr	r3, [pc, #640]	; (800ec54 <__kernel_rem_pio2+0x694>)
 800e9d2:	ee10 0a10 	vmov	r0, s0
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4639      	mov	r1, r7
 800e9da:	f7f2 f8ab 	bl	8000b34 <__aeabi_dcmpge>
 800e9de:	b1f8      	cbz	r0, 800ea20 <__kernel_rem_pio2+0x460>
 800e9e0:	4b9d      	ldr	r3, [pc, #628]	; (800ec58 <__kernel_rem_pio2+0x698>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f1 fe1e 	bl	8000628 <__aeabi_dmul>
 800e9ec:	f7f2 f8cc 	bl	8000b88 <__aeabi_d2iz>
 800e9f0:	4680      	mov	r8, r0
 800e9f2:	f7f1 fdaf 	bl	8000554 <__aeabi_i2d>
 800e9f6:	4b97      	ldr	r3, [pc, #604]	; (800ec54 <__kernel_rem_pio2+0x694>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f7f1 fe15 	bl	8000628 <__aeabi_dmul>
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4602      	mov	r2, r0
 800ea02:	4639      	mov	r1, r7
 800ea04:	4630      	mov	r0, r6
 800ea06:	f7f1 fc57 	bl	80002b8 <__aeabi_dsub>
 800ea0a:	f7f2 f8bd 	bl	8000b88 <__aeabi_d2iz>
 800ea0e:	1c65      	adds	r5, r4, #1
 800ea10:	ab0e      	add	r3, sp, #56	; 0x38
 800ea12:	f10a 0a18 	add.w	sl, sl, #24
 800ea16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea1a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ea1e:	e720      	b.n	800e862 <__kernel_rem_pio2+0x2a2>
 800ea20:	4630      	mov	r0, r6
 800ea22:	4639      	mov	r1, r7
 800ea24:	f7f2 f8b0 	bl	8000b88 <__aeabi_d2iz>
 800ea28:	ab0e      	add	r3, sp, #56	; 0x38
 800ea2a:	4625      	mov	r5, r4
 800ea2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea30:	e717      	b.n	800e862 <__kernel_rem_pio2+0x2a2>
 800ea32:	ab0e      	add	r3, sp, #56	; 0x38
 800ea34:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ea38:	f7f1 fd8c 	bl	8000554 <__aeabi_i2d>
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fdf2 	bl	8000628 <__aeabi_dmul>
 800ea44:	4b84      	ldr	r3, [pc, #528]	; (800ec58 <__kernel_rem_pio2+0x698>)
 800ea46:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	4639      	mov	r1, r7
 800ea50:	f7f1 fdea 	bl	8000628 <__aeabi_dmul>
 800ea54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	e70f      	b.n	800e87e <__kernel_rem_pio2+0x2be>
 800ea5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ea62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ea66:	f7f1 fddf 	bl	8000628 <__aeabi_dmul>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea72:	f7f1 fc23 	bl	80002bc <__adddf3>
 800ea76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea7a:	f108 0801 	add.w	r8, r8, #1
 800ea7e:	9b02      	ldr	r3, [sp, #8]
 800ea80:	4598      	cmp	r8, r3
 800ea82:	dc01      	bgt.n	800ea88 <__kernel_rem_pio2+0x4c8>
 800ea84:	45b8      	cmp	r8, r7
 800ea86:	ddea      	ble.n	800ea5e <__kernel_rem_pio2+0x49e>
 800ea88:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ea8c:	ab4a      	add	r3, sp, #296	; 0x128
 800ea8e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ea92:	ed87 7b00 	vstr	d7, [r7]
 800ea96:	3e01      	subs	r6, #1
 800ea98:	e6f8      	b.n	800e88c <__kernel_rem_pio2+0x2cc>
 800ea9a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	dc0b      	bgt.n	800eab8 <__kernel_rem_pio2+0x4f8>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dc35      	bgt.n	800eb10 <__kernel_rem_pio2+0x550>
 800eaa4:	d059      	beq.n	800eb5a <__kernel_rem_pio2+0x59a>
 800eaa6:	9b04      	ldr	r3, [sp, #16]
 800eaa8:	f003 0007 	and.w	r0, r3, #7
 800eaac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800eab0:	ecbd 8b02 	vpop	{d8}
 800eab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d1f3      	bne.n	800eaa6 <__kernel_rem_pio2+0x4e6>
 800eabe:	ab4a      	add	r3, sp, #296	; 0x128
 800eac0:	4423      	add	r3, r4
 800eac2:	9306      	str	r3, [sp, #24]
 800eac4:	461c      	mov	r4, r3
 800eac6:	469a      	mov	sl, r3
 800eac8:	9502      	str	r5, [sp, #8]
 800eaca:	9b02      	ldr	r3, [sp, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f1aa 0a08 	sub.w	sl, sl, #8
 800ead2:	dc6b      	bgt.n	800ebac <__kernel_rem_pio2+0x5ec>
 800ead4:	46aa      	mov	sl, r5
 800ead6:	f1ba 0f01 	cmp.w	sl, #1
 800eada:	f1a4 0408 	sub.w	r4, r4, #8
 800eade:	f300 8085 	bgt.w	800ebec <__kernel_rem_pio2+0x62c>
 800eae2:	9c06      	ldr	r4, [sp, #24]
 800eae4:	2000      	movs	r0, #0
 800eae6:	3408      	adds	r4, #8
 800eae8:	2100      	movs	r1, #0
 800eaea:	2d01      	cmp	r5, #1
 800eaec:	f300 809d 	bgt.w	800ec2a <__kernel_rem_pio2+0x66a>
 800eaf0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eaf4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800eaf8:	f1bb 0f00 	cmp.w	fp, #0
 800eafc:	f040 809b 	bne.w	800ec36 <__kernel_rem_pio2+0x676>
 800eb00:	9b01      	ldr	r3, [sp, #4]
 800eb02:	e9c3 5600 	strd	r5, r6, [r3]
 800eb06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800eb0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eb0e:	e7ca      	b.n	800eaa6 <__kernel_rem_pio2+0x4e6>
 800eb10:	3408      	adds	r4, #8
 800eb12:	ab4a      	add	r3, sp, #296	; 0x128
 800eb14:	441c      	add	r4, r3
 800eb16:	462e      	mov	r6, r5
 800eb18:	2000      	movs	r0, #0
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	2e00      	cmp	r6, #0
 800eb1e:	da36      	bge.n	800eb8e <__kernel_rem_pio2+0x5ce>
 800eb20:	f1bb 0f00 	cmp.w	fp, #0
 800eb24:	d039      	beq.n	800eb9a <__kernel_rem_pio2+0x5da>
 800eb26:	4602      	mov	r2, r0
 800eb28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb2c:	9c01      	ldr	r4, [sp, #4]
 800eb2e:	e9c4 2300 	strd	r2, r3, [r4]
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800eb3a:	f7f1 fbbd 	bl	80002b8 <__aeabi_dsub>
 800eb3e:	ae4c      	add	r6, sp, #304	; 0x130
 800eb40:	2401      	movs	r4, #1
 800eb42:	42a5      	cmp	r5, r4
 800eb44:	da2c      	bge.n	800eba0 <__kernel_rem_pio2+0x5e0>
 800eb46:	f1bb 0f00 	cmp.w	fp, #0
 800eb4a:	d002      	beq.n	800eb52 <__kernel_rem_pio2+0x592>
 800eb4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb50:	4619      	mov	r1, r3
 800eb52:	9b01      	ldr	r3, [sp, #4]
 800eb54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eb58:	e7a5      	b.n	800eaa6 <__kernel_rem_pio2+0x4e6>
 800eb5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800eb5e:	eb0d 0403 	add.w	r4, sp, r3
 800eb62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800eb66:	2000      	movs	r0, #0
 800eb68:	2100      	movs	r1, #0
 800eb6a:	2d00      	cmp	r5, #0
 800eb6c:	da09      	bge.n	800eb82 <__kernel_rem_pio2+0x5c2>
 800eb6e:	f1bb 0f00 	cmp.w	fp, #0
 800eb72:	d002      	beq.n	800eb7a <__kernel_rem_pio2+0x5ba>
 800eb74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb78:	4619      	mov	r1, r3
 800eb7a:	9b01      	ldr	r3, [sp, #4]
 800eb7c:	e9c3 0100 	strd	r0, r1, [r3]
 800eb80:	e791      	b.n	800eaa6 <__kernel_rem_pio2+0x4e6>
 800eb82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb86:	f7f1 fb99 	bl	80002bc <__adddf3>
 800eb8a:	3d01      	subs	r5, #1
 800eb8c:	e7ed      	b.n	800eb6a <__kernel_rem_pio2+0x5aa>
 800eb8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb92:	f7f1 fb93 	bl	80002bc <__adddf3>
 800eb96:	3e01      	subs	r6, #1
 800eb98:	e7c0      	b.n	800eb1c <__kernel_rem_pio2+0x55c>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e7c5      	b.n	800eb2c <__kernel_rem_pio2+0x56c>
 800eba0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eba4:	f7f1 fb8a 	bl	80002bc <__adddf3>
 800eba8:	3401      	adds	r4, #1
 800ebaa:	e7ca      	b.n	800eb42 <__kernel_rem_pio2+0x582>
 800ebac:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebb0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ebb4:	9b02      	ldr	r3, [sp, #8]
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	9302      	str	r3, [sp, #8]
 800ebba:	4632      	mov	r2, r6
 800ebbc:	463b      	mov	r3, r7
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 fb7b 	bl	80002bc <__adddf3>
 800ebc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4640      	mov	r0, r8
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	f7f1 fb71 	bl	80002b8 <__aeabi_dsub>
 800ebd6:	4632      	mov	r2, r6
 800ebd8:	463b      	mov	r3, r7
 800ebda:	f7f1 fb6f 	bl	80002bc <__adddf3>
 800ebde:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ebe2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebe6:	ed8a 7b00 	vstr	d7, [sl]
 800ebea:	e76e      	b.n	800eaca <__kernel_rem_pio2+0x50a>
 800ebec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ebf0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	4632      	mov	r2, r6
 800ebf8:	463b      	mov	r3, r7
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	f7f1 fb5e 	bl	80002bc <__adddf3>
 800ec00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fb54 	bl	80002b8 <__aeabi_dsub>
 800ec10:	4632      	mov	r2, r6
 800ec12:	463b      	mov	r3, r7
 800ec14:	f7f1 fb52 	bl	80002bc <__adddf3>
 800ec18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec20:	ed84 7b00 	vstr	d7, [r4]
 800ec24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec28:	e755      	b.n	800ead6 <__kernel_rem_pio2+0x516>
 800ec2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec2e:	f7f1 fb45 	bl	80002bc <__adddf3>
 800ec32:	3d01      	subs	r5, #1
 800ec34:	e759      	b.n	800eaea <__kernel_rem_pio2+0x52a>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	9a01      	ldr	r2, [sp, #4]
 800ec3a:	601d      	str	r5, [r3, #0]
 800ec3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ec40:	605c      	str	r4, [r3, #4]
 800ec42:	609f      	str	r7, [r3, #8]
 800ec44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ec48:	60d3      	str	r3, [r2, #12]
 800ec4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec4e:	6110      	str	r0, [r2, #16]
 800ec50:	6153      	str	r3, [r2, #20]
 800ec52:	e728      	b.n	800eaa6 <__kernel_rem_pio2+0x4e6>
 800ec54:	41700000 	.word	0x41700000
 800ec58:	3e700000 	.word	0x3e700000
 800ec5c:	00000000 	.word	0x00000000

0800ec60 <__kernel_sin>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	ed2d 8b04 	vpush	{d8-d9}
 800ec68:	eeb0 8a41 	vmov.f32	s16, s2
 800ec6c:	eef0 8a61 	vmov.f32	s17, s3
 800ec70:	ec55 4b10 	vmov	r4, r5, d0
 800ec74:	b083      	sub	sp, #12
 800ec76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ec7e:	9001      	str	r0, [sp, #4]
 800ec80:	da06      	bge.n	800ec90 <__kernel_sin+0x30>
 800ec82:	ee10 0a10 	vmov	r0, s0
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 ff7e 	bl	8000b88 <__aeabi_d2iz>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d051      	beq.n	800ed34 <__kernel_sin+0xd4>
 800ec90:	4622      	mov	r2, r4
 800ec92:	462b      	mov	r3, r5
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 fcc6 	bl	8000628 <__aeabi_dmul>
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	4602      	mov	r2, r0
 800eca2:	460b      	mov	r3, r1
 800eca4:	4620      	mov	r0, r4
 800eca6:	4629      	mov	r1, r5
 800eca8:	f7f1 fcbe 	bl	8000628 <__aeabi_dmul>
 800ecac:	a341      	add	r3, pc, #260	; (adr r3, 800edb4 <__kernel_sin+0x154>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	4689      	mov	r9, r1
 800ecb6:	4650      	mov	r0, sl
 800ecb8:	4659      	mov	r1, fp
 800ecba:	f7f1 fcb5 	bl	8000628 <__aeabi_dmul>
 800ecbe:	a33f      	add	r3, pc, #252	; (adr r3, 800edbc <__kernel_sin+0x15c>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	f7f1 faf8 	bl	80002b8 <__aeabi_dsub>
 800ecc8:	4652      	mov	r2, sl
 800ecca:	465b      	mov	r3, fp
 800eccc:	f7f1 fcac 	bl	8000628 <__aeabi_dmul>
 800ecd0:	a33c      	add	r3, pc, #240	; (adr r3, 800edc4 <__kernel_sin+0x164>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f7f1 faf1 	bl	80002bc <__adddf3>
 800ecda:	4652      	mov	r2, sl
 800ecdc:	465b      	mov	r3, fp
 800ecde:	f7f1 fca3 	bl	8000628 <__aeabi_dmul>
 800ece2:	a33a      	add	r3, pc, #232	; (adr r3, 800edcc <__kernel_sin+0x16c>)
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	f7f1 fae6 	bl	80002b8 <__aeabi_dsub>
 800ecec:	4652      	mov	r2, sl
 800ecee:	465b      	mov	r3, fp
 800ecf0:	f7f1 fc9a 	bl	8000628 <__aeabi_dmul>
 800ecf4:	a337      	add	r3, pc, #220	; (adr r3, 800edd4 <__kernel_sin+0x174>)
 800ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfa:	f7f1 fadf 	bl	80002bc <__adddf3>
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	4606      	mov	r6, r0
 800ed02:	460f      	mov	r7, r1
 800ed04:	b9eb      	cbnz	r3, 800ed42 <__kernel_sin+0xe2>
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4650      	mov	r0, sl
 800ed0c:	4659      	mov	r1, fp
 800ed0e:	f7f1 fc8b 	bl	8000628 <__aeabi_dmul>
 800ed12:	a325      	add	r3, pc, #148	; (adr r3, 800eda8 <__kernel_sin+0x148>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 face 	bl	80002b8 <__aeabi_dsub>
 800ed1c:	4642      	mov	r2, r8
 800ed1e:	464b      	mov	r3, r9
 800ed20:	f7f1 fc82 	bl	8000628 <__aeabi_dmul>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4620      	mov	r0, r4
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	f7f1 fac6 	bl	80002bc <__adddf3>
 800ed30:	4604      	mov	r4, r0
 800ed32:	460d      	mov	r5, r1
 800ed34:	ec45 4b10 	vmov	d0, r4, r5
 800ed38:	b003      	add	sp, #12
 800ed3a:	ecbd 8b04 	vpop	{d8-d9}
 800ed3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed42:	4b1b      	ldr	r3, [pc, #108]	; (800edb0 <__kernel_sin+0x150>)
 800ed44:	ec51 0b18 	vmov	r0, r1, d8
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f7f1 fc6d 	bl	8000628 <__aeabi_dmul>
 800ed4e:	4632      	mov	r2, r6
 800ed50:	ec41 0b19 	vmov	d9, r0, r1
 800ed54:	463b      	mov	r3, r7
 800ed56:	4640      	mov	r0, r8
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 fc65 	bl	8000628 <__aeabi_dmul>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	ec51 0b19 	vmov	r0, r1, d9
 800ed66:	f7f1 faa7 	bl	80002b8 <__aeabi_dsub>
 800ed6a:	4652      	mov	r2, sl
 800ed6c:	465b      	mov	r3, fp
 800ed6e:	f7f1 fc5b 	bl	8000628 <__aeabi_dmul>
 800ed72:	ec53 2b18 	vmov	r2, r3, d8
 800ed76:	f7f1 fa9f 	bl	80002b8 <__aeabi_dsub>
 800ed7a:	a30b      	add	r3, pc, #44	; (adr r3, 800eda8 <__kernel_sin+0x148>)
 800ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed80:	4606      	mov	r6, r0
 800ed82:	460f      	mov	r7, r1
 800ed84:	4640      	mov	r0, r8
 800ed86:	4649      	mov	r1, r9
 800ed88:	f7f1 fc4e 	bl	8000628 <__aeabi_dmul>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	4630      	mov	r0, r6
 800ed92:	4639      	mov	r1, r7
 800ed94:	f7f1 fa92 	bl	80002bc <__adddf3>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	4629      	mov	r1, r5
 800eda0:	f7f1 fa8a 	bl	80002b8 <__aeabi_dsub>
 800eda4:	e7c4      	b.n	800ed30 <__kernel_sin+0xd0>
 800eda6:	bf00      	nop
 800eda8:	55555549 	.word	0x55555549
 800edac:	3fc55555 	.word	0x3fc55555
 800edb0:	3fe00000 	.word	0x3fe00000
 800edb4:	5acfd57c 	.word	0x5acfd57c
 800edb8:	3de5d93a 	.word	0x3de5d93a
 800edbc:	8a2b9ceb 	.word	0x8a2b9ceb
 800edc0:	3e5ae5e6 	.word	0x3e5ae5e6
 800edc4:	57b1fe7d 	.word	0x57b1fe7d
 800edc8:	3ec71de3 	.word	0x3ec71de3
 800edcc:	19c161d5 	.word	0x19c161d5
 800edd0:	3f2a01a0 	.word	0x3f2a01a0
 800edd4:	1110f8a6 	.word	0x1110f8a6
 800edd8:	3f811111 	.word	0x3f811111

0800eddc <with_errno>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4604      	mov	r4, r0
 800ede0:	460d      	mov	r5, r1
 800ede2:	4616      	mov	r6, r2
 800ede4:	f7fa fd02 	bl	80097ec <__errno>
 800ede8:	4629      	mov	r1, r5
 800edea:	6006      	str	r6, [r0, #0]
 800edec:	4620      	mov	r0, r4
 800edee:	bd70      	pop	{r4, r5, r6, pc}

0800edf0 <xflow>:
 800edf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edf2:	4614      	mov	r4, r2
 800edf4:	461d      	mov	r5, r3
 800edf6:	b108      	cbz	r0, 800edfc <xflow+0xc>
 800edf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800edfc:	e9cd 2300 	strd	r2, r3, [sp]
 800ee00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fc0e 	bl	8000628 <__aeabi_dmul>
 800ee0c:	2222      	movs	r2, #34	; 0x22
 800ee0e:	b003      	add	sp, #12
 800ee10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee14:	f7ff bfe2 	b.w	800eddc <with_errno>

0800ee18 <__math_uflow>:
 800ee18:	b508      	push	{r3, lr}
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee20:	f7ff ffe6 	bl	800edf0 <xflow>
 800ee24:	ec41 0b10 	vmov	d0, r0, r1
 800ee28:	bd08      	pop	{r3, pc}

0800ee2a <__math_oflow>:
 800ee2a:	b508      	push	{r3, lr}
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ee32:	f7ff ffdd 	bl	800edf0 <xflow>
 800ee36:	ec41 0b10 	vmov	d0, r0, r1
 800ee3a:	bd08      	pop	{r3, pc}
 800ee3c:	0000      	movs	r0, r0
	...

0800ee40 <atan>:
 800ee40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	ec55 4b10 	vmov	r4, r5, d0
 800ee48:	4bc3      	ldr	r3, [pc, #780]	; (800f158 <atan+0x318>)
 800ee4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee4e:	429e      	cmp	r6, r3
 800ee50:	46ab      	mov	fp, r5
 800ee52:	dd18      	ble.n	800ee86 <atan+0x46>
 800ee54:	4bc1      	ldr	r3, [pc, #772]	; (800f15c <atan+0x31c>)
 800ee56:	429e      	cmp	r6, r3
 800ee58:	dc01      	bgt.n	800ee5e <atan+0x1e>
 800ee5a:	d109      	bne.n	800ee70 <atan+0x30>
 800ee5c:	b144      	cbz	r4, 800ee70 <atan+0x30>
 800ee5e:	4622      	mov	r2, r4
 800ee60:	462b      	mov	r3, r5
 800ee62:	4620      	mov	r0, r4
 800ee64:	4629      	mov	r1, r5
 800ee66:	f7f1 fa29 	bl	80002bc <__adddf3>
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	e006      	b.n	800ee7e <atan+0x3e>
 800ee70:	f1bb 0f00 	cmp.w	fp, #0
 800ee74:	f300 8131 	bgt.w	800f0da <atan+0x29a>
 800ee78:	a59b      	add	r5, pc, #620	; (adr r5, 800f0e8 <atan+0x2a8>)
 800ee7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee7e:	ec45 4b10 	vmov	d0, r4, r5
 800ee82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee86:	4bb6      	ldr	r3, [pc, #728]	; (800f160 <atan+0x320>)
 800ee88:	429e      	cmp	r6, r3
 800ee8a:	dc14      	bgt.n	800eeb6 <atan+0x76>
 800ee8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ee90:	429e      	cmp	r6, r3
 800ee92:	dc0d      	bgt.n	800eeb0 <atan+0x70>
 800ee94:	a396      	add	r3, pc, #600	; (adr r3, 800f0f0 <atan+0x2b0>)
 800ee96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9a:	ee10 0a10 	vmov	r0, s0
 800ee9e:	4629      	mov	r1, r5
 800eea0:	f7f1 fa0c 	bl	80002bc <__adddf3>
 800eea4:	4baf      	ldr	r3, [pc, #700]	; (800f164 <atan+0x324>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	f7f1 fe4e 	bl	8000b48 <__aeabi_dcmpgt>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d1e6      	bne.n	800ee7e <atan+0x3e>
 800eeb0:	f04f 3aff 	mov.w	sl, #4294967295
 800eeb4:	e02b      	b.n	800ef0e <atan+0xce>
 800eeb6:	f000 f963 	bl	800f180 <fabs>
 800eeba:	4bab      	ldr	r3, [pc, #684]	; (800f168 <atan+0x328>)
 800eebc:	429e      	cmp	r6, r3
 800eebe:	ec55 4b10 	vmov	r4, r5, d0
 800eec2:	f300 80bf 	bgt.w	800f044 <atan+0x204>
 800eec6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eeca:	429e      	cmp	r6, r3
 800eecc:	f300 80a0 	bgt.w	800f010 <atan+0x1d0>
 800eed0:	ee10 2a10 	vmov	r2, s0
 800eed4:	ee10 0a10 	vmov	r0, s0
 800eed8:	462b      	mov	r3, r5
 800eeda:	4629      	mov	r1, r5
 800eedc:	f7f1 f9ee 	bl	80002bc <__adddf3>
 800eee0:	4ba0      	ldr	r3, [pc, #640]	; (800f164 <atan+0x324>)
 800eee2:	2200      	movs	r2, #0
 800eee4:	f7f1 f9e8 	bl	80002b8 <__aeabi_dsub>
 800eee8:	2200      	movs	r2, #0
 800eeea:	4606      	mov	r6, r0
 800eeec:	460f      	mov	r7, r1
 800eeee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eef2:	4620      	mov	r0, r4
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 f9e1 	bl	80002bc <__adddf3>
 800eefa:	4602      	mov	r2, r0
 800eefc:	460b      	mov	r3, r1
 800eefe:	4630      	mov	r0, r6
 800ef00:	4639      	mov	r1, r7
 800ef02:	f7f1 fcbb 	bl	800087c <__aeabi_ddiv>
 800ef06:	f04f 0a00 	mov.w	sl, #0
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	460d      	mov	r5, r1
 800ef0e:	4622      	mov	r2, r4
 800ef10:	462b      	mov	r3, r5
 800ef12:	4620      	mov	r0, r4
 800ef14:	4629      	mov	r1, r5
 800ef16:	f7f1 fb87 	bl	8000628 <__aeabi_dmul>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4689      	mov	r9, r1
 800ef22:	f7f1 fb81 	bl	8000628 <__aeabi_dmul>
 800ef26:	a374      	add	r3, pc, #464	; (adr r3, 800f0f8 <atan+0x2b8>)
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	460f      	mov	r7, r1
 800ef30:	f7f1 fb7a 	bl	8000628 <__aeabi_dmul>
 800ef34:	a372      	add	r3, pc, #456	; (adr r3, 800f100 <atan+0x2c0>)
 800ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3a:	f7f1 f9bf 	bl	80002bc <__adddf3>
 800ef3e:	4632      	mov	r2, r6
 800ef40:	463b      	mov	r3, r7
 800ef42:	f7f1 fb71 	bl	8000628 <__aeabi_dmul>
 800ef46:	a370      	add	r3, pc, #448	; (adr r3, 800f108 <atan+0x2c8>)
 800ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4c:	f7f1 f9b6 	bl	80002bc <__adddf3>
 800ef50:	4632      	mov	r2, r6
 800ef52:	463b      	mov	r3, r7
 800ef54:	f7f1 fb68 	bl	8000628 <__aeabi_dmul>
 800ef58:	a36d      	add	r3, pc, #436	; (adr r3, 800f110 <atan+0x2d0>)
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f7f1 f9ad 	bl	80002bc <__adddf3>
 800ef62:	4632      	mov	r2, r6
 800ef64:	463b      	mov	r3, r7
 800ef66:	f7f1 fb5f 	bl	8000628 <__aeabi_dmul>
 800ef6a:	a36b      	add	r3, pc, #428	; (adr r3, 800f118 <atan+0x2d8>)
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	f7f1 f9a4 	bl	80002bc <__adddf3>
 800ef74:	4632      	mov	r2, r6
 800ef76:	463b      	mov	r3, r7
 800ef78:	f7f1 fb56 	bl	8000628 <__aeabi_dmul>
 800ef7c:	a368      	add	r3, pc, #416	; (adr r3, 800f120 <atan+0x2e0>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	f7f1 f99b 	bl	80002bc <__adddf3>
 800ef86:	4642      	mov	r2, r8
 800ef88:	464b      	mov	r3, r9
 800ef8a:	f7f1 fb4d 	bl	8000628 <__aeabi_dmul>
 800ef8e:	a366      	add	r3, pc, #408	; (adr r3, 800f128 <atan+0x2e8>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	4680      	mov	r8, r0
 800ef96:	4689      	mov	r9, r1
 800ef98:	4630      	mov	r0, r6
 800ef9a:	4639      	mov	r1, r7
 800ef9c:	f7f1 fb44 	bl	8000628 <__aeabi_dmul>
 800efa0:	a363      	add	r3, pc, #396	; (adr r3, 800f130 <atan+0x2f0>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f987 	bl	80002b8 <__aeabi_dsub>
 800efaa:	4632      	mov	r2, r6
 800efac:	463b      	mov	r3, r7
 800efae:	f7f1 fb3b 	bl	8000628 <__aeabi_dmul>
 800efb2:	a361      	add	r3, pc, #388	; (adr r3, 800f138 <atan+0x2f8>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 f97e 	bl	80002b8 <__aeabi_dsub>
 800efbc:	4632      	mov	r2, r6
 800efbe:	463b      	mov	r3, r7
 800efc0:	f7f1 fb32 	bl	8000628 <__aeabi_dmul>
 800efc4:	a35e      	add	r3, pc, #376	; (adr r3, 800f140 <atan+0x300>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f975 	bl	80002b8 <__aeabi_dsub>
 800efce:	4632      	mov	r2, r6
 800efd0:	463b      	mov	r3, r7
 800efd2:	f7f1 fb29 	bl	8000628 <__aeabi_dmul>
 800efd6:	a35c      	add	r3, pc, #368	; (adr r3, 800f148 <atan+0x308>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 f96c 	bl	80002b8 <__aeabi_dsub>
 800efe0:	4632      	mov	r2, r6
 800efe2:	463b      	mov	r3, r7
 800efe4:	f7f1 fb20 	bl	8000628 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4640      	mov	r0, r8
 800efee:	4649      	mov	r1, r9
 800eff0:	f7f1 f964 	bl	80002bc <__adddf3>
 800eff4:	4622      	mov	r2, r4
 800eff6:	462b      	mov	r3, r5
 800eff8:	f7f1 fb16 	bl	8000628 <__aeabi_dmul>
 800effc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	d14b      	bne.n	800f09e <atan+0x25e>
 800f006:	4620      	mov	r0, r4
 800f008:	4629      	mov	r1, r5
 800f00a:	f7f1 f955 	bl	80002b8 <__aeabi_dsub>
 800f00e:	e72c      	b.n	800ee6a <atan+0x2a>
 800f010:	ee10 0a10 	vmov	r0, s0
 800f014:	4b53      	ldr	r3, [pc, #332]	; (800f164 <atan+0x324>)
 800f016:	2200      	movs	r2, #0
 800f018:	4629      	mov	r1, r5
 800f01a:	f7f1 f94d 	bl	80002b8 <__aeabi_dsub>
 800f01e:	4b51      	ldr	r3, [pc, #324]	; (800f164 <atan+0x324>)
 800f020:	4606      	mov	r6, r0
 800f022:	460f      	mov	r7, r1
 800f024:	2200      	movs	r2, #0
 800f026:	4620      	mov	r0, r4
 800f028:	4629      	mov	r1, r5
 800f02a:	f7f1 f947 	bl	80002bc <__adddf3>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	4630      	mov	r0, r6
 800f034:	4639      	mov	r1, r7
 800f036:	f7f1 fc21 	bl	800087c <__aeabi_ddiv>
 800f03a:	f04f 0a01 	mov.w	sl, #1
 800f03e:	4604      	mov	r4, r0
 800f040:	460d      	mov	r5, r1
 800f042:	e764      	b.n	800ef0e <atan+0xce>
 800f044:	4b49      	ldr	r3, [pc, #292]	; (800f16c <atan+0x32c>)
 800f046:	429e      	cmp	r6, r3
 800f048:	da1d      	bge.n	800f086 <atan+0x246>
 800f04a:	ee10 0a10 	vmov	r0, s0
 800f04e:	4b48      	ldr	r3, [pc, #288]	; (800f170 <atan+0x330>)
 800f050:	2200      	movs	r2, #0
 800f052:	4629      	mov	r1, r5
 800f054:	f7f1 f930 	bl	80002b8 <__aeabi_dsub>
 800f058:	4b45      	ldr	r3, [pc, #276]	; (800f170 <atan+0x330>)
 800f05a:	4606      	mov	r6, r0
 800f05c:	460f      	mov	r7, r1
 800f05e:	2200      	movs	r2, #0
 800f060:	4620      	mov	r0, r4
 800f062:	4629      	mov	r1, r5
 800f064:	f7f1 fae0 	bl	8000628 <__aeabi_dmul>
 800f068:	4b3e      	ldr	r3, [pc, #248]	; (800f164 <atan+0x324>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	f7f1 f926 	bl	80002bc <__adddf3>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	4630      	mov	r0, r6
 800f076:	4639      	mov	r1, r7
 800f078:	f7f1 fc00 	bl	800087c <__aeabi_ddiv>
 800f07c:	f04f 0a02 	mov.w	sl, #2
 800f080:	4604      	mov	r4, r0
 800f082:	460d      	mov	r5, r1
 800f084:	e743      	b.n	800ef0e <atan+0xce>
 800f086:	462b      	mov	r3, r5
 800f088:	ee10 2a10 	vmov	r2, s0
 800f08c:	4939      	ldr	r1, [pc, #228]	; (800f174 <atan+0x334>)
 800f08e:	2000      	movs	r0, #0
 800f090:	f7f1 fbf4 	bl	800087c <__aeabi_ddiv>
 800f094:	f04f 0a03 	mov.w	sl, #3
 800f098:	4604      	mov	r4, r0
 800f09a:	460d      	mov	r5, r1
 800f09c:	e737      	b.n	800ef0e <atan+0xce>
 800f09e:	4b36      	ldr	r3, [pc, #216]	; (800f178 <atan+0x338>)
 800f0a0:	4e36      	ldr	r6, [pc, #216]	; (800f17c <atan+0x33c>)
 800f0a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f0a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f0aa:	e9da 2300 	ldrd	r2, r3, [sl]
 800f0ae:	f7f1 f903 	bl	80002b8 <__aeabi_dsub>
 800f0b2:	4622      	mov	r2, r4
 800f0b4:	462b      	mov	r3, r5
 800f0b6:	f7f1 f8ff 	bl	80002b8 <__aeabi_dsub>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f0c2:	f7f1 f8f9 	bl	80002b8 <__aeabi_dsub>
 800f0c6:	f1bb 0f00 	cmp.w	fp, #0
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	460d      	mov	r5, r1
 800f0ce:	f6bf aed6 	bge.w	800ee7e <atan+0x3e>
 800f0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0d6:	461d      	mov	r5, r3
 800f0d8:	e6d1      	b.n	800ee7e <atan+0x3e>
 800f0da:	a51d      	add	r5, pc, #116	; (adr r5, 800f150 <atan+0x310>)
 800f0dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f0e0:	e6cd      	b.n	800ee7e <atan+0x3e>
 800f0e2:	bf00      	nop
 800f0e4:	f3af 8000 	nop.w
 800f0e8:	54442d18 	.word	0x54442d18
 800f0ec:	bff921fb 	.word	0xbff921fb
 800f0f0:	8800759c 	.word	0x8800759c
 800f0f4:	7e37e43c 	.word	0x7e37e43c
 800f0f8:	e322da11 	.word	0xe322da11
 800f0fc:	3f90ad3a 	.word	0x3f90ad3a
 800f100:	24760deb 	.word	0x24760deb
 800f104:	3fa97b4b 	.word	0x3fa97b4b
 800f108:	a0d03d51 	.word	0xa0d03d51
 800f10c:	3fb10d66 	.word	0x3fb10d66
 800f110:	c54c206e 	.word	0xc54c206e
 800f114:	3fb745cd 	.word	0x3fb745cd
 800f118:	920083ff 	.word	0x920083ff
 800f11c:	3fc24924 	.word	0x3fc24924
 800f120:	5555550d 	.word	0x5555550d
 800f124:	3fd55555 	.word	0x3fd55555
 800f128:	2c6a6c2f 	.word	0x2c6a6c2f
 800f12c:	bfa2b444 	.word	0xbfa2b444
 800f130:	52defd9a 	.word	0x52defd9a
 800f134:	3fadde2d 	.word	0x3fadde2d
 800f138:	af749a6d 	.word	0xaf749a6d
 800f13c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f140:	fe231671 	.word	0xfe231671
 800f144:	3fbc71c6 	.word	0x3fbc71c6
 800f148:	9998ebc4 	.word	0x9998ebc4
 800f14c:	3fc99999 	.word	0x3fc99999
 800f150:	54442d18 	.word	0x54442d18
 800f154:	3ff921fb 	.word	0x3ff921fb
 800f158:	440fffff 	.word	0x440fffff
 800f15c:	7ff00000 	.word	0x7ff00000
 800f160:	3fdbffff 	.word	0x3fdbffff
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	3ff2ffff 	.word	0x3ff2ffff
 800f16c:	40038000 	.word	0x40038000
 800f170:	3ff80000 	.word	0x3ff80000
 800f174:	bff00000 	.word	0xbff00000
 800f178:	0800ff68 	.word	0x0800ff68
 800f17c:	0800ff48 	.word	0x0800ff48

0800f180 <fabs>:
 800f180:	ec51 0b10 	vmov	r0, r1, d0
 800f184:	ee10 2a10 	vmov	r2, s0
 800f188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f18c:	ec43 2b10 	vmov	d0, r2, r3
 800f190:	4770      	bx	lr

0800f192 <finite>:
 800f192:	b082      	sub	sp, #8
 800f194:	ed8d 0b00 	vstr	d0, [sp]
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f19e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f1a2:	0fc0      	lsrs	r0, r0, #31
 800f1a4:	b002      	add	sp, #8
 800f1a6:	4770      	bx	lr

0800f1a8 <floor>:
 800f1a8:	ec51 0b10 	vmov	r0, r1, d0
 800f1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f1b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f1b8:	2e13      	cmp	r6, #19
 800f1ba:	ee10 5a10 	vmov	r5, s0
 800f1be:	ee10 8a10 	vmov	r8, s0
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	dc32      	bgt.n	800f22c <floor+0x84>
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	da14      	bge.n	800f1f4 <floor+0x4c>
 800f1ca:	a333      	add	r3, pc, #204	; (adr r3, 800f298 <floor+0xf0>)
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f874 	bl	80002bc <__adddf3>
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	f7f1 fcb6 	bl	8000b48 <__aeabi_dcmpgt>
 800f1dc:	b138      	cbz	r0, 800f1ee <floor+0x46>
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	da57      	bge.n	800f292 <floor+0xea>
 800f1e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f1e6:	431d      	orrs	r5, r3
 800f1e8:	d001      	beq.n	800f1ee <floor+0x46>
 800f1ea:	4c2d      	ldr	r4, [pc, #180]	; (800f2a0 <floor+0xf8>)
 800f1ec:	2500      	movs	r5, #0
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	e025      	b.n	800f240 <floor+0x98>
 800f1f4:	4f2b      	ldr	r7, [pc, #172]	; (800f2a4 <floor+0xfc>)
 800f1f6:	4137      	asrs	r7, r6
 800f1f8:	ea01 0307 	and.w	r3, r1, r7
 800f1fc:	4303      	orrs	r3, r0
 800f1fe:	d01f      	beq.n	800f240 <floor+0x98>
 800f200:	a325      	add	r3, pc, #148	; (adr r3, 800f298 <floor+0xf0>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f1 f859 	bl	80002bc <__adddf3>
 800f20a:	2200      	movs	r2, #0
 800f20c:	2300      	movs	r3, #0
 800f20e:	f7f1 fc9b 	bl	8000b48 <__aeabi_dcmpgt>
 800f212:	2800      	cmp	r0, #0
 800f214:	d0eb      	beq.n	800f1ee <floor+0x46>
 800f216:	2c00      	cmp	r4, #0
 800f218:	bfbe      	ittt	lt
 800f21a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f21e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f222:	19a4      	addlt	r4, r4, r6
 800f224:	ea24 0407 	bic.w	r4, r4, r7
 800f228:	2500      	movs	r5, #0
 800f22a:	e7e0      	b.n	800f1ee <floor+0x46>
 800f22c:	2e33      	cmp	r6, #51	; 0x33
 800f22e:	dd0b      	ble.n	800f248 <floor+0xa0>
 800f230:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f234:	d104      	bne.n	800f240 <floor+0x98>
 800f236:	ee10 2a10 	vmov	r2, s0
 800f23a:	460b      	mov	r3, r1
 800f23c:	f7f1 f83e 	bl	80002bc <__adddf3>
 800f240:	ec41 0b10 	vmov	d0, r0, r1
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f24c:	f04f 33ff 	mov.w	r3, #4294967295
 800f250:	fa23 f707 	lsr.w	r7, r3, r7
 800f254:	4207      	tst	r7, r0
 800f256:	d0f3      	beq.n	800f240 <floor+0x98>
 800f258:	a30f      	add	r3, pc, #60	; (adr r3, 800f298 <floor+0xf0>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f7f1 f82d 	bl	80002bc <__adddf3>
 800f262:	2200      	movs	r2, #0
 800f264:	2300      	movs	r3, #0
 800f266:	f7f1 fc6f 	bl	8000b48 <__aeabi_dcmpgt>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d0bf      	beq.n	800f1ee <floor+0x46>
 800f26e:	2c00      	cmp	r4, #0
 800f270:	da02      	bge.n	800f278 <floor+0xd0>
 800f272:	2e14      	cmp	r6, #20
 800f274:	d103      	bne.n	800f27e <floor+0xd6>
 800f276:	3401      	adds	r4, #1
 800f278:	ea25 0507 	bic.w	r5, r5, r7
 800f27c:	e7b7      	b.n	800f1ee <floor+0x46>
 800f27e:	2301      	movs	r3, #1
 800f280:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f284:	fa03 f606 	lsl.w	r6, r3, r6
 800f288:	4435      	add	r5, r6
 800f28a:	4545      	cmp	r5, r8
 800f28c:	bf38      	it	cc
 800f28e:	18e4      	addcc	r4, r4, r3
 800f290:	e7f2      	b.n	800f278 <floor+0xd0>
 800f292:	2500      	movs	r5, #0
 800f294:	462c      	mov	r4, r5
 800f296:	e7aa      	b.n	800f1ee <floor+0x46>
 800f298:	8800759c 	.word	0x8800759c
 800f29c:	7e37e43c 	.word	0x7e37e43c
 800f2a0:	bff00000 	.word	0xbff00000
 800f2a4:	000fffff 	.word	0x000fffff

0800f2a8 <scalbn>:
 800f2a8:	b570      	push	{r4, r5, r6, lr}
 800f2aa:	ec55 4b10 	vmov	r4, r5, d0
 800f2ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	462b      	mov	r3, r5
 800f2b6:	b99a      	cbnz	r2, 800f2e0 <scalbn+0x38>
 800f2b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f2bc:	4323      	orrs	r3, r4
 800f2be:	d036      	beq.n	800f32e <scalbn+0x86>
 800f2c0:	4b39      	ldr	r3, [pc, #228]	; (800f3a8 <scalbn+0x100>)
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	ee10 0a10 	vmov	r0, s0
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f7f1 f9ad 	bl	8000628 <__aeabi_dmul>
 800f2ce:	4b37      	ldr	r3, [pc, #220]	; (800f3ac <scalbn+0x104>)
 800f2d0:	429e      	cmp	r6, r3
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	da10      	bge.n	800f2fa <scalbn+0x52>
 800f2d8:	a32b      	add	r3, pc, #172	; (adr r3, 800f388 <scalbn+0xe0>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	e03a      	b.n	800f356 <scalbn+0xae>
 800f2e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f2e4:	428a      	cmp	r2, r1
 800f2e6:	d10c      	bne.n	800f302 <scalbn+0x5a>
 800f2e8:	ee10 2a10 	vmov	r2, s0
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f0 ffe4 	bl	80002bc <__adddf3>
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	460d      	mov	r5, r1
 800f2f8:	e019      	b.n	800f32e <scalbn+0x86>
 800f2fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f2fe:	460b      	mov	r3, r1
 800f300:	3a36      	subs	r2, #54	; 0x36
 800f302:	4432      	add	r2, r6
 800f304:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f308:	428a      	cmp	r2, r1
 800f30a:	dd08      	ble.n	800f31e <scalbn+0x76>
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	a120      	add	r1, pc, #128	; (adr r1, 800f390 <scalbn+0xe8>)
 800f310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f314:	da1c      	bge.n	800f350 <scalbn+0xa8>
 800f316:	a120      	add	r1, pc, #128	; (adr r1, 800f398 <scalbn+0xf0>)
 800f318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f31c:	e018      	b.n	800f350 <scalbn+0xa8>
 800f31e:	2a00      	cmp	r2, #0
 800f320:	dd08      	ble.n	800f334 <scalbn+0x8c>
 800f322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f32a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f32e:	ec45 4b10 	vmov	d0, r4, r5
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f338:	da19      	bge.n	800f36e <scalbn+0xc6>
 800f33a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f33e:	429e      	cmp	r6, r3
 800f340:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f344:	dd0a      	ble.n	800f35c <scalbn+0xb4>
 800f346:	a112      	add	r1, pc, #72	; (adr r1, 800f390 <scalbn+0xe8>)
 800f348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d1e2      	bne.n	800f316 <scalbn+0x6e>
 800f350:	a30f      	add	r3, pc, #60	; (adr r3, 800f390 <scalbn+0xe8>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f1 f967 	bl	8000628 <__aeabi_dmul>
 800f35a:	e7cb      	b.n	800f2f4 <scalbn+0x4c>
 800f35c:	a10a      	add	r1, pc, #40	; (adr r1, 800f388 <scalbn+0xe0>)
 800f35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d0b8      	beq.n	800f2d8 <scalbn+0x30>
 800f366:	a10e      	add	r1, pc, #56	; (adr r1, 800f3a0 <scalbn+0xf8>)
 800f368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f36c:	e7b4      	b.n	800f2d8 <scalbn+0x30>
 800f36e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f372:	3236      	adds	r2, #54	; 0x36
 800f374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f378:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f37c:	4620      	mov	r0, r4
 800f37e:	4b0c      	ldr	r3, [pc, #48]	; (800f3b0 <scalbn+0x108>)
 800f380:	2200      	movs	r2, #0
 800f382:	e7e8      	b.n	800f356 <scalbn+0xae>
 800f384:	f3af 8000 	nop.w
 800f388:	c2f8f359 	.word	0xc2f8f359
 800f38c:	01a56e1f 	.word	0x01a56e1f
 800f390:	8800759c 	.word	0x8800759c
 800f394:	7e37e43c 	.word	0x7e37e43c
 800f398:	8800759c 	.word	0x8800759c
 800f39c:	fe37e43c 	.word	0xfe37e43c
 800f3a0:	c2f8f359 	.word	0xc2f8f359
 800f3a4:	81a56e1f 	.word	0x81a56e1f
 800f3a8:	43500000 	.word	0x43500000
 800f3ac:	ffff3cb0 	.word	0xffff3cb0
 800f3b0:	3c900000 	.word	0x3c900000

0800f3b4 <_sbrk>:
 800f3b4:	4a04      	ldr	r2, [pc, #16]	; (800f3c8 <_sbrk+0x14>)
 800f3b6:	6811      	ldr	r1, [r2, #0]
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	b909      	cbnz	r1, 800f3c0 <_sbrk+0xc>
 800f3bc:	4903      	ldr	r1, [pc, #12]	; (800f3cc <_sbrk+0x18>)
 800f3be:	6011      	str	r1, [r2, #0]
 800f3c0:	6810      	ldr	r0, [r2, #0]
 800f3c2:	4403      	add	r3, r0
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	4770      	bx	lr
 800f3c8:	20011d94 	.word	0x20011d94
 800f3cc:	20011d98 	.word	0x20011d98

0800f3d0 <_init>:
 800f3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d2:	bf00      	nop
 800f3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d6:	bc08      	pop	{r3}
 800f3d8:	469e      	mov	lr, r3
 800f3da:	4770      	bx	lr

0800f3dc <_fini>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	bf00      	nop
 800f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e2:	bc08      	pop	{r3}
 800f3e4:	469e      	mov	lr, r3
 800f3e6:	4770      	bx	lr
