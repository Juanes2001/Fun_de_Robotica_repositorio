
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010388  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  08010528  08010528  00020528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011138  08011138  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08011138  08011138  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011138  08011138  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011138  08011138  00021138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801113c  0801113c  0002113c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120e8  200001e8  08011324  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200122d0  08011324  000322d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc6  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001889  00000000  00000000  00038dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0003adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011372  00000000  00000000  0003b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e69  00000000  00000000  0004c7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059463  00000000  00000000  00056643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000afaa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  000afaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010510 	.word	0x08010510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08010510 	.word	0x08010510

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder


int main(void){
 8000cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbc:	b08d      	sub	sp, #52	; 0x34
 8000cbe:	af06      	add	r7, sp, #24

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc0:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <main+0x1ac>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a67      	ldr	r2, [pc, #412]	; (8000e64 <main+0x1ac>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f008 f90d 	bl	8008ef0 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd6:	f000 fc57 	bl	8001588 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <main+0x1b0>)
 8000cdc:	4a63      	ldr	r2, [pc, #396]	; (8000e6c <main+0x1b4>)
 8000cde:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4863      	ldr	r0, [pc, #396]	; (8000e70 <main+0x1b8>)
 8000ce4:	f001 f944 	bl	8001f70 <calibracionGyros>
 8000ce8:	ee10 3a10 	vmov	r3, s0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc43 	bl	8000578 <__aeabi_f2d>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	495f      	ldr	r1, [pc, #380]	; (8000e74 <main+0x1bc>)
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]

	double angleToGo_Relative = 0;
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double angle_start = 0;
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2302 	strd	r2, r3, [r7, #8]


    /* Loop forever */
	while(1){

		if (!flag_Astar){
 8000d14:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <main+0x1c0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <main+0x68>
			fillComand(); // Se puede leer cualquier comando excepto cuando se esta lleyendo el grid de Astar
 8000d1c:	f002 fd90 	bl	8003840 <fillComand>
		}

		if (flag_NOP){
 8000d20:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <main+0x1c4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01b      	beq.n	8000d60 <main+0xa8>

			 NOP(handler_Motor_Array,
 8000d28:	4b52      	ldr	r3, [pc, #328]	; (8000e74 <main+0x1bc>)
 8000d2a:	ed93 7b00 	vldr	d7, [r3]
 8000d2e:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <main+0x1c8>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <main+0x1cc>)
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <main+0x1d0>)
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <main+0x1d4>)
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <main+0x1d8>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4a:	eef0 0a67 	vmov.f32	s1, s15
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <main+0x1dc>)
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <main+0x1e0>)
 8000d52:	4947      	ldr	r1, [pc, #284]	; (8000e70 <main+0x1b8>)
 8000d54:	4851      	ldr	r0, [pc, #324]	; (8000e9c <main+0x1e4>)
 8000d56:	f002 fbf9 	bl	800354c <NOP>
				 &flag_measurements,
				 &flag_control,
				 data,
				 Mode_dir);

			 flag_NOP = RESET;
 8000d5a:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <main+0x1c4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		}

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <main+0x1e8>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01a      	beq.n	8000d9e <main+0xe6>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <main+0x1bc>)
 8000d6a:	ed93 7b00 	vldr	d7, [r3]
 8000d6e:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <main+0x1c8>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <main+0x1cc>)
 8000d78:	9304      	str	r3, [sp, #16]
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <main+0x1d0>)
 8000d7c:	9303      	str	r3, [sp, #12]
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <main+0x1d4>)
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <main+0x1d8>)
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <main+0x1ec>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8e:	eef0 0a67 	vmov.f32	s1, s15
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <main+0x1dc>)
 8000d94:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <main+0x1e0>)
 8000d96:	4936      	ldr	r1, [pc, #216]	; (8000e70 <main+0x1b8>)
 8000d98:	4840      	ldr	r0, [pc, #256]	; (8000e9c <main+0x1e4>)
 8000d9a:	f002 fb2d 	bl	80033f8 <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <main+0x1f0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80e5 	beq.w	8000f72 <main+0x2ba>
			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID


			// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
			// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
			double distance_to_go = 0;
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9c7 2300 	strd	r2, r3, [r7]
			Done = RESET;
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x1f4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]

			// seteamos la posicion inicial como la posicion actual global del robot
			parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <main+0x1e0>)
 8000dbc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000dc0:	4934      	ldr	r1, [pc, #208]	; (8000e94 <main+0x1dc>)
 8000dc2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <main+0x1e0>)
 8000dc8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000dcc:	4931      	ldr	r1, [pc, #196]	; (8000e94 <main+0x1dc>)
 8000dce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			// seteamos la posicion final usando parametros polares

			//Usando el angulo actual global con respecto al eje x se tiene que
			parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <main+0x1dc>)
 8000dd4:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
						* cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x1e0>)
 8000dda:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dde:	eeb0 0a47 	vmov.f32	s0, s14
 8000de2:	eef0 0a67 	vmov.f32	s1, s15
 8000de6:	f00c fed7 	bl	800db98 <cos>
 8000dea:	ec53 2b10 	vmov	r2, r3, d0
 8000dee:	4640      	mov	r0, r8
 8000df0:	4649      	mov	r1, r9
 8000df2:	f7ff fc19 	bl	8000628 <__aeabi_dmul>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <main+0x1dc>)
 8000e00:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000e04:	f7ff fa5a 	bl	80002bc <__adddf3>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
			parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance
 8000e0c:	4921      	ldr	r1, [pc, #132]	; (8000e94 <main+0x1dc>)
 8000e0e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <main+0x1dc>)
 8000e14:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
						* sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <main+0x1e0>)
 8000e1a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e22:	eef0 0a67 	vmov.f32	s1, s15
 8000e26:	f00c ff53 	bl	800dcd0 <sin>
 8000e2a:	ec53 2b10 	vmov	r2, r3, d0
 8000e2e:	4640      	mov	r0, r8
 8000e30:	4649      	mov	r1, r9
 8000e32:	f7ff fbf9 	bl	8000628 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <main+0x1dc>)
 8000e40:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e44:	f7ff fa3a 	bl	80002bc <__adddf3>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
			parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance
 8000e4c:	4911      	ldr	r1, [pc, #68]	; (8000e94 <main+0x1dc>)
 8000e4e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			// definimos los parametros del camino en funcion de la situacion actual
			calculation_parameter_distance(&parameters_Path_Robot);
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <main+0x1dc>)
 8000e54:	f007 f90c 	bl	8008070 <calculation_parameter_distance>

			On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos el robot en la direccion deseada
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <main+0x1c8>)
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <main+0x1e4>)
 8000e5e:	f001 fe5b 	bl	8002b18 <On_motor_Straigh_Roll>

			while(!Done){
 8000e62:	e07b      	b.n	8000f5c <main+0x2a4>
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	20001668 	.word	0x20001668
 8000e6c:	3ddfaebc 	.word	0x3ddfaebc
 8000e70:	200003d0 	.word	0x200003d0
 8000e74:	20001658 	.word	0x20001658
 8000e78:	20001062 	.word	0x20001062
 8000e7c:	20001065 	.word	0x20001065
 8000e80:	20001058 	.word	0x20001058
 8000e84:	20000544 	.word	0x20000544
 8000e88:	2000105e 	.word	0x2000105e
 8000e8c:	2000105b 	.word	0x2000105b
 8000e90:	2000105a 	.word	0x2000105a
 8000e94:	20001090 	.word	0x20001090
 8000e98:	200015b0 	.word	0x200015b0
 8000e9c:	200003e0 	.word	0x200003e0
 8000ea0:	2000105c 	.word	0x2000105c
 8000ea4:	20001070 	.word	0x20001070
 8000ea8:	2000105d 	.word	0x2000105d
 8000eac:	20001061 	.word	0x20001061
				// calculamos la distancia con la libreria PosRobt.h

				distance_to_go = distance_traveled( &parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8000eb0:	4ba0      	ldr	r3, [pc, #640]	; (8001134 <main+0x47c>)
 8000eb2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000eb6:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <main+0x47c>)
 8000eb8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000ebc:	eeb0 1a46 	vmov.f32	s2, s12
 8000ec0:	eef0 1a66 	vmov.f32	s3, s13
 8000ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec8:	eef0 0a67 	vmov.f32	s1, s15
 8000ecc:	489a      	ldr	r0, [pc, #616]	; (8001138 <main+0x480>)
 8000ece:	f007 f9bb 	bl	8008248 <distance_traveled>
 8000ed2:	ed87 0b00 	vstr	d0, [r7]

				// Función de control del robot
				go(handler_Motor_Array,
 8000ed6:	4b99      	ldr	r3, [pc, #612]	; (800113c <main+0x484>)
 8000ed8:	ed93 7b00 	vldr	d7, [r3]
 8000edc:	4b98      	ldr	r3, [pc, #608]	; (8001140 <main+0x488>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000ee4:	4b97      	ldr	r3, [pc, #604]	; (8001144 <main+0x48c>)
 8000ee6:	9304      	str	r3, [sp, #16]
 8000ee8:	4b97      	ldr	r3, [pc, #604]	; (8001148 <main+0x490>)
 8000eea:	9303      	str	r3, [sp, #12]
 8000eec:	4b97      	ldr	r3, [pc, #604]	; (800114c <main+0x494>)
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	4b97      	ldr	r3, [pc, #604]	; (8001150 <main+0x498>)
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	4b97      	ldr	r3, [pc, #604]	; (8001154 <main+0x49c>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8000efc:	eef0 0a67 	vmov.f32	s1, s15
 8000f00:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <main+0x480>)
 8000f02:	4a8c      	ldr	r2, [pc, #560]	; (8001134 <main+0x47c>)
 8000f04:	4994      	ldr	r1, [pc, #592]	; (8001158 <main+0x4a0>)
 8000f06:	4895      	ldr	r0, [pc, #596]	; (800115c <main+0x4a4>)
 8000f08:	f002 fa76 	bl	80033f8 <go>
				   &flag_measurements,
				   &flag_control,
				   data,
				   Mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

				if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8000f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f10:	f7ff fe3a 	bl	8000b88 <__aeabi_d2iz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bfb8      	it	lt
 8000f1a:	425b      	neglt	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fb19 	bl	8000554 <__aeabi_i2d>
 8000f22:	4b85      	ldr	r3, [pc, #532]	; (8001138 <main+0x480>)
 8000f24:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f28:	2601      	movs	r6, #1
 8000f2a:	f7ff fdef 	bl	8000b0c <__aeabi_dcmplt>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <main+0x280>
 8000f34:	2300      	movs	r3, #0
 8000f36:	461e      	mov	r6, r3
 8000f38:	b2f3      	uxtb	r3, r6
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <main+0x2a0>
					// Paramos el proceso
					Done = !Done;
 8000f44:	4b86      	ldr	r3, [pc, #536]	; (8001160 <main+0x4a8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b82      	ldr	r3, [pc, #520]	; (8001160 <main+0x4a8>)
 8000f56:	701a      	strb	r2, [r3, #0]
				}

				// Observamos si hay algun comando en espera
				fillComand();
 8000f58:	f002 fc72 	bl	8003840 <fillComand>
			while(!Done){
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <main+0x4a8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0a5      	beq.n	8000eb0 <main+0x1f8>
			}




			if (Done){parseCommands("stop");}
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <main+0x4a8>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <main+0x2ba>
 8000f6c:	487d      	ldr	r0, [pc, #500]	; (8001164 <main+0x4ac>)
 8000f6e:	f000 fd6b 	bl	8001a48 <parseCommands>

		}

		if (flag_Roll){
 8000f72:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <main+0x4b0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d018      	beq.n	8000fac <main+0x2f4>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			NOP(handler_Motor_Array,
 8000f7a:	4b70      	ldr	r3, [pc, #448]	; (800113c <main+0x484>)
 8000f7c:	ed93 7b00 	vldr	d7, [r3]
 8000f80:	4b6f      	ldr	r3, [pc, #444]	; (8001140 <main+0x488>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000f88:	4b6e      	ldr	r3, [pc, #440]	; (8001144 <main+0x48c>)
 8000f8a:	9303      	str	r3, [sp, #12]
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <main+0x490>)
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <main+0x494>)
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <main+0x498>)
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	4b65      	ldr	r3, [pc, #404]	; (8001138 <main+0x480>)
 8000fa2:	4a64      	ldr	r2, [pc, #400]	; (8001134 <main+0x47c>)
 8000fa4:	496c      	ldr	r1, [pc, #432]	; (8001158 <main+0x4a0>)
 8000fa6:	486d      	ldr	r0, [pc, #436]	; (800115c <main+0x4a4>)
 8000fa8:	f002 fad0 	bl	800354c <NOP>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000fac:	4b6f      	ldr	r3, [pc, #444]	; (800116c <main+0x4b4>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d071      	beq.n	8001098 <main+0x3e0>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <main+0x4a8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <main+0x47c>)
 8000fbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fc0:	e9c7 2302 	strd	r2, r3, [r7, #8]

			while (!Done){
 8000fc4:	e054      	b.n	8001070 <main+0x3b8>

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <main+0x47c>)
 8000fc8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fd0:	f7ff f972 	bl	80002b8 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdd4 	bl	8000b88 <__aeabi_d2iz>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fab3 	bl	8000554 <__aeabi_i2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8000ff6:	4b51      	ldr	r3, [pc, #324]	; (800113c <main+0x484>)
 8000ff8:	ed93 7b00 	vldr	d7, [r3]
 8000ffc:	4b50      	ldr	r3, [pc, #320]	; (8001140 <main+0x488>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <main+0x48c>)
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <main+0x490>)
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <main+0x494>)
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <main+0x498>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	eeb0 0a47 	vmov.f32	s0, s14
 8001018:	eef0 0a67 	vmov.f32	s1, s15
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <main+0x480>)
 800101e:	4a45      	ldr	r2, [pc, #276]	; (8001134 <main+0x47c>)
 8001020:	494d      	ldr	r1, [pc, #308]	; (8001158 <main+0x4a0>)
 8001022:	484e      	ldr	r0, [pc, #312]	; (800115c <main+0x4a4>)
 8001024:	f002 fa92 	bl	800354c <NOP>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <main+0x480>)
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa91 	bl	8000554 <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	2101      	movs	r1, #1
 8001038:	460e      	mov	r6, r1
 800103a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800103e:	f7ff fd65 	bl	8000b0c <__aeabi_dcmplt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <main+0x394>
 8001048:	2300      	movs	r3, #0
 800104a:	461e      	mov	r6, r3
 800104c:	b2f3      	uxtb	r3, r6
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d009      	beq.n	800106c <main+0x3b4>
 8001058:	4b41      	ldr	r3, [pc, #260]	; (8001160 <main+0x4a8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <main+0x4a8>)
 800106a:	701a      	strb	r2, [r3, #0]

				// Observamos si hay algun comando en espera
				fillComand();
 800106c:	f002 fbe8 	bl	8003840 <fillComand>
			while (!Done){
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x4a8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0a6      	beq.n	8000fc6 <main+0x30e>

			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <main+0x4a8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <main+0x3ce>
 8001080:	4838      	ldr	r0, [pc, #224]	; (8001164 <main+0x4ac>)
 8001082:	f000 fce1 	bl	8001a48 <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			Done = RESET; // Reseteamos la bandera
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <main+0x4a8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		}

		if (flag_Astar){
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <main+0x4b8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80ce 	beq.w	800123e <main+0x586>

			if (rxData != '\0'){
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <main+0x4bc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 808c 	beq.w	80011c4 <main+0x50c>


				if (rxData == 'z'){
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <main+0x4bc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b7a      	cmp	r3, #122	; 0x7a
 80010b2:	d119      	bne.n	80010e8 <main+0x430>
					memset(stringMatrix, 0, sizeof(stringMatrix));
 80010b4:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 80010b8:	2100      	movs	r1, #0
 80010ba:	482f      	ldr	r0, [pc, #188]	; (8001178 <main+0x4c0>)
 80010bc:	f009 f9cc 	bl	800a458 <memset>
					stringRow    = 0;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <main+0x4c4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <main+0x4c8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80010cc:	492d      	ldr	r1, [pc, #180]	; (8001184 <main+0x4cc>)
 80010ce:	482e      	ldr	r0, [pc, #184]	; (8001188 <main+0x4d0>)
 80010d0:	f008 fe78 	bl	8009dc4 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <main+0x4d4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	482b      	ldr	r0, [pc, #172]	; (8001188 <main+0x4d0>)
 80010dc:	f008 fe72 	bl	8009dc4 <writeMsg>
					rxData = '\0';
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <main+0x4bc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e06d      	b.n	80011c4 <main+0x50c>
				}else if (rxData != '@'){
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <main+0x4bc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b40      	cmp	r3, #64	; 0x40
 80010ee:	d060      	beq.n	80011b2 <main+0x4fa>
					if (rxData != '\n'){ // Como estamos en Windows, el enter da un par the caracteres \r\n
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <main+0x4bc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d058      	beq.n	80011aa <main+0x4f2>
						if (rxData != '\r'){
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <main+0x4bc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b0d      	cmp	r3, #13
 80010fe:	d047      	beq.n	8001190 <main+0x4d8>
							stringMatrix[stringRow][stringColumn] = rxData;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0x4c4>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461e      	mov	r6, r3
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <main+0x4c8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <main+0x4bc>)
 800110e:	7819      	ldrb	r1, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <main+0x4c0>)
 8001112:	2334      	movs	r3, #52	; 0x34
 8001114:	fb06 f303 	mul.w	r3, r6, r3
 8001118:	4413      	add	r3, r2
 800111a:	4403      	add	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <main+0x4c8>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <main+0x4c8>)
 800112a:	701a      	strb	r2, [r3, #0]
							rxData = '\0';
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <main+0x4bc>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e047      	b.n	80011c4 <main+0x50c>
 8001134:	200015b0 	.word	0x200015b0
 8001138:	20001090 	.word	0x20001090
 800113c:	20001658 	.word	0x20001658
 8001140:	20001058 	.word	0x20001058
 8001144:	20000544 	.word	0x20000544
 8001148:	2000105e 	.word	0x2000105e
 800114c:	2000105b 	.word	0x2000105b
 8001150:	2000105a 	.word	0x2000105a
 8001154:	20001070 	.word	0x20001070
 8001158:	200003d0 	.word	0x200003d0
 800115c:	200003e0 	.word	0x200003e0
 8001160:	20001061 	.word	0x20001061
 8001164:	08010590 	.word	0x08010590
 8001168:	2000105f 	.word	0x2000105f
 800116c:	20001060 	.word	0x20001060
 8001170:	20001062 	.word	0x20001062
 8001174:	20000516 	.word	0x20000516
 8001178:	200005c4 	.word	0x200005c4
 800117c:	20001055 	.word	0x20001055
 8001180:	20001054 	.word	0x20001054
 8001184:	08010598 	.word	0x08010598
 8001188:	20000330 	.word	0x20000330
 800118c:	20000004 	.word	0x20000004
						}else{
							stringRow++;
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <main+0x748>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b99      	ldr	r3, [pc, #612]	; (8001400 <main+0x748>)
 800119a:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 800119c:	4b99      	ldr	r3, [pc, #612]	; (8001404 <main+0x74c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
							rxData = '\0';
 80011a2:	4b99      	ldr	r3, [pc, #612]	; (8001408 <main+0x750>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e00c      	b.n	80011c4 <main+0x50c>
						}
					}else{
						rxData = '\0';
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <main+0x750>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e008      	b.n	80011c4 <main+0x50c>
					}
				}else{
					doneTransaction = SET;
 80011b2:	4b96      	ldr	r3, [pc, #600]	; (800140c <main+0x754>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 80011b8:	4b92      	ldr	r3, [pc, #584]	; (8001404 <main+0x74c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
					rxData = '\0';
 80011be:	4b92      	ldr	r3, [pc, #584]	; (8001408 <main+0x750>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
				}

			}

			// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
			if (doneTransaction){
 80011c4:	4b91      	ldr	r3, [pc, #580]	; (800140c <main+0x754>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d038      	beq.n	800123e <main+0x586>

				starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 80011cc:	4b90      	ldr	r3, [pc, #576]	; (8001410 <main+0x758>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	4b90      	ldr	r3, [pc, #576]	; (8001414 <main+0x75c>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4b90      	ldr	r3, [pc, #576]	; (8001418 <main+0x760>)
 80011d6:	4a91      	ldr	r2, [pc, #580]	; (800141c <main+0x764>)
 80011d8:	4991      	ldr	r1, [pc, #580]	; (8001420 <main+0x768>)
 80011da:	4892      	ldr	r0, [pc, #584]	; (8001424 <main+0x76c>)
 80011dc:	f002 fc58 	bl	8003a90 <findShorterWay>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b90      	ldr	r3, [pc, #576]	; (8001428 <main+0x770>)
 80011e6:	701a      	strb	r2, [r3, #0]

				if (starWorking){
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <main+0x770>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <main+0x57a>
					// si se llego hasta aca es porque Astar si funciona correctamente

					memset(stringMatrix, 0, sizeof(stringMatrix));
 80011f0:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 80011f4:	2100      	movs	r1, #0
 80011f6:	488b      	ldr	r0, [pc, #556]	; (8001424 <main+0x76c>)
 80011f8:	f009 f92e 	bl	800a458 <memset>
					stringRow    = 0;
 80011fc:	4b80      	ldr	r3, [pc, #512]	; (8001400 <main+0x748>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8001202:	4b80      	ldr	r3, [pc, #512]	; (8001404 <main+0x74c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8001208:	4988      	ldr	r1, [pc, #544]	; (800142c <main+0x774>)
 800120a:	4889      	ldr	r0, [pc, #548]	; (8001430 <main+0x778>)
 800120c:	f008 fdda 	bl	8009dc4 <writeMsg>

					flag_Astar = RESET;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <main+0x77c>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
					doneTransaction = RESET;
 8001216:	4b7d      	ldr	r3, [pc, #500]	; (800140c <main+0x754>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
					Do_the_track = SET;
 800121c:	4b86      	ldr	r3, [pc, #536]	; (8001438 <main+0x780>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
					Mode_dir.Mode = sWait;
 8001222:	4b86      	ldr	r3, [pc, #536]	; (800143c <main+0x784>)
 8001224:	2203      	movs	r2, #3
 8001226:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE ASTAR
 8001228:	4b85      	ldr	r3, [pc, #532]	; (8001440 <main+0x788>)
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
 8001230:	e005      	b.n	800123e <main+0x586>
				}else{
					writeMsg(&handlerUSART, msg_NotWorking);
 8001232:	4b84      	ldr	r3, [pc, #528]	; (8001444 <main+0x78c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	487d      	ldr	r0, [pc, #500]	; (8001430 <main+0x778>)
 800123a:	f008 fdc3 	bl	8009dc4 <writeMsg>
				}
			}
		}


		if (flag_square){
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <main+0x790>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d019      	beq.n	800127a <main+0x5c2>
			// En este comando vamos a usar lo entrado en la terminal para contruir un cuadrado de LxL y que el robot
			// recorra el cuadrado

			// seteamos en la funcion create_square_operation las operaciones necesarias para recorrer el cuadrado
 			create_square_operations(square_side,
 8001246:	4b81      	ldr	r3, [pc, #516]	; (800144c <main+0x794>)
 8001248:	ed93 7b00 	vldr	d7, [r3]
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <main+0x798>)
 800124e:	7818      	ldrb	r0, [r3, #0]
 8001250:	4b80      	ldr	r3, [pc, #512]	; (8001454 <main+0x79c>)
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4b80      	ldr	r3, [pc, #512]	; (8001458 <main+0x7a0>)
 8001256:	4a81      	ldr	r2, [pc, #516]	; (800145c <main+0x7a4>)
 8001258:	4981      	ldr	r1, [pc, #516]	; (8001460 <main+0x7a8>)
 800125a:	eeb0 0a47 	vmov.f32	s0, s14
 800125e:	eef0 0a67 	vmov.f32	s1, s15
 8001262:	f002 f99d 	bl	80035a0 <create_square_operations>
									 parameters_Path_Robot.Operation_List,
									 &parameters_buit_Robot,
									 &parameters_Path_Robot,
									 &parameters_Pos_Robot);

			flag_square = RESET;
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <main+0x790>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
			Do_the_track = SET; // Realizamos las operaciones
 800126c:	4b72      	ldr	r3, [pc, #456]	; (8001438 <main+0x780>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
			parameters_op_Robot.op_Mode = 0; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <main+0x788>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

		}


		if (Do_the_track){
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <main+0x780>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 816d 	beq.w	800155e <main+0x8a6>

			// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
			switch (parameters_op_Robot.op_Mode) {
 8001284:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <main+0x788>)
 8001286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d027      	beq.n	80012de <main+0x626>
 800128e:	2b02      	cmp	r3, #2
 8001290:	f300 8168 	bgt.w	8001564 <main+0x8ac>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <main+0x5e6>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <main+0x5fc>
						// Ya en este punto la bandera de Astar esta bajada por loq ue no tenemos que bajarla nuevamente, y ya
					}

					break;
				}
				default:{break;}
 800129c:	e162      	b.n	8001564 <main+0x8ac>
					counter_operation = 0;
 800129e:	4b71      	ldr	r3, [pc, #452]	; (8001464 <main+0x7ac>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 2;
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <main+0x788>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]
					parseCommands("reinit"); //reiniciamos todos los parametros
 80012ac:	486e      	ldr	r0, [pc, #440]	; (8001468 <main+0x7b0>)
 80012ae:	f000 fbcb 	bl	8001a48 <parseCommands>
					break;
 80012b2:	e158      	b.n	8001566 <main+0x8ae>
					create_Astar_operations(&handlerAstarParameters,
 80012b4:	4b67      	ldr	r3, [pc, #412]	; (8001454 <main+0x79c>)
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4b67      	ldr	r3, [pc, #412]	; (8001458 <main+0x7a0>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <main+0x7a4>)
 80012be:	4a68      	ldr	r2, [pc, #416]	; (8001460 <main+0x7a8>)
 80012c0:	4953      	ldr	r1, [pc, #332]	; (8001410 <main+0x758>)
 80012c2:	4855      	ldr	r0, [pc, #340]	; (8001418 <main+0x760>)
 80012c4:	f004 fb2c 	bl	8005920 <create_Astar_operations>
					counter_operation = 0;
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <main+0x7ac>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
					parameters_op_Robot.op_Mode = 2;
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <main+0x788>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
					parseCommands("reinit"); //reiniciamos todos los parametros
 80012d6:	4864      	ldr	r0, [pc, #400]	; (8001468 <main+0x7b0>)
 80012d8:	f000 fbb6 	bl	8001a48 <parseCommands>
					break;
 80012dc:	e143      	b.n	8001566 <main+0x8ae>
					delay_ms(3000);
 80012de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012e2:	f004 fdb9 	bl	8005e58 <delay_ms>
					if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 80012e6:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <main+0x7ac>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <main+0x7a0>)
 80012ee:	460b      	mov	r3, r1
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	3370      	adds	r3, #112	; 0x70
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 80bb 	bne.w	8001478 <main+0x7c0>
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 8001302:	4b58      	ldr	r3, [pc, #352]	; (8001464 <main+0x7ac>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	4a53      	ldr	r2, [pc, #332]	; (8001458 <main+0x7a0>)
 800130a:	460b      	mov	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4413      	add	r3, r2
 8001314:	3378      	adds	r3, #120	; 0x78
 8001316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <main+0x7b4>)
 8001320:	f7ff f982 	bl	8000628 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <main+0x79c>)
 800132e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001332:	f7fe ffc1 	bl	80002b8 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b17 	vmov	d7, r2, r3
 800133e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 80013f8 <main+0x740>
 8001342:	eeb0 0a47 	vmov.f32	s0, s14
 8001346:	eef0 0a67 	vmov.f32	s1, s15
 800134a:	f00c fd4f 	bl	800ddec <pow>
 800134e:	ec59 8b10 	vmov	r8, r9, d0
								     pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <main+0x7ac>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <main+0x7a0>)
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	3380      	adds	r3, #128	; 0x80
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <main+0x7b4>)
 8001370:	f7ff f95a 	bl	8000628 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <main+0x79c>)
 800137e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001382:	f7fe ff99 	bl	80002b8 <__aeabi_dsub>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	ec43 2b17 	vmov	d7, r2, r3
 800138e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80013f8 <main+0x740>
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f00c fd27 	bl	800ddec <pow>
 800139e:	ec53 2b10 	vmov	r2, r3, d0
								sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80013a2:	4640      	mov	r0, r8
 80013a4:	4649      	mov	r1, r9
 80013a6:	f7fe ff89 	bl	80002bc <__adddf3>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	ec43 2b17 	vmov	d7, r2, r3
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f00c fd87 	bl	800decc <sqrt>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
						parameters_Path_Robot.line_Distance =
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <main+0x7a0>)
 80013c8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
						sprintf(bufferReceptionMultiOperations, "goto %u %.2f" , 1 , parameters_Path_Robot.line_Distance); // Mandamos una direccion hacia adelante
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <main+0x7a0>)
 80013ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80013d2:	e9cd 2300 	strd	r2, r3, [sp]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4925      	ldr	r1, [pc, #148]	; (8001470 <main+0x7b8>)
 80013da:	4826      	ldr	r0, [pc, #152]	; (8001474 <main+0x7bc>)
 80013dc:	f009 fd9e 	bl	800af1c <siprintf>
						parseCommands(bufferReceptionMultiOperations); // Mandamos el comando
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <main+0x7bc>)
 80013e2:	f000 fb31 	bl	8001a48 <parseCommands>
						counter_operation++;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <main+0x7ac>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <main+0x7ac>)
 80013f0:	701a      	strb	r2, [r3, #0]
					break;
 80013f2:	e0b8      	b.n	8001566 <main+0x8ae>
 80013f4:	f3af 8000 	nop.w
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40000000 	.word	0x40000000
 8001400:	20001055 	.word	0x20001055
 8001404:	20001054 	.word	0x20001054
 8001408:	20000516 	.word	0x20000516
 800140c:	20000515 	.word	0x20000515
 8001410:	20011f84 	.word	0x20011f84
 8001414:	2000044c 	.word	0x2000044c
 8001418:	20000440 	.word	0x20000440
 800141c:	20001774 	.word	0x20001774
 8001420:	200114f4 	.word	0x200114f4
 8001424:	200005c4 	.word	0x200005c4
 8001428:	20001056 	.word	0x20001056
 800142c:	08010598 	.word	0x08010598
 8001430:	20000330 	.word	0x20000330
 8001434:	20001062 	.word	0x20001062
 8001438:	20001063 	.word	0x20001063
 800143c:	20001058 	.word	0x20001058
 8001440:	20001630 	.word	0x20001630
 8001444:	20000000 	.word	0x20000000
 8001448:	20001064 	.word	0x20001064
 800144c:	20001680 	.word	0x20001680
 8001450:	20001678 	.word	0x20001678
 8001454:	200015b0 	.word	0x200015b0
 8001458:	20001090 	.word	0x20001090
 800145c:	20001600 	.word	0x20001600
 8001460:	20001100 	.word	0x20001100
 8001464:	2000166c 	.word	0x2000166c
 8001468:	080105b8 	.word	0x080105b8
 800146c:	40240000 	.word	0x40240000
 8001470:	080105c0 	.word	0x080105c0
 8001474:	200004d4 	.word	0x200004d4
					}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <main+0x8b4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <main+0x8b8>)
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	3370      	adds	r3, #112	; 0x70
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d158      	bne.n	8001544 <main+0x88c>
						if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 8001492:	4b36      	ldr	r3, [pc, #216]	; (800156c <main+0x8b4>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4a35      	ldr	r2, [pc, #212]	; (8001570 <main+0x8b8>)
 800149a:	460b      	mov	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	3388      	adds	r3, #136	; 0x88
 80014a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f7ff fb2b 	bl	8000b0c <__aeabi_dcmplt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01f      	beq.n	80014fc <main+0x844>
									-parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative -8);
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <main+0x8b4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <main+0x8b8>)
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	3388      	adds	r3, #136	; 0x88
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	4614      	mov	r4, r2
 80014d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
							sprintf(bufferReceptionMultiOperations,
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <main+0x8bc>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe fee8 	bl	80002b8 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	e9cd 2300 	strd	r2, r3, [sp]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4921      	ldr	r1, [pc, #132]	; (8001578 <main+0x8c0>)
 80014f4:	4821      	ldr	r0, [pc, #132]	; (800157c <main+0x8c4>)
 80014f6:	f009 fd11 	bl	800af1c <siprintf>
 80014fa:	e019      	b.n	8001530 <main+0x878>
									parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative - 8);
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <main+0x8b4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <main+0x8b8>)
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	3388      	adds	r3, #136	; 0x88
 8001510:	e9d3 0100 	ldrd	r0, r1, [r3]
							sprintf(bufferReceptionMultiOperations,
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <main+0x8bc>)
 800151a:	f7fe fecd 	bl	80002b8 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9cd 2300 	strd	r2, r3, [sp]
 8001526:	2200      	movs	r2, #0
 8001528:	4913      	ldr	r1, [pc, #76]	; (8001578 <main+0x8c0>)
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <main+0x8c4>)
 800152c:	f009 fcf6 	bl	800af1c <siprintf>
						parseCommands(bufferReceptionMultiOperations); // Mandamos el comando
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <main+0x8c4>)
 8001532:	f000 fa89 	bl	8001a48 <parseCommands>
						counter_operation++;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <main+0x8b4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <main+0x8b4>)
 8001540:	701a      	strb	r2, [r3, #0]
					break;
 8001542:	e010      	b.n	8001566 <main+0x8ae>
						memset(parameters_Path_Robot.Operation_List,0, sizeof(parameters_Path_Robot.Operation_List));
 8001544:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001548:	2100      	movs	r1, #0
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <main+0x8c8>)
 800154c:	f008 ff84 	bl	800a458 <memset>
						counter_operation = 0;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <main+0x8b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
						Do_the_track = RESET; // Bajamos la bandera de Do_the_track para dejar de hacer operaciones
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <main+0x8cc>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
					break;
 800155c:	e003      	b.n	8001566 <main+0x8ae>
				}// Fin del switch case
			}
 800155e:	bf00      	nop
 8001560:	f7ff bbd8 	b.w	8000d14 <main+0x5c>
				default:{break;}
 8001564:	bf00      	nop
		if (!flag_Astar){
 8001566:	f7ff bbd5 	b.w	8000d14 <main+0x5c>
 800156a:	bf00      	nop
 800156c:	2000166c 	.word	0x2000166c
 8001570:	20001090 	.word	0x20001090
 8001574:	40200000 	.word	0x40200000
 8001578:	080105d0 	.word	0x080105d0
 800157c:	200004d4 	.word	0x200004d4
 8001580:	20001100 	.word	0x20001100
 8001584:	20001063 	.word	0x20001063

08001588 <inSystem>:
}




void inSystem (void){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 800158e:	4baf      	ldr	r3, [pc, #700]	; (800184c <inSystem+0x2c4>)
 8001590:	4aaf      	ldr	r2, [pc, #700]	; (8001850 <inSystem+0x2c8>)
 8001592:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8001594:	4bad      	ldr	r3, [pc, #692]	; (800184c <inSystem+0x2c4>)
 8001596:	2200      	movs	r2, #0
 8001598:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800159a:	4bac      	ldr	r3, [pc, #688]	; (800184c <inSystem+0x2c4>)
 800159c:	2201      	movs	r2, #1
 800159e:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80015a0:	4baa      	ldr	r3, [pc, #680]	; (800184c <inSystem+0x2c4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80015a6:	4ba9      	ldr	r3, [pc, #676]	; (800184c <inSystem+0x2c4>)
 80015a8:	2205      	movs	r2, #5
 80015aa:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015ac:	4ba7      	ldr	r3, [pc, #668]	; (800184c <inSystem+0x2c4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80015b2:	4ba6      	ldr	r3, [pc, #664]	; (800184c <inSystem+0x2c4>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80015b8:	48a4      	ldr	r0, [pc, #656]	; (800184c <inSystem+0x2c4>)
 80015ba:	f005 ff33 	bl	8007424 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80015be:	2101      	movs	r1, #1
 80015c0:	48a2      	ldr	r0, [pc, #648]	; (800184c <inSystem+0x2c4>)
 80015c2:	f006 f859 	bl	8007678 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 80015c6:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <inSystem+0x2cc>)
 80015c8:	4aa3      	ldr	r2, [pc, #652]	; (8001858 <inSystem+0x2d0>)
 80015ca:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80015cc:	4ba1      	ldr	r3, [pc, #644]	; (8001854 <inSystem+0x2cc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80015d2:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <inSystem+0x2cc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80015d8:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <inSystem+0x2cc>)
 80015da:	f242 7210 	movw	r2, #10000	; 0x2710
 80015de:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 80015e0:	4b9c      	ldr	r3, [pc, #624]	; (8001854 <inSystem+0x2cc>)
 80015e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015e6:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 80015e8:	489a      	ldr	r0, [pc, #616]	; (8001854 <inSystem+0x2cc>)
 80015ea:	f004 faaf 	bl	8005b4c <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 80015ee:	4899      	ldr	r0, [pc, #612]	; (8001854 <inSystem+0x2cc>)
 80015f0:	f004 fea8 	bl	8006344 <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80015f4:	f004 fa8e 	bl	8005b14 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 80015f8:	4b98      	ldr	r3, [pc, #608]	; (800185c <inSystem+0x2d4>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b98      	ldr	r3, [pc, #608]	; (8001860 <inSystem+0x2d8>)
 80015fe:	4a99      	ldr	r2, [pc, #612]	; (8001864 <inSystem+0x2dc>)
 8001600:	4999      	ldr	r1, [pc, #612]	; (8001868 <inSystem+0x2e0>)
 8001602:	489a      	ldr	r0, [pc, #616]	; (800186c <inSystem+0x2e4>)
 8001604:	f001 fc6e 	bl	8002ee4 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <inSystem+0x2e8>)
 800160a:	4a91      	ldr	r2, [pc, #580]	; (8001850 <inSystem+0x2c8>)
 800160c:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800160e:	4b98      	ldr	r3, [pc, #608]	; (8001870 <inSystem+0x2e8>)
 8001610:	2202      	movs	r2, #2
 8001612:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <inSystem+0x2e8>)
 8001616:	2202      	movs	r2, #2
 8001618:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800161a:	4b95      	ldr	r3, [pc, #596]	; (8001870 <inSystem+0x2e8>)
 800161c:	2200      	movs	r2, #0
 800161e:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <inSystem+0x2e8>)
 8001622:	2200      	movs	r2, #0
 8001624:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001626:	4b92      	ldr	r3, [pc, #584]	; (8001870 <inSystem+0x2e8>)
 8001628:	2200      	movs	r2, #0
 800162a:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <inSystem+0x2e8>)
 800162e:	2202      	movs	r2, #2
 8001630:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001632:	488f      	ldr	r0, [pc, #572]	; (8001870 <inSystem+0x2e8>)
 8001634:	f005 fef6 	bl	8007424 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001638:	4b8e      	ldr	r3, [pc, #568]	; (8001874 <inSystem+0x2ec>)
 800163a:	4a8f      	ldr	r2, [pc, #572]	; (8001878 <inSystem+0x2f0>)
 800163c:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800163e:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <inSystem+0x2ec>)
 8001640:	2200      	movs	r2, #0
 8001642:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001644:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <inSystem+0x2ec>)
 8001646:	4a8d      	ldr	r2, [pc, #564]	; (800187c <inSystem+0x2f4>)
 8001648:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 800164a:	498a      	ldr	r1, [pc, #552]	; (8001874 <inSystem+0x2ec>)
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <inSystem+0x2f8>)
 8001652:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001656:	4b87      	ldr	r3, [pc, #540]	; (8001874 <inSystem+0x2ec>)
 8001658:	2264      	movs	r2, #100	; 0x64
 800165a:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 800165c:	4b85      	ldr	r3, [pc, #532]	; (8001874 <inSystem+0x2ec>)
 800165e:	2201      	movs	r2, #1
 8001660:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001662:	4b84      	ldr	r3, [pc, #528]	; (8001874 <inSystem+0x2ec>)
 8001664:	2201      	movs	r2, #1
 8001666:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001668:	4882      	ldr	r0, [pc, #520]	; (8001874 <inSystem+0x2ec>)
 800166a:	f006 ff45 	bl	80084f8 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 800166e:	4881      	ldr	r0, [pc, #516]	; (8001874 <inSystem+0x2ec>)
 8001670:	f007 f82c 	bl	80086cc <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001674:	4b83      	ldr	r3, [pc, #524]	; (8001884 <inSystem+0x2fc>)
 8001676:	4a76      	ldr	r2, [pc, #472]	; (8001850 <inSystem+0x2c8>)
 8001678:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <inSystem+0x2fc>)
 800167c:	2202      	movs	r2, #2
 800167e:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001680:	4b80      	ldr	r3, [pc, #512]	; (8001884 <inSystem+0x2fc>)
 8001682:	2202      	movs	r2, #2
 8001684:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <inSystem+0x2fc>)
 8001688:	2200      	movs	r2, #0
 800168a:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800168c:	4b7d      	ldr	r3, [pc, #500]	; (8001884 <inSystem+0x2fc>)
 800168e:	2201      	movs	r2, #1
 8001690:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001692:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <inSystem+0x2fc>)
 8001694:	2200      	movs	r2, #0
 8001696:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <inSystem+0x2fc>)
 800169a:	2202      	movs	r2, #2
 800169c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <inSystem+0x2fc>)
 80016a0:	f005 fec0 	bl	8007424 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80016a4:	4b78      	ldr	r3, [pc, #480]	; (8001888 <inSystem+0x300>)
 80016a6:	4a74      	ldr	r2, [pc, #464]	; (8001878 <inSystem+0x2f0>)
 80016a8:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80016aa:	4b77      	ldr	r3, [pc, #476]	; (8001888 <inSystem+0x300>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <inSystem+0x300>)
 80016b2:	4a72      	ldr	r2, [pc, #456]	; (800187c <inSystem+0x2f4>)
 80016b4:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80016b6:	4974      	ldr	r1, [pc, #464]	; (8001888 <inSystem+0x300>)
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <inSystem+0x2f8>)
 80016be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80016c2:	4b71      	ldr	r3, [pc, #452]	; (8001888 <inSystem+0x300>)
 80016c4:	2264      	movs	r2, #100	; 0x64
 80016c6:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80016c8:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <inSystem+0x300>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <inSystem+0x300>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80016d4:	486c      	ldr	r0, [pc, #432]	; (8001888 <inSystem+0x300>)
 80016d6:	f006 ff0f 	bl	80084f8 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80016da:	486b      	ldr	r0, [pc, #428]	; (8001888 <inSystem+0x300>)
 80016dc:	f006 fff6 	bl	80086cc <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80016e0:	4b6a      	ldr	r3, [pc, #424]	; (800188c <inSystem+0x304>)
 80016e2:	4a6b      	ldr	r2, [pc, #428]	; (8001890 <inSystem+0x308>)
 80016e4:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <inSystem+0x304>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80016ec:	4b67      	ldr	r3, [pc, #412]	; (800188c <inSystem+0x304>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <inSystem+0x304>)
 80016f4:	220a      	movs	r2, #10
 80016f6:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <inSystem+0x304>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <inSystem+0x304>)
 8001700:	2200      	movs	r2, #0
 8001702:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <inSystem+0x304>)
 8001706:	2202      	movs	r2, #2
 8001708:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 800170a:	4860      	ldr	r0, [pc, #384]	; (800188c <inSystem+0x304>)
 800170c:	f005 fe8a 	bl	8007424 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001710:	2100      	movs	r1, #0
 8001712:	485e      	ldr	r0, [pc, #376]	; (800188c <inSystem+0x304>)
 8001714:	f005 ffdb 	bl	80076ce <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8001718:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <inSystem+0x30c>)
 800171a:	4a5d      	ldr	r2, [pc, #372]	; (8001890 <inSystem+0x308>)
 800171c:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <inSystem+0x30c>)
 8001720:	2200      	movs	r2, #0
 8001722:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <inSystem+0x30c>)
 8001726:	2201      	movs	r2, #1
 8001728:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <inSystem+0x30c>)
 800172c:	220b      	movs	r2, #11
 800172e:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <inSystem+0x30c>)
 8001732:	2200      	movs	r2, #0
 8001734:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001736:	4b57      	ldr	r3, [pc, #348]	; (8001894 <inSystem+0x30c>)
 8001738:	2200      	movs	r2, #0
 800173a:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <inSystem+0x30c>)
 800173e:	2202      	movs	r2, #2
 8001740:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001742:	4854      	ldr	r0, [pc, #336]	; (8001894 <inSystem+0x30c>)
 8001744:	f005 fe6e 	bl	8007424 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001748:	2100      	movs	r1, #0
 800174a:	4852      	ldr	r0, [pc, #328]	; (8001894 <inSystem+0x30c>)
 800174c:	f005 ffbf 	bl	80076ce <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <inSystem+0x310>)
 8001752:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <inSystem+0x308>)
 8001754:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001756:	4b50      	ldr	r3, [pc, #320]	; (8001898 <inSystem+0x310>)
 8001758:	2200      	movs	r2, #0
 800175a:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <inSystem+0x310>)
 800175e:	2201      	movs	r2, #1
 8001760:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001762:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <inSystem+0x310>)
 8001764:	220c      	movs	r2, #12
 8001766:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <inSystem+0x310>)
 800176a:	2200      	movs	r2, #0
 800176c:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <inSystem+0x310>)
 8001770:	2200      	movs	r2, #0
 8001772:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <inSystem+0x310>)
 8001776:	2202      	movs	r2, #2
 8001778:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 800177a:	4847      	ldr	r0, [pc, #284]	; (8001898 <inSystem+0x310>)
 800177c:	f005 fe52 	bl	8007424 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001780:	2100      	movs	r1, #0
 8001782:	4845      	ldr	r0, [pc, #276]	; (8001898 <inSystem+0x310>)
 8001784:	f005 ffa3 	bl	80076ce <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <inSystem+0x2e4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <inSystem+0x314>)
 8001792:	4a43      	ldr	r2, [pc, #268]	; (80018a0 <inSystem+0x318>)
 8001794:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <inSystem+0x314>)
 8001798:	2200      	movs	r2, #0
 800179a:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <inSystem+0x314>)
 800179e:	2201      	movs	r2, #1
 80017a0:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <inSystem+0x314>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80017a8:	4b3c      	ldr	r3, [pc, #240]	; (800189c <inSystem+0x314>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <inSystem+0x314>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <inSystem+0x314>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80017ba:	4838      	ldr	r0, [pc, #224]	; (800189c <inSystem+0x314>)
 80017bc:	f005 fe32 	bl	8007424 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80017c0:	2100      	movs	r1, #0
 80017c2:	4836      	ldr	r0, [pc, #216]	; (800189c <inSystem+0x314>)
 80017c4:	f005 ff83 	bl	80076ce <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <inSystem+0x2e4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <inSystem+0x31c>)
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <inSystem+0x308>)
 80017d4:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80017d6:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <inSystem+0x31c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <inSystem+0x31c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <inSystem+0x31c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <inSystem+0x31c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <inSystem+0x31c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <inSystem+0x31c>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <inSystem+0x320>)
 80017fc:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <inSystem+0x31c>)
 80017fe:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <inSystem+0x320>)
 8001802:	2202      	movs	r2, #2
 8001804:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001806:	4828      	ldr	r0, [pc, #160]	; (80018a8 <inSystem+0x320>)
 8001808:	f004 fdde 	bl	80063c8 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <inSystem+0x324>)
 800180e:	4a20      	ldr	r2, [pc, #128]	; (8001890 <inSystem+0x308>)
 8001810:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <inSystem+0x324>)
 8001814:	2200      	movs	r2, #0
 8001816:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <inSystem+0x324>)
 800181a:	2200      	movs	r2, #0
 800181c:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <inSystem+0x324>)
 8001820:	2203      	movs	r2, #3
 8001822:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <inSystem+0x324>)
 8001826:	2200      	movs	r2, #0
 8001828:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <inSystem+0x324>)
 800182c:	2200      	movs	r2, #0
 800182e:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <inSystem+0x324>)
 8001832:	2202      	movs	r2, #2
 8001834:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <inSystem+0x328>)
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <inSystem+0x324>)
 800183a:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <inSystem+0x328>)
 800183e:	2202      	movs	r2, #2
 8001840:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001842:	481b      	ldr	r0, [pc, #108]	; (80018b0 <inSystem+0x328>)
 8001844:	f004 fdc0 	bl	80063c8 <extInt_Config>
 8001848:	e034      	b.n	80018b4 <inSystem+0x32c>
 800184a:	bf00      	nop
 800184c:	20000204 	.word	0x20000204
 8001850:	40020000 	.word	0x40020000
 8001854:	200002b0 	.word	0x200002b0
 8001858:	40000400 	.word	0x40000400
 800185c:	20001058 	.word	0x20001058
 8001860:	20001070 	.word	0x20001070
 8001864:	20001090 	.word	0x20001090
 8001868:	200015b0 	.word	0x200015b0
 800186c:	200003e0 	.word	0x200003e0
 8001870:	20000210 	.word	0x20000210
 8001874:	200002f0 	.word	0x200002f0
 8001878:	40000c00 	.word	0x40000c00
 800187c:	41e00000 	.word	0x41e00000
 8001880:	40408000 	.word	0x40408000
 8001884:	2000021c 	.word	0x2000021c
 8001888:	20000310 	.word	0x20000310
 800188c:	2000024c 	.word	0x2000024c
 8001890:	40020800 	.word	0x40020800
 8001894:	20000240 	.word	0x20000240
 8001898:	20000264 	.word	0x20000264
 800189c:	20000258 	.word	0x20000258
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	20000270 	.word	0x20000270
 80018a8:	200002a0 	.word	0x200002a0
 80018ac:	2000027c 	.word	0x2000027c
 80018b0:	200002a8 	.word	0x200002a8
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <inSystem+0x48c>)
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <inSystem+0x490>)
 80018b8:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80018ba:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <inSystem+0x48c>)
 80018bc:	2207      	movs	r2, #7
 80018be:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <inSystem+0x48c>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <inSystem+0x48c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80018cc:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <inSystem+0x48c>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <inSystem+0x48c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80018d8:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <inSystem+0x48c>)
 80018da:	2203      	movs	r2, #3
 80018dc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80018de:	484d      	ldr	r0, [pc, #308]	; (8001a14 <inSystem+0x48c>)
 80018e0:	f005 fda0 	bl	8007424 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <inSystem+0x494>)
 80018e6:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <inSystem+0x490>)
 80018e8:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80018ea:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <inSystem+0x494>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <inSystem+0x494>)
 80018f2:	2202      	movs	r2, #2
 80018f4:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <inSystem+0x494>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <inSystem+0x494>)
 80018fe:	2203      	movs	r2, #3
 8001900:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <inSystem+0x494>)
 8001904:	2200      	movs	r2, #0
 8001906:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <inSystem+0x494>)
 800190a:	2203      	movs	r2, #3
 800190c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 800190e:	4843      	ldr	r0, [pc, #268]	; (8001a1c <inSystem+0x494>)
 8001910:	f005 fd88 	bl	8007424 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <inSystem+0x498>)
 8001916:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <inSystem+0x49c>)
 8001918:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <inSystem+0x498>)
 800191c:	4a42      	ldr	r2, [pc, #264]	; (8001a28 <inSystem+0x4a0>)
 800191e:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <inSystem+0x498>)
 8001922:	2201      	movs	r2, #1
 8001924:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <inSystem+0x498>)
 8001928:	2201      	movs	r2, #1
 800192a:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <inSystem+0x498>)
 800192e:	2200      	movs	r2, #0
 8001930:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <inSystem+0x498>)
 8001934:	2202      	movs	r2, #2
 8001936:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <inSystem+0x498>)
 800193a:	2200      	movs	r2, #0
 800193c:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <inSystem+0x498>)
 8001940:	2200      	movs	r2, #0
 8001942:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <inSystem+0x498>)
 8001946:	2200      	movs	r2, #0
 8001948:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800194a:	4835      	ldr	r0, [pc, #212]	; (8001a20 <inSystem+0x498>)
 800194c:	f007 fe4e 	bl	80095ec <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <inSystem+0x4a4>)
 8001952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001956:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <inSystem+0x4a4>)
 800195a:	2201      	movs	r2, #1
 800195c:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <inSystem+0x4a4>)
 8001960:	2200      	movs	r2, #0
 8001962:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <inSystem+0x4a4>)
 8001966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196a:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <inSystem+0x4a4>)
 800196e:	2210      	movs	r2, #16
 8001970:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <inSystem+0x4a4>)
 8001974:	f004 f8ea 	bl	8005b4c <BasicTimer_Config>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001978:	482c      	ldr	r0, [pc, #176]	; (8001a2c <inSystem+0x4a4>)
 800197a:	f004 fce3 	bl	8006344 <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <inSystem+0x4a8>)
 8001980:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <inSystem+0x4ac>)
 8001982:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <inSystem+0x4a8>)
 8001986:	2204      	movs	r2, #4
 8001988:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <inSystem+0x4a8>)
 800198c:	2202      	movs	r2, #2
 800198e:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <inSystem+0x4a8>)
 8001992:	2208      	movs	r2, #8
 8001994:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <inSystem+0x4a8>)
 8001998:	2201      	movs	r2, #1
 800199a:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <inSystem+0x4a8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <inSystem+0x4a8>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <inSystem+0x4b0>)
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <inSystem+0x4ac>)
 80019ac:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <inSystem+0x4b0>)
 80019b0:	2204      	movs	r2, #4
 80019b2:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <inSystem+0x4b0>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <inSystem+0x4b0>)
 80019bc:	2209      	movs	r2, #9
 80019be:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <inSystem+0x4b0>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <inSystem+0x4b0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <inSystem+0x4b0>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <inSystem+0x4b4>)
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <inSystem+0x4b8>)
 80019d6:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <inSystem+0x4b4>)
 80019da:	2232      	movs	r2, #50	; 0x32
 80019dc:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <inSystem+0x4b4>)
 80019e0:	2268      	movs	r2, #104	; 0x68
 80019e2:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <inSystem+0x4b4>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <inSystem+0x4bc>)
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <inSystem+0x4a8>)
 80019ee:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <inSystem+0x4bc>)
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <inSystem+0x4b0>)
 80019f4:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <inSystem+0x4bc>)
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <inSystem+0x4b4>)
 80019fa:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <inSystem+0x4bc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <inSystem+0x4bc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <inSystem+0x4bc>)
 8001a0a:	f005 fec3 	bl	8007794 <configMPUAccel>

}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000234 	.word	0x20000234
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	20000228 	.word	0x20000228
 8001a20:	20000330 	.word	0x20000330
 8001a24:	40004400 	.word	0x40004400
 8001a28:	02faf080 	.word	0x02faf080
 8001a2c:	200002c4 	.word	0x200002c4
 8001a30:	20000288 	.word	0x20000288
 8001a34:	40020400 	.word	0x40020400
 8001a38:	20000294 	.word	0x20000294
 8001a3c:	200003c4 	.word	0x200003c4
 8001a40:	40005400 	.word	0x40005400
 8001a44:	200003d0 	.word	0x200003d0

08001a48 <parseCommands>:


void parseCommands(char *stringVector){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001a50:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <parseCommands+0x218>)
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	4b83      	ldr	r3, [pc, #524]	; (8001c64 <parseCommands+0x21c>)
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <parseCommands+0x220>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <parseCommands+0x224>)
 8001a5e:	4a84      	ldr	r2, [pc, #528]	; (8001c70 <parseCommands+0x228>)
 8001a60:	4984      	ldr	r1, [pc, #528]	; (8001c74 <parseCommands+0x22c>)
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f009 fa7a 	bl	800af5c <siscanf>


	if (strcmp(cmd, "help") == 0){
 8001a68:	4983      	ldr	r1, [pc, #524]	; (8001c78 <parseCommands+0x230>)
 8001a6a:	4881      	ldr	r0, [pc, #516]	; (8001c70 <parseCommands+0x228>)
 8001a6c:	f7fe fbb8 	bl	80001e0 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d128      	bne.n	8001ac8 <parseCommands+0x80>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 8001a76:	4981      	ldr	r1, [pc, #516]	; (8001c7c <parseCommands+0x234>)
 8001a78:	4881      	ldr	r0, [pc, #516]	; (8001c80 <parseCommands+0x238>)
 8001a7a:	f008 f9a3 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 8001a7e:	4981      	ldr	r1, [pc, #516]	; (8001c84 <parseCommands+0x23c>)
 8001a80:	487f      	ldr	r0, [pc, #508]	; (8001c80 <parseCommands+0x238>)
 8001a82:	f008 f99f 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 8001a86:	4980      	ldr	r1, [pc, #512]	; (8001c88 <parseCommands+0x240>)
 8001a88:	487d      	ldr	r0, [pc, #500]	; (8001c80 <parseCommands+0x238>)
 8001a8a:	f008 f99b 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 8001a8e:	497f      	ldr	r1, [pc, #508]	; (8001c8c <parseCommands+0x244>)
 8001a90:	487b      	ldr	r0, [pc, #492]	; (8001c80 <parseCommands+0x238>)
 8001a92:	f008 f997 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 8001a96:	497e      	ldr	r1, [pc, #504]	; (8001c90 <parseCommands+0x248>)
 8001a98:	4879      	ldr	r0, [pc, #484]	; (8001c80 <parseCommands+0x238>)
 8001a9a:	f008 f993 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 8001a9e:	497d      	ldr	r1, [pc, #500]	; (8001c94 <parseCommands+0x24c>)
 8001aa0:	4877      	ldr	r0, [pc, #476]	; (8001c80 <parseCommands+0x238>)
 8001aa2:	f008 f98f 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "6)  square #dir_roll #side_distance (cm)  \n");
 8001aa6:	497c      	ldr	r1, [pc, #496]	; (8001c98 <parseCommands+0x250>)
 8001aa8:	4875      	ldr	r0, [pc, #468]	; (8001c80 <parseCommands+0x238>)
 8001aaa:	f008 f98b 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "7)  Astar  #Parallel-distance #Diagonal-distance \n");
 8001aae:	497b      	ldr	r1, [pc, #492]	; (8001c9c <parseCommands+0x254>)
 8001ab0:	4873      	ldr	r0, [pc, #460]	; (8001c80 <parseCommands+0x238>)
 8001ab2:	f008 f987 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "8)  reinit  \n");
 8001ab6:	497a      	ldr	r1, [pc, #488]	; (8001ca0 <parseCommands+0x258>)
 8001ab8:	4871      	ldr	r0, [pc, #452]	; (8001c80 <parseCommands+0x238>)
 8001aba:	f008 f983 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, " \n");
 8001abe:	4979      	ldr	r1, [pc, #484]	; (8001ca4 <parseCommands+0x25c>)
 8001ac0:	486f      	ldr	r0, [pc, #444]	; (8001c80 <parseCommands+0x238>)
 8001ac2:	f008 f97f 	bl	8009dc4 <writeMsg>
	else {
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
	}


}
 8001ac6:	e19d      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "go") == 0){
 8001ac8:	4977      	ldr	r1, [pc, #476]	; (8001ca8 <parseCommands+0x260>)
 8001aca:	4869      	ldr	r0, [pc, #420]	; (8001c70 <parseCommands+0x228>)
 8001acc:	f7fe fb88 	bl	80001e0 <strcmp>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <parseCommands+0xc0>
		Mode_dir.Mode = Mode = sLine;
 8001ad6:	4b75      	ldr	r3, [pc, #468]	; (8001cac <parseCommands+0x264>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <parseCommands+0x264>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <parseCommands+0x268>)
 8001ae2:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <parseCommands+0x224>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <parseCommands+0x268>)
 8001aec:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <parseCommands+0x268>)
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	4870      	ldr	r0, [pc, #448]	; (8001cb4 <parseCommands+0x26c>)
 8001af4:	f001 f810 	bl	8002b18 <On_motor_Straigh_Roll>
		flag_Go_Straigh = SET;
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <parseCommands+0x270>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 8001afe:	496f      	ldr	r1, [pc, #444]	; (8001cbc <parseCommands+0x274>)
 8001b00:	485f      	ldr	r0, [pc, #380]	; (8001c80 <parseCommands+0x238>)
 8001b02:	f008 f95f 	bl	8009dc4 <writeMsg>
}
 8001b06:	e17d      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "goto") == 0){
 8001b08:	496d      	ldr	r1, [pc, #436]	; (8001cc0 <parseCommands+0x278>)
 8001b0a:	4859      	ldr	r0, [pc, #356]	; (8001c70 <parseCommands+0x228>)
 8001b0c:	f7fe fb68 	bl	80001e0 <strcmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d122      	bne.n	8001b5c <parseCommands+0x114>
		Mode_dir.Mode = Mode = sLine ;
 8001b16:	4b65      	ldr	r3, [pc, #404]	; (8001cac <parseCommands+0x264>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <parseCommands+0x264>)
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <parseCommands+0x268>)
 8001b22:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <parseCommands+0x224>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <parseCommands+0x268>)
 8001b2c:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <parseCommands+0x268>)
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	4860      	ldr	r0, [pc, #384]	; (8001cb4 <parseCommands+0x26c>)
 8001b34:	f000 fff0 	bl	8002b18 <On_motor_Straigh_Roll>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <parseCommands+0x220>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fcf9 	bl	8000534 <__aeabi_ui2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	495f      	ldr	r1, [pc, #380]	; (8001cc4 <parseCommands+0x27c>)
 8001b48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <parseCommands+0x280>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 8001b52:	495e      	ldr	r1, [pc, #376]	; (8001ccc <parseCommands+0x284>)
 8001b54:	484a      	ldr	r0, [pc, #296]	; (8001c80 <parseCommands+0x238>)
 8001b56:	f008 f935 	bl	8009dc4 <writeMsg>
}
 8001b5a:	e153      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "roll") == 0){
 8001b5c:	495c      	ldr	r1, [pc, #368]	; (8001cd0 <parseCommands+0x288>)
 8001b5e:	4844      	ldr	r0, [pc, #272]	; (8001c70 <parseCommands+0x228>)
 8001b60:	f7fe fb3e 	bl	80001e0 <strcmp>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <parseCommands+0x154>
		Mode_dir.Mode = Mode = sRoll;
 8001b6a:	4b50      	ldr	r3, [pc, #320]	; (8001cac <parseCommands+0x264>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <parseCommands+0x264>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <parseCommands+0x268>)
 8001b76:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <parseCommands+0x224>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <parseCommands+0x268>)
 8001b80:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <parseCommands+0x268>)
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	484b      	ldr	r0, [pc, #300]	; (8001cb4 <parseCommands+0x26c>)
 8001b88:	f000 ffc6 	bl	8002b18 <On_motor_Straigh_Roll>
		flag_Roll = SET;
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <parseCommands+0x28c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 8001b92:	4951      	ldr	r1, [pc, #324]	; (8001cd8 <parseCommands+0x290>)
 8001b94:	483a      	ldr	r0, [pc, #232]	; (8001c80 <parseCommands+0x238>)
 8001b96:	f008 f915 	bl	8009dc4 <writeMsg>
}
 8001b9a:	e133      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "rollto") == 0){
 8001b9c:	494f      	ldr	r1, [pc, #316]	; (8001cdc <parseCommands+0x294>)
 8001b9e:	4834      	ldr	r0, [pc, #208]	; (8001c70 <parseCommands+0x228>)
 8001ba0:	f7fe fb1e 	bl	80001e0 <strcmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d11d      	bne.n	8001be6 <parseCommands+0x19e>
		Mode_dir.Mode = Mode = sRoll;
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <parseCommands+0x264>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <parseCommands+0x264>)
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <parseCommands+0x268>)
 8001bb6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <parseCommands+0x224>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <parseCommands+0x268>)
 8001bc0:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <parseCommands+0x268>)
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	483b      	ldr	r0, [pc, #236]	; (8001cb4 <parseCommands+0x26c>)
 8001bc8:	f000 ffa6 	bl	8002b18 <On_motor_Straigh_Roll>
		parameters_Path_Robot.angle = secondParameter;
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <parseCommands+0x220>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <parseCommands+0x27c>)
 8001bd4:	649a      	str	r2, [r3, #72]	; 0x48
		flag_RollTo = SET;
 8001bd6:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <parseCommands+0x298>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 8001bdc:	4941      	ldr	r1, [pc, #260]	; (8001ce4 <parseCommands+0x29c>)
 8001bde:	4828      	ldr	r0, [pc, #160]	; (8001c80 <parseCommands+0x238>)
 8001be0:	f008 f8f0 	bl	8009dc4 <writeMsg>
}
 8001be4:	e10e      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "reinit") == 0){
 8001be6:	4940      	ldr	r1, [pc, #256]	; (8001ce8 <parseCommands+0x2a0>)
 8001be8:	4821      	ldr	r0, [pc, #132]	; (8001c70 <parseCommands+0x228>)
 8001bea:	f7fe faf9 	bl	80001e0 <strcmp>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10c      	bne.n	8001c0e <parseCommands+0x1c6>
		int_Config_Motor(handler_Motor_Array,
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <parseCommands+0x268>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <parseCommands+0x2a4>)
 8001bfa:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <parseCommands+0x27c>)
 8001bfc:	493c      	ldr	r1, [pc, #240]	; (8001cf0 <parseCommands+0x2a8>)
 8001bfe:	482d      	ldr	r0, [pc, #180]	; (8001cb4 <parseCommands+0x26c>)
 8001c00:	f001 f970 	bl	8002ee4 <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001c04:	493b      	ldr	r1, [pc, #236]	; (8001cf4 <parseCommands+0x2ac>)
 8001c06:	481e      	ldr	r0, [pc, #120]	; (8001c80 <parseCommands+0x238>)
 8001c08:	f008 f8dc 	bl	8009dc4 <writeMsg>
}
 8001c0c:	e0fa      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "change") == 0){
 8001c0e:	493a      	ldr	r1, [pc, #232]	; (8001cf8 <parseCommands+0x2b0>)
 8001c10:	4817      	ldr	r0, [pc, #92]	; (8001c70 <parseCommands+0x228>)
 8001c12:	f7fe fae5 	bl	80001e0 <strcmp>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d171      	bne.n	8001d00 <parseCommands+0x2b8>
		if (Mode == sLine ){
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <parseCommands+0x264>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <parseCommands+0x1f2>
			Mode_dir.direction_s_r = firstParameter;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <parseCommands+0x224>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <parseCommands+0x268>)
 8001c2c:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <parseCommands+0x268>)
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <parseCommands+0x26c>)
 8001c34:	f001 f85b 	bl	8002cee <change_dir_straigh_Roll>
 8001c38:	e00d      	b.n	8001c56 <parseCommands+0x20e>
		}else if (Mode == sRoll ){
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <parseCommands+0x264>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d109      	bne.n	8001c56 <parseCommands+0x20e>
			Mode_dir.direction_s_r = firstParameter;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <parseCommands+0x224>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <parseCommands+0x268>)
 8001c4a:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <parseCommands+0x268>)
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <parseCommands+0x26c>)
 8001c52:	f001 f84c 	bl	8002cee <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO change EJECUTADO____\n\r");
 8001c56:	4929      	ldr	r1, [pc, #164]	; (8001cfc <parseCommands+0x2b4>)
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <parseCommands+0x238>)
 8001c5a:	f008 f8b3 	bl	8009dc4 <writeMsg>
}
 8001c5e:	e0d1      	b.n	8001e04 <parseCommands+0x3bc>
 8001c60:	20000584 	.word	0x20000584
 8001c64:	20000540 	.word	0x20000540
 8001c68:	2000053c 	.word	0x2000053c
 8001c6c:	20000538 	.word	0x20000538
 8001c70:	20000518 	.word	0x20000518
 8001c74:	080105e0 	.word	0x080105e0
 8001c78:	080105f0 	.word	0x080105f0
 8001c7c:	080105f8 	.word	0x080105f8
 8001c80:	20000330 	.word	0x20000330
 8001c84:	0801060c 	.word	0x0801060c
 8001c88:	08010634 	.word	0x08010634
 8001c8c:	08010650 	.word	0x08010650
 8001c90:	08010678 	.word	0x08010678
 8001c94:	08010698 	.word	0x08010698
 8001c98:	080106cc 	.word	0x080106cc
 8001c9c:	080106f8 	.word	0x080106f8
 8001ca0:	0801072c 	.word	0x0801072c
 8001ca4:	0801073c 	.word	0x0801073c
 8001ca8:	08010740 	.word	0x08010740
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20001058 	.word	0x20001058
 8001cb4:	200003e0 	.word	0x200003e0
 8001cb8:	2000105c 	.word	0x2000105c
 8001cbc:	08010744 	.word	0x08010744
 8001cc0:	08010764 	.word	0x08010764
 8001cc4:	20001090 	.word	0x20001090
 8001cc8:	2000105d 	.word	0x2000105d
 8001ccc:	0801076c 	.word	0x0801076c
 8001cd0:	08010790 	.word	0x08010790
 8001cd4:	2000105f 	.word	0x2000105f
 8001cd8:	08010798 	.word	0x08010798
 8001cdc:	080107bc 	.word	0x080107bc
 8001ce0:	20001060 	.word	0x20001060
 8001ce4:	080107c4 	.word	0x080107c4
 8001ce8:	080105b8 	.word	0x080105b8
 8001cec:	20001070 	.word	0x20001070
 8001cf0:	200015b0 	.word	0x200015b0
 8001cf4:	080107e8 	.word	0x080107e8
 8001cf8:	0801080c 	.word	0x0801080c
 8001cfc:	08010814 	.word	0x08010814
	}else if (strcmp(cmd, "Astar") == 0){
 8001d00:	4942      	ldr	r1, [pc, #264]	; (8001e0c <parseCommands+0x3c4>)
 8001d02:	4843      	ldr	r0, [pc, #268]	; (8001e10 <parseCommands+0x3c8>)
 8001d04:	f7fe fa6c 	bl	80001e0 <strcmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d130      	bne.n	8001d70 <parseCommands+0x328>
		handlerAstarParameters.parallelDistance  = firstParameter;
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <parseCommands+0x3cc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <parseCommands+0x3d0>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = secondParameter;
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <parseCommands+0x3d4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <parseCommands+0x3d0>)
 8001d2e:	edc3 7a01 	vstr	s15, [r3, #4]
		writeMsg(&handlerUSART, msg_InsertGrid);
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <parseCommands+0x3d8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	483a      	ldr	r0, [pc, #232]	; (8001e24 <parseCommands+0x3dc>)
 8001d3a:	f008 f843 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8001d3e:	493a      	ldr	r1, [pc, #232]	; (8001e28 <parseCommands+0x3e0>)
 8001d40:	4838      	ldr	r0, [pc, #224]	; (8001e24 <parseCommands+0x3dc>)
 8001d42:	f008 f83f 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001d46:	4939      	ldr	r1, [pc, #228]	; (8001e2c <parseCommands+0x3e4>)
 8001d48:	4836      	ldr	r0, [pc, #216]	; (8001e24 <parseCommands+0x3dc>)
 8001d4a:	f008 f83b 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8001d4e:	4938      	ldr	r1, [pc, #224]	; (8001e30 <parseCommands+0x3e8>)
 8001d50:	4834      	ldr	r0, [pc, #208]	; (8001e24 <parseCommands+0x3dc>)
 8001d52:	f008 f837 	bl	8009dc4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8001d56:	4937      	ldr	r1, [pc, #220]	; (8001e34 <parseCommands+0x3ec>)
 8001d58:	4832      	ldr	r0, [pc, #200]	; (8001e24 <parseCommands+0x3dc>)
 8001d5a:	f008 f833 	bl	8009dc4 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001d5e:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <parseCommands+0x3f0>)
 8001d60:	4936      	ldr	r1, [pc, #216]	; (8001e3c <parseCommands+0x3f4>)
 8001d62:	4830      	ldr	r0, [pc, #192]	; (8001e24 <parseCommands+0x3dc>)
 8001d64:	f003 fd72 	bl	800584c <initSerialComunication>
		flag_Astar = SET;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <parseCommands+0x3f8>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
}
 8001d6e:	e049      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "square") == 0){
 8001d70:	4934      	ldr	r1, [pc, #208]	; (8001e44 <parseCommands+0x3fc>)
 8001d72:	4827      	ldr	r0, [pc, #156]	; (8001e10 <parseCommands+0x3c8>)
 8001d74:	f7fe fa34 	bl	80001e0 <strcmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <parseCommands+0x364>
			square_dir  = firstParameter; // Direccion del cuadrado
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <parseCommands+0x3cc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <parseCommands+0x400>)
 8001d86:	701a      	strb	r2, [r3, #0]
			square_side = secondParameter; // lado del cuadrado en cm
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <parseCommands+0x3d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbd1 	bl	8000534 <__aeabi_ui2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	492d      	ldr	r1, [pc, #180]	; (8001e4c <parseCommands+0x404>)
 8001d98:	e9c1 2300 	strd	r2, r3, [r1]
			flag_square = SET; // Levantamos la bandera para Square
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <parseCommands+0x408>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n____COMANDO square EJECUTADO____\n\r");
 8001da2:	492c      	ldr	r1, [pc, #176]	; (8001e54 <parseCommands+0x40c>)
 8001da4:	481f      	ldr	r0, [pc, #124]	; (8001e24 <parseCommands+0x3dc>)
 8001da6:	f008 f80d 	bl	8009dc4 <writeMsg>
}
 8001daa:	e02b      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "stop") == 0){
 8001dac:	492a      	ldr	r1, [pc, #168]	; (8001e58 <parseCommands+0x410>)
 8001dae:	4818      	ldr	r0, [pc, #96]	; (8001e10 <parseCommands+0x3c8>)
 8001db0:	f7fe fa16 	bl	80001e0 <strcmp>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <parseCommands+0x39e>
		stop(handler_Motor_Array); // Apagamos los motores
 8001dba:	4828      	ldr	r0, [pc, #160]	; (8001e5c <parseCommands+0x414>)
 8001dbc:	f001 f86e 	bl	8002e9c <stop>
		flag_Go_Straigh   = RESET;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <parseCommands+0x418>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <parseCommands+0x41c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <parseCommands+0x420>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <parseCommands+0x424>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
		Done = RESET;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <parseCommands+0x428>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
		Mode_dir.Mode     = sNone;
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <parseCommands+0x42c>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	e00e      	b.n	8001e04 <parseCommands+0x3bc>
	}else if (strcmp(cmd, "stoptimer") == 0){
 8001de6:	4924      	ldr	r1, [pc, #144]	; (8001e78 <parseCommands+0x430>)
 8001de8:	4809      	ldr	r0, [pc, #36]	; (8001e10 <parseCommands+0x3c8>)
 8001dea:	f7fe f9f9 	bl	80001e0 <strcmp>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <parseCommands+0x3b4>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Paramos de medir
 8001df4:	4821      	ldr	r0, [pc, #132]	; (8001e7c <parseCommands+0x434>)
 8001df6:	f004 fab7 	bl	8006368 <stopTimer>
}
 8001dfa:	e003      	b.n	8001e04 <parseCommands+0x3bc>
		writeMsg(&handlerUSART, "\r\n _____________Comando Incorrecto :c_____________ \n");
 8001dfc:	4920      	ldr	r1, [pc, #128]	; (8001e80 <parseCommands+0x438>)
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <parseCommands+0x3dc>)
 8001e00:	f007 ffe0 	bl	8009dc4 <writeMsg>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	08010838 	.word	0x08010838
 8001e10:	20000518 	.word	0x20000518
 8001e14:	20000538 	.word	0x20000538
 8001e18:	20000440 	.word	0x20000440
 8001e1c:	2000053c 	.word	0x2000053c
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000330 	.word	0x20000330
 8001e28:	08010840 	.word	0x08010840
 8001e2c:	08010878 	.word	0x08010878
 8001e30:	080108b0 	.word	0x080108b0
 8001e34:	080108e8 	.word	0x080108e8
 8001e38:	20000234 	.word	0x20000234
 8001e3c:	20000228 	.word	0x20000228
 8001e40:	20001062 	.word	0x20001062
 8001e44:	08010920 	.word	0x08010920
 8001e48:	20001678 	.word	0x20001678
 8001e4c:	20001680 	.word	0x20001680
 8001e50:	20001064 	.word	0x20001064
 8001e54:	08010928 	.word	0x08010928
 8001e58:	08010590 	.word	0x08010590
 8001e5c:	200003e0 	.word	0x200003e0
 8001e60:	2000105c 	.word	0x2000105c
 8001e64:	2000105d 	.word	0x2000105d
 8001e68:	2000105f 	.word	0x2000105f
 8001e6c:	20001060 	.word	0x20001060
 8001e70:	20001061 	.word	0x20001061
 8001e74:	20001058 	.word	0x20001058
 8001e78:	0801094c 	.word	0x0801094c
 8001e7c:	200002c4 	.word	0x200002c4
 8001e80:	08010958 	.word	0x08010958

08001e84 <usart2Rx_Callback>:

// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001e88:	f007 ffc4 	bl	8009e14 <getRxData>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b01      	ldr	r3, [pc, #4]	; (8001e98 <usart2Rx_Callback+0x14>)
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000516 	.word	0x20000516

08001e9c <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <BasicTimer3_Callback+0x10>)
 8001ea2:	f005 fc60 	bl	8007766 <GPIOxTooglePin>
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000204 	.word	0x20000204

08001eb0 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <BasicTimer2_Callback+0x4c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <BasicTimer2_Callback+0x50>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <BasicTimer2_Callback+0x54>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d803      	bhi.n	8001ed0 <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <BasicTimer2_Callback+0x58>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e005      	b.n	8001edc <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <BasicTimer2_Callback+0x54>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <BasicTimer2_Callback+0x54>)
 8001eda:	801a      	strh	r2, [r3, #0]

	if (Mode_dir.Mode == sNone && !flag_Astar){
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <BasicTimer2_Callback+0x5c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d106      	bne.n	8001ef2 <BasicTimer2_Callback+0x42>
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <BasicTimer2_Callback+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <BasicTimer2_Callback+0x42>
		flag_NOP = SET;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <BasicTimer2_Callback+0x64>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
	}

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	2000105a 	.word	0x2000105a
 8001f00:	20000009 	.word	0x20000009
 8001f04:	20001068 	.word	0x20001068
 8001f08:	2000105b 	.word	0x2000105b
 8001f0c:	20001058 	.word	0x20001058
 8001f10:	20001062 	.word	0x20001062
 8001f14:	20001065 	.word	0x20001065

08001f18 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <callback_extInt1+0x24>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d005      	beq.n	8001f30 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <callback_extInt1+0x28>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	791a      	ldrb	r2, [r3, #4]
 8001f2a:	3201      	adds	r2, #1
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	711a      	strb	r2, [r3, #4]
	}
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20001058 	.word	0x20001058
 8001f40:	200003e0 	.word	0x200003e0

08001f44 <callback_extInt3>:

void callback_extInt3(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != sNone){
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <callback_extInt3+0x24>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d005      	beq.n	8001f5c <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <callback_extInt3+0x28>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	791a      	ldrb	r2, [r3, #4]
 8001f56:	3201      	adds	r2, #1
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	711a      	strb	r2, [r3, #4]
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20001058 	.word	0x20001058
 8001f6c:	200003e0 	.word	0x200003e0

08001f70 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001f7c:	23c8      	movs	r3, #200	; 0xc8
 8001f7e:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d061      	beq.n	8002060 <calibracionGyros+0xf0>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	dc70      	bgt.n	8002082 <calibracionGyros+0x112>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d015      	beq.n	8001fd0 <calibracionGyros+0x60>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d037      	beq.n	8002018 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001fa8:	e06b      	b.n	8002082 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f005 fd7c 	bl	8007aa8 <readGyro_X>
 8001fb0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001fc4:	7efb      	ldrb	r3, [r7, #27]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f003 ff44 	bl	8005e58 <delay_ms>
			while (contador < numMedidas){
 8001fd0:	7efb      	ldrb	r3, [r7, #27]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	8a7a      	ldrh	r2, [r7, #18]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d8e7      	bhi.n	8001faa <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001fda:	8a7b      	ldrh	r3, [r7, #18]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001ff0:	e048      	b.n	8002084 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f005 fde0 	bl	8007bb8 <readGyro_Y>
 8001ff8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001ffc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002000:	edd7 7a03 	vldr	s15, [r7, #12]
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800200c:	7efb      	ldrb	r3, [r7, #27]
 800200e:	3301      	adds	r3, #1
 8002010:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002012:	2001      	movs	r0, #1
 8002014:	f003 ff20 	bl	8005e58 <delay_ms>
			while (contador < numMedidas){
 8002018:	7efb      	ldrb	r3, [r7, #27]
 800201a:	b29b      	uxth	r3, r3
 800201c:	8a7a      	ldrh	r2, [r7, #18]
 800201e:	429a      	cmp	r2, r3
 8002020:	d8e7      	bhi.n	8001ff2 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8002022:	8a7b      	ldrh	r3, [r7, #18]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002038:	e024      	b.n	8002084 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f005 fe44 	bl	8007cc8 <readGyro_Z>
 8002040:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002044:	ed97 7a07 	vldr	s14, [r7, #28]
 8002048:	edd7 7a03 	vldr	s15, [r7, #12]
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002054:	7efb      	ldrb	r3, [r7, #27]
 8002056:	3301      	adds	r3, #1
 8002058:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800205a:	2001      	movs	r0, #1
 800205c:	f003 fefc 	bl	8005e58 <delay_ms>
			while (contador < numMedidas){
 8002060:	7efb      	ldrb	r3, [r7, #27]
 8002062:	b29b      	uxth	r3, r3
 8002064:	8a7a      	ldrh	r2, [r7, #18]
 8002066:	429a      	cmp	r2, r3
 8002068:	d8e7      	bhi.n	800203a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 800206a:	8a7b      	ldrh	r3, [r7, #18]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002074:	edd7 6a07 	vldr	s13, [r7, #28]
 8002078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002080:	e000      	b.n	8002084 <calibracionGyros+0x114>
			break;
 8002082:	bf00      	nop
		}
	}


	return promedio;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	ee07 3a90 	vmov	s15, r3
}
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6178      	str	r0, [r7, #20]
 800209c:	ed87 0a04 	vstr	s0, [r7, #16]
 80020a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80020a4:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f005 fe0e 	bl	8007cc8 <readGyro_Z>
 80020ac:	ee10 3a10 	vmov	r3, s0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa61 	bl	8000578 <__aeabi_f2d>
 80020b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ba:	f7fe f8fd 	bl	80002b8 <__aeabi_dsub>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fda7 	bl	8000c18 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80020ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80020d2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80020d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020da:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002140 <getAngle+0xac>
 80020de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	f7fe fa42 	bl	8000578 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <getAngle+0xb0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa38 	bl	8000578 <__aeabi_f2d>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f8d5 	bl	80002bc <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd7d 	bl	8000c18 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	4a08      	ldr	r2, [pc, #32]	; (8002144 <getAngle+0xb0>)
 8002122:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <getAngle+0xb4>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <getAngle+0xb8>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <getAngle+0xb8>)
 8002134:	801a      	strh	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	447a0000 	.word	0x447a0000
 8002144:	20001660 	.word	0x20001660
 8002148:	200002c4 	.word	0x200002c4
 800214c:	20001066 	.word	0x20001066

08002150 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8002150:	b580      	push	{r7, lr}
 8002152:	ed2d 8b02 	vpush	{d8}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8002160:	793b      	ldrb	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 81d4 	bne.w	8002510 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002168:	4bab      	ldr	r3, [pc, #684]	; (8002418 <get_measuremets_parameters+0x2c8>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4bab      	ldr	r3, [pc, #684]	; (800241c <get_measuremets_parameters+0x2cc>)
 8002170:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8002172:	4bab      	ldr	r3, [pc, #684]	; (8002420 <get_measuremets_parameters+0x2d0>)
 8002174:	edd3 6a00 	vldr	s13, [r3]
 8002178:	4baa      	ldr	r3, [pc, #680]	; (8002424 <get_measuremets_parameters+0x2d4>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002188:	4ba7      	ldr	r3, [pc, #668]	; (8002428 <get_measuremets_parameters+0x2d8>)
 800218a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800218e:	4ba6      	ldr	r3, [pc, #664]	; (8002428 <get_measuremets_parameters+0x2d8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9f0 	bl	8000578 <__aeabi_f2d>
 8002198:	a39b      	add	r3, pc, #620	; (adr r3, 8002408 <get_measuremets_parameters+0x2b8>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fa43 	bl	8000628 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b9f      	ldr	r3, [pc, #636]	; (800242c <get_measuremets_parameters+0x2dc>)
 80021b0:	f7fe fb64 	bl	800087c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <get_measuremets_parameters+0x2d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9d8 	bl	8000578 <__aeabi_f2d>
 80021c8:	a38f      	add	r3, pc, #572	; (adr r3, 8002408 <get_measuremets_parameters+0x2b8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa2b 	bl	8000628 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b93      	ldr	r3, [pc, #588]	; (800242c <get_measuremets_parameters+0x2dc>)
 80021e0:	f7fe fb4c 	bl	800087c <__aeabi_ddiv>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	ec43 2b17 	vmov	d7, r2, r3
 80021ec:	eeb0 0a47 	vmov.f32	s0, s14
 80021f0:	eef0 0a67 	vmov.f32	s1, s15
 80021f4:	f00b fd6c 	bl	800dcd0 <sin>
 80021f8:	eeb0 8a40 	vmov.f32	s16, s0
 80021fc:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002200:	4b87      	ldr	r3, [pc, #540]	; (8002420 <get_measuremets_parameters+0x2d0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f9b7 	bl	8000578 <__aeabi_f2d>
 800220a:	a37f      	add	r3, pc, #508	; (adr r3, 8002408 <get_measuremets_parameters+0x2b8>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f7fe fa0a 	bl	8000628 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b82      	ldr	r3, [pc, #520]	; (800242c <get_measuremets_parameters+0x2dc>)
 8002222:	f7fe fb2b 	bl	800087c <__aeabi_ddiv>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	ec43 2b17 	vmov	d7, r2, r3
 800222e:	eeb0 0a47 	vmov.f32	s0, s14
 8002232:	eef0 0a67 	vmov.f32	s1, s15
 8002236:	f00b fcaf 	bl	800db98 <cos>
 800223a:	eeb0 7a40 	vmov.f32	s14, s0
 800223e:	eef0 7a60 	vmov.f32	s15, s1
 8002242:	eeb0 1a47 	vmov.f32	s2, s14
 8002246:	eef0 1a67 	vmov.f32	s3, s15
 800224a:	eeb0 0a48 	vmov.f32	s0, s16
 800224e:	eef0 0a68 	vmov.f32	s1, s17
 8002252:	f00b fdc9 	bl	800dde8 <atan2>
 8002256:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800225a:	a36d      	add	r3, pc, #436	; (adr r3, 8002410 <get_measuremets_parameters+0x2c0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9e2 	bl	8000628 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002272:	f7fe f823 	bl	80002bc <__adddf3>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002286:	a360      	add	r3, pc, #384	; (adr r3, 8002408 <get_measuremets_parameters+0x2b8>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fe f9cc 	bl	8000628 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <get_measuremets_parameters+0x2dc>)
 800229e:	f7fe faed 	bl	800087c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	ec43 2b17 	vmov	d7, r2, r3
 80022aa:	eeb0 0a47 	vmov.f32	s0, s14
 80022ae:	eef0 0a67 	vmov.f32	s1, s15
 80022b2:	f00b fd0d 	bl	800dcd0 <sin>
 80022b6:	eeb0 8a40 	vmov.f32	s16, s0
 80022ba:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80022c4:	a350      	add	r3, pc, #320	; (adr r3, 8002408 <get_measuremets_parameters+0x2b8>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f9ad 	bl	8000628 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b54      	ldr	r3, [pc, #336]	; (800242c <get_measuremets_parameters+0x2dc>)
 80022dc:	f7fe face 	bl	800087c <__aeabi_ddiv>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	ec43 2b17 	vmov	d7, r2, r3
 80022e8:	eeb0 0a47 	vmov.f32	s0, s14
 80022ec:	eef0 0a67 	vmov.f32	s1, s15
 80022f0:	f00b fc52 	bl	800db98 <cos>
 80022f4:	eeb0 7a40 	vmov.f32	s14, s0
 80022f8:	eef0 7a60 	vmov.f32	s15, s1
 80022fc:	eeb0 1a47 	vmov.f32	s2, s14
 8002300:	eef0 1a67 	vmov.f32	s3, s15
 8002304:	eeb0 0a48 	vmov.f32	s0, s16
 8002308:	eef0 0a68 	vmov.f32	s1, s17
 800230c:	f00b fd6c 	bl	800dde8 <atan2>
 8002310:	eeb0 7a40 	vmov.f32	s14, s0
 8002314:	eef0 7a60 	vmov.f32	s15, s1
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	ed93 7b02 	vldr	d7, [r3, #8]
 8002324:	eeb0 0a47 	vmov.f32	s0, s14
 8002328:	eef0 0a67 	vmov.f32	s1, s15
 800232c:	f00b fcd0 	bl	800dcd0 <sin>
 8002330:	eeb0 8a40 	vmov.f32	s16, s0
 8002334:	eef0 8a60 	vmov.f32	s17, s1
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	ed93 7b02 	vldr	d7, [r3, #8]
 800233e:	eeb0 0a47 	vmov.f32	s0, s14
 8002342:	eef0 0a67 	vmov.f32	s1, s15
 8002346:	f00b fc27 	bl	800db98 <cos>
 800234a:	eeb0 7a40 	vmov.f32	s14, s0
 800234e:	eef0 7a60 	vmov.f32	s15, s1
 8002352:	eeb0 1a47 	vmov.f32	s2, s14
 8002356:	eef0 1a67 	vmov.f32	s3, s15
 800235a:	eeb0 0a48 	vmov.f32	s0, s16
 800235e:	eef0 0a68 	vmov.f32	s1, s17
 8002362:	f00b fd41 	bl	800dde8 <atan2>
 8002366:	eeb0 7a40 	vmov.f32	s14, s0
 800236a:	eef0 7a60 	vmov.f32	s15, s1
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8002374:	797b      	ldrb	r3, [r7, #5]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d15e      	bne.n	8002438 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <get_measuremets_parameters+0x2e0>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	791b      	ldrb	r3, [r3, #4]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <get_measuremets_parameters+0x2e4>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <get_measuremets_parameters+0x2cc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023da:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <get_measuremets_parameters+0x2cc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3304      	adds	r3, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8002402:	e065      	b.n	80024d0 <get_measuremets_parameters+0x380>
 8002404:	f3af 8000 	nop.w
 8002408:	54442d18 	.word	0x54442d18
 800240c:	400921fb 	.word	0x400921fb
 8002410:	1a63c1f8 	.word	0x1a63c1f8
 8002414:	404ca5dc 	.word	0x404ca5dc
 8002418:	20001066 	.word	0x20001066
 800241c:	2000106c 	.word	0x2000106c
 8002420:	20001660 	.word	0x20001660
 8002424:	20001068 	.word	0x20001068
 8002428:	20001664 	.word	0x20001664
 800242c:	40668000 	.word	0x40668000
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000010 	.word	0x20000010

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	791b      	ldrb	r3, [r3, #4]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <get_measuremets_parameters+0x3a8>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	eef1 7a67 	vneg.f32	s15, s15
 8002458:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3304      	adds	r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <get_measuremets_parameters+0x3ac>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3304      	adds	r3, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	eef1 7a67 	vneg.f32	s15, s15
 8002480:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	edd3 7a03 	vldr	s15, [r3, #12]
 800248c:	eef1 6a67 	vneg.f32	s13, s15
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <get_measuremets_parameters+0x3b0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a4:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3304      	adds	r3, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80024b2:	eef1 6a67 	vneg.f32	s13, s15
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <get_measuremets_parameters+0x3b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3304      	adds	r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024cc:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <get_measuremets_parameters+0x3b4>)
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <get_measuremets_parameters+0x3b8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <get_measuremets_parameters+0x3bc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	801a      	strh	r2, [r3, #0]
		//Reiniciamos el contador de acción
		counting_action  = 0;

	}

}
 80024f6:	e2f0      	b.n	8002ada <get_measuremets_parameters+0x98a>
 80024f8:	2000000c 	.word	0x2000000c
 80024fc:	20000010 	.word	0x20000010
 8002500:	2000106c 	.word	0x2000106c
 8002504:	20001660 	.word	0x20001660
 8002508:	20001066 	.word	0x20001066
 800250c:	20001068 	.word	0x20001068
	else if(operation_mode_dir.Mode == sRoll)
 8002510:	793b      	ldrb	r3, [r7, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 81c8 	bne.w	80028a8 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002518:	4bad      	ldr	r3, [pc, #692]	; (80027d0 <get_measuremets_parameters+0x680>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4bad      	ldr	r3, [pc, #692]	; (80027d4 <get_measuremets_parameters+0x684>)
 8002520:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8002522:	4bad      	ldr	r3, [pc, #692]	; (80027d8 <get_measuremets_parameters+0x688>)
 8002524:	edd3 6a00 	vldr	s13, [r3]
 8002528:	4bac      	ldr	r3, [pc, #688]	; (80027dc <get_measuremets_parameters+0x68c>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002538:	4ba9      	ldr	r3, [pc, #676]	; (80027e0 <get_measuremets_parameters+0x690>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800253e:	4ba8      	ldr	r3, [pc, #672]	; (80027e0 <get_measuremets_parameters+0x690>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f818 	bl	8000578 <__aeabi_f2d>
 8002548:	a39d      	add	r3, pc, #628	; (adr r3, 80027c0 <get_measuremets_parameters+0x670>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f86b 	bl	8000628 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4ba1      	ldr	r3, [pc, #644]	; (80027e4 <get_measuremets_parameters+0x694>)
 8002560:	f7fe f98c 	bl	800087c <__aeabi_ddiv>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800256e:	4b9a      	ldr	r3, [pc, #616]	; (80027d8 <get_measuremets_parameters+0x688>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f800 	bl	8000578 <__aeabi_f2d>
 8002578:	a391      	add	r3, pc, #580	; (adr r3, 80027c0 <get_measuremets_parameters+0x670>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fe f853 	bl	8000628 <__aeabi_dmul>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	4b95      	ldr	r3, [pc, #596]	; (80027e4 <get_measuremets_parameters+0x694>)
 8002590:	f7fe f974 	bl	800087c <__aeabi_ddiv>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	ec43 2b17 	vmov	d7, r2, r3
 800259c:	eeb0 0a47 	vmov.f32	s0, s14
 80025a0:	eef0 0a67 	vmov.f32	s1, s15
 80025a4:	f00b fb94 	bl	800dcd0 <sin>
 80025a8:	eeb0 8a40 	vmov.f32	s16, s0
 80025ac:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80025b0:	4b89      	ldr	r3, [pc, #548]	; (80027d8 <get_measuremets_parameters+0x688>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffdf 	bl	8000578 <__aeabi_f2d>
 80025ba:	a381      	add	r3, pc, #516	; (adr r3, 80027c0 <get_measuremets_parameters+0x670>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f832 	bl	8000628 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	4b84      	ldr	r3, [pc, #528]	; (80027e4 <get_measuremets_parameters+0x694>)
 80025d2:	f7fe f953 	bl	800087c <__aeabi_ddiv>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	ec43 2b17 	vmov	d7, r2, r3
 80025de:	eeb0 0a47 	vmov.f32	s0, s14
 80025e2:	eef0 0a67 	vmov.f32	s1, s15
 80025e6:	f00b fad7 	bl	800db98 <cos>
 80025ea:	eeb0 7a40 	vmov.f32	s14, s0
 80025ee:	eef0 7a60 	vmov.f32	s15, s1
 80025f2:	eeb0 1a47 	vmov.f32	s2, s14
 80025f6:	eef0 1a67 	vmov.f32	s3, s15
 80025fa:	eeb0 0a48 	vmov.f32	s0, s16
 80025fe:	eef0 0a68 	vmov.f32	s1, s17
 8002602:	f00b fbf1 	bl	800dde8 <atan2>
 8002606:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800260a:	a36f      	add	r3, pc, #444	; (adr r3, 80027c8 <get_measuremets_parameters+0x678>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe f80a 	bl	8000628 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002622:	f7fd fe4b 	bl	80002bc <__adddf3>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002636:	a362      	add	r3, pc, #392	; (adr r3, 80027c0 <get_measuremets_parameters+0x670>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd fff4 	bl	8000628 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <get_measuremets_parameters+0x694>)
 800264e:	f7fe f915 	bl	800087c <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	ec43 2b17 	vmov	d7, r2, r3
 800265a:	eeb0 0a47 	vmov.f32	s0, s14
 800265e:	eef0 0a67 	vmov.f32	s1, s15
 8002662:	f00b fb35 	bl	800dcd0 <sin>
 8002666:	eeb0 8a40 	vmov.f32	s16, s0
 800266a:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002674:	a352      	add	r3, pc, #328	; (adr r3, 80027c0 <get_measuremets_parameters+0x670>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd ffd5 	bl	8000628 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <get_measuremets_parameters+0x694>)
 800268c:	f7fe f8f6 	bl	800087c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	ec43 2b17 	vmov	d7, r2, r3
 8002698:	eeb0 0a47 	vmov.f32	s0, s14
 800269c:	eef0 0a67 	vmov.f32	s1, s15
 80026a0:	f00b fa7a 	bl	800db98 <cos>
 80026a4:	eeb0 7a40 	vmov.f32	s14, s0
 80026a8:	eef0 7a60 	vmov.f32	s15, s1
 80026ac:	eeb0 1a47 	vmov.f32	s2, s14
 80026b0:	eef0 1a67 	vmov.f32	s3, s15
 80026b4:	eeb0 0a48 	vmov.f32	s0, s16
 80026b8:	eef0 0a68 	vmov.f32	s1, s17
 80026bc:	f00b fb94 	bl	800dde8 <atan2>
 80026c0:	eeb0 7a40 	vmov.f32	s14, s0
 80026c4:	eef0 7a60 	vmov.f32	s15, s1
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80026d4:	eeb0 0a47 	vmov.f32	s0, s14
 80026d8:	eef0 0a67 	vmov.f32	s1, s15
 80026dc:	f00b faf8 	bl	800dcd0 <sin>
 80026e0:	eeb0 8a40 	vmov.f32	s16, s0
 80026e4:	eef0 8a60 	vmov.f32	s17, s1
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80026ee:	eeb0 0a47 	vmov.f32	s0, s14
 80026f2:	eef0 0a67 	vmov.f32	s1, s15
 80026f6:	f00b fa4f 	bl	800db98 <cos>
 80026fa:	eeb0 7a40 	vmov.f32	s14, s0
 80026fe:	eef0 7a60 	vmov.f32	s15, s1
 8002702:	eeb0 1a47 	vmov.f32	s2, s14
 8002706:	eef0 1a67 	vmov.f32	s3, s15
 800270a:	eeb0 0a48 	vmov.f32	s0, s16
 800270e:	eef0 0a68 	vmov.f32	s1, s17
 8002712:	f00b fb69 	bl	800dde8 <atan2>
 8002716:	eeb0 7a40 	vmov.f32	s14, s0
 800271a:	eef0 7a60 	vmov.f32	s15, s1
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 8002724:	797b      	ldrb	r3, [r7, #5]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d162      	bne.n	80027f0 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	791b      	ldrb	r3, [r3, #4]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <get_measuremets_parameters+0x698>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <get_measuremets_parameters+0x69c>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	eef1 7a67 	vneg.f32	s15, s15
 800276e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	edd3 6a03 	vldr	s13, [r3, #12]
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <get_measuremets_parameters+0x684>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278e:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3304      	adds	r3, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	edd3 7a03 	vldr	s15, [r3, #12]
 800279c:	eef1 6a67 	vneg.f32	s13, s15
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <get_measuremets_parameters+0x684>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3304      	adds	r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80027ba:	e061      	b.n	8002880 <get_measuremets_parameters+0x730>
 80027bc:	f3af 8000 	nop.w
 80027c0:	54442d18 	.word	0x54442d18
 80027c4:	400921fb 	.word	0x400921fb
 80027c8:	1a63c1f8 	.word	0x1a63c1f8
 80027cc:	404ca5dc 	.word	0x404ca5dc
 80027d0:	20001066 	.word	0x20001066
 80027d4:	2000106c 	.word	0x2000106c
 80027d8:	20001660 	.word	0x20001660
 80027dc:	20001068 	.word	0x20001068
 80027e0:	20001664 	.word	0x20001664
 80027e4:	40668000 	.word	0x40668000
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	20000010 	.word	0x20000010
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fe:	4bbe      	ldr	r3, [pc, #760]	; (8002af8 <get_measuremets_parameters+0x9a8>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	eef1 7a67 	vneg.f32	s15, s15
 8002810:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3304      	adds	r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002824:	4bb5      	ldr	r3, [pc, #724]	; (8002afc <get_measuremets_parameters+0x9ac>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3304      	adds	r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002834:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002840:	eef1 6a67 	vneg.f32	s13, s15
 8002844:	4bae      	ldr	r3, [pc, #696]	; (8002b00 <get_measuremets_parameters+0x9b0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002858:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	edd3 6a03 	vldr	s13, [r3, #12]
 8002866:	4ba6      	ldr	r3, [pc, #664]	; (8002b00 <get_measuremets_parameters+0x9b0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800287c:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3304      	adds	r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 8002892:	4b9c      	ldr	r3, [pc, #624]	; (8002b04 <get_measuremets_parameters+0x9b4>)
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 800289a:	4b9b      	ldr	r3, [pc, #620]	; (8002b08 <get_measuremets_parameters+0x9b8>)
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 80028a0:	4b9a      	ldr	r3, [pc, #616]	; (8002b0c <get_measuremets_parameters+0x9bc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]
}
 80028a6:	e118      	b.n	8002ada <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 80028a8:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <get_measuremets_parameters+0x9b8>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b94      	ldr	r3, [pc, #592]	; (8002b00 <get_measuremets_parameters+0x9b0>)
 80028b0:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 80028b2:	4b94      	ldr	r3, [pc, #592]	; (8002b04 <get_measuremets_parameters+0x9b4>)
 80028b4:	edd3 6a00 	vldr	s13, [r3]
 80028b8:	4b94      	ldr	r3, [pc, #592]	; (8002b0c <get_measuremets_parameters+0x9bc>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c8:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <get_measuremets_parameters+0x9c0>)
 80028ca:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80028ce:	4b90      	ldr	r3, [pc, #576]	; (8002b10 <get_measuremets_parameters+0x9c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe50 	bl	8000578 <__aeabi_f2d>
 80028d8:	a383      	add	r3, pc, #524	; (adr r3, 8002ae8 <get_measuremets_parameters+0x998>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fd fea3 	bl	8000628 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <get_measuremets_parameters+0x9c4>)
 80028f0:	f7fd ffc4 	bl	800087c <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80028fe:	4b81      	ldr	r3, [pc, #516]	; (8002b04 <get_measuremets_parameters+0x9b4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe38 	bl	8000578 <__aeabi_f2d>
 8002908:	a377      	add	r3, pc, #476	; (adr r3, 8002ae8 <get_measuremets_parameters+0x998>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd fe8b 	bl	8000628 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <get_measuremets_parameters+0x9c4>)
 8002920:	f7fd ffac 	bl	800087c <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b17 	vmov	d7, r2, r3
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f00b f9cc 	bl	800dcd0 <sin>
 8002938:	eeb0 8a40 	vmov.f32	s16, s0
 800293c:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002940:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <get_measuremets_parameters+0x9b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fe17 	bl	8000578 <__aeabi_f2d>
 800294a:	a367      	add	r3, pc, #412	; (adr r3, 8002ae8 <get_measuremets_parameters+0x998>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fe6a 	bl	8000628 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <get_measuremets_parameters+0x9c4>)
 8002962:	f7fd ff8b 	bl	800087c <__aeabi_ddiv>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ec43 2b17 	vmov	d7, r2, r3
 800296e:	eeb0 0a47 	vmov.f32	s0, s14
 8002972:	eef0 0a67 	vmov.f32	s1, s15
 8002976:	f00b f90f 	bl	800db98 <cos>
 800297a:	eeb0 7a40 	vmov.f32	s14, s0
 800297e:	eef0 7a60 	vmov.f32	s15, s1
 8002982:	eeb0 1a47 	vmov.f32	s2, s14
 8002986:	eef0 1a67 	vmov.f32	s3, s15
 800298a:	eeb0 0a48 	vmov.f32	s0, s16
 800298e:	eef0 0a68 	vmov.f32	s1, s17
 8002992:	f00b fa29 	bl	800dde8 <atan2>
 8002996:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800299a:	a355      	add	r3, pc, #340	; (adr r3, 8002af0 <get_measuremets_parameters+0x9a0>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fe42 	bl	8000628 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029b2:	f7fd fc83 	bl	80002bc <__adddf3>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029c6:	a348      	add	r3, pc, #288	; (adr r3, 8002ae8 <get_measuremets_parameters+0x998>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe2c 	bl	8000628 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <get_measuremets_parameters+0x9c4>)
 80029de:	f7fd ff4d 	bl	800087c <__aeabi_ddiv>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	ec43 2b17 	vmov	d7, r2, r3
 80029ea:	eeb0 0a47 	vmov.f32	s0, s14
 80029ee:	eef0 0a67 	vmov.f32	s1, s15
 80029f2:	f00b f96d 	bl	800dcd0 <sin>
 80029f6:	eeb0 8a40 	vmov.f32	s16, s0
 80029fa:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a04:	a338      	add	r3, pc, #224	; (adr r3, 8002ae8 <get_measuremets_parameters+0x998>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fe0d 	bl	8000628 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <get_measuremets_parameters+0x9c4>)
 8002a1c:	f7fd ff2e 	bl	800087c <__aeabi_ddiv>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	ec43 2b17 	vmov	d7, r2, r3
 8002a28:	eeb0 0a47 	vmov.f32	s0, s14
 8002a2c:	eef0 0a67 	vmov.f32	s1, s15
 8002a30:	f00b f8b2 	bl	800db98 <cos>
 8002a34:	eeb0 7a40 	vmov.f32	s14, s0
 8002a38:	eef0 7a60 	vmov.f32	s15, s1
 8002a3c:	eeb0 1a47 	vmov.f32	s2, s14
 8002a40:	eef0 1a67 	vmov.f32	s3, s15
 8002a44:	eeb0 0a48 	vmov.f32	s0, s16
 8002a48:	eef0 0a68 	vmov.f32	s1, s17
 8002a4c:	f00b f9cc 	bl	800dde8 <atan2>
 8002a50:	eeb0 7a40 	vmov.f32	s14, s0
 8002a54:	eef0 7a60 	vmov.f32	s15, s1
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a64:	eeb0 0a47 	vmov.f32	s0, s14
 8002a68:	eef0 0a67 	vmov.f32	s1, s15
 8002a6c:	f00b f930 	bl	800dcd0 <sin>
 8002a70:	eeb0 8a40 	vmov.f32	s16, s0
 8002a74:	eef0 8a60 	vmov.f32	s17, s1
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a82:	eef0 0a67 	vmov.f32	s1, s15
 8002a86:	f00b f887 	bl	800db98 <cos>
 8002a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a8e:	eef0 7a60 	vmov.f32	s15, s1
 8002a92:	eeb0 1a47 	vmov.f32	s2, s14
 8002a96:	eef0 1a67 	vmov.f32	s3, s15
 8002a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8002a9e:	eef0 0a68 	vmov.f32	s1, s17
 8002aa2:	f00b f9a1 	bl	800dde8 <atan2>
 8002aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8002aaa:	eef0 7a60 	vmov.f32	s15, s1
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <get_measuremets_parameters+0x9b4>)
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <get_measuremets_parameters+0x9b8>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <get_measuremets_parameters+0x9bc>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	ecbd 8b02 	vpop	{d8}
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	54442d18 	.word	0x54442d18
 8002aec:	400921fb 	.word	0x400921fb
 8002af0:	1a63c1f8 	.word	0x1a63c1f8
 8002af4:	404ca5dc 	.word	0x404ca5dc
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20000010 	.word	0x20000010
 8002b00:	2000106c 	.word	0x2000106c
 8002b04:	20001660 	.word	0x20001660
 8002b08:	20001066 	.word	0x20001066
 8002b0c:	20001068 	.word	0x20001068
 8002b10:	20001664 	.word	0x20001664
 8002b14:	40668000 	.word	0x40668000

08002b18 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 8002b22:	783b      	ldrb	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d120      	bne.n	8002b6a <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f844 	bl	8002bb8 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fdda 	bl	80086f0 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fdc2 	bl	80076ce <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	4618      	mov	r0, r3
 8002b54:	f005 fdcc 	bl	80086f0 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fdb3 	bl	80076ce <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002b68:	e022      	b.n	8002bb0 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 8002b6a:	783b      	ldrb	r3, [r7, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d11f      	bne.n	8002bb0 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f820 	bl	8002bb8 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 fdb6 	bl	80086f0 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fd9e 	bl	80076ce <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 fda8 	bl	80086f0 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fd8f 	bl	80076ce <GPIO_WritePin_Afopt>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 8002bc2:	783b      	ldrb	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d143      	bne.n	8002c50 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	7f1a      	ldrb	r2, [r3, #28]
 8002bce:	787b      	ldrb	r3, [r7, #1]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d018      	beq.n	8002c06 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	787a      	ldrb	r2, [r7, #1]
 8002bda:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	7f1b      	ldrb	r3, [r3, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f004 fd6a 	bl	80076ce <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	4618      	mov	r0, r3
 8002c02:	f006 f935 	bl	8008e70 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	7f1a      	ldrb	r2, [r3, #28]
 8002c0e:	787b      	ldrb	r3, [r7, #1]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d068      	beq.n	8002ce6 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	787a      	ldrb	r2, [r7, #1]
 8002c1c:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	7f1b      	ldrb	r3, [r3, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f004 fd47 	bl	80076ce <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f006 f911 	bl	8008e70 <PWMx_Toggle>
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
			}
			// Puede que no analice ningun if y simplemente no haga nada
	}
}
 8002c4e:	e04a      	b.n	8002ce6 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 8002c50:	783b      	ldrb	r3, [r7, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d147      	bne.n	8002ce6 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	7f1a      	ldrb	r2, [r3, #28]
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11d      	bne.n	8002c9e <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002c62:	787b      	ldrb	r3, [r7, #1]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f004 fd1e 	bl	80076ce <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f006 f8e9 	bl	8008e70 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	7f1a      	ldrb	r2, [r3, #28]
 8002ca6:	787b      	ldrb	r3, [r7, #1]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d01c      	beq.n	8002ce6 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	787a      	ldrb	r2, [r7, #1]
 8002cb4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f004 fcfb 	bl	80076ce <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f006 f8c5 	bl	8008e70 <PWMx_Toggle>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002cf8:	783b      	ldrb	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d161      	bne.n	8002dc2 <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 fce1 	bl	80076ce <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fcd9 	bl	80076ce <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	7f1a      	ldrb	r2, [r3, #28]
 8002d22:	787b      	ldrb	r3, [r7, #1]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d018      	beq.n	8002d5a <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	787a      	ldrb	r2, [r7, #1]
 8002d2e:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	7f1b      	ldrb	r3, [r3, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f004 fcc0 	bl	80076ce <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	4618      	mov	r0, r3
 8002d56:	f006 f88b 	bl	8008e70 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	7f1a      	ldrb	r2, [r3, #28]
 8002d62:	787b      	ldrb	r3, [r7, #1]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d01c      	beq.n	8002da2 <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	787a      	ldrb	r2, [r7, #1]
 8002d70:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f004 fc9d 	bl	80076ce <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f006 f867 	bl	8008e70 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 fc8f 	bl	80076ce <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 fc87 	bl	80076ce <GPIO_WritePin_Afopt>

			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
	}
}
 8002dc0:	e068      	b.n	8002e94 <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 8002dc2:	783b      	ldrb	r3, [r7, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d165      	bne.n	8002e94 <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fc7c 	bl	80076ce <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fc74 	bl	80076ce <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	7f1a      	ldrb	r2, [r3, #28]
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11d      	bne.n	8002e2e <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 8002df2:	787b      	ldrb	r3, [r7, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	7f1b      	ldrb	r3, [r3, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f004 fc56 	bl	80076ce <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f006 f821 	bl	8008e70 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	7f1a      	ldrb	r2, [r3, #28]
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d01c      	beq.n	8002e76 <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	787a      	ldrb	r2, [r7, #1]
 8002e44:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	7f1b      	ldrb	r3, [r3, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f004 fc33 	bl	80076ce <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 fffd 	bl	8008e70 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fc25 	bl	80076ce <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fc1d 	bl	80076ce <GPIO_WritePin_Afopt>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 ffa0 	bl	8008df0 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fc08 	bl	80076ce <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 ff92 	bl	8008df0 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 fbf9 	bl	80076ce <GPIO_WritePin_Afopt>


}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a85      	ldr	r2, [pc, #532]	; (800310c <int_Config_Motor+0x228>)
 8002ef6:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a84      	ldr	r2, [pc, #528]	; (8003110 <int_Config_Motor+0x22c>)
 8002efe:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a83      	ldr	r2, [pc, #524]	; (8003114 <int_Config_Motor+0x230>)
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a82      	ldr	r2, [pc, #520]	; (8003118 <int_Config_Motor+0x234>)
 8002f0e:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM    = &handlerPWM_1;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a81      	ldr	r2, [pc, #516]	; (800311c <int_Config_Motor+0x238>)
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a74      	ldr	r2, [pc, #464]	; (8003120 <int_Config_Motor+0x23c>)
 8002f50:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6f      	ldr	r2, [pc, #444]	; (8003124 <int_Config_Motor+0x240>)
 8002f66:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	; (8003128 <int_Config_Motor+0x244>)
 8002f6e:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a66      	ldr	r2, [pc, #408]	; (8003110 <int_Config_Motor+0x22c>)
 8002f78:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	; (800312c <int_Config_Motor+0x248>)
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a69      	ldr	r2, [pc, #420]	; (8003130 <int_Config_Motor+0x24c>)
 8002f8c:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3304      	adds	r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a67      	ldr	r2, [pc, #412]	; (8003134 <int_Config_Motor+0x250>)
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <int_Config_Motor+0x23c>)
 8002fda:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3304      	adds	r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4c      	ldr	r2, [pc, #304]	; (8003124 <int_Config_Motor+0x240>)
 8002ff4:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800301c:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4a45      	ldr	r2, [pc, #276]	; (8003138 <int_Config_Motor+0x254>)
 8003022:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4a45      	ldr	r2, [pc, #276]	; (800313c <int_Config_Motor+0x258>)
 8003028:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50



	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = sNone;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2202      	movs	r2, #2
 80030fe:	701a      	strb	r2, [r3, #0]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	200003e8 	.word	0x200003e8
 8003110:	41e00000 	.word	0x41e00000
 8003114:	2000024c 	.word	0x2000024c
 8003118:	20000264 	.word	0x20000264
 800311c:	200002f0 	.word	0x200002f0
 8003120:	437a0000 	.word	0x437a0000
 8003124:	42c80000 	.word	0x42c80000
 8003128:	20000414 	.word	0x20000414
 800312c:	20000240 	.word	0x20000240
 8003130:	20000258 	.word	0x20000258
 8003134:	20000310 	.word	0x20000310
 8003138:	3dcccccd 	.word	0x3dcccccd
 800313c:	3f4ccccd 	.word	0x3f4ccccd

08003140 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 800314e:	4b6f      	ldr	r3, [pc, #444]	; (800330c <PID_control+0x1cc>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4a6f      	ldr	r2, [pc, #444]	; (8003310 <PID_control+0x1d0>)
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003162:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003314 <PID_control+0x1d4>
 8003166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800316a:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800317a:	eeb0 1a46 	vmov.f32	s2, s12
 800317e:	eef0 1a66 	vmov.f32	s3, s13
 8003182:	eeb0 0a47 	vmov.f32	s0, s14
 8003186:	eef0 0a67 	vmov.f32	s1, s15
 800318a:	68b8      	ldr	r0, [r7, #8]
 800318c:	f005 f818 	bl	80081c0 <distance_to_straight_line>
 8003190:	ec51 0b10 	vmov	r0, r1, d0
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <PID_control+0x1d8>)
 800319a:	f7fd fb6f 	bl	800087c <__aeabi_ddiv>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fd37 	bl	8000c18 <__aeabi_d2f>
 80031aa:	4603      	mov	r3, r0
 80031ac:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 80031ae:	ed97 1a04 	vldr	s2, [r7, #16]
 80031b2:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800331c <PID_control+0x1dc>
 80031b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f000 f8bc 	bl	8003338 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <PID_control+0x1e0>)
 80031c2:	ed93 7a00 	vldr	s14, [r3]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	4b54      	ldr	r3, [pc, #336]	; (8003324 <PID_control+0x1e4>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	ed93 7a00 	vldr	s14, [r3]
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <PID_control+0x1e0>)
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	4b50      	ldr	r3, [pc, #320]	; (8003328 <PID_control+0x1e8>)
 80031e8:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <PID_control+0x1e4>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003200:	eeb0 1a47 	vmov.f32	s2, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	ed97 0a05 	vldr	s0, [r7, #20]
 800320c:	4610      	mov	r0, r2
 800320e:	f000 f893 	bl	8003338 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b43      	ldr	r3, [pc, #268]	; (8003328 <PID_control+0x1e8>)
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3304      	adds	r3, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	ed93 7a02 	vldr	s14, [r3, #8]
 800322a:	eeb0 1a47 	vmov.f32	s2, s14
 800322e:	eef0 0a67 	vmov.f32	s1, s15
 8003232:	ed97 0a05 	vldr	s0, [r7, #20]
 8003236:	4610      	mov	r0, r2
 8003238:	f000 f87e 	bl	8003338 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	ed93 7a05 	vldr	s14, [r3, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003256:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3304      	adds	r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	ed93 7a05 	vldr	s14, [r3, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3304      	adds	r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	edd3 7a05 	vldr	s15, [r3, #20]
 8003286:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800332c <PID_control+0x1ec>
 800328a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	db04      	blt.n	800329e <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <PID_control+0x1f0>)
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	e00e      	b.n	80032bc <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80032a6:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80032aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b2:	d803      	bhi.n	80032bc <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <PID_control+0x1f4>)
 80032ba:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3304      	adds	r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80032c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800332c <PID_control+0x1ec>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	db05      	blt.n	80032e0 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3304      	adds	r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <PID_control+0x1f0>)
 80032dc:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 80032de:	e011      	b.n	8003304 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80032ea:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	d900      	bls.n	80032fa <PID_control+0x1ba>
}
 80032f8:	e004      	b.n	8003304 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3304      	adds	r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <PID_control+0x1f4>)
 8003302:	615a      	str	r2, [r3, #20]
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200002c4 	.word	0x200002c4
 8003310:	20000009 	.word	0x20000009
 8003314:	447a0000 	.word	0x447a0000
 8003318:	408f4000 	.word	0x408f4000
 800331c:	00000000 	.word	0x00000000
 8003320:	20001668 	.word	0x20001668
 8003324:	20001670 	.word	0x20001670
 8003328:	20001674 	.word	0x20001674
 800332c:	42700000 	.word	0x42700000
 8003330:	42700000 	.word	0x42700000
 8003334:	41b80000 	.word	0x41b80000

08003338 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	ed87 0a02 	vstr	s0, [r7, #8]
 8003344:	edc7 0a01 	vstr	s1, [r7, #4]
 8003348:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 800334c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003350:	edd7 7a00 	vldr	s15, [r7]
 8003354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	ed93 7a04 	vldr	s14, [r3, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	edd3 7a01 	vldr	s15, [r3, #4]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	ed93 7a02 	vldr	s14, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	edd3 6a01 	vldr	s13, [r3, #4]
 800337e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	ed93 7a05 	vldr	s14, [r3, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	edd3 7a02 	vldr	s15, [r3, #8]
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80033b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80033be:	ed97 7a02 	vldr	s14, [r7, #8]
 80033c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c6:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 80033ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80033ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80033d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	60da      	str	r2, [r3, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3724      	adds	r7, #36	; 0x24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6178      	str	r0, [r7, #20]
 8003400:	6139      	str	r1, [r7, #16]
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	ed97 1b00 	vldr	d1, [r7]
 8003418:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003540 <go+0x148>
 800341c:	6938      	ldr	r0, [r7, #16]
 800341e:	f7fe fe39 	bl	8002094 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler,operation_mode_dir );
 8003430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7fe fe8b 	bl	8002150 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d073      	beq.n	8003536 <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3304      	adds	r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	ed93 7a03 	vldr	s14, [r3, #12]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003468:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800346c:	ee16 0a90 	vmov	r0, s13
 8003470:	f7fd f882 	bl	8000578 <__aeabi_f2d>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003482:	eeb0 0a47 	vmov.f32	s0, s14
 8003486:	eef0 0a67 	vmov.f32	s1, s15
 800348a:	f00a fb85 	bl	800db98 <cos>
 800348e:	ec51 0b10 	vmov	r0, r1, d0
 8003492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003496:	f7fd f8c7 	bl	8000628 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80034aa:	eeb0 0a47 	vmov.f32	s0, s14
 80034ae:	eef0 0a67 	vmov.f32	s1, s15
 80034b2:	f00a fc0d 	bl	800dcd0 <sin>
 80034b6:	ec51 0b10 	vmov	r0, r1, d0
 80034ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034be:	f7fd f8b3 	bl	8000628 <__aeabi_dmul>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034d8:	f7fc fef0 	bl	80002bc <__adddf3>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80034f2:	f7fc fee3 	bl	80002bc <__adddf3>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800350c:	e9cd 2300 	strd	r2, r3, [sp]
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	490b      	ldr	r1, [pc, #44]	; (8003544 <go+0x14c>)
 8003516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003518:	f007 fd00 	bl	800af1c <siprintf>

		writeMsg(&handlerUSART, buff);
 800351c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351e:	480a      	ldr	r0, [pc, #40]	; (8003548 <go+0x150>)
 8003520:	f006 fc50 	bl	8009dc4 <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff fe08 	bl	8003140 <PID_control>

		*fcontrol = RESET;
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
	}
}
 8003536:	bf00      	nop
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00000000 	.word	0x00000000
 8003544:	08010990 	.word	0x08010990
 8003548:	20000330 	.word	0x20000330

0800354c <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6178      	str	r0, [r7, #20]
 8003554:	6139      	str	r1, [r7, #16]
 8003556:	60fa      	str	r2, [r7, #12]
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	ed97 1b00 	vldr	d1, [r7]
 800356c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800359c <NOP+0x50>
 8003570:	6938      	ldr	r0, [r7, #16]
 8003572:	f7fe fd8f 	bl	8002094 <getAngle>
//
//		}else{counter++;}


		// bajamos la bandera
		*fAnglulo = RESET;
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f7fe fde1 	bl	8002150 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
	}

}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00000000 	.word	0x00000000

080035a0 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b09e      	sub	sp, #120	; 0x78
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	ed87 0b06 	vstr	d0, [r7, #24]
 80035aa:	6139      	str	r1, [r7, #16]
 80035ac:	60fa      	str	r2, [r7, #12]
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double finishline_y = 0;
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9c1 2300 	strd	r2, r3, [r1]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 808e 	bne.w	8003724 <create_square_operations+0x184>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8003608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800360c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3310      	adds	r3, #16
 8003614:	4618      	mov	r0, r3
 8003616:	eeb0 0a47 	vmov.f32	s0, s14
 800361a:	eef0 0a67 	vmov.f32	s1, s15
 800361e:	f004 ff49 	bl	80084b4 <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 8003622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003626:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003648:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 800364a:	ed97 7b00 	vldr	d7, [r7]
 800364e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 800365e:	69bc      	ldr	r4, [r7, #24]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 8003666:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4; i++){
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003688:	e035      	b.n	80036f6 <create_square_operations+0x156>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 800368a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	3370      	adds	r3, #112	; 0x70
 8003692:	f107 0208 	add.w	r2, r7, #8
 8003696:	4413      	add	r3, r2
 8003698:	3b58      	subs	r3, #88	; 0x58
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 80036a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	3370      	adds	r3, #112	; 0x70
 80036aa:	f107 0208 	add.w	r2, r7, #8
 80036ae:	4413      	add	r3, r2
 80036b0:	3b50      	subs	r3, #80	; 0x50
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			ptrPath->goal_Position_x = finishline_x;
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80036c0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80036ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 80036ce:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 80036d2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	6938      	ldr	r0, [r7, #16]
 80036da:	f004 fb7d 	bl	8007dd8 <build_Operation>

			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 80036de:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 80036e2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f004 fc5a 	bl	8007fa0 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4; i++){
 80036ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036f0:	3301      	adds	r3, #1
 80036f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80036f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d9c5      	bls.n	800368a <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003704:	ed9f 2b4c 	vldr	d2, [pc, #304]	; 8003838 <create_square_operations+0x298>
 8003708:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8003838 <create_square_operations+0x298>
 800370c:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8003838 <create_square_operations+0x298>
 8003710:	2200      	movs	r2, #0
 8003712:	4619      	mov	r1, r3
 8003714:	6938      	ldr	r0, [r7, #16]
 8003716:	f004 fbff 	bl	8007f18 <add_Operation>
		ptrbuild->number_operation = 0;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}




}
 8003722:	e084      	b.n	800382e <create_square_operations+0x28e>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8003724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003728:	ed93 7b04 	vldr	d7, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3310      	adds	r3, #16
 8003730:	4618      	mov	r0, r3
 8003732:	eeb0 0a47 	vmov.f32	s0, s14
 8003736:	eef0 0a67 	vmov.f32	s1, s15
 800373a:	f004 febb 	bl	80084b4 <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 800373e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003742:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003756:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800376e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003772:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 ; i++){
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003794:	e035      	b.n	8003802 <create_square_operations+0x262>
			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8003796:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	3370      	adds	r3, #112	; 0x70
 800379e:	f107 0208 	add.w	r2, r7, #8
 80037a2:	4413      	add	r3, r2
 80037a4:	3b58      	subs	r3, #88	; 0x58
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 80037ae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	3370      	adds	r3, #112	; 0x70
 80037b6:	f107 0208 	add.w	r2, r7, #8
 80037ba:	4413      	add	r3, r2
 80037bc:	3b50      	subs	r3, #80	; 0x50
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			ptrPath->goal_Position_x = finishline_x;
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80037cc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80037d6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 80037da:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 80037de:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	6938      	ldr	r0, [r7, #16]
 80037e6:	f004 faf7 	bl	8007dd8 <build_Operation>
			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 80037ea:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 80037ee:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80037f2:	68b8      	ldr	r0, [r7, #8]
 80037f4:	f004 fbd4 	bl	8007fa0 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 ; i++){
 80037f8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80037fc:	3301      	adds	r3, #1
 80037fe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003802:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003806:	2b03      	cmp	r3, #3
 8003808:	d9c5      	bls.n	8003796 <create_square_operations+0x1f6>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003810:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8003838 <create_square_operations+0x298>
 8003814:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8003838 <create_square_operations+0x298>
 8003818:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8003838 <create_square_operations+0x298>
 800381c:	2200      	movs	r2, #0
 800381e:	4619      	mov	r1, r3
 8003820:	6938      	ldr	r0, [r7, #16]
 8003822:	f004 fb79 	bl	8007f18 <add_Operation>
		ptrbuild->number_operation = 0;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800382e:	bf00      	nop
 8003830:	3778      	adds	r7, #120	; 0x78
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	bf00      	nop
	...

08003840 <fillComand>:




void fillComand(void){
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <fillComand+0x78>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d033      	beq.n	80038b4 <fillComand+0x74>
//		writeChar(&handlerUSART, rxData);
		bufferReception[counterReception] = rxData;
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <fillComand+0x7c>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <fillComand+0x78>)
 8003854:	7819      	ldrb	r1, [r3, #0]
 8003856:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <fillComand+0x80>)
 8003858:	5499      	strb	r1, [r3, r2]
		counterReception++;
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <fillComand+0x7c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <fillComand+0x7c>)
 8003864:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <fillComand+0x78>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d10c      	bne.n	8003888 <fillComand+0x48>

			bufferReception[counterReception-1] = '\0';
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <fillComand+0x7c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <fillComand+0x80>)
 8003876:	2100      	movs	r1, #0
 8003878:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <fillComand+0x7c>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 8003880:	480f      	ldr	r0, [pc, #60]	; (80038c0 <fillComand+0x80>)
 8003882:	f7fe f8e1 	bl	8001a48 <parseCommands>
 8003886:	e012      	b.n	80038ae <fillComand+0x6e>

		}else if (rxData == 'z'){
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <fillComand+0x78>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b7a      	cmp	r3, #122	; 0x7a
 800388e:	d10e      	bne.n	80038ae <fillComand+0x6e>

			memset(bufferReception, 0, sizeof(bufferReception));
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	2100      	movs	r1, #0
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <fillComand+0x80>)
 8003896:	f006 fddf 	bl	800a458 <memset>
			counterReception = 0;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <fillComand+0x7c>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 80038a0:	4908      	ldr	r1, [pc, #32]	; (80038c4 <fillComand+0x84>)
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <fillComand+0x88>)
 80038a4:	f006 fa8e 	bl	8009dc4 <writeMsg>
			rxData = '\0';
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <fillComand+0x78>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 80038ae:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <fillComand+0x78>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
	}

}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000516 	.word	0x20000516
 80038bc:	20000514 	.word	0x20000514
 80038c0:	20000494 	.word	0x20000494
 80038c4:	080109a0 	.word	0x080109a0
 80038c8:	20000330 	.word	0x20000330

080038cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <ITM_SendChar+0x48>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <ITM_SendChar+0x48>)
 80038dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <ITM_SendChar+0x4c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <ITM_SendChar+0x4c>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80038ee:	bf00      	nop
 80038f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f8      	beq.n	80038f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80038fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000edfc 	.word	0xe000edfc
 8003918:	e0000e00 	.word	0xe0000e00

0800391c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	return 1;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_kill>:

int _kill(int pid, int sig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003936:	f006 fd5d 	bl	800a3f4 <__errno>
 800393a:	4603      	mov	r3, r0
 800393c:	2216      	movs	r2, #22
 800393e:	601a      	str	r2, [r3, #0]
	return -1;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_exit>:

void _exit (int status)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffe7 	bl	800392c <_kill>
	while (1) {}		/* Make sure we hang here */
 800395e:	e7fe      	b.n	800395e <_exit+0x12>

08003960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e00a      	b.n	8003988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003972:	f3af 8000 	nop.w
 8003976:	4601      	mov	r1, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbf0      	blt.n	8003972 <_read+0x12>
	}

return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e009      	b.n	80039c0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	60ba      	str	r2, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff89 	bl	80038cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf1      	blt.n	80039ac <_write+0x12>
	}
	return len;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_close>:

int _close(int file)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	return -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fa:	605a      	str	r2, [r3, #4]
	return 0;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_isatty>:

int _isatty(int file)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	return 1;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a40:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a46:	490d      	ldr	r1, [pc, #52]	; (8003a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <LoopForever+0xe>)
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a4c:	e002      	b.n	8003a54 <LoopCopyDataInit>

08003a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a52:	3304      	adds	r3, #4

08003a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a58:	d3f9      	bcc.n	8003a4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a5c:	4c0a      	ldr	r4, [pc, #40]	; (8003a88 <LoopForever+0x16>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a60:	e001      	b.n	8003a66 <LoopFillZerobss>

08003a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a64:	3204      	adds	r2, #4

08003a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a68:	d3fb      	bcc.n	8003a62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a6a:	f006 fcc9 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a6e:	f7fd f923 	bl	8000cb8 <main>

08003a72 <LoopForever>:

LoopForever:
    b LoopForever
 8003a72:	e7fe      	b.n	8003a72 <LoopForever>
  ldr   r0, =_estack
 8003a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003a80:	08011140 	.word	0x08011140
  ldr r2, =_sbss
 8003a84:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003a88:	200122d0 	.word	0x200122d0

08003a8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a8c:	e7fe      	b.n	8003a8c <ADC_IRQHandler>
	...

08003a90 <findShorterWay>:
int findShorterWay(char terminalGrid[52][52],
				   char Gridcopy[52][52],
				   float matrixCosts[52][52][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[100][2]){
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	f507 6477 	add.w	r4, r7, #3952	; 0xf70
 8003a9e:	f6a4 7464 	subw	r4, r4, #3940	; 0xf64
 8003aa2:	6020      	str	r0, [r4, #0]
 8003aa4:	f507 6077 	add.w	r0, r7, #3952	; 0xf70
 8003aa8:	f6a0 7068 	subw	r0, r0, #3944	; 0xf68
 8003aac:	6001      	str	r1, [r0, #0]
 8003aae:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003ab2:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 8003ab6:	600a      	str	r2, [r1, #0]
 8003ab8:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003abc:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003ac0:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8003ac2:	49b5      	ldr	r1, [pc, #724]	; (8003d98 <findShorterWay+0x308>)
 8003ac4:	48b5      	ldr	r0, [pc, #724]	; (8003d9c <findShorterWay+0x30c>)
 8003ac6:	f006 f97d 	bl	8009dc4 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8003aca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8003ace:	f103 0318 	add.w	r3, r3, #24
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ae0:	f102 020f 	add.w	r2, r2, #15
 8003ae4:	7013      	strb	r3, [r2, #0]
	uint8_t i = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003aec:	f102 020e 	add.w	r2, r2, #14
 8003af0:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003af8:	f102 020d 	add.w	r2, r2, #13
 8003afc:	7013      	strb	r3, [r2, #0]
	int position[2];
	uint8_t numberOfPositions = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b04:	f102 020c 	add.w	r2, r2, #12
 8003b08:	7013      	strb	r3, [r2, #0]
	uint8_t counter = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b10:	f102 020b 	add.w	r2, r2, #11
 8003b14:	7013      	strb	r3, [r2, #0]
	uint8_t counterStudy = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003b1c:	f102 020a 	add.w	r2, r2, #10
 8003b20:	7013      	strb	r3, [r2, #0]
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[500][4] = {0};
 8003b22:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b26:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003b30:	461a      	mov	r2, r3
 8003b32:	2100      	movs	r1, #0
 8003b34:	f006 fc90 	bl	800a458 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8003b38:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b3c:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f001 fd63 	bl	800560c <getRows>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b4e:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 8003b56:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b5a:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f001 fd78 	bl	8005654 <getColums>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b6c:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 8003b74:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b78:	f6a3 7268 	subw	r2, r3, #3944	; 0xf68
 8003b7c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b80:	f6a3 7164 	subw	r1, r3, #3940	; 0xf64
 8003b84:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b88:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6809      	ldr	r1, [r1, #0]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	f001 fce8 	bl	8005566 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8003b96:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003b9a:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003b9e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003ba2:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8003ba6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8003baa:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8003bb6:	6809      	ldr	r1, [r1, #0]
 8003bb8:	6800      	ldr	r0, [r0, #0]
 8003bba:	f001 fa4b 	bl	8005054 <setHeuristic>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <findShorterWay+0x15c>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8003bc4:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8003bc6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003bca:	f5a3 6177 	sub.w	r1, r3, #3952	; 0xf70
 8003bce:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003bd2:	f6a3 7368 	subw	r3, r3, #3944	; 0xf68
 8003bd6:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	6809      	ldr	r1, [r1, #0]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	f001 fc55 	bl	800548e <findStart>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d026      	beq.n	8003c38 <findShorterWay+0x1a8>
 8003bea:	e002      	b.n	8003bf2 <findShorterWay+0x162>
    	return 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f001 b96e 	b.w	8004ece <findShorterWay+0x143e>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 8003bf2:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 8003bf4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bfc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 8003c04:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8003c14:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8003c24:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 8003c34:	f001 b801 	b.w	8004c3a <findShorterWay+0x11aa>
    	return 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f001 b948 	b.w	8004ece <findShorterWay+0x143e>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8003c3e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8003c4e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003c64:	f102 020e 	add.w	r2, r2, #14
 8003c68:	7013      	strb	r3, [r2, #0]
 8003c6a:	e0ee      	b.n	8003e4a <findShorterWay+0x3ba>
    		for (j = 0; j < 3; j++){
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003c72:	f102 020d 	add.w	r2, r2, #13
 8003c76:	7013      	strb	r3, [r2, #0]
 8003c78:	e0d4      	b.n	8003e24 <findShorterWay+0x394>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 8003c7a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c86:	f103 030e 	add.w	r3, r3, #14
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	dd0b      	ble.n	8003caa <findShorterWay+0x21a>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8003c92:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003c9e:	f103 030d 	add.w	r3, r3, #13
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dc16      	bgt.n	8003cd8 <findShorterWay+0x248>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 8003caa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cae:	f103 030e 	add.w	r3, r3, #14
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003cb8:	f103 030d 	add.w	r3, r3, #13
 8003cbc:	7819      	ldrb	r1, [r3, #0]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003cc8:	f103 0310 	add.w	r3, r3, #16
 8003ccc:	443b      	add	r3, r7
 8003cce:	440b      	add	r3, r1
 8003cd0:	3b18      	subs	r3, #24
 8003cd2:	2230      	movs	r2, #48	; 0x30
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e09a      	b.n	8003e0e <findShorterWay+0x37e>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 8003cd8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ce4:	f103 030e 	add.w	r3, r3, #14
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003cf0:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	7a12      	ldrb	r2, [r2, #8]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	dc11      	bgt.n	8003d20 <findShorterWay+0x290>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 8003cfc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d08:	f103 030d 	add.w	r3, r3, #13
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003d14:	f5a2 6277 	sub.w	r2, r2, #3952	; 0xf70
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	7a52      	ldrb	r2, [r2, #9]
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	dd16      	ble.n	8003d4e <findShorterWay+0x2be>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8003d20:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d24:	f103 030e 	add.w	r3, r3, #14
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d2e:	f103 030d 	add.w	r3, r3, #13
 8003d32:	7819      	ldrb	r1, [r3, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003d3e:	f103 0310 	add.w	r3, r3, #16
 8003d42:	443b      	add	r3, r7
 8003d44:	440b      	add	r3, r1
 8003d46:	3b18      	subs	r3, #24
 8003d48:	2230      	movs	r2, #48	; 0x30
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e05f      	b.n	8003e0e <findShorterWay+0x37e>
    			}else if(i == 1 && j == 1){
 8003d4e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d52:	f103 030e 	add.w	r3, r3, #14
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d121      	bne.n	8003da0 <findShorterWay+0x310>
 8003d5c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d60:	f103 030d 	add.w	r3, r3, #13
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11a      	bne.n	8003da0 <findShorterWay+0x310>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8003d6a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d6e:	f103 030e 	add.w	r3, r3, #14
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003d78:	f103 030d 	add.w	r3, r3, #13
 8003d7c:	7819      	ldrb	r1, [r3, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003d88:	f103 0310 	add.w	r3, r3, #16
 8003d8c:	443b      	add	r3, r7
 8003d8e:	440b      	add	r3, r1
 8003d90:	3b18      	subs	r3, #24
 8003d92:	2250      	movs	r2, #80	; 0x50
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e03a      	b.n	8003e0e <findShorterWay+0x37e>
 8003d98:	080109bc 	.word	0x080109bc
 8003d9c:	20001688 	.word	0x20001688
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8003da0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dac:	f103 030e 	add.w	r3, r3, #14
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	2334      	movs	r3, #52	; 0x34
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	3b34      	subs	r3, #52	; 0x34
 8003dbe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003dc2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	18d0      	adds	r0, r2, r3
 8003dca:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003dd6:	f103 030d 	add.w	r3, r3, #13
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b01      	subs	r3, #1
 8003de0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003de4:	f102 020e 	add.w	r2, r2, #14
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 8003dee:	f101 010d 	add.w	r1, r1, #13
 8003df2:	7809      	ldrb	r1, [r1, #0]
 8003df4:	5cc0      	ldrb	r0, [r0, r3]
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003e00:	f103 0310 	add.w	r3, r3, #16
 8003e04:	443b      	add	r3, r7
 8003e06:	440b      	add	r3, r1
 8003e08:	3b18      	subs	r3, #24
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8003e0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e12:	f103 030d 	add.w	r3, r3, #13
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e1e:	f102 020d 	add.w	r2, r2, #13
 8003e22:	7013      	strb	r3, [r2, #0]
 8003e24:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e28:	f103 030d 	add.w	r3, r3, #13
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f67f af23 	bls.w	8003c7a <findShorterWay+0x1ea>
    	for(i = 0; i < 3; i++){
 8003e34:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e38:	f103 030e 	add.w	r3, r3, #14
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e44:	f102 020e 	add.w	r2, r2, #14
 8003e48:	7013      	strb	r3, [r2, #0]
 8003e4a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e4e:	f103 030e 	add.w	r3, r3, #14
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f67f af09 	bls.w	8003c6c <findShorterWay+0x1dc>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8003e5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e5e:	f103 030a 	add.w	r3, r3, #10
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	49c9      	ldr	r1, [pc, #804]	; (800418c <findShorterWay+0x6fc>)
 8003e68:	48c9      	ldr	r0, [pc, #804]	; (8004190 <findShorterWay+0x700>)
 8003e6a:	f007 f857 	bl	800af1c <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 8003e6e:	49c8      	ldr	r1, [pc, #800]	; (8004190 <findShorterWay+0x700>)
 8003e70:	48c8      	ldr	r0, [pc, #800]	; (8004194 <findShorterWay+0x704>)
 8003e72:	f005 ffa7 	bl	8009dc4 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 8003e76:	2300      	movs	r3, #0
 8003e78:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e7c:	f102 020e 	add.w	r2, r2, #14
 8003e80:	7013      	strb	r3, [r2, #0]
 8003e82:	e040      	b.n	8003f06 <findShorterWay+0x476>
			for (j = 0; j < 3; j++){
 8003e84:	2300      	movs	r3, #0
 8003e86:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e8a:	f102 020d 	add.w	r2, r2, #13
 8003e8e:	7013      	strb	r3, [r2, #0]
 8003e90:	e023      	b.n	8003eda <findShorterWay+0x44a>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 8003e92:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003e96:	f103 030e 	add.w	r3, r3, #14
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ea0:	f103 030d 	add.w	r3, r3, #13
 8003ea4:	7819      	ldrb	r1, [r3, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003eb0:	f103 0310 	add.w	r3, r3, #16
 8003eb4:	443b      	add	r3, r7
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3b18      	subs	r3, #24
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	48b5      	ldr	r0, [pc, #724]	; (8004194 <findShorterWay+0x704>)
 8003ec0:	f005 ff68 	bl	8009d94 <writeChar>
			for (j = 0; j < 3; j++){
 8003ec4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ec8:	f103 030d 	add.w	r3, r3, #13
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003ed4:	f102 020d 	add.w	r2, r2, #13
 8003ed8:	7013      	strb	r3, [r2, #0]
 8003eda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ede:	f103 030d 	add.w	r3, r3, #13
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d9d4      	bls.n	8003e92 <findShorterWay+0x402>
			}
			writeChar(&handlerAstarUsart, '\r');
 8003ee8:	210d      	movs	r1, #13
 8003eea:	48aa      	ldr	r0, [pc, #680]	; (8004194 <findShorterWay+0x704>)
 8003eec:	f005 ff52 	bl	8009d94 <writeChar>
    	for(i = 0; i < 3; i++){
 8003ef0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003ef4:	f103 030e 	add.w	r3, r3, #14
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f00:	f102 020e 	add.w	r2, r2, #14
 8003f04:	7013      	strb	r3, [r2, #0]
 8003f06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f0a:	f103 030e 	add.w	r3, r3, #14
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d9b7      	bls.n	8003e84 <findShorterWay+0x3f4>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 8003f14:	210d      	movs	r1, #13
 8003f16:	489f      	ldr	r0, [pc, #636]	; (8004194 <findShorterWay+0x704>)
 8003f18:	f005 ff3c 	bl	8009d94 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f22:	f102 0209 	add.w	r2, r2, #9
 8003f26:	7013      	strb	r3, [r2, #0]
 8003f28:	e01c      	b.n	8003f64 <findShorterWay+0x4d4>
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8003f2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f2e:	f103 0309 	add.w	r3, r3, #9
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2234      	movs	r2, #52	; 0x34
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8003f3e:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	4892      	ldr	r0, [pc, #584]	; (8004194 <findShorterWay+0x704>)
 8003f4a:	f005 ff3b 	bl	8009dc4 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8003f4e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003f52:	f103 0309 	add.w	r3, r3, #9
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f5e:	f102 0209 	add.w	r2, r2, #9
 8003f62:	7013      	strb	r3, [r2, #0]
 8003f64:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003f68:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	7a1b      	ldrb	r3, [r3, #8]
 8003f70:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f74:	f102 0209 	add.w	r2, r2, #9
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3d5      	bcc.n	8003f2a <findShorterWay+0x49a>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 8003f7e:	210d      	movs	r1, #13
 8003f80:	4884      	ldr	r0, [pc, #528]	; (8004194 <findShorterWay+0x704>)
 8003f82:	f005 ff07 	bl	8009d94 <writeChar>


    	for(i = 0; i < 3; i++){
 8003f86:	2300      	movs	r3, #0
 8003f88:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f8c:	f102 020e 	add.w	r2, r2, #14
 8003f90:	7013      	strb	r3, [r2, #0]
 8003f92:	e33c      	b.n	800460e <findShorterWay+0xb7e>
			for (j = 0; j < 3; j++){
 8003f94:	2300      	movs	r3, #0
 8003f96:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003f9a:	f102 020d 	add.w	r2, r2, #13
 8003f9e:	7013      	strb	r3, [r2, #0]
 8003fa0:	e319      	b.n	80045d6 <findShorterWay+0xb46>
				switch (nineSlotsMatriz[i][j]) {
 8003fa2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fa6:	f103 030e 	add.w	r3, r3, #14
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8003fb0:	f103 030d 	add.w	r3, r3, #13
 8003fb4:	7819      	ldrb	r1, [r3, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8003fc0:	f103 0310 	add.w	r3, r3, #16
 8003fc4:	443b      	add	r3, r7
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3b18      	subs	r3, #24
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b73      	cmp	r3, #115	; 0x73
 8003fce:	d075      	beq.n	80040bc <findShorterWay+0x62c>
 8003fd0:	2b73      	cmp	r3, #115	; 0x73
 8003fd2:	f300 82eb 	bgt.w	80045ac <findShorterWay+0xb1c>
 8003fd6:	2b50      	cmp	r3, #80	; 0x50
 8003fd8:	dc66      	bgt.n	80040a8 <findShorterWay+0x618>
 8003fda:	2b23      	cmp	r3, #35	; 0x23
 8003fdc:	f2c0 82e6 	blt.w	80045ac <findShorterWay+0xb1c>
 8003fe0:	3b23      	subs	r3, #35	; 0x23
 8003fe2:	2b2d      	cmp	r3, #45	; 0x2d
 8003fe4:	f200 82e2 	bhi.w	80045ac <findShorterWay+0xb1c>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <findShorterWay+0x560>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	080040b1 	.word	0x080040b1
 8003ff4:	080045ad 	.word	0x080045ad
 8003ff8:	080045ad 	.word	0x080045ad
 8003ffc:	080045ad 	.word	0x080045ad
 8004000:	080045ad 	.word	0x080045ad
 8004004:	080045ad 	.word	0x080045ad
 8004008:	080045ad 	.word	0x080045ad
 800400c:	080042bf 	.word	0x080042bf
 8004010:	080045ad 	.word	0x080045ad
 8004014:	080045ad 	.word	0x080045ad
 8004018:	080045ad 	.word	0x080045ad
 800401c:	080045ad 	.word	0x080045ad
 8004020:	080045ad 	.word	0x080045ad
 8004024:	080040b9 	.word	0x080040b9
 8004028:	080045ad 	.word	0x080045ad
 800402c:	080045ad 	.word	0x080045ad
 8004030:	080045ad 	.word	0x080045ad
 8004034:	080045ad 	.word	0x080045ad
 8004038:	080045ad 	.word	0x080045ad
 800403c:	080045ad 	.word	0x080045ad
 8004040:	080045ad 	.word	0x080045ad
 8004044:	080045ad 	.word	0x080045ad
 8004048:	080045ad 	.word	0x080045ad
 800404c:	080045ad 	.word	0x080045ad
 8004050:	080045ad 	.word	0x080045ad
 8004054:	080045ad 	.word	0x080045ad
 8004058:	080045ad 	.word	0x080045ad
 800405c:	080045ad 	.word	0x080045ad
 8004060:	080045ad 	.word	0x080045ad
 8004064:	080045ad 	.word	0x080045ad
 8004068:	080045ad 	.word	0x080045ad
 800406c:	080045ad 	.word	0x080045ad
 8004070:	080045ad 	.word	0x080045ad
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080045ad 	.word	0x080045ad
 800407c:	080045ad 	.word	0x080045ad
 8004080:	080045ad 	.word	0x080045ad
 8004084:	080045ad 	.word	0x080045ad
 8004088:	080045ad 	.word	0x080045ad
 800408c:	080045ad 	.word	0x080045ad
 8004090:	080045ad 	.word	0x080045ad
 8004094:	080045ad 	.word	0x080045ad
 8004098:	080045ad 	.word	0x080045ad
 800409c:	080045ad 	.word	0x080045ad
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040c1 	.word	0x080040c1
 80040a8:	2b65      	cmp	r3, #101	; 0x65
 80040aa:	f000 8256 	beq.w	800455a <findShorterWay+0xaca>
 80040ae:	e27d      	b.n	80045ac <findShorterWay+0xb1c>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 80040b0:	bf00      	nop
						break;
 80040b2:	e27e      	b.n	80045b2 <findShorterWay+0xb22>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 80040b4:	bf00      	nop
						break;
 80040b6:	e27c      	b.n	80045b2 <findShorterWay+0xb22>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 80040b8:	bf00      	nop
						break;
 80040ba:	e27a      	b.n	80045b2 <findShorterWay+0xb22>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 80040bc:	bf00      	nop
						break;
 80040be:	e278      	b.n	80045b2 <findShorterWay+0xb22>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 80040c0:	bf00      	nop
						break;
 80040c2:	e276      	b.n	80045b2 <findShorterWay+0xb22>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 80040c4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040c8:	f103 030e 	add.w	r3, r3, #14
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80040d2:	f102 0210 	add.w	r2, r2, #16
 80040d6:	6013      	str	r3, [r2, #0]
						position[1] = j;
 80040d8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80040dc:	f103 030d 	add.w	r3, r3, #13
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80040e6:	f102 0214 	add.w	r2, r2, #20
 80040ea:	6013      	str	r3, [r2, #0]
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 80040ec:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80040f0:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80040f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80040f8:	f102 0210 	add.w	r2, r2, #16
 80040fc:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004100:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800410a:	6809      	ldr	r1, [r1, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f001 f950 	bl	80053b2 <setFcost>
 8004112:	eef0 7a40 	vmov.f32	s15, s0
 8004116:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8004120:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	ed93 7a01 	vldr	s14, [r3, #4]
 800412a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004136:	f103 030e 	add.w	r3, r3, #14
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4413      	add	r3, r2
 800413e:	461a      	mov	r2, r3
 8004140:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800414c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004150:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	18d1      	adds	r1, r2, r3
 8004158:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004164:	f103 030d 	add.w	r3, r3, #13
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	4413      	add	r3, r2
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	3304      	adds	r3, #4
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	db07      	blt.n	8004198 <findShorterWay+0x708>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8004188:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 800418a:	e212      	b.n	80045b2 <findShorterWay+0xb22>
 800418c:	080109f0 	.word	0x080109f0
 8004190:	20001734 	.word	0x20001734
 8004194:	20001688 	.word	0x20001688
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8004198:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800419c:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80041a0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80041a4:	f102 0210 	add.w	r2, r2, #16
 80041a8:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80041ac:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80041b6:	6809      	ldr	r1, [r1, #0]
 80041b8:	6800      	ldr	r0, [r0, #0]
 80041ba:	f000 feed 	bl	8004f98 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 80041be:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80041c2:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80041c6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80041ca:	f102 0210 	add.w	r2, r2, #16
 80041ce:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80041d2:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80041dc:	6809      	ldr	r1, [r1, #0]
 80041de:	6800      	ldr	r0, [r0, #0]
 80041e0:	f000 ff08 	bl	8004ff4 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 80041e4:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80041e8:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80041ec:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 80041f0:	f101 0110 	add.w	r1, r1, #16
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	f000 fe74 	bl	8004ee8 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8004200:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800420c:	f103 030e 	add.w	r3, r3, #14
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	4413      	add	r3, r2
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004222:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004226:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	18d0      	adds	r0, r2, r3
 800422e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800423a:	f103 030d 	add.w	r3, r3, #13
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4413      	add	r3, r2
 8004242:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8004244:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004250:	f103 030e 	add.w	r3, r3, #14
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	440b      	add	r3, r1
 8004258:	4619      	mov	r1, r3
 800425a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004266:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 800426a:	f6a1 716c 	subw	r1, r1, #3948	; 0xf6c
 800426e:	6809      	ldr	r1, [r1, #0]
 8004270:	18cc      	adds	r4, r1, r3
 8004272:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68d9      	ldr	r1, [r3, #12]
 800427a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800427e:	f103 030d 	add.w	r3, r3, #13
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	440b      	add	r3, r1
 8004286:	1e59      	subs	r1, r3, #1
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4423      	add	r3, r4
 8004292:	3314      	adds	r3, #20
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800429c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4403      	add	r3, r0
 80042aa:	3304      	adds	r3, #4
 80042ac:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 80042ae:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80042b2:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 80042b6:	0123      	lsls	r3, r4, #4
 80042b8:	440b      	add	r3, r1
 80042ba:	601a      	str	r2, [r3, #0]
						break;
 80042bc:	e179      	b.n	80045b2 <findShorterWay+0xb22>
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 80042be:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042c2:	f103 030e 	add.w	r3, r3, #14
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80042cc:	f102 0210 	add.w	r2, r2, #16
 80042d0:	6013      	str	r3, [r2, #0]
						position[1] = j;
 80042d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80042d6:	f103 030d 	add.w	r3, r3, #13
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80042e0:	f102 0214 	add.w	r2, r2, #20
 80042e4:	6013      	str	r3, [r2, #0]
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 80042e6:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80042ea:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 80042ee:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80042f2:	f102 0210 	add.w	r2, r2, #16
 80042f6:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80042fa:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8004304:	6809      	ldr	r1, [r1, #0]
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	f000 fe46 	bl	8004f98 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 800430c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004310:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 8004314:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004318:	f102 0210 	add.w	r2, r2, #16
 800431c:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004320:	f5a1 6077 	sub.w	r0, r1, #3952	; 0xf70
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800432a:	6809      	ldr	r1, [r1, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f000 fe61 	bl	8004ff4 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8004332:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004336:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800433a:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800433e:	f101 0110 	add.w	r1, r1, #16
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	f000 fdcd 	bl	8004ee8 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 800434e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800435a:	f103 030e 	add.w	r3, r3, #14
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4413      	add	r3, r2
 8004362:	461a      	mov	r2, r3
 8004364:	2334      	movs	r3, #52	; 0x34
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	3b34      	subs	r3, #52	; 0x34
 800436c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004370:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	441a      	add	r2, r3
 8004378:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004384:	f103 030d 	add.w	r3, r3, #13
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	440b      	add	r3, r1
 800438c:	3b01      	subs	r3, #1
 800438e:	214f      	movs	r1, #79	; 0x4f
 8004390:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8004392:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800439e:	f103 030e 	add.w	r3, r3, #14
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	461a      	mov	r2, r3
 80043a8:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80043b4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80043b8:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	18d1      	adds	r1, r2, r3
 80043c0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043cc:	f103 030d 	add.w	r3, r3, #13
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	1e5a      	subs	r2, r3, #1
 80043d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80043da:	f103 030b 	add.w	r3, r3, #11
 80043de:	7818      	ldrb	r0, [r3, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	440b      	add	r3, r1
 80043ea:	3304      	adds	r3, #4
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 80043f2:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 80043f6:	0103      	lsls	r3, r0, #4
 80043f8:	440b      	add	r3, r1
 80043fa:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 80043fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004408:	f103 030e 	add.w	r3, r3, #14
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4413      	add	r3, r2
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800441e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004422:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	18d1      	adds	r1, r2, r3
 800442a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004436:	f103 030d 	add.w	r3, r3, #13
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4413      	add	r3, r2
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004444:	f103 030b 	add.w	r3, r3, #11
 8004448:	7818      	ldrb	r0, [r3, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3308      	adds	r3, #8
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800445c:	f5a3 6176 	sub.w	r1, r3, #3936	; 0xf60
 8004460:	0103      	lsls	r3, r0, #4
 8004462:	440b      	add	r3, r1
 8004464:	3304      	adds	r3, #4
 8004466:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8004468:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004474:	f103 030e 	add.w	r3, r3, #14
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	4413      	add	r3, r2
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004482:	f103 030b 	add.w	r3, r3, #11
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	ee07 2a90 	vmov	s15, r2
 800448c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004490:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004494:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	3308      	adds	r3, #8
 800449e:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 80044a2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044ae:	f103 030d 	add.w	r3, r3, #13
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4413      	add	r3, r2
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044bc:	f103 030b 	add.w	r3, r3, #11
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	ee07 2a90 	vmov	s15, r2
 80044c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ca:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80044ce:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4413      	add	r3, r2
 80044d6:	330c      	adds	r3, #12
 80044d8:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 80044dc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80044e8:	f103 030e 	add.w	r3, r3, #14
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80044fe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004502:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	18d1      	adds	r1, r2, r3
 800450a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004516:	f103 030d 	add.w	r3, r3, #13
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	4413      	add	r3, r2
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004524:	f103 030b 	add.w	r3, r3, #11
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	3314      	adds	r3, #20
 800453e:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8004542:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004546:	f103 030b 	add.w	r3, r3, #11
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004552:	f102 020b 	add.w	r2, r2, #11
 8004556:	7013      	strb	r3, [r2, #0]

						break;
 8004558:	e02b      	b.n	80045b2 <findShorterWay+0xb22>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 800455a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800455e:	f103 030e 	add.w	r3, r3, #14
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004568:	f102 0210 	add.w	r2, r2, #16
 800456c:	6013      	str	r3, [r2, #0]
						position[1] = j;
 800456e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004572:	f103 030d 	add.w	r3, r3, #13
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800457c:	f102 0214 	add.w	r2, r2, #20
 8004580:	6013      	str	r3, [r2, #0]
						updateParent(ptrChanges, position, matrixCosts);
 8004582:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004586:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800458a:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800458e:	f101 0110 	add.w	r1, r1, #16
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f000 fca5 	bl	8004ee8 <updateParent>
						shorterWayFound = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80045a4:	f102 020f 	add.w	r2, r2, #15
 80045a8:	7013      	strb	r3, [r2, #0]
						break;
 80045aa:	e002      	b.n	80045b2 <findShorterWay+0xb22>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f000 bc8e 	b.w	8004ece <findShorterWay+0x143e>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 80045b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045b6:	f103 030f 	add.w	r3, r3, #15
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d113      	bne.n	80045e8 <findShorterWay+0xb58>
			for (j = 0; j < 3; j++){
 80045c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045c4:	f103 030d 	add.w	r3, r3, #13
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	3301      	adds	r3, #1
 80045cc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80045d0:	f102 020d 	add.w	r2, r2, #13
 80045d4:	7013      	strb	r3, [r2, #0]
 80045d6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045da:	f103 030d 	add.w	r3, r3, #13
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	f67f acde 	bls.w	8003fa2 <findShorterWay+0x512>
 80045e6:	e000      	b.n	80045ea <findShorterWay+0xb5a>
					break;
 80045e8:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 80045ea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045ee:	f103 030f 	add.w	r3, r3, #15
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <findShorterWay+0xb90>
    	for(i = 0; i < 3; i++){
 80045f8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80045fc:	f103 030e 	add.w	r3, r3, #14
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004608:	f102 020e 	add.w	r2, r2, #14
 800460c:	7013      	strb	r3, [r2, #0]
 800460e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004612:	f103 030e 	add.w	r3, r3, #14
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b02      	cmp	r3, #2
 800461a:	f67f acbb 	bls.w	8003f94 <findShorterWay+0x504>
 800461e:	e000      	b.n	8004622 <findShorterWay+0xb92>
				break;
 8004620:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8004622:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004626:	f103 030f 	add.w	r3, r3, #15
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 8272 	bne.w	8004b16 <findShorterWay+0x1086>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8004632:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004636:	f103 030b 	add.w	r3, r3, #11
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	4619      	mov	r1, r3
 8004642:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	f001 f81a 	bl	8005680 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 800464c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 812c 	beq.w	80048b4 <findShorterWay+0xe24>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 800465c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 800466c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 800467c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	461a      	mov	r2, r3
 8004686:	2334      	movs	r3, #52	; 0x34
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004690:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	441a      	add	r2, r3
 8004698:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	2b73      	cmp	r3, #115	; 0x73
 80046a4:	d101      	bne.n	80046aa <findShorterWay+0xc1a>
					// Dejamos el char de start tal cual como esta
					__NOP();
 80046a6:	bf00      	nop
 80046a8:	e013      	b.n	80046d2 <findShorterWay+0xc42>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 80046aa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	461a      	mov	r2, r3
 80046b4:	2334      	movs	r3, #52	; 0x34
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80046be:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	441a      	add	r2, r3
 80046c6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2144      	movs	r1, #68	; 0x44
 80046d0:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 80046d2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80046de:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4413      	add	r3, r2
 80046e6:	3308      	adds	r3, #8
 80046e8:	edd3 7a00 	vldr	s15, [r3]
 80046ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f0:	ee17 2a90 	vmov	r2, s15
 80046f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 80046fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004708:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4413      	add	r3, r2
 8004710:	330c      	adds	r3, #12
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471a:	ee17 2a90 	vmov	r2, s15
 800471e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8004726:	2300      	movs	r3, #0
 8004728:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800472c:	f102 020e 	add.w	r2, r2, #14
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	e01e      	b.n	8004772 <findShorterWay+0xce2>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8004734:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800473c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004740:	f103 030e 	add.w	r3, r3, #14
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800474a:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800474e:	0089      	lsls	r1, r1, #2
 8004750:	440b      	add	r3, r1
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 800475c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004760:	f103 030e 	add.w	r3, r3, #14
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800476c:	f102 020e 	add.w	r2, r2, #14
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004776:	f103 030e 	add.w	r3, r3, #14
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d9d9      	bls.n	8004734 <findShorterWay+0xca4>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8004780:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	b2db      	uxtb	r3, r3
 800478a:	3301      	adds	r3, #1
 800478c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004790:	f102 020e 	add.w	r2, r2, #14
 8004794:	7013      	strb	r3, [r2, #0]
 8004796:	e05f      	b.n	8004858 <findShorterWay+0xdc8>
					for (j = 0 ; j < 4 ; j++){
 8004798:	2300      	movs	r3, #0
 800479a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800479e:	f102 020d 	add.w	r2, r2, #13
 80047a2:	7013      	strb	r3, [r2, #0]
 80047a4:	e046      	b.n	8004834 <findShorterWay+0xda4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 80047a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047aa:	f103 030e 	add.w	r3, r3, #14
 80047ae:	781c      	ldrb	r4, [r3, #0]
 80047b0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047b4:	f103 030d 	add.w	r3, r3, #13
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047be:	f103 030e 	add.w	r3, r3, #14
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	1e58      	subs	r0, r3, #1
 80047c6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047ca:	f103 030d 	add.w	r3, r3, #13
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80047d4:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80047d8:	00a4      	lsls	r4, r4, #2
 80047da:	4422      	add	r2, r4
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	440a      	add	r2, r1
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 80047e6:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 80047ea:	0080      	lsls	r0, r0, #2
 80047ec:	4403      	add	r3, r0
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80047f4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80047f8:	f103 030e 	add.w	r3, r3, #14
 80047fc:	7819      	ldrb	r1, [r3, #0]
 80047fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004802:	f103 030d 	add.w	r3, r3, #13
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 800480c:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004810:	0089      	lsls	r1, r1, #2
 8004812:	440b      	add	r3, r1
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 800481e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004822:	f103 030d 	add.w	r3, r3, #13
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800482e:	f102 020d 	add.w	r2, r2, #13
 8004832:	7013      	strb	r3, [r2, #0]
 8004834:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004838:	f103 030d 	add.w	r3, r3, #13
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d9b1      	bls.n	80047a6 <findShorterWay+0xd16>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8004842:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004846:	f103 030e 	add.w	r3, r3, #14
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004852:	f102 020e 	add.w	r2, r2, #14
 8004856:	7013      	strb	r3, [r2, #0]
 8004858:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 800485c:	f103 030e 	add.w	r3, r3, #14
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004866:	f103 030b 	add.w	r3, r3, #11
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d393      	bcc.n	8004798 <findShorterWay+0xd08>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8004870:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004874:	f103 030b 	add.w	r3, r3, #11
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004880:	f102 020b 	add.w	r2, r2, #11
 8004884:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004886:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004896:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 80048a6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048b2:	e124      	b.n	8004afe <findShorterWay+0x106e>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 80048b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80048c4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80048d4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	461a      	mov	r2, r3
 80048de:	2334      	movs	r3, #52	; 0x34
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80048e8:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	441a      	add	r2, r3
 80048f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	2b73      	cmp	r3, #115	; 0x73
 80048fc:	d101      	bne.n	8004902 <findShorterWay+0xe72>
					// Dejamos el char de start tal cual como esta
					__NOP();
 80048fe:	bf00      	nop
 8004900:	e013      	b.n	800492a <findShorterWay+0xe9a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8004902:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	461a      	mov	r2, r3
 800490c:	2334      	movs	r3, #52	; 0x34
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004916:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	441a      	add	r2, r3
 800491e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2144      	movs	r1, #68	; 0x44
 8004928:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 800492a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004936:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4413      	add	r3, r2
 800493e:	3308      	adds	r3, #8
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004948:	ee17 2a90 	vmov	r2, s15
 800494c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8004954:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004960:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	330c      	adds	r3, #12
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004972:	ee17 2a90 	vmov	r2, s15
 8004976:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 800497e:	2300      	movs	r3, #0
 8004980:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004984:	f102 020e 	add.w	r2, r2, #14
 8004988:	7013      	strb	r3, [r2, #0]
 800498a:	e01e      	b.n	80049ca <findShorterWay+0xf3a>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 800498c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004994:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004998:	f103 030e 	add.w	r3, r3, #14
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 80049a2:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 80049a6:	0089      	lsls	r1, r1, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80049b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049b8:	f103 030e 	add.w	r3, r3, #14
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80049c4:	f102 020e 	add.w	r2, r2, #14
 80049c8:	7013      	strb	r3, [r2, #0]
 80049ca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80049ce:	f103 030e 	add.w	r3, r3, #14
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d9d9      	bls.n	800498c <findShorterWay+0xefc>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 80049d8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80049e8:	f102 020e 	add.w	r2, r2, #14
 80049ec:	7013      	strb	r3, [r2, #0]
 80049ee:	e05f      	b.n	8004ab0 <findShorterWay+0x1020>
					for (j = 0 ; j < 4 ; j++){
 80049f0:	2300      	movs	r3, #0
 80049f2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80049f6:	f102 020d 	add.w	r2, r2, #13
 80049fa:	7013      	strb	r3, [r2, #0]
 80049fc:	e046      	b.n	8004a8c <findShorterWay+0xffc>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 80049fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a02:	f103 030e 	add.w	r3, r3, #14
 8004a06:	781c      	ldrb	r4, [r3, #0]
 8004a08:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a0c:	f103 030d 	add.w	r3, r3, #13
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a16:	f103 030e 	add.w	r3, r3, #14
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	1e58      	subs	r0, r3, #1
 8004a1e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a22:	f103 030d 	add.w	r3, r3, #13
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004a2c:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004a30:	00a4      	lsls	r4, r4, #2
 8004a32:	4422      	add	r2, r4
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	440a      	add	r2, r1
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	f507 6177 	add.w	r1, r7, #3952	; 0xf70
 8004a3e:	f5a1 6176 	sub.w	r1, r1, #3936	; 0xf60
 8004a42:	0080      	lsls	r0, r0, #2
 8004a44:	4403      	add	r3, r0
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8004a4c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a50:	f103 030e 	add.w	r3, r3, #14
 8004a54:	7819      	ldrb	r1, [r3, #0]
 8004a56:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a5a:	f103 030d 	add.w	r3, r3, #13
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004a64:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 8004a68:	0089      	lsls	r1, r1, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8004a76:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a7a:	f103 030d 	add.w	r3, r3, #13
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004a86:	f102 020d 	add.w	r2, r2, #13
 8004a8a:	7013      	strb	r3, [r2, #0]
 8004a8c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a90:	f103 030d 	add.w	r3, r3, #13
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d9b1      	bls.n	80049fe <findShorterWay+0xf6e>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8004a9a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004a9e:	f103 030e 	add.w	r3, r3, #14
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004aaa:	f102 020e 	add.w	r2, r2, #14
 8004aae:	7013      	strb	r3, [r2, #0]
 8004ab0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ab4:	f103 030e 	add.w	r3, r3, #14
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004abe:	f103 030b 	add.w	r3, r3, #11
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d393      	bcc.n	80049f0 <findShorterWay+0xf60>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8004ac8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004acc:	f103 030b 	add.w	r3, r3, #11
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ad8:	f102 020b 	add.w	r2, r2, #11
 8004adc:	7013      	strb	r3, [r2, #0]

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8004ade:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8004aee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8004afe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b02:	f103 030a 	add.w	r3, r3, #10
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b0e:	f102 020a 	add.w	r2, r2, #10
 8004b12:	7013      	strb	r3, [r2, #0]
 8004b14:	e091      	b.n	8004c3a <findShorterWay+0x11aa>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8004b16:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b22:	f102 020e 	add.w	r2, r2, #14
 8004b26:	7013      	strb	r3, [r2, #0]
			j = ptrChanges->endPos[1];
 8004b28:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004b34:	f102 020d 	add.w	r2, r2, #13
 8004b38:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8004b3a:	e068      	b.n	8004c0e <findShorterWay+0x117e>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 8004b3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b40:	f103 030e 	add.w	r3, r3, #14
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004b52:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	18d1      	adds	r1, r2, r3
 8004b5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b5e:	f103 030d 	add.w	r3, r3, #13
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	330c      	adds	r3, #12
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b78:	ee17 3a90 	vmov	r3, s15
 8004b7c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004b80:	f102 0210 	add.w	r2, r2, #16
 8004b84:	6013      	str	r3, [r2, #0]
				position[1] = matrixCosts[i][j][4];
 8004b86:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004b8a:	f103 030e 	add.w	r3, r3, #14
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004b9c:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	18d1      	adds	r1, r2, r3
 8004ba4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ba8:	f103 030d 	add.w	r3, r3, #13
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3310      	adds	r3, #16
 8004bba:	edd3 7a00 	vldr	s15, [r3]
 8004bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bc2:	ee17 3a90 	vmov	r3, s15
 8004bc6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004bca:	f102 0214 	add.w	r2, r2, #20
 8004bce:	6013      	str	r3, [r2, #0]

				// actualizamos la nueva posición
				i = position[0];
 8004bd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004bd4:	f103 0310 	add.w	r3, r3, #16
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004bde:	f102 020e 	add.w	r2, r2, #14
 8004be2:	7013      	strb	r3, [r2, #0]
				j = position[1];
 8004be4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004be8:	f103 0314 	add.w	r3, r3, #20
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004bf2:	f102 020d 	add.w	r2, r2, #13
 8004bf6:	7013      	strb	r3, [r2, #0]

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8004bf8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004bfc:	f103 030c 	add.w	r3, r3, #12
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c08:	f102 020c 	add.w	r2, r2, #12
 8004c0c:	7013      	strb	r3, [r2, #0]
			while(Gridcopy[i][j] != 's'){
 8004c0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c12:	f103 030e 	add.w	r3, r3, #14
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2234      	movs	r2, #52	; 0x34
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004c22:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	441a      	add	r2, r3
 8004c2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c2e:	f103 030d 	add.w	r3, r3, #13
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	2b73      	cmp	r3, #115	; 0x73
 8004c38:	d180      	bne.n	8004b3c <findShorterWay+0x10ac>
    while(!shorterWayFound){
 8004c3a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c3e:	f103 030f 	add.w	r3, r3, #15
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f43e affa 	beq.w	8003c3e <findShorterWay+0x1ae>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 8004c4a:	49a4      	ldr	r1, [pc, #656]	; (8004edc <findShorterWay+0x144c>)
 8004c4c:	48a4      	ldr	r0, [pc, #656]	; (8004ee0 <findShorterWay+0x1450>)
 8004c4e:	f005 f8b9 	bl	8009dc4 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8004c52:	210d      	movs	r1, #13
 8004c54:	48a2      	ldr	r0, [pc, #648]	; (8004ee0 <findShorterWay+0x1450>)
 8004c56:	f005 f89d 	bl	8009d94 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8004c5a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c5e:	f103 030c 	add.w	r3, r3, #12
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004c6c:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8004c74:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c80:	f102 020e 	add.w	r2, r2, #14
 8004c84:	7013      	strb	r3, [r2, #0]
	j = ptrChanges->endPos[1];
 8004c86:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004c92:	f102 020d 	add.w	r2, r2, #13
 8004c96:	7013      	strb	r3, [r2, #0]

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004c98:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004c9c:	f103 030c 	add.w	r3, r3, #12
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ca6:	f102 0204 	add.w	r2, r2, #4
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e0d1      	b.n	8004e52 <findShorterWay+0x13c2>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8004cae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004cb2:	f103 030e 	add.w	r3, r3, #14
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2234      	movs	r2, #52	; 0x34
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004cc2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	441a      	add	r2, r3
 8004cca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004cce:	f103 030d 	add.w	r3, r3, #13
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	2b65      	cmp	r3, #101	; 0x65
 8004cd8:	d101      	bne.n	8004cde <findShorterWay+0x124e>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8004cda:	bf00      	nop
 8004cdc:	e02c      	b.n	8004d38 <findShorterWay+0x12a8>
    	}else if (Gridcopy[i][j] == 's'){
 8004cde:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004ce2:	f103 030e 	add.w	r3, r3, #14
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2234      	movs	r2, #52	; 0x34
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004cf2:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004cfe:	f103 030d 	add.w	r3, r3, #13
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	2b73      	cmp	r3, #115	; 0x73
 8004d08:	d101      	bne.n	8004d0e <findShorterWay+0x127e>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8004d0a:	bf00      	nop
 8004d0c:	e014      	b.n	8004d38 <findShorterWay+0x12a8>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8004d0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d12:	f103 030e 	add.w	r3, r3, #14
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2234      	movs	r2, #52	; 0x34
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004d22:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	441a      	add	r2, r3
 8004d2a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d2e:	f103 030d 	add.w	r3, r3, #13
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2149      	movs	r1, #73	; 0x49
 8004d36:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8004d38:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d3c:	f103 0304 	add.w	r3, r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8004d48:	f102 0204 	add.w	r2, r2, #4
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004d54:	f102 020e 	add.w	r2, r2, #14
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8004d5c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d60:	f103 0304 	add.w	r3, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8004d6c:	f102 0204 	add.w	r2, r2, #4
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004d78:	f102 020d 	add.w	r2, r2, #13
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 8004d80:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004d84:	f103 030e 	add.w	r3, r3, #14
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004d96:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	18d1      	adds	r1, r2, r3
 8004d9e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004da2:	f103 030d 	add.w	r3, r3, #13
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	440b      	add	r3, r1
 8004db2:	330c      	adds	r3, #12
 8004db4:	edd3 7a00 	vldr	s15, [r3]
 8004db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dbc:	ee17 3a90 	vmov	r3, s15
 8004dc0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004dc4:	f102 0210 	add.w	r2, r2, #16
 8004dc8:	6013      	str	r3, [r2, #0]
		position[1] = matrixCosts[i][j][4];
 8004dca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004dce:	f103 030e 	add.w	r3, r3, #14
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004de0:	f6a2 726c 	subw	r2, r2, #3948	; 0xf6c
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	18d1      	adds	r1, r2, r3
 8004de8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004dec:	f103 030d 	add.w	r3, r3, #13
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	edd3 7a00 	vldr	s15, [r3]
 8004e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e06:	ee17 3a90 	vmov	r3, s15
 8004e0a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8004e0e:	f102 0214 	add.w	r2, r2, #20
 8004e12:	6013      	str	r3, [r2, #0]

		// actualizamos la nueva posición
		i = position[0];
 8004e14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004e18:	f103 0310 	add.w	r3, r3, #16
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e22:	f102 020e 	add.w	r2, r2, #14
 8004e26:	7013      	strb	r3, [r2, #0]
		j = position[1];
 8004e28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8004e2c:	f103 0314 	add.w	r3, r3, #20
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e36:	f102 020d 	add.w	r2, r2, #13
 8004e3a:	7013      	strb	r3, [r2, #0]
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8004e3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004e40:	f103 0304 	add.w	r3, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e4c:	f102 0204 	add.w	r2, r2, #4
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004e56:	f103 0304 	add.w	r3, r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f6bf af26 	bge.w	8004cae <findShorterWay+0x121e>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004e62:	2300      	movs	r3, #0
 8004e64:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004e68:	f102 0203 	add.w	r2, r2, #3
 8004e6c:	7013      	strb	r3, [r2, #0]
 8004e6e:	e01c      	b.n	8004eaa <findShorterWay+0x141a>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8004e70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004e74:	f103 0303 	add.w	r3, r3, #3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2234      	movs	r2, #52	; 0x34
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	f507 6277 	add.w	r2, r7, #3952	; 0xf70
 8004e84:	f6a2 7268 	subw	r2, r2, #3944	; 0xf68
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4814      	ldr	r0, [pc, #80]	; (8004ee0 <findShorterWay+0x1450>)
 8004e90:	f004 ff98 	bl	8009dc4 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8004e94:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8004e98:	f103 0303 	add.w	r3, r3, #3
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004ea4:	f102 0203 	add.w	r2, r2, #3
 8004ea8:	7013      	strb	r3, [r2, #0]
 8004eaa:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004eae:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	7a1b      	ldrb	r3, [r3, #8]
 8004eb6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8004eba:	f102 0203 	add.w	r2, r2, #3
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3d5      	bcc.n	8004e70 <findShorterWay+0x13e0>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 8004ec4:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <findShorterWay+0x1454>)
 8004ec6:	4806      	ldr	r0, [pc, #24]	; (8004ee0 <findShorterWay+0x1450>)
 8004ec8:	f004 ff7c 	bl	8009dc4 <writeMsg>

    return 1;
 8004ecc:	2301      	movs	r3, #1


}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	08010a18 	.word	0x08010a18
 8004ee0:	20001688 	.word	0x20001688
 8004ee4:	08010a58 	.word	0x08010a58

08004ee8 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fa9a 	bl	8005430 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f02:	b2d8      	uxtb	r0, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	18d1      	adds	r1, r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3304      	adds	r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	1e5a      	subs	r2, r3, #1
 8004f2e:	ee07 0a90 	vmov	s15, r0
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	4613      	mov	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	330c      	adds	r3, #12
 8004f42:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f4c:	b2d8      	uxtb	r0, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	18d1      	adds	r1, r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3304      	adds	r3, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	1e5a      	subs	r2, r3, #1
 8004f78:	ee07 0a90 	vmov	s15, r0
 8004f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	440b      	add	r3, r1
 8004f8a:	3310      	adds	r3, #16
 8004f8c:	edc3 7a00 	vstr	s15, [r3]

}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004f98:	b5b0      	push	{r4, r5, r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4413      	add	r3, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	18d5      	adds	r5, r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4413      	add	r3, r2
 8004fce:	1e5c      	subs	r4, r3, #1
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f905 	bl	80051e4 <setGcost>
 8004fda:	eef0 7a40 	vmov.f32	s15, s0
 8004fde:	4623      	mov	r3, r4
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4423      	add	r3, r4
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	442b      	add	r3, r5
 8004fe8:	edc3 7a00 	vstr	s15, [r3]
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bdb0      	pop	{r4, r5, r7, pc}

08004ff4 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6] ){
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4413      	add	r3, r2
 800500c:	461a      	mov	r2, r3
 800500e:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	18d5      	adds	r5, r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4413      	add	r3, r2
 800502a:	1e5c      	subs	r4, r3, #1
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f9bd 	bl	80053b2 <setFcost>
 8005038:	eef0 7a40 	vmov.f32	s15, s0
 800503c:	4623      	mov	r3, r4
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4423      	add	r3, r4
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	442b      	add	r3, r5
 8005046:	3304      	adds	r3, #4
 8005048:	edc3 7a00 	vstr	s15, [r3]

}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bdb0      	pop	{r4, r5, r7, pc}

08005054 <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[52][52][6] , char Gridcopy[52][52]){
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f000 fa41 	bl	80054fa <findEnd>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 800507e:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e0a3      	b.n	80051ce <setHeuristic+0x17a>
		return RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	e0a8      	b.n	80051dc <setHeuristic+0x188>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800508a:	2300      	movs	r3, #0
 800508c:	77bb      	strb	r3, [r7, #30]
 800508e:	e095      	b.n	80051bc <setHeuristic+0x168>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8005090:	7ffa      	ldrb	r2, [r7, #31]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	bfb8      	it	lt
 800509c:	425b      	neglt	r3, r3
 800509e:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 80050a0:	7fba      	ldrb	r2, [r7, #30]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfb8      	it	lt
 80050ac:	425b      	neglt	r3, r3
 80050ae:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	dc3f      	bgt.n	8005138 <setHeuristic+0xe4>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d0:	ee17 3a90 	vmov	r3, s15
 80050d4:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	edd3 6a00 	vldr	s13, [r3]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfb8      	it	lt
 80050f0:	425b      	neglt	r3, r3
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005106:	ee17 3a90 	vmov	r3, s15
 800510a:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 800510c:	7ffb      	ldrb	r3, [r7, #31]
 800510e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	18d1      	adds	r1, r2, r3
 800511a:	7fba      	ldrb	r2, [r7, #30]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	3308      	adds	r3, #8
 8005132:	edc3 7a00 	vstr	s15, [r3]
 8005136:	e03e      	b.n	80051b6 <setHeuristic+0x162>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	ed93 7a01 	vldr	s14, [r3, #4]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005150:	ee17 3a90 	vmov	r3, s15
 8005154:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	edd3 6a00 	vldr	s13, [r3]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfb8      	it	lt
 8005170:	425b      	neglt	r3, r3
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800517e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005186:	ee17 3a90 	vmov	r3, s15
 800518a:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	18d1      	adds	r1, r2, r3
 800519a:	7fba      	ldrb	r2, [r7, #30]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	3308      	adds	r3, #8
 80051b2:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80051b6:	7fbb      	ldrb	r3, [r7, #30]
 80051b8:	3301      	adds	r3, #1
 80051ba:	77bb      	strb	r3, [r7, #30]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	7a5b      	ldrb	r3, [r3, #9]
 80051c0:	7fba      	ldrb	r2, [r7, #30]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	f4ff af64 	bcc.w	8005090 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	3301      	adds	r3, #1
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	7a1b      	ldrb	r3, [r3, #8]
 80051d2:	7ffa      	ldrb	r2, [r7, #31]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f4ff af58 	bcc.w	800508a <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 80051da:	2301      	movs	r3, #1

}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	bfb8      	it	lt
 800520c:	425b      	neglt	r3, r3
 800520e:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	bfb8      	it	lt
 800521e:	425b      	neglt	r3, r3
 8005220:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4413      	add	r3, r2
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d05d      	beq.n	80052f2 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4413      	add	r3, r2
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d052      	beq.n	80052f2 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	429a      	cmp	r2, r3
 8005258:	dc25      	bgt.n	80052a6 <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	ed93 7a00 	vldr	s14, [r3]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfb8      	it	lt
 800528a:	425b      	neglt	r3, r3
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005298:	ed97 7a07 	vldr	s14, [r7, #28]
 800529c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a0:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80052a4:	e077      	b.n	8005396 <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80052be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	ed93 7a00 	vldr	s14, [r3]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	425b      	neglt	r3, r3
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80052e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ec:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80052f0:	e051      	b.n	8005396 <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	dc25      	bgt.n	800534c <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	ed93 7a01 	vldr	s14, [r3, #4]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005314:	ed97 7a07 	vldr	s14, [r7, #28]
 8005318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800531c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	ed93 7a00 	vldr	s14, [r3]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	bfb8      	it	lt
 8005330:	425b      	neglt	r3, r3
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005346:	edc7 7a07 	vstr	s15, [r7, #28]
 800534a:	e024      	b.n	8005396 <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005360:	ed97 7a07 	vldr	s14, [r7, #28]
 8005364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005368:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	ed93 7a00 	vldr	s14, [r3]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bfb8      	it	lt
 800537c:	425b      	neglt	r3, r3
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538a:	ed97 7a07 	vldr	s14, [r7, #28]
 800538e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005392:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	ee07 3a90 	vmov	s15, r3
}
 80053a4:	eeb0 0a67 	vmov.f32	s0, s15
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[52][52][6]){
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff0d 	bl	80051e4 <setGcost>
 80053ca:	eef0 7a40 	vmov.f32	s15, s0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	18d1      	adds	r1, r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4413      	add	r3, r2
 8005402:	1e5a      	subs	r2, r3, #1
 8005404:	4613      	mov	r3, r2
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4413      	add	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	440b      	add	r3, r1
 800540e:	3308      	adds	r3, #8
 8005410:	edd3 7a00 	vldr	s15, [r3]
 8005414:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	ee07 3a90 	vmov	s15, r3

}
 8005426:	eeb0 0a67 	vmov.f32	s0, s15
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4413      	add	r3, r2
 8005444:	1e5a      	subs	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d10c      	bne.n	8005468 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	3304      	adds	r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4413      	add	r3, r2
 800545a:	1e5a      	subs	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d101      	bne.n	8005468 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8005464:	bf00      	nop
 8005466:	e00c      	b.n	8005482 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800548e:	b480      	push	{r7}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]
 800549e:	e020      	b.n	80054e2 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80054a0:	2300      	movs	r3, #0
 80054a2:	75bb      	strb	r3, [r7, #22]
 80054a4:	e015      	b.n	80054d2 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2234      	movs	r2, #52	; 0x34
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	441a      	add	r2, r3
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	2b73      	cmp	r3, #115	; 0x73
 80054b8:	d107      	bne.n	80054ca <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 80054ba:	7dfa      	ldrb	r2, [r7, #23]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 80054c0:	7dba      	ldrb	r2, [r7, #22]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e011      	b.n	80054ee <findStart+0x60>
			}else{
				__NOP();
 80054ca:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80054cc:	7dbb      	ldrb	r3, [r7, #22]
 80054ce:	3301      	adds	r3, #1
 80054d0:	75bb      	strb	r3, [r7, #22]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	7a5b      	ldrb	r3, [r3, #9]
 80054d6:	7dba      	ldrb	r2, [r7, #22]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d3e4      	bcc.n	80054a6 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	3301      	adds	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	7a1b      	ldrb	r3, [r3, #8]
 80054e6:	7dfa      	ldrb	r2, [r7, #23]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d3d9      	bcc.n	80054a0 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80054ec:	2300      	movs	r3, #0



}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <findEnd>:
int findEnd(char Gridcopy[52][52], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]
 800550a:	e020      	b.n	800554e <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800550c:	2300      	movs	r3, #0
 800550e:	75bb      	strb	r3, [r7, #22]
 8005510:	e015      	b.n	800553e <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2234      	movs	r2, #52	; 0x34
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	441a      	add	r2, r3
 800551e:	7dbb      	ldrb	r3, [r7, #22]
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	2b65      	cmp	r3, #101	; 0x65
 8005524:	d107      	bne.n	8005536 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8005526:	7dfa      	ldrb	r2, [r7, #23]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 800552c:	7dba      	ldrb	r2, [r7, #22]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8005532:	2301      	movs	r3, #1
 8005534:	e011      	b.n	800555a <findEnd+0x60>
			}else{
				__NOP();
 8005536:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8005538:	7dbb      	ldrb	r3, [r7, #22]
 800553a:	3301      	adds	r3, #1
 800553c:	75bb      	strb	r3, [r7, #22]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	7a5b      	ldrb	r3, [r3, #9]
 8005542:	7dba      	ldrb	r2, [r7, #22]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3e4      	bcc.n	8005512 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	3301      	adds	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	7a1b      	ldrb	r3, [r3, #8]
 8005552:	7dfa      	ldrb	r2, [r7, #23]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3d9      	bcc.n	800550c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8005558:	2300      	movs	r3, #0

}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[52][52], char Gridcopy[52][52]){
 8005566:	b480      	push	{r7}
 8005568:	b087      	sub	sp, #28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]
 8005576:	e03d      	b.n	80055f4 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8005578:	2300      	movs	r3, #0
 800557a:	75bb      	strb	r3, [r7, #22]
 800557c:	e031      	b.n	80055e2 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	7a5b      	ldrb	r3, [r3, #9]
 8005582:	7dba      	ldrb	r2, [r7, #22]
 8005584:	429a      	cmp	r2, r3
 8005586:	d109      	bne.n	800559c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2234      	movs	r2, #52	; 0x34
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	441a      	add	r2, r3
 8005594:	7dbb      	ldrb	r3, [r7, #22]
 8005596:	210d      	movs	r1, #13
 8005598:	54d1      	strb	r1, [r2, r3]
 800559a:	e01f      	b.n	80055dc <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 800559c:	7dba      	ldrb	r2, [r7, #22]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	7a5b      	ldrb	r3, [r3, #9]
 80055a2:	3301      	adds	r3, #1
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d109      	bne.n	80055bc <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2234      	movs	r2, #52	; 0x34
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	441a      	add	r2, r3
 80055b4:	7dbb      	ldrb	r3, [r7, #22]
 80055b6:	2100      	movs	r1, #0
 80055b8:	54d1      	strb	r1, [r2, r3]
 80055ba:	e00f      	b.n	80055dc <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2234      	movs	r2, #52	; 0x34
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	18d0      	adds	r0, r2, r3
 80055c8:	7db9      	ldrb	r1, [r7, #22]
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2234      	movs	r2, #52	; 0x34
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	441a      	add	r2, r3
 80055d6:	7dbb      	ldrb	r3, [r7, #22]
 80055d8:	5c41      	ldrb	r1, [r0, r1]
 80055da:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80055dc:	7dbb      	ldrb	r3, [r7, #22]
 80055de:	3301      	adds	r3, #1
 80055e0:	75bb      	strb	r3, [r7, #22]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	7a5b      	ldrb	r3, [r3, #9]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	7dbb      	ldrb	r3, [r7, #22]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	dac7      	bge.n	800557e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	3301      	adds	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	7a1b      	ldrb	r3, [r3, #8]
 80055f8:	7dfa      	ldrb	r2, [r7, #23]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3bc      	bcc.n	8005578 <buildMatrixCopy+0x12>
			}
		}
	}

}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[52][52]){
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8005618:	2300      	movs	r3, #0
 800561a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 800561c:	e00a      	b.n	8005634 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2234      	movs	r2, #52	; 0x34
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	3301      	adds	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2234      	movs	r2, #52	; 0x34
 8005638:	fb02 f303 	mul.w	r3, r2, r3
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	4413      	add	r3, r2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1eb      	bne.n	800561e <getRows+0x12>

	}

	return counterRows;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[52][52]){
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8005660:	e002      	b.n	8005668 <getColums+0x14>

		counterColumns++;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	3301      	adds	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	5cd3      	ldrb	r3, [r2, r3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f7      	bne.n	8005662 <getColums+0xe>

	}

	return counterColumns;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 800569a:	2300      	movs	r3, #0
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e04d      	b.n	800573c <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 80056a0:	2300      	movs	r3, #0
 80056a2:	77bb      	strb	r3, [r7, #30]
 80056a4:	e034      	b.n	8005710 <findLesserValue+0x90>
			if (i == j){
 80056a6:	7ffa      	ldrb	r2, [r7, #31]
 80056a8:	7fbb      	ldrb	r3, [r7, #30]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d101      	bne.n	80056b2 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 80056ae:	bf00      	nop
 80056b0:	e02b      	b.n	800570a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4413      	add	r3, r2
 80056ba:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 80056be:	7fbb      	ldrb	r3, [r7, #30]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4413      	add	r3, r2
 80056c6:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 80056ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d2:	d41a      	bmi.n	800570a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	4413      	add	r3, r2
 80056dc:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 80056e0:	7fbb      	ldrb	r3, [r7, #30]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	4413      	add	r3, r2
 80056e8:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 80056ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	d104      	bne.n	8005700 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056fe:	e004      	b.n	800570a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8005708:	e006      	b.n	8005718 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 800570a:	7fbb      	ldrb	r3, [r7, #30]
 800570c:	3301      	adds	r3, #1
 800570e:	77bb      	strb	r3, [r7, #30]
 8005710:	7fba      	ldrb	r2, [r7, #30]
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	429a      	cmp	r2, r3
 8005716:	d3c6      	bcc.n	80056a6 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8005718:	7fba      	ldrb	r2, [r7, #30]
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	429a      	cmp	r2, r3
 800571e:	d10a      	bne.n	8005736 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8005720:	7ffa      	ldrb	r2, [r7, #31]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8005734:	e006      	b.n	8005744 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8005736:	7ffb      	ldrb	r3, [r7, #31]
 8005738:	3301      	adds	r3, #1
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	7ffa      	ldrb	r2, [r7, #31]
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3ad      	bcc.n	80056a0 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d076      	beq.n	800583c <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e06e      	b.n	8005832 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4413      	add	r3, r2
 800575c:	edd3 6a00 	vldr	s13, [r3]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 800576e:	2300      	movs	r3, #0
 8005770:	77bb      	strb	r3, [r7, #30]
 8005772:	e045      	b.n	8005800 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8005774:	7fbb      	ldrb	r3, [r7, #30]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4413      	add	r3, r2
 800577c:	edd3 6a00 	vldr	s13, [r3]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 800578e:	7ffa      	ldrb	r2, [r7, #31]
 8005790:	7fbb      	ldrb	r3, [r7, #30]
 8005792:	429a      	cmp	r2, r3
 8005794:	d101      	bne.n	800579a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8005796:	bf00      	nop
 8005798:	e02f      	b.n	80057fa <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 800579a:	edd7 7a06 	vldr	s15, [r7, #24]
 800579e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a2:	eef4 7a47 	vcmp.f32	s15, s14
 80057a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057aa:	d11c      	bne.n	80057e6 <findLesserValue+0x166>
 80057ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80057b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b4:	eef4 7a47 	vcmp.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	d113      	bne.n	80057e6 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4413      	add	r3, r2
 80057c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80057ca:	7fbb      	ldrb	r3, [r7, #30]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80057d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	d900      	bls.n	80057e2 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 80057e0:	e014      	b.n	800580c <findLesserValue+0x18c>
						__NOP();
 80057e2:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 80057e4:	e009      	b.n	80057fa <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 80057e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80057ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ee:	eef4 7a47 	vcmp.f32	s15, s14
 80057f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f6:	d108      	bne.n	800580a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 80057f8:	bf00      	nop
			for(j = 0; j<contador ; j++){
 80057fa:	7fbb      	ldrb	r3, [r7, #30]
 80057fc:	3301      	adds	r3, #1
 80057fe:	77bb      	strb	r3, [r7, #30]
 8005800:	7fba      	ldrb	r2, [r7, #30]
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3b5      	bcc.n	8005774 <findLesserValue+0xf4>
 8005808:	e000      	b.n	800580c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 800580a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 800580c:	7fba      	ldrb	r2, [r7, #30]
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	429a      	cmp	r2, r3
 8005812:	d10b      	bne.n	800582c <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8005814:	7ffa      	ldrb	r2, [r7, #31]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 800581a:	7ffb      	ldrb	r3, [r7, #31]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8005828:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 800582a:	e008      	b.n	800583e <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 800582c:	7ffb      	ldrb	r3, [r7, #31]
 800582e:	3301      	adds	r3, #1
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	7ffa      	ldrb	r2, [r7, #31]
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	429a      	cmp	r2, r3
 8005838:	d38c      	bcc.n	8005754 <findLesserValue+0xd4>
}
 800583a:	e000      	b.n	800583e <findLesserValue+0x1be>
		__NOP();
 800583c:	bf00      	nop
}
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <initSerialComunication+0xc8>)
 800585e:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <initSerialComunication+0xc8>)
 8005866:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	79da      	ldrb	r2, [r3, #7]
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <initSerialComunication+0xc8>)
 800586e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	791a      	ldrb	r2, [r3, #4]
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <initSerialComunication+0xc8>)
 8005876:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	799a      	ldrb	r2, [r3, #6]
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <initSerialComunication+0xc8>)
 800587e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	7a5a      	ldrb	r2, [r3, #9]
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <initSerialComunication+0xc8>)
 8005886:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	7a9a      	ldrb	r2, [r3, #10]
 800588c:	4b21      	ldr	r3, [pc, #132]	; (8005914 <initSerialComunication+0xc8>)
 800588e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	7a1a      	ldrb	r2, [r3, #8]
 8005894:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <initSerialComunication+0xc8>)
 8005896:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <initSerialComunication+0xcc>)
 800589e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	7a5a      	ldrb	r2, [r3, #9]
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <initSerialComunication+0xcc>)
 80058a6:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	795a      	ldrb	r2, [r3, #5]
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <initSerialComunication+0xcc>)
 80058ae:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	7a1a      	ldrb	r2, [r3, #8]
 80058b4:	4b18      	ldr	r3, [pc, #96]	; (8005918 <initSerialComunication+0xcc>)
 80058b6:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791a      	ldrb	r2, [r3, #4]
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <initSerialComunication+0xcc>)
 80058be:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	79da      	ldrb	r2, [r3, #7]
 80058c4:	4b14      	ldr	r3, [pc, #80]	; (8005918 <initSerialComunication+0xcc>)
 80058c6:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	799a      	ldrb	r2, [r3, #6]
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <initSerialComunication+0xcc>)
 80058ce:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <initSerialComunication+0xd0>)
 80058d6:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7a5a      	ldrb	r2, [r3, #9]
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <initSerialComunication+0xd0>)
 80058de:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	795a      	ldrb	r2, [r3, #5]
 80058e4:	4b0d      	ldr	r3, [pc, #52]	; (800591c <initSerialComunication+0xd0>)
 80058e6:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7a1a      	ldrb	r2, [r3, #8]
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <initSerialComunication+0xd0>)
 80058ee:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	791a      	ldrb	r2, [r3, #4]
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <initSerialComunication+0xd0>)
 80058f6:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	79da      	ldrb	r2, [r3, #7]
 80058fc:	4b07      	ldr	r3, [pc, #28]	; (800591c <initSerialComunication+0xd0>)
 80058fe:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	799a      	ldrb	r2, [r3, #6]
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <initSerialComunication+0xd0>)
 8005906:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20001688 	.word	0x20001688
 8005918:	2000171c 	.word	0x2000171c
 800591c:	20001728 	.word	0x20001728

08005920 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 8005920:	b580      	push	{r7, lr}
 8005922:	b08e      	sub	sp, #56	; 0x38
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9c1 2300 	strd	r2, r3, [r1]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005974:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800598c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800598e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8005992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005994:	ed93 7b04 	vldr	d7, [r3, #16]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	3310      	adds	r3, #16
 800599c:	4618      	mov	r0, r3
 800599e:	eeb0 0a47 	vmov.f32	s0, s14
 80059a2:	eef0 0a67 	vmov.f32	s1, s15
 80059a6:	f002 fd85 	bl	80084b4 <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059b0:	e06f      	b.n	8005a92 <create_Astar_operations+0x172>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 80059b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4413      	add	r3, r2
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c2:	3301      	adds	r3, #1
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	440b      	add	r3, r1
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e0:	ee17 0a90 	vmov	r0, s15
 80059e4:	f7fa fdc8 	bl	8000578 <__aeabi_f2d>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 80059f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f4:	3301      	adds	r3, #1
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4413      	add	r3, r2
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	440b      	add	r3, r1
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	edd3 7a00 	vldr	s15, [r3]
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	ee17 0a90 	vmov	r0, s15
 8005a22:	f7fa fda9 	bl	8000578 <__aeabi_f2d>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 8005a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a36:	f7fa fc41 	bl	80002bc <__adddf3>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 8005a42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a4a:	f7fa fc37 	bl	80002bc <__adddf3>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 8005a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a5c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 8005a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a66:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8005a6a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005a6e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 f9af 	bl	8007dd8 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8005a7a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005a7e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005a82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a84:	f002 fa8c 	bl	8007fa0 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	7a9b      	ldrb	r3, [r3, #10]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	db88      	blt.n	80059b2 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa6:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8005ad0 <create_Astar_operations+0x1b0>
 8005aaa:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8005ad0 <create_Astar_operations+0x1b0>
 8005aae:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8005ad0 <create_Astar_operations+0x1b0>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fa2e 	bl	8007f18 <add_Operation>
	ptrbuild->number_operation = 0;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


}
 8005ac4:	bf00      	nop
 8005ac6:	3738      	adds	r7, #56	; 0x38
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	f3af 8000 	nop.w
	...

08005ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db0b      	blt.n	8005b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	f003 021f 	and.w	r2, r3, #31
 8005af0:	4907      	ldr	r1, [pc, #28]	; (8005b10 <__NVIC_EnableIRQ+0x38>)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2001      	movs	r0, #1
 8005afa:	fa00 f202 	lsl.w	r2, r0, r2
 8005afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	e000e100 	.word	0xe000e100

08005b14 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <inTIM4+0x30>)
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <inTIM4+0x34>)
 8005b1c:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <inTIM4+0x30>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <inTIM4+0x30>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <inTIM4+0x30>)
 8005b2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b30:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <inTIM4+0x30>)
 8005b34:	220a      	movs	r2, #10
 8005b36:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8005b38:	4802      	ldr	r0, [pc, #8]	; (8005b44 <inTIM4+0x30>)
 8005b3a:	f000 f807 	bl	8005b4c <BasicTimer_Config>

}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200002d8 	.word	0x200002d8
 8005b48:	40000800 	.word	0x40000800

08005b4c <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b5c:	b672      	cpsid	i
}
 8005b5e:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a85      	ldr	r2, [pc, #532]	; (8005d7c <BasicTimer_Config+0x230>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d106      	bne.n	8005b78 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005b6a:	4b85      	ldr	r3, [pc, #532]	; (8005d80 <BasicTimer_Config+0x234>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	4a84      	ldr	r2, [pc, #528]	; (8005d80 <BasicTimer_Config+0x234>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6453      	str	r3, [r2, #68]	; 0x44
 8005b76:	e030      	b.n	8005bda <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d106      	bne.n	8005b90 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005b82:	4b7f      	ldr	r3, [pc, #508]	; (8005d80 <BasicTimer_Config+0x234>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	4a7e      	ldr	r2, [pc, #504]	; (8005d80 <BasicTimer_Config+0x234>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8e:	e024      	b.n	8005bda <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7b      	ldr	r2, [pc, #492]	; (8005d84 <BasicTimer_Config+0x238>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d106      	bne.n	8005ba8 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005b9a:	4b79      	ldr	r3, [pc, #484]	; (8005d80 <BasicTimer_Config+0x234>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a78      	ldr	r2, [pc, #480]	; (8005d80 <BasicTimer_Config+0x234>)
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	e018      	b.n	8005bda <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a76      	ldr	r2, [pc, #472]	; (8005d88 <BasicTimer_Config+0x23c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d106      	bne.n	8005bc0 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005bb2:	4b73      	ldr	r3, [pc, #460]	; (8005d80 <BasicTimer_Config+0x234>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a72      	ldr	r2, [pc, #456]	; (8005d80 <BasicTimer_Config+0x234>)
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	e00c      	b.n	8005bda <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a71      	ldr	r2, [pc, #452]	; (8005d8c <BasicTimer_Config+0x240>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d106      	bne.n	8005bd8 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005bca:	4b6d      	ldr	r3, [pc, #436]	; (8005d80 <BasicTimer_Config+0x234>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	4a6c      	ldr	r2, [pc, #432]	; (8005d80 <BasicTimer_Config+0x234>)
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd6:	e000      	b.n	8005bda <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8005bd8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005be8:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	791b      	ldrb	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 80d3 	bne.w	8005da4 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0210 	bic.w	r2, r2, #16
 8005c0c:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2ba0      	cmp	r3, #160	; 0xa0
 8005c18:	d022      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2bc8      	cmp	r3, #200	; 0xc8
 8005c1e:	d01f      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005c26:	d01b      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005c2e:	d017      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c36:	d013      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005c3e:	d00f      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005c46:	d00b      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005c4e:	d007      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005c56:	d003      	beq.n	8005c60 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d10b      	bne.n	8005c78 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2264      	movs	r2, #100	; 0x64
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	3a01      	subs	r2, #1
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c76:	e07c      	b.n	8005d72 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c7e:	d029      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c86:	d025      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d020      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005c98:	d01c      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d017      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f241 7270 	movw	r2, #6000	; 0x1770
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d012      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00d      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005cbe:	d009      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f242 3228 	movw	r2, #9000	; 0x2328
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cec:	e041      	b.n	8005d72 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005cf4:	d028      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d023      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f247 5230 	movw	r2, #30000	; 0x7530
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01e      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d019      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d014      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <BasicTimer_Config+0x244>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <BasicTimer_Config+0x248>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <BasicTimer_Config+0x24c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4a16      	ldr	r2, [pc, #88]	; (8005d9c <BasicTimer_Config+0x250>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	3a01      	subs	r2, #1
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d58:	e00b      	b.n	8005d72 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <BasicTimer_Config+0x254>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	08db      	lsrs	r3, r3, #3
 8005d66:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	3a01      	subs	r2, #1
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7a:	e027      	b.n	8005dcc <BasicTimer_Config+0x280>
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	00011170 	.word	0x00011170
 8005d94:	00013880 	.word	0x00013880
 8005d98:	00015f90 	.word	0x00015f90
 8005d9c:	000186a0 	.word	0x000186a0
 8005da0:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0210 	orr.w	r2, r2, #16
 8005db2:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3a01      	subs	r2, #1
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7c1b      	ldrb	r3, [r3, #16]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d12d      	bne.n	8005e30 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d103      	bne.n	8005df6 <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8005dee:	201c      	movs	r0, #28
 8005df0:	f7ff fe72 	bl	8005ad8 <__NVIC_EnableIRQ>
 8005df4:	e024      	b.n	8005e40 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <BasicTimer_Config+0x300>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8005e00:	201d      	movs	r0, #29
 8005e02:	f7ff fe69 	bl	8005ad8 <__NVIC_EnableIRQ>
 8005e06:	e01b      	b.n	8005e40 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <BasicTimer_Config+0x304>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d103      	bne.n	8005e1a <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8005e12:	201e      	movs	r0, #30
 8005e14:	f7ff fe60 	bl	8005ad8 <__NVIC_EnableIRQ>
 8005e18:	e012      	b.n	8005e40 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a0d      	ldr	r2, [pc, #52]	; (8005e54 <BasicTimer_Config+0x308>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d103      	bne.n	8005e2c <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8005e24:	2032      	movs	r0, #50	; 0x32
 8005e26:	f7ff fe57 	bl	8005ad8 <__NVIC_EnableIRQ>
 8005e2a:	e009      	b.n	8005e40 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8005e2c:	bf00      	nop
 8005e2e:	e007      	b.n	8005e40 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e40:	b662      	cpsie	i
}
 8005e42:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00

08005e58 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8005e62:	4818      	ldr	r0, [pc, #96]	; (8005ec4 <delay_ms+0x6c>)
 8005e64:	f000 fa6e 	bl	8006344 <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	0092      	lsls	r2, r2, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8005e7c:	e016      	b.n	8005eac <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <delay_ms+0x6c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <delay_ms+0x6c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	3301      	adds	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	89fb      	ldrh	r3, [r7, #14]
 8005e98:	4413      	add	r3, r2
 8005e9a:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <delay_ms+0x6c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <delay_ms+0x6c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8005eac:	89fa      	ldrh	r2, [r7, #14]
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3e4      	bcc.n	8005e7e <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8005eb4:	4803      	ldr	r0, [pc, #12]	; (8005ec4 <delay_ms+0x6c>)
 8005eb6:	f000 fa57 	bl	8006368 <stopTimer>
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200002d8 	.word	0x200002d8

08005ec8 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005ecc:	bf00      	nop
}
 8005ece:	bf00      	nop
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005edc:	bf00      	nop
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005eec:	bf00      	nop
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005efc:	bf00      	nop
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f0c:	bf00      	nop
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f1c:	bf00      	nop
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f2c:	bf00      	nop
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f3c:	bf00      	nop
}
 8005f3e:	bf00      	nop
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f4c:	bf00      	nop
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f5c:	bf00      	nop
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f6c:	bf00      	nop
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f7c:	bf00      	nop
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f8c:	bf00      	nop
}
 8005f8e:	bf00      	nop
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005f9c:	bf00      	nop
}
 8005f9e:	bf00      	nop
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005fac:	bf00      	nop
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005fbc:	bf00      	nop
}
 8005fbe:	bf00      	nop
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005fcc:	bf00      	nop
}
 8005fce:	bf00      	nop
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8005fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8005ffa:	f7fb ff59 	bl	8001eb0 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8005ffe:	e066      	b.n	80060ce <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8006000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 800600e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006018:	f023 0302 	bic.w	r3, r3, #2
 800601c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 800601e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800602c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800602e:	f7ff ff5b 	bl	8005ee8 <Capture_TIM2_Ch1_Callback>
}
 8006032:	e04c      	b.n	80060ce <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8006034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d012      	beq.n	8006068 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8006042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800604c:	f023 0304 	bic.w	r3, r3, #4
 8006050:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8006052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800605c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006060:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8006062:	f7ff ff49 	bl	8005ef8 <Capture_TIM2_Ch2_Callback>
}
 8006066:	e032      	b.n	80060ce <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d012      	beq.n	800609c <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8006076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006080:	f023 0308 	bic.w	r3, r3, #8
 8006084:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8006086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006094:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8006096:	f7ff ff37 	bl	8005f08 <Capture_TIM2_Ch3_Callback>
}
 800609a:	e018      	b.n	80060ce <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 800609c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d011      	beq.n	80060ce <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80060aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80060ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80060ca:	f7ff ff25 	bl	8005f18 <Capture_TIM2_Ch4_Callback>
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80060d8:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80060e4:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	4a2d      	ldr	r2, [pc, #180]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80060f0:	f7fb fed4 	bl	8001e9c <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80060f4:	e052      	b.n	800619c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006108:	f023 0302 	bic.w	r3, r3, #2
 800610c:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006118:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 800611a:	f7ff ff05 	bl	8005f28 <Capture_TIM3_Ch1_Callback>
}
 800611e:	e03d      	b.n	800619c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8006120:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 800612c:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006132:	f023 0304 	bic.w	r3, r3, #4
 8006136:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8006138:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800613e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006142:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8006144:	f7ff fef8 	bl	8005f38 <Capture_TIM3_Ch2_Callback>
}
 8006148:	e028      	b.n	800619c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8006156:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800615c:	f023 0308 	bic.w	r3, r3, #8
 8006160:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800616e:	f7ff feeb 	bl	8005f48 <Capture_TIM3_Ch3_Callback>
}
 8006172:	e013      	b.n	800619c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006186:	f023 0310 	bic.w	r3, r3, #16
 800618a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <TIM3_IRQHandler+0xcc>)
 8006192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006196:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006198:	f7ff fede 	bl	8005f58 <Capture_TIM3_Ch4_Callback>
}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40000400 	.word	0x40000400

080061a4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80061a8:	4b31      	ldr	r3, [pc, #196]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80061b4:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80061c0:	f7ff fe82 	bl	8005ec8 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80061c4:	e052      	b.n	800626c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80061c6:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80061d2:	4b27      	ldr	r3, [pc, #156]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	4a26      	ldr	r2, [pc, #152]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061d8:	f023 0302 	bic.w	r3, r3, #2
 80061dc:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80061de:	4b24      	ldr	r3, [pc, #144]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	4a23      	ldr	r2, [pc, #140]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e8:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80061ea:	f7ff febd 	bl	8005f68 <Capture_TIM4_Ch1_Callback>
}
 80061ee:	e03d      	b.n	800626c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80061f0:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <TIM4_IRQHandler+0xcc>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006202:	f023 0304 	bic.w	r3, r3, #4
 8006206:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8006208:	4b19      	ldr	r3, [pc, #100]	; (8006270 <TIM4_IRQHandler+0xcc>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	4a18      	ldr	r2, [pc, #96]	; (8006270 <TIM4_IRQHandler+0xcc>)
 800620e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006212:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8006214:	f7ff fec8 	bl	8005fa8 <Capture_TIM5_Ch2_Callback>
}
 8006218:	e028      	b.n	800626c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <TIM4_IRQHandler+0xcc>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00e      	beq.n	8006244 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4a11      	ldr	r2, [pc, #68]	; (8006270 <TIM4_IRQHandler+0xcc>)
 800622c:	f023 0308 	bic.w	r3, r3, #8
 8006230:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	4a0e      	ldr	r2, [pc, #56]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800623e:	f7ff fe9b 	bl	8005f78 <Capture_TIM4_Ch3_Callback>
}
 8006242:	e013      	b.n	800626c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4a06      	ldr	r2, [pc, #24]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <TIM4_IRQHandler+0xcc>)
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4a03      	ldr	r2, [pc, #12]	; (8006270 <TIM4_IRQHandler+0xcc>)
 8006262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006266:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006268:	f7ff fe8e 	bl	8005f88 <Capture_TIM4_Ch4_Callback>
}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40000800 	.word	0x40000800

08006274 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006278:	4b31      	ldr	r3, [pc, #196]	; (8006340 <TIM5_IRQHandler+0xcc>)
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8006284:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <TIM5_IRQHandler+0xcc>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006290:	f7ff fe22 	bl	8005ed8 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8006294:	e052      	b.n	800633c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8006296:	4b2a      	ldr	r3, [pc, #168]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80062a2:	4b27      	ldr	r3, [pc, #156]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	4a26      	ldr	r2, [pc, #152]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062a8:	f023 0302 	bic.w	r3, r3, #2
 80062ac:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4a23      	ldr	r2, [pc, #140]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80062ba:	f7ff fe6d 	bl	8005f98 <Capture_TIM5_Ch1_Callback>
}
 80062be:	e03d      	b.n	800633c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062d2:	f023 0304 	bic.w	r3, r3, #4
 80062d6:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062e2:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80062e4:	f7ff fe60 	bl	8005fa8 <Capture_TIM5_Ch2_Callback>
}
 80062e8:	e028      	b.n	800633c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <TIM5_IRQHandler+0xcc>)
 80062fc:	f023 0308 	bic.w	r3, r3, #8
 8006300:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800630c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 800630e:	f7ff fe53 	bl	8005fb8 <Capture_TIM5_Ch3_Callback>
}
 8006312:	e013      	b.n	800633c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a06      	ldr	r2, [pc, #24]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006326:	f023 0310 	bic.w	r3, r3, #16
 800632a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <TIM5_IRQHandler+0xcc>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	4a03      	ldr	r2, [pc, #12]	; (8006340 <TIM5_IRQHandler+0xcc>)
 8006332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006336:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8006338:	f7ff fe46 	bl	8005fc8 <Capture_TIM5_Ch4_Callback>
}
 800633c:	bf00      	nop
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40000c00 	.word	0x40000c00

08006344 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <__NVIC_EnableIRQ>:
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639a:	2b00      	cmp	r3, #0
 800639c:	db0b      	blt.n	80063b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	f003 021f 	and.w	r2, r3, #31
 80063a4:	4907      	ldr	r1, [pc, #28]	; (80063c4 <__NVIC_EnableIRQ+0x38>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	2001      	movs	r0, #1
 80063ae:	fa00 f202 	lsl.w	r2, r0, r2
 80063b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	e000e100 	.word	0xe000e100

080063c8 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 f825 	bl	8007424 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80063da:	4b96      	ldr	r3, [pc, #600]	; (8006634 <extInt_Config+0x26c>)
 80063dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	791b      	ldrb	r3, [r3, #4]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	f200 85cd 	bhi.w	8006f88 <extInt_Config+0xbc0>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <extInt_Config+0x2c>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006435 	.word	0x08006435
 80063f8:	080064eb 	.word	0x080064eb
 80063fc:	080065a1 	.word	0x080065a1
 8006400:	08006677 	.word	0x08006677
 8006404:	0800672d 	.word	0x0800672d
 8006408:	080067db 	.word	0x080067db
 800640c:	080068a1 	.word	0x080068a1
 8006410:	08006949 	.word	0x08006949
 8006414:	080069f1 	.word	0x080069f1
 8006418:	08006a99 	.word	0x08006a99
 800641c:	08006b5f 	.word	0x08006b5f
 8006420:	08006c07 	.word	0x08006c07
 8006424:	08006caf 	.word	0x08006caf
 8006428:	08006d75 	.word	0x08006d75
 800642c:	08006e1b 	.word	0x08006e1b
 8006430:	08006ec3 	.word	0x08006ec3
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006434:	4b80      	ldr	r3, [pc, #512]	; (8006638 <extInt_Config+0x270>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a7f      	ldr	r2, [pc, #508]	; (8006638 <extInt_Config+0x270>)
 800643a:	f023 030f 	bic.w	r3, r3, #15
 800643e:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a7d      	ldr	r2, [pc, #500]	; (800663c <extInt_Config+0x274>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d105      	bne.n	8006458 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 800644c:	4b7a      	ldr	r3, [pc, #488]	; (8006638 <extInt_Config+0x270>)
 800644e:	4a7a      	ldr	r2, [pc, #488]	; (8006638 <extInt_Config+0x270>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006454:	f000 bd9a 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a78      	ldr	r2, [pc, #480]	; (8006640 <extInt_Config+0x278>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d107      	bne.n	8006474 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006464:	4b74      	ldr	r3, [pc, #464]	; (8006638 <extInt_Config+0x270>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4a73      	ldr	r2, [pc, #460]	; (8006638 <extInt_Config+0x270>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6093      	str	r3, [r2, #8]
					break;
 8006470:	f000 bd8c 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a72      	ldr	r2, [pc, #456]	; (8006644 <extInt_Config+0x27c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d107      	bne.n	8006490 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8006480:	4b6d      	ldr	r3, [pc, #436]	; (8006638 <extInt_Config+0x270>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4a6c      	ldr	r2, [pc, #432]	; (8006638 <extInt_Config+0x270>)
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	6093      	str	r3, [r2, #8]
					break;
 800648c:	f000 bd7e 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a6c      	ldr	r2, [pc, #432]	; (8006648 <extInt_Config+0x280>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d107      	bne.n	80064ac <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800649c:	4b66      	ldr	r3, [pc, #408]	; (8006638 <extInt_Config+0x270>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a65      	ldr	r2, [pc, #404]	; (8006638 <extInt_Config+0x270>)
 80064a2:	f043 0303 	orr.w	r3, r3, #3
 80064a6:	6093      	str	r3, [r2, #8]
					break;
 80064a8:	f000 bd70 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a66      	ldr	r2, [pc, #408]	; (800664c <extInt_Config+0x284>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d107      	bne.n	80064c8 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80064b8:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <extInt_Config+0x270>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a5e      	ldr	r2, [pc, #376]	; (8006638 <extInt_Config+0x270>)
 80064be:	f043 0304 	orr.w	r3, r3, #4
 80064c2:	6093      	str	r3, [r2, #8]
					break;
 80064c4:	f000 bd62 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a60      	ldr	r2, [pc, #384]	; (8006650 <extInt_Config+0x288>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d107      	bne.n	80064e4 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80064d4:	4b58      	ldr	r3, [pc, #352]	; (8006638 <extInt_Config+0x270>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a57      	ldr	r2, [pc, #348]	; (8006638 <extInt_Config+0x270>)
 80064da:	f043 0307 	orr.w	r3, r3, #7
 80064de:	6093      	str	r3, [r2, #8]
					break;
 80064e0:	f000 bd54 	b.w	8006f8c <extInt_Config+0xbc4>
						__NOP();
 80064e4:	bf00      	nop
					break;
 80064e6:	f000 bd51 	b.w	8006f8c <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80064ea:	4b53      	ldr	r3, [pc, #332]	; (8006638 <extInt_Config+0x270>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4a52      	ldr	r2, [pc, #328]	; (8006638 <extInt_Config+0x270>)
 80064f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f4:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a4f      	ldr	r2, [pc, #316]	; (800663c <extInt_Config+0x274>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d105      	bne.n	800650e <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8006502:	4b4d      	ldr	r3, [pc, #308]	; (8006638 <extInt_Config+0x270>)
 8006504:	4a4c      	ldr	r2, [pc, #304]	; (8006638 <extInt_Config+0x270>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800650a:	f000 bd3f 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a4a      	ldr	r2, [pc, #296]	; (8006640 <extInt_Config+0x278>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d107      	bne.n	800652a <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800651a:	4b47      	ldr	r3, [pc, #284]	; (8006638 <extInt_Config+0x270>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4a46      	ldr	r2, [pc, #280]	; (8006638 <extInt_Config+0x270>)
 8006520:	f043 0310 	orr.w	r3, r3, #16
 8006524:	6093      	str	r3, [r2, #8]
					break;
 8006526:	f000 bd31 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a44      	ldr	r2, [pc, #272]	; (8006644 <extInt_Config+0x27c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d107      	bne.n	8006546 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8006536:	4b40      	ldr	r3, [pc, #256]	; (8006638 <extInt_Config+0x270>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4a3f      	ldr	r2, [pc, #252]	; (8006638 <extInt_Config+0x270>)
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	6093      	str	r3, [r2, #8]
					break;
 8006542:	f000 bd23 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a3e      	ldr	r2, [pc, #248]	; (8006648 <extInt_Config+0x280>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d107      	bne.n	8006562 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8006552:	4b39      	ldr	r3, [pc, #228]	; (8006638 <extInt_Config+0x270>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	4a38      	ldr	r2, [pc, #224]	; (8006638 <extInt_Config+0x270>)
 8006558:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800655c:	6093      	str	r3, [r2, #8]
					break;
 800655e:	f000 bd15 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a38      	ldr	r2, [pc, #224]	; (800664c <extInt_Config+0x284>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d107      	bne.n	800657e <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800656e:	4b32      	ldr	r3, [pc, #200]	; (8006638 <extInt_Config+0x270>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4a31      	ldr	r2, [pc, #196]	; (8006638 <extInt_Config+0x270>)
 8006574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006578:	6093      	str	r3, [r2, #8]
					break;
 800657a:	f000 bd07 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a32      	ldr	r2, [pc, #200]	; (8006650 <extInt_Config+0x288>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d107      	bne.n	800659a <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800658a:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <extInt_Config+0x270>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <extInt_Config+0x270>)
 8006590:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006594:	6093      	str	r3, [r2, #8]
					break;
 8006596:	f000 bcf9 	b.w	8006f8c <extInt_Config+0xbc4>
						__NOP();
 800659a:	bf00      	nop
					break;
 800659c:	f000 bcf6 	b.w	8006f8c <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <extInt_Config+0x270>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a24      	ldr	r2, [pc, #144]	; (8006638 <extInt_Config+0x270>)
 80065a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065aa:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a22      	ldr	r2, [pc, #136]	; (800663c <extInt_Config+0x274>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d105      	bne.n	80065c4 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80065b8:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <extInt_Config+0x270>)
 80065ba:	4a1f      	ldr	r2, [pc, #124]	; (8006638 <extInt_Config+0x270>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80065c0:	f000 bce4 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <extInt_Config+0x278>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d107      	bne.n	80065e0 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <extInt_Config+0x270>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <extInt_Config+0x270>)
 80065d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065da:	6093      	str	r3, [r2, #8]
					break;
 80065dc:	f000 bcd6 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <extInt_Config+0x27c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d107      	bne.n	80065fc <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80065ec:	4b12      	ldr	r3, [pc, #72]	; (8006638 <extInt_Config+0x270>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a11      	ldr	r2, [pc, #68]	; (8006638 <extInt_Config+0x270>)
 80065f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065f6:	6093      	str	r3, [r2, #8]
					break;
 80065f8:	f000 bcc8 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a11      	ldr	r2, [pc, #68]	; (8006648 <extInt_Config+0x280>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d107      	bne.n	8006618 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <extInt_Config+0x270>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4a0a      	ldr	r2, [pc, #40]	; (8006638 <extInt_Config+0x270>)
 800660e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006612:	6093      	str	r3, [r2, #8]
					break;
 8006614:	f000 bcba 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a0b      	ldr	r2, [pc, #44]	; (800664c <extInt_Config+0x284>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d117      	bne.n	8006654 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <extInt_Config+0x270>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4a03      	ldr	r2, [pc, #12]	; (8006638 <extInt_Config+0x270>)
 800662a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800662e:	6093      	str	r3, [r2, #8]
					break;
 8006630:	f000 bcac 	b.w	8006f8c <extInt_Config+0xbc4>
 8006634:	40023800 	.word	0x40023800
 8006638:	40013800 	.word	0x40013800
 800663c:	40020000 	.word	0x40020000
 8006640:	40020400 	.word	0x40020400
 8006644:	40020800 	.word	0x40020800
 8006648:	40020c00 	.word	0x40020c00
 800664c:	40021000 	.word	0x40021000
 8006650:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a8a      	ldr	r2, [pc, #552]	; (8006884 <extInt_Config+0x4bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d107      	bne.n	8006670 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8006660:	4b89      	ldr	r3, [pc, #548]	; (8006888 <extInt_Config+0x4c0>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a88      	ldr	r2, [pc, #544]	; (8006888 <extInt_Config+0x4c0>)
 8006666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800666a:	6093      	str	r3, [r2, #8]
					break;
 800666c:	f000 bc8e 	b.w	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006670:	bf00      	nop
					break;
 8006672:	f000 bc8b 	b.w	8006f8c <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8006676:	4b84      	ldr	r3, [pc, #528]	; (8006888 <extInt_Config+0x4c0>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	4a83      	ldr	r2, [pc, #524]	; (8006888 <extInt_Config+0x4c0>)
 800667c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006680:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a80      	ldr	r2, [pc, #512]	; (800688c <extInt_Config+0x4c4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d105      	bne.n	800669a <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800668e:	4b7e      	ldr	r3, [pc, #504]	; (8006888 <extInt_Config+0x4c0>)
 8006690:	4a7d      	ldr	r2, [pc, #500]	; (8006888 <extInt_Config+0x4c0>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006696:	f000 bc79 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a7b      	ldr	r2, [pc, #492]	; (8006890 <extInt_Config+0x4c8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d107      	bne.n	80066b6 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80066a6:	4b78      	ldr	r3, [pc, #480]	; (8006888 <extInt_Config+0x4c0>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	4a77      	ldr	r2, [pc, #476]	; (8006888 <extInt_Config+0x4c0>)
 80066ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066b0:	6093      	str	r3, [r2, #8]
					break;
 80066b2:	f000 bc6b 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a75      	ldr	r2, [pc, #468]	; (8006894 <extInt_Config+0x4cc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d107      	bne.n	80066d2 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80066c2:	4b71      	ldr	r3, [pc, #452]	; (8006888 <extInt_Config+0x4c0>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	4a70      	ldr	r2, [pc, #448]	; (8006888 <extInt_Config+0x4c0>)
 80066c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80066cc:	6093      	str	r3, [r2, #8]
					break;
 80066ce:	f000 bc5d 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6f      	ldr	r2, [pc, #444]	; (8006898 <extInt_Config+0x4d0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d107      	bne.n	80066ee <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80066de:	4b6a      	ldr	r3, [pc, #424]	; (8006888 <extInt_Config+0x4c0>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4a69      	ldr	r2, [pc, #420]	; (8006888 <extInt_Config+0x4c0>)
 80066e4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80066e8:	6093      	str	r3, [r2, #8]
					break;
 80066ea:	f000 bc4f 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a69      	ldr	r2, [pc, #420]	; (800689c <extInt_Config+0x4d4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d107      	bne.n	800670a <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80066fa:	4b63      	ldr	r3, [pc, #396]	; (8006888 <extInt_Config+0x4c0>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a62      	ldr	r2, [pc, #392]	; (8006888 <extInt_Config+0x4c0>)
 8006700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006704:	6093      	str	r3, [r2, #8]
					break;
 8006706:	f000 bc41 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a5c      	ldr	r2, [pc, #368]	; (8006884 <extInt_Config+0x4bc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d107      	bne.n	8006726 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8006716:	4b5c      	ldr	r3, [pc, #368]	; (8006888 <extInt_Config+0x4c0>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4a5b      	ldr	r2, [pc, #364]	; (8006888 <extInt_Config+0x4c0>)
 800671c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006720:	6093      	str	r3, [r2, #8]
					break;
 8006722:	f000 bc33 	b.w	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006726:	bf00      	nop
					break;
 8006728:	f000 bc30 	b.w	8006f8c <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 800672c:	4b56      	ldr	r3, [pc, #344]	; (8006888 <extInt_Config+0x4c0>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a55      	ldr	r2, [pc, #340]	; (8006888 <extInt_Config+0x4c0>)
 8006732:	f023 030f 	bic.w	r3, r3, #15
 8006736:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a53      	ldr	r2, [pc, #332]	; (800688c <extInt_Config+0x4c4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d105      	bne.n	8006750 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <extInt_Config+0x4c0>)
 8006746:	4a50      	ldr	r2, [pc, #320]	; (8006888 <extInt_Config+0x4c0>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800674c:	f000 bc1e 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a4e      	ldr	r2, [pc, #312]	; (8006890 <extInt_Config+0x4c8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d107      	bne.n	800676c <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800675c:	4b4a      	ldr	r3, [pc, #296]	; (8006888 <extInt_Config+0x4c0>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a49      	ldr	r2, [pc, #292]	; (8006888 <extInt_Config+0x4c0>)
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	60d3      	str	r3, [r2, #12]
					break;
 8006768:	f000 bc10 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a48      	ldr	r2, [pc, #288]	; (8006894 <extInt_Config+0x4cc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d107      	bne.n	8006788 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8006778:	4b43      	ldr	r3, [pc, #268]	; (8006888 <extInt_Config+0x4c0>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4a42      	ldr	r2, [pc, #264]	; (8006888 <extInt_Config+0x4c0>)
 800677e:	f043 0302 	orr.w	r3, r3, #2
 8006782:	60d3      	str	r3, [r2, #12]
					break;
 8006784:	f000 bc02 	b.w	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a42      	ldr	r2, [pc, #264]	; (8006898 <extInt_Config+0x4d0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d106      	bne.n	80067a2 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006794:	4b3c      	ldr	r3, [pc, #240]	; (8006888 <extInt_Config+0x4c0>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a3b      	ldr	r2, [pc, #236]	; (8006888 <extInt_Config+0x4c0>)
 800679a:	f043 0303 	orr.w	r3, r3, #3
 800679e:	60d3      	str	r3, [r2, #12]
					break;
 80067a0:	e3f4      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a3c      	ldr	r2, [pc, #240]	; (800689c <extInt_Config+0x4d4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d106      	bne.n	80067bc <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <extInt_Config+0x4c0>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	4a35      	ldr	r2, [pc, #212]	; (8006888 <extInt_Config+0x4c0>)
 80067b4:	f043 0304 	orr.w	r3, r3, #4
 80067b8:	60d3      	str	r3, [r2, #12]
					break;
 80067ba:	e3e7      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a30      	ldr	r2, [pc, #192]	; (8006884 <extInt_Config+0x4bc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d106      	bne.n	80067d6 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80067c8:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <extInt_Config+0x4c0>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a2e      	ldr	r2, [pc, #184]	; (8006888 <extInt_Config+0x4c0>)
 80067ce:	f043 0307 	orr.w	r3, r3, #7
 80067d2:	60d3      	str	r3, [r2, #12]
					break;
 80067d4:	e3da      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 80067d6:	bf00      	nop
					break;
 80067d8:	e3d8      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <extInt_Config+0x4c0>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	4a2a      	ldr	r2, [pc, #168]	; (8006888 <extInt_Config+0x4c0>)
 80067e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e4:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <extInt_Config+0x4c4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d104      	bne.n	80067fc <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <extInt_Config+0x4c0>)
 80067f4:	4a24      	ldr	r2, [pc, #144]	; (8006888 <extInt_Config+0x4c0>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80067fa:	e3c7      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a23      	ldr	r2, [pc, #140]	; (8006890 <extInt_Config+0x4c8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d106      	bne.n	8006816 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <extInt_Config+0x4c0>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <extInt_Config+0x4c0>)
 800680e:	f043 0310 	orr.w	r3, r3, #16
 8006812:	60d3      	str	r3, [r2, #12]
					break;
 8006814:	e3ba      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <extInt_Config+0x4cc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d106      	bne.n	8006830 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8006822:	4b19      	ldr	r3, [pc, #100]	; (8006888 <extInt_Config+0x4c0>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4a18      	ldr	r2, [pc, #96]	; (8006888 <extInt_Config+0x4c0>)
 8006828:	f043 0320 	orr.w	r3, r3, #32
 800682c:	60d3      	str	r3, [r2, #12]
					break;
 800682e:	e3ad      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <extInt_Config+0x4d0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d106      	bne.n	800684a <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <extInt_Config+0x4c0>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4a11      	ldr	r2, [pc, #68]	; (8006888 <extInt_Config+0x4c0>)
 8006842:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006846:	60d3      	str	r3, [r2, #12]
					break;
 8006848:	e3a0      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <extInt_Config+0x4d4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d106      	bne.n	8006864 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <extInt_Config+0x4c0>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4a0b      	ldr	r2, [pc, #44]	; (8006888 <extInt_Config+0x4c0>)
 800685c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006860:	60d3      	str	r3, [r2, #12]
					break;
 8006862:	e393      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a06      	ldr	r2, [pc, #24]	; (8006884 <extInt_Config+0x4bc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d106      	bne.n	800687e <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <extInt_Config+0x4c0>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4a04      	ldr	r2, [pc, #16]	; (8006888 <extInt_Config+0x4c0>)
 8006876:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800687a:	60d3      	str	r3, [r2, #12]
					break;
 800687c:	e386      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 800687e:	bf00      	nop
					break;
 8006880:	e384      	b.n	8006f8c <extInt_Config+0xbc4>
 8006882:	bf00      	nop
 8006884:	40021c00 	.word	0x40021c00
 8006888:	40013800 	.word	0x40013800
 800688c:	40020000 	.word	0x40020000
 8006890:	40020400 	.word	0x40020400
 8006894:	40020800 	.word	0x40020800
 8006898:	40020c00 	.word	0x40020c00
 800689c:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 80068a0:	4b86      	ldr	r3, [pc, #536]	; (8006abc <extInt_Config+0x6f4>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a85      	ldr	r2, [pc, #532]	; (8006abc <extInt_Config+0x6f4>)
 80068a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068aa:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a83      	ldr	r2, [pc, #524]	; (8006ac0 <extInt_Config+0x6f8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d104      	bne.n	80068c2 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80068b8:	4b80      	ldr	r3, [pc, #512]	; (8006abc <extInt_Config+0x6f4>)
 80068ba:	4a80      	ldr	r2, [pc, #512]	; (8006abc <extInt_Config+0x6f4>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80068c0:	e364      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7e      	ldr	r2, [pc, #504]	; (8006ac4 <extInt_Config+0x6fc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d106      	bne.n	80068dc <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80068ce:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <extInt_Config+0x6f4>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	4a7a      	ldr	r2, [pc, #488]	; (8006abc <extInt_Config+0x6f4>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d8:	60d3      	str	r3, [r2, #12]
					break;
 80068da:	e357      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a79      	ldr	r2, [pc, #484]	; (8006ac8 <extInt_Config+0x700>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d106      	bne.n	80068f6 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80068e8:	4b74      	ldr	r3, [pc, #464]	; (8006abc <extInt_Config+0x6f4>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a73      	ldr	r2, [pc, #460]	; (8006abc <extInt_Config+0x6f4>)
 80068ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f2:	60d3      	str	r3, [r2, #12]
					break;
 80068f4:	e34a      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a73      	ldr	r2, [pc, #460]	; (8006acc <extInt_Config+0x704>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d106      	bne.n	8006910 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8006902:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <extInt_Config+0x6f4>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a6d      	ldr	r2, [pc, #436]	; (8006abc <extInt_Config+0x6f4>)
 8006908:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800690c:	60d3      	str	r3, [r2, #12]
					break;
 800690e:	e33d      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6e      	ldr	r2, [pc, #440]	; (8006ad0 <extInt_Config+0x708>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d106      	bne.n	800692a <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800691c:	4b67      	ldr	r3, [pc, #412]	; (8006abc <extInt_Config+0x6f4>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4a66      	ldr	r2, [pc, #408]	; (8006abc <extInt_Config+0x6f4>)
 8006922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006926:	60d3      	str	r3, [r2, #12]
					break;
 8006928:	e330      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <extInt_Config+0x70c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d106      	bne.n	8006944 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8006936:	4b61      	ldr	r3, [pc, #388]	; (8006abc <extInt_Config+0x6f4>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a60      	ldr	r2, [pc, #384]	; (8006abc <extInt_Config+0x6f4>)
 800693c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006940:	60d3      	str	r3, [r2, #12]
					break;
 8006942:	e323      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006944:	bf00      	nop
					break;
 8006946:	e321      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8006948:	4b5c      	ldr	r3, [pc, #368]	; (8006abc <extInt_Config+0x6f4>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4a5b      	ldr	r2, [pc, #364]	; (8006abc <extInt_Config+0x6f4>)
 800694e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006952:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a59      	ldr	r2, [pc, #356]	; (8006ac0 <extInt_Config+0x6f8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d104      	bne.n	800696a <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8006960:	4b56      	ldr	r3, [pc, #344]	; (8006abc <extInt_Config+0x6f4>)
 8006962:	4a56      	ldr	r2, [pc, #344]	; (8006abc <extInt_Config+0x6f4>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006968:	e310      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a54      	ldr	r2, [pc, #336]	; (8006ac4 <extInt_Config+0x6fc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d106      	bne.n	8006984 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8006976:	4b51      	ldr	r3, [pc, #324]	; (8006abc <extInt_Config+0x6f4>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	4a50      	ldr	r2, [pc, #320]	; (8006abc <extInt_Config+0x6f4>)
 800697c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006980:	60d3      	str	r3, [r2, #12]
					break;
 8006982:	e303      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a4f      	ldr	r2, [pc, #316]	; (8006ac8 <extInt_Config+0x700>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d106      	bne.n	800699e <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006990:	4b4a      	ldr	r3, [pc, #296]	; (8006abc <extInt_Config+0x6f4>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a49      	ldr	r2, [pc, #292]	; (8006abc <extInt_Config+0x6f4>)
 8006996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800699a:	60d3      	str	r3, [r2, #12]
					break;
 800699c:	e2f6      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a49      	ldr	r2, [pc, #292]	; (8006acc <extInt_Config+0x704>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d106      	bne.n	80069b8 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80069aa:	4b44      	ldr	r3, [pc, #272]	; (8006abc <extInt_Config+0x6f4>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4a43      	ldr	r2, [pc, #268]	; (8006abc <extInt_Config+0x6f4>)
 80069b0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80069b4:	60d3      	str	r3, [r2, #12]
					break;
 80069b6:	e2e9      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a44      	ldr	r2, [pc, #272]	; (8006ad0 <extInt_Config+0x708>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d106      	bne.n	80069d2 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80069c4:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <extInt_Config+0x6f4>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <extInt_Config+0x6f4>)
 80069ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069ce:	60d3      	str	r3, [r2, #12]
					break;
 80069d0:	e2dc      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3e      	ldr	r2, [pc, #248]	; (8006ad4 <extInt_Config+0x70c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d106      	bne.n	80069ec <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <extInt_Config+0x6f4>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4a36      	ldr	r2, [pc, #216]	; (8006abc <extInt_Config+0x6f4>)
 80069e4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80069e8:	60d3      	str	r3, [r2, #12]
					break;
 80069ea:	e2cf      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 80069ec:	bf00      	nop
					break;
 80069ee:	e2cd      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 80069f0:	4b32      	ldr	r3, [pc, #200]	; (8006abc <extInt_Config+0x6f4>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	4a31      	ldr	r2, [pc, #196]	; (8006abc <extInt_Config+0x6f4>)
 80069f6:	f023 030f 	bic.w	r3, r3, #15
 80069fa:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <extInt_Config+0x6f8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d104      	bne.n	8006a12 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006a08:	4b2c      	ldr	r3, [pc, #176]	; (8006abc <extInt_Config+0x6f4>)
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <extInt_Config+0x6f4>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006a10:	e2bc      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <extInt_Config+0x6fc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d106      	bne.n	8006a2c <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006a1e:	4b27      	ldr	r3, [pc, #156]	; (8006abc <extInt_Config+0x6f4>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	4a26      	ldr	r2, [pc, #152]	; (8006abc <extInt_Config+0x6f4>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6113      	str	r3, [r2, #16]
					break;
 8006a2a:	e2af      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <extInt_Config+0x700>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d106      	bne.n	8006a46 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8006a38:	4b20      	ldr	r3, [pc, #128]	; (8006abc <extInt_Config+0x6f4>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <extInt_Config+0x6f4>)
 8006a3e:	f043 0302 	orr.w	r3, r3, #2
 8006a42:	6113      	str	r3, [r2, #16]
					break;
 8006a44:	e2a2      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <extInt_Config+0x704>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d106      	bne.n	8006a60 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8006a52:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <extInt_Config+0x6f4>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4a19      	ldr	r2, [pc, #100]	; (8006abc <extInt_Config+0x6f4>)
 8006a58:	f043 0303 	orr.w	r3, r3, #3
 8006a5c:	6113      	str	r3, [r2, #16]
					break;
 8006a5e:	e295      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <extInt_Config+0x708>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d106      	bne.n	8006a7a <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <extInt_Config+0x6f4>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <extInt_Config+0x6f4>)
 8006a72:	f043 0304 	orr.w	r3, r3, #4
 8006a76:	6113      	str	r3, [r2, #16]
					break;
 8006a78:	e288      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <extInt_Config+0x70c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d106      	bne.n	8006a94 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <extInt_Config+0x6f4>)
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <extInt_Config+0x6f4>)
 8006a8c:	f043 0307 	orr.w	r3, r3, #7
 8006a90:	6113      	str	r3, [r2, #16]
					break;
 8006a92:	e27b      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006a94:	bf00      	nop
					break;
 8006a96:	e279      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <extInt_Config+0x6f4>)
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	4a07      	ldr	r2, [pc, #28]	; (8006abc <extInt_Config+0x6f4>)
 8006a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa2:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a05      	ldr	r2, [pc, #20]	; (8006ac0 <extInt_Config+0x6f8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d113      	bne.n	8006ad8 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <extInt_Config+0x6f4>)
 8006ab2:	4a02      	ldr	r2, [pc, #8]	; (8006abc <extInt_Config+0x6f4>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006ab8:	e268      	b.n	8006f8c <extInt_Config+0xbc4>
 8006aba:	bf00      	nop
 8006abc:	40013800 	.word	0x40013800
 8006ac0:	40020000 	.word	0x40020000
 8006ac4:	40020400 	.word	0x40020400
 8006ac8:	40020800 	.word	0x40020800
 8006acc:	40020c00 	.word	0x40020c00
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a83      	ldr	r2, [pc, #524]	; (8006cec <extInt_Config+0x924>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d106      	bne.n	8006af2 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006ae4:	4b82      	ldr	r3, [pc, #520]	; (8006cf0 <extInt_Config+0x928>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	4a81      	ldr	r2, [pc, #516]	; (8006cf0 <extInt_Config+0x928>)
 8006aea:	f043 0310 	orr.w	r3, r3, #16
 8006aee:	6113      	str	r3, [r2, #16]
					break;
 8006af0:	e24c      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7e      	ldr	r2, [pc, #504]	; (8006cf4 <extInt_Config+0x92c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d106      	bne.n	8006b0c <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006afe:	4b7c      	ldr	r3, [pc, #496]	; (8006cf0 <extInt_Config+0x928>)
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	4a7b      	ldr	r2, [pc, #492]	; (8006cf0 <extInt_Config+0x928>)
 8006b04:	f043 0320 	orr.w	r3, r3, #32
 8006b08:	6113      	str	r3, [r2, #16]
					break;
 8006b0a:	e23f      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a79      	ldr	r2, [pc, #484]	; (8006cf8 <extInt_Config+0x930>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d106      	bne.n	8006b26 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006b18:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <extInt_Config+0x928>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4a74      	ldr	r2, [pc, #464]	; (8006cf0 <extInt_Config+0x928>)
 8006b1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006b22:	6113      	str	r3, [r2, #16]
					break;
 8006b24:	e232      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a73      	ldr	r2, [pc, #460]	; (8006cfc <extInt_Config+0x934>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d106      	bne.n	8006b40 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8006b32:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <extInt_Config+0x928>)
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <extInt_Config+0x928>)
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	6113      	str	r3, [r2, #16]
					break;
 8006b3e:	e225      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6e      	ldr	r2, [pc, #440]	; (8006d00 <extInt_Config+0x938>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d106      	bne.n	8006b5a <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006b4c:	4b68      	ldr	r3, [pc, #416]	; (8006cf0 <extInt_Config+0x928>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	4a67      	ldr	r2, [pc, #412]	; (8006cf0 <extInt_Config+0x928>)
 8006b52:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006b56:	6113      	str	r3, [r2, #16]
					break;
 8006b58:	e218      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006b5a:	bf00      	nop
					break;
 8006b5c:	e216      	b.n	8006f8c <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8006b5e:	4b64      	ldr	r3, [pc, #400]	; (8006cf0 <extInt_Config+0x928>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	4a63      	ldr	r2, [pc, #396]	; (8006cf0 <extInt_Config+0x928>)
 8006b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b68:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a64      	ldr	r2, [pc, #400]	; (8006d04 <extInt_Config+0x93c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d104      	bne.n	8006b80 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8006b76:	4b5e      	ldr	r3, [pc, #376]	; (8006cf0 <extInt_Config+0x928>)
 8006b78:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <extInt_Config+0x928>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006b7e:	e205      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a59      	ldr	r2, [pc, #356]	; (8006cec <extInt_Config+0x924>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d106      	bne.n	8006b9a <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006b8c:	4b58      	ldr	r3, [pc, #352]	; (8006cf0 <extInt_Config+0x928>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	4a57      	ldr	r2, [pc, #348]	; (8006cf0 <extInt_Config+0x928>)
 8006b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b96:	6113      	str	r3, [r2, #16]
					break;
 8006b98:	e1f8      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a54      	ldr	r2, [pc, #336]	; (8006cf4 <extInt_Config+0x92c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d106      	bne.n	8006bb4 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006ba6:	4b52      	ldr	r3, [pc, #328]	; (8006cf0 <extInt_Config+0x928>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	4a51      	ldr	r2, [pc, #324]	; (8006cf0 <extInt_Config+0x928>)
 8006bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bb0:	6113      	str	r3, [r2, #16]
					break;
 8006bb2:	e1eb      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4f      	ldr	r2, [pc, #316]	; (8006cf8 <extInt_Config+0x930>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d106      	bne.n	8006bce <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <extInt_Config+0x928>)
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	4a4a      	ldr	r2, [pc, #296]	; (8006cf0 <extInt_Config+0x928>)
 8006bc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bca:	6113      	str	r3, [r2, #16]
					break;
 8006bcc:	e1de      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a49      	ldr	r2, [pc, #292]	; (8006cfc <extInt_Config+0x934>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d106      	bne.n	8006be8 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006bda:	4b45      	ldr	r3, [pc, #276]	; (8006cf0 <extInt_Config+0x928>)
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	4a44      	ldr	r2, [pc, #272]	; (8006cf0 <extInt_Config+0x928>)
 8006be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be4:	6113      	str	r3, [r2, #16]
					break;
 8006be6:	e1d1      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a44      	ldr	r2, [pc, #272]	; (8006d00 <extInt_Config+0x938>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d106      	bne.n	8006c02 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006bf4:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <extInt_Config+0x928>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <extInt_Config+0x928>)
 8006bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006bfe:	6113      	str	r3, [r2, #16]
					break;
 8006c00:	e1c4      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006c02:	bf00      	nop
					break;
 8006c04:	e1c2      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8006c06:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <extInt_Config+0x928>)
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	4a39      	ldr	r2, [pc, #228]	; (8006cf0 <extInt_Config+0x928>)
 8006c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c10:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3a      	ldr	r2, [pc, #232]	; (8006d04 <extInt_Config+0x93c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d104      	bne.n	8006c28 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <extInt_Config+0x928>)
 8006c20:	4a33      	ldr	r2, [pc, #204]	; (8006cf0 <extInt_Config+0x928>)
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006c26:	e1b1      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <extInt_Config+0x924>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d106      	bne.n	8006c42 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <extInt_Config+0x928>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4a2d      	ldr	r2, [pc, #180]	; (8006cf0 <extInt_Config+0x928>)
 8006c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c3e:	6113      	str	r3, [r2, #16]
					break;
 8006c40:	e1a4      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <extInt_Config+0x92c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d106      	bne.n	8006c5c <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <extInt_Config+0x928>)
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <extInt_Config+0x928>)
 8006c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c58:	6113      	str	r3, [r2, #16]
					break;
 8006c5a:	e197      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <extInt_Config+0x930>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d106      	bne.n	8006c76 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006c68:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <extInt_Config+0x928>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <extInt_Config+0x928>)
 8006c6e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006c72:	6113      	str	r3, [r2, #16]
					break;
 8006c74:	e18a      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <extInt_Config+0x934>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d106      	bne.n	8006c90 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <extInt_Config+0x928>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <extInt_Config+0x928>)
 8006c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c8c:	6113      	str	r3, [r2, #16]
					break;
 8006c8e:	e17d      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <extInt_Config+0x938>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d106      	bne.n	8006caa <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <extInt_Config+0x928>)
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <extInt_Config+0x928>)
 8006ca2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006ca6:	6113      	str	r3, [r2, #16]
					break;
 8006ca8:	e170      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006caa:	bf00      	nop
					break;
 8006cac:	e16e      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <extInt_Config+0x928>)
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	4a0f      	ldr	r2, [pc, #60]	; (8006cf0 <extInt_Config+0x928>)
 8006cb4:	f023 030f 	bic.w	r3, r3, #15
 8006cb8:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <extInt_Config+0x93c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d104      	bne.n	8006cd0 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <extInt_Config+0x928>)
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <extInt_Config+0x928>)
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006cce:	e15d      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <extInt_Config+0x924>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d115      	bne.n	8006d08 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <extInt_Config+0x928>)
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	4a03      	ldr	r2, [pc, #12]	; (8006cf0 <extInt_Config+0x928>)
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	6153      	str	r3, [r2, #20]
					break;
 8006ce8:	e150      	b.n	8006f8c <extInt_Config+0xbc4>
 8006cea:	bf00      	nop
 8006cec:	40020400 	.word	0x40020400
 8006cf0:	40013800 	.word	0x40013800
 8006cf4:	40020800 	.word	0x40020800
 8006cf8:	40020c00 	.word	0x40020c00
 8006cfc:	40021000 	.word	0x40021000
 8006d00:	40021c00 	.word	0x40021c00
 8006d04:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a89      	ldr	r2, [pc, #548]	; (8006f34 <extInt_Config+0xb6c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d106      	bne.n	8006d22 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006d14:	4b88      	ldr	r3, [pc, #544]	; (8006f38 <extInt_Config+0xb70>)
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	4a87      	ldr	r2, [pc, #540]	; (8006f38 <extInt_Config+0xb70>)
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	6153      	str	r3, [r2, #20]
					break;
 8006d20:	e134      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a84      	ldr	r2, [pc, #528]	; (8006f3c <extInt_Config+0xb74>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d106      	bne.n	8006d3c <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8006d2e:	4b82      	ldr	r3, [pc, #520]	; (8006f38 <extInt_Config+0xb70>)
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4a81      	ldr	r2, [pc, #516]	; (8006f38 <extInt_Config+0xb70>)
 8006d34:	f043 0303 	orr.w	r3, r3, #3
 8006d38:	6153      	str	r3, [r2, #20]
					break;
 8006d3a:	e127      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <extInt_Config+0xb78>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d106      	bne.n	8006d56 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006d48:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <extInt_Config+0xb70>)
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	4a7a      	ldr	r2, [pc, #488]	; (8006f38 <extInt_Config+0xb70>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	6153      	str	r3, [r2, #20]
					break;
 8006d54:	e11a      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a79      	ldr	r2, [pc, #484]	; (8006f44 <extInt_Config+0xb7c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d106      	bne.n	8006d70 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8006d62:	4b75      	ldr	r3, [pc, #468]	; (8006f38 <extInt_Config+0xb70>)
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4a74      	ldr	r2, [pc, #464]	; (8006f38 <extInt_Config+0xb70>)
 8006d68:	f043 0307 	orr.w	r3, r3, #7
 8006d6c:	6153      	str	r3, [r2, #20]
					break;
 8006d6e:	e10d      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006d70:	bf00      	nop
					break;
 8006d72:	e10b      	b.n	8006f8c <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8006d74:	4b70      	ldr	r3, [pc, #448]	; (8006f38 <extInt_Config+0xb70>)
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	4a6f      	ldr	r2, [pc, #444]	; (8006f38 <extInt_Config+0xb70>)
 8006d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d7e:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a70      	ldr	r2, [pc, #448]	; (8006f48 <extInt_Config+0xb80>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d104      	bne.n	8006d96 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006d8c:	4b6a      	ldr	r3, [pc, #424]	; (8006f38 <extInt_Config+0xb70>)
 8006d8e:	4a6a      	ldr	r2, [pc, #424]	; (8006f38 <extInt_Config+0xb70>)
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	6153      	str	r3, [r2, #20]
 8006d94:	e041      	b.n	8006e1a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a6b      	ldr	r2, [pc, #428]	; (8006f4c <extInt_Config+0xb84>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d106      	bne.n	8006db0 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8006da2:	4b65      	ldr	r3, [pc, #404]	; (8006f38 <extInt_Config+0xb70>)
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	4a64      	ldr	r2, [pc, #400]	; (8006f38 <extInt_Config+0xb70>)
 8006da8:	f043 0310 	orr.w	r3, r3, #16
 8006dac:	6153      	str	r3, [r2, #20]
 8006dae:	e034      	b.n	8006e1a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a5f      	ldr	r2, [pc, #380]	; (8006f34 <extInt_Config+0xb6c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d106      	bne.n	8006dca <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006dbc:	4b5e      	ldr	r3, [pc, #376]	; (8006f38 <extInt_Config+0xb70>)
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <extInt_Config+0xb70>)
 8006dc2:	f043 0320 	orr.w	r3, r3, #32
 8006dc6:	6153      	str	r3, [r2, #20]
 8006dc8:	e027      	b.n	8006e1a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a5a      	ldr	r2, [pc, #360]	; (8006f3c <extInt_Config+0xb74>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d106      	bne.n	8006de4 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006dd6:	4b58      	ldr	r3, [pc, #352]	; (8006f38 <extInt_Config+0xb70>)
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	4a57      	ldr	r2, [pc, #348]	; (8006f38 <extInt_Config+0xb70>)
 8006ddc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006de0:	6153      	str	r3, [r2, #20]
 8006de2:	e01a      	b.n	8006e1a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a55      	ldr	r2, [pc, #340]	; (8006f40 <extInt_Config+0xb78>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d106      	bne.n	8006dfe <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <extInt_Config+0xb70>)
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	4a50      	ldr	r2, [pc, #320]	; (8006f38 <extInt_Config+0xb70>)
 8006df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfa:	6153      	str	r3, [r2, #20]
 8006dfc:	e00d      	b.n	8006e1a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a4f      	ldr	r2, [pc, #316]	; (8006f44 <extInt_Config+0xb7c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d106      	bne.n	8006e18 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006e0a:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <extInt_Config+0xb70>)
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	4a4a      	ldr	r2, [pc, #296]	; (8006f38 <extInt_Config+0xb70>)
 8006e10:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006e14:	6153      	str	r3, [r2, #20]
 8006e16:	e000      	b.n	8006e1a <extInt_Config+0xa52>

					} else {
						__NOP();
 8006e18:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8006e1a:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <extInt_Config+0xb70>)
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	4a46      	ldr	r2, [pc, #280]	; (8006f38 <extInt_Config+0xb70>)
 8006e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e24:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a46      	ldr	r2, [pc, #280]	; (8006f48 <extInt_Config+0xb80>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d104      	bne.n	8006e3c <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <extInt_Config+0xb70>)
 8006e34:	4a40      	ldr	r2, [pc, #256]	; (8006f38 <extInt_Config+0xb70>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006e3a:	e0a7      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a42      	ldr	r2, [pc, #264]	; (8006f4c <extInt_Config+0xb84>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d106      	bne.n	8006e56 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8006e48:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <extInt_Config+0xb70>)
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	4a3a      	ldr	r2, [pc, #232]	; (8006f38 <extInt_Config+0xb70>)
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e52:	6153      	str	r3, [r2, #20]
					break;
 8006e54:	e09a      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	; (8006f34 <extInt_Config+0xb6c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d106      	bne.n	8006e70 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8006e62:	4b35      	ldr	r3, [pc, #212]	; (8006f38 <extInt_Config+0xb70>)
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	4a34      	ldr	r2, [pc, #208]	; (8006f38 <extInt_Config+0xb70>)
 8006e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e6c:	6153      	str	r3, [r2, #20]
					break;
 8006e6e:	e08d      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a31      	ldr	r2, [pc, #196]	; (8006f3c <extInt_Config+0xb74>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d106      	bne.n	8006e8a <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006e7c:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <extInt_Config+0xb70>)
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	4a2d      	ldr	r2, [pc, #180]	; (8006f38 <extInt_Config+0xb70>)
 8006e82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006e86:	6153      	str	r3, [r2, #20]
					break;
 8006e88:	e080      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2b      	ldr	r2, [pc, #172]	; (8006f40 <extInt_Config+0xb78>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d106      	bne.n	8006ea4 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006e96:	4b28      	ldr	r3, [pc, #160]	; (8006f38 <extInt_Config+0xb70>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <extInt_Config+0xb70>)
 8006e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ea0:	6153      	str	r3, [r2, #20]
					break;
 8006ea2:	e073      	b.n	8006f8c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <extInt_Config+0xb7c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d106      	bne.n	8006ebe <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006eb0:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <extInt_Config+0xb70>)
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <extInt_Config+0xb70>)
 8006eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006eba:	6153      	str	r3, [r2, #20]
					break;
 8006ebc:	e066      	b.n	8006f8c <extInt_Config+0xbc4>
						__NOP();
 8006ebe:	bf00      	nop
					break;
 8006ec0:	e064      	b.n	8006f8c <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8006ec2:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <extInt_Config+0xb70>)
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <extInt_Config+0xb70>)
 8006ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ecc:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <extInt_Config+0xb80>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d104      	bne.n	8006ee4 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006eda:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <extInt_Config+0xb70>)
 8006edc:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <extInt_Config+0xb70>)
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8006ee2:	e053      	b.n	8006f8c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <extInt_Config+0xb84>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d106      	bne.n	8006efe <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <extInt_Config+0xb70>)
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	4a10      	ldr	r2, [pc, #64]	; (8006f38 <extInt_Config+0xb70>)
 8006ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006efa:	6153      	str	r3, [r2, #20]
						break;
 8006efc:	e046      	b.n	8006f8c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a0b      	ldr	r2, [pc, #44]	; (8006f34 <extInt_Config+0xb6c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d106      	bne.n	8006f18 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <extInt_Config+0xb70>)
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <extInt_Config+0xb70>)
 8006f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f14:	6153      	str	r3, [r2, #20]
						break;
 8006f16:	e039      	b.n	8006f8c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <extInt_Config+0xb74>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d115      	bne.n	8006f50 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <extInt_Config+0xb70>)
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <extInt_Config+0xb70>)
 8006f2a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006f2e:	6153      	str	r3, [r2, #20]
						break;
 8006f30:	e02c      	b.n	8006f8c <extInt_Config+0xbc4>
 8006f32:	bf00      	nop
 8006f34:	40020800 	.word	0x40020800
 8006f38:	40013800 	.word	0x40013800
 8006f3c:	40020c00 	.word	0x40020c00
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40021c00 	.word	0x40021c00
 8006f48:	40020000 	.word	0x40020000
 8006f4c:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a6c      	ldr	r2, [pc, #432]	; (8007108 <extInt_Config+0xd40>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d106      	bne.n	8006f6a <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006f5c:	4b6b      	ldr	r3, [pc, #428]	; (800710c <extInt_Config+0xd44>)
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	4a6a      	ldr	r2, [pc, #424]	; (800710c <extInt_Config+0xd44>)
 8006f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f66:	6153      	str	r3, [r2, #20]
						break;
 8006f68:	e010      	b.n	8006f8c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a67      	ldr	r2, [pc, #412]	; (8007110 <extInt_Config+0xd48>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d106      	bne.n	8006f84 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006f76:	4b65      	ldr	r3, [pc, #404]	; (800710c <extInt_Config+0xd44>)
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	4a64      	ldr	r2, [pc, #400]	; (800710c <extInt_Config+0xd44>)
 8006f7c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006f80:	6153      	str	r3, [r2, #20]
						break;
 8006f82:	e003      	b.n	8006f8c <extInt_Config+0xbc4>
							__NOP();
 8006f84:	bf00      	nop
						break;
 8006f86:	e001      	b.n	8006f8c <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8006f88:	bf00      	nop
						break;
 8006f8a:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	791b      	ldrb	r3, [r3, #4]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d020      	beq.n	8006fd6 <extInt_Config+0xc0e>
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	dc37      	bgt.n	8007008 <extInt_Config+0xc40>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <extInt_Config+0xbda>
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d00d      	beq.n	8006fbc <extInt_Config+0xbf4>
 8006fa0:	e032      	b.n	8007008 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fa2:	4b5c      	ldr	r3, [pc, #368]	; (8007114 <extInt_Config+0xd4c>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6812      	ldr	r2, [r2, #0]
 8006faa:	7912      	ldrb	r2, [r2, #4]
 8006fac:	4611      	mov	r1, r2
 8006fae:	2201      	movs	r2, #1
 8006fb0:	408a      	lsls	r2, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4a57      	ldr	r2, [pc, #348]	; (8007114 <extInt_Config+0xd4c>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	60d3      	str	r3, [r2, #12]

		break;
 8006fba:	e027      	b.n	800700c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fbc:	4b55      	ldr	r3, [pc, #340]	; (8007114 <extInt_Config+0xd4c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	7912      	ldrb	r2, [r2, #4]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	2201      	movs	r2, #1
 8006fca:	408a      	lsls	r2, r1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4a51      	ldr	r2, [pc, #324]	; (8007114 <extInt_Config+0xd4c>)
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6093      	str	r3, [r2, #8]

		break;
 8006fd4:	e01a      	b.n	800700c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fd6:	4b4f      	ldr	r3, [pc, #316]	; (8007114 <extInt_Config+0xd4c>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	7912      	ldrb	r2, [r2, #4]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	408a      	lsls	r2, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4a4a      	ldr	r2, [pc, #296]	; (8007114 <extInt_Config+0xd4c>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fee:	4b49      	ldr	r3, [pc, #292]	; (8007114 <extInt_Config+0xd4c>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	7912      	ldrb	r2, [r2, #4]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	408a      	lsls	r2, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	4a44      	ldr	r2, [pc, #272]	; (8007114 <extInt_Config+0xd4c>)
 8007002:	430b      	orrs	r3, r1
 8007004:	6093      	str	r3, [r2, #8]

		break;
 8007006:	e001      	b.n	800700c <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007008:	bf00      	nop
		break;
 800700a:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800700c:	b672      	cpsid	i
}
 800700e:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007010:	4b40      	ldr	r3, [pc, #256]	; (8007114 <extInt_Config+0xd4c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	7912      	ldrb	r2, [r2, #4]
 800701a:	4611      	mov	r1, r2
 800701c:	2201      	movs	r2, #1
 800701e:	408a      	lsls	r2, r1
 8007020:	4611      	mov	r1, r2
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <extInt_Config+0xd4c>)
 8007024:	430b      	orrs	r3, r1
 8007026:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d862      	bhi.n	80070f8 <extInt_Config+0xd30>
 8007032:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <extInt_Config+0xc70>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	08007079 	.word	0x08007079
 800703c:	08007081 	.word	0x08007081
 8007040:	08007089 	.word	0x08007089
 8007044:	08007091 	.word	0x08007091
 8007048:	08007099 	.word	0x08007099
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070b1 	.word	0x080070b1
 8007058:	080070b9 	.word	0x080070b9
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c9 	.word	0x080070c9
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080070d9 	.word	0x080070d9
 800706c:	080070e1 	.word	0x080070e1
 8007070:	080070e9 	.word	0x080070e9
 8007074:	080070f1 	.word	0x080070f1
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8007078:	2006      	movs	r0, #6
 800707a:	f7ff f987 	bl	800638c <__NVIC_EnableIRQ>
			break;
 800707e:	e03d      	b.n	80070fc <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8007080:	2007      	movs	r0, #7
 8007082:	f7ff f983 	bl	800638c <__NVIC_EnableIRQ>
			break;
 8007086:	e039      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8007088:	2008      	movs	r0, #8
 800708a:	f7ff f97f 	bl	800638c <__NVIC_EnableIRQ>
			break;
 800708e:	e035      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8007090:	2009      	movs	r0, #9
 8007092:	f7ff f97b 	bl	800638c <__NVIC_EnableIRQ>
			break;
 8007096:	e031      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8007098:	200a      	movs	r0, #10
 800709a:	f7ff f977 	bl	800638c <__NVIC_EnableIRQ>
			break;
 800709e:	e02d      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80070a0:	2017      	movs	r0, #23
 80070a2:	f7ff f973 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070a6:	e029      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80070a8:	2017      	movs	r0, #23
 80070aa:	f7ff f96f 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070ae:	e025      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80070b0:	2017      	movs	r0, #23
 80070b2:	f7ff f96b 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070b6:	e021      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80070b8:	2017      	movs	r0, #23
 80070ba:	f7ff f967 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070be:	e01d      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80070c0:	2017      	movs	r0, #23
 80070c2:	f7ff f963 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070c6:	e019      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070c8:	2028      	movs	r0, #40	; 0x28
 80070ca:	f7ff f95f 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070ce:	e015      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070d0:	2028      	movs	r0, #40	; 0x28
 80070d2:	f7ff f95b 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070d6:	e011      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070d8:	2028      	movs	r0, #40	; 0x28
 80070da:	f7ff f957 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070de:	e00d      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070e0:	2028      	movs	r0, #40	; 0x28
 80070e2:	f7ff f953 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070e6:	e009      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070e8:	2028      	movs	r0, #40	; 0x28
 80070ea:	f7ff f94f 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070ee:	e005      	b.n	80070fc <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070f0:	2028      	movs	r0, #40	; 0x28
 80070f2:	f7ff f94b 	bl	800638c <__NVIC_EnableIRQ>
			break;
 80070f6:	e001      	b.n	80070fc <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 80070f8:	bf00      	nop
			break;
 80070fa:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80070fc:	b662      	cpsie	i
}
 80070fe:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	40013800 	.word	0x40013800
 8007110:	40021c00 	.word	0x40021c00
 8007114:	40013c00 	.word	0x40013c00

08007118 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
	__NOP();
 800711c:	bf00      	nop
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
	__NOP();
 800712c:	bf00      	nop
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
	__NOP();
 800713c:	bf00      	nop
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
	__NOP();
 800714c:	bf00      	nop
}
 800714e:	bf00      	nop
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
	__NOP();
 800715c:	bf00      	nop
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
	__NOP();
 800716c:	bf00      	nop
}
 800716e:	bf00      	nop
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
	__NOP();
 800717c:	bf00      	nop
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	__NOP();
 800718c:	bf00      	nop
}
 800718e:	bf00      	nop
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
	__NOP();
 800719c:	bf00      	nop
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
	__NOP();
 80071ac:	bf00      	nop
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
	__NOP();
 80071bc:	bf00      	nop
}
 80071be:	bf00      	nop
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
	__NOP();
 80071cc:	bf00      	nop
}
 80071ce:	bf00      	nop
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
	__NOP();
 80071dc:	bf00      	nop
}
 80071de:	bf00      	nop
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
	__NOP();
 80071ec:	bf00      	nop
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <EXTI0_IRQHandler+0x24>)
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007208:	4b04      	ldr	r3, [pc, #16]	; (800721c <EXTI0_IRQHandler+0x24>)
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	4a03      	ldr	r2, [pc, #12]	; (800721c <EXTI0_IRQHandler+0x24>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007214:	f7ff ff80 	bl	8007118 <callback_extInt0>
	}
}
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40013c00 	.word	0x40013c00

08007220 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007224:	4b07      	ldr	r3, [pc, #28]	; (8007244 <EXTI1_IRQHandler+0x24>)
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <EXTI1_IRQHandler+0x24>)
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	4a03      	ldr	r2, [pc, #12]	; (8007244 <EXTI1_IRQHandler+0x24>)
 8007236:	f043 0302 	orr.w	r3, r3, #2
 800723a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800723c:	f7fa fe6c 	bl	8001f18 <callback_extInt1>
	}
}
 8007240:	bf00      	nop
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40013c00 	.word	0x40013c00

08007248 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <EXTI2_IRQHandler+0x24>)
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <EXTI2_IRQHandler+0x24>)
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	4a03      	ldr	r2, [pc, #12]	; (800726c <EXTI2_IRQHandler+0x24>)
 800725e:	f043 0304 	orr.w	r3, r3, #4
 8007262:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007264:	f7ff ff60 	bl	8007128 <callback_extInt2>
	}
}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40013c00 	.word	0x40013c00

08007270 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8007274:	4b07      	ldr	r3, [pc, #28]	; (8007294 <EXTI3_IRQHandler+0x24>)
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <EXTI3_IRQHandler+0x24>)
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	4a03      	ldr	r2, [pc, #12]	; (8007294 <EXTI3_IRQHandler+0x24>)
 8007286:	f043 0308 	orr.w	r3, r3, #8
 800728a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800728c:	f7fa fe5a 	bl	8001f44 <callback_extInt3>
	}
}
 8007290:	bf00      	nop
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40013c00 	.word	0x40013c00

08007298 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <EXTI4_IRQHandler+0x24>)
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <EXTI4_IRQHandler+0x24>)
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	4a03      	ldr	r2, [pc, #12]	; (80072bc <EXTI4_IRQHandler+0x24>)
 80072ae:	f043 0310 	orr.w	r3, r3, #16
 80072b2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 80072b4:	f7ff ff40 	bl	8007138 <callback_extInt4>
	}
}
 80072b8:	bf00      	nop
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40013c00 	.word	0x40013c00

080072c0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80072c4:	4b26      	ldr	r3, [pc, #152]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 80072d0:	4b23      	ldr	r3, [pc, #140]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	4a22      	ldr	r2, [pc, #136]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 80072dc:	f7ff ff34 	bl	8007148 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80072e0:	e03c      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80072e2:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80072ee:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80072fa:	f7ff ff2d 	bl	8007158 <callback_extInt6>
}
 80072fe:	e02d      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007300:	4b17      	ldr	r3, [pc, #92]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800730c:	4b14      	ldr	r3, [pc, #80]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	4a13      	ldr	r2, [pc, #76]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007318:	f7ff ff26 	bl	8007168 <callback_extInt7>
}
 800731c:	e01e      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007334:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007336:	f7ff ff1f 	bl	8007178 <callback_extInt8>
}
 800733a:	e00f      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800733c:	4b08      	ldr	r3, [pc, #32]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800734e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007352:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007354:	f7ff ff18 	bl	8007188 <callback_extInt9>
}
 8007358:	e000      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800735a:	bf00      	nop
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40013c00 	.word	0x40013c00

08007364 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007368:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8007374:	4b2a      	ldr	r3, [pc, #168]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	4a29      	ldr	r2, [pc, #164]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 800737a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800737e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8007380:	f7ff ff0a 	bl	8007198 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8007384:	e049      	b.n	800741a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8007386:	4b26      	ldr	r3, [pc, #152]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8007392:	4b23      	ldr	r3, [pc, #140]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	4a22      	ldr	r2, [pc, #136]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800739c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800739e:	f7ff ff03 	bl	80071a8 <callback_extInt11>
}
 80073a2:	e03a      	b.n	800741a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	4a1a      	ldr	r2, [pc, #104]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073ba:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80073bc:	f7ff fefc 	bl	80071b8 <callback_extInt12>
}
 80073c0:	e02b      	b.n	800741a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80073ce:	4b14      	ldr	r3, [pc, #80]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	4a13      	ldr	r2, [pc, #76]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073d8:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 80073da:	f7ff fef5 	bl	80071c8 <callback_extInt13>
}
 80073de:	e01c      	b.n	800741a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80073e0:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 80073f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073f6:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80073f8:	f7ff feee 	bl	80071d8 <callback_extInt14>
}
 80073fc:	e00d      	b.n	800741a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80073fe:	4b08      	ldr	r3, [pc, #32]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	4a04      	ldr	r2, [pc, #16]	; (8007420 <EXTI15_10_IRQHandler+0xbc>)
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8007416:	f7ff fee7 	bl	80071e8 <callback_extInt15>
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40013c00 	.word	0x40013c00

08007424 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a88      	ldr	r2, [pc, #544]	; (800765c <GPIO_Config+0x238>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d106      	bne.n	800744c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800743e:	4b88      	ldr	r3, [pc, #544]	; (8007660 <GPIO_Config+0x23c>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	4a87      	ldr	r2, [pc, #540]	; (8007660 <GPIO_Config+0x23c>)
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	6313      	str	r3, [r2, #48]	; 0x30
 800744a:	e03a      	b.n	80074c2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a84      	ldr	r2, [pc, #528]	; (8007664 <GPIO_Config+0x240>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d106      	bne.n	8007464 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8007456:	4b82      	ldr	r3, [pc, #520]	; (8007660 <GPIO_Config+0x23c>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	4a81      	ldr	r2, [pc, #516]	; (8007660 <GPIO_Config+0x23c>)
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	6313      	str	r3, [r2, #48]	; 0x30
 8007462:	e02e      	b.n	80074c2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a7f      	ldr	r2, [pc, #508]	; (8007668 <GPIO_Config+0x244>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d106      	bne.n	800747c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800746e:	4b7c      	ldr	r3, [pc, #496]	; (8007660 <GPIO_Config+0x23c>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	4a7b      	ldr	r2, [pc, #492]	; (8007660 <GPIO_Config+0x23c>)
 8007474:	f043 0304 	orr.w	r3, r3, #4
 8007478:	6313      	str	r3, [r2, #48]	; 0x30
 800747a:	e022      	b.n	80074c2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a7a      	ldr	r2, [pc, #488]	; (800766c <GPIO_Config+0x248>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d106      	bne.n	8007494 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8007486:	4b76      	ldr	r3, [pc, #472]	; (8007660 <GPIO_Config+0x23c>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	4a75      	ldr	r2, [pc, #468]	; (8007660 <GPIO_Config+0x23c>)
 800748c:	f043 0308 	orr.w	r3, r3, #8
 8007490:	6313      	str	r3, [r2, #48]	; 0x30
 8007492:	e016      	b.n	80074c2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a75      	ldr	r2, [pc, #468]	; (8007670 <GPIO_Config+0x24c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d106      	bne.n	80074ac <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800749e:	4b70      	ldr	r3, [pc, #448]	; (8007660 <GPIO_Config+0x23c>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4a6f      	ldr	r2, [pc, #444]	; (8007660 <GPIO_Config+0x23c>)
 80074a4:	f043 0310 	orr.w	r3, r3, #16
 80074a8:	6313      	str	r3, [r2, #48]	; 0x30
 80074aa:	e00a      	b.n	80074c2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a70      	ldr	r2, [pc, #448]	; (8007674 <GPIO_Config+0x250>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d105      	bne.n	80074c2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80074b6:	4b6a      	ldr	r3, [pc, #424]	; (8007660 <GPIO_Config+0x23c>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	4a69      	ldr	r2, [pc, #420]	; (8007660 <GPIO_Config+0x23c>)
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	795b      	ldrb	r3, [r3, #5]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d143      	bne.n	8007552 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	2b07      	cmp	r3, #7
 80074d0:	d81f      	bhi.n	8007512 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	791b      	ldrb	r3, [r3, #4]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	210f      	movs	r1, #15
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	fa01 f303 	lsl.w	r3, r1, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	4619      	mov	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	400a      	ands	r2, r1
 80074f2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7a5b      	ldrb	r3, [r3, #9]
 80074fe:	4619      	mov	r1, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	4619      	mov	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	621a      	str	r2, [r3, #32]
 8007510:	e01f      	b.n	8007552 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	791b      	ldrb	r3, [r3, #4]
 8007516:	3b08      	subs	r3, #8
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007522:	210f      	movs	r1, #15
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	43db      	mvns	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	400a      	ands	r2, r1
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7a5b      	ldrb	r3, [r3, #9]
 8007540:	4619      	mov	r1, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	4619      	mov	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	795b      	ldrb	r3, [r3, #5]
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	791b      	ldrb	r3, [r3, #4]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	2103      	movs	r1, #3
 8007572:	fa01 f303 	lsl.w	r3, r1, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	400a      	ands	r2, r1
 8007580:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	430a      	orrs	r2, r1
 8007590:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7a1b      	ldrb	r3, [r3, #8]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	791b      	ldrb	r3, [r3, #4]
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	791b      	ldrb	r3, [r3, #4]
 80075ac:	4619      	mov	r1, r3
 80075ae:	2301      	movs	r3, #1
 80075b0:	408b      	lsls	r3, r1
 80075b2:	43db      	mvns	r3, r3
 80075b4:	4619      	mov	r1, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	400a      	ands	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	799b      	ldrb	r3, [r3, #6]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	791b      	ldrb	r3, [r3, #4]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	2103      	movs	r1, #3
 80075ee:	fa01 f303 	lsl.w	r3, r1, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	4619      	mov	r1, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	400a      	ands	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	79db      	ldrb	r3, [r3, #7]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	791b      	ldrb	r3, [r3, #4]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	791b      	ldrb	r3, [r3, #4]
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	2103      	movs	r1, #3
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	43db      	mvns	r3, r3
 8007634:	4619      	mov	r1, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	400a      	ands	r2, r1
 800763c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68d9      	ldr	r1, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	430a      	orrs	r2, r1
 800764c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40020000 	.word	0x40020000
 8007660:	40023800 	.word	0x40023800
 8007664:	40020400 	.word	0x40020400
 8007668:	40020800 	.word	0x40020800
 800766c:	40020c00 	.word	0x40020c00
 8007670:	40021000 	.word	0x40021000
 8007674:	40021c00 	.word	0x40021c00

08007678 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10d      	bne.n	80076a6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	791b      	ldrb	r3, [r3, #4]
 8007694:	4619      	mov	r1, r3
 8007696:	2301      	movs	r3, #1
 8007698:	408b      	lsls	r3, r1
 800769a:	4619      	mov	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80076a4:	e00d      	b.n	80076c2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	791b      	ldrb	r3, [r3, #4]
 80076b0:	3310      	adds	r3, #16
 80076b2:	2101      	movs	r1, #1
 80076b4:	fa01 f303 	lsl.w	r3, r1, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	619a      	str	r2, [r3, #24]
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10d      	bne.n	80076fc <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	4619      	mov	r1, r3
 80076ec:	2301      	movs	r3, #1
 80076ee:	408b      	lsls	r3, r1
 80076f0:	4619      	mov	r1, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 80076fa:	e00d      	b.n	8007718 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	791b      	ldrb	r3, [r3, #4]
 8007706:	3310      	adds	r3, #16
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	4619      	mov	r1, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	619a      	str	r2, [r3, #24]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	791b      	ldrb	r3, [r3, #4]
 8007734:	461a      	mov	r2, r3
 8007736:	2301      	movs	r3, #1
 8007738:	4093      	lsls	r3, r2
 800773a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8007744:	897b      	ldrh	r3, [r7, #10]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4013      	ands	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	791b      	ldrb	r3, [r3, #4]
 8007750:	461a      	mov	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	40d3      	lsrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ffd8 	bl	8007724 <GPIO_ReadPin>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff ff76 	bl	8007678 <GPIO_WritePin>
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fe3b 	bl	8007424 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fe36 	bl	8007424 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	4618      	mov	r0, r3
 80077be:	f002 fbc7 	bl	8009f50 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 80077c2:	e004      	b.n	80077ce <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f94f 	bl	8007a68 <WHOIAM>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f7      	beq.n	80077c4 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 80077d4:	216b      	movs	r1, #107	; 0x6b
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8f1 	bl	80079be <readData>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	461a      	mov	r2, r3
 80077e8:	216b      	movs	r1, #107	; 0x6b
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f89c 	bl	8007928 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 80077f0:	216b      	movs	r1, #107	; 0x6b
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8e3 	bl	80079be <readData>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 80077fc:	211c      	movs	r1, #28
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8dd 	bl	80079be <readData>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f023 0318 	bic.w	r3, r3, #24
 800780e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d833      	bhi.n	8007880 <configMPUAccel+0xec>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <configMPUAccel+0x8c>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007831 	.word	0x08007831
 8007824:	0800783f 	.word	0x0800783f
 8007828:	08007855 	.word	0x08007855
 800782c:	0800786b 	.word	0x0800786b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	461a      	mov	r2, r3
 8007834:	211c      	movs	r1, #28
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f876 	bl	8007928 <writeData>


				break;
 800783c:	e021      	b.n	8007882 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	f043 0308 	orr.w	r3, r3, #8
 8007844:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	461a      	mov	r2, r3
 800784a:	211c      	movs	r1, #28
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f86b 	bl	8007928 <writeData>


				break;
 8007852:	e016      	b.n	8007882 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	f043 0310 	orr.w	r3, r3, #16
 800785a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	461a      	mov	r2, r3
 8007860:	211c      	movs	r1, #28
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f860 	bl	8007928 <writeData>


				break;
 8007868:	e00b      	b.n	8007882 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f043 0318 	orr.w	r3, r3, #24
 8007870:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	461a      	mov	r2, r3
 8007876:	211c      	movs	r1, #28
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f855 	bl	8007928 <writeData>


				break;
 800787e:	e000      	b.n	8007882 <configMPUAccel+0xee>
			}default:{
				break;
 8007880:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8007882:	211c      	movs	r1, #28
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f89a 	bl	80079be <readData>
 800788a:	4603      	mov	r3, r0
 800788c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800788e:	211b      	movs	r1, #27
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f894 	bl	80079be <readData>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f023 0318 	bic.w	r3, r3, #24
 80078a0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d832      	bhi.n	8007910 <configMPUAccel+0x17c>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <configMPUAccel+0x11c>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078cf 	.word	0x080078cf
 80078b8:	080078e5 	.word	0x080078e5
 80078bc:	080078fb 	.word	0x080078fb
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	461a      	mov	r2, r3
 80078c4:	211b      	movs	r1, #27
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f82e 	bl	8007928 <writeData>


				break;
 80078cc:	e021      	b.n	8007912 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	f043 0308 	orr.w	r3, r3, #8
 80078d4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	461a      	mov	r2, r3
 80078da:	211b      	movs	r1, #27
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f823 	bl	8007928 <writeData>


				break;
 80078e2:	e016      	b.n	8007912 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f043 0310 	orr.w	r3, r3, #16
 80078ea:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	461a      	mov	r2, r3
 80078f0:	211b      	movs	r1, #27
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f818 	bl	8007928 <writeData>


				break;
 80078f8:	e00b      	b.n	8007912 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	f043 0318 	orr.w	r3, r3, #24
 8007900:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	461a      	mov	r2, r3
 8007906:	211b      	movs	r1, #27
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f80d 	bl	8007928 <writeData>


				break;
 800790e:	e000      	b.n	8007912 <configMPUAccel+0x17e>
			}default:{
				break;
 8007910:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8007912:	211b      	movs	r1, #27
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f852 	bl	80079be <readData>
 800791a:	4603      	mov	r3, r0
 800791c:	73bb      	strb	r3, [r7, #14]


}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
 8007934:	4613      	mov	r3, r2
 8007936:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4618      	mov	r0, r3
 8007952:	f002 fc6d 	bl	800a230 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68d8      	ldr	r0, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	791b      	ldrb	r3, [r3, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	4619      	mov	r1, r3
 8007964:	f002 fccf 	bl	800a306 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f002 fcf0 	bl	800a356 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007976:	e000      	b.n	800797a <writeData+0x52>
		__NOP();
 8007978:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f6      	bne.n	8007978 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	78ba      	ldrb	r2, [r7, #2]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f002 fcf9 	bl	800a38a <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007998:	e000      	b.n	800799c <writeData+0x74>
		__NOP();
 800799a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f6      	bne.n	800799a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fc2b 	bl	800a20c <i2c_stopTransaction>



}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e0:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f002 fc22 	bl	800a230 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68d8      	ldr	r0, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	4619      	mov	r1, r3
 80079fa:	f002 fc84 	bl	800a306 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f002 fca5 	bl	800a356 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007a0c:	e000      	b.n	8007a10 <readData+0x52>
		__NOP();
 8007a0e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f6      	bne.n	8007a0e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f002 fc34 	bl	800a292 <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68d8      	ldr	r0, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	791b      	ldrb	r3, [r3, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	4619      	mov	r1, r3
 8007a38:	f002 fc65 	bl	800a306 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 fc4e 	bl	800a2e2 <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f002 fbde 	bl	800a20c <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 fcb2 	bl	800a3be <i2c_readDataByte>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8007a78:	2175      	movs	r1, #117	; 0x75
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff ff9f 	bl	80079be <readData>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a8a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]

}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007ac8:	2143      	movs	r1, #67	; 0x43
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff ff77 	bl	80079be <readData>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8007ad4:	2144      	movs	r1, #68	; 0x44
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff ff71 	bl	80079be <readData>
 8007adc:	4603      	mov	r3, r0
 8007ade:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8007ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	89bb      	ldrh	r3, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d846      	bhi.n	8007b84 <readGyro_X+0xdc>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <readGyro_X+0x54>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b2b 	.word	0x08007b2b
 8007b04:	08007b49 	.word	0x08007b49
 8007b08:	08007b67 	.word	0x08007b67
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8007b0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f8 fd1f 	bl	8000554 <__aeabi_i2d>
 8007b16:	a325      	add	r3, pc, #148	; (adr r3, 8007bac <readGyro_X+0x104>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 feae 	bl	800087c <__aeabi_ddiv>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007b28:	e02d      	b.n	8007b86 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8007b2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7f8 fd10 	bl	8000554 <__aeabi_i2d>
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <readGyro_X+0xf8>)
 8007b3a:	f7f8 fe9f 	bl	800087c <__aeabi_ddiv>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007b46:	e01e      	b.n	8007b86 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8007b48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f8 fd01 	bl	8000554 <__aeabi_i2d>
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <readGyro_X+0xfc>)
 8007b58:	f7f8 fe90 	bl	800087c <__aeabi_ddiv>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007b64:	e00f      	b.n	8007b86 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8007b66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7f8 fcf2 	bl	8000554 <__aeabi_i2d>
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <readGyro_X+0x100>)
 8007b76:	f7f8 fe81 	bl	800087c <__aeabi_ddiv>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007b82:	e000      	b.n	8007b86 <readGyro_X+0xde>
		}default:{
			break;
 8007b84:	bf00      	nop
		}

	}

	return GYROX_R;
 8007b86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b8a:	f7f9 f845 	bl	8000c18 <__aeabi_d2f>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	ee07 3a90 	vmov	s15, r3

}
 8007b94:	eeb0 0a67 	vmov.f32	s0, s15
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40508000 	.word	0x40508000
 8007ba4:	40408000 	.word	0x40408000
 8007ba8:	40300000 	.word	0x40300000
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	40606000 	.word	0x40606000
 8007bb4:	00000000 	.word	0x00000000

08007bb8 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8007bd8:	2145      	movs	r1, #69	; 0x45
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff feef 	bl	80079be <readData>
 8007be0:	4603      	mov	r3, r0
 8007be2:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8007be4:	2146      	movs	r1, #70	; 0x46
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fee9 	bl	80079be <readData>
 8007bec:	4603      	mov	r3, r0
 8007bee:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8007bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b21a      	sxth	r2, r3
 8007bf8:	89bb      	ldrh	r3, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d846      	bhi.n	8007c94 <readGyro_Y+0xdc>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <readGyro_Y+0x54>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c3b 	.word	0x08007c3b
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c77 	.word	0x08007c77
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8007c1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7f8 fc97 	bl	8000554 <__aeabi_i2d>
 8007c26:	a325      	add	r3, pc, #148	; (adr r3, 8007cbc <readGyro_Y+0x104>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f7f8 fe26 	bl	800087c <__aeabi_ddiv>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007c38:	e02d      	b.n	8007c96 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8007c3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7f8 fc88 	bl	8000554 <__aeabi_i2d>
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <readGyro_Y+0xf8>)
 8007c4a:	f7f8 fe17 	bl	800087c <__aeabi_ddiv>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007c56:	e01e      	b.n	8007c96 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8007c58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7f8 fc79 	bl	8000554 <__aeabi_i2d>
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <readGyro_Y+0xfc>)
 8007c68:	f7f8 fe08 	bl	800087c <__aeabi_ddiv>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007c74:	e00f      	b.n	8007c96 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8007c76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7f8 fc6a 	bl	8000554 <__aeabi_i2d>
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <readGyro_Y+0x100>)
 8007c86:	f7f8 fdf9 	bl	800087c <__aeabi_ddiv>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007c92:	e000      	b.n	8007c96 <readGyro_Y+0xde>
		}default:{
			break;
 8007c94:	bf00      	nop
		}

	}

	return GYROY_R;
 8007c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c9a:	f7f8 ffbd 	bl	8000c18 <__aeabi_d2f>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	ee07 3a90 	vmov	s15, r3

}
 8007ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40508000 	.word	0x40508000
 8007cb4:	40408000 	.word	0x40408000
 8007cb8:	40300000 	.word	0x40300000
 8007cbc:	00000000 	.word	0x00000000
 8007cc0:	40606000 	.word	0x40606000
 8007cc4:	00000000 	.word	0x00000000

08007cc8 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8007ce8:	2147      	movs	r1, #71	; 0x47
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff fe67 	bl	80079be <readData>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8007cf4:	2148      	movs	r1, #72	; 0x48
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fe61 	bl	80079be <readData>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8007d00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	b21a      	sxth	r2, r3
 8007d08:	89bb      	ldrh	r3, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d846      	bhi.n	8007da4 <readGyro_Z+0xdc>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <readGyro_Z+0x54>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d69 	.word	0x08007d69
 8007d28:	08007d87 	.word	0x08007d87
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8007d2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fc0f 	bl	8000554 <__aeabi_i2d>
 8007d36:	a325      	add	r3, pc, #148	; (adr r3, 8007dcc <readGyro_Z+0x104>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fd9e 	bl	800087c <__aeabi_ddiv>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007d48:	e02d      	b.n	8007da6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8007d4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f8 fc00 	bl	8000554 <__aeabi_i2d>
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <readGyro_Z+0xf8>)
 8007d5a:	f7f8 fd8f 	bl	800087c <__aeabi_ddiv>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007d66:	e01e      	b.n	8007da6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8007d68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f8 fbf1 	bl	8000554 <__aeabi_i2d>
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <readGyro_Z+0xfc>)
 8007d78:	f7f8 fd80 	bl	800087c <__aeabi_ddiv>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007d84:	e00f      	b.n	8007da6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8007d86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f8 fbe2 	bl	8000554 <__aeabi_i2d>
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <readGyro_Z+0x100>)
 8007d96:	f7f8 fd71 	bl	800087c <__aeabi_ddiv>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007da2:	e000      	b.n	8007da6 <readGyro_Z+0xde>
		}default:{
			break;
 8007da4:	bf00      	nop
		}

	}

	return GYROZ_R;
 8007da6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007daa:	f7f8 ff35 	bl	8000c18 <__aeabi_d2f>
 8007dae:	4603      	mov	r3, r0
 8007db0:	ee07 3a90 	vmov	s15, r3

}
 8007db4:	eeb0 0a67 	vmov.f32	s0, s15
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40508000 	.word	0x40508000
 8007dc4:	40408000 	.word	0x40408000
 8007dc8:	40300000 	.word	0x40300000
 8007dcc:	00000000 	.word	0x00000000
 8007dd0:	40606000 	.word	0x40606000
 8007dd4:	00000000 	.word	0x00000000

08007dd8 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08c      	sub	sp, #48	; 0x30
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6178      	str	r0, [r7, #20]
 8007de0:	6139      	str	r1, [r7, #16]
 8007de2:	ed87 0b02 	vstr	d0, [r7, #8]
 8007de6:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007df4:	f7f8 fa60 	bl	80002b8 <__aeabi_dsub>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e0a:	f7f8 fa55 	bl	80002b8 <__aeabi_dsub>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	3310      	adds	r3, #16
 8007e1a:	f107 0218 	add.w	r2, r7, #24
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fa55 	bl	80082d0 <calculed_ang_turn>
 8007e26:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	4b38      	ldr	r3, [pc, #224]	; (8007f10 <build_Operation+0x138>)
 8007e30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e34:	f7f8 fe88 	bl	8000b48 <__aeabi_dcmpgt>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d020      	beq.n	8007e80 <build_Operation+0xa8>
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	4b34      	ldr	r3, [pc, #208]	; (8007f14 <build_Operation+0x13c>)
 8007e44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e48:	f7f8 fe60 	bl	8000b0c <__aeabi_dcmplt>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e58:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8007f08 <build_Operation+0x130>
 8007e5c:	ed97 1b00 	vldr	d1, [r7]
 8007e60:	ed97 0b02 	vldr	d0, [r7, #8]
 8007e64:	2201      	movs	r2, #1
 8007e66:	4619      	mov	r1, r3
 8007e68:	6978      	ldr	r0, [r7, #20]
 8007e6a:	f000 f855 	bl	8007f18 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e74:	3301      	adds	r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007e7e:	e02b      	b.n	8007ed8 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e86:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8007e8a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007f08 <build_Operation+0x130>
 8007e8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007f08 <build_Operation+0x130>
 8007e92:	2202      	movs	r2, #2
 8007e94:	4619      	mov	r1, r3
 8007e96:	6978      	ldr	r0, [r7, #20]
 8007e98:	f000 f83e 	bl	8007f18 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8007f08 <build_Operation+0x130>
 8007eb6:	ed97 1b00 	vldr	d1, [r7]
 8007eba:	ed97 0b02 	vldr	d0, [r7, #8]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	f000 f828 	bl	8007f18 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ece:	3301      	adds	r3, #1
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8007ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007edc:	6939      	ldr	r1, [r7, #16]
 8007ede:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 8007ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ee6:	6939      	ldr	r1, [r7, #16]
 8007ee8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 8007eec:	6939      	ldr	r1, [r7, #16]
 8007eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ef2:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 8007ef6:	6939      	ldr	r1, [r7, #16]
 8007ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efc:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007f00:	bf00      	nop
 8007f02:	3730      	adds	r7, #48	; 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
	...
 8007f10:	c0140000 	.word	0xc0140000
 8007f14:	40140000 	.word	0x40140000

08007f18 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b089      	sub	sp, #36	; 0x24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	61f8      	str	r0, [r7, #28]
 8007f20:	460b      	mov	r3, r1
 8007f22:	ed87 0b04 	vstr	d0, [r7, #16]
 8007f26:	ed87 1b02 	vstr	d1, [r7, #8]
 8007f2a:	ed87 2b00 	vstr	d2, [r7]
 8007f2e:	76fb      	strb	r3, [r7, #27]
 8007f30:	4613      	mov	r3, r2
 8007f32:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 8007f34:	7efa      	ldrb	r2, [r7, #27]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	7eba      	ldrb	r2, [r7, #26]
 8007f46:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8007f48:	7efa      	ldrb	r2, [r7, #27]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	461a      	mov	r2, r3
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	1899      	adds	r1, r3, r2
 8007f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8007f60:	7efa      	ldrb	r2, [r7, #27]
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	1899      	adds	r1, r3, r2
 8007f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f74:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8007f78:	7efa      	ldrb	r2, [r7, #27]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	461a      	mov	r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	1899      	adds	r1, r3, r2
 8007f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8007f90:	bf00      	nop
 8007f92:	3724      	adds	r7, #36	; 0x24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	0000      	movs	r0, r0
	...

08007fa0 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 8007fa0:	b5b0      	push	{r4, r5, r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6178      	str	r0, [r7, #20]
 8007fa8:	ed87 0b02 	vstr	d0, [r7, #8]
 8007fac:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007fb6:	6979      	ldr	r1, [r7, #20]
 8007fb8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 8007fc8:	6979      	ldr	r1, [r7, #20]
 8007fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fce:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007fe8:	f7f8 f966 	bl	80002b8 <__aeabi_dsub>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	ec43 2b17 	vmov	d7, r2, r3
 8007ff4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008068 <change_coordinates_position+0xc8>
 8007ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8007ffc:	eef0 0a67 	vmov.f32	s1, s15
 8008000:	f005 fef4 	bl	800ddec <pow>
 8008004:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008014:	f7f8 f950 	bl	80002b8 <__aeabi_dsub>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	ec43 2b17 	vmov	d7, r2, r3
 8008020:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8008068 <change_coordinates_position+0xc8>
 8008024:	eeb0 0a47 	vmov.f32	s0, s14
 8008028:	eef0 0a67 	vmov.f32	s1, s15
 800802c:	f005 fede 	bl	800ddec <pow>
 8008030:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f940 	bl	80002bc <__adddf3>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	ec43 2b17 	vmov	d7, r2, r3
 8008044:	eeb0 0a47 	vmov.f32	s0, s14
 8008048:	eef0 0a67 	vmov.f32	s1, s15
 800804c:	f005 ff3e 	bl	800decc <sqrt>
 8008050:	eeb0 7a40 	vmov.f32	s14, s0
 8008054:	eef0 7a60 	vmov.f32	s15, s1
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 800805e:	bf00      	nop
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bdb0      	pop	{r4, r5, r7, pc}
 8008066:	bf00      	nop
 8008068:	00000000 	.word	0x00000000
 800806c:	40000000 	.word	0x40000000

08008070 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8008070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008074:	b08a      	sub	sp, #40	; 0x28
 8008076:	af00      	add	r7, sp, #0
 8008078:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008086:	f7f8 f917 	bl	80002b8 <__aeabi_dsub>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800809e:	f7f8 f90b 	bl	80002b8 <__aeabi_dsub>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 80080aa:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80081b8 <calculation_parameter_distance+0x148>
 80080ae:	ed97 0b08 	vldr	d0, [r7, #32]
 80080b2:	f005 fe9b 	bl	800ddec <pow>
 80080b6:	ec59 8b10 	vmov	r8, r9, d0
 80080ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80081b8 <calculation_parameter_distance+0x148>
 80080be:	ed97 0b06 	vldr	d0, [r7, #24]
 80080c2:	f005 fe93 	bl	800ddec <pow>
 80080c6:	ec53 2b10 	vmov	r2, r3, d0
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 f8f5 	bl	80002bc <__adddf3>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	ec43 2b17 	vmov	d7, r2, r3
 80080da:	eeb0 0a47 	vmov.f32	s0, s14
 80080de:	eef0 0a67 	vmov.f32	s1, s15
 80080e2:	f005 fef3 	bl	800decc <sqrt>
 80080e6:	eeb0 7a40 	vmov.f32	s14, s0
 80080ea:	eef0 7a60 	vmov.f32	s15, s1
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 80080f4:	6979      	ldr	r1, [r7, #20]
 80080f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008104:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	60bb      	str	r3, [r7, #8]
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800811a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800811e:	f7f8 fa83 	bl	8000628 <__aeabi_dmul>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4690      	mov	r8, r2
 8008128:	4699      	mov	r9, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008134:	f7f8 fa78 	bl	8000628 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 f8ba 	bl	80002b8 <__aeabi_dsub>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	6979      	ldr	r1, [r7, #20]
 800814a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800814e:	6979      	ldr	r1, [r7, #20]
 8008150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008154:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8008158:	6a3c      	ldr	r4, [r7, #32]
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	603b      	str	r3, [r7, #0]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817c:	f7f8 fa54 	bl	8000628 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4614      	mov	r4, r2
 8008186:	461d      	mov	r5, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800818e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008192:	f7f8 fa49 	bl	8000628 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 f88d 	bl	80002bc <__adddf3>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	6979      	ldr	r1, [r7, #20]
 80081a8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80081ac:	bf00      	nop
 80081ae:	3728      	adds	r7, #40	; 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80081b6:	bf00      	nop
 80081b8:	00000000 	.word	0x00000000
 80081bc:	40000000 	.word	0x40000000

080081c0 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80081c0:	b5b0      	push	{r4, r5, r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6178      	str	r0, [r7, #20]
 80081c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80081cc:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80081d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081da:	f7f8 fa25 	bl	8000628 <__aeabi_dmul>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4614      	mov	r4, r2
 80081e4:	461d      	mov	r5, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80081ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f0:	f7f8 fa1a 	bl	8000628 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 f85e 	bl	80002bc <__adddf3>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800820e:	f7f8 f855 	bl	80002bc <__adddf3>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 fb2c 	bl	800087c <__aeabi_ddiv>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008228:	4611      	mov	r1, r2
 800822a:	61b9      	str	r1, [r7, #24]
 800822c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008230:	61fb      	str	r3, [r7, #28]

	return distance;
 8008232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008236:	ec43 2b17 	vmov	d7, r2, r3
}
 800823a:	eeb0 0a47 	vmov.f32	s0, s14
 800823e:	eef0 0a67 	vmov.f32	s1, s15
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bdb0      	pop	{r4, r5, r7, pc}

08008248 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008248:	b5b0      	push	{r4, r5, r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6178      	str	r0, [r7, #20]
 8008250:	ed87 0b02 	vstr	d0, [r7, #8]
 8008254:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800825e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008262:	f7f8 f9e1 	bl	8000628 <__aeabi_dmul>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4614      	mov	r4, r2
 800826c:	461d      	mov	r5, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008278:	f7f8 f9d6 	bl	8000628 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	f7f8 f81a 	bl	80002bc <__adddf3>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008296:	f7f8 f811 	bl	80002bc <__adddf3>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80082a8:	f7f8 fae8 	bl	800087c <__aeabi_ddiv>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80082b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80082bc:	eeb0 0a47 	vmov.f32	s0, s14
 80082c0:	eef0 0a67 	vmov.f32	s1, s15
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ca:	0000      	movs	r0, r0
 80082cc:	0000      	movs	r0, r0
	...

080082d0 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 80082d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082d4:	b08a      	sub	sp, #40	; 0x28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f8 f99d 	bl	8000628 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4690      	mov	r8, r2
 80082f4:	4699      	mov	r9, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3308      	adds	r3, #8
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f8 f990 	bl	8000628 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f7 ffd2 	bl	80002b8 <__aeabi_dsub>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	ed93 7b00 	vldr	d7, [r3]
 8008322:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80084a0 <calculed_ang_turn+0x1d0>
 8008326:	eeb0 0a47 	vmov.f32	s0, s14
 800832a:	eef0 0a67 	vmov.f32	s1, s15
 800832e:	f005 fd5d 	bl	800ddec <pow>
 8008332:	ec59 8b10 	vmov	r8, r9, d0
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3308      	adds	r3, #8
 800833a:	ed93 7b00 	vldr	d7, [r3]
 800833e:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80084a0 <calculed_ang_turn+0x1d0>
 8008342:	eeb0 0a47 	vmov.f32	s0, s14
 8008346:	eef0 0a67 	vmov.f32	s1, s15
 800834a:	f005 fd4f 	bl	800ddec <pow>
 800834e:	ec53 2b10 	vmov	r2, r3, d0
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f7 ffb1 	bl	80002bc <__adddf3>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	ec43 2b17 	vmov	d7, r2, r3
 8008362:	eeb0 0a47 	vmov.f32	s0, s14
 8008366:	eef0 0a67 	vmov.f32	s1, s15
 800836a:	f005 fdaf 	bl	800decc <sqrt>
 800836e:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	ed93 7b00 	vldr	d7, [r3]
 8008378:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80084a0 <calculed_ang_turn+0x1d0>
 800837c:	eeb0 0a47 	vmov.f32	s0, s14
 8008380:	eef0 0a67 	vmov.f32	s1, s15
 8008384:	f005 fd32 	bl	800ddec <pow>
 8008388:	ec59 8b10 	vmov	r8, r9, d0
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	ed93 7b00 	vldr	d7, [r3]
 8008394:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80084a0 <calculed_ang_turn+0x1d0>
 8008398:	eeb0 0a47 	vmov.f32	s0, s14
 800839c:	eef0 0a67 	vmov.f32	s1, s15
 80083a0:	f005 fd24 	bl	800ddec <pow>
 80083a4:	ec53 2b10 	vmov	r2, r3, d0
 80083a8:	4640      	mov	r0, r8
 80083aa:	4649      	mov	r1, r9
 80083ac:	f7f7 ff86 	bl	80002bc <__adddf3>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	ec43 2b17 	vmov	d7, r2, r3
 80083b8:	eeb0 0a47 	vmov.f32	s0, s14
 80083bc:	eef0 0a67 	vmov.f32	s1, s15
 80083c0:	f005 fd84 	bl	800decc <sqrt>
 80083c4:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 f928 	bl	8000628 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4690      	mov	r8, r2
 80083de:	4699      	mov	r9, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3308      	adds	r3, #8
 80083e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 f91a 	bl	8000628 <__aeabi_dmul>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f7 ff5e 	bl	80002bc <__adddf3>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4690      	mov	r8, r2
 8008406:	4699      	mov	r9, r3
 8008408:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800840c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008410:	f7f8 f90a 	bl	8000628 <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 fa2e 	bl	800087c <__aeabi_ddiv>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	ec43 2b17 	vmov	d7, r2, r3
 8008428:	eeb0 0a47 	vmov.f32	s0, s14
 800842c:	eef0 0a67 	vmov.f32	s1, s15
 8008430:	f005 fca6 	bl	800dd80 <acos>
 8008434:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <calculed_ang_turn+0x1e0>)
 800843e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008442:	f7f8 f8f1 	bl	8000628 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	a316      	add	r3, pc, #88	; (adr r3, 80084a8 <calculed_ang_turn+0x1d8>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f7f8 fa12 	bl	800087c <__aeabi_ddiv>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	f04f 0300 	mov.w	r3, #0
 8008468:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800846c:	f7f8 fb4e 	bl	8000b0c <__aeabi_dcmplt>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <calculed_ang_turn+0x1b2>
 8008476:	6a3c      	ldr	r4, [r7, #32]
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800847e:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8008482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008486:	ec43 2b17 	vmov	d7, r2, r3
}
 800848a:	eeb0 0a47 	vmov.f32	s0, s14
 800848e:	eef0 0a67 	vmov.f32	s1, s15
 8008492:	3728      	adds	r7, #40	; 0x28
 8008494:	46bd      	mov	sp, r7
 8008496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w
 80084a0:	00000000 	.word	0x00000000
 80084a4:	40000000 	.word	0x40000000
 80084a8:	54442d18 	.word	0x54442d18
 80084ac:	400921fb 	.word	0x400921fb
 80084b0:	40668000 	.word	0x40668000

080084b4 <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	ed87 0b02 	vstr	d0, [r7, #8]
 80084be:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 80084c0:	ed97 0b02 	vldr	d0, [r7, #8]
 80084c4:	f005 fb68 	bl	800db98 <cos>
 80084c8:	eeb0 7a40 	vmov.f32	s14, s0
 80084cc:	eef0 7a60 	vmov.f32	s15, s1
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f103 0408 	add.w	r4, r3, #8
 80084dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80084e0:	f005 fbf6 	bl	800dcd0 <sin>
 80084e4:	eeb0 7a40 	vmov.f32	s14, s0
 80084e8:	eef0 7a60 	vmov.f32	s15, s1
 80084ec:	ed84 7b00 	vstr	d7, [r4]

}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd90      	pop	{r4, r7, pc}

080084f8 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a6c      	ldr	r2, [pc, #432]	; (80086b8 <pwm_Config+0x1c0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d106      	bne.n	8008518 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800850a:	4b6c      	ldr	r3, [pc, #432]	; (80086bc <pwm_Config+0x1c4>)
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	4a6b      	ldr	r2, [pc, #428]	; (80086bc <pwm_Config+0x1c4>)
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	6453      	str	r3, [r2, #68]	; 0x44
 8008516:	e030      	b.n	800857a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d106      	bne.n	8008530 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008522:	4b66      	ldr	r3, [pc, #408]	; (80086bc <pwm_Config+0x1c4>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	4a65      	ldr	r2, [pc, #404]	; (80086bc <pwm_Config+0x1c4>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	6413      	str	r3, [r2, #64]	; 0x40
 800852e:	e024      	b.n	800857a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a62      	ldr	r2, [pc, #392]	; (80086c0 <pwm_Config+0x1c8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d106      	bne.n	8008548 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800853a:	4b60      	ldr	r3, [pc, #384]	; (80086bc <pwm_Config+0x1c4>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	4a5f      	ldr	r2, [pc, #380]	; (80086bc <pwm_Config+0x1c4>)
 8008540:	f043 0302 	orr.w	r3, r3, #2
 8008544:	6413      	str	r3, [r2, #64]	; 0x40
 8008546:	e018      	b.n	800857a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a5d      	ldr	r2, [pc, #372]	; (80086c4 <pwm_Config+0x1cc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d106      	bne.n	8008560 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008552:	4b5a      	ldr	r3, [pc, #360]	; (80086bc <pwm_Config+0x1c4>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	4a59      	ldr	r2, [pc, #356]	; (80086bc <pwm_Config+0x1c4>)
 8008558:	f043 0304 	orr.w	r3, r3, #4
 800855c:	6413      	str	r3, [r2, #64]	; 0x40
 800855e:	e00c      	b.n	800857a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a58      	ldr	r2, [pc, #352]	; (80086c8 <pwm_Config+0x1d0>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d106      	bne.n	8008578 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800856a:	4b54      	ldr	r3, [pc, #336]	; (80086bc <pwm_Config+0x1c4>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	4a53      	ldr	r2, [pc, #332]	; (80086bc <pwm_Config+0x1c4>)
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	6413      	str	r3, [r2, #64]	; 0x40
 8008576:	e000      	b.n	800857a <pwm_Config+0x82>
	}
	else{
		__NOP();
 8008578:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008588:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7f5b      	ldrb	r3, [r3, #29]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f930 	bl	80087f8 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa67 	bl	8008a6c <setDuttyCycle>
 800859e:	e005      	b.n	80085ac <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f929 	bl	80087f8 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fb38 	bl	8008c1c <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0210 	bic.w	r2, r2, #16
 80085ba:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2200      	movs	r2, #0
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	7a1b      	ldrb	r3, [r3, #8]
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d86f      	bhi.n	80086ac <pwm_Config+0x1b4>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <pwm_Config+0xdc>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085e5 	.word	0x080085e5
 80085d8:	08008617 	.word	0x08008617
 80085dc:	08008649 	.word	0x08008649
 80085e0:	0800867b 	.word	0x0800867b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699a      	ldr	r2, [r3, #24]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0203 	bic.w	r2, r2, #3
 80085f2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008602:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0208 	orr.w	r2, r2, #8
 8008612:	619a      	str	r2, [r3, #24]


		break;
 8008614:	e04b      	b.n	80086ae <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008624:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008634:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008644:	619a      	str	r2, [r3, #24]

		break;
 8008646:	e032      	b.n	80086ae <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69da      	ldr	r2, [r3, #28]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0203 	bic.w	r2, r2, #3
 8008656:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	69da      	ldr	r2, [r3, #28]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008666:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0208 	orr.w	r2, r2, #8
 8008676:	61da      	str	r2, [r3, #28]

		break;
 8008678:	e019      	b.n	80086ae <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008688:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008698:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a8:	61da      	str	r2, [r3, #28]

		break;
 80086aa:	e000      	b.n	80086ae <pwm_Config+0x1b6>
	}

	default:{
		break;
 80086ac:	bf00      	nop
	}// fin del switch-case




}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00

080086cc <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a3d      	ldr	r2, [pc, #244]	; (80087f4 <enableOutput+0x104>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d13a      	bne.n	8008778 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008710:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7a1b      	ldrb	r3, [r3, #8]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d862      	bhi.n	80087e0 <enableOutput+0xf0>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <enableOutput+0x30>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008731 	.word	0x08008731
 8008724:	08008743 	.word	0x08008743
 8008728:	08008755 	.word	0x08008755
 800872c:	08008767 	.word	0x08008767
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	621a      	str	r2, [r3, #32]

				break;
 8008740:	e051      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a1a      	ldr	r2, [r3, #32]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 0210 	orr.w	r2, r2, #16
 8008750:	621a      	str	r2, [r3, #32]

				break;
 8008752:	e048      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008762:	621a      	str	r2, [r3, #32]

				break;
 8008764:	e03f      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6a1a      	ldr	r2, [r3, #32]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008774:	621a      	str	r2, [r3, #32]

				break;
 8008776:	e036      	b.n	80087e6 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7a1b      	ldrb	r3, [r3, #8]
 800877c:	2b03      	cmp	r3, #3
 800877e:	d831      	bhi.n	80087e4 <enableOutput+0xf4>
 8008780:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <enableOutput+0x98>)
 8008782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008786:	bf00      	nop
 8008788:	08008799 	.word	0x08008799
 800878c:	080087ab 	.word	0x080087ab
 8008790:	080087bd 	.word	0x080087bd
 8008794:	080087cf 	.word	0x080087cf
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	621a      	str	r2, [r3, #32]

				break;
 80087a8:	e01d      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a1a      	ldr	r2, [r3, #32]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0210 	orr.w	r2, r2, #16
 80087b8:	621a      	str	r2, [r3, #32]

				break;
 80087ba:	e014      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ca:	621a      	str	r2, [r3, #32]

				break;
 80087cc:	e00b      	b.n	80087e6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a1a      	ldr	r2, [r3, #32]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087dc:	621a      	str	r2, [r3, #32]

				break;
 80087de:	e002      	b.n	80087e6 <enableOutput+0xf6>
				break;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <enableOutput+0xf6>
			}

			default: {
				break;
 80087e4:	bf00      	nop
			}

		}
	}
	return SET;
 80087e6:	2301      	movs	r3, #1
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	40010000 	.word	0x40010000

080087f8 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	68d2      	ldr	r2, [r2, #12]
 800880c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b10      	cmp	r3, #16
 8008818:	d01a      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b14      	cmp	r3, #20
 800881e:	d017      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b1e      	cmp	r3, #30
 8008824:	d014      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b28      	cmp	r3, #40	; 0x28
 800882a:	d011      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b32      	cmp	r3, #50	; 0x32
 8008830:	d00e      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b3c      	cmp	r3, #60	; 0x3c
 8008836:	d00b      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b46      	cmp	r3, #70	; 0x46
 800883c:	d008      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b50      	cmp	r3, #80	; 0x50
 8008842:	d005      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b5a      	cmp	r3, #90	; 0x5a
 8008848:	d002      	beq.n	8008850 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b64      	cmp	r3, #100	; 0x64
 800884e:	d118      	bne.n	8008882 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	4b7b      	ldr	r3, [pc, #492]	; (8008a48 <setFrequency+0x250>)
 800885c:	f7f7 fee4 	bl	8000628 <__aeabi_dmul>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4610      	mov	r0, r2
 8008866:	4619      	mov	r1, r3
 8008868:	f7f8 f9b6 	bl	8000bd8 <__aeabi_d2uiz>
 800886c:	4603      	mov	r3, r0
 800886e:	b29a      	uxth	r2, r3
 8008870:	4b76      	ldr	r3, [pc, #472]	; (8008a4c <setFrequency+0x254>)
 8008872:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008874:	4b75      	ldr	r3, [pc, #468]	; (8008a4c <setFrequency+0x254>)
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008880:	e0dd      	b.n	8008a3e <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2ba0      	cmp	r3, #160	; 0xa0
 8008886:	d022      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2bc8      	cmp	r3, #200	; 0xc8
 800888c:	d01f      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008894:	d01b      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800889c:	d017      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80088a4:	d013      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80088ac:	d00f      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80088b4:	d00b      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80088bc:	d007      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80088c4:	d003      	beq.n	80088ce <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088cc:	d118      	bne.n	8008900 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	4b5d      	ldr	r3, [pc, #372]	; (8008a50 <setFrequency+0x258>)
 80088da:	f7f7 fea5 	bl	8000628 <__aeabi_dmul>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4610      	mov	r0, r2
 80088e4:	4619      	mov	r1, r3
 80088e6:	f7f8 f977 	bl	8000bd8 <__aeabi_d2uiz>
 80088ea:	4603      	mov	r3, r0
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	4b57      	ldr	r3, [pc, #348]	; (8008a4c <setFrequency+0x254>)
 80088f0:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80088f2:	4b56      	ldr	r3, [pc, #344]	; (8008a4c <setFrequency+0x254>)
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	1e5a      	subs	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80088fe:	e09e      	b.n	8008a3e <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008906:	d029      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800890e:	d025      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008916:	4293      	cmp	r3, r2
 8008918:	d020      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008920:	d01c      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d017      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f241 7270 	movw	r2, #6000	; 0x1770
 8008932:	4293      	cmp	r3, r2
 8008934:	d012      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f641 3258 	movw	r2, #7000	; 0x1b58
 800893c:	4293      	cmp	r3, r2
 800893e:	d00d      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008946:	d009      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f242 3228 	movw	r2, #9000	; 0x2328
 800894e:	4293      	cmp	r3, r2
 8008950:	d004      	beq.n	800895c <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f242 7210 	movw	r2, #10000	; 0x2710
 8008958:	4293      	cmp	r3, r2
 800895a:	d118      	bne.n	800898e <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <setFrequency+0x25c>)
 8008968:	f7f7 fe5e 	bl	8000628 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4610      	mov	r0, r2
 8008972:	4619      	mov	r1, r3
 8008974:	f7f8 f930 	bl	8000bd8 <__aeabi_d2uiz>
 8008978:	4603      	mov	r3, r0
 800897a:	b29a      	uxth	r2, r3
 800897c:	4b33      	ldr	r3, [pc, #204]	; (8008a4c <setFrequency+0x254>)
 800897e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008980:	4b32      	ldr	r3, [pc, #200]	; (8008a4c <setFrequency+0x254>)
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c
 800898c:	e057      	b.n	8008a3e <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008994:	d028      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f644 6220 	movw	r2, #20000	; 0x4e20
 800899c:	4293      	cmp	r3, r2
 800899e:	d023      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f247 5230 	movw	r2, #30000	; 0x7530
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d01e      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f649 4240 	movw	r2, #40000	; 0x9c40
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d019      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d014      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00f      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <setFrequency+0x260>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a22      	ldr	r2, [pc, #136]	; (8008a5c <setFrequency+0x264>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a21      	ldr	r2, [pc, #132]	; (8008a60 <setFrequency+0x268>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a20      	ldr	r2, [pc, #128]	; (8008a64 <setFrequency+0x26c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d111      	bne.n	8008a0c <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7f8 f8f1 	bl	8000bd8 <__aeabi_d2uiz>
 80089f6:	4603      	mov	r3, r0
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <setFrequency+0x254>)
 80089fc:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <setFrequency+0x254>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	1e5a      	subs	r2, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a0a:	e018      	b.n	8008a3e <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <setFrequency+0x270>)
 8008a18:	f7f7 ff30 	bl	800087c <__aeabi_ddiv>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4610      	mov	r0, r2
 8008a22:	4619      	mov	r1, r3
 8008a24:	f7f8 f8d8 	bl	8000bd8 <__aeabi_d2uiz>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <setFrequency+0x254>)
 8008a2e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <setFrequency+0x254>)
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	1e5a      	subs	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	408f4000 	.word	0x408f4000
 8008a4c:	200122a4 	.word	0x200122a4
 8008a50:	40590000 	.word	0x40590000
 8008a54:	40240000 	.word	0x40240000
 8008a58:	00011170 	.word	0x00011170
 8008a5c:	00013880 	.word	0x00013880
 8008a60:	00015f90 	.word	0x00015f90
 8008a64:	000186a0 	.word	0x000186a0
 8008a68:	40340000 	.word	0x40340000

08008a6c <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	b08b      	sub	sp, #44	; 0x2c
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7a1b      	ldrb	r3, [r3, #8]
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	f200 80c3 	bhi.w	8008c04 <setDuttyCycle+0x198>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <setDuttyCycle+0x18>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008b4d 	.word	0x08008b4d
 8008a90:	08008ba9 	.word	0x08008ba9
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	ed93 7a06 	vldr	s14, [r3, #24]
 8008a9a:	4b5d      	ldr	r3, [pc, #372]	; (8008c10 <setDuttyCycle+0x1a4>)
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aaa:	ee17 0a90 	vmov	r0, s15
 8008aae:	f7f7 fd63 	bl	8000578 <__aeabi_f2d>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	4b55      	ldr	r3, [pc, #340]	; (8008c14 <setDuttyCycle+0x1a8>)
 8008ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ac4:	f7f7 feda 	bl	800087c <__aeabi_ddiv>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4610      	mov	r0, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	4b50      	ldr	r3, [pc, #320]	; (8008c18 <setDuttyCycle+0x1ac>)
 8008ad6:	f7f7 fbef 	bl	80002b8 <__aeabi_dsub>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681c      	ldr	r4, [r3, #0]
 8008ae6:	f7f8 f877 	bl	8000bd8 <__aeabi_d2uiz>
 8008aea:	4603      	mov	r3, r0
 8008aec:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008aee:	e08a      	b.n	8008c06 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	ed93 7a06 	vldr	s14, [r3, #24]
 8008af6:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <setDuttyCycle+0x1a4>)
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	ee17 0a90 	vmov	r0, s15
 8008b0a:	f7f7 fd35 	bl	8000578 <__aeabi_f2d>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	4b3e      	ldr	r3, [pc, #248]	; (8008c14 <setDuttyCycle+0x1a8>)
 8008b1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b20:	f7f7 feac 	bl	800087c <__aeabi_ddiv>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	4b39      	ldr	r3, [pc, #228]	; (8008c18 <setDuttyCycle+0x1ac>)
 8008b32:	f7f7 fbc1 	bl	80002b8 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681c      	ldr	r4, [r3, #0]
 8008b42:	f7f8 f849 	bl	8000bd8 <__aeabi_d2uiz>
 8008b46:	4603      	mov	r3, r0
 8008b48:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008b4a:	e05c      	b.n	8008c06 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008b52:	4b2f      	ldr	r3, [pc, #188]	; (8008c10 <setDuttyCycle+0x1a4>)
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	ee17 0a90 	vmov	r0, s15
 8008b66:	f7f7 fd07 	bl	8000578 <__aeabi_f2d>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <setDuttyCycle+0x1a8>)
 8008b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b7c:	f7f7 fe7e 	bl	800087c <__aeabi_ddiv>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <setDuttyCycle+0x1ac>)
 8008b8e:	f7f7 fb93 	bl	80002b8 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681c      	ldr	r4, [r3, #0]
 8008b9e:	f7f8 f81b 	bl	8000bd8 <__aeabi_d2uiz>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008ba6:	e02e      	b.n	8008c06 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	ed93 7a06 	vldr	s14, [r3, #24]
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <setDuttyCycle+0x1a4>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbe:	ee17 0a90 	vmov	r0, s15
 8008bc2:	f7f7 fcd9 	bl	8000578 <__aeabi_f2d>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008bce:	f04f 0200 	mov.w	r2, #0
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <setDuttyCycle+0x1a8>)
 8008bd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bd8:	f7f7 fe50 	bl	800087c <__aeabi_ddiv>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4610      	mov	r0, r2
 8008be2:	4619      	mov	r1, r3
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	4b0b      	ldr	r3, [pc, #44]	; (8008c18 <setDuttyCycle+0x1ac>)
 8008bea:	f7f7 fb65 	bl	80002b8 <__aeabi_dsub>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681c      	ldr	r4, [r3, #0]
 8008bfa:	f7f7 ffed 	bl	8000bd8 <__aeabi_d2uiz>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008c02:	e000      	b.n	8008c06 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008c04:	bf00      	nop
	}

	}// fin del switch-case

}
 8008c06:	bf00      	nop
 8008c08:	372c      	adds	r7, #44	; 0x2c
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd90      	pop	{r4, r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200122a4 	.word	0x200122a4
 8008c14:	40590000 	.word	0x40590000
 8008c18:	3ff00000 	.word	0x3ff00000

08008c1c <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b08b      	sub	sp, #44	; 0x2c
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	7a1b      	ldrb	r3, [r3, #8]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	f200 80d3 	bhi.w	8008dd4 <setDuttyCycleAfOpt+0x1b8>
 8008c2e:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <setDuttyCycleAfOpt+0x18>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008ca9 	.word	0x08008ca9
 8008c3c:	08008d0d 	.word	0x08008d0d
 8008c40:	08008d71 	.word	0x08008d71
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c4a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008de0 <setDuttyCycleAfOpt+0x1c4>
 8008c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c52:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <setDuttyCycleAfOpt+0x1c8>)
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c62:	ee17 0a90 	vmov	r0, s15
 8008c66:	f7f7 fc87 	bl	8000578 <__aeabi_f2d>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	4b5c      	ldr	r3, [pc, #368]	; (8008de8 <setDuttyCycleAfOpt+0x1cc>)
 8008c78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c7c:	f7f7 fdfe 	bl	800087c <__aeabi_ddiv>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4610      	mov	r0, r2
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	4b57      	ldr	r3, [pc, #348]	; (8008dec <setDuttyCycleAfOpt+0x1d0>)
 8008c8e:	f7f7 fb13 	bl	80002b8 <__aeabi_dsub>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4610      	mov	r0, r2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681c      	ldr	r4, [r3, #0]
 8008c9e:	f7f7 ff9b 	bl	8000bd8 <__aeabi_d2uiz>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008ca6:	e096      	b.n	8008dd6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	edd3 7a06 	vldr	s15, [r3, #24]
 8008cae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008de0 <setDuttyCycleAfOpt+0x1c4>
 8008cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cb6:	4b4b      	ldr	r3, [pc, #300]	; (8008de4 <setDuttyCycleAfOpt+0x1c8>)
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	ee17 0a90 	vmov	r0, s15
 8008cca:	f7f7 fc55 	bl	8000578 <__aeabi_f2d>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	4b43      	ldr	r3, [pc, #268]	; (8008de8 <setDuttyCycleAfOpt+0x1cc>)
 8008cdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ce0:	f7f7 fdcc 	bl	800087c <__aeabi_ddiv>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	4b3e      	ldr	r3, [pc, #248]	; (8008dec <setDuttyCycleAfOpt+0x1d0>)
 8008cf2:	f7f7 fae1 	bl	80002b8 <__aeabi_dsub>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681c      	ldr	r4, [r3, #0]
 8008d02:	f7f7 ff69 	bl	8000bd8 <__aeabi_d2uiz>
 8008d06:	4603      	mov	r3, r0
 8008d08:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008d0a:	e064      	b.n	8008dd6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d12:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008de0 <setDuttyCycleAfOpt+0x1c4>
 8008d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d1a:	4b32      	ldr	r3, [pc, #200]	; (8008de4 <setDuttyCycleAfOpt+0x1c8>)
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2a:	ee17 0a90 	vmov	r0, s15
 8008d2e:	f7f7 fc23 	bl	8000578 <__aeabi_f2d>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	4b2a      	ldr	r3, [pc, #168]	; (8008de8 <setDuttyCycleAfOpt+0x1cc>)
 8008d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d44:	f7f7 fd9a 	bl	800087c <__aeabi_ddiv>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	4b25      	ldr	r3, [pc, #148]	; (8008dec <setDuttyCycleAfOpt+0x1d0>)
 8008d56:	f7f7 faaf 	bl	80002b8 <__aeabi_dsub>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681c      	ldr	r4, [r3, #0]
 8008d66:	f7f7 ff37 	bl	8000bd8 <__aeabi_d2uiz>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008d6e:	e032      	b.n	8008dd6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008de0 <setDuttyCycleAfOpt+0x1c4>
 8008d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d7e:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <setDuttyCycleAfOpt+0x1c8>)
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	ee17 0a90 	vmov	r0, s15
 8008d92:	f7f7 fbf1 	bl	8000578 <__aeabi_f2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <setDuttyCycleAfOpt+0x1cc>)
 8008da4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008da8:	f7f7 fd68 	bl	800087c <__aeabi_ddiv>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4610      	mov	r0, r2
 8008db2:	4619      	mov	r1, r3
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <setDuttyCycleAfOpt+0x1d0>)
 8008dba:	f7f7 fa7d 	bl	80002b8 <__aeabi_dsub>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681c      	ldr	r4, [r3, #0]
 8008dca:	f7f7 ff05 	bl	8000bd8 <__aeabi_d2uiz>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008dd2:	e000      	b.n	8008dd6 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8008dd4:	bf00      	nop
	}

	}// fin del switch-case


}
 8008dd6:	bf00      	nop
 8008dd8:	372c      	adds	r7, #44	; 0x2c
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd90      	pop	{r4, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	42c80000 	.word	0x42c80000
 8008de4:	200122a4 	.word	0x200122a4
 8008de8:	40590000 	.word	0x40590000
 8008dec:	3ff00000 	.word	0x3ff00000

08008df0 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7a1b      	ldrb	r3, [r3, #8]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d82f      	bhi.n	8008e60 <disableOutput+0x70>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <disableOutput+0x18>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e19 	.word	0x08008e19
 8008e0c:	08008e2b 	.word	0x08008e2b
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	08008e4f 	.word	0x08008e4f
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	621a      	str	r2, [r3, #32]

			break;
 8008e28:	e01b      	b.n	8008e62 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6a1a      	ldr	r2, [r3, #32]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0210 	bic.w	r2, r2, #16
 8008e38:	621a      	str	r2, [r3, #32]

			break;
 8008e3a:	e012      	b.n	8008e62 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a1a      	ldr	r2, [r3, #32]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e4a:	621a      	str	r2, [r3, #32]

			break;
 8008e4c:	e009      	b.n	8008e62 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e5c:	621a      	str	r2, [r3, #32]

			break;
 8008e5e:	e000      	b.n	8008e62 <disableOutput+0x72>
		}

		default: {
			break;
 8008e60:	bf00      	nop
		}
		}

	return RESET;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7a1b      	ldrb	r3, [r3, #8]
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d82f      	bhi.n	8008ee0 <PWMx_Toggle+0x70>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <PWMx_Toggle+0x18>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008eab 	.word	0x08008eab
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ecf 	.word	0x08008ecf
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a1a      	ldr	r2, [r3, #32]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f082 0202 	eor.w	r2, r2, #2
 8008ea6:	621a      	str	r2, [r3, #32]

				break;
 8008ea8:	e01b      	b.n	8008ee2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f082 0220 	eor.w	r2, r2, #32
 8008eb8:	621a      	str	r2, [r3, #32]

				break;
 8008eba:	e012      	b.n	8008ee2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8008eca:	621a      	str	r2, [r3, #32]

				break;
 8008ecc:	e009      	b.n	8008ee2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a1a      	ldr	r2, [r3, #32]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8008edc:	621a      	str	r2, [r3, #32]

				break;
 8008ede:	e000      	b.n	8008ee2 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8008ee0:	bf00      	nop
			}
			}


}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8008efa:	4b92      	ldr	r3, [pc, #584]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a91      	ldr	r2, [pc, #580]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f04:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008f06:	4b8f      	ldr	r3, [pc, #572]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008f0e:	4b8e      	ldr	r3, [pc, #568]	; (8009148 <RCC_enableMaxFrequencies+0x258>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a8d      	ldr	r2, [pc, #564]	; (8009148 <RCC_enableMaxFrequencies+0x258>)
 8008f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f18:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8008f1a:	4b8a      	ldr	r3, [pc, #552]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	4a89      	ldr	r2, [pc, #548]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008f24:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	f200 82fc 	bhi.w	8009526 <RCC_enableMaxFrequencies+0x636>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <RCC_enableMaxFrequencies+0x44>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008ffb 	.word	0x08008ffb
 8008f3c:	0800909d 	.word	0x0800909d
 8008f40:	08009151 	.word	0x08009151
 8008f44:	080091f3 	.word	0x080091f3
 8008f48:	08009295 	.word	0x08009295
 8008f4c:	08009341 	.word	0x08009341
 8008f50:	080093e3 	.word	0x080093e3
 8008f54:	08009485 	.word	0x08009485
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008f58:	4b7a      	ldr	r3, [pc, #488]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4a79      	ldr	r2, [pc, #484]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f62:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008f64:	4b77      	ldr	r3, [pc, #476]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a76      	ldr	r2, [pc, #472]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f6a:	f043 0310 	orr.w	r3, r3, #16
 8008f6e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008f70:	4b74      	ldr	r3, [pc, #464]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a73      	ldr	r2, [pc, #460]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f7e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008f80:	4b70      	ldr	r3, [pc, #448]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	4a6f      	ldr	r2, [pc, #444]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f86:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008f8a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008f8c:	4b6d      	ldr	r3, [pc, #436]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a6c      	ldr	r2, [pc, #432]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f96:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008f98:	4b6a      	ldr	r3, [pc, #424]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4a69      	ldr	r2, [pc, #420]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa2:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008fa4:	4b67      	ldr	r3, [pc, #412]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	4a66      	ldr	r2, [pc, #408]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008fb0:	4b64      	ldr	r3, [pc, #400]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	4a63      	ldr	r2, [pc, #396]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008fbc:	4b61      	ldr	r3, [pc, #388]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	4a60      	ldr	r2, [pc, #384]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fc6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008fc8:	4b5e      	ldr	r3, [pc, #376]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a5d      	ldr	r2, [pc, #372]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008fd4:	e000      	b.n	8008fd8 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8008fd6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008fd8:	4b5a      	ldr	r3, [pc, #360]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0f8      	beq.n	8008fd6 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008fe4:	4b59      	ldr	r3, [pc, #356]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a58      	ldr	r2, [pc, #352]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8008fea:	f023 030f 	bic.w	r3, r3, #15
 8008fee:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008ff0:	4b56      	ldr	r3, [pc, #344]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8008ff2:	4a56      	ldr	r2, [pc, #344]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6013      	str	r3, [r2, #0]

			break;
 8008ff8:	e296      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ffa:	4b52      	ldr	r3, [pc, #328]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4a51      	ldr	r2, [pc, #324]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009000:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009004:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009006:	4b4f      	ldr	r3, [pc, #316]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4a4e      	ldr	r2, [pc, #312]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800900c:	f043 0310 	orr.w	r3, r3, #16
 8009010:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009012:	4b4c      	ldr	r3, [pc, #304]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4a4b      	ldr	r2, [pc, #300]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009018:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8009022:	4b48      	ldr	r3, [pc, #288]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4a47      	ldr	r2, [pc, #284]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009028:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800902c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800902e:	4b45      	ldr	r3, [pc, #276]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	4a44      	ldr	r2, [pc, #272]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009034:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009038:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800903a:	4b42      	ldr	r3, [pc, #264]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	4a41      	ldr	r2, [pc, #260]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009044:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009046:	4b3f      	ldr	r3, [pc, #252]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4a3e      	ldr	r2, [pc, #248]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800904c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009050:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009052:	4b3c      	ldr	r3, [pc, #240]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	4a3b      	ldr	r2, [pc, #236]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800905c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800905e:	4b39      	ldr	r3, [pc, #228]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	4a38      	ldr	r2, [pc, #224]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009068:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800906a:	4b36      	ldr	r3, [pc, #216]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a35      	ldr	r2, [pc, #212]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009074:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009076:	e000      	b.n	800907a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8009078:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800907a:	4b32      	ldr	r3, [pc, #200]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0f8      	beq.n	8009078 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009086:	4b31      	ldr	r3, [pc, #196]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a30      	ldr	r2, [pc, #192]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 800908c:	f023 030f 	bic.w	r3, r3, #15
 8009090:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8009094:	4a2d      	ldr	r2, [pc, #180]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6013      	str	r3, [r2, #0]

			break;
 800909a:	e245      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800909c:	4b29      	ldr	r3, [pc, #164]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4a28      	ldr	r2, [pc, #160]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80090a8:	4b26      	ldr	r3, [pc, #152]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4a25      	ldr	r2, [pc, #148]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090ae:	f043 0310 	orr.w	r3, r3, #16
 80090b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80090b4:	4b23      	ldr	r3, [pc, #140]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4a22      	ldr	r2, [pc, #136]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80090c4:	4b1f      	ldr	r3, [pc, #124]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	4a1e      	ldr	r2, [pc, #120]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090ca:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80090ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80090d0:	4b1c      	ldr	r3, [pc, #112]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80090da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a18      	ldr	r2, [pc, #96]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80090e8:	4b16      	ldr	r3, [pc, #88]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80090f4:	4b13      	ldr	r3, [pc, #76]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4a12      	ldr	r2, [pc, #72]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 80090fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800910a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800910c:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0c      	ldr	r2, [pc, #48]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 8009112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009116:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009118:	e000      	b.n	800911c <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800911a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <RCC_enableMaxFrequencies+0x254>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f8      	beq.n	800911a <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a07      	ldr	r2, [pc, #28]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 800912e:	f023 030f 	bic.w	r3, r3, #15
 8009132:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a04      	ldr	r2, [pc, #16]	; (800914c <RCC_enableMaxFrequencies+0x25c>)
 800913a:	f043 0301 	orr.w	r3, r3, #1
 800913e:	6013      	str	r3, [r2, #0]


			break;
 8009140:	e1f2      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
 8009142:	bf00      	nop
 8009144:	40023800 	.word	0x40023800
 8009148:	40007000 	.word	0x40007000
 800914c:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009150:	4b79      	ldr	r3, [pc, #484]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4a78      	ldr	r2, [pc, #480]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800915a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800915c:	4b76      	ldr	r3, [pc, #472]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4a75      	ldr	r2, [pc, #468]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009162:	f043 0310 	orr.w	r3, r3, #16
 8009166:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009168:	4b73      	ldr	r3, [pc, #460]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	4a72      	ldr	r2, [pc, #456]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800916e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009176:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009178:	4b6f      	ldr	r3, [pc, #444]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4a6e      	ldr	r2, [pc, #440]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800917e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8009182:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009184:	4b6c      	ldr	r3, [pc, #432]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	4a6b      	ldr	r2, [pc, #428]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800918a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800918e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009190:	4b69      	ldr	r3, [pc, #420]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009192:	4a69      	ldr	r2, [pc, #420]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009198:	4b67      	ldr	r3, [pc, #412]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	4a66      	ldr	r2, [pc, #408]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800919e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80091a4:	4b64      	ldr	r3, [pc, #400]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4a63      	ldr	r2, [pc, #396]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80091b0:	4b61      	ldr	r3, [pc, #388]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	4a60      	ldr	r2, [pc, #384]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ba:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80091bc:	4b5e      	ldr	r3, [pc, #376]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a5d      	ldr	r2, [pc, #372]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091c6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80091c8:	e000      	b.n	80091cc <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80091ca:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80091cc:	4b5a      	ldr	r3, [pc, #360]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f8      	beq.n	80091ca <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80091d8:	4b58      	ldr	r3, [pc, #352]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a57      	ldr	r2, [pc, #348]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 80091de:	f023 030f 	bic.w	r3, r3, #15
 80091e2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80091e4:	4b55      	ldr	r3, [pc, #340]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a54      	ldr	r2, [pc, #336]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	6013      	str	r3, [r2, #0]

			break;
 80091f0:	e19a      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80091f2:	4b51      	ldr	r3, [pc, #324]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	4a50      	ldr	r2, [pc, #320]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80091f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80091fe:	4b4e      	ldr	r3, [pc, #312]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4a4d      	ldr	r2, [pc, #308]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009204:	f043 0310 	orr.w	r3, r3, #16
 8009208:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800920a:	4b4b      	ldr	r3, [pc, #300]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	4a4a      	ldr	r2, [pc, #296]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009210:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009218:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800921a:	4b47      	ldr	r3, [pc, #284]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4a46      	ldr	r2, [pc, #280]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009220:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009224:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009226:	4b44      	ldr	r3, [pc, #272]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4a43      	ldr	r2, [pc, #268]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800922c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009230:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009232:	4b41      	ldr	r3, [pc, #260]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009234:	4a40      	ldr	r2, [pc, #256]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800923a:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	4a3e      	ldr	r2, [pc, #248]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009244:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009246:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	4a3b      	ldr	r2, [pc, #236]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800924c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009250:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009252:	4b39      	ldr	r3, [pc, #228]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4a38      	ldr	r2, [pc, #224]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800925c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800925e:	4b36      	ldr	r3, [pc, #216]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a35      	ldr	r2, [pc, #212]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009268:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800926a:	e000      	b.n	800926e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800926c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800926e:	4b32      	ldr	r3, [pc, #200]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f8      	beq.n	800926c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800927a:	4b30      	ldr	r3, [pc, #192]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a2f      	ldr	r2, [pc, #188]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 8009280:	f023 030f 	bic.w	r3, r3, #15
 8009284:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009286:	4b2d      	ldr	r3, [pc, #180]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a2c      	ldr	r2, [pc, #176]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	6013      	str	r3, [r2, #0]

			break;
 8009292:	e149      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009294:	4b28      	ldr	r3, [pc, #160]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4a27      	ldr	r2, [pc, #156]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 800929a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800929e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80092a0:	4b25      	ldr	r3, [pc, #148]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	4a24      	ldr	r2, [pc, #144]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092a6:	f043 0310 	orr.w	r3, r3, #16
 80092aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80092ac:	4b22      	ldr	r3, [pc, #136]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	4a21      	ldr	r2, [pc, #132]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a1d      	ldr	r2, [pc, #116]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092c2:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80092c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80092c8:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	4a1a      	ldr	r2, [pc, #104]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80092d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092d6:	4a18      	ldr	r2, [pc, #96]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80092dc:	4b16      	ldr	r3, [pc, #88]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	4a15      	ldr	r2, [pc, #84]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80092e8:	4b13      	ldr	r3, [pc, #76]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	4a12      	ldr	r2, [pc, #72]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80092f4:	4b10      	ldr	r3, [pc, #64]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 80092fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092fe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009300:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a0c      	ldr	r2, [pc, #48]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800930a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800930c:	e000      	b.n	8009310 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800930e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009310:	4b09      	ldr	r3, [pc, #36]	; (8009338 <RCC_enableMaxFrequencies+0x448>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0f8      	beq.n	800930e <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a06      	ldr	r2, [pc, #24]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 8009322:	f023 030f 	bic.w	r3, r3, #15
 8009326:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a03      	ldr	r2, [pc, #12]	; (800933c <RCC_enableMaxFrequencies+0x44c>)
 800932e:	f043 0302 	orr.w	r3, r3, #2
 8009332:	6013      	str	r3, [r2, #0]

			break;
 8009334:	e0f8      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
 8009336:	bf00      	nop
 8009338:	40023800 	.word	0x40023800
 800933c:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009340:	4b84      	ldr	r3, [pc, #528]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4a83      	ldr	r2, [pc, #524]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800934a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800934c:	4b81      	ldr	r3, [pc, #516]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	4a80      	ldr	r2, [pc, #512]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009352:	f043 0310 	orr.w	r3, r3, #16
 8009356:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009358:	4b7e      	ldr	r3, [pc, #504]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4a7d      	ldr	r2, [pc, #500]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800935e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009366:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8009368:	4b7a      	ldr	r3, [pc, #488]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	4a79      	ldr	r2, [pc, #484]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800936e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009372:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009374:	4b77      	ldr	r3, [pc, #476]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a76      	ldr	r2, [pc, #472]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800937a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800937e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009380:	4b74      	ldr	r3, [pc, #464]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009382:	4a74      	ldr	r2, [pc, #464]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009388:	4b72      	ldr	r3, [pc, #456]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	4a71      	ldr	r2, [pc, #452]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800938e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009392:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009394:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	4a6e      	ldr	r2, [pc, #440]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800939a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800939e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80093a0:	4b6c      	ldr	r3, [pc, #432]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	4a6b      	ldr	r2, [pc, #428]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093aa:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80093ac:	4b69      	ldr	r3, [pc, #420]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a68      	ldr	r2, [pc, #416]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093b6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093b8:	e000      	b.n	80093bc <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80093ba:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093bc:	4b65      	ldr	r3, [pc, #404]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0f8      	beq.n	80093ba <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80093c8:	4b63      	ldr	r3, [pc, #396]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a62      	ldr	r2, [pc, #392]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 80093ce:	f023 030f 	bic.w	r3, r3, #15
 80093d2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80093d4:	4b60      	ldr	r3, [pc, #384]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a5f      	ldr	r2, [pc, #380]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 80093da:	f043 0302 	orr.w	r3, r3, #2
 80093de:	6013      	str	r3, [r2, #0]

			break;
 80093e0:	e0a2      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80093e2:	4b5c      	ldr	r3, [pc, #368]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4a5b      	ldr	r2, [pc, #364]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	4a58      	ldr	r2, [pc, #352]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093f4:	f043 0310 	orr.w	r3, r3, #16
 80093f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80093fa:	4b56      	ldr	r3, [pc, #344]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4a55      	ldr	r2, [pc, #340]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009400:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009408:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800940a:	4b52      	ldr	r3, [pc, #328]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	4a51      	ldr	r2, [pc, #324]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009410:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009414:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009416:	4b4f      	ldr	r3, [pc, #316]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	4a4e      	ldr	r2, [pc, #312]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800941c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009420:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009422:	4b4c      	ldr	r3, [pc, #304]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009424:	4a4b      	ldr	r2, [pc, #300]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800942a:	4b4a      	ldr	r3, [pc, #296]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	4a49      	ldr	r2, [pc, #292]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009434:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009436:	4b47      	ldr	r3, [pc, #284]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	4a46      	ldr	r2, [pc, #280]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800943c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009440:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009442:	4b44      	ldr	r3, [pc, #272]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	4a43      	ldr	r2, [pc, #268]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800944c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800944e:	4b41      	ldr	r3, [pc, #260]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a40      	ldr	r2, [pc, #256]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009458:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800945a:	e000      	b.n	800945e <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 800945c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800945e:	4b3d      	ldr	r3, [pc, #244]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0f8      	beq.n	800945c <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800946a:	4b3b      	ldr	r3, [pc, #236]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a3a      	ldr	r2, [pc, #232]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 8009470:	f023 030f 	bic.w	r3, r3, #15
 8009474:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009476:	4b38      	ldr	r3, [pc, #224]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a37      	ldr	r2, [pc, #220]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 800947c:	f043 0302 	orr.w	r3, r3, #2
 8009480:	6013      	str	r3, [r2, #0]

			break;
 8009482:	e051      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009484:	4b33      	ldr	r3, [pc, #204]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a32      	ldr	r2, [pc, #200]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800948a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800948e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8009490:	4b30      	ldr	r3, [pc, #192]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4a2f      	ldr	r2, [pc, #188]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009496:	f043 0308 	orr.w	r3, r3, #8
 800949a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800949c:	4b2d      	ldr	r3, [pc, #180]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a2c      	ldr	r2, [pc, #176]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80094ac:	4b29      	ldr	r3, [pc, #164]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4a28      	ldr	r2, [pc, #160]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094b2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80094b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80094b8:	4b26      	ldr	r3, [pc, #152]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	4a25      	ldr	r2, [pc, #148]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80094c4:	4b23      	ldr	r3, [pc, #140]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094c6:	4a23      	ldr	r2, [pc, #140]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80094cc:	4b21      	ldr	r3, [pc, #132]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4a20      	ldr	r2, [pc, #128]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094d6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094e2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80094e4:	4b1b      	ldr	r3, [pc, #108]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094ee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80094f0:	4b18      	ldr	r3, [pc, #96]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a17      	ldr	r2, [pc, #92]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 80094f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094fa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80094fc:	e000      	b.n	8009500 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 80094fe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009500:	4b14      	ldr	r3, [pc, #80]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0f8      	beq.n	80094fe <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800950c:	4b12      	ldr	r3, [pc, #72]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a11      	ldr	r2, [pc, #68]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 8009512:	f023 030f 	bic.w	r3, r3, #15
 8009516:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0e      	ldr	r2, [pc, #56]	; (8009558 <RCC_enableMaxFrequencies+0x668>)
 800951e:	f043 0303 	orr.w	r3, r3, #3
 8009522:	6013      	str	r3, [r2, #0]

			break;
 8009524:	e000      	b.n	8009528 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8009526:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8009528:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	4a09      	ldr	r2, [pc, #36]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800952e:	f043 0302 	orr.w	r3, r3, #2
 8009532:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009534:	e000      	b.n	8009538 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8009536:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <RCC_enableMaxFrequencies+0x664>)
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0f8      	beq.n	8009536 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	40023800 	.word	0x40023800
 8009558:	40023c00 	.word	0x40023c00

0800955c <__NVIC_EnableIRQ>:
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	db0b      	blt.n	8009586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	f003 021f 	and.w	r2, r3, #31
 8009574:	4907      	ldr	r1, [pc, #28]	; (8009594 <__NVIC_EnableIRQ+0x38>)
 8009576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	2001      	movs	r0, #1
 800957e:	fa00 f202 	lsl.w	r2, r0, r2
 8009582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	e000e100 	.word	0xe000e100

08009598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	db0a      	blt.n	80095c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	490c      	ldr	r1, [pc, #48]	; (80095e4 <__NVIC_SetPriority+0x4c>)
 80095b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b6:	0112      	lsls	r2, r2, #4
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	440b      	add	r3, r1
 80095bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095c0:	e00a      	b.n	80095d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	4908      	ldr	r1, [pc, #32]	; (80095e8 <__NVIC_SetPriority+0x50>)
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	3b04      	subs	r3, #4
 80095d0:	0112      	lsls	r2, r2, #4
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	440b      	add	r3, r1
 80095d6:	761a      	strb	r2, [r3, #24]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	e000e100 	.word	0xe000e100
 80095e8:	e000ed00 	.word	0xe000ed00

080095ec <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80095ec:	b590      	push	{r4, r7, lr}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80095f4:	b672      	cpsid	i
}
 80095f6:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a91      	ldr	r2, [pc, #580]	; (8009844 <USART_Config+0x258>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d106      	bne.n	8009610 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8009602:	4b91      	ldr	r3, [pc, #580]	; (8009848 <USART_Config+0x25c>)
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	4a90      	ldr	r2, [pc, #576]	; (8009848 <USART_Config+0x25c>)
 8009608:	f043 0310 	orr.w	r3, r3, #16
 800960c:	6453      	str	r3, [r2, #68]	; 0x44
 800960e:	e018      	b.n	8009642 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a8d      	ldr	r2, [pc, #564]	; (800984c <USART_Config+0x260>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d106      	bne.n	8009628 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800961a:	4b8b      	ldr	r3, [pc, #556]	; (8009848 <USART_Config+0x25c>)
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	4a8a      	ldr	r2, [pc, #552]	; (8009848 <USART_Config+0x25c>)
 8009620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009624:	6413      	str	r3, [r2, #64]	; 0x40
 8009626:	e00c      	b.n	8009642 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a88      	ldr	r2, [pc, #544]	; (8009850 <USART_Config+0x264>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d106      	bne.n	8009640 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8009632:	4b85      	ldr	r3, [pc, #532]	; (8009848 <USART_Config+0x25c>)
 8009634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009636:	4a84      	ldr	r2, [pc, #528]	; (8009848 <USART_Config+0x25c>)
 8009638:	f043 0320 	orr.w	r3, r3, #32
 800963c:	6453      	str	r3, [r2, #68]	; 0x44
 800963e:	e000      	b.n	8009642 <USART_Config+0x56>
	}
	else{
		__NOP();
 8009640:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2200      	movs	r2, #0
 8009650:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7a5b      	ldrb	r3, [r3, #9]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d025      	beq.n	80096a6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7a5b      	ldrb	r3, [r3, #9]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d110      	bne.n	8009684 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009670:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68da      	ldr	r2, [r3, #12]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009680:	60da      	str	r2, [r3, #12]
 8009682:	e018      	b.n	80096b6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009692:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096a2:	60da      	str	r2, [r3, #12]
 80096a4:	e007      	b.n	80096b6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	7a1b      	ldrb	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d108      	bne.n	80096d0 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	e007      	b.n	80096e0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096de:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	7a9b      	ldrb	r3, [r3, #10]
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d82f      	bhi.n	8009748 <USART_Config+0x15c>
 80096e8:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USART_Config+0x104>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009713 	.word	0x08009713
 80096f8:	08009725 	.word	0x08009725
 80096fc:	08009737 	.word	0x08009737
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800970e:	611a      	str	r2, [r3, #16]
			break;
 8009710:	e023      	b.n	800975a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009720:	611a      	str	r2, [r3, #16]
			break;
 8009722:	e01a      	b.n	800975a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009732:	611a      	str	r2, [r3, #16]
			break;
 8009734:	e011      	b.n	800975a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009744:	611a      	str	r2, [r3, #16]
			break;
 8009746:	e008      	b.n	800975a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009756:	611a      	str	r2, [r3, #16]
			break;
 8009758:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681c      	ldr	r4, [r3, #0]
 8009762:	4611      	mov	r1, r2
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f8d7 	bl	8009918 <brrCalculus>
 800976a:	4603      	mov	r3, r0
 800976c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	799b      	ldrb	r3, [r3, #6]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d82e      	bhi.n	80097d4 <USART_Config+0x1e8>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USART_Config+0x190>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	0800978d 	.word	0x0800978d
 8009780:	0800979f 	.word	0x0800979f
 8009784:	080097b1 	.word	0x080097b1
 8009788:	080097c3 	.word	0x080097c3
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0208 	orr.w	r2, r2, #8
 800979a:	60da      	str	r2, [r3, #12]
			break;
 800979c:	e023      	b.n	80097e6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0204 	orr.w	r2, r2, #4
 80097ac:	60da      	str	r2, [r3, #12]
			break;
 80097ae:	e01a      	b.n	80097e6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 020c 	orr.w	r2, r2, #12
 80097be:	60da      	str	r2, [r3, #12]
			break;
 80097c0:	e011      	b.n	80097e6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 020c 	bic.w	r2, r2, #12
 80097d0:	60da      	str	r2, [r3, #12]
			break;
 80097d2:	e008      	b.n	80097e6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 020c 	bic.w	r2, r2, #12
 80097e2:	60da      	str	r2, [r3, #12]
			break;
 80097e4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	799b      	ldrb	r3, [r3, #6]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d008      	beq.n	8009800 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68da      	ldr	r2, [r3, #12]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e007      	b.n	8009810 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	795b      	ldrb	r3, [r3, #5]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d139      	bne.n	800988c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0220 	orr.w	r2, r2, #32
 8009826:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <USART_Config+0x258>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d110      	bne.n	8009854 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009832:	2025      	movs	r0, #37	; 0x25
 8009834:	f7ff fe92 	bl	800955c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8009838:	2101      	movs	r1, #1
 800983a:	2025      	movs	r0, #37	; 0x25
 800983c:	f7ff feac 	bl	8009598 <__NVIC_SetPriority>
 8009840:	e02c      	b.n	800989c <USART_Config+0x2b0>
 8009842:	bf00      	nop
 8009844:	40011000 	.word	0x40011000
 8009848:	40023800 	.word	0x40023800
 800984c:	40004400 	.word	0x40004400
 8009850:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a2c      	ldr	r2, [pc, #176]	; (800990c <USART_Config+0x320>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d107      	bne.n	800986e <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800985e:	2026      	movs	r0, #38	; 0x26
 8009860:	f7ff fe7c 	bl	800955c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8009864:	2101      	movs	r1, #1
 8009866:	2026      	movs	r0, #38	; 0x26
 8009868:	f7ff fe96 	bl	8009598 <__NVIC_SetPriority>
 800986c:	e016      	b.n	800989c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a27      	ldr	r2, [pc, #156]	; (8009910 <USART_Config+0x324>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d107      	bne.n	8009888 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009878:	2047      	movs	r0, #71	; 0x47
 800987a:	f7ff fe6f 	bl	800955c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800987e:	2101      	movs	r1, #1
 8009880:	2047      	movs	r0, #71	; 0x47
 8009882:	f7ff fe89 	bl	8009598 <__NVIC_SetPriority>
 8009886:	e009      	b.n	800989c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8009888:	bf00      	nop
 800988a:	e007      	b.n	800989c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0220 	bic.w	r2, r2, #32
 800989a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d124      	bne.n	80098ee <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098b2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a16      	ldr	r2, [pc, #88]	; (8009914 <USART_Config+0x328>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d103      	bne.n	80098c6 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80098be:	2025      	movs	r0, #37	; 0x25
 80098c0:	f7ff fe4c 	bl	800955c <__NVIC_EnableIRQ>
 80098c4:	e01b      	b.n	80098fe <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a10      	ldr	r2, [pc, #64]	; (800990c <USART_Config+0x320>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d103      	bne.n	80098d8 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80098d0:	2026      	movs	r0, #38	; 0x26
 80098d2:	f7ff fe43 	bl	800955c <__NVIC_EnableIRQ>
 80098d6:	e012      	b.n	80098fe <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a0c      	ldr	r2, [pc, #48]	; (8009910 <USART_Config+0x324>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d103      	bne.n	80098ea <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80098e2:	2047      	movs	r0, #71	; 0x47
 80098e4:	f7ff fe3a 	bl	800955c <__NVIC_EnableIRQ>
 80098e8:	e009      	b.n	80098fe <USART_Config+0x312>
		}
		else{
				__NOP();
 80098ea:	bf00      	nop
 80098ec:	e007      	b.n	80098fe <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098fc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80098fe:	b662      	cpsie	i
}
 8009900:	bf00      	nop
	}

	__enable_irq();
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	bd90      	pop	{r4, r7, pc}
 800990a:	bf00      	nop
 800990c:	40004400 	.word	0x40004400
 8009910:	40011400 	.word	0x40011400
 8009914:	40011000 	.word	0x40011000

08009918 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009918:	b5b0      	push	{r4, r5, r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	79db      	ldrb	r3, [r3, #7]
 8009926:	2b03      	cmp	r3, #3
 8009928:	f200 8217 	bhi.w	8009d5a <brrCalculus+0x442>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <brrCalculus+0x1c>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009945 	.word	0x08009945
 8009938:	08009a3f 	.word	0x08009a3f
 800993c:	08009b59 	.word	0x08009b59
 8009940:	08009c61 	.word	0x08009c61

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8009944:	4980      	ldr	r1, [pc, #512]	; (8009b48 <brrCalculus+0x230>)
 8009946:	a37c      	add	r3, pc, #496	; (adr r3, 8009b38 <brrCalculus+0x220>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	ee17 0a90 	vmov	r0, s15
 800995e:	f7f6 fe0b 	bl	8000578 <__aeabi_f2d>
 8009962:	4b79      	ldr	r3, [pc, #484]	; (8009b48 <brrCalculus+0x230>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fe5e 	bl	8000628 <__aeabi_dmul>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4975      	ldr	r1, [pc, #468]	; (8009b48 <brrCalculus+0x230>)
 8009972:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009976:	4b74      	ldr	r3, [pc, #464]	; (8009b48 <brrCalculus+0x230>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	f7f7 f902 	bl	8000b88 <__aeabi_d2iz>
 8009984:	4603      	mov	r3, r0
 8009986:	b29a      	uxth	r2, r3
 8009988:	4b70      	ldr	r3, [pc, #448]	; (8009b4c <brrCalculus+0x234>)
 800998a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800998c:	4b6e      	ldr	r3, [pc, #440]	; (8009b48 <brrCalculus+0x230>)
 800998e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009992:	4b6d      	ldr	r3, [pc, #436]	; (8009b48 <brrCalculus+0x230>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	4610      	mov	r0, r2
 800999a:	4619      	mov	r1, r3
 800999c:	f7f7 f8f4 	bl	8000b88 <__aeabi_d2iz>
 80099a0:	4603      	mov	r3, r0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f6 fdd6 	bl	8000554 <__aeabi_i2d>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4620      	mov	r0, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	f7f6 fc82 	bl	80002b8 <__aeabi_dsub>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4610      	mov	r0, r2
 80099ba:	4619      	mov	r1, r3
 80099bc:	f7f7 f92c 	bl	8000c18 <__aeabi_d2f>
 80099c0:	4603      	mov	r3, r0
 80099c2:	4a63      	ldr	r2, [pc, #396]	; (8009b50 <brrCalculus+0x238>)
 80099c4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80099c6:	4b62      	ldr	r3, [pc, #392]	; (8009b50 <brrCalculus+0x238>)
 80099c8:	edd3 7a00 	vldr	s15, [r3]
 80099cc:	2004      	movs	r0, #4
 80099ce:	eeb0 0a67 	vmov.f32	s0, s15
 80099d2:	f000 fa6d 	bl	8009eb0 <roundToNDecimals>
 80099d6:	eef0 7a40 	vmov.f32	s15, s0
 80099da:	4b5d      	ldr	r3, [pc, #372]	; (8009b50 <brrCalculus+0x238>)
 80099dc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80099e0:	4b5b      	ldr	r3, [pc, #364]	; (8009b50 <brrCalculus+0x238>)
 80099e2:	edd3 7a00 	vldr	s15, [r3]
 80099e6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80099ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099ee:	4b58      	ldr	r3, [pc, #352]	; (8009b50 <brrCalculus+0x238>)
 80099f0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80099f4:	4b56      	ldr	r3, [pc, #344]	; (8009b50 <brrCalculus+0x238>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7f6 fdbd 	bl	8000578 <__aeabi_f2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	ec43 2b10 	vmov	d0, r2, r3
 8009a06:	f004 f91b 	bl	800dc40 <round>
 8009a0a:	ec53 2b10 	vmov	r2, r3, d0
 8009a0e:	4610      	mov	r0, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	f7f7 f901 	bl	8000c18 <__aeabi_d2f>
 8009a16:	4603      	mov	r3, r0
 8009a18:	4a4d      	ldr	r2, [pc, #308]	; (8009b50 <brrCalculus+0x238>)
 8009a1a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009a1c:	4b4b      	ldr	r3, [pc, #300]	; (8009b4c <brrCalculus+0x234>)
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	011b      	lsls	r3, r3, #4
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	4b4a      	ldr	r3, [pc, #296]	; (8009b50 <brrCalculus+0x238>)
 8009a26:	edd3 7a00 	vldr	s15, [r3]
 8009a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2e:	ee17 3a90 	vmov	r3, s15
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4313      	orrs	r3, r2
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	4b46      	ldr	r3, [pc, #280]	; (8009b54 <brrCalculus+0x23c>)
 8009a3a:	801a      	strh	r2, [r3, #0]


		break;
 8009a3c:	e18f      	b.n	8009d5e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8009a3e:	4942      	ldr	r1, [pc, #264]	; (8009b48 <brrCalculus+0x230>)
 8009a40:	a33f      	add	r3, pc, #252	; (adr r3, 8009b40 <brrCalculus+0x228>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	ee07 3a90 	vmov	s15, r3
 8009a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a54:	ee17 0a90 	vmov	r0, s15
 8009a58:	f7f6 fd8e 	bl	8000578 <__aeabi_f2d>
 8009a5c:	4b3a      	ldr	r3, [pc, #232]	; (8009b48 <brrCalculus+0x230>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fde1 	bl	8000628 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4937      	ldr	r1, [pc, #220]	; (8009b48 <brrCalculus+0x230>)
 8009a6c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009a70:	4b35      	ldr	r3, [pc, #212]	; (8009b48 <brrCalculus+0x230>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	4610      	mov	r0, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7f7 f885 	bl	8000b88 <__aeabi_d2iz>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <brrCalculus+0x234>)
 8009a84:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009a86:	4b30      	ldr	r3, [pc, #192]	; (8009b48 <brrCalculus+0x230>)
 8009a88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a8c:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <brrCalculus+0x230>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	4610      	mov	r0, r2
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7f7 f877 	bl	8000b88 <__aeabi_d2iz>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7f6 fd59 	bl	8000554 <__aeabi_i2d>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f6 fc05 	bl	80002b8 <__aeabi_dsub>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f7f7 f8af 	bl	8000c18 <__aeabi_d2f>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <brrCalculus+0x238>)
 8009abe:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009ac0:	4b23      	ldr	r3, [pc, #140]	; (8009b50 <brrCalculus+0x238>)
 8009ac2:	edd3 7a00 	vldr	s15, [r3]
 8009ac6:	2004      	movs	r0, #4
 8009ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8009acc:	f000 f9f0 	bl	8009eb0 <roundToNDecimals>
 8009ad0:	eef0 7a40 	vmov.f32	s15, s0
 8009ad4:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <brrCalculus+0x238>)
 8009ad6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009ada:	4b1d      	ldr	r3, [pc, #116]	; (8009b50 <brrCalculus+0x238>)
 8009adc:	edd3 7a00 	vldr	s15, [r3]
 8009ae0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ae8:	4b19      	ldr	r3, [pc, #100]	; (8009b50 <brrCalculus+0x238>)
 8009aea:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009aee:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <brrCalculus+0x238>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f6 fd40 	bl	8000578 <__aeabi_f2d>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	ec43 2b10 	vmov	d0, r2, r3
 8009b00:	f004 f89e 	bl	800dc40 <round>
 8009b04:	ec53 2b10 	vmov	r2, r3, d0
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f7f7 f884 	bl	8000c18 <__aeabi_d2f>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <brrCalculus+0x238>)
 8009b14:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009b16:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <brrCalculus+0x234>)
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <brrCalculus+0x238>)
 8009b20:	edd3 7a00 	vldr	s15, [r3]
 8009b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b28:	ee17 3a90 	vmov	r3, s15
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <brrCalculus+0x23c>)
 8009b34:	801a      	strh	r2, [r3, #0]


		break;
 8009b36:	e112      	b.n	8009d5e <brrCalculus+0x446>
 8009b38:	b4e81b4f 	.word	0xb4e81b4f
 8009b3c:	3edb4e81 	.word	0x3edb4e81
 8009b40:	b4e81b4f 	.word	0xb4e81b4f
 8009b44:	3ecb4e81 	.word	0x3ecb4e81
 8009b48:	200122b0 	.word	0x200122b0
 8009b4c:	200122a8 	.word	0x200122a8
 8009b50:	200122ac 	.word	0x200122ac
 8009b54:	200122a6 	.word	0x200122a6
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009b58:	4989      	ldr	r1, [pc, #548]	; (8009d80 <brrCalculus+0x468>)
 8009b5a:	a385      	add	r3, pc, #532	; (adr r3, 8009d70 <brrCalculus+0x458>)
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	ee17 0a90 	vmov	r0, s15
 8009b72:	f7f6 fd01 	bl	8000578 <__aeabi_f2d>
 8009b76:	4b82      	ldr	r3, [pc, #520]	; (8009d80 <brrCalculus+0x468>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fd54 	bl	8000628 <__aeabi_dmul>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	497e      	ldr	r1, [pc, #504]	; (8009d80 <brrCalculus+0x468>)
 8009b86:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009b8a:	4b7d      	ldr	r3, [pc, #500]	; (8009d80 <brrCalculus+0x468>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	4610      	mov	r0, r2
 8009b92:	4619      	mov	r1, r3
 8009b94:	f7f6 fff8 	bl	8000b88 <__aeabi_d2iz>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	4b79      	ldr	r3, [pc, #484]	; (8009d84 <brrCalculus+0x46c>)
 8009b9e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009ba0:	4b77      	ldr	r3, [pc, #476]	; (8009d80 <brrCalculus+0x468>)
 8009ba2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ba6:	4b76      	ldr	r3, [pc, #472]	; (8009d80 <brrCalculus+0x468>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f7f6 ffea 	bl	8000b88 <__aeabi_d2iz>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7f6 fccc 	bl	8000554 <__aeabi_i2d>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fb78 	bl	80002b8 <__aeabi_dsub>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	f7f7 f822 	bl	8000c18 <__aeabi_d2f>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a6c      	ldr	r2, [pc, #432]	; (8009d88 <brrCalculus+0x470>)
 8009bd8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009bda:	4b6b      	ldr	r3, [pc, #428]	; (8009d88 <brrCalculus+0x470>)
 8009bdc:	edd3 7a00 	vldr	s15, [r3]
 8009be0:	2004      	movs	r0, #4
 8009be2:	eeb0 0a67 	vmov.f32	s0, s15
 8009be6:	f000 f963 	bl	8009eb0 <roundToNDecimals>
 8009bea:	eef0 7a40 	vmov.f32	s15, s0
 8009bee:	4b66      	ldr	r3, [pc, #408]	; (8009d88 <brrCalculus+0x470>)
 8009bf0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009bf4:	4b64      	ldr	r3, [pc, #400]	; (8009d88 <brrCalculus+0x470>)
 8009bf6:	edd3 7a00 	vldr	s15, [r3]
 8009bfa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c02:	4b61      	ldr	r3, [pc, #388]	; (8009d88 <brrCalculus+0x470>)
 8009c04:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009c08:	4b5f      	ldr	r3, [pc, #380]	; (8009d88 <brrCalculus+0x470>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f6 fcb3 	bl	8000578 <__aeabi_f2d>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	ec43 2b10 	vmov	d0, r2, r3
 8009c1a:	f004 f811 	bl	800dc40 <round>
 8009c1e:	ec51 0b10 	vmov	r0, r1, d0
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	4b59      	ldr	r3, [pc, #356]	; (8009d8c <brrCalculus+0x474>)
 8009c28:	f7f6 fb48 	bl	80002bc <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4610      	mov	r0, r2
 8009c32:	4619      	mov	r1, r3
 8009c34:	f7f6 fff0 	bl	8000c18 <__aeabi_d2f>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4a53      	ldr	r2, [pc, #332]	; (8009d88 <brrCalculus+0x470>)
 8009c3c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009c3e:	4b51      	ldr	r3, [pc, #324]	; (8009d84 <brrCalculus+0x46c>)
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	4b50      	ldr	r3, [pc, #320]	; (8009d88 <brrCalculus+0x470>)
 8009c48:	edd3 7a00 	vldr	s15, [r3]
 8009c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c50:	ee17 3a90 	vmov	r3, s15
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	4b4d      	ldr	r3, [pc, #308]	; (8009d90 <brrCalculus+0x478>)
 8009c5c:	801a      	strh	r2, [r3, #0]


		break;
 8009c5e:	e07e      	b.n	8009d5e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009c60:	4947      	ldr	r1, [pc, #284]	; (8009d80 <brrCalculus+0x468>)
 8009c62:	a345      	add	r3, pc, #276	; (adr r3, 8009d78 <brrCalculus+0x460>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c76:	ee17 0a90 	vmov	r0, s15
 8009c7a:	f7f6 fc7d 	bl	8000578 <__aeabi_f2d>
 8009c7e:	4b40      	ldr	r3, [pc, #256]	; (8009d80 <brrCalculus+0x468>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fcd0 	bl	8000628 <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	493c      	ldr	r1, [pc, #240]	; (8009d80 <brrCalculus+0x468>)
 8009c8e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009c92:	4b3b      	ldr	r3, [pc, #236]	; (8009d80 <brrCalculus+0x468>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f7f6 ff74 	bl	8000b88 <__aeabi_d2iz>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	4b37      	ldr	r3, [pc, #220]	; (8009d84 <brrCalculus+0x46c>)
 8009ca6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009ca8:	4b35      	ldr	r3, [pc, #212]	; (8009d80 <brrCalculus+0x468>)
 8009caa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cae:	4b34      	ldr	r3, [pc, #208]	; (8009d80 <brrCalculus+0x468>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	f7f6 ff66 	bl	8000b88 <__aeabi_d2iz>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f6 fc48 	bl	8000554 <__aeabi_i2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 faf4 	bl	80002b8 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f7f6 ff9e 	bl	8000c18 <__aeabi_d2f>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <brrCalculus+0x470>)
 8009ce0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009ce2:	4b29      	ldr	r3, [pc, #164]	; (8009d88 <brrCalculus+0x470>)
 8009ce4:	edd3 7a00 	vldr	s15, [r3]
 8009ce8:	2004      	movs	r0, #4
 8009cea:	eeb0 0a67 	vmov.f32	s0, s15
 8009cee:	f000 f8df 	bl	8009eb0 <roundToNDecimals>
 8009cf2:	eef0 7a40 	vmov.f32	s15, s0
 8009cf6:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <brrCalculus+0x470>)
 8009cf8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009cfc:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <brrCalculus+0x470>)
 8009cfe:	edd3 7a00 	vldr	s15, [r3]
 8009d02:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d0a:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <brrCalculus+0x470>)
 8009d0c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <brrCalculus+0x470>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f6 fc2f 	bl	8000578 <__aeabi_f2d>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	ec43 2b10 	vmov	d0, r2, r3
 8009d22:	f003 ff8d 	bl	800dc40 <round>
 8009d26:	ec53 2b10 	vmov	r2, r3, d0
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	f7f6 ff73 	bl	8000c18 <__aeabi_d2f>
 8009d32:	4603      	mov	r3, r0
 8009d34:	4a14      	ldr	r2, [pc, #80]	; (8009d88 <brrCalculus+0x470>)
 8009d36:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009d38:	4b12      	ldr	r3, [pc, #72]	; (8009d84 <brrCalculus+0x46c>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	011b      	lsls	r3, r3, #4
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <brrCalculus+0x470>)
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 3a90 	vmov	r3, s15
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <brrCalculus+0x478>)
 8009d56:	801a      	strh	r2, [r3, #0]


		break;
 8009d58:	e001      	b.n	8009d5e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009d5a:	bf00      	nop
		break;
 8009d5c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <brrCalculus+0x478>)
 8009d60:	881b      	ldrh	r3, [r3, #0]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bdb0      	pop	{r4, r5, r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w
 8009d70:	789abcdf 	.word	0x789abcdf
 8009d74:	3ec23456 	.word	0x3ec23456
 8009d78:	789abcdf 	.word	0x789abcdf
 8009d7c:	3ea23456 	.word	0x3ea23456
 8009d80:	200122b0 	.word	0x200122b0
 8009d84:	200122a8 	.word	0x200122a8
 8009d88:	200122ac 	.word	0x200122ac
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	200122a6 	.word	0x200122a6

08009d94 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009d9e:	e000      	b.n	8009da2 <writeChar+0xe>
		__NOP();
 8009da0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0f7      	beq.n	8009da0 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	605a      	str	r2, [r3, #4]

}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8009dce:	e008      	b.n	8009de2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff ffdc 	bl	8009d94 <writeChar>
		msgToSend ++ ;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	3301      	adds	r3, #1
 8009de0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1f2      	bne.n	8009dd0 <writeMsg+0xc>
	}
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
	__NOP();
 8009df8:	bf00      	nop
}
 8009dfa:	bf00      	nop
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
	__NOP();
 8009e08:	bf00      	nop
}
 8009e0a:	bf00      	nop
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8009e14:	b480      	push	{r7}
 8009e16:	af00      	add	r7, sp, #0
	return auxRxData;
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <getRxData+0x14>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	200122b8 	.word	0x200122b8

08009e2c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <USART2_IRQHandler+0x24>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d006      	beq.n	8009e4a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009e3c:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <USART2_IRQHandler+0x24>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <USART2_IRQHandler+0x28>)
 8009e44:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8009e46:	f7f8 f81d 	bl	8001e84 <usart2Rx_Callback>
	}

}
 8009e4a:	bf00      	nop
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40004400 	.word	0x40004400
 8009e54:	200122b8 	.word	0x200122b8

08009e58 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <USART1_IRQHandler+0x24>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d006      	beq.n	8009e76 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009e68:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <USART1_IRQHandler+0x24>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <USART1_IRQHandler+0x28>)
 8009e70:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8009e72:	f7ff ffbf 	bl	8009df4 <usart1Rx_Callback>
	}
}
 8009e76:	bf00      	nop
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40011000 	.word	0x40011000
 8009e80:	200122b8 	.word	0x200122b8

08009e84 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8009e84:	b580      	push	{r7, lr}
 8009e86:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009e88:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <USART6_IRQHandler+0x24>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <USART6_IRQHandler+0x24>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	4b04      	ldr	r3, [pc, #16]	; (8009eac <USART6_IRQHandler+0x28>)
 8009e9c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009e9e:	f7ff ffb1 	bl	8009e04 <usart6Rx_Callback>
	}

}
 8009ea2:	bf00      	nop
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40011400 	.word	0x40011400
 8009eac:	200122b8 	.word	0x200122b8

08009eb0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009eba:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8009ebc:	6838      	ldr	r0, [r7, #0]
 8009ebe:	f7f6 fb49 	bl	8000554 <__aeabi_i2d>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	ec43 2b11 	vmov	d1, r2, r3
 8009eca:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009f48 <roundToNDecimals+0x98>
 8009ece:	f003 ff8d 	bl	800ddec <pow>
 8009ed2:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f6 fb4e 	bl	8000578 <__aeabi_f2d>
 8009edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ee0:	f7f6 fba2 	bl	8000628 <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	f7f6 fe94 	bl	8000c18 <__aeabi_d2f>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	607b      	str	r3, [r7, #4]

    number = round(number);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7f6 fb3f 	bl	8000578 <__aeabi_f2d>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	ec43 2b10 	vmov	d0, r2, r3
 8009f02:	f003 fe9d 	bl	800dc40 <round>
 8009f06:	ec53 2b10 	vmov	r2, r3, d0
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f7f6 fe83 	bl	8000c18 <__aeabi_d2f>
 8009f12:	4603      	mov	r3, r0
 8009f14:	607b      	str	r3, [r7, #4]

    number /= factor;
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7f6 fb2e 	bl	8000578 <__aeabi_f2d>
 8009f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f20:	f7f6 fcac 	bl	800087c <__aeabi_ddiv>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	f7f6 fe74 	bl	8000c18 <__aeabi_d2f>
 8009f30:	4603      	mov	r3, r0
 8009f32:	607b      	str	r3, [r7, #4]

    return number;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	ee07 3a90 	vmov	s15, r3
}
 8009f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	f3af 8000 	nop.w
 8009f48:	00000000 	.word	0x00000000
 8009f4c:	40240000 	.word	0x40240000

08009f50 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a89      	ldr	r2, [pc, #548]	; (800a184 <i2c_config+0x234>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d106      	bne.n	8009f70 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8009f62:	4b89      	ldr	r3, [pc, #548]	; (800a188 <i2c_config+0x238>)
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	4a88      	ldr	r2, [pc, #544]	; (800a188 <i2c_config+0x238>)
 8009f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f6e:	e016      	b.n	8009f9e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a85      	ldr	r2, [pc, #532]	; (800a18c <i2c_config+0x23c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d106      	bne.n	8009f88 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009f7a:	4b83      	ldr	r3, [pc, #524]	; (800a188 <i2c_config+0x238>)
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	4a82      	ldr	r2, [pc, #520]	; (800a188 <i2c_config+0x238>)
 8009f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f84:	6413      	str	r3, [r2, #64]	; 0x40
 8009f86:	e00a      	b.n	8009f9e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a80      	ldr	r2, [pc, #512]	; (800a190 <i2c_config+0x240>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d105      	bne.n	8009f9e <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8009f92:	4b7d      	ldr	r3, [pc, #500]	; (800a188 <i2c_config+0x238>)
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	4a7c      	ldr	r2, [pc, #496]	; (800a188 <i2c_config+0x238>)
 8009f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f9c:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 0201 	bic.w	r2, r2, #1
 8009fac:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009fae:	e000      	b.n	8009fb2 <i2c_config+0x62>
		__NOP();
 8009fb0:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1f7      	bne.n	8009fb0 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fce:	601a      	str	r2, [r3, #0]

	__NOP();
 8009fd0:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fe0:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009ff0:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	79db      	ldrb	r3, [r3, #7]
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	d108      	bne.n	800a00c <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0210 	orr.w	r2, r2, #16
 800a008:	605a      	str	r2, [r3, #4]
 800a00a:	e018      	b.n	800a03e <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	79db      	ldrb	r3, [r3, #7]
 800a010:	2b19      	cmp	r3, #25
 800a012:	d108      	bne.n	800a026 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0219 	orr.w	r2, r2, #25
 800a022:	605a      	str	r2, [r3, #4]
 800a024:	e00b      	b.n	800a03e <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	79db      	ldrb	r3, [r3, #7]
 800a02a:	2b32      	cmp	r3, #50	; 0x32
 800a02c:	d107      	bne.n	800a03e <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800a03c:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	795b      	ldrb	r3, [r3, #5]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d15c      	bne.n	800a110 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a064:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	79db      	ldrb	r3, [r3, #7]
 800a06a:	2b32      	cmp	r3, #50	; 0x32
 800a06c:	d03f      	beq.n	800a0ee <i2c_config+0x19e>
 800a06e:	2b32      	cmp	r3, #50	; 0x32
 800a070:	f300 80b2 	bgt.w	800a1d8 <i2c_config+0x288>
 800a074:	2b19      	cmp	r3, #25
 800a076:	d029      	beq.n	800a0cc <i2c_config+0x17c>
 800a078:	2b19      	cmp	r3, #25
 800a07a:	f300 80ad 	bgt.w	800a1d8 <i2c_config+0x288>
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d002      	beq.n	800a088 <i2c_config+0x138>
 800a082:	2b10      	cmp	r3, #16
 800a084:	d011      	beq.n	800a0aa <i2c_config+0x15a>


				break;
			}default:{

				break;
 800a086:	e0a7      	b.n	800a1d8 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69da      	ldr	r2, [r3, #28]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0214 	orr.w	r2, r2, #20
 800a096:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6a1a      	ldr	r2, [r3, #32]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0205 	orr.w	r2, r2, #5
 800a0a6:	621a      	str	r2, [r3, #32]
				break;
 800a0a8:	e099      	b.n	800a1de <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a0b8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6a1a      	ldr	r2, [r3, #32]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0211 	orr.w	r2, r2, #17
 800a0c8:	621a      	str	r2, [r3, #32]
				break;
 800a0ca:	e088      	b.n	800a1de <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69da      	ldr	r2, [r3, #28]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a0da:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0215 	orr.w	r2, r2, #21
 800a0ea:	621a      	str	r2, [r3, #32]
				break;
 800a0ec:	e077      	b.n	800a1de <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a0fc:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6a1a      	ldr	r2, [r3, #32]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a10c:	621a      	str	r2, [r3, #32]
				break;
 800a10e:	e066      	b.n	800a1de <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	69da      	ldr	r2, [r3, #28]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a11e:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	79db      	ldrb	r3, [r3, #7]
 800a124:	2b32      	cmp	r3, #50	; 0x32
 800a126:	d046      	beq.n	800a1b6 <i2c_config+0x266>
 800a128:	2b32      	cmp	r3, #50	; 0x32
 800a12a:	dc57      	bgt.n	800a1dc <i2c_config+0x28c>
 800a12c:	2b19      	cmp	r3, #25
 800a12e:	d031      	beq.n	800a194 <i2c_config+0x244>
 800a130:	2b19      	cmp	r3, #25
 800a132:	dc53      	bgt.n	800a1dc <i2c_config+0x28c>
 800a134:	2b04      	cmp	r3, #4
 800a136:	d002      	beq.n	800a13e <i2c_config+0x1ee>
 800a138:	2b10      	cmp	r3, #16
 800a13a:	d011      	beq.n	800a160 <i2c_config+0x210>


				break;
			}default:{

				break;
 800a13c:	e04e      	b.n	800a1dc <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0203 	orr.w	r2, r2, #3
 800a14c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6a1a      	ldr	r2, [r3, #32]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0202 	orr.w	r2, r2, #2
 800a15c:	621a      	str	r2, [r3, #32]
				break;
 800a15e:	e03e      	b.n	800a1de <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69da      	ldr	r2, [r3, #28]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 020d 	orr.w	r2, r2, #13
 800a16e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6a1a      	ldr	r2, [r3, #32]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0206 	orr.w	r2, r2, #6
 800a17e:	621a      	str	r2, [r3, #32]
				break;
 800a180:	e02d      	b.n	800a1de <i2c_config+0x28e>
 800a182:	bf00      	nop
 800a184:	40005400 	.word	0x40005400
 800a188:	40023800 	.word	0x40023800
 800a18c:	40005800 	.word	0x40005800
 800a190:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69da      	ldr	r2, [r3, #28]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0215 	orr.w	r2, r2, #21
 800a1a2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6a1a      	ldr	r2, [r3, #32]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0208 	orr.w	r2, r2, #8
 800a1b2:	621a      	str	r2, [r3, #32]
				break;
 800a1b4:	e013      	b.n	800a1de <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	69da      	ldr	r2, [r3, #28]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a1c4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6a1a      	ldr	r2, [r3, #32]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0210 	orr.w	r2, r2, #16
 800a1d4:	621a      	str	r2, [r3, #32]
				break;
 800a1d6:	e002      	b.n	800a1de <i2c_config+0x28e>
				break;
 800a1d8:	bf00      	nop
 800a1da:	e002      	b.n	800a1e2 <i2c_config+0x292>
				break;
 800a1dc:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1de:	e000      	b.n	800a1e2 <i2c_config+0x292>
		__NOP();
 800a1e0:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1f7      	bne.n	800a1e0 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0201 	orr.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]


}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a222:	601a      	str	r2, [r3, #0]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7a1b      	ldrb	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a24e:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a250:	e000      	b.n	800a254 <i2c_startTransaction+0x24>
		__NOP();
 800a252:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f7      	bne.n	800a252 <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a270:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a272:	e000      	b.n	800a276 <i2c_startTransaction+0x46>
		__NOP();
 800a274:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0f7      	beq.n	800a274 <i2c_startTransaction+0x44>
	}
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7a1b      	ldrb	r3, [r3, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d007      	beq.n	800a2b2 <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2b0:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c0:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a2c2:	e000      	b.n	800a2c6 <i2c_reStartTransaction+0x34>
		__NOP();
 800a2c4:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0f7      	beq.n	800a2c4 <i2c_reStartTransaction+0x32>
	}
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f8:	601a      	str	r2, [r3, #0]
}
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a306:	b480      	push	{r7}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	70fb      	strb	r3, [r7, #3]
 800a312:	4613      	mov	r3, r2
 800a314:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	005a      	lsls	r2, r3, #1
 800a31e:	78bb      	ldrb	r3, [r7, #2]
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a328:	e000      	b.n	800a32c <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a32a:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0f7      	beq.n	800a32a <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	73fb      	strb	r3, [r7, #15]

}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a36a:	e000      	b.n	800a36e <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a36c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f7      	beq.n	800a36c <i2c_sendMemoryAddress+0x16>
	}
}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	78fa      	ldrb	r2, [r7, #3]
 800a39c:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a39e:	e000      	b.n	800a3a2 <i2c_sendDataByte+0x18>
		__NOP();
 800a3a0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d0f7      	beq.n	800a3a0 <i2c_sendDataByte+0x16>
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a3c6:	e000      	b.n	800a3ca <i2c_readDataByte+0xc>
		__NOP();
 800a3c8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0f7      	beq.n	800a3c8 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	799b      	ldrb	r3, [r3, #6]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000014 	.word	0x20000014

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f006 f87c 	bl	8010510 <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	08011138 	.word	0x08011138
 800a43c:	08011138 	.word	0x08011138
 800a440:	08011138 	.word	0x08011138
 800a444:	0801113c 	.word	0x0801113c

0800a448 <malloc>:
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <malloc+0xc>)
 800a44a:	4601      	mov	r1, r0
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	f000 b877 	b.w	800a540 <_malloc_r>
 800a452:	bf00      	nop
 800a454:	20000014 	.word	0x20000014

0800a458 <memset>:
 800a458:	4402      	add	r2, r0
 800a45a:	4603      	mov	r3, r0
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d100      	bne.n	800a462 <memset+0xa>
 800a460:	4770      	bx	lr
 800a462:	f803 1b01 	strb.w	r1, [r3], #1
 800a466:	e7f9      	b.n	800a45c <memset+0x4>

0800a468 <_free_r>:
 800a468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d044      	beq.n	800a4f8 <_free_r+0x90>
 800a46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a472:	9001      	str	r0, [sp, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f1a1 0404 	sub.w	r4, r1, #4
 800a47a:	bfb8      	it	lt
 800a47c:	18e4      	addlt	r4, r4, r3
 800a47e:	f001 fca1 	bl	800bdc4 <__malloc_lock>
 800a482:	4a1e      	ldr	r2, [pc, #120]	; (800a4fc <_free_r+0x94>)
 800a484:	9801      	ldr	r0, [sp, #4]
 800a486:	6813      	ldr	r3, [r2, #0]
 800a488:	b933      	cbnz	r3, 800a498 <_free_r+0x30>
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	6014      	str	r4, [r2, #0]
 800a48e:	b003      	add	sp, #12
 800a490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a494:	f001 bc9c 	b.w	800bdd0 <__malloc_unlock>
 800a498:	42a3      	cmp	r3, r4
 800a49a:	d908      	bls.n	800a4ae <_free_r+0x46>
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf01      	itttt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	1949      	addeq	r1, r1, r5
 800a4aa:	6021      	streq	r1, [r4, #0]
 800a4ac:	e7ed      	b.n	800a48a <_free_r+0x22>
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b10b      	cbz	r3, 800a4b8 <_free_r+0x50>
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	d9fa      	bls.n	800a4ae <_free_r+0x46>
 800a4b8:	6811      	ldr	r1, [r2, #0]
 800a4ba:	1855      	adds	r5, r2, r1
 800a4bc:	42a5      	cmp	r5, r4
 800a4be:	d10b      	bne.n	800a4d8 <_free_r+0x70>
 800a4c0:	6824      	ldr	r4, [r4, #0]
 800a4c2:	4421      	add	r1, r4
 800a4c4:	1854      	adds	r4, r2, r1
 800a4c6:	42a3      	cmp	r3, r4
 800a4c8:	6011      	str	r1, [r2, #0]
 800a4ca:	d1e0      	bne.n	800a48e <_free_r+0x26>
 800a4cc:	681c      	ldr	r4, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	6053      	str	r3, [r2, #4]
 800a4d2:	4421      	add	r1, r4
 800a4d4:	6011      	str	r1, [r2, #0]
 800a4d6:	e7da      	b.n	800a48e <_free_r+0x26>
 800a4d8:	d902      	bls.n	800a4e0 <_free_r+0x78>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	6003      	str	r3, [r0, #0]
 800a4de:	e7d6      	b.n	800a48e <_free_r+0x26>
 800a4e0:	6825      	ldr	r5, [r4, #0]
 800a4e2:	1961      	adds	r1, r4, r5
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf04      	itt	eq
 800a4e8:	6819      	ldreq	r1, [r3, #0]
 800a4ea:	685b      	ldreq	r3, [r3, #4]
 800a4ec:	6063      	str	r3, [r4, #4]
 800a4ee:	bf04      	itt	eq
 800a4f0:	1949      	addeq	r1, r1, r5
 800a4f2:	6021      	streq	r1, [r4, #0]
 800a4f4:	6054      	str	r4, [r2, #4]
 800a4f6:	e7ca      	b.n	800a48e <_free_r+0x26>
 800a4f8:	b003      	add	sp, #12
 800a4fa:	bd30      	pop	{r4, r5, pc}
 800a4fc:	200122bc 	.word	0x200122bc

0800a500 <sbrk_aligned>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4e0e      	ldr	r6, [pc, #56]	; (800a53c <sbrk_aligned+0x3c>)
 800a504:	460c      	mov	r4, r1
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	4605      	mov	r5, r0
 800a50a:	b911      	cbnz	r1, 800a512 <sbrk_aligned+0x12>
 800a50c:	f000 fcf6 	bl	800aefc <_sbrk_r>
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 fcf1 	bl	800aefc <_sbrk_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d00a      	beq.n	800a534 <sbrk_aligned+0x34>
 800a51e:	1cc4      	adds	r4, r0, #3
 800a520:	f024 0403 	bic.w	r4, r4, #3
 800a524:	42a0      	cmp	r0, r4
 800a526:	d007      	beq.n	800a538 <sbrk_aligned+0x38>
 800a528:	1a21      	subs	r1, r4, r0
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 fce6 	bl	800aefc <_sbrk_r>
 800a530:	3001      	adds	r0, #1
 800a532:	d101      	bne.n	800a538 <sbrk_aligned+0x38>
 800a534:	f04f 34ff 	mov.w	r4, #4294967295
 800a538:	4620      	mov	r0, r4
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	200122c0 	.word	0x200122c0

0800a540 <_malloc_r>:
 800a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a544:	1ccd      	adds	r5, r1, #3
 800a546:	f025 0503 	bic.w	r5, r5, #3
 800a54a:	3508      	adds	r5, #8
 800a54c:	2d0c      	cmp	r5, #12
 800a54e:	bf38      	it	cc
 800a550:	250c      	movcc	r5, #12
 800a552:	2d00      	cmp	r5, #0
 800a554:	4607      	mov	r7, r0
 800a556:	db01      	blt.n	800a55c <_malloc_r+0x1c>
 800a558:	42a9      	cmp	r1, r5
 800a55a:	d905      	bls.n	800a568 <_malloc_r+0x28>
 800a55c:	230c      	movs	r3, #12
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	2600      	movs	r6, #0
 800a562:	4630      	mov	r0, r6
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	4e2e      	ldr	r6, [pc, #184]	; (800a624 <_malloc_r+0xe4>)
 800a56a:	f001 fc2b 	bl	800bdc4 <__malloc_lock>
 800a56e:	6833      	ldr	r3, [r6, #0]
 800a570:	461c      	mov	r4, r3
 800a572:	bb34      	cbnz	r4, 800a5c2 <_malloc_r+0x82>
 800a574:	4629      	mov	r1, r5
 800a576:	4638      	mov	r0, r7
 800a578:	f7ff ffc2 	bl	800a500 <sbrk_aligned>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	4604      	mov	r4, r0
 800a580:	d14d      	bne.n	800a61e <_malloc_r+0xde>
 800a582:	6834      	ldr	r4, [r6, #0]
 800a584:	4626      	mov	r6, r4
 800a586:	2e00      	cmp	r6, #0
 800a588:	d140      	bne.n	800a60c <_malloc_r+0xcc>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	4631      	mov	r1, r6
 800a58e:	4638      	mov	r0, r7
 800a590:	eb04 0803 	add.w	r8, r4, r3
 800a594:	f000 fcb2 	bl	800aefc <_sbrk_r>
 800a598:	4580      	cmp	r8, r0
 800a59a:	d13a      	bne.n	800a612 <_malloc_r+0xd2>
 800a59c:	6821      	ldr	r1, [r4, #0]
 800a59e:	3503      	adds	r5, #3
 800a5a0:	1a6d      	subs	r5, r5, r1
 800a5a2:	f025 0503 	bic.w	r5, r5, #3
 800a5a6:	3508      	adds	r5, #8
 800a5a8:	2d0c      	cmp	r5, #12
 800a5aa:	bf38      	it	cc
 800a5ac:	250c      	movcc	r5, #12
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff ffa5 	bl	800a500 <sbrk_aligned>
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d02b      	beq.n	800a612 <_malloc_r+0xd2>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	442b      	add	r3, r5
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	e00e      	b.n	800a5e0 <_malloc_r+0xa0>
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	1b52      	subs	r2, r2, r5
 800a5c6:	d41e      	bmi.n	800a606 <_malloc_r+0xc6>
 800a5c8:	2a0b      	cmp	r2, #11
 800a5ca:	d916      	bls.n	800a5fa <_malloc_r+0xba>
 800a5cc:	1961      	adds	r1, r4, r5
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	6025      	str	r5, [r4, #0]
 800a5d2:	bf18      	it	ne
 800a5d4:	6059      	strne	r1, [r3, #4]
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	bf08      	it	eq
 800a5da:	6031      	streq	r1, [r6, #0]
 800a5dc:	5162      	str	r2, [r4, r5]
 800a5de:	604b      	str	r3, [r1, #4]
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f104 060b 	add.w	r6, r4, #11
 800a5e6:	f001 fbf3 	bl	800bdd0 <__malloc_unlock>
 800a5ea:	f026 0607 	bic.w	r6, r6, #7
 800a5ee:	1d23      	adds	r3, r4, #4
 800a5f0:	1af2      	subs	r2, r6, r3
 800a5f2:	d0b6      	beq.n	800a562 <_malloc_r+0x22>
 800a5f4:	1b9b      	subs	r3, r3, r6
 800a5f6:	50a3      	str	r3, [r4, r2]
 800a5f8:	e7b3      	b.n	800a562 <_malloc_r+0x22>
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	bf0c      	ite	eq
 800a600:	6032      	streq	r2, [r6, #0]
 800a602:	605a      	strne	r2, [r3, #4]
 800a604:	e7ec      	b.n	800a5e0 <_malloc_r+0xa0>
 800a606:	4623      	mov	r3, r4
 800a608:	6864      	ldr	r4, [r4, #4]
 800a60a:	e7b2      	b.n	800a572 <_malloc_r+0x32>
 800a60c:	4634      	mov	r4, r6
 800a60e:	6876      	ldr	r6, [r6, #4]
 800a610:	e7b9      	b.n	800a586 <_malloc_r+0x46>
 800a612:	230c      	movs	r3, #12
 800a614:	603b      	str	r3, [r7, #0]
 800a616:	4638      	mov	r0, r7
 800a618:	f001 fbda 	bl	800bdd0 <__malloc_unlock>
 800a61c:	e7a1      	b.n	800a562 <_malloc_r+0x22>
 800a61e:	6025      	str	r5, [r4, #0]
 800a620:	e7de      	b.n	800a5e0 <_malloc_r+0xa0>
 800a622:	bf00      	nop
 800a624:	200122bc 	.word	0x200122bc

0800a628 <__cvt>:
 800a628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	ec55 4b10 	vmov	r4, r5, d0
 800a630:	2d00      	cmp	r5, #0
 800a632:	460e      	mov	r6, r1
 800a634:	4619      	mov	r1, r3
 800a636:	462b      	mov	r3, r5
 800a638:	bfbb      	ittet	lt
 800a63a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a63e:	461d      	movlt	r5, r3
 800a640:	2300      	movge	r3, #0
 800a642:	232d      	movlt	r3, #45	; 0x2d
 800a644:	700b      	strb	r3, [r1, #0]
 800a646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a64c:	4691      	mov	r9, r2
 800a64e:	f023 0820 	bic.w	r8, r3, #32
 800a652:	bfbc      	itt	lt
 800a654:	4622      	movlt	r2, r4
 800a656:	4614      	movlt	r4, r2
 800a658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a65c:	d005      	beq.n	800a66a <__cvt+0x42>
 800a65e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a662:	d100      	bne.n	800a666 <__cvt+0x3e>
 800a664:	3601      	adds	r6, #1
 800a666:	2102      	movs	r1, #2
 800a668:	e000      	b.n	800a66c <__cvt+0x44>
 800a66a:	2103      	movs	r1, #3
 800a66c:	ab03      	add	r3, sp, #12
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	ab02      	add	r3, sp, #8
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	ec45 4b10 	vmov	d0, r4, r5
 800a678:	4653      	mov	r3, sl
 800a67a:	4632      	mov	r2, r6
 800a67c:	f000 fd90 	bl	800b1a0 <_dtoa_r>
 800a680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a684:	4607      	mov	r7, r0
 800a686:	d102      	bne.n	800a68e <__cvt+0x66>
 800a688:	f019 0f01 	tst.w	r9, #1
 800a68c:	d022      	beq.n	800a6d4 <__cvt+0xac>
 800a68e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a692:	eb07 0906 	add.w	r9, r7, r6
 800a696:	d110      	bne.n	800a6ba <__cvt+0x92>
 800a698:	783b      	ldrb	r3, [r7, #0]
 800a69a:	2b30      	cmp	r3, #48	; 0x30
 800a69c:	d10a      	bne.n	800a6b4 <__cvt+0x8c>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 fa27 	bl	8000af8 <__aeabi_dcmpeq>
 800a6aa:	b918      	cbnz	r0, 800a6b4 <__cvt+0x8c>
 800a6ac:	f1c6 0601 	rsb	r6, r6, #1
 800a6b0:	f8ca 6000 	str.w	r6, [sl]
 800a6b4:	f8da 3000 	ldr.w	r3, [sl]
 800a6b8:	4499      	add	r9, r3
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f6 fa19 	bl	8000af8 <__aeabi_dcmpeq>
 800a6c6:	b108      	cbz	r0, 800a6cc <__cvt+0xa4>
 800a6c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6cc:	2230      	movs	r2, #48	; 0x30
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	454b      	cmp	r3, r9
 800a6d2:	d307      	bcc.n	800a6e4 <__cvt+0xbc>
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6d8:	1bdb      	subs	r3, r3, r7
 800a6da:	4638      	mov	r0, r7
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	b004      	add	sp, #16
 800a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e4:	1c59      	adds	r1, r3, #1
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	e7f0      	b.n	800a6ce <__cvt+0xa6>

0800a6ec <__exponent>:
 800a6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	4249      	neglt	r1, r1
 800a6f6:	f803 2b02 	strb.w	r2, [r3], #2
 800a6fa:	bfb4      	ite	lt
 800a6fc:	222d      	movlt	r2, #45	; 0x2d
 800a6fe:	222b      	movge	r2, #43	; 0x2b
 800a700:	2909      	cmp	r1, #9
 800a702:	7042      	strb	r2, [r0, #1]
 800a704:	dd2a      	ble.n	800a75c <__exponent+0x70>
 800a706:	f10d 0407 	add.w	r4, sp, #7
 800a70a:	46a4      	mov	ip, r4
 800a70c:	270a      	movs	r7, #10
 800a70e:	46a6      	mov	lr, r4
 800a710:	460a      	mov	r2, r1
 800a712:	fb91 f6f7 	sdiv	r6, r1, r7
 800a716:	fb07 1516 	mls	r5, r7, r6, r1
 800a71a:	3530      	adds	r5, #48	; 0x30
 800a71c:	2a63      	cmp	r2, #99	; 0x63
 800a71e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a722:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a726:	4631      	mov	r1, r6
 800a728:	dcf1      	bgt.n	800a70e <__exponent+0x22>
 800a72a:	3130      	adds	r1, #48	; 0x30
 800a72c:	f1ae 0502 	sub.w	r5, lr, #2
 800a730:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a734:	1c44      	adds	r4, r0, #1
 800a736:	4629      	mov	r1, r5
 800a738:	4561      	cmp	r1, ip
 800a73a:	d30a      	bcc.n	800a752 <__exponent+0x66>
 800a73c:	f10d 0209 	add.w	r2, sp, #9
 800a740:	eba2 020e 	sub.w	r2, r2, lr
 800a744:	4565      	cmp	r5, ip
 800a746:	bf88      	it	hi
 800a748:	2200      	movhi	r2, #0
 800a74a:	4413      	add	r3, r2
 800a74c:	1a18      	subs	r0, r3, r0
 800a74e:	b003      	add	sp, #12
 800a750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a756:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a75a:	e7ed      	b.n	800a738 <__exponent+0x4c>
 800a75c:	2330      	movs	r3, #48	; 0x30
 800a75e:	3130      	adds	r1, #48	; 0x30
 800a760:	7083      	strb	r3, [r0, #2]
 800a762:	70c1      	strb	r1, [r0, #3]
 800a764:	1d03      	adds	r3, r0, #4
 800a766:	e7f1      	b.n	800a74c <__exponent+0x60>

0800a768 <_printf_float>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	ed2d 8b02 	vpush	{d8}
 800a770:	b08d      	sub	sp, #52	; 0x34
 800a772:	460c      	mov	r4, r1
 800a774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a778:	4616      	mov	r6, r2
 800a77a:	461f      	mov	r7, r3
 800a77c:	4605      	mov	r5, r0
 800a77e:	f001 fafd 	bl	800bd7c <_localeconv_r>
 800a782:	f8d0 a000 	ldr.w	sl, [r0]
 800a786:	4650      	mov	r0, sl
 800a788:	f7f5 fd34 	bl	80001f4 <strlen>
 800a78c:	2300      	movs	r3, #0
 800a78e:	930a      	str	r3, [sp, #40]	; 0x28
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	f8d8 3000 	ldr.w	r3, [r8]
 800a798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a79c:	3307      	adds	r3, #7
 800a79e:	f023 0307 	bic.w	r3, r3, #7
 800a7a2:	f103 0208 	add.w	r2, r3, #8
 800a7a6:	f8c8 2000 	str.w	r2, [r8]
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7c0:	ee08 0a10 	vmov	s16, r0
 800a7c4:	4b9f      	ldr	r3, [pc, #636]	; (800aa44 <_printf_float+0x2dc>)
 800a7c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	f7f6 f9c5 	bl	8000b5c <__aeabi_dcmpun>
 800a7d2:	bb88      	cbnz	r0, 800a838 <_printf_float+0xd0>
 800a7d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7d8:	4b9a      	ldr	r3, [pc, #616]	; (800aa44 <_printf_float+0x2dc>)
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295
 800a7de:	f7f6 f99f 	bl	8000b20 <__aeabi_dcmple>
 800a7e2:	bb48      	cbnz	r0, 800a838 <_printf_float+0xd0>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f6 f98e 	bl	8000b0c <__aeabi_dcmplt>
 800a7f0:	b110      	cbz	r0, 800a7f8 <_printf_float+0x90>
 800a7f2:	232d      	movs	r3, #45	; 0x2d
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	4b93      	ldr	r3, [pc, #588]	; (800aa48 <_printf_float+0x2e0>)
 800a7fa:	4894      	ldr	r0, [pc, #592]	; (800aa4c <_printf_float+0x2e4>)
 800a7fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a800:	bf94      	ite	ls
 800a802:	4698      	movls	r8, r3
 800a804:	4680      	movhi	r8, r0
 800a806:	2303      	movs	r3, #3
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	9b05      	ldr	r3, [sp, #20]
 800a80c:	f023 0204 	bic.w	r2, r3, #4
 800a810:	6022      	str	r2, [r4, #0]
 800a812:	f04f 0900 	mov.w	r9, #0
 800a816:	9700      	str	r7, [sp, #0]
 800a818:	4633      	mov	r3, r6
 800a81a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a81c:	4621      	mov	r1, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 f9d8 	bl	800abd4 <_printf_common>
 800a824:	3001      	adds	r0, #1
 800a826:	f040 8090 	bne.w	800a94a <_printf_float+0x1e2>
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295
 800a82e:	b00d      	add	sp, #52	; 0x34
 800a830:	ecbd 8b02 	vpop	{d8}
 800a834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a838:	4642      	mov	r2, r8
 800a83a:	464b      	mov	r3, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	4649      	mov	r1, r9
 800a840:	f7f6 f98c 	bl	8000b5c <__aeabi_dcmpun>
 800a844:	b140      	cbz	r0, 800a858 <_printf_float+0xf0>
 800a846:	464b      	mov	r3, r9
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bfbc      	itt	lt
 800a84c:	232d      	movlt	r3, #45	; 0x2d
 800a84e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a852:	487f      	ldr	r0, [pc, #508]	; (800aa50 <_printf_float+0x2e8>)
 800a854:	4b7f      	ldr	r3, [pc, #508]	; (800aa54 <_printf_float+0x2ec>)
 800a856:	e7d1      	b.n	800a7fc <_printf_float+0x94>
 800a858:	6863      	ldr	r3, [r4, #4]
 800a85a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a85e:	9206      	str	r2, [sp, #24]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	d13f      	bne.n	800a8e4 <_printf_float+0x17c>
 800a864:	2306      	movs	r3, #6
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	9b05      	ldr	r3, [sp, #20]
 800a86a:	6861      	ldr	r1, [r4, #4]
 800a86c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a870:	2300      	movs	r3, #0
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	ab0a      	add	r3, sp, #40	; 0x28
 800a876:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a87a:	ab09      	add	r3, sp, #36	; 0x24
 800a87c:	ec49 8b10 	vmov	d0, r8, r9
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a888:	4628      	mov	r0, r5
 800a88a:	f7ff fecd 	bl	800a628 <__cvt>
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a892:	2b47      	cmp	r3, #71	; 0x47
 800a894:	4680      	mov	r8, r0
 800a896:	d108      	bne.n	800a8aa <_printf_float+0x142>
 800a898:	1cc8      	adds	r0, r1, #3
 800a89a:	db02      	blt.n	800a8a2 <_printf_float+0x13a>
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	4299      	cmp	r1, r3
 800a8a0:	dd41      	ble.n	800a926 <_printf_float+0x1be>
 800a8a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8a6:	fa5f fb8b 	uxtb.w	fp, fp
 800a8aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8ae:	d820      	bhi.n	800a8f2 <_printf_float+0x18a>
 800a8b0:	3901      	subs	r1, #1
 800a8b2:	465a      	mov	r2, fp
 800a8b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8b8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ba:	f7ff ff17 	bl	800a6ec <__exponent>
 800a8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c0:	1813      	adds	r3, r2, r0
 800a8c2:	2a01      	cmp	r2, #1
 800a8c4:	4681      	mov	r9, r0
 800a8c6:	6123      	str	r3, [r4, #16]
 800a8c8:	dc02      	bgt.n	800a8d0 <_printf_float+0x168>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	07d2      	lsls	r2, r2, #31
 800a8ce:	d501      	bpl.n	800a8d4 <_printf_float+0x16c>
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d09c      	beq.n	800a816 <_printf_float+0xae>
 800a8dc:	232d      	movs	r3, #45	; 0x2d
 800a8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e2:	e798      	b.n	800a816 <_printf_float+0xae>
 800a8e4:	9a06      	ldr	r2, [sp, #24]
 800a8e6:	2a47      	cmp	r2, #71	; 0x47
 800a8e8:	d1be      	bne.n	800a868 <_printf_float+0x100>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1bc      	bne.n	800a868 <_printf_float+0x100>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e7b9      	b.n	800a866 <_printf_float+0xfe>
 800a8f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8f6:	d118      	bne.n	800a92a <_printf_float+0x1c2>
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	6863      	ldr	r3, [r4, #4]
 800a8fc:	dd0b      	ble.n	800a916 <_printf_float+0x1ae>
 800a8fe:	6121      	str	r1, [r4, #16]
 800a900:	b913      	cbnz	r3, 800a908 <_printf_float+0x1a0>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d502      	bpl.n	800a90e <_printf_float+0x1a6>
 800a908:	3301      	adds	r3, #1
 800a90a:	440b      	add	r3, r1
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a910:	f04f 0900 	mov.w	r9, #0
 800a914:	e7de      	b.n	800a8d4 <_printf_float+0x16c>
 800a916:	b913      	cbnz	r3, 800a91e <_printf_float+0x1b6>
 800a918:	6822      	ldr	r2, [r4, #0]
 800a91a:	07d2      	lsls	r2, r2, #31
 800a91c:	d501      	bpl.n	800a922 <_printf_float+0x1ba>
 800a91e:	3302      	adds	r3, #2
 800a920:	e7f4      	b.n	800a90c <_printf_float+0x1a4>
 800a922:	2301      	movs	r3, #1
 800a924:	e7f2      	b.n	800a90c <_printf_float+0x1a4>
 800a926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92c:	4299      	cmp	r1, r3
 800a92e:	db05      	blt.n	800a93c <_printf_float+0x1d4>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	6121      	str	r1, [r4, #16]
 800a934:	07d8      	lsls	r0, r3, #31
 800a936:	d5ea      	bpl.n	800a90e <_printf_float+0x1a6>
 800a938:	1c4b      	adds	r3, r1, #1
 800a93a:	e7e7      	b.n	800a90c <_printf_float+0x1a4>
 800a93c:	2900      	cmp	r1, #0
 800a93e:	bfd4      	ite	le
 800a940:	f1c1 0202 	rsble	r2, r1, #2
 800a944:	2201      	movgt	r2, #1
 800a946:	4413      	add	r3, r2
 800a948:	e7e0      	b.n	800a90c <_printf_float+0x1a4>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	055a      	lsls	r2, r3, #21
 800a94e:	d407      	bmi.n	800a960 <_printf_float+0x1f8>
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	4642      	mov	r2, r8
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	d12c      	bne.n	800a9b8 <_printf_float+0x250>
 800a95e:	e764      	b.n	800a82a <_printf_float+0xc2>
 800a960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a964:	f240 80e0 	bls.w	800ab28 <_printf_float+0x3c0>
 800a968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	f7f6 f8c2 	bl	8000af8 <__aeabi_dcmpeq>
 800a974:	2800      	cmp	r0, #0
 800a976:	d034      	beq.n	800a9e2 <_printf_float+0x27a>
 800a978:	4a37      	ldr	r2, [pc, #220]	; (800aa58 <_printf_float+0x2f0>)
 800a97a:	2301      	movs	r3, #1
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	f43f af51 	beq.w	800a82a <_printf_float+0xc2>
 800a988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a98c:	429a      	cmp	r2, r3
 800a98e:	db02      	blt.n	800a996 <_printf_float+0x22e>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	07d8      	lsls	r0, r3, #31
 800a994:	d510      	bpl.n	800a9b8 <_printf_float+0x250>
 800a996:	ee18 3a10 	vmov	r3, s16
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f af41 	beq.w	800a82a <_printf_float+0xc2>
 800a9a8:	f04f 0800 	mov.w	r8, #0
 800a9ac:	f104 091a 	add.w	r9, r4, #26
 800a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	dc09      	bgt.n	800a9cc <_printf_float+0x264>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	079b      	lsls	r3, r3, #30
 800a9bc:	f100 8105 	bmi.w	800abca <_printf_float+0x462>
 800a9c0:	68e0      	ldr	r0, [r4, #12]
 800a9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c4:	4298      	cmp	r0, r3
 800a9c6:	bfb8      	it	lt
 800a9c8:	4618      	movlt	r0, r3
 800a9ca:	e730      	b.n	800a82e <_printf_float+0xc6>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	464a      	mov	r2, r9
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f af27 	beq.w	800a82a <_printf_float+0xc2>
 800a9dc:	f108 0801 	add.w	r8, r8, #1
 800a9e0:	e7e6      	b.n	800a9b0 <_printf_float+0x248>
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dc39      	bgt.n	800aa5c <_printf_float+0x2f4>
 800a9e8:	4a1b      	ldr	r2, [pc, #108]	; (800aa58 <_printf_float+0x2f0>)
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	f43f af19 	beq.w	800a82a <_printf_float+0xc2>
 800a9f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	d102      	bne.n	800aa06 <_printf_float+0x29e>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	07d9      	lsls	r1, r3, #31
 800aa04:	d5d8      	bpl.n	800a9b8 <_printf_float+0x250>
 800aa06:	ee18 3a10 	vmov	r3, s16
 800aa0a:	4652      	mov	r2, sl
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	f43f af09 	beq.w	800a82a <_printf_float+0xc2>
 800aa18:	f04f 0900 	mov.w	r9, #0
 800aa1c:	f104 0a1a 	add.w	sl, r4, #26
 800aa20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa22:	425b      	negs	r3, r3
 800aa24:	454b      	cmp	r3, r9
 800aa26:	dc01      	bgt.n	800aa2c <_printf_float+0x2c4>
 800aa28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa2a:	e792      	b.n	800a952 <_printf_float+0x1ea>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4652      	mov	r2, sl
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f aef7 	beq.w	800a82a <_printf_float+0xc2>
 800aa3c:	f109 0901 	add.w	r9, r9, #1
 800aa40:	e7ee      	b.n	800aa20 <_printf_float+0x2b8>
 800aa42:	bf00      	nop
 800aa44:	7fefffff 	.word	0x7fefffff
 800aa48:	08010ac4 	.word	0x08010ac4
 800aa4c:	08010ac8 	.word	0x08010ac8
 800aa50:	08010ad0 	.word	0x08010ad0
 800aa54:	08010acc 	.word	0x08010acc
 800aa58:	08010cf9 	.word	0x08010cf9
 800aa5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa60:	429a      	cmp	r2, r3
 800aa62:	bfa8      	it	ge
 800aa64:	461a      	movge	r2, r3
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	4691      	mov	r9, r2
 800aa6a:	dc37      	bgt.n	800aadc <_printf_float+0x374>
 800aa6c:	f04f 0b00 	mov.w	fp, #0
 800aa70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa74:	f104 021a 	add.w	r2, r4, #26
 800aa78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa7a:	9305      	str	r3, [sp, #20]
 800aa7c:	eba3 0309 	sub.w	r3, r3, r9
 800aa80:	455b      	cmp	r3, fp
 800aa82:	dc33      	bgt.n	800aaec <_printf_float+0x384>
 800aa84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	db3b      	blt.n	800ab04 <_printf_float+0x39c>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	07da      	lsls	r2, r3, #31
 800aa90:	d438      	bmi.n	800ab04 <_printf_float+0x39c>
 800aa92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa94:	9a05      	ldr	r2, [sp, #20]
 800aa96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa98:	1a9a      	subs	r2, r3, r2
 800aa9a:	eba3 0901 	sub.w	r9, r3, r1
 800aa9e:	4591      	cmp	r9, r2
 800aaa0:	bfa8      	it	ge
 800aaa2:	4691      	movge	r9, r2
 800aaa4:	f1b9 0f00 	cmp.w	r9, #0
 800aaa8:	dc35      	bgt.n	800ab16 <_printf_float+0x3ae>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aab2:	f104 0a1a 	add.w	sl, r4, #26
 800aab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	eba3 0309 	sub.w	r3, r3, r9
 800aac0:	4543      	cmp	r3, r8
 800aac2:	f77f af79 	ble.w	800a9b8 <_printf_float+0x250>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	4631      	mov	r1, r6
 800aacc:	4628      	mov	r0, r5
 800aace:	47b8      	blx	r7
 800aad0:	3001      	adds	r0, #1
 800aad2:	f43f aeaa 	beq.w	800a82a <_printf_float+0xc2>
 800aad6:	f108 0801 	add.w	r8, r8, #1
 800aada:	e7ec      	b.n	800aab6 <_printf_float+0x34e>
 800aadc:	4613      	mov	r3, r2
 800aade:	4631      	mov	r1, r6
 800aae0:	4642      	mov	r2, r8
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	d1c0      	bne.n	800aa6c <_printf_float+0x304>
 800aaea:	e69e      	b.n	800a82a <_printf_float+0xc2>
 800aaec:	2301      	movs	r3, #1
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	9205      	str	r2, [sp, #20]
 800aaf4:	47b8      	blx	r7
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f43f ae97 	beq.w	800a82a <_printf_float+0xc2>
 800aafc:	9a05      	ldr	r2, [sp, #20]
 800aafe:	f10b 0b01 	add.w	fp, fp, #1
 800ab02:	e7b9      	b.n	800aa78 <_printf_float+0x310>
 800ab04:	ee18 3a10 	vmov	r3, s16
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	d1be      	bne.n	800aa92 <_printf_float+0x32a>
 800ab14:	e689      	b.n	800a82a <_printf_float+0xc2>
 800ab16:	9a05      	ldr	r2, [sp, #20]
 800ab18:	464b      	mov	r3, r9
 800ab1a:	4442      	add	r2, r8
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	d1c1      	bne.n	800aaaa <_printf_float+0x342>
 800ab26:	e680      	b.n	800a82a <_printf_float+0xc2>
 800ab28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab2a:	2a01      	cmp	r2, #1
 800ab2c:	dc01      	bgt.n	800ab32 <_printf_float+0x3ca>
 800ab2e:	07db      	lsls	r3, r3, #31
 800ab30:	d538      	bpl.n	800aba4 <_printf_float+0x43c>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4642      	mov	r2, r8
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	f43f ae74 	beq.w	800a82a <_printf_float+0xc2>
 800ab42:	ee18 3a10 	vmov	r3, s16
 800ab46:	4652      	mov	r2, sl
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	47b8      	blx	r7
 800ab4e:	3001      	adds	r0, #1
 800ab50:	f43f ae6b 	beq.w	800a82a <_printf_float+0xc2>
 800ab54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab58:	2200      	movs	r2, #0
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f7f5 ffcc 	bl	8000af8 <__aeabi_dcmpeq>
 800ab60:	b9d8      	cbnz	r0, 800ab9a <_printf_float+0x432>
 800ab62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab64:	f108 0201 	add.w	r2, r8, #1
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b8      	blx	r7
 800ab70:	3001      	adds	r0, #1
 800ab72:	d10e      	bne.n	800ab92 <_printf_float+0x42a>
 800ab74:	e659      	b.n	800a82a <_printf_float+0xc2>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f ae52 	beq.w	800a82a <_printf_float+0xc2>
 800ab86:	f108 0801 	add.w	r8, r8, #1
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	4543      	cmp	r3, r8
 800ab90:	dcf1      	bgt.n	800ab76 <_printf_float+0x40e>
 800ab92:	464b      	mov	r3, r9
 800ab94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab98:	e6dc      	b.n	800a954 <_printf_float+0x1ec>
 800ab9a:	f04f 0800 	mov.w	r8, #0
 800ab9e:	f104 0a1a 	add.w	sl, r4, #26
 800aba2:	e7f2      	b.n	800ab8a <_printf_float+0x422>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4642      	mov	r2, r8
 800aba8:	e7df      	b.n	800ab6a <_printf_float+0x402>
 800abaa:	2301      	movs	r3, #1
 800abac:	464a      	mov	r2, r9
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f ae38 	beq.w	800a82a <_printf_float+0xc2>
 800abba:	f108 0801 	add.w	r8, r8, #1
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc2:	1a5b      	subs	r3, r3, r1
 800abc4:	4543      	cmp	r3, r8
 800abc6:	dcf0      	bgt.n	800abaa <_printf_float+0x442>
 800abc8:	e6fa      	b.n	800a9c0 <_printf_float+0x258>
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	f104 0919 	add.w	r9, r4, #25
 800abd2:	e7f4      	b.n	800abbe <_printf_float+0x456>

0800abd4 <_printf_common>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	4616      	mov	r6, r2
 800abda:	4699      	mov	r9, r3
 800abdc:	688a      	ldr	r2, [r1, #8]
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	bfb8      	it	lt
 800abe8:	4613      	movlt	r3, r2
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abf0:	4607      	mov	r7, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	b10a      	cbz	r2, 800abfa <_printf_common+0x26>
 800abf6:	3301      	adds	r3, #1
 800abf8:	6033      	str	r3, [r6, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	0699      	lsls	r1, r3, #26
 800abfe:	bf42      	ittt	mi
 800ac00:	6833      	ldrmi	r3, [r6, #0]
 800ac02:	3302      	addmi	r3, #2
 800ac04:	6033      	strmi	r3, [r6, #0]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d106      	bne.n	800ac1c <_printf_common+0x48>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	6832      	ldr	r2, [r6, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	dc26      	bgt.n	800ac6a <_printf_common+0x96>
 800ac1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac20:	1e13      	subs	r3, r2, #0
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	bf18      	it	ne
 800ac26:	2301      	movne	r3, #1
 800ac28:	0692      	lsls	r2, r2, #26
 800ac2a:	d42b      	bmi.n	800ac84 <_printf_common+0xb0>
 800ac2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac30:	4649      	mov	r1, r9
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c0      	blx	r8
 800ac36:	3001      	adds	r0, #1
 800ac38:	d01e      	beq.n	800ac78 <_printf_common+0xa4>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	68e5      	ldr	r5, [r4, #12]
 800ac3e:	6832      	ldr	r2, [r6, #0]
 800ac40:	f003 0306 	and.w	r3, r3, #6
 800ac44:	2b04      	cmp	r3, #4
 800ac46:	bf08      	it	eq
 800ac48:	1aad      	subeq	r5, r5, r2
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	bf0c      	ite	eq
 800ac50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac54:	2500      	movne	r5, #0
 800ac56:	4293      	cmp	r3, r2
 800ac58:	bfc4      	itt	gt
 800ac5a:	1a9b      	subgt	r3, r3, r2
 800ac5c:	18ed      	addgt	r5, r5, r3
 800ac5e:	2600      	movs	r6, #0
 800ac60:	341a      	adds	r4, #26
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d11a      	bne.n	800ac9c <_printf_common+0xc8>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e008      	b.n	800ac7c <_printf_common+0xa8>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4638      	mov	r0, r7
 800ac72:	47c0      	blx	r8
 800ac74:	3001      	adds	r0, #1
 800ac76:	d103      	bne.n	800ac80 <_printf_common+0xac>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac80:	3501      	adds	r5, #1
 800ac82:	e7c6      	b.n	800ac12 <_printf_common+0x3e>
 800ac84:	18e1      	adds	r1, r4, r3
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	2030      	movs	r0, #48	; 0x30
 800ac8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac8e:	4422      	add	r2, r4
 800ac90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac98:	3302      	adds	r3, #2
 800ac9a:	e7c7      	b.n	800ac2c <_printf_common+0x58>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4649      	mov	r1, r9
 800aca2:	4638      	mov	r0, r7
 800aca4:	47c0      	blx	r8
 800aca6:	3001      	adds	r0, #1
 800aca8:	d0e6      	beq.n	800ac78 <_printf_common+0xa4>
 800acaa:	3601      	adds	r6, #1
 800acac:	e7d9      	b.n	800ac62 <_printf_common+0x8e>
	...

0800acb0 <_printf_i>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	7e0f      	ldrb	r7, [r1, #24]
 800acb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acb8:	2f78      	cmp	r7, #120	; 0x78
 800acba:	4691      	mov	r9, r2
 800acbc:	4680      	mov	r8, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	469a      	mov	sl, r3
 800acc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acc6:	d807      	bhi.n	800acd8 <_printf_i+0x28>
 800acc8:	2f62      	cmp	r7, #98	; 0x62
 800acca:	d80a      	bhi.n	800ace2 <_printf_i+0x32>
 800accc:	2f00      	cmp	r7, #0
 800acce:	f000 80d8 	beq.w	800ae82 <_printf_i+0x1d2>
 800acd2:	2f58      	cmp	r7, #88	; 0x58
 800acd4:	f000 80a3 	beq.w	800ae1e <_printf_i+0x16e>
 800acd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ace0:	e03a      	b.n	800ad58 <_printf_i+0xa8>
 800ace2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ace6:	2b15      	cmp	r3, #21
 800ace8:	d8f6      	bhi.n	800acd8 <_printf_i+0x28>
 800acea:	a101      	add	r1, pc, #4	; (adr r1, 800acf0 <_printf_i+0x40>)
 800acec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acf0:	0800ad49 	.word	0x0800ad49
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800acd9 	.word	0x0800acd9
 800acfc:	0800acd9 	.word	0x0800acd9
 800ad00:	0800acd9 	.word	0x0800acd9
 800ad04:	0800acd9 	.word	0x0800acd9
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800acd9 	.word	0x0800acd9
 800ad10:	0800acd9 	.word	0x0800acd9
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800ae69 	.word	0x0800ae69
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ae4b 	.word	0x0800ae4b
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae8b 	.word	0x0800ae8b
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800ad8d 	.word	0x0800ad8d
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae53 	.word	0x0800ae53
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	602a      	str	r2, [r5, #0]
 800ad50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e0a3      	b.n	800aea4 <_printf_i+0x1f4>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	6829      	ldr	r1, [r5, #0]
 800ad60:	0606      	lsls	r6, r0, #24
 800ad62:	f101 0304 	add.w	r3, r1, #4
 800ad66:	d50a      	bpl.n	800ad7e <_printf_i+0xce>
 800ad68:	680e      	ldr	r6, [r1, #0]
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	da03      	bge.n	800ad78 <_printf_i+0xc8>
 800ad70:	232d      	movs	r3, #45	; 0x2d
 800ad72:	4276      	negs	r6, r6
 800ad74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad78:	485e      	ldr	r0, [pc, #376]	; (800aef4 <_printf_i+0x244>)
 800ad7a:	230a      	movs	r3, #10
 800ad7c:	e019      	b.n	800adb2 <_printf_i+0x102>
 800ad7e:	680e      	ldr	r6, [r1, #0]
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad86:	bf18      	it	ne
 800ad88:	b236      	sxthne	r6, r6
 800ad8a:	e7ef      	b.n	800ad6c <_printf_i+0xbc>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	6820      	ldr	r0, [r4, #0]
 800ad90:	1d19      	adds	r1, r3, #4
 800ad92:	6029      	str	r1, [r5, #0]
 800ad94:	0601      	lsls	r1, r0, #24
 800ad96:	d501      	bpl.n	800ad9c <_printf_i+0xec>
 800ad98:	681e      	ldr	r6, [r3, #0]
 800ad9a:	e002      	b.n	800ada2 <_printf_i+0xf2>
 800ad9c:	0646      	lsls	r6, r0, #25
 800ad9e:	d5fb      	bpl.n	800ad98 <_printf_i+0xe8>
 800ada0:	881e      	ldrh	r6, [r3, #0]
 800ada2:	4854      	ldr	r0, [pc, #336]	; (800aef4 <_printf_i+0x244>)
 800ada4:	2f6f      	cmp	r7, #111	; 0x6f
 800ada6:	bf0c      	ite	eq
 800ada8:	2308      	moveq	r3, #8
 800adaa:	230a      	movne	r3, #10
 800adac:	2100      	movs	r1, #0
 800adae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb2:	6865      	ldr	r5, [r4, #4]
 800adb4:	60a5      	str	r5, [r4, #8]
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	bfa2      	ittt	ge
 800adba:	6821      	ldrge	r1, [r4, #0]
 800adbc:	f021 0104 	bicge.w	r1, r1, #4
 800adc0:	6021      	strge	r1, [r4, #0]
 800adc2:	b90e      	cbnz	r6, 800adc8 <_printf_i+0x118>
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	d04d      	beq.n	800ae64 <_printf_i+0x1b4>
 800adc8:	4615      	mov	r5, r2
 800adca:	fbb6 f1f3 	udiv	r1, r6, r3
 800adce:	fb03 6711 	mls	r7, r3, r1, r6
 800add2:	5dc7      	ldrb	r7, [r0, r7]
 800add4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800add8:	4637      	mov	r7, r6
 800adda:	42bb      	cmp	r3, r7
 800addc:	460e      	mov	r6, r1
 800adde:	d9f4      	bls.n	800adca <_printf_i+0x11a>
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d10b      	bne.n	800adfc <_printf_i+0x14c>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	07de      	lsls	r6, r3, #31
 800ade8:	d508      	bpl.n	800adfc <_printf_i+0x14c>
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	6861      	ldr	r1, [r4, #4]
 800adee:	4299      	cmp	r1, r3
 800adf0:	bfde      	ittt	le
 800adf2:	2330      	movle	r3, #48	; 0x30
 800adf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adfc:	1b52      	subs	r2, r2, r5
 800adfe:	6122      	str	r2, [r4, #16]
 800ae00:	f8cd a000 	str.w	sl, [sp]
 800ae04:	464b      	mov	r3, r9
 800ae06:	aa03      	add	r2, sp, #12
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f7ff fee2 	bl	800abd4 <_printf_common>
 800ae10:	3001      	adds	r0, #1
 800ae12:	d14c      	bne.n	800aeae <_printf_i+0x1fe>
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	b004      	add	sp, #16
 800ae1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1e:	4835      	ldr	r0, [pc, #212]	; (800aef4 <_printf_i+0x244>)
 800ae20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae24:	6829      	ldr	r1, [r5, #0]
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae2c:	6029      	str	r1, [r5, #0]
 800ae2e:	061d      	lsls	r5, r3, #24
 800ae30:	d514      	bpl.n	800ae5c <_printf_i+0x1ac>
 800ae32:	07df      	lsls	r7, r3, #31
 800ae34:	bf44      	itt	mi
 800ae36:	f043 0320 	orrmi.w	r3, r3, #32
 800ae3a:	6023      	strmi	r3, [r4, #0]
 800ae3c:	b91e      	cbnz	r6, 800ae46 <_printf_i+0x196>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f023 0320 	bic.w	r3, r3, #32
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	2310      	movs	r3, #16
 800ae48:	e7b0      	b.n	800adac <_printf_i+0xfc>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	f043 0320 	orr.w	r3, r3, #32
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	2378      	movs	r3, #120	; 0x78
 800ae54:	4828      	ldr	r0, [pc, #160]	; (800aef8 <_printf_i+0x248>)
 800ae56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae5a:	e7e3      	b.n	800ae24 <_printf_i+0x174>
 800ae5c:	0659      	lsls	r1, r3, #25
 800ae5e:	bf48      	it	mi
 800ae60:	b2b6      	uxthmi	r6, r6
 800ae62:	e7e6      	b.n	800ae32 <_printf_i+0x182>
 800ae64:	4615      	mov	r5, r2
 800ae66:	e7bb      	b.n	800ade0 <_printf_i+0x130>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	6826      	ldr	r6, [r4, #0]
 800ae6c:	6961      	ldr	r1, [r4, #20]
 800ae6e:	1d18      	adds	r0, r3, #4
 800ae70:	6028      	str	r0, [r5, #0]
 800ae72:	0635      	lsls	r5, r6, #24
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0x1cc>
 800ae78:	6019      	str	r1, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <_printf_i+0x1d2>
 800ae7c:	0670      	lsls	r0, r6, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0x1c8>
 800ae80:	8019      	strh	r1, [r3, #0]
 800ae82:	2300      	movs	r3, #0
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	4615      	mov	r5, r2
 800ae88:	e7ba      	b.n	800ae00 <_printf_i+0x150>
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	602a      	str	r2, [r5, #0]
 800ae90:	681d      	ldr	r5, [r3, #0]
 800ae92:	6862      	ldr	r2, [r4, #4]
 800ae94:	2100      	movs	r1, #0
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7f5 f9ba 	bl	8000210 <memchr>
 800ae9c:	b108      	cbz	r0, 800aea2 <_printf_i+0x1f2>
 800ae9e:	1b40      	subs	r0, r0, r5
 800aea0:	6060      	str	r0, [r4, #4]
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	2300      	movs	r3, #0
 800aea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeac:	e7a8      	b.n	800ae00 <_printf_i+0x150>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	47d0      	blx	sl
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d0ab      	beq.n	800ae14 <_printf_i+0x164>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	079b      	lsls	r3, r3, #30
 800aec0:	d413      	bmi.n	800aeea <_printf_i+0x23a>
 800aec2:	68e0      	ldr	r0, [r4, #12]
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	4298      	cmp	r0, r3
 800aec8:	bfb8      	it	lt
 800aeca:	4618      	movlt	r0, r3
 800aecc:	e7a4      	b.n	800ae18 <_printf_i+0x168>
 800aece:	2301      	movs	r3, #1
 800aed0:	4632      	mov	r2, r6
 800aed2:	4649      	mov	r1, r9
 800aed4:	4640      	mov	r0, r8
 800aed6:	47d0      	blx	sl
 800aed8:	3001      	adds	r0, #1
 800aeda:	d09b      	beq.n	800ae14 <_printf_i+0x164>
 800aedc:	3501      	adds	r5, #1
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	9903      	ldr	r1, [sp, #12]
 800aee2:	1a5b      	subs	r3, r3, r1
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	dcf2      	bgt.n	800aece <_printf_i+0x21e>
 800aee8:	e7eb      	b.n	800aec2 <_printf_i+0x212>
 800aeea:	2500      	movs	r5, #0
 800aeec:	f104 0619 	add.w	r6, r4, #25
 800aef0:	e7f5      	b.n	800aede <_printf_i+0x22e>
 800aef2:	bf00      	nop
 800aef4:	08010ad4 	.word	0x08010ad4
 800aef8:	08010ae5 	.word	0x08010ae5

0800aefc <_sbrk_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d06      	ldr	r5, [pc, #24]	; (800af18 <_sbrk_r+0x1c>)
 800af00:	2300      	movs	r3, #0
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f005 faf4 	bl	80104f4 <_sbrk>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_sbrk_r+0x1a>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_sbrk_r+0x1a>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	200122c4 	.word	0x200122c4

0800af1c <siprintf>:
 800af1c:	b40e      	push	{r1, r2, r3}
 800af1e:	b500      	push	{lr}
 800af20:	b09c      	sub	sp, #112	; 0x70
 800af22:	ab1d      	add	r3, sp, #116	; 0x74
 800af24:	9002      	str	r0, [sp, #8]
 800af26:	9006      	str	r0, [sp, #24]
 800af28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af2c:	4809      	ldr	r0, [pc, #36]	; (800af54 <siprintf+0x38>)
 800af2e:	9107      	str	r1, [sp, #28]
 800af30:	9104      	str	r1, [sp, #16]
 800af32:	4909      	ldr	r1, [pc, #36]	; (800af58 <siprintf+0x3c>)
 800af34:	f853 2b04 	ldr.w	r2, [r3], #4
 800af38:	9105      	str	r1, [sp, #20]
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	a902      	add	r1, sp, #8
 800af40:	f001 fb42 	bl	800c5c8 <_svfiprintf_r>
 800af44:	9b02      	ldr	r3, [sp, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	b01c      	add	sp, #112	; 0x70
 800af4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af50:	b003      	add	sp, #12
 800af52:	4770      	bx	lr
 800af54:	20000014 	.word	0x20000014
 800af58:	ffff0208 	.word	0xffff0208

0800af5c <siscanf>:
 800af5c:	b40e      	push	{r1, r2, r3}
 800af5e:	b510      	push	{r4, lr}
 800af60:	b09f      	sub	sp, #124	; 0x7c
 800af62:	ac21      	add	r4, sp, #132	; 0x84
 800af64:	f44f 7101 	mov.w	r1, #516	; 0x204
 800af68:	f854 2b04 	ldr.w	r2, [r4], #4
 800af6c:	9201      	str	r2, [sp, #4]
 800af6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800af72:	9004      	str	r0, [sp, #16]
 800af74:	9008      	str	r0, [sp, #32]
 800af76:	f7f5 f93d 	bl	80001f4 <strlen>
 800af7a:	4b0c      	ldr	r3, [pc, #48]	; (800afac <siscanf+0x50>)
 800af7c:	9005      	str	r0, [sp, #20]
 800af7e:	9009      	str	r0, [sp, #36]	; 0x24
 800af80:	930d      	str	r3, [sp, #52]	; 0x34
 800af82:	480b      	ldr	r0, [pc, #44]	; (800afb0 <siscanf+0x54>)
 800af84:	9a01      	ldr	r2, [sp, #4]
 800af86:	6800      	ldr	r0, [r0, #0]
 800af88:	9403      	str	r4, [sp, #12]
 800af8a:	2300      	movs	r3, #0
 800af8c:	9311      	str	r3, [sp, #68]	; 0x44
 800af8e:	9316      	str	r3, [sp, #88]	; 0x58
 800af90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af94:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af98:	a904      	add	r1, sp, #16
 800af9a:	4623      	mov	r3, r4
 800af9c:	f001 fc6e 	bl	800c87c <__ssvfiscanf_r>
 800afa0:	b01f      	add	sp, #124	; 0x7c
 800afa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa6:	b003      	add	sp, #12
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	0800afd7 	.word	0x0800afd7
 800afb0:	20000014 	.word	0x20000014

0800afb4 <__sread>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	460c      	mov	r4, r1
 800afb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afbc:	f001 ff28 	bl	800ce10 <_read_r>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	bfab      	itete	ge
 800afc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afc6:	89a3      	ldrhlt	r3, [r4, #12]
 800afc8:	181b      	addge	r3, r3, r0
 800afca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afce:	bfac      	ite	ge
 800afd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800afd2:	81a3      	strhlt	r3, [r4, #12]
 800afd4:	bd10      	pop	{r4, pc}

0800afd6 <__seofread>:
 800afd6:	2000      	movs	r0, #0
 800afd8:	4770      	bx	lr

0800afda <__swrite>:
 800afda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	461f      	mov	r7, r3
 800afe0:	898b      	ldrh	r3, [r1, #12]
 800afe2:	05db      	lsls	r3, r3, #23
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	4616      	mov	r6, r2
 800afea:	d505      	bpl.n	800aff8 <__swrite+0x1e>
 800afec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff0:	2302      	movs	r3, #2
 800aff2:	2200      	movs	r2, #0
 800aff4:	f000 fec6 	bl	800bd84 <_lseek_r>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800affe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	4628      	mov	r0, r5
 800b00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	f000 b817 	b.w	800b040 <_write_r>

0800b012 <__sseek>:
 800b012:	b510      	push	{r4, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01a:	f000 feb3 	bl	800bd84 <_lseek_r>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	bf15      	itete	ne
 800b024:	6560      	strne	r0, [r4, #84]	; 0x54
 800b026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b02e:	81a3      	strheq	r3, [r4, #12]
 800b030:	bf18      	it	ne
 800b032:	81a3      	strhne	r3, [r4, #12]
 800b034:	bd10      	pop	{r4, pc}

0800b036 <__sclose>:
 800b036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03a:	f000 b813 	b.w	800b064 <_close_r>
	...

0800b040 <_write_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d07      	ldr	r5, [pc, #28]	; (800b060 <_write_r+0x20>)
 800b044:	4604      	mov	r4, r0
 800b046:	4608      	mov	r0, r1
 800b048:	4611      	mov	r1, r2
 800b04a:	2200      	movs	r2, #0
 800b04c:	602a      	str	r2, [r5, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	f7f8 fca3 	bl	800399a <_write>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_write_r+0x1e>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_write_r+0x1e>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	200122c4 	.word	0x200122c4

0800b064 <_close_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4d06      	ldr	r5, [pc, #24]	; (800b080 <_close_r+0x1c>)
 800b068:	2300      	movs	r3, #0
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	f7f8 fcaf 	bl	80039d2 <_close>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_close_r+0x1a>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_close_r+0x1a>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	200122c4 	.word	0x200122c4

0800b084 <quorem>:
 800b084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b088:	6903      	ldr	r3, [r0, #16]
 800b08a:	690c      	ldr	r4, [r1, #16]
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	4607      	mov	r7, r0
 800b090:	f2c0 8081 	blt.w	800b196 <quorem+0x112>
 800b094:	3c01      	subs	r4, #1
 800b096:	f101 0814 	add.w	r8, r1, #20
 800b09a:	f100 0514 	add.w	r5, r0, #20
 800b09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0bc:	d331      	bcc.n	800b122 <quorem+0x9e>
 800b0be:	f04f 0e00 	mov.w	lr, #0
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	46ac      	mov	ip, r5
 800b0c6:	46f2      	mov	sl, lr
 800b0c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0cc:	b293      	uxth	r3, r2
 800b0ce:	fb06 e303 	mla	r3, r6, r3, lr
 800b0d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	ebaa 0303 	sub.w	r3, sl, r3
 800b0dc:	f8dc a000 	ldr.w	sl, [ip]
 800b0e0:	0c12      	lsrs	r2, r2, #16
 800b0e2:	fa13 f38a 	uxtah	r3, r3, sl
 800b0e6:	fb06 e202 	mla	r2, r6, r2, lr
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0f2:	b292      	uxth	r2, r2
 800b0f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800b100:	4581      	cmp	r9, r0
 800b102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b106:	f84c 3b04 	str.w	r3, [ip], #4
 800b10a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b10e:	d2db      	bcs.n	800b0c8 <quorem+0x44>
 800b110:	f855 300b 	ldr.w	r3, [r5, fp]
 800b114:	b92b      	cbnz	r3, 800b122 <quorem+0x9e>
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	3b04      	subs	r3, #4
 800b11a:	429d      	cmp	r5, r3
 800b11c:	461a      	mov	r2, r3
 800b11e:	d32e      	bcc.n	800b17e <quorem+0xfa>
 800b120:	613c      	str	r4, [r7, #16]
 800b122:	4638      	mov	r0, r7
 800b124:	f001 f8dc 	bl	800c2e0 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	db24      	blt.n	800b176 <quorem+0xf2>
 800b12c:	3601      	adds	r6, #1
 800b12e:	4628      	mov	r0, r5
 800b130:	f04f 0c00 	mov.w	ip, #0
 800b134:	f858 2b04 	ldr.w	r2, [r8], #4
 800b138:	f8d0 e000 	ldr.w	lr, [r0]
 800b13c:	b293      	uxth	r3, r2
 800b13e:	ebac 0303 	sub.w	r3, ip, r3
 800b142:	0c12      	lsrs	r2, r2, #16
 800b144:	fa13 f38e 	uxtah	r3, r3, lr
 800b148:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b14c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b150:	b29b      	uxth	r3, r3
 800b152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b156:	45c1      	cmp	r9, r8
 800b158:	f840 3b04 	str.w	r3, [r0], #4
 800b15c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b160:	d2e8      	bcs.n	800b134 <quorem+0xb0>
 800b162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b16a:	b922      	cbnz	r2, 800b176 <quorem+0xf2>
 800b16c:	3b04      	subs	r3, #4
 800b16e:	429d      	cmp	r5, r3
 800b170:	461a      	mov	r2, r3
 800b172:	d30a      	bcc.n	800b18a <quorem+0x106>
 800b174:	613c      	str	r4, [r7, #16]
 800b176:	4630      	mov	r0, r6
 800b178:	b003      	add	sp, #12
 800b17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	3b04      	subs	r3, #4
 800b182:	2a00      	cmp	r2, #0
 800b184:	d1cc      	bne.n	800b120 <quorem+0x9c>
 800b186:	3c01      	subs	r4, #1
 800b188:	e7c7      	b.n	800b11a <quorem+0x96>
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	3b04      	subs	r3, #4
 800b18e:	2a00      	cmp	r2, #0
 800b190:	d1f0      	bne.n	800b174 <quorem+0xf0>
 800b192:	3c01      	subs	r4, #1
 800b194:	e7eb      	b.n	800b16e <quorem+0xea>
 800b196:	2000      	movs	r0, #0
 800b198:	e7ee      	b.n	800b178 <quorem+0xf4>
 800b19a:	0000      	movs	r0, r0
 800b19c:	0000      	movs	r0, r0
	...

0800b1a0 <_dtoa_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	ed2d 8b04 	vpush	{d8-d9}
 800b1a8:	ec57 6b10 	vmov	r6, r7, d0
 800b1ac:	b093      	sub	sp, #76	; 0x4c
 800b1ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1b4:	9106      	str	r1, [sp, #24]
 800b1b6:	ee10 aa10 	vmov	sl, s0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b1be:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c0:	46bb      	mov	fp, r7
 800b1c2:	b975      	cbnz	r5, 800b1e2 <_dtoa_r+0x42>
 800b1c4:	2010      	movs	r0, #16
 800b1c6:	f7ff f93f 	bl	800a448 <malloc>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6260      	str	r0, [r4, #36]	; 0x24
 800b1ce:	b920      	cbnz	r0, 800b1da <_dtoa_r+0x3a>
 800b1d0:	4ba7      	ldr	r3, [pc, #668]	; (800b470 <_dtoa_r+0x2d0>)
 800b1d2:	21ea      	movs	r1, #234	; 0xea
 800b1d4:	48a7      	ldr	r0, [pc, #668]	; (800b474 <_dtoa_r+0x2d4>)
 800b1d6:	f001 ff97 	bl	800d108 <__assert_func>
 800b1da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1de:	6005      	str	r5, [r0, #0]
 800b1e0:	60c5      	str	r5, [r0, #12]
 800b1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1e4:	6819      	ldr	r1, [r3, #0]
 800b1e6:	b151      	cbz	r1, 800b1fe <_dtoa_r+0x5e>
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	604a      	str	r2, [r1, #4]
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	4093      	lsls	r3, r2
 800b1f0:	608b      	str	r3, [r1, #8]
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fe32 	bl	800be5c <_Bfree>
 800b1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	1e3b      	subs	r3, r7, #0
 800b200:	bfaa      	itet	ge
 800b202:	2300      	movge	r3, #0
 800b204:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b208:	f8c8 3000 	strge.w	r3, [r8]
 800b20c:	4b9a      	ldr	r3, [pc, #616]	; (800b478 <_dtoa_r+0x2d8>)
 800b20e:	bfbc      	itt	lt
 800b210:	2201      	movlt	r2, #1
 800b212:	f8c8 2000 	strlt.w	r2, [r8]
 800b216:	ea33 030b 	bics.w	r3, r3, fp
 800b21a:	d11b      	bne.n	800b254 <_dtoa_r+0xb4>
 800b21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b21e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b228:	4333      	orrs	r3, r6
 800b22a:	f000 8592 	beq.w	800bd52 <_dtoa_r+0xbb2>
 800b22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b230:	b963      	cbnz	r3, 800b24c <_dtoa_r+0xac>
 800b232:	4b92      	ldr	r3, [pc, #584]	; (800b47c <_dtoa_r+0x2dc>)
 800b234:	e022      	b.n	800b27c <_dtoa_r+0xdc>
 800b236:	4b92      	ldr	r3, [pc, #584]	; (800b480 <_dtoa_r+0x2e0>)
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	3308      	adds	r3, #8
 800b23c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	9801      	ldr	r0, [sp, #4]
 800b242:	b013      	add	sp, #76	; 0x4c
 800b244:	ecbd 8b04 	vpop	{d8-d9}
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	4b8b      	ldr	r3, [pc, #556]	; (800b47c <_dtoa_r+0x2dc>)
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	3303      	adds	r3, #3
 800b252:	e7f3      	b.n	800b23c <_dtoa_r+0x9c>
 800b254:	2200      	movs	r2, #0
 800b256:	2300      	movs	r3, #0
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	f7f5 fc4c 	bl	8000af8 <__aeabi_dcmpeq>
 800b260:	ec4b ab19 	vmov	d9, sl, fp
 800b264:	4680      	mov	r8, r0
 800b266:	b158      	cbz	r0, 800b280 <_dtoa_r+0xe0>
 800b268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b26a:	2301      	movs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 856b 	beq.w	800bd4c <_dtoa_r+0xbac>
 800b276:	4883      	ldr	r0, [pc, #524]	; (800b484 <_dtoa_r+0x2e4>)
 800b278:	6018      	str	r0, [r3, #0]
 800b27a:	1e43      	subs	r3, r0, #1
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	e7df      	b.n	800b240 <_dtoa_r+0xa0>
 800b280:	ec4b ab10 	vmov	d0, sl, fp
 800b284:	aa10      	add	r2, sp, #64	; 0x40
 800b286:	a911      	add	r1, sp, #68	; 0x44
 800b288:	4620      	mov	r0, r4
 800b28a:	f001 f8cf 	bl	800c42c <__d2b>
 800b28e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b292:	ee08 0a10 	vmov	s16, r0
 800b296:	2d00      	cmp	r5, #0
 800b298:	f000 8084 	beq.w	800b3a4 <_dtoa_r+0x204>
 800b29c:	ee19 3a90 	vmov	r3, s19
 800b2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2a8:	4656      	mov	r6, sl
 800b2aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b2b6:	4b74      	ldr	r3, [pc, #464]	; (800b488 <_dtoa_r+0x2e8>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f4 fffb 	bl	80002b8 <__aeabi_dsub>
 800b2c2:	a365      	add	r3, pc, #404	; (adr r3, 800b458 <_dtoa_r+0x2b8>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f5 f9ae 	bl	8000628 <__aeabi_dmul>
 800b2cc:	a364      	add	r3, pc, #400	; (adr r3, 800b460 <_dtoa_r+0x2c0>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f4 fff3 	bl	80002bc <__adddf3>
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	4628      	mov	r0, r5
 800b2da:	460f      	mov	r7, r1
 800b2dc:	f7f5 f93a 	bl	8000554 <__aeabi_i2d>
 800b2e0:	a361      	add	r3, pc, #388	; (adr r3, 800b468 <_dtoa_r+0x2c8>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 f99f 	bl	8000628 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	f7f4 ffe3 	bl	80002bc <__adddf3>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	f7f5 fc45 	bl	8000b88 <__aeabi_d2iz>
 800b2fe:	2200      	movs	r2, #0
 800b300:	9000      	str	r0, [sp, #0]
 800b302:	2300      	movs	r3, #0
 800b304:	4630      	mov	r0, r6
 800b306:	4639      	mov	r1, r7
 800b308:	f7f5 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800b30c:	b150      	cbz	r0, 800b324 <_dtoa_r+0x184>
 800b30e:	9800      	ldr	r0, [sp, #0]
 800b310:	f7f5 f920 	bl	8000554 <__aeabi_i2d>
 800b314:	4632      	mov	r2, r6
 800b316:	463b      	mov	r3, r7
 800b318:	f7f5 fbee 	bl	8000af8 <__aeabi_dcmpeq>
 800b31c:	b910      	cbnz	r0, 800b324 <_dtoa_r+0x184>
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	3b01      	subs	r3, #1
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	2b16      	cmp	r3, #22
 800b328:	d85a      	bhi.n	800b3e0 <_dtoa_r+0x240>
 800b32a:	9a00      	ldr	r2, [sp, #0]
 800b32c:	4b57      	ldr	r3, [pc, #348]	; (800b48c <_dtoa_r+0x2ec>)
 800b32e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	ec51 0b19 	vmov	r0, r1, d9
 800b33a:	f7f5 fbe7 	bl	8000b0c <__aeabi_dcmplt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d050      	beq.n	800b3e4 <_dtoa_r+0x244>
 800b342:	9b00      	ldr	r3, [sp, #0]
 800b344:	3b01      	subs	r3, #1
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	2300      	movs	r3, #0
 800b34a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b34e:	1b5d      	subs	r5, r3, r5
 800b350:	1e6b      	subs	r3, r5, #1
 800b352:	9305      	str	r3, [sp, #20]
 800b354:	bf45      	ittet	mi
 800b356:	f1c5 0301 	rsbmi	r3, r5, #1
 800b35a:	9304      	strmi	r3, [sp, #16]
 800b35c:	2300      	movpl	r3, #0
 800b35e:	2300      	movmi	r3, #0
 800b360:	bf4c      	ite	mi
 800b362:	9305      	strmi	r3, [sp, #20]
 800b364:	9304      	strpl	r3, [sp, #16]
 800b366:	9b00      	ldr	r3, [sp, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	db3d      	blt.n	800b3e8 <_dtoa_r+0x248>
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	9a00      	ldr	r2, [sp, #0]
 800b370:	920a      	str	r2, [sp, #40]	; 0x28
 800b372:	4413      	add	r3, r2
 800b374:	9305      	str	r3, [sp, #20]
 800b376:	2300      	movs	r3, #0
 800b378:	9307      	str	r3, [sp, #28]
 800b37a:	9b06      	ldr	r3, [sp, #24]
 800b37c:	2b09      	cmp	r3, #9
 800b37e:	f200 8089 	bhi.w	800b494 <_dtoa_r+0x2f4>
 800b382:	2b05      	cmp	r3, #5
 800b384:	bfc4      	itt	gt
 800b386:	3b04      	subgt	r3, #4
 800b388:	9306      	strgt	r3, [sp, #24]
 800b38a:	9b06      	ldr	r3, [sp, #24]
 800b38c:	f1a3 0302 	sub.w	r3, r3, #2
 800b390:	bfcc      	ite	gt
 800b392:	2500      	movgt	r5, #0
 800b394:	2501      	movle	r5, #1
 800b396:	2b03      	cmp	r3, #3
 800b398:	f200 8087 	bhi.w	800b4aa <_dtoa_r+0x30a>
 800b39c:	e8df f003 	tbb	[pc, r3]
 800b3a0:	59383a2d 	.word	0x59383a2d
 800b3a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b3a8:	441d      	add	r5, r3
 800b3aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	bfc1      	itttt	gt
 800b3b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800b3be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3c2:	bfda      	itte	le
 800b3c4:	f1c3 0320 	rsble	r3, r3, #32
 800b3c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b3cc:	4318      	orrgt	r0, r3
 800b3ce:	f7f5 f8b1 	bl	8000534 <__aeabi_ui2d>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b3da:	3d01      	subs	r5, #1
 800b3dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b3de:	e76a      	b.n	800b2b6 <_dtoa_r+0x116>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e7b2      	b.n	800b34a <_dtoa_r+0x1aa>
 800b3e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3e6:	e7b1      	b.n	800b34c <_dtoa_r+0x1ac>
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	9a00      	ldr	r2, [sp, #0]
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	4253      	negs	r3, r2
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3f8:	e7bf      	b.n	800b37a <_dtoa_r+0x1da>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	9308      	str	r3, [sp, #32]
 800b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc55      	bgt.n	800b4b0 <_dtoa_r+0x310>
 800b404:	2301      	movs	r3, #1
 800b406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b40a:	461a      	mov	r2, r3
 800b40c:	9209      	str	r2, [sp, #36]	; 0x24
 800b40e:	e00c      	b.n	800b42a <_dtoa_r+0x28a>
 800b410:	2301      	movs	r3, #1
 800b412:	e7f3      	b.n	800b3fc <_dtoa_r+0x25c>
 800b414:	2300      	movs	r3, #0
 800b416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b418:	9308      	str	r3, [sp, #32]
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	4413      	add	r3, r2
 800b41e:	9302      	str	r3, [sp, #8]
 800b420:	3301      	adds	r3, #1
 800b422:	2b01      	cmp	r3, #1
 800b424:	9303      	str	r3, [sp, #12]
 800b426:	bfb8      	it	lt
 800b428:	2301      	movlt	r3, #1
 800b42a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b42c:	2200      	movs	r2, #0
 800b42e:	6042      	str	r2, [r0, #4]
 800b430:	2204      	movs	r2, #4
 800b432:	f102 0614 	add.w	r6, r2, #20
 800b436:	429e      	cmp	r6, r3
 800b438:	6841      	ldr	r1, [r0, #4]
 800b43a:	d93d      	bls.n	800b4b8 <_dtoa_r+0x318>
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fccd 	bl	800bddc <_Balloc>
 800b442:	9001      	str	r0, [sp, #4]
 800b444:	2800      	cmp	r0, #0
 800b446:	d13b      	bne.n	800b4c0 <_dtoa_r+0x320>
 800b448:	4b11      	ldr	r3, [pc, #68]	; (800b490 <_dtoa_r+0x2f0>)
 800b44a:	4602      	mov	r2, r0
 800b44c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b450:	e6c0      	b.n	800b1d4 <_dtoa_r+0x34>
 800b452:	2301      	movs	r3, #1
 800b454:	e7df      	b.n	800b416 <_dtoa_r+0x276>
 800b456:	bf00      	nop
 800b458:	636f4361 	.word	0x636f4361
 800b45c:	3fd287a7 	.word	0x3fd287a7
 800b460:	8b60c8b3 	.word	0x8b60c8b3
 800b464:	3fc68a28 	.word	0x3fc68a28
 800b468:	509f79fb 	.word	0x509f79fb
 800b46c:	3fd34413 	.word	0x3fd34413
 800b470:	08010b03 	.word	0x08010b03
 800b474:	08010b1a 	.word	0x08010b1a
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	08010aff 	.word	0x08010aff
 800b480:	08010af6 	.word	0x08010af6
 800b484:	08010cfa 	.word	0x08010cfa
 800b488:	3ff80000 	.word	0x3ff80000
 800b48c:	08010c10 	.word	0x08010c10
 800b490:	08010b75 	.word	0x08010b75
 800b494:	2501      	movs	r5, #1
 800b496:	2300      	movs	r3, #0
 800b498:	9306      	str	r3, [sp, #24]
 800b49a:	9508      	str	r5, [sp, #32]
 800b49c:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2312      	movs	r3, #18
 800b4a8:	e7b0      	b.n	800b40c <_dtoa_r+0x26c>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	9308      	str	r3, [sp, #32]
 800b4ae:	e7f5      	b.n	800b49c <_dtoa_r+0x2fc>
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4b6:	e7b8      	b.n	800b42a <_dtoa_r+0x28a>
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	6041      	str	r1, [r0, #4]
 800b4bc:	0052      	lsls	r2, r2, #1
 800b4be:	e7b8      	b.n	800b432 <_dtoa_r+0x292>
 800b4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c2:	9a01      	ldr	r2, [sp, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	2b0e      	cmp	r3, #14
 800b4ca:	f200 809d 	bhi.w	800b608 <_dtoa_r+0x468>
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	f000 809a 	beq.w	800b608 <_dtoa_r+0x468>
 800b4d4:	9b00      	ldr	r3, [sp, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd32      	ble.n	800b540 <_dtoa_r+0x3a0>
 800b4da:	4ab7      	ldr	r2, [pc, #732]	; (800b7b8 <_dtoa_r+0x618>)
 800b4dc:	f003 030f 	and.w	r3, r3, #15
 800b4e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	05d8      	lsls	r0, r3, #23
 800b4ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b4f0:	d516      	bpl.n	800b520 <_dtoa_r+0x380>
 800b4f2:	4bb2      	ldr	r3, [pc, #712]	; (800b7bc <_dtoa_r+0x61c>)
 800b4f4:	ec51 0b19 	vmov	r0, r1, d9
 800b4f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4fc:	f7f5 f9be 	bl	800087c <__aeabi_ddiv>
 800b500:	f007 070f 	and.w	r7, r7, #15
 800b504:	4682      	mov	sl, r0
 800b506:	468b      	mov	fp, r1
 800b508:	2503      	movs	r5, #3
 800b50a:	4eac      	ldr	r6, [pc, #688]	; (800b7bc <_dtoa_r+0x61c>)
 800b50c:	b957      	cbnz	r7, 800b524 <_dtoa_r+0x384>
 800b50e:	4642      	mov	r2, r8
 800b510:	464b      	mov	r3, r9
 800b512:	4650      	mov	r0, sl
 800b514:	4659      	mov	r1, fp
 800b516:	f7f5 f9b1 	bl	800087c <__aeabi_ddiv>
 800b51a:	4682      	mov	sl, r0
 800b51c:	468b      	mov	fp, r1
 800b51e:	e028      	b.n	800b572 <_dtoa_r+0x3d2>
 800b520:	2502      	movs	r5, #2
 800b522:	e7f2      	b.n	800b50a <_dtoa_r+0x36a>
 800b524:	07f9      	lsls	r1, r7, #31
 800b526:	d508      	bpl.n	800b53a <_dtoa_r+0x39a>
 800b528:	4640      	mov	r0, r8
 800b52a:	4649      	mov	r1, r9
 800b52c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b530:	f7f5 f87a 	bl	8000628 <__aeabi_dmul>
 800b534:	3501      	adds	r5, #1
 800b536:	4680      	mov	r8, r0
 800b538:	4689      	mov	r9, r1
 800b53a:	107f      	asrs	r7, r7, #1
 800b53c:	3608      	adds	r6, #8
 800b53e:	e7e5      	b.n	800b50c <_dtoa_r+0x36c>
 800b540:	f000 809b 	beq.w	800b67a <_dtoa_r+0x4da>
 800b544:	9b00      	ldr	r3, [sp, #0]
 800b546:	4f9d      	ldr	r7, [pc, #628]	; (800b7bc <_dtoa_r+0x61c>)
 800b548:	425e      	negs	r6, r3
 800b54a:	4b9b      	ldr	r3, [pc, #620]	; (800b7b8 <_dtoa_r+0x618>)
 800b54c:	f006 020f 	and.w	r2, r6, #15
 800b550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	ec51 0b19 	vmov	r0, r1, d9
 800b55c:	f7f5 f864 	bl	8000628 <__aeabi_dmul>
 800b560:	1136      	asrs	r6, r6, #4
 800b562:	4682      	mov	sl, r0
 800b564:	468b      	mov	fp, r1
 800b566:	2300      	movs	r3, #0
 800b568:	2502      	movs	r5, #2
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d17a      	bne.n	800b664 <_dtoa_r+0x4c4>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1d3      	bne.n	800b51a <_dtoa_r+0x37a>
 800b572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 8082 	beq.w	800b67e <_dtoa_r+0x4de>
 800b57a:	4b91      	ldr	r3, [pc, #580]	; (800b7c0 <_dtoa_r+0x620>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	4650      	mov	r0, sl
 800b580:	4659      	mov	r1, fp
 800b582:	f7f5 fac3 	bl	8000b0c <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d079      	beq.n	800b67e <_dtoa_r+0x4de>
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d076      	beq.n	800b67e <_dtoa_r+0x4de>
 800b590:	9b02      	ldr	r3, [sp, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dd36      	ble.n	800b604 <_dtoa_r+0x464>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	4650      	mov	r0, sl
 800b59a:	4659      	mov	r1, fp
 800b59c:	1e5f      	subs	r7, r3, #1
 800b59e:	2200      	movs	r2, #0
 800b5a0:	4b88      	ldr	r3, [pc, #544]	; (800b7c4 <_dtoa_r+0x624>)
 800b5a2:	f7f5 f841 	bl	8000628 <__aeabi_dmul>
 800b5a6:	9e02      	ldr	r6, [sp, #8]
 800b5a8:	4682      	mov	sl, r0
 800b5aa:	468b      	mov	fp, r1
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f7f4 ffd0 	bl	8000554 <__aeabi_i2d>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	f7f5 f836 	bl	8000628 <__aeabi_dmul>
 800b5bc:	4b82      	ldr	r3, [pc, #520]	; (800b7c8 <_dtoa_r+0x628>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f7f4 fe7c 	bl	80002bc <__adddf3>
 800b5c4:	46d0      	mov	r8, sl
 800b5c6:	46d9      	mov	r9, fp
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d158      	bne.n	800b684 <_dtoa_r+0x4e4>
 800b5d2:	4b7e      	ldr	r3, [pc, #504]	; (800b7cc <_dtoa_r+0x62c>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	f7f4 fe6d 	bl	80002b8 <__aeabi_dsub>
 800b5de:	4652      	mov	r2, sl
 800b5e0:	465b      	mov	r3, fp
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4689      	mov	r9, r1
 800b5e6:	f7f5 faaf 	bl	8000b48 <__aeabi_dcmpgt>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f040 8295 	bne.w	800bb1a <_dtoa_r+0x97a>
 800b5f0:	4652      	mov	r2, sl
 800b5f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f5 fa87 	bl	8000b0c <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f040 8289 	bne.w	800bb16 <_dtoa_r+0x976>
 800b604:	ec5b ab19 	vmov	sl, fp, d9
 800b608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f2c0 8148 	blt.w	800b8a0 <_dtoa_r+0x700>
 800b610:	9a00      	ldr	r2, [sp, #0]
 800b612:	2a0e      	cmp	r2, #14
 800b614:	f300 8144 	bgt.w	800b8a0 <_dtoa_r+0x700>
 800b618:	4b67      	ldr	r3, [pc, #412]	; (800b7b8 <_dtoa_r+0x618>)
 800b61a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b61e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b624:	2b00      	cmp	r3, #0
 800b626:	f280 80d5 	bge.w	800b7d4 <_dtoa_r+0x634>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f300 80d1 	bgt.w	800b7d4 <_dtoa_r+0x634>
 800b632:	f040 826f 	bne.w	800bb14 <_dtoa_r+0x974>
 800b636:	4b65      	ldr	r3, [pc, #404]	; (800b7cc <_dtoa_r+0x62c>)
 800b638:	2200      	movs	r2, #0
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fff3 	bl	8000628 <__aeabi_dmul>
 800b642:	4652      	mov	r2, sl
 800b644:	465b      	mov	r3, fp
 800b646:	f7f5 fa75 	bl	8000b34 <__aeabi_dcmpge>
 800b64a:	9e03      	ldr	r6, [sp, #12]
 800b64c:	4637      	mov	r7, r6
 800b64e:	2800      	cmp	r0, #0
 800b650:	f040 8245 	bne.w	800bade <_dtoa_r+0x93e>
 800b654:	9d01      	ldr	r5, [sp, #4]
 800b656:	2331      	movs	r3, #49	; 0x31
 800b658:	f805 3b01 	strb.w	r3, [r5], #1
 800b65c:	9b00      	ldr	r3, [sp, #0]
 800b65e:	3301      	adds	r3, #1
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	e240      	b.n	800bae6 <_dtoa_r+0x946>
 800b664:	07f2      	lsls	r2, r6, #31
 800b666:	d505      	bpl.n	800b674 <_dtoa_r+0x4d4>
 800b668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66c:	f7f4 ffdc 	bl	8000628 <__aeabi_dmul>
 800b670:	3501      	adds	r5, #1
 800b672:	2301      	movs	r3, #1
 800b674:	1076      	asrs	r6, r6, #1
 800b676:	3708      	adds	r7, #8
 800b678:	e777      	b.n	800b56a <_dtoa_r+0x3ca>
 800b67a:	2502      	movs	r5, #2
 800b67c:	e779      	b.n	800b572 <_dtoa_r+0x3d2>
 800b67e:	9f00      	ldr	r7, [sp, #0]
 800b680:	9e03      	ldr	r6, [sp, #12]
 800b682:	e794      	b.n	800b5ae <_dtoa_r+0x40e>
 800b684:	9901      	ldr	r1, [sp, #4]
 800b686:	4b4c      	ldr	r3, [pc, #304]	; (800b7b8 <_dtoa_r+0x618>)
 800b688:	4431      	add	r1, r6
 800b68a:	910d      	str	r1, [sp, #52]	; 0x34
 800b68c:	9908      	ldr	r1, [sp, #32]
 800b68e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b692:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b696:	2900      	cmp	r1, #0
 800b698:	d043      	beq.n	800b722 <_dtoa_r+0x582>
 800b69a:	494d      	ldr	r1, [pc, #308]	; (800b7d0 <_dtoa_r+0x630>)
 800b69c:	2000      	movs	r0, #0
 800b69e:	f7f5 f8ed 	bl	800087c <__aeabi_ddiv>
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	465b      	mov	r3, fp
 800b6a6:	f7f4 fe07 	bl	80002b8 <__aeabi_dsub>
 800b6aa:	9d01      	ldr	r5, [sp, #4]
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	468b      	mov	fp, r1
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	f7f5 fa68 	bl	8000b88 <__aeabi_d2iz>
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	f7f4 ff4b 	bl	8000554 <__aeabi_i2d>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	f7f4 fdf7 	bl	80002b8 <__aeabi_dsub>
 800b6ca:	3630      	adds	r6, #48	; 0x30
 800b6cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b6d0:	4652      	mov	r2, sl
 800b6d2:	465b      	mov	r3, fp
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	4689      	mov	r9, r1
 800b6d8:	f7f5 fa18 	bl	8000b0c <__aeabi_dcmplt>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d163      	bne.n	800b7a8 <_dtoa_r+0x608>
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	4936      	ldr	r1, [pc, #216]	; (800b7c0 <_dtoa_r+0x620>)
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f7f4 fde6 	bl	80002b8 <__aeabi_dsub>
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	465b      	mov	r3, fp
 800b6f0:	f7f5 fa0c 	bl	8000b0c <__aeabi_dcmplt>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f040 80b5 	bne.w	800b864 <_dtoa_r+0x6c4>
 800b6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fc:	429d      	cmp	r5, r3
 800b6fe:	d081      	beq.n	800b604 <_dtoa_r+0x464>
 800b700:	4b30      	ldr	r3, [pc, #192]	; (800b7c4 <_dtoa_r+0x624>)
 800b702:	2200      	movs	r2, #0
 800b704:	4650      	mov	r0, sl
 800b706:	4659      	mov	r1, fp
 800b708:	f7f4 ff8e 	bl	8000628 <__aeabi_dmul>
 800b70c:	4b2d      	ldr	r3, [pc, #180]	; (800b7c4 <_dtoa_r+0x624>)
 800b70e:	4682      	mov	sl, r0
 800b710:	468b      	mov	fp, r1
 800b712:	4640      	mov	r0, r8
 800b714:	4649      	mov	r1, r9
 800b716:	2200      	movs	r2, #0
 800b718:	f7f4 ff86 	bl	8000628 <__aeabi_dmul>
 800b71c:	4680      	mov	r8, r0
 800b71e:	4689      	mov	r9, r1
 800b720:	e7c6      	b.n	800b6b0 <_dtoa_r+0x510>
 800b722:	4650      	mov	r0, sl
 800b724:	4659      	mov	r1, fp
 800b726:	f7f4 ff7f 	bl	8000628 <__aeabi_dmul>
 800b72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b72c:	9d01      	ldr	r5, [sp, #4]
 800b72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b730:	4682      	mov	sl, r0
 800b732:	468b      	mov	fp, r1
 800b734:	4649      	mov	r1, r9
 800b736:	4640      	mov	r0, r8
 800b738:	f7f5 fa26 	bl	8000b88 <__aeabi_d2iz>
 800b73c:	4606      	mov	r6, r0
 800b73e:	f7f4 ff09 	bl	8000554 <__aeabi_i2d>
 800b742:	3630      	adds	r6, #48	; 0x30
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f4 fdb4 	bl	80002b8 <__aeabi_dsub>
 800b750:	f805 6b01 	strb.w	r6, [r5], #1
 800b754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b756:	429d      	cmp	r5, r3
 800b758:	4680      	mov	r8, r0
 800b75a:	4689      	mov	r9, r1
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	d124      	bne.n	800b7ac <_dtoa_r+0x60c>
 800b762:	4b1b      	ldr	r3, [pc, #108]	; (800b7d0 <_dtoa_r+0x630>)
 800b764:	4650      	mov	r0, sl
 800b766:	4659      	mov	r1, fp
 800b768:	f7f4 fda8 	bl	80002bc <__adddf3>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4640      	mov	r0, r8
 800b772:	4649      	mov	r1, r9
 800b774:	f7f5 f9e8 	bl	8000b48 <__aeabi_dcmpgt>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d173      	bne.n	800b864 <_dtoa_r+0x6c4>
 800b77c:	4652      	mov	r2, sl
 800b77e:	465b      	mov	r3, fp
 800b780:	4913      	ldr	r1, [pc, #76]	; (800b7d0 <_dtoa_r+0x630>)
 800b782:	2000      	movs	r0, #0
 800b784:	f7f4 fd98 	bl	80002b8 <__aeabi_dsub>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4640      	mov	r0, r8
 800b78e:	4649      	mov	r1, r9
 800b790:	f7f5 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 800b794:	2800      	cmp	r0, #0
 800b796:	f43f af35 	beq.w	800b604 <_dtoa_r+0x464>
 800b79a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b79c:	1e6b      	subs	r3, r5, #1
 800b79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7a4:	2b30      	cmp	r3, #48	; 0x30
 800b7a6:	d0f8      	beq.n	800b79a <_dtoa_r+0x5fa>
 800b7a8:	9700      	str	r7, [sp, #0]
 800b7aa:	e049      	b.n	800b840 <_dtoa_r+0x6a0>
 800b7ac:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <_dtoa_r+0x624>)
 800b7ae:	f7f4 ff3b 	bl	8000628 <__aeabi_dmul>
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	e7bd      	b.n	800b734 <_dtoa_r+0x594>
 800b7b8:	08010c10 	.word	0x08010c10
 800b7bc:	08010be8 	.word	0x08010be8
 800b7c0:	3ff00000 	.word	0x3ff00000
 800b7c4:	40240000 	.word	0x40240000
 800b7c8:	401c0000 	.word	0x401c0000
 800b7cc:	40140000 	.word	0x40140000
 800b7d0:	3fe00000 	.word	0x3fe00000
 800b7d4:	9d01      	ldr	r5, [sp, #4]
 800b7d6:	4656      	mov	r6, sl
 800b7d8:	465f      	mov	r7, fp
 800b7da:	4642      	mov	r2, r8
 800b7dc:	464b      	mov	r3, r9
 800b7de:	4630      	mov	r0, r6
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	f7f5 f84b 	bl	800087c <__aeabi_ddiv>
 800b7e6:	f7f5 f9cf 	bl	8000b88 <__aeabi_d2iz>
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	f7f4 feb2 	bl	8000554 <__aeabi_i2d>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	f7f4 ff18 	bl	8000628 <__aeabi_dmul>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b804:	f7f4 fd58 	bl	80002b8 <__aeabi_dsub>
 800b808:	f805 6b01 	strb.w	r6, [r5], #1
 800b80c:	9e01      	ldr	r6, [sp, #4]
 800b80e:	9f03      	ldr	r7, [sp, #12]
 800b810:	1bae      	subs	r6, r5, r6
 800b812:	42b7      	cmp	r7, r6
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	d135      	bne.n	800b886 <_dtoa_r+0x6e6>
 800b81a:	f7f4 fd4f 	bl	80002bc <__adddf3>
 800b81e:	4642      	mov	r2, r8
 800b820:	464b      	mov	r3, r9
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	f7f5 f98f 	bl	8000b48 <__aeabi_dcmpgt>
 800b82a:	b9d0      	cbnz	r0, 800b862 <_dtoa_r+0x6c2>
 800b82c:	4642      	mov	r2, r8
 800b82e:	464b      	mov	r3, r9
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f5 f960 	bl	8000af8 <__aeabi_dcmpeq>
 800b838:	b110      	cbz	r0, 800b840 <_dtoa_r+0x6a0>
 800b83a:	f01a 0f01 	tst.w	sl, #1
 800b83e:	d110      	bne.n	800b862 <_dtoa_r+0x6c2>
 800b840:	4620      	mov	r0, r4
 800b842:	ee18 1a10 	vmov	r1, s16
 800b846:	f000 fb09 	bl	800be5c <_Bfree>
 800b84a:	2300      	movs	r3, #0
 800b84c:	9800      	ldr	r0, [sp, #0]
 800b84e:	702b      	strb	r3, [r5, #0]
 800b850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b852:	3001      	adds	r0, #1
 800b854:	6018      	str	r0, [r3, #0]
 800b856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f43f acf1 	beq.w	800b240 <_dtoa_r+0xa0>
 800b85e:	601d      	str	r5, [r3, #0]
 800b860:	e4ee      	b.n	800b240 <_dtoa_r+0xa0>
 800b862:	9f00      	ldr	r7, [sp, #0]
 800b864:	462b      	mov	r3, r5
 800b866:	461d      	mov	r5, r3
 800b868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b86c:	2a39      	cmp	r2, #57	; 0x39
 800b86e:	d106      	bne.n	800b87e <_dtoa_r+0x6de>
 800b870:	9a01      	ldr	r2, [sp, #4]
 800b872:	429a      	cmp	r2, r3
 800b874:	d1f7      	bne.n	800b866 <_dtoa_r+0x6c6>
 800b876:	9901      	ldr	r1, [sp, #4]
 800b878:	2230      	movs	r2, #48	; 0x30
 800b87a:	3701      	adds	r7, #1
 800b87c:	700a      	strb	r2, [r1, #0]
 800b87e:	781a      	ldrb	r2, [r3, #0]
 800b880:	3201      	adds	r2, #1
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	e790      	b.n	800b7a8 <_dtoa_r+0x608>
 800b886:	4ba6      	ldr	r3, [pc, #664]	; (800bb20 <_dtoa_r+0x980>)
 800b888:	2200      	movs	r2, #0
 800b88a:	f7f4 fecd 	bl	8000628 <__aeabi_dmul>
 800b88e:	2200      	movs	r2, #0
 800b890:	2300      	movs	r3, #0
 800b892:	4606      	mov	r6, r0
 800b894:	460f      	mov	r7, r1
 800b896:	f7f5 f92f 	bl	8000af8 <__aeabi_dcmpeq>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d09d      	beq.n	800b7da <_dtoa_r+0x63a>
 800b89e:	e7cf      	b.n	800b840 <_dtoa_r+0x6a0>
 800b8a0:	9a08      	ldr	r2, [sp, #32]
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	f000 80d7 	beq.w	800ba56 <_dtoa_r+0x8b6>
 800b8a8:	9a06      	ldr	r2, [sp, #24]
 800b8aa:	2a01      	cmp	r2, #1
 800b8ac:	f300 80ba 	bgt.w	800ba24 <_dtoa_r+0x884>
 800b8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	f000 80b2 	beq.w	800ba1c <_dtoa_r+0x87c>
 800b8b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8bc:	9e07      	ldr	r6, [sp, #28]
 800b8be:	9d04      	ldr	r5, [sp, #16]
 800b8c0:	9a04      	ldr	r2, [sp, #16]
 800b8c2:	441a      	add	r2, r3
 800b8c4:	9204      	str	r2, [sp, #16]
 800b8c6:	9a05      	ldr	r2, [sp, #20]
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	441a      	add	r2, r3
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	9205      	str	r2, [sp, #20]
 800b8d0:	f000 fb7c 	bl	800bfcc <__i2b>
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	dd0c      	ble.n	800b8f4 <_dtoa_r+0x754>
 800b8da:	9b05      	ldr	r3, [sp, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dd09      	ble.n	800b8f4 <_dtoa_r+0x754>
 800b8e0:	42ab      	cmp	r3, r5
 800b8e2:	9a04      	ldr	r2, [sp, #16]
 800b8e4:	bfa8      	it	ge
 800b8e6:	462b      	movge	r3, r5
 800b8e8:	1ad2      	subs	r2, r2, r3
 800b8ea:	9204      	str	r2, [sp, #16]
 800b8ec:	9a05      	ldr	r2, [sp, #20]
 800b8ee:	1aed      	subs	r5, r5, r3
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	b31b      	cbz	r3, 800b940 <_dtoa_r+0x7a0>
 800b8f8:	9b08      	ldr	r3, [sp, #32]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 80af 	beq.w	800ba5e <_dtoa_r+0x8be>
 800b900:	2e00      	cmp	r6, #0
 800b902:	dd13      	ble.n	800b92c <_dtoa_r+0x78c>
 800b904:	4639      	mov	r1, r7
 800b906:	4632      	mov	r2, r6
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fc1f 	bl	800c14c <__pow5mult>
 800b90e:	ee18 2a10 	vmov	r2, s16
 800b912:	4601      	mov	r1, r0
 800b914:	4607      	mov	r7, r0
 800b916:	4620      	mov	r0, r4
 800b918:	f000 fb6e 	bl	800bff8 <__multiply>
 800b91c:	ee18 1a10 	vmov	r1, s16
 800b920:	4680      	mov	r8, r0
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fa9a 	bl	800be5c <_Bfree>
 800b928:	ee08 8a10 	vmov	s16, r8
 800b92c:	9b07      	ldr	r3, [sp, #28]
 800b92e:	1b9a      	subs	r2, r3, r6
 800b930:	d006      	beq.n	800b940 <_dtoa_r+0x7a0>
 800b932:	ee18 1a10 	vmov	r1, s16
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fc08 	bl	800c14c <__pow5mult>
 800b93c:	ee08 0a10 	vmov	s16, r0
 800b940:	2101      	movs	r1, #1
 800b942:	4620      	mov	r0, r4
 800b944:	f000 fb42 	bl	800bfcc <__i2b>
 800b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	4606      	mov	r6, r0
 800b94e:	f340 8088 	ble.w	800ba62 <_dtoa_r+0x8c2>
 800b952:	461a      	mov	r2, r3
 800b954:	4601      	mov	r1, r0
 800b956:	4620      	mov	r0, r4
 800b958:	f000 fbf8 	bl	800c14c <__pow5mult>
 800b95c:	9b06      	ldr	r3, [sp, #24]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	4606      	mov	r6, r0
 800b962:	f340 8081 	ble.w	800ba68 <_dtoa_r+0x8c8>
 800b966:	f04f 0800 	mov.w	r8, #0
 800b96a:	6933      	ldr	r3, [r6, #16]
 800b96c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b970:	6918      	ldr	r0, [r3, #16]
 800b972:	f000 fadb 	bl	800bf2c <__hi0bits>
 800b976:	f1c0 0020 	rsb	r0, r0, #32
 800b97a:	9b05      	ldr	r3, [sp, #20]
 800b97c:	4418      	add	r0, r3
 800b97e:	f010 001f 	ands.w	r0, r0, #31
 800b982:	f000 8092 	beq.w	800baaa <_dtoa_r+0x90a>
 800b986:	f1c0 0320 	rsb	r3, r0, #32
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	f340 808a 	ble.w	800baa4 <_dtoa_r+0x904>
 800b990:	f1c0 001c 	rsb	r0, r0, #28
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	4403      	add	r3, r0
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	9b05      	ldr	r3, [sp, #20]
 800b99c:	4403      	add	r3, r0
 800b99e:	4405      	add	r5, r0
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	dd07      	ble.n	800b9b8 <_dtoa_r+0x818>
 800b9a8:	ee18 1a10 	vmov	r1, s16
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fc26 	bl	800c200 <__lshift>
 800b9b4:	ee08 0a10 	vmov	s16, r0
 800b9b8:	9b05      	ldr	r3, [sp, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dd05      	ble.n	800b9ca <_dtoa_r+0x82a>
 800b9be:	4631      	mov	r1, r6
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fc1c 	bl	800c200 <__lshift>
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d06e      	beq.n	800baae <_dtoa_r+0x90e>
 800b9d0:	ee18 0a10 	vmov	r0, s16
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	f000 fc83 	bl	800c2e0 <__mcmp>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	da67      	bge.n	800baae <_dtoa_r+0x90e>
 800b9de:	9b00      	ldr	r3, [sp, #0]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 fa57 	bl	800bea0 <__multadd>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	ee08 0a10 	vmov	s16, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 81b1 	beq.w	800bd60 <_dtoa_r+0xbc0>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	4639      	mov	r1, r7
 800ba02:	220a      	movs	r2, #10
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fa4b 	bl	800bea0 <__multadd>
 800ba0a:	9b02      	ldr	r3, [sp, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	4607      	mov	r7, r0
 800ba10:	f300 808e 	bgt.w	800bb30 <_dtoa_r+0x990>
 800ba14:	9b06      	ldr	r3, [sp, #24]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	dc51      	bgt.n	800babe <_dtoa_r+0x91e>
 800ba1a:	e089      	b.n	800bb30 <_dtoa_r+0x990>
 800ba1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba22:	e74b      	b.n	800b8bc <_dtoa_r+0x71c>
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	1e5e      	subs	r6, r3, #1
 800ba28:	9b07      	ldr	r3, [sp, #28]
 800ba2a:	42b3      	cmp	r3, r6
 800ba2c:	bfbf      	itttt	lt
 800ba2e:	9b07      	ldrlt	r3, [sp, #28]
 800ba30:	9607      	strlt	r6, [sp, #28]
 800ba32:	1af2      	sublt	r2, r6, r3
 800ba34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba36:	bfb6      	itet	lt
 800ba38:	189b      	addlt	r3, r3, r2
 800ba3a:	1b9e      	subge	r6, r3, r6
 800ba3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	bfb8      	it	lt
 800ba42:	2600      	movlt	r6, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfb7      	itett	lt
 800ba48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba50:	1a9d      	sublt	r5, r3, r2
 800ba52:	2300      	movlt	r3, #0
 800ba54:	e734      	b.n	800b8c0 <_dtoa_r+0x720>
 800ba56:	9e07      	ldr	r6, [sp, #28]
 800ba58:	9d04      	ldr	r5, [sp, #16]
 800ba5a:	9f08      	ldr	r7, [sp, #32]
 800ba5c:	e73b      	b.n	800b8d6 <_dtoa_r+0x736>
 800ba5e:	9a07      	ldr	r2, [sp, #28]
 800ba60:	e767      	b.n	800b932 <_dtoa_r+0x792>
 800ba62:	9b06      	ldr	r3, [sp, #24]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	dc18      	bgt.n	800ba9a <_dtoa_r+0x8fa>
 800ba68:	f1ba 0f00 	cmp.w	sl, #0
 800ba6c:	d115      	bne.n	800ba9a <_dtoa_r+0x8fa>
 800ba6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba72:	b993      	cbnz	r3, 800ba9a <_dtoa_r+0x8fa>
 800ba74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba78:	0d1b      	lsrs	r3, r3, #20
 800ba7a:	051b      	lsls	r3, r3, #20
 800ba7c:	b183      	cbz	r3, 800baa0 <_dtoa_r+0x900>
 800ba7e:	9b04      	ldr	r3, [sp, #16]
 800ba80:	3301      	adds	r3, #1
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	9b05      	ldr	r3, [sp, #20]
 800ba86:	3301      	adds	r3, #1
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	f04f 0801 	mov.w	r8, #1
 800ba8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f47f af6a 	bne.w	800b96a <_dtoa_r+0x7ca>
 800ba96:	2001      	movs	r0, #1
 800ba98:	e76f      	b.n	800b97a <_dtoa_r+0x7da>
 800ba9a:	f04f 0800 	mov.w	r8, #0
 800ba9e:	e7f6      	b.n	800ba8e <_dtoa_r+0x8ee>
 800baa0:	4698      	mov	r8, r3
 800baa2:	e7f4      	b.n	800ba8e <_dtoa_r+0x8ee>
 800baa4:	f43f af7d 	beq.w	800b9a2 <_dtoa_r+0x802>
 800baa8:	4618      	mov	r0, r3
 800baaa:	301c      	adds	r0, #28
 800baac:	e772      	b.n	800b994 <_dtoa_r+0x7f4>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dc37      	bgt.n	800bb24 <_dtoa_r+0x984>
 800bab4:	9b06      	ldr	r3, [sp, #24]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	dd34      	ble.n	800bb24 <_dtoa_r+0x984>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	9302      	str	r3, [sp, #8]
 800babe:	9b02      	ldr	r3, [sp, #8]
 800bac0:	b96b      	cbnz	r3, 800bade <_dtoa_r+0x93e>
 800bac2:	4631      	mov	r1, r6
 800bac4:	2205      	movs	r2, #5
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 f9ea 	bl	800bea0 <__multadd>
 800bacc:	4601      	mov	r1, r0
 800bace:	4606      	mov	r6, r0
 800bad0:	ee18 0a10 	vmov	r0, s16
 800bad4:	f000 fc04 	bl	800c2e0 <__mcmp>
 800bad8:	2800      	cmp	r0, #0
 800bada:	f73f adbb 	bgt.w	800b654 <_dtoa_r+0x4b4>
 800bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae0:	9d01      	ldr	r5, [sp, #4]
 800bae2:	43db      	mvns	r3, r3
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	f04f 0800 	mov.w	r8, #0
 800baea:	4631      	mov	r1, r6
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f9b5 	bl	800be5c <_Bfree>
 800baf2:	2f00      	cmp	r7, #0
 800baf4:	f43f aea4 	beq.w	800b840 <_dtoa_r+0x6a0>
 800baf8:	f1b8 0f00 	cmp.w	r8, #0
 800bafc:	d005      	beq.n	800bb0a <_dtoa_r+0x96a>
 800bafe:	45b8      	cmp	r8, r7
 800bb00:	d003      	beq.n	800bb0a <_dtoa_r+0x96a>
 800bb02:	4641      	mov	r1, r8
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 f9a9 	bl	800be5c <_Bfree>
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f000 f9a5 	bl	800be5c <_Bfree>
 800bb12:	e695      	b.n	800b840 <_dtoa_r+0x6a0>
 800bb14:	2600      	movs	r6, #0
 800bb16:	4637      	mov	r7, r6
 800bb18:	e7e1      	b.n	800bade <_dtoa_r+0x93e>
 800bb1a:	9700      	str	r7, [sp, #0]
 800bb1c:	4637      	mov	r7, r6
 800bb1e:	e599      	b.n	800b654 <_dtoa_r+0x4b4>
 800bb20:	40240000 	.word	0x40240000
 800bb24:	9b08      	ldr	r3, [sp, #32]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 80ca 	beq.w	800bcc0 <_dtoa_r+0xb20>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	9302      	str	r3, [sp, #8]
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dd05      	ble.n	800bb40 <_dtoa_r+0x9a0>
 800bb34:	4639      	mov	r1, r7
 800bb36:	462a      	mov	r2, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fb61 	bl	800c200 <__lshift>
 800bb3e:	4607      	mov	r7, r0
 800bb40:	f1b8 0f00 	cmp.w	r8, #0
 800bb44:	d05b      	beq.n	800bbfe <_dtoa_r+0xa5e>
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 f947 	bl	800bddc <_Balloc>
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b928      	cbnz	r0, 800bb5e <_dtoa_r+0x9be>
 800bb52:	4b87      	ldr	r3, [pc, #540]	; (800bd70 <_dtoa_r+0xbd0>)
 800bb54:	4602      	mov	r2, r0
 800bb56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb5a:	f7ff bb3b 	b.w	800b1d4 <_dtoa_r+0x34>
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	3202      	adds	r2, #2
 800bb62:	0092      	lsls	r2, r2, #2
 800bb64:	f107 010c 	add.w	r1, r7, #12
 800bb68:	300c      	adds	r0, #12
 800bb6a:	f000 f91d 	bl	800bda8 <memcpy>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4629      	mov	r1, r5
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 fb44 	bl	800c200 <__lshift>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	f103 0901 	add.w	r9, r3, #1
 800bb7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb82:	4413      	add	r3, r2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	f00a 0301 	and.w	r3, sl, #1
 800bb8a:	46b8      	mov	r8, r7
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	4607      	mov	r7, r0
 800bb90:	4631      	mov	r1, r6
 800bb92:	ee18 0a10 	vmov	r0, s16
 800bb96:	f7ff fa75 	bl	800b084 <quorem>
 800bb9a:	4641      	mov	r1, r8
 800bb9c:	9002      	str	r0, [sp, #8]
 800bb9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bba2:	ee18 0a10 	vmov	r0, s16
 800bba6:	f000 fb9b 	bl	800c2e0 <__mcmp>
 800bbaa:	463a      	mov	r2, r7
 800bbac:	9003      	str	r0, [sp, #12]
 800bbae:	4631      	mov	r1, r6
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fbb1 	bl	800c318 <__mdiff>
 800bbb6:	68c2      	ldr	r2, [r0, #12]
 800bbb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	bb02      	cbnz	r2, 800bc02 <_dtoa_r+0xa62>
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	ee18 0a10 	vmov	r0, s16
 800bbc6:	f000 fb8b 	bl	800c2e0 <__mcmp>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4620      	mov	r0, r4
 800bbd0:	9207      	str	r2, [sp, #28]
 800bbd2:	f000 f943 	bl	800be5c <_Bfree>
 800bbd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bbda:	ea43 0102 	orr.w	r1, r3, r2
 800bbde:	9b04      	ldr	r3, [sp, #16]
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	464d      	mov	r5, r9
 800bbe4:	d10f      	bne.n	800bc06 <_dtoa_r+0xa66>
 800bbe6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbea:	d02a      	beq.n	800bc42 <_dtoa_r+0xaa2>
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dd02      	ble.n	800bbf8 <_dtoa_r+0xa58>
 800bbf2:	9b02      	ldr	r3, [sp, #8]
 800bbf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bbf8:	f88b a000 	strb.w	sl, [fp]
 800bbfc:	e775      	b.n	800baea <_dtoa_r+0x94a>
 800bbfe:	4638      	mov	r0, r7
 800bc00:	e7ba      	b.n	800bb78 <_dtoa_r+0x9d8>
 800bc02:	2201      	movs	r2, #1
 800bc04:	e7e2      	b.n	800bbcc <_dtoa_r+0xa2c>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db04      	blt.n	800bc16 <_dtoa_r+0xa76>
 800bc0c:	9906      	ldr	r1, [sp, #24]
 800bc0e:	430b      	orrs	r3, r1
 800bc10:	9904      	ldr	r1, [sp, #16]
 800bc12:	430b      	orrs	r3, r1
 800bc14:	d122      	bne.n	800bc5c <_dtoa_r+0xabc>
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	ddee      	ble.n	800bbf8 <_dtoa_r+0xa58>
 800bc1a:	ee18 1a10 	vmov	r1, s16
 800bc1e:	2201      	movs	r2, #1
 800bc20:	4620      	mov	r0, r4
 800bc22:	f000 faed 	bl	800c200 <__lshift>
 800bc26:	4631      	mov	r1, r6
 800bc28:	ee08 0a10 	vmov	s16, r0
 800bc2c:	f000 fb58 	bl	800c2e0 <__mcmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	dc03      	bgt.n	800bc3c <_dtoa_r+0xa9c>
 800bc34:	d1e0      	bne.n	800bbf8 <_dtoa_r+0xa58>
 800bc36:	f01a 0f01 	tst.w	sl, #1
 800bc3a:	d0dd      	beq.n	800bbf8 <_dtoa_r+0xa58>
 800bc3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc40:	d1d7      	bne.n	800bbf2 <_dtoa_r+0xa52>
 800bc42:	2339      	movs	r3, #57	; 0x39
 800bc44:	f88b 3000 	strb.w	r3, [fp]
 800bc48:	462b      	mov	r3, r5
 800bc4a:	461d      	mov	r5, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc52:	2a39      	cmp	r2, #57	; 0x39
 800bc54:	d071      	beq.n	800bd3a <_dtoa_r+0xb9a>
 800bc56:	3201      	adds	r2, #1
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	e746      	b.n	800baea <_dtoa_r+0x94a>
 800bc5c:	2a00      	cmp	r2, #0
 800bc5e:	dd07      	ble.n	800bc70 <_dtoa_r+0xad0>
 800bc60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc64:	d0ed      	beq.n	800bc42 <_dtoa_r+0xaa2>
 800bc66:	f10a 0301 	add.w	r3, sl, #1
 800bc6a:	f88b 3000 	strb.w	r3, [fp]
 800bc6e:	e73c      	b.n	800baea <_dtoa_r+0x94a>
 800bc70:	9b05      	ldr	r3, [sp, #20]
 800bc72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc76:	4599      	cmp	r9, r3
 800bc78:	d047      	beq.n	800bd0a <_dtoa_r+0xb6a>
 800bc7a:	ee18 1a10 	vmov	r1, s16
 800bc7e:	2300      	movs	r3, #0
 800bc80:	220a      	movs	r2, #10
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f90c 	bl	800bea0 <__multadd>
 800bc88:	45b8      	cmp	r8, r7
 800bc8a:	ee08 0a10 	vmov	s16, r0
 800bc8e:	f04f 0300 	mov.w	r3, #0
 800bc92:	f04f 020a 	mov.w	r2, #10
 800bc96:	4641      	mov	r1, r8
 800bc98:	4620      	mov	r0, r4
 800bc9a:	d106      	bne.n	800bcaa <_dtoa_r+0xb0a>
 800bc9c:	f000 f900 	bl	800bea0 <__multadd>
 800bca0:	4680      	mov	r8, r0
 800bca2:	4607      	mov	r7, r0
 800bca4:	f109 0901 	add.w	r9, r9, #1
 800bca8:	e772      	b.n	800bb90 <_dtoa_r+0x9f0>
 800bcaa:	f000 f8f9 	bl	800bea0 <__multadd>
 800bcae:	4639      	mov	r1, r7
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	220a      	movs	r2, #10
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 f8f2 	bl	800bea0 <__multadd>
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	e7f1      	b.n	800bca4 <_dtoa_r+0xb04>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	9302      	str	r3, [sp, #8]
 800bcc4:	9d01      	ldr	r5, [sp, #4]
 800bcc6:	ee18 0a10 	vmov	r0, s16
 800bcca:	4631      	mov	r1, r6
 800bccc:	f7ff f9da 	bl	800b084 <quorem>
 800bcd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	f805 ab01 	strb.w	sl, [r5], #1
 800bcda:	1aea      	subs	r2, r5, r3
 800bcdc:	9b02      	ldr	r3, [sp, #8]
 800bcde:	4293      	cmp	r3, r2
 800bce0:	dd09      	ble.n	800bcf6 <_dtoa_r+0xb56>
 800bce2:	ee18 1a10 	vmov	r1, s16
 800bce6:	2300      	movs	r3, #0
 800bce8:	220a      	movs	r2, #10
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f8d8 	bl	800bea0 <__multadd>
 800bcf0:	ee08 0a10 	vmov	s16, r0
 800bcf4:	e7e7      	b.n	800bcc6 <_dtoa_r+0xb26>
 800bcf6:	9b02      	ldr	r3, [sp, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	bfc8      	it	gt
 800bcfc:	461d      	movgt	r5, r3
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	bfd8      	it	le
 800bd02:	2501      	movle	r5, #1
 800bd04:	441d      	add	r5, r3
 800bd06:	f04f 0800 	mov.w	r8, #0
 800bd0a:	ee18 1a10 	vmov	r1, s16
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 fa75 	bl	800c200 <__lshift>
 800bd16:	4631      	mov	r1, r6
 800bd18:	ee08 0a10 	vmov	s16, r0
 800bd1c:	f000 fae0 	bl	800c2e0 <__mcmp>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dc91      	bgt.n	800bc48 <_dtoa_r+0xaa8>
 800bd24:	d102      	bne.n	800bd2c <_dtoa_r+0xb8c>
 800bd26:	f01a 0f01 	tst.w	sl, #1
 800bd2a:	d18d      	bne.n	800bc48 <_dtoa_r+0xaa8>
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	461d      	mov	r5, r3
 800bd30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd34:	2a30      	cmp	r2, #48	; 0x30
 800bd36:	d0fa      	beq.n	800bd2e <_dtoa_r+0xb8e>
 800bd38:	e6d7      	b.n	800baea <_dtoa_r+0x94a>
 800bd3a:	9a01      	ldr	r2, [sp, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d184      	bne.n	800bc4a <_dtoa_r+0xaaa>
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	2331      	movs	r3, #49	; 0x31
 800bd48:	7013      	strb	r3, [r2, #0]
 800bd4a:	e6ce      	b.n	800baea <_dtoa_r+0x94a>
 800bd4c:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <_dtoa_r+0xbd4>)
 800bd4e:	f7ff ba95 	b.w	800b27c <_dtoa_r+0xdc>
 800bd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f47f aa6e 	bne.w	800b236 <_dtoa_r+0x96>
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <_dtoa_r+0xbd8>)
 800bd5c:	f7ff ba8e 	b.w	800b27c <_dtoa_r+0xdc>
 800bd60:	9b02      	ldr	r3, [sp, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	dcae      	bgt.n	800bcc4 <_dtoa_r+0xb24>
 800bd66:	9b06      	ldr	r3, [sp, #24]
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	f73f aea8 	bgt.w	800babe <_dtoa_r+0x91e>
 800bd6e:	e7a9      	b.n	800bcc4 <_dtoa_r+0xb24>
 800bd70:	08010b75 	.word	0x08010b75
 800bd74:	08010cf9 	.word	0x08010cf9
 800bd78:	08010af6 	.word	0x08010af6

0800bd7c <_localeconv_r>:
 800bd7c:	4800      	ldr	r0, [pc, #0]	; (800bd80 <_localeconv_r+0x4>)
 800bd7e:	4770      	bx	lr
 800bd80:	20000168 	.word	0x20000168

0800bd84 <_lseek_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	; (800bda4 <_lseek_r+0x20>)
 800bd88:	4604      	mov	r4, r0
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	2200      	movs	r2, #0
 800bd90:	602a      	str	r2, [r5, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f7f7 fe44 	bl	8003a20 <_lseek>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_lseek_r+0x1e>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_lseek_r+0x1e>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	200122c4 	.word	0x200122c4

0800bda8 <memcpy>:
 800bda8:	440a      	add	r2, r1
 800bdaa:	4291      	cmp	r1, r2
 800bdac:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb0:	d100      	bne.n	800bdb4 <memcpy+0xc>
 800bdb2:	4770      	bx	lr
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdbe:	4291      	cmp	r1, r2
 800bdc0:	d1f9      	bne.n	800bdb6 <memcpy+0xe>
 800bdc2:	bd10      	pop	{r4, pc}

0800bdc4 <__malloc_lock>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__malloc_lock+0x8>)
 800bdc6:	f001 bb87 	b.w	800d4d8 <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	200122c8 	.word	0x200122c8

0800bdd0 <__malloc_unlock>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__malloc_unlock+0x8>)
 800bdd2:	f001 bb82 	b.w	800d4da <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	200122c8 	.word	0x200122c8

0800bddc <_Balloc>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bde0:	4604      	mov	r4, r0
 800bde2:	460d      	mov	r5, r1
 800bde4:	b976      	cbnz	r6, 800be04 <_Balloc+0x28>
 800bde6:	2010      	movs	r0, #16
 800bde8:	f7fe fb2e 	bl	800a448 <malloc>
 800bdec:	4602      	mov	r2, r0
 800bdee:	6260      	str	r0, [r4, #36]	; 0x24
 800bdf0:	b920      	cbnz	r0, 800bdfc <_Balloc+0x20>
 800bdf2:	4b18      	ldr	r3, [pc, #96]	; (800be54 <_Balloc+0x78>)
 800bdf4:	4818      	ldr	r0, [pc, #96]	; (800be58 <_Balloc+0x7c>)
 800bdf6:	2166      	movs	r1, #102	; 0x66
 800bdf8:	f001 f986 	bl	800d108 <__assert_func>
 800bdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be00:	6006      	str	r6, [r0, #0]
 800be02:	60c6      	str	r6, [r0, #12]
 800be04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be06:	68f3      	ldr	r3, [r6, #12]
 800be08:	b183      	cbz	r3, 800be2c <_Balloc+0x50>
 800be0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be12:	b9b8      	cbnz	r0, 800be44 <_Balloc+0x68>
 800be14:	2101      	movs	r1, #1
 800be16:	fa01 f605 	lsl.w	r6, r1, r5
 800be1a:	1d72      	adds	r2, r6, #5
 800be1c:	0092      	lsls	r2, r2, #2
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 fb60 	bl	800c4e4 <_calloc_r>
 800be24:	b160      	cbz	r0, 800be40 <_Balloc+0x64>
 800be26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be2a:	e00e      	b.n	800be4a <_Balloc+0x6e>
 800be2c:	2221      	movs	r2, #33	; 0x21
 800be2e:	2104      	movs	r1, #4
 800be30:	4620      	mov	r0, r4
 800be32:	f000 fb57 	bl	800c4e4 <_calloc_r>
 800be36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be38:	60f0      	str	r0, [r6, #12]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e4      	bne.n	800be0a <_Balloc+0x2e>
 800be40:	2000      	movs	r0, #0
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	6802      	ldr	r2, [r0, #0]
 800be46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be4a:	2300      	movs	r3, #0
 800be4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be50:	e7f7      	b.n	800be42 <_Balloc+0x66>
 800be52:	bf00      	nop
 800be54:	08010b03 	.word	0x08010b03
 800be58:	08010b86 	.word	0x08010b86

0800be5c <_Bfree>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be60:	4605      	mov	r5, r0
 800be62:	460c      	mov	r4, r1
 800be64:	b976      	cbnz	r6, 800be84 <_Bfree+0x28>
 800be66:	2010      	movs	r0, #16
 800be68:	f7fe faee 	bl	800a448 <malloc>
 800be6c:	4602      	mov	r2, r0
 800be6e:	6268      	str	r0, [r5, #36]	; 0x24
 800be70:	b920      	cbnz	r0, 800be7c <_Bfree+0x20>
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <_Bfree+0x3c>)
 800be74:	4809      	ldr	r0, [pc, #36]	; (800be9c <_Bfree+0x40>)
 800be76:	218a      	movs	r1, #138	; 0x8a
 800be78:	f001 f946 	bl	800d108 <__assert_func>
 800be7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be80:	6006      	str	r6, [r0, #0]
 800be82:	60c6      	str	r6, [r0, #12]
 800be84:	b13c      	cbz	r4, 800be96 <_Bfree+0x3a>
 800be86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be88:	6862      	ldr	r2, [r4, #4]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be90:	6021      	str	r1, [r4, #0]
 800be92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	08010b03 	.word	0x08010b03
 800be9c:	08010b86 	.word	0x08010b86

0800bea0 <__multadd>:
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	690d      	ldr	r5, [r1, #16]
 800bea6:	4607      	mov	r7, r0
 800bea8:	460c      	mov	r4, r1
 800beaa:	461e      	mov	r6, r3
 800beac:	f101 0c14 	add.w	ip, r1, #20
 800beb0:	2000      	movs	r0, #0
 800beb2:	f8dc 3000 	ldr.w	r3, [ip]
 800beb6:	b299      	uxth	r1, r3
 800beb8:	fb02 6101 	mla	r1, r2, r1, r6
 800bebc:	0c1e      	lsrs	r6, r3, #16
 800bebe:	0c0b      	lsrs	r3, r1, #16
 800bec0:	fb02 3306 	mla	r3, r2, r6, r3
 800bec4:	b289      	uxth	r1, r1
 800bec6:	3001      	adds	r0, #1
 800bec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800becc:	4285      	cmp	r5, r0
 800bece:	f84c 1b04 	str.w	r1, [ip], #4
 800bed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bed6:	dcec      	bgt.n	800beb2 <__multadd+0x12>
 800bed8:	b30e      	cbz	r6, 800bf1e <__multadd+0x7e>
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	42ab      	cmp	r3, r5
 800bede:	dc19      	bgt.n	800bf14 <__multadd+0x74>
 800bee0:	6861      	ldr	r1, [r4, #4]
 800bee2:	4638      	mov	r0, r7
 800bee4:	3101      	adds	r1, #1
 800bee6:	f7ff ff79 	bl	800bddc <_Balloc>
 800beea:	4680      	mov	r8, r0
 800beec:	b928      	cbnz	r0, 800befa <__multadd+0x5a>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <__multadd+0x84>)
 800bef2:	480d      	ldr	r0, [pc, #52]	; (800bf28 <__multadd+0x88>)
 800bef4:	21b5      	movs	r1, #181	; 0xb5
 800bef6:	f001 f907 	bl	800d108 <__assert_func>
 800befa:	6922      	ldr	r2, [r4, #16]
 800befc:	3202      	adds	r2, #2
 800befe:	f104 010c 	add.w	r1, r4, #12
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	300c      	adds	r0, #12
 800bf06:	f7ff ff4f 	bl	800bda8 <memcpy>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f7ff ffa5 	bl	800be5c <_Bfree>
 800bf12:	4644      	mov	r4, r8
 800bf14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf18:	3501      	adds	r5, #1
 800bf1a:	615e      	str	r6, [r3, #20]
 800bf1c:	6125      	str	r5, [r4, #16]
 800bf1e:	4620      	mov	r0, r4
 800bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf24:	08010b75 	.word	0x08010b75
 800bf28:	08010b86 	.word	0x08010b86

0800bf2c <__hi0bits>:
 800bf2c:	0c03      	lsrs	r3, r0, #16
 800bf2e:	041b      	lsls	r3, r3, #16
 800bf30:	b9d3      	cbnz	r3, 800bf68 <__hi0bits+0x3c>
 800bf32:	0400      	lsls	r0, r0, #16
 800bf34:	2310      	movs	r3, #16
 800bf36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf3a:	bf04      	itt	eq
 800bf3c:	0200      	lsleq	r0, r0, #8
 800bf3e:	3308      	addeq	r3, #8
 800bf40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf44:	bf04      	itt	eq
 800bf46:	0100      	lsleq	r0, r0, #4
 800bf48:	3304      	addeq	r3, #4
 800bf4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf4e:	bf04      	itt	eq
 800bf50:	0080      	lsleq	r0, r0, #2
 800bf52:	3302      	addeq	r3, #2
 800bf54:	2800      	cmp	r0, #0
 800bf56:	db05      	blt.n	800bf64 <__hi0bits+0x38>
 800bf58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf5c:	f103 0301 	add.w	r3, r3, #1
 800bf60:	bf08      	it	eq
 800bf62:	2320      	moveq	r3, #32
 800bf64:	4618      	mov	r0, r3
 800bf66:	4770      	bx	lr
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e7e4      	b.n	800bf36 <__hi0bits+0xa>

0800bf6c <__lo0bits>:
 800bf6c:	6803      	ldr	r3, [r0, #0]
 800bf6e:	f013 0207 	ands.w	r2, r3, #7
 800bf72:	4601      	mov	r1, r0
 800bf74:	d00b      	beq.n	800bf8e <__lo0bits+0x22>
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d423      	bmi.n	800bfc2 <__lo0bits+0x56>
 800bf7a:	0798      	lsls	r0, r3, #30
 800bf7c:	bf49      	itett	mi
 800bf7e:	085b      	lsrmi	r3, r3, #1
 800bf80:	089b      	lsrpl	r3, r3, #2
 800bf82:	2001      	movmi	r0, #1
 800bf84:	600b      	strmi	r3, [r1, #0]
 800bf86:	bf5c      	itt	pl
 800bf88:	600b      	strpl	r3, [r1, #0]
 800bf8a:	2002      	movpl	r0, #2
 800bf8c:	4770      	bx	lr
 800bf8e:	b298      	uxth	r0, r3
 800bf90:	b9a8      	cbnz	r0, 800bfbe <__lo0bits+0x52>
 800bf92:	0c1b      	lsrs	r3, r3, #16
 800bf94:	2010      	movs	r0, #16
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	b90a      	cbnz	r2, 800bf9e <__lo0bits+0x32>
 800bf9a:	3008      	adds	r0, #8
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	071a      	lsls	r2, r3, #28
 800bfa0:	bf04      	itt	eq
 800bfa2:	091b      	lsreq	r3, r3, #4
 800bfa4:	3004      	addeq	r0, #4
 800bfa6:	079a      	lsls	r2, r3, #30
 800bfa8:	bf04      	itt	eq
 800bfaa:	089b      	lsreq	r3, r3, #2
 800bfac:	3002      	addeq	r0, #2
 800bfae:	07da      	lsls	r2, r3, #31
 800bfb0:	d403      	bmi.n	800bfba <__lo0bits+0x4e>
 800bfb2:	085b      	lsrs	r3, r3, #1
 800bfb4:	f100 0001 	add.w	r0, r0, #1
 800bfb8:	d005      	beq.n	800bfc6 <__lo0bits+0x5a>
 800bfba:	600b      	str	r3, [r1, #0]
 800bfbc:	4770      	bx	lr
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	e7e9      	b.n	800bf96 <__lo0bits+0x2a>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	4770      	bx	lr
 800bfc6:	2020      	movs	r0, #32
 800bfc8:	4770      	bx	lr
	...

0800bfcc <__i2b>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	460c      	mov	r4, r1
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	f7ff ff03 	bl	800bddc <_Balloc>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	b928      	cbnz	r0, 800bfe6 <__i2b+0x1a>
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <__i2b+0x24>)
 800bfdc:	4805      	ldr	r0, [pc, #20]	; (800bff4 <__i2b+0x28>)
 800bfde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bfe2:	f001 f891 	bl	800d108 <__assert_func>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	6144      	str	r4, [r0, #20]
 800bfea:	6103      	str	r3, [r0, #16]
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	bf00      	nop
 800bff0:	08010b75 	.word	0x08010b75
 800bff4:	08010b86 	.word	0x08010b86

0800bff8 <__multiply>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	4691      	mov	r9, r2
 800bffe:	690a      	ldr	r2, [r1, #16]
 800c000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c004:	429a      	cmp	r2, r3
 800c006:	bfb8      	it	lt
 800c008:	460b      	movlt	r3, r1
 800c00a:	460c      	mov	r4, r1
 800c00c:	bfbc      	itt	lt
 800c00e:	464c      	movlt	r4, r9
 800c010:	4699      	movlt	r9, r3
 800c012:	6927      	ldr	r7, [r4, #16]
 800c014:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	6861      	ldr	r1, [r4, #4]
 800c01c:	eb07 060a 	add.w	r6, r7, sl
 800c020:	42b3      	cmp	r3, r6
 800c022:	b085      	sub	sp, #20
 800c024:	bfb8      	it	lt
 800c026:	3101      	addlt	r1, #1
 800c028:	f7ff fed8 	bl	800bddc <_Balloc>
 800c02c:	b930      	cbnz	r0, 800c03c <__multiply+0x44>
 800c02e:	4602      	mov	r2, r0
 800c030:	4b44      	ldr	r3, [pc, #272]	; (800c144 <__multiply+0x14c>)
 800c032:	4845      	ldr	r0, [pc, #276]	; (800c148 <__multiply+0x150>)
 800c034:	f240 115d 	movw	r1, #349	; 0x15d
 800c038:	f001 f866 	bl	800d108 <__assert_func>
 800c03c:	f100 0514 	add.w	r5, r0, #20
 800c040:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c044:	462b      	mov	r3, r5
 800c046:	2200      	movs	r2, #0
 800c048:	4543      	cmp	r3, r8
 800c04a:	d321      	bcc.n	800c090 <__multiply+0x98>
 800c04c:	f104 0314 	add.w	r3, r4, #20
 800c050:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c054:	f109 0314 	add.w	r3, r9, #20
 800c058:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c05c:	9202      	str	r2, [sp, #8]
 800c05e:	1b3a      	subs	r2, r7, r4
 800c060:	3a15      	subs	r2, #21
 800c062:	f022 0203 	bic.w	r2, r2, #3
 800c066:	3204      	adds	r2, #4
 800c068:	f104 0115 	add.w	r1, r4, #21
 800c06c:	428f      	cmp	r7, r1
 800c06e:	bf38      	it	cc
 800c070:	2204      	movcc	r2, #4
 800c072:	9201      	str	r2, [sp, #4]
 800c074:	9a02      	ldr	r2, [sp, #8]
 800c076:	9303      	str	r3, [sp, #12]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d80c      	bhi.n	800c096 <__multiply+0x9e>
 800c07c:	2e00      	cmp	r6, #0
 800c07e:	dd03      	ble.n	800c088 <__multiply+0x90>
 800c080:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c084:	2b00      	cmp	r3, #0
 800c086:	d05a      	beq.n	800c13e <__multiply+0x146>
 800c088:	6106      	str	r6, [r0, #16]
 800c08a:	b005      	add	sp, #20
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	f843 2b04 	str.w	r2, [r3], #4
 800c094:	e7d8      	b.n	800c048 <__multiply+0x50>
 800c096:	f8b3 a000 	ldrh.w	sl, [r3]
 800c09a:	f1ba 0f00 	cmp.w	sl, #0
 800c09e:	d024      	beq.n	800c0ea <__multiply+0xf2>
 800c0a0:	f104 0e14 	add.w	lr, r4, #20
 800c0a4:	46a9      	mov	r9, r5
 800c0a6:	f04f 0c00 	mov.w	ip, #0
 800c0aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0ae:	f8d9 1000 	ldr.w	r1, [r9]
 800c0b2:	fa1f fb82 	uxth.w	fp, r2
 800c0b6:	b289      	uxth	r1, r1
 800c0b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c0c4:	4461      	add	r1, ip
 800c0c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0d2:	b289      	uxth	r1, r1
 800c0d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0d8:	4577      	cmp	r7, lr
 800c0da:	f849 1b04 	str.w	r1, [r9], #4
 800c0de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0e2:	d8e2      	bhi.n	800c0aa <__multiply+0xb2>
 800c0e4:	9a01      	ldr	r2, [sp, #4]
 800c0e6:	f845 c002 	str.w	ip, [r5, r2]
 800c0ea:	9a03      	ldr	r2, [sp, #12]
 800c0ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	f1b9 0f00 	cmp.w	r9, #0
 800c0f6:	d020      	beq.n	800c13a <__multiply+0x142>
 800c0f8:	6829      	ldr	r1, [r5, #0]
 800c0fa:	f104 0c14 	add.w	ip, r4, #20
 800c0fe:	46ae      	mov	lr, r5
 800c100:	f04f 0a00 	mov.w	sl, #0
 800c104:	f8bc b000 	ldrh.w	fp, [ip]
 800c108:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c10c:	fb09 220b 	mla	r2, r9, fp, r2
 800c110:	4492      	add	sl, r2
 800c112:	b289      	uxth	r1, r1
 800c114:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c118:	f84e 1b04 	str.w	r1, [lr], #4
 800c11c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c120:	f8be 1000 	ldrh.w	r1, [lr]
 800c124:	0c12      	lsrs	r2, r2, #16
 800c126:	fb09 1102 	mla	r1, r9, r2, r1
 800c12a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c12e:	4567      	cmp	r7, ip
 800c130:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c134:	d8e6      	bhi.n	800c104 <__multiply+0x10c>
 800c136:	9a01      	ldr	r2, [sp, #4]
 800c138:	50a9      	str	r1, [r5, r2]
 800c13a:	3504      	adds	r5, #4
 800c13c:	e79a      	b.n	800c074 <__multiply+0x7c>
 800c13e:	3e01      	subs	r6, #1
 800c140:	e79c      	b.n	800c07c <__multiply+0x84>
 800c142:	bf00      	nop
 800c144:	08010b75 	.word	0x08010b75
 800c148:	08010b86 	.word	0x08010b86

0800c14c <__pow5mult>:
 800c14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c150:	4615      	mov	r5, r2
 800c152:	f012 0203 	ands.w	r2, r2, #3
 800c156:	4606      	mov	r6, r0
 800c158:	460f      	mov	r7, r1
 800c15a:	d007      	beq.n	800c16c <__pow5mult+0x20>
 800c15c:	4c25      	ldr	r4, [pc, #148]	; (800c1f4 <__pow5mult+0xa8>)
 800c15e:	3a01      	subs	r2, #1
 800c160:	2300      	movs	r3, #0
 800c162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c166:	f7ff fe9b 	bl	800bea0 <__multadd>
 800c16a:	4607      	mov	r7, r0
 800c16c:	10ad      	asrs	r5, r5, #2
 800c16e:	d03d      	beq.n	800c1ec <__pow5mult+0xa0>
 800c170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c172:	b97c      	cbnz	r4, 800c194 <__pow5mult+0x48>
 800c174:	2010      	movs	r0, #16
 800c176:	f7fe f967 	bl	800a448 <malloc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	6270      	str	r0, [r6, #36]	; 0x24
 800c17e:	b928      	cbnz	r0, 800c18c <__pow5mult+0x40>
 800c180:	4b1d      	ldr	r3, [pc, #116]	; (800c1f8 <__pow5mult+0xac>)
 800c182:	481e      	ldr	r0, [pc, #120]	; (800c1fc <__pow5mult+0xb0>)
 800c184:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c188:	f000 ffbe 	bl	800d108 <__assert_func>
 800c18c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c190:	6004      	str	r4, [r0, #0]
 800c192:	60c4      	str	r4, [r0, #12]
 800c194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c19c:	b94c      	cbnz	r4, 800c1b2 <__pow5mult+0x66>
 800c19e:	f240 2171 	movw	r1, #625	; 0x271
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7ff ff12 	bl	800bfcc <__i2b>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	6003      	str	r3, [r0, #0]
 800c1b2:	f04f 0900 	mov.w	r9, #0
 800c1b6:	07eb      	lsls	r3, r5, #31
 800c1b8:	d50a      	bpl.n	800c1d0 <__pow5mult+0x84>
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	4622      	mov	r2, r4
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7ff ff1a 	bl	800bff8 <__multiply>
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff fe47 	bl	800be5c <_Bfree>
 800c1ce:	4647      	mov	r7, r8
 800c1d0:	106d      	asrs	r5, r5, #1
 800c1d2:	d00b      	beq.n	800c1ec <__pow5mult+0xa0>
 800c1d4:	6820      	ldr	r0, [r4, #0]
 800c1d6:	b938      	cbnz	r0, 800c1e8 <__pow5mult+0x9c>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7ff ff0b 	bl	800bff8 <__multiply>
 800c1e2:	6020      	str	r0, [r4, #0]
 800c1e4:	f8c0 9000 	str.w	r9, [r0]
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	e7e4      	b.n	800c1b6 <__pow5mult+0x6a>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	bf00      	nop
 800c1f4:	08010cd8 	.word	0x08010cd8
 800c1f8:	08010b03 	.word	0x08010b03
 800c1fc:	08010b86 	.word	0x08010b86

0800c200 <__lshift>:
 800c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	460c      	mov	r4, r1
 800c206:	6849      	ldr	r1, [r1, #4]
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	4607      	mov	r7, r0
 800c212:	4691      	mov	r9, r2
 800c214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c218:	f108 0601 	add.w	r6, r8, #1
 800c21c:	42b3      	cmp	r3, r6
 800c21e:	db0b      	blt.n	800c238 <__lshift+0x38>
 800c220:	4638      	mov	r0, r7
 800c222:	f7ff fddb 	bl	800bddc <_Balloc>
 800c226:	4605      	mov	r5, r0
 800c228:	b948      	cbnz	r0, 800c23e <__lshift+0x3e>
 800c22a:	4602      	mov	r2, r0
 800c22c:	4b2a      	ldr	r3, [pc, #168]	; (800c2d8 <__lshift+0xd8>)
 800c22e:	482b      	ldr	r0, [pc, #172]	; (800c2dc <__lshift+0xdc>)
 800c230:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c234:	f000 ff68 	bl	800d108 <__assert_func>
 800c238:	3101      	adds	r1, #1
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	e7ee      	b.n	800c21c <__lshift+0x1c>
 800c23e:	2300      	movs	r3, #0
 800c240:	f100 0114 	add.w	r1, r0, #20
 800c244:	f100 0210 	add.w	r2, r0, #16
 800c248:	4618      	mov	r0, r3
 800c24a:	4553      	cmp	r3, sl
 800c24c:	db37      	blt.n	800c2be <__lshift+0xbe>
 800c24e:	6920      	ldr	r0, [r4, #16]
 800c250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c254:	f104 0314 	add.w	r3, r4, #20
 800c258:	f019 091f 	ands.w	r9, r9, #31
 800c25c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c264:	d02f      	beq.n	800c2c6 <__lshift+0xc6>
 800c266:	f1c9 0e20 	rsb	lr, r9, #32
 800c26a:	468a      	mov	sl, r1
 800c26c:	f04f 0c00 	mov.w	ip, #0
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	fa02 f209 	lsl.w	r2, r2, r9
 800c276:	ea42 020c 	orr.w	r2, r2, ip
 800c27a:	f84a 2b04 	str.w	r2, [sl], #4
 800c27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c282:	4298      	cmp	r0, r3
 800c284:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c288:	d8f2      	bhi.n	800c270 <__lshift+0x70>
 800c28a:	1b03      	subs	r3, r0, r4
 800c28c:	3b15      	subs	r3, #21
 800c28e:	f023 0303 	bic.w	r3, r3, #3
 800c292:	3304      	adds	r3, #4
 800c294:	f104 0215 	add.w	r2, r4, #21
 800c298:	4290      	cmp	r0, r2
 800c29a:	bf38      	it	cc
 800c29c:	2304      	movcc	r3, #4
 800c29e:	f841 c003 	str.w	ip, [r1, r3]
 800c2a2:	f1bc 0f00 	cmp.w	ip, #0
 800c2a6:	d001      	beq.n	800c2ac <__lshift+0xac>
 800c2a8:	f108 0602 	add.w	r6, r8, #2
 800c2ac:	3e01      	subs	r6, #1
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	612e      	str	r6, [r5, #16]
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	f7ff fdd2 	bl	800be5c <_Bfree>
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	e7c1      	b.n	800c24a <__lshift+0x4a>
 800c2c6:	3904      	subs	r1, #4
 800c2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2d0:	4298      	cmp	r0, r3
 800c2d2:	d8f9      	bhi.n	800c2c8 <__lshift+0xc8>
 800c2d4:	e7ea      	b.n	800c2ac <__lshift+0xac>
 800c2d6:	bf00      	nop
 800c2d8:	08010b75 	.word	0x08010b75
 800c2dc:	08010b86 	.word	0x08010b86

0800c2e0 <__mcmp>:
 800c2e0:	b530      	push	{r4, r5, lr}
 800c2e2:	6902      	ldr	r2, [r0, #16]
 800c2e4:	690c      	ldr	r4, [r1, #16]
 800c2e6:	1b12      	subs	r2, r2, r4
 800c2e8:	d10e      	bne.n	800c308 <__mcmp+0x28>
 800c2ea:	f100 0314 	add.w	r3, r0, #20
 800c2ee:	3114      	adds	r1, #20
 800c2f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c300:	42a5      	cmp	r5, r4
 800c302:	d003      	beq.n	800c30c <__mcmp+0x2c>
 800c304:	d305      	bcc.n	800c312 <__mcmp+0x32>
 800c306:	2201      	movs	r2, #1
 800c308:	4610      	mov	r0, r2
 800c30a:	bd30      	pop	{r4, r5, pc}
 800c30c:	4283      	cmp	r3, r0
 800c30e:	d3f3      	bcc.n	800c2f8 <__mcmp+0x18>
 800c310:	e7fa      	b.n	800c308 <__mcmp+0x28>
 800c312:	f04f 32ff 	mov.w	r2, #4294967295
 800c316:	e7f7      	b.n	800c308 <__mcmp+0x28>

0800c318 <__mdiff>:
 800c318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	460c      	mov	r4, r1
 800c31e:	4606      	mov	r6, r0
 800c320:	4611      	mov	r1, r2
 800c322:	4620      	mov	r0, r4
 800c324:	4690      	mov	r8, r2
 800c326:	f7ff ffdb 	bl	800c2e0 <__mcmp>
 800c32a:	1e05      	subs	r5, r0, #0
 800c32c:	d110      	bne.n	800c350 <__mdiff+0x38>
 800c32e:	4629      	mov	r1, r5
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff fd53 	bl	800bddc <_Balloc>
 800c336:	b930      	cbnz	r0, 800c346 <__mdiff+0x2e>
 800c338:	4b3a      	ldr	r3, [pc, #232]	; (800c424 <__mdiff+0x10c>)
 800c33a:	4602      	mov	r2, r0
 800c33c:	f240 2132 	movw	r1, #562	; 0x232
 800c340:	4839      	ldr	r0, [pc, #228]	; (800c428 <__mdiff+0x110>)
 800c342:	f000 fee1 	bl	800d108 <__assert_func>
 800c346:	2301      	movs	r3, #1
 800c348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c34c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c350:	bfa4      	itt	ge
 800c352:	4643      	movge	r3, r8
 800c354:	46a0      	movge	r8, r4
 800c356:	4630      	mov	r0, r6
 800c358:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c35c:	bfa6      	itte	ge
 800c35e:	461c      	movge	r4, r3
 800c360:	2500      	movge	r5, #0
 800c362:	2501      	movlt	r5, #1
 800c364:	f7ff fd3a 	bl	800bddc <_Balloc>
 800c368:	b920      	cbnz	r0, 800c374 <__mdiff+0x5c>
 800c36a:	4b2e      	ldr	r3, [pc, #184]	; (800c424 <__mdiff+0x10c>)
 800c36c:	4602      	mov	r2, r0
 800c36e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c372:	e7e5      	b.n	800c340 <__mdiff+0x28>
 800c374:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c378:	6926      	ldr	r6, [r4, #16]
 800c37a:	60c5      	str	r5, [r0, #12]
 800c37c:	f104 0914 	add.w	r9, r4, #20
 800c380:	f108 0514 	add.w	r5, r8, #20
 800c384:	f100 0e14 	add.w	lr, r0, #20
 800c388:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c38c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c390:	f108 0210 	add.w	r2, r8, #16
 800c394:	46f2      	mov	sl, lr
 800c396:	2100      	movs	r1, #0
 800c398:	f859 3b04 	ldr.w	r3, [r9], #4
 800c39c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3a0:	fa1f f883 	uxth.w	r8, r3
 800c3a4:	fa11 f18b 	uxtah	r1, r1, fp
 800c3a8:	0c1b      	lsrs	r3, r3, #16
 800c3aa:	eba1 0808 	sub.w	r8, r1, r8
 800c3ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3b6:	fa1f f888 	uxth.w	r8, r8
 800c3ba:	1419      	asrs	r1, r3, #16
 800c3bc:	454e      	cmp	r6, r9
 800c3be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3c2:	f84a 3b04 	str.w	r3, [sl], #4
 800c3c6:	d8e7      	bhi.n	800c398 <__mdiff+0x80>
 800c3c8:	1b33      	subs	r3, r6, r4
 800c3ca:	3b15      	subs	r3, #21
 800c3cc:	f023 0303 	bic.w	r3, r3, #3
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	3415      	adds	r4, #21
 800c3d4:	42a6      	cmp	r6, r4
 800c3d6:	bf38      	it	cc
 800c3d8:	2304      	movcc	r3, #4
 800c3da:	441d      	add	r5, r3
 800c3dc:	4473      	add	r3, lr
 800c3de:	469e      	mov	lr, r3
 800c3e0:	462e      	mov	r6, r5
 800c3e2:	4566      	cmp	r6, ip
 800c3e4:	d30e      	bcc.n	800c404 <__mdiff+0xec>
 800c3e6:	f10c 0203 	add.w	r2, ip, #3
 800c3ea:	1b52      	subs	r2, r2, r5
 800c3ec:	f022 0203 	bic.w	r2, r2, #3
 800c3f0:	3d03      	subs	r5, #3
 800c3f2:	45ac      	cmp	ip, r5
 800c3f4:	bf38      	it	cc
 800c3f6:	2200      	movcc	r2, #0
 800c3f8:	441a      	add	r2, r3
 800c3fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c3fe:	b17b      	cbz	r3, 800c420 <__mdiff+0x108>
 800c400:	6107      	str	r7, [r0, #16]
 800c402:	e7a3      	b.n	800c34c <__mdiff+0x34>
 800c404:	f856 8b04 	ldr.w	r8, [r6], #4
 800c408:	fa11 f288 	uxtah	r2, r1, r8
 800c40c:	1414      	asrs	r4, r2, #16
 800c40e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c412:	b292      	uxth	r2, r2
 800c414:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c418:	f84e 2b04 	str.w	r2, [lr], #4
 800c41c:	1421      	asrs	r1, r4, #16
 800c41e:	e7e0      	b.n	800c3e2 <__mdiff+0xca>
 800c420:	3f01      	subs	r7, #1
 800c422:	e7ea      	b.n	800c3fa <__mdiff+0xe2>
 800c424:	08010b75 	.word	0x08010b75
 800c428:	08010b86 	.word	0x08010b86

0800c42c <__d2b>:
 800c42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c430:	4689      	mov	r9, r1
 800c432:	2101      	movs	r1, #1
 800c434:	ec57 6b10 	vmov	r6, r7, d0
 800c438:	4690      	mov	r8, r2
 800c43a:	f7ff fccf 	bl	800bddc <_Balloc>
 800c43e:	4604      	mov	r4, r0
 800c440:	b930      	cbnz	r0, 800c450 <__d2b+0x24>
 800c442:	4602      	mov	r2, r0
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <__d2b+0xb0>)
 800c446:	4826      	ldr	r0, [pc, #152]	; (800c4e0 <__d2b+0xb4>)
 800c448:	f240 310a 	movw	r1, #778	; 0x30a
 800c44c:	f000 fe5c 	bl	800d108 <__assert_func>
 800c450:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c454:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c458:	bb35      	cbnz	r5, 800c4a8 <__d2b+0x7c>
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	d028      	beq.n	800c4b2 <__d2b+0x86>
 800c460:	4668      	mov	r0, sp
 800c462:	9600      	str	r6, [sp, #0]
 800c464:	f7ff fd82 	bl	800bf6c <__lo0bits>
 800c468:	9900      	ldr	r1, [sp, #0]
 800c46a:	b300      	cbz	r0, 800c4ae <__d2b+0x82>
 800c46c:	9a01      	ldr	r2, [sp, #4]
 800c46e:	f1c0 0320 	rsb	r3, r0, #32
 800c472:	fa02 f303 	lsl.w	r3, r2, r3
 800c476:	430b      	orrs	r3, r1
 800c478:	40c2      	lsrs	r2, r0
 800c47a:	6163      	str	r3, [r4, #20]
 800c47c:	9201      	str	r2, [sp, #4]
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	61a3      	str	r3, [r4, #24]
 800c482:	2b00      	cmp	r3, #0
 800c484:	bf14      	ite	ne
 800c486:	2202      	movne	r2, #2
 800c488:	2201      	moveq	r2, #1
 800c48a:	6122      	str	r2, [r4, #16]
 800c48c:	b1d5      	cbz	r5, 800c4c4 <__d2b+0x98>
 800c48e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c492:	4405      	add	r5, r0
 800c494:	f8c9 5000 	str.w	r5, [r9]
 800c498:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c49c:	f8c8 0000 	str.w	r0, [r8]
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4ac:	e7d5      	b.n	800c45a <__d2b+0x2e>
 800c4ae:	6161      	str	r1, [r4, #20]
 800c4b0:	e7e5      	b.n	800c47e <__d2b+0x52>
 800c4b2:	a801      	add	r0, sp, #4
 800c4b4:	f7ff fd5a 	bl	800bf6c <__lo0bits>
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	6163      	str	r3, [r4, #20]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	6122      	str	r2, [r4, #16]
 800c4c0:	3020      	adds	r0, #32
 800c4c2:	e7e3      	b.n	800c48c <__d2b+0x60>
 800c4c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4cc:	f8c9 0000 	str.w	r0, [r9]
 800c4d0:	6918      	ldr	r0, [r3, #16]
 800c4d2:	f7ff fd2b 	bl	800bf2c <__hi0bits>
 800c4d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4da:	e7df      	b.n	800c49c <__d2b+0x70>
 800c4dc:	08010b75 	.word	0x08010b75
 800c4e0:	08010b86 	.word	0x08010b86

0800c4e4 <_calloc_r>:
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e6:	fba1 2402 	umull	r2, r4, r1, r2
 800c4ea:	b94c      	cbnz	r4, 800c500 <_calloc_r+0x1c>
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	9201      	str	r2, [sp, #4]
 800c4f0:	f7fe f826 	bl	800a540 <_malloc_r>
 800c4f4:	9a01      	ldr	r2, [sp, #4]
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	b930      	cbnz	r0, 800c508 <_calloc_r+0x24>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	b003      	add	sp, #12
 800c4fe:	bd30      	pop	{r4, r5, pc}
 800c500:	220c      	movs	r2, #12
 800c502:	6002      	str	r2, [r0, #0]
 800c504:	2500      	movs	r5, #0
 800c506:	e7f8      	b.n	800c4fa <_calloc_r+0x16>
 800c508:	4621      	mov	r1, r4
 800c50a:	f7fd ffa5 	bl	800a458 <memset>
 800c50e:	e7f4      	b.n	800c4fa <_calloc_r+0x16>

0800c510 <__ssputs_r>:
 800c510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	688e      	ldr	r6, [r1, #8]
 800c516:	429e      	cmp	r6, r3
 800c518:	4682      	mov	sl, r0
 800c51a:	460c      	mov	r4, r1
 800c51c:	4690      	mov	r8, r2
 800c51e:	461f      	mov	r7, r3
 800c520:	d838      	bhi.n	800c594 <__ssputs_r+0x84>
 800c522:	898a      	ldrh	r2, [r1, #12]
 800c524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c528:	d032      	beq.n	800c590 <__ssputs_r+0x80>
 800c52a:	6825      	ldr	r5, [r4, #0]
 800c52c:	6909      	ldr	r1, [r1, #16]
 800c52e:	eba5 0901 	sub.w	r9, r5, r1
 800c532:	6965      	ldr	r5, [r4, #20]
 800c534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c53c:	3301      	adds	r3, #1
 800c53e:	444b      	add	r3, r9
 800c540:	106d      	asrs	r5, r5, #1
 800c542:	429d      	cmp	r5, r3
 800c544:	bf38      	it	cc
 800c546:	461d      	movcc	r5, r3
 800c548:	0553      	lsls	r3, r2, #21
 800c54a:	d531      	bpl.n	800c5b0 <__ssputs_r+0xa0>
 800c54c:	4629      	mov	r1, r5
 800c54e:	f7fd fff7 	bl	800a540 <_malloc_r>
 800c552:	4606      	mov	r6, r0
 800c554:	b950      	cbnz	r0, 800c56c <__ssputs_r+0x5c>
 800c556:	230c      	movs	r3, #12
 800c558:	f8ca 3000 	str.w	r3, [sl]
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56c:	6921      	ldr	r1, [r4, #16]
 800c56e:	464a      	mov	r2, r9
 800c570:	f7ff fc1a 	bl	800bda8 <memcpy>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	6126      	str	r6, [r4, #16]
 800c582:	6165      	str	r5, [r4, #20]
 800c584:	444e      	add	r6, r9
 800c586:	eba5 0509 	sub.w	r5, r5, r9
 800c58a:	6026      	str	r6, [r4, #0]
 800c58c:	60a5      	str	r5, [r4, #8]
 800c58e:	463e      	mov	r6, r7
 800c590:	42be      	cmp	r6, r7
 800c592:	d900      	bls.n	800c596 <__ssputs_r+0x86>
 800c594:	463e      	mov	r6, r7
 800c596:	6820      	ldr	r0, [r4, #0]
 800c598:	4632      	mov	r2, r6
 800c59a:	4641      	mov	r1, r8
 800c59c:	f000 ffb0 	bl	800d500 <memmove>
 800c5a0:	68a3      	ldr	r3, [r4, #8]
 800c5a2:	1b9b      	subs	r3, r3, r6
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	4433      	add	r3, r6
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e7db      	b.n	800c568 <__ssputs_r+0x58>
 800c5b0:	462a      	mov	r2, r5
 800c5b2:	f000 ffbf 	bl	800d534 <_realloc_r>
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1e1      	bne.n	800c580 <__ssputs_r+0x70>
 800c5bc:	6921      	ldr	r1, [r4, #16]
 800c5be:	4650      	mov	r0, sl
 800c5c0:	f7fd ff52 	bl	800a468 <_free_r>
 800c5c4:	e7c7      	b.n	800c556 <__ssputs_r+0x46>
	...

0800c5c8 <_svfiprintf_r>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	4698      	mov	r8, r3
 800c5ce:	898b      	ldrh	r3, [r1, #12]
 800c5d0:	061b      	lsls	r3, r3, #24
 800c5d2:	b09d      	sub	sp, #116	; 0x74
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	4614      	mov	r4, r2
 800c5da:	d50e      	bpl.n	800c5fa <_svfiprintf_r+0x32>
 800c5dc:	690b      	ldr	r3, [r1, #16]
 800c5de:	b963      	cbnz	r3, 800c5fa <_svfiprintf_r+0x32>
 800c5e0:	2140      	movs	r1, #64	; 0x40
 800c5e2:	f7fd ffad 	bl	800a540 <_malloc_r>
 800c5e6:	6028      	str	r0, [r5, #0]
 800c5e8:	6128      	str	r0, [r5, #16]
 800c5ea:	b920      	cbnz	r0, 800c5f6 <_svfiprintf_r+0x2e>
 800c5ec:	230c      	movs	r3, #12
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f4:	e0d1      	b.n	800c79a <_svfiprintf_r+0x1d2>
 800c5f6:	2340      	movs	r3, #64	; 0x40
 800c5f8:	616b      	str	r3, [r5, #20]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fe:	2320      	movs	r3, #32
 800c600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c604:	f8cd 800c 	str.w	r8, [sp, #12]
 800c608:	2330      	movs	r3, #48	; 0x30
 800c60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7b4 <_svfiprintf_r+0x1ec>
 800c60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c612:	f04f 0901 	mov.w	r9, #1
 800c616:	4623      	mov	r3, r4
 800c618:	469a      	mov	sl, r3
 800c61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c61e:	b10a      	cbz	r2, 800c624 <_svfiprintf_r+0x5c>
 800c620:	2a25      	cmp	r2, #37	; 0x25
 800c622:	d1f9      	bne.n	800c618 <_svfiprintf_r+0x50>
 800c624:	ebba 0b04 	subs.w	fp, sl, r4
 800c628:	d00b      	beq.n	800c642 <_svfiprintf_r+0x7a>
 800c62a:	465b      	mov	r3, fp
 800c62c:	4622      	mov	r2, r4
 800c62e:	4629      	mov	r1, r5
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ff6d 	bl	800c510 <__ssputs_r>
 800c636:	3001      	adds	r0, #1
 800c638:	f000 80aa 	beq.w	800c790 <_svfiprintf_r+0x1c8>
 800c63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c63e:	445a      	add	r2, fp
 800c640:	9209      	str	r2, [sp, #36]	; 0x24
 800c642:	f89a 3000 	ldrb.w	r3, [sl]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f000 80a2 	beq.w	800c790 <_svfiprintf_r+0x1c8>
 800c64c:	2300      	movs	r3, #0
 800c64e:	f04f 32ff 	mov.w	r2, #4294967295
 800c652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c656:	f10a 0a01 	add.w	sl, sl, #1
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	9307      	str	r3, [sp, #28]
 800c65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c662:	931a      	str	r3, [sp, #104]	; 0x68
 800c664:	4654      	mov	r4, sl
 800c666:	2205      	movs	r2, #5
 800c668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66c:	4851      	ldr	r0, [pc, #324]	; (800c7b4 <_svfiprintf_r+0x1ec>)
 800c66e:	f7f3 fdcf 	bl	8000210 <memchr>
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	b9d8      	cbnz	r0, 800c6ae <_svfiprintf_r+0xe6>
 800c676:	06d0      	lsls	r0, r2, #27
 800c678:	bf44      	itt	mi
 800c67a:	2320      	movmi	r3, #32
 800c67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c680:	0711      	lsls	r1, r2, #28
 800c682:	bf44      	itt	mi
 800c684:	232b      	movmi	r3, #43	; 0x2b
 800c686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c68a:	f89a 3000 	ldrb.w	r3, [sl]
 800c68e:	2b2a      	cmp	r3, #42	; 0x2a
 800c690:	d015      	beq.n	800c6be <_svfiprintf_r+0xf6>
 800c692:	9a07      	ldr	r2, [sp, #28]
 800c694:	4654      	mov	r4, sl
 800c696:	2000      	movs	r0, #0
 800c698:	f04f 0c0a 	mov.w	ip, #10
 800c69c:	4621      	mov	r1, r4
 800c69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a2:	3b30      	subs	r3, #48	; 0x30
 800c6a4:	2b09      	cmp	r3, #9
 800c6a6:	d94e      	bls.n	800c746 <_svfiprintf_r+0x17e>
 800c6a8:	b1b0      	cbz	r0, 800c6d8 <_svfiprintf_r+0x110>
 800c6aa:	9207      	str	r2, [sp, #28]
 800c6ac:	e014      	b.n	800c6d8 <_svfiprintf_r+0x110>
 800c6ae:	eba0 0308 	sub.w	r3, r0, r8
 800c6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	46a2      	mov	sl, r4
 800c6bc:	e7d2      	b.n	800c664 <_svfiprintf_r+0x9c>
 800c6be:	9b03      	ldr	r3, [sp, #12]
 800c6c0:	1d19      	adds	r1, r3, #4
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	9103      	str	r1, [sp, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bfbb      	ittet	lt
 800c6ca:	425b      	neglt	r3, r3
 800c6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c6d0:	9307      	strge	r3, [sp, #28]
 800c6d2:	9307      	strlt	r3, [sp, #28]
 800c6d4:	bfb8      	it	lt
 800c6d6:	9204      	strlt	r2, [sp, #16]
 800c6d8:	7823      	ldrb	r3, [r4, #0]
 800c6da:	2b2e      	cmp	r3, #46	; 0x2e
 800c6dc:	d10c      	bne.n	800c6f8 <_svfiprintf_r+0x130>
 800c6de:	7863      	ldrb	r3, [r4, #1]
 800c6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e2:	d135      	bne.n	800c750 <_svfiprintf_r+0x188>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	1d1a      	adds	r2, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	9203      	str	r2, [sp, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bfb8      	it	lt
 800c6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6f4:	3402      	adds	r4, #2
 800c6f6:	9305      	str	r3, [sp, #20]
 800c6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7c4 <_svfiprintf_r+0x1fc>
 800c6fc:	7821      	ldrb	r1, [r4, #0]
 800c6fe:	2203      	movs	r2, #3
 800c700:	4650      	mov	r0, sl
 800c702:	f7f3 fd85 	bl	8000210 <memchr>
 800c706:	b140      	cbz	r0, 800c71a <_svfiprintf_r+0x152>
 800c708:	2340      	movs	r3, #64	; 0x40
 800c70a:	eba0 000a 	sub.w	r0, r0, sl
 800c70e:	fa03 f000 	lsl.w	r0, r3, r0
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	4303      	orrs	r3, r0
 800c716:	3401      	adds	r4, #1
 800c718:	9304      	str	r3, [sp, #16]
 800c71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71e:	4826      	ldr	r0, [pc, #152]	; (800c7b8 <_svfiprintf_r+0x1f0>)
 800c720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c724:	2206      	movs	r2, #6
 800c726:	f7f3 fd73 	bl	8000210 <memchr>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d038      	beq.n	800c7a0 <_svfiprintf_r+0x1d8>
 800c72e:	4b23      	ldr	r3, [pc, #140]	; (800c7bc <_svfiprintf_r+0x1f4>)
 800c730:	bb1b      	cbnz	r3, 800c77a <_svfiprintf_r+0x1b2>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	3307      	adds	r3, #7
 800c736:	f023 0307 	bic.w	r3, r3, #7
 800c73a:	3308      	adds	r3, #8
 800c73c:	9303      	str	r3, [sp, #12]
 800c73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c740:	4433      	add	r3, r6
 800c742:	9309      	str	r3, [sp, #36]	; 0x24
 800c744:	e767      	b.n	800c616 <_svfiprintf_r+0x4e>
 800c746:	fb0c 3202 	mla	r2, ip, r2, r3
 800c74a:	460c      	mov	r4, r1
 800c74c:	2001      	movs	r0, #1
 800c74e:	e7a5      	b.n	800c69c <_svfiprintf_r+0xd4>
 800c750:	2300      	movs	r3, #0
 800c752:	3401      	adds	r4, #1
 800c754:	9305      	str	r3, [sp, #20]
 800c756:	4619      	mov	r1, r3
 800c758:	f04f 0c0a 	mov.w	ip, #10
 800c75c:	4620      	mov	r0, r4
 800c75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c762:	3a30      	subs	r2, #48	; 0x30
 800c764:	2a09      	cmp	r2, #9
 800c766:	d903      	bls.n	800c770 <_svfiprintf_r+0x1a8>
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d0c5      	beq.n	800c6f8 <_svfiprintf_r+0x130>
 800c76c:	9105      	str	r1, [sp, #20]
 800c76e:	e7c3      	b.n	800c6f8 <_svfiprintf_r+0x130>
 800c770:	fb0c 2101 	mla	r1, ip, r1, r2
 800c774:	4604      	mov	r4, r0
 800c776:	2301      	movs	r3, #1
 800c778:	e7f0      	b.n	800c75c <_svfiprintf_r+0x194>
 800c77a:	ab03      	add	r3, sp, #12
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	462a      	mov	r2, r5
 800c780:	4b0f      	ldr	r3, [pc, #60]	; (800c7c0 <_svfiprintf_r+0x1f8>)
 800c782:	a904      	add	r1, sp, #16
 800c784:	4638      	mov	r0, r7
 800c786:	f7fd ffef 	bl	800a768 <_printf_float>
 800c78a:	1c42      	adds	r2, r0, #1
 800c78c:	4606      	mov	r6, r0
 800c78e:	d1d6      	bne.n	800c73e <_svfiprintf_r+0x176>
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	065b      	lsls	r3, r3, #25
 800c794:	f53f af2c 	bmi.w	800c5f0 <_svfiprintf_r+0x28>
 800c798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c79a:	b01d      	add	sp, #116	; 0x74
 800c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a0:	ab03      	add	r3, sp, #12
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <_svfiprintf_r+0x1f8>)
 800c7a8:	a904      	add	r1, sp, #16
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f7fe fa80 	bl	800acb0 <_printf_i>
 800c7b0:	e7eb      	b.n	800c78a <_svfiprintf_r+0x1c2>
 800c7b2:	bf00      	nop
 800c7b4:	08010ce4 	.word	0x08010ce4
 800c7b8:	08010cee 	.word	0x08010cee
 800c7bc:	0800a769 	.word	0x0800a769
 800c7c0:	0800c511 	.word	0x0800c511
 800c7c4:	08010cea 	.word	0x08010cea

0800c7c8 <_sungetc_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	1c4b      	adds	r3, r1, #1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	d103      	bne.n	800c7d8 <_sungetc_r+0x10>
 800c7d0:	f04f 35ff 	mov.w	r5, #4294967295
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	8993      	ldrh	r3, [r2, #12]
 800c7da:	f023 0320 	bic.w	r3, r3, #32
 800c7de:	8193      	strh	r3, [r2, #12]
 800c7e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7e2:	6852      	ldr	r2, [r2, #4]
 800c7e4:	b2cd      	uxtb	r5, r1
 800c7e6:	b18b      	cbz	r3, 800c80c <_sungetc_r+0x44>
 800c7e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	dd08      	ble.n	800c800 <_sungetc_r+0x38>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	1e5a      	subs	r2, r3, #1
 800c7f2:	6022      	str	r2, [r4, #0]
 800c7f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c7f8:	6863      	ldr	r3, [r4, #4]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	6063      	str	r3, [r4, #4]
 800c7fe:	e7e9      	b.n	800c7d4 <_sungetc_r+0xc>
 800c800:	4621      	mov	r1, r4
 800c802:	f000 fc47 	bl	800d094 <__submore>
 800c806:	2800      	cmp	r0, #0
 800c808:	d0f1      	beq.n	800c7ee <_sungetc_r+0x26>
 800c80a:	e7e1      	b.n	800c7d0 <_sungetc_r+0x8>
 800c80c:	6921      	ldr	r1, [r4, #16]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	b151      	cbz	r1, 800c828 <_sungetc_r+0x60>
 800c812:	4299      	cmp	r1, r3
 800c814:	d208      	bcs.n	800c828 <_sungetc_r+0x60>
 800c816:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c81a:	42a9      	cmp	r1, r5
 800c81c:	d104      	bne.n	800c828 <_sungetc_r+0x60>
 800c81e:	3b01      	subs	r3, #1
 800c820:	3201      	adds	r2, #1
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	6062      	str	r2, [r4, #4]
 800c826:	e7d5      	b.n	800c7d4 <_sungetc_r+0xc>
 800c828:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c830:	6363      	str	r3, [r4, #52]	; 0x34
 800c832:	2303      	movs	r3, #3
 800c834:	63a3      	str	r3, [r4, #56]	; 0x38
 800c836:	4623      	mov	r3, r4
 800c838:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	2301      	movs	r3, #1
 800c840:	e7dc      	b.n	800c7fc <_sungetc_r+0x34>

0800c842 <__ssrefill_r>:
 800c842:	b510      	push	{r4, lr}
 800c844:	460c      	mov	r4, r1
 800c846:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c848:	b169      	cbz	r1, 800c866 <__ssrefill_r+0x24>
 800c84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c84e:	4299      	cmp	r1, r3
 800c850:	d001      	beq.n	800c856 <__ssrefill_r+0x14>
 800c852:	f7fd fe09 	bl	800a468 <_free_r>
 800c856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c858:	6063      	str	r3, [r4, #4]
 800c85a:	2000      	movs	r0, #0
 800c85c:	6360      	str	r0, [r4, #52]	; 0x34
 800c85e:	b113      	cbz	r3, 800c866 <__ssrefill_r+0x24>
 800c860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c862:	6023      	str	r3, [r4, #0]
 800c864:	bd10      	pop	{r4, pc}
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	2300      	movs	r3, #0
 800c86c:	6063      	str	r3, [r4, #4]
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	f043 0320 	orr.w	r3, r3, #32
 800c874:	81a3      	strh	r3, [r4, #12]
 800c876:	f04f 30ff 	mov.w	r0, #4294967295
 800c87a:	e7f3      	b.n	800c864 <__ssrefill_r+0x22>

0800c87c <__ssvfiscanf_r>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	460c      	mov	r4, r1
 800c882:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c886:	2100      	movs	r1, #0
 800c888:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c88c:	49a6      	ldr	r1, [pc, #664]	; (800cb28 <__ssvfiscanf_r+0x2ac>)
 800c88e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c890:	f10d 0804 	add.w	r8, sp, #4
 800c894:	49a5      	ldr	r1, [pc, #660]	; (800cb2c <__ssvfiscanf_r+0x2b0>)
 800c896:	4fa6      	ldr	r7, [pc, #664]	; (800cb30 <__ssvfiscanf_r+0x2b4>)
 800c898:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cb34 <__ssvfiscanf_r+0x2b8>
 800c89c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	91a1      	str	r1, [sp, #644]	; 0x284
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	7813      	ldrb	r3, [r2, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 815a 	beq.w	800cb62 <__ssvfiscanf_r+0x2e6>
 800c8ae:	5dd9      	ldrb	r1, [r3, r7]
 800c8b0:	f011 0108 	ands.w	r1, r1, #8
 800c8b4:	f102 0501 	add.w	r5, r2, #1
 800c8b8:	d019      	beq.n	800c8ee <__ssvfiscanf_r+0x72>
 800c8ba:	6863      	ldr	r3, [r4, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd0f      	ble.n	800c8e0 <__ssvfiscanf_r+0x64>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	781a      	ldrb	r2, [r3, #0]
 800c8c4:	5cba      	ldrb	r2, [r7, r2]
 800c8c6:	0712      	lsls	r2, r2, #28
 800c8c8:	d401      	bmi.n	800c8ce <__ssvfiscanf_r+0x52>
 800c8ca:	462a      	mov	r2, r5
 800c8cc:	e7eb      	b.n	800c8a6 <__ssvfiscanf_r+0x2a>
 800c8ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8d0:	3201      	adds	r2, #1
 800c8d2:	9245      	str	r2, [sp, #276]	; 0x114
 800c8d4:	6862      	ldr	r2, [r4, #4]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	3a01      	subs	r2, #1
 800c8da:	6062      	str	r2, [r4, #4]
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	e7ec      	b.n	800c8ba <__ssvfiscanf_r+0x3e>
 800c8e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	4798      	blx	r3
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d0e9      	beq.n	800c8c0 <__ssvfiscanf_r+0x44>
 800c8ec:	e7ed      	b.n	800c8ca <__ssvfiscanf_r+0x4e>
 800c8ee:	2b25      	cmp	r3, #37	; 0x25
 800c8f0:	d012      	beq.n	800c918 <__ssvfiscanf_r+0x9c>
 800c8f2:	469a      	mov	sl, r3
 800c8f4:	6863      	ldr	r3, [r4, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f340 8091 	ble.w	800ca1e <__ssvfiscanf_r+0x1a2>
 800c8fc:	6822      	ldr	r2, [r4, #0]
 800c8fe:	7813      	ldrb	r3, [r2, #0]
 800c900:	4553      	cmp	r3, sl
 800c902:	f040 812e 	bne.w	800cb62 <__ssvfiscanf_r+0x2e6>
 800c906:	6863      	ldr	r3, [r4, #4]
 800c908:	3b01      	subs	r3, #1
 800c90a:	6063      	str	r3, [r4, #4]
 800c90c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c90e:	3201      	adds	r2, #1
 800c910:	3301      	adds	r3, #1
 800c912:	6022      	str	r2, [r4, #0]
 800c914:	9345      	str	r3, [sp, #276]	; 0x114
 800c916:	e7d8      	b.n	800c8ca <__ssvfiscanf_r+0x4e>
 800c918:	9141      	str	r1, [sp, #260]	; 0x104
 800c91a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c91c:	7853      	ldrb	r3, [r2, #1]
 800c91e:	2b2a      	cmp	r3, #42	; 0x2a
 800c920:	bf02      	ittt	eq
 800c922:	2310      	moveq	r3, #16
 800c924:	1c95      	addeq	r5, r2, #2
 800c926:	9341      	streq	r3, [sp, #260]	; 0x104
 800c928:	220a      	movs	r2, #10
 800c92a:	46aa      	mov	sl, r5
 800c92c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c930:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c934:	2b09      	cmp	r3, #9
 800c936:	d91d      	bls.n	800c974 <__ssvfiscanf_r+0xf8>
 800c938:	487e      	ldr	r0, [pc, #504]	; (800cb34 <__ssvfiscanf_r+0x2b8>)
 800c93a:	2203      	movs	r2, #3
 800c93c:	f7f3 fc68 	bl	8000210 <memchr>
 800c940:	b140      	cbz	r0, 800c954 <__ssvfiscanf_r+0xd8>
 800c942:	2301      	movs	r3, #1
 800c944:	eba0 0009 	sub.w	r0, r0, r9
 800c948:	fa03 f000 	lsl.w	r0, r3, r0
 800c94c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c94e:	4318      	orrs	r0, r3
 800c950:	9041      	str	r0, [sp, #260]	; 0x104
 800c952:	4655      	mov	r5, sl
 800c954:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c958:	2b78      	cmp	r3, #120	; 0x78
 800c95a:	d806      	bhi.n	800c96a <__ssvfiscanf_r+0xee>
 800c95c:	2b57      	cmp	r3, #87	; 0x57
 800c95e:	d810      	bhi.n	800c982 <__ssvfiscanf_r+0x106>
 800c960:	2b25      	cmp	r3, #37	; 0x25
 800c962:	d0c6      	beq.n	800c8f2 <__ssvfiscanf_r+0x76>
 800c964:	d856      	bhi.n	800ca14 <__ssvfiscanf_r+0x198>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d064      	beq.n	800ca34 <__ssvfiscanf_r+0x1b8>
 800c96a:	2303      	movs	r3, #3
 800c96c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c96e:	230a      	movs	r3, #10
 800c970:	9342      	str	r3, [sp, #264]	; 0x108
 800c972:	e071      	b.n	800ca58 <__ssvfiscanf_r+0x1dc>
 800c974:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c976:	fb02 1103 	mla	r1, r2, r3, r1
 800c97a:	3930      	subs	r1, #48	; 0x30
 800c97c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c97e:	4655      	mov	r5, sl
 800c980:	e7d3      	b.n	800c92a <__ssvfiscanf_r+0xae>
 800c982:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c986:	2a20      	cmp	r2, #32
 800c988:	d8ef      	bhi.n	800c96a <__ssvfiscanf_r+0xee>
 800c98a:	a101      	add	r1, pc, #4	; (adr r1, 800c990 <__ssvfiscanf_r+0x114>)
 800c98c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c990:	0800ca43 	.word	0x0800ca43
 800c994:	0800c96b 	.word	0x0800c96b
 800c998:	0800c96b 	.word	0x0800c96b
 800c99c:	0800caa1 	.word	0x0800caa1
 800c9a0:	0800c96b 	.word	0x0800c96b
 800c9a4:	0800c96b 	.word	0x0800c96b
 800c9a8:	0800c96b 	.word	0x0800c96b
 800c9ac:	0800c96b 	.word	0x0800c96b
 800c9b0:	0800c96b 	.word	0x0800c96b
 800c9b4:	0800c96b 	.word	0x0800c96b
 800c9b8:	0800c96b 	.word	0x0800c96b
 800c9bc:	0800cab7 	.word	0x0800cab7
 800c9c0:	0800ca8d 	.word	0x0800ca8d
 800c9c4:	0800ca1b 	.word	0x0800ca1b
 800c9c8:	0800ca1b 	.word	0x0800ca1b
 800c9cc:	0800ca1b 	.word	0x0800ca1b
 800c9d0:	0800c96b 	.word	0x0800c96b
 800c9d4:	0800ca91 	.word	0x0800ca91
 800c9d8:	0800c96b 	.word	0x0800c96b
 800c9dc:	0800c96b 	.word	0x0800c96b
 800c9e0:	0800c96b 	.word	0x0800c96b
 800c9e4:	0800c96b 	.word	0x0800c96b
 800c9e8:	0800cac7 	.word	0x0800cac7
 800c9ec:	0800ca99 	.word	0x0800ca99
 800c9f0:	0800ca3b 	.word	0x0800ca3b
 800c9f4:	0800c96b 	.word	0x0800c96b
 800c9f8:	0800c96b 	.word	0x0800c96b
 800c9fc:	0800cac3 	.word	0x0800cac3
 800ca00:	0800c96b 	.word	0x0800c96b
 800ca04:	0800ca8d 	.word	0x0800ca8d
 800ca08:	0800c96b 	.word	0x0800c96b
 800ca0c:	0800c96b 	.word	0x0800c96b
 800ca10:	0800ca43 	.word	0x0800ca43
 800ca14:	3b45      	subs	r3, #69	; 0x45
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d8a7      	bhi.n	800c96a <__ssvfiscanf_r+0xee>
 800ca1a:	2305      	movs	r3, #5
 800ca1c:	e01b      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800ca1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca20:	4621      	mov	r1, r4
 800ca22:	4630      	mov	r0, r6
 800ca24:	4798      	blx	r3
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f43f af68 	beq.w	800c8fc <__ssvfiscanf_r+0x80>
 800ca2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	f040 808d 	bne.w	800cb4e <__ssvfiscanf_r+0x2d2>
 800ca34:	f04f 30ff 	mov.w	r0, #4294967295
 800ca38:	e08f      	b.n	800cb5a <__ssvfiscanf_r+0x2de>
 800ca3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca3c:	f042 0220 	orr.w	r2, r2, #32
 800ca40:	9241      	str	r2, [sp, #260]	; 0x104
 800ca42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca48:	9241      	str	r2, [sp, #260]	; 0x104
 800ca4a:	2210      	movs	r2, #16
 800ca4c:	2b6f      	cmp	r3, #111	; 0x6f
 800ca4e:	9242      	str	r2, [sp, #264]	; 0x108
 800ca50:	bf34      	ite	cc
 800ca52:	2303      	movcc	r3, #3
 800ca54:	2304      	movcs	r3, #4
 800ca56:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca58:	6863      	ldr	r3, [r4, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	dd42      	ble.n	800cae4 <__ssvfiscanf_r+0x268>
 800ca5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca60:	0659      	lsls	r1, r3, #25
 800ca62:	d404      	bmi.n	800ca6e <__ssvfiscanf_r+0x1f2>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	5cba      	ldrb	r2, [r7, r2]
 800ca6a:	0712      	lsls	r2, r2, #28
 800ca6c:	d441      	bmi.n	800caf2 <__ssvfiscanf_r+0x276>
 800ca6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	dc50      	bgt.n	800cb16 <__ssvfiscanf_r+0x29a>
 800ca74:	466b      	mov	r3, sp
 800ca76:	4622      	mov	r2, r4
 800ca78:	a941      	add	r1, sp, #260	; 0x104
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f000 f876 	bl	800cb6c <_scanf_chars>
 800ca80:	2801      	cmp	r0, #1
 800ca82:	d06e      	beq.n	800cb62 <__ssvfiscanf_r+0x2e6>
 800ca84:	2802      	cmp	r0, #2
 800ca86:	f47f af20 	bne.w	800c8ca <__ssvfiscanf_r+0x4e>
 800ca8a:	e7cf      	b.n	800ca2c <__ssvfiscanf_r+0x1b0>
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	e7dd      	b.n	800ca4c <__ssvfiscanf_r+0x1d0>
 800ca90:	2300      	movs	r3, #0
 800ca92:	9342      	str	r3, [sp, #264]	; 0x108
 800ca94:	2303      	movs	r3, #3
 800ca96:	e7de      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800ca98:	2308      	movs	r3, #8
 800ca9a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca9c:	2304      	movs	r3, #4
 800ca9e:	e7da      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4640      	mov	r0, r8
 800caa4:	f000 f9c6 	bl	800ce34 <__sccl>
 800caa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800caaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caae:	9341      	str	r3, [sp, #260]	; 0x104
 800cab0:	4605      	mov	r5, r0
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7cf      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800cab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cabc:	9341      	str	r3, [sp, #260]	; 0x104
 800cabe:	2300      	movs	r3, #0
 800cac0:	e7c9      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800cac2:	2302      	movs	r3, #2
 800cac4:	e7c7      	b.n	800ca56 <__ssvfiscanf_r+0x1da>
 800cac6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cac8:	06c3      	lsls	r3, r0, #27
 800caca:	f53f aefe 	bmi.w	800c8ca <__ssvfiscanf_r+0x4e>
 800cace:	9b00      	ldr	r3, [sp, #0]
 800cad0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cad2:	1d19      	adds	r1, r3, #4
 800cad4:	9100      	str	r1, [sp, #0]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f010 0f01 	tst.w	r0, #1
 800cadc:	bf14      	ite	ne
 800cade:	801a      	strhne	r2, [r3, #0]
 800cae0:	601a      	streq	r2, [r3, #0]
 800cae2:	e6f2      	b.n	800c8ca <__ssvfiscanf_r+0x4e>
 800cae4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cae6:	4621      	mov	r1, r4
 800cae8:	4630      	mov	r0, r6
 800caea:	4798      	blx	r3
 800caec:	2800      	cmp	r0, #0
 800caee:	d0b6      	beq.n	800ca5e <__ssvfiscanf_r+0x1e2>
 800caf0:	e79c      	b.n	800ca2c <__ssvfiscanf_r+0x1b0>
 800caf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800caf4:	3201      	adds	r2, #1
 800caf6:	9245      	str	r2, [sp, #276]	; 0x114
 800caf8:	6862      	ldr	r2, [r4, #4]
 800cafa:	3a01      	subs	r2, #1
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	6062      	str	r2, [r4, #4]
 800cb00:	dd02      	ble.n	800cb08 <__ssvfiscanf_r+0x28c>
 800cb02:	3301      	adds	r3, #1
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	e7ad      	b.n	800ca64 <__ssvfiscanf_r+0x1e8>
 800cb08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	4798      	blx	r3
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d0a7      	beq.n	800ca64 <__ssvfiscanf_r+0x1e8>
 800cb14:	e78a      	b.n	800ca2c <__ssvfiscanf_r+0x1b0>
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	dc0e      	bgt.n	800cb38 <__ssvfiscanf_r+0x2bc>
 800cb1a:	466b      	mov	r3, sp
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	a941      	add	r1, sp, #260	; 0x104
 800cb20:	4630      	mov	r0, r6
 800cb22:	f000 f87d 	bl	800cc20 <_scanf_i>
 800cb26:	e7ab      	b.n	800ca80 <__ssvfiscanf_r+0x204>
 800cb28:	0800c7c9 	.word	0x0800c7c9
 800cb2c:	0800c843 	.word	0x0800c843
 800cb30:	08010d4d 	.word	0x08010d4d
 800cb34:	08010cea 	.word	0x08010cea
 800cb38:	4b0b      	ldr	r3, [pc, #44]	; (800cb68 <__ssvfiscanf_r+0x2ec>)
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f43f aec5 	beq.w	800c8ca <__ssvfiscanf_r+0x4e>
 800cb40:	466b      	mov	r3, sp
 800cb42:	4622      	mov	r2, r4
 800cb44:	a941      	add	r1, sp, #260	; 0x104
 800cb46:	4630      	mov	r0, r6
 800cb48:	f3af 8000 	nop.w
 800cb4c:	e798      	b.n	800ca80 <__ssvfiscanf_r+0x204>
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb54:	bf18      	it	ne
 800cb56:	f04f 30ff 	movne.w	r0, #4294967295
 800cb5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb62:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb64:	e7f9      	b.n	800cb5a <__ssvfiscanf_r+0x2de>
 800cb66:	bf00      	nop
 800cb68:	00000000 	.word	0x00000000

0800cb6c <_scanf_chars>:
 800cb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb70:	4615      	mov	r5, r2
 800cb72:	688a      	ldr	r2, [r1, #8]
 800cb74:	4680      	mov	r8, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	b932      	cbnz	r2, 800cb88 <_scanf_chars+0x1c>
 800cb7a:	698a      	ldr	r2, [r1, #24]
 800cb7c:	2a00      	cmp	r2, #0
 800cb7e:	bf0c      	ite	eq
 800cb80:	2201      	moveq	r2, #1
 800cb82:	f04f 32ff 	movne.w	r2, #4294967295
 800cb86:	608a      	str	r2, [r1, #8]
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cc1c <_scanf_chars+0xb0>
 800cb8e:	06d1      	lsls	r1, r2, #27
 800cb90:	bf5f      	itttt	pl
 800cb92:	681a      	ldrpl	r2, [r3, #0]
 800cb94:	1d11      	addpl	r1, r2, #4
 800cb96:	6019      	strpl	r1, [r3, #0]
 800cb98:	6816      	ldrpl	r6, [r2, #0]
 800cb9a:	2700      	movs	r7, #0
 800cb9c:	69a0      	ldr	r0, [r4, #24]
 800cb9e:	b188      	cbz	r0, 800cbc4 <_scanf_chars+0x58>
 800cba0:	2801      	cmp	r0, #1
 800cba2:	d107      	bne.n	800cbb4 <_scanf_chars+0x48>
 800cba4:	682a      	ldr	r2, [r5, #0]
 800cba6:	7811      	ldrb	r1, [r2, #0]
 800cba8:	6962      	ldr	r2, [r4, #20]
 800cbaa:	5c52      	ldrb	r2, [r2, r1]
 800cbac:	b952      	cbnz	r2, 800cbc4 <_scanf_chars+0x58>
 800cbae:	2f00      	cmp	r7, #0
 800cbb0:	d031      	beq.n	800cc16 <_scanf_chars+0xaa>
 800cbb2:	e022      	b.n	800cbfa <_scanf_chars+0x8e>
 800cbb4:	2802      	cmp	r0, #2
 800cbb6:	d120      	bne.n	800cbfa <_scanf_chars+0x8e>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cbc0:	071b      	lsls	r3, r3, #28
 800cbc2:	d41a      	bmi.n	800cbfa <_scanf_chars+0x8e>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	06da      	lsls	r2, r3, #27
 800cbc8:	bf5e      	ittt	pl
 800cbca:	682b      	ldrpl	r3, [r5, #0]
 800cbcc:	781b      	ldrbpl	r3, [r3, #0]
 800cbce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cbd2:	682a      	ldr	r2, [r5, #0]
 800cbd4:	686b      	ldr	r3, [r5, #4]
 800cbd6:	3201      	adds	r2, #1
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	68a2      	ldr	r2, [r4, #8]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	3a01      	subs	r2, #1
 800cbe0:	606b      	str	r3, [r5, #4]
 800cbe2:	3701      	adds	r7, #1
 800cbe4:	60a2      	str	r2, [r4, #8]
 800cbe6:	b142      	cbz	r2, 800cbfa <_scanf_chars+0x8e>
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dcd7      	bgt.n	800cb9c <_scanf_chars+0x30>
 800cbec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4798      	blx	r3
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d0d0      	beq.n	800cb9c <_scanf_chars+0x30>
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	f013 0310 	ands.w	r3, r3, #16
 800cc00:	d105      	bne.n	800cc0e <_scanf_chars+0xa2>
 800cc02:	68e2      	ldr	r2, [r4, #12]
 800cc04:	3201      	adds	r2, #1
 800cc06:	60e2      	str	r2, [r4, #12]
 800cc08:	69a2      	ldr	r2, [r4, #24]
 800cc0a:	b102      	cbz	r2, 800cc0e <_scanf_chars+0xa2>
 800cc0c:	7033      	strb	r3, [r6, #0]
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	443b      	add	r3, r7
 800cc12:	6123      	str	r3, [r4, #16]
 800cc14:	2000      	movs	r0, #0
 800cc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1a:	bf00      	nop
 800cc1c:	08010d4d 	.word	0x08010d4d

0800cc20 <_scanf_i>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	4698      	mov	r8, r3
 800cc26:	4b76      	ldr	r3, [pc, #472]	; (800ce00 <_scanf_i+0x1e0>)
 800cc28:	460c      	mov	r4, r1
 800cc2a:	4682      	mov	sl, r0
 800cc2c:	4616      	mov	r6, r2
 800cc2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc32:	b087      	sub	sp, #28
 800cc34:	ab03      	add	r3, sp, #12
 800cc36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cc3a:	4b72      	ldr	r3, [pc, #456]	; (800ce04 <_scanf_i+0x1e4>)
 800cc3c:	69a1      	ldr	r1, [r4, #24]
 800cc3e:	4a72      	ldr	r2, [pc, #456]	; (800ce08 <_scanf_i+0x1e8>)
 800cc40:	2903      	cmp	r1, #3
 800cc42:	bf18      	it	ne
 800cc44:	461a      	movne	r2, r3
 800cc46:	68a3      	ldr	r3, [r4, #8]
 800cc48:	9201      	str	r2, [sp, #4]
 800cc4a:	1e5a      	subs	r2, r3, #1
 800cc4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc50:	bf88      	it	hi
 800cc52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc56:	4627      	mov	r7, r4
 800cc58:	bf82      	ittt	hi
 800cc5a:	eb03 0905 	addhi.w	r9, r3, r5
 800cc5e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc62:	60a3      	strhi	r3, [r4, #8]
 800cc64:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cc68:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cc6c:	bf98      	it	ls
 800cc6e:	f04f 0900 	movls.w	r9, #0
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	463d      	mov	r5, r7
 800cc76:	f04f 0b00 	mov.w	fp, #0
 800cc7a:	6831      	ldr	r1, [r6, #0]
 800cc7c:	ab03      	add	r3, sp, #12
 800cc7e:	7809      	ldrb	r1, [r1, #0]
 800cc80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cc84:	2202      	movs	r2, #2
 800cc86:	f7f3 fac3 	bl	8000210 <memchr>
 800cc8a:	b328      	cbz	r0, 800ccd8 <_scanf_i+0xb8>
 800cc8c:	f1bb 0f01 	cmp.w	fp, #1
 800cc90:	d159      	bne.n	800cd46 <_scanf_i+0x126>
 800cc92:	6862      	ldr	r2, [r4, #4]
 800cc94:	b92a      	cbnz	r2, 800cca2 <_scanf_i+0x82>
 800cc96:	6822      	ldr	r2, [r4, #0]
 800cc98:	2308      	movs	r3, #8
 800cc9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc9e:	6063      	str	r3, [r4, #4]
 800cca0:	6022      	str	r2, [r4, #0]
 800cca2:	6822      	ldr	r2, [r4, #0]
 800cca4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cca8:	6022      	str	r2, [r4, #0]
 800ccaa:	68a2      	ldr	r2, [r4, #8]
 800ccac:	1e51      	subs	r1, r2, #1
 800ccae:	60a1      	str	r1, [r4, #8]
 800ccb0:	b192      	cbz	r2, 800ccd8 <_scanf_i+0xb8>
 800ccb2:	6832      	ldr	r2, [r6, #0]
 800ccb4:	1c51      	adds	r1, r2, #1
 800ccb6:	6031      	str	r1, [r6, #0]
 800ccb8:	7812      	ldrb	r2, [r2, #0]
 800ccba:	f805 2b01 	strb.w	r2, [r5], #1
 800ccbe:	6872      	ldr	r2, [r6, #4]
 800ccc0:	3a01      	subs	r2, #1
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	6072      	str	r2, [r6, #4]
 800ccc6:	dc07      	bgt.n	800ccd8 <_scanf_i+0xb8>
 800ccc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cccc:	4631      	mov	r1, r6
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4790      	blx	r2
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	f040 8085 	bne.w	800cde2 <_scanf_i+0x1c2>
 800ccd8:	f10b 0b01 	add.w	fp, fp, #1
 800ccdc:	f1bb 0f03 	cmp.w	fp, #3
 800cce0:	d1cb      	bne.n	800cc7a <_scanf_i+0x5a>
 800cce2:	6863      	ldr	r3, [r4, #4]
 800cce4:	b90b      	cbnz	r3, 800ccea <_scanf_i+0xca>
 800cce6:	230a      	movs	r3, #10
 800cce8:	6063      	str	r3, [r4, #4]
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	4947      	ldr	r1, [pc, #284]	; (800ce0c <_scanf_i+0x1ec>)
 800ccee:	6960      	ldr	r0, [r4, #20]
 800ccf0:	1ac9      	subs	r1, r1, r3
 800ccf2:	f000 f89f 	bl	800ce34 <__sccl>
 800ccf6:	f04f 0b00 	mov.w	fp, #0
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	6822      	ldr	r2, [r4, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d03d      	beq.n	800cd7e <_scanf_i+0x15e>
 800cd02:	6831      	ldr	r1, [r6, #0]
 800cd04:	6960      	ldr	r0, [r4, #20]
 800cd06:	f891 c000 	ldrb.w	ip, [r1]
 800cd0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d035      	beq.n	800cd7e <_scanf_i+0x15e>
 800cd12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cd16:	d124      	bne.n	800cd62 <_scanf_i+0x142>
 800cd18:	0510      	lsls	r0, r2, #20
 800cd1a:	d522      	bpl.n	800cd62 <_scanf_i+0x142>
 800cd1c:	f10b 0b01 	add.w	fp, fp, #1
 800cd20:	f1b9 0f00 	cmp.w	r9, #0
 800cd24:	d003      	beq.n	800cd2e <_scanf_i+0x10e>
 800cd26:	3301      	adds	r3, #1
 800cd28:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd2c:	60a3      	str	r3, [r4, #8]
 800cd2e:	6873      	ldr	r3, [r6, #4]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	6073      	str	r3, [r6, #4]
 800cd36:	dd1b      	ble.n	800cd70 <_scanf_i+0x150>
 800cd38:	6833      	ldr	r3, [r6, #0]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	e7d9      	b.n	800ccfa <_scanf_i+0xda>
 800cd46:	f1bb 0f02 	cmp.w	fp, #2
 800cd4a:	d1ae      	bne.n	800ccaa <_scanf_i+0x8a>
 800cd4c:	6822      	ldr	r2, [r4, #0]
 800cd4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cd52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cd56:	d1bf      	bne.n	800ccd8 <_scanf_i+0xb8>
 800cd58:	2310      	movs	r3, #16
 800cd5a:	6063      	str	r3, [r4, #4]
 800cd5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd60:	e7a2      	b.n	800cca8 <_scanf_i+0x88>
 800cd62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cd66:	6022      	str	r2, [r4, #0]
 800cd68:	780b      	ldrb	r3, [r1, #0]
 800cd6a:	f805 3b01 	strb.w	r3, [r5], #1
 800cd6e:	e7de      	b.n	800cd2e <_scanf_i+0x10e>
 800cd70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd74:	4631      	mov	r1, r6
 800cd76:	4650      	mov	r0, sl
 800cd78:	4798      	blx	r3
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0df      	beq.n	800cd3e <_scanf_i+0x11e>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	05db      	lsls	r3, r3, #23
 800cd82:	d50d      	bpl.n	800cda0 <_scanf_i+0x180>
 800cd84:	42bd      	cmp	r5, r7
 800cd86:	d909      	bls.n	800cd9c <_scanf_i+0x17c>
 800cd88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd90:	4632      	mov	r2, r6
 800cd92:	4650      	mov	r0, sl
 800cd94:	4798      	blx	r3
 800cd96:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd9a:	464d      	mov	r5, r9
 800cd9c:	42bd      	cmp	r5, r7
 800cd9e:	d02d      	beq.n	800cdfc <_scanf_i+0x1dc>
 800cda0:	6822      	ldr	r2, [r4, #0]
 800cda2:	f012 0210 	ands.w	r2, r2, #16
 800cda6:	d113      	bne.n	800cdd0 <_scanf_i+0x1b0>
 800cda8:	702a      	strb	r2, [r5, #0]
 800cdaa:	6863      	ldr	r3, [r4, #4]
 800cdac:	9e01      	ldr	r6, [sp, #4]
 800cdae:	4639      	mov	r1, r7
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	47b0      	blx	r6
 800cdb4:	6821      	ldr	r1, [r4, #0]
 800cdb6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdba:	f011 0f20 	tst.w	r1, #32
 800cdbe:	d013      	beq.n	800cde8 <_scanf_i+0x1c8>
 800cdc0:	1d1a      	adds	r2, r3, #4
 800cdc2:	f8c8 2000 	str.w	r2, [r8]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6018      	str	r0, [r3, #0]
 800cdca:	68e3      	ldr	r3, [r4, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60e3      	str	r3, [r4, #12]
 800cdd0:	1bed      	subs	r5, r5, r7
 800cdd2:	44ab      	add	fp, r5
 800cdd4:	6925      	ldr	r5, [r4, #16]
 800cdd6:	445d      	add	r5, fp
 800cdd8:	6125      	str	r5, [r4, #16]
 800cdda:	2000      	movs	r0, #0
 800cddc:	b007      	add	sp, #28
 800cdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde2:	f04f 0b00 	mov.w	fp, #0
 800cde6:	e7ca      	b.n	800cd7e <_scanf_i+0x15e>
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	f8c8 2000 	str.w	r2, [r8]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f011 0f01 	tst.w	r1, #1
 800cdf4:	bf14      	ite	ne
 800cdf6:	8018      	strhne	r0, [r3, #0]
 800cdf8:	6018      	streq	r0, [r3, #0]
 800cdfa:	e7e6      	b.n	800cdca <_scanf_i+0x1aa>
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	e7ed      	b.n	800cddc <_scanf_i+0x1bc>
 800ce00:	08010ab4 	.word	0x08010ab4
 800ce04:	0800d091 	.word	0x0800d091
 800ce08:	0800cfa9 	.word	0x0800cfa9
 800ce0c:	08010d0e 	.word	0x08010d0e

0800ce10 <_read_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d07      	ldr	r5, [pc, #28]	; (800ce30 <_read_r+0x20>)
 800ce14:	4604      	mov	r4, r0
 800ce16:	4608      	mov	r0, r1
 800ce18:	4611      	mov	r1, r2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	602a      	str	r2, [r5, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	f7f6 fd9e 	bl	8003960 <_read>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_read_r+0x1e>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_read_r+0x1e>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	200122c4 	.word	0x200122c4

0800ce34 <__sccl>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	780b      	ldrb	r3, [r1, #0]
 800ce38:	4604      	mov	r4, r0
 800ce3a:	2b5e      	cmp	r3, #94	; 0x5e
 800ce3c:	bf0b      	itete	eq
 800ce3e:	784b      	ldrbeq	r3, [r1, #1]
 800ce40:	1c48      	addne	r0, r1, #1
 800ce42:	1c88      	addeq	r0, r1, #2
 800ce44:	2200      	movne	r2, #0
 800ce46:	bf08      	it	eq
 800ce48:	2201      	moveq	r2, #1
 800ce4a:	1e61      	subs	r1, r4, #1
 800ce4c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ce50:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ce54:	42a9      	cmp	r1, r5
 800ce56:	d1fb      	bne.n	800ce50 <__sccl+0x1c>
 800ce58:	b90b      	cbnz	r3, 800ce5e <__sccl+0x2a>
 800ce5a:	3801      	subs	r0, #1
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
 800ce5e:	f082 0201 	eor.w	r2, r2, #1
 800ce62:	54e2      	strb	r2, [r4, r3]
 800ce64:	4605      	mov	r5, r0
 800ce66:	4628      	mov	r0, r5
 800ce68:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ce6c:	292d      	cmp	r1, #45	; 0x2d
 800ce6e:	d006      	beq.n	800ce7e <__sccl+0x4a>
 800ce70:	295d      	cmp	r1, #93	; 0x5d
 800ce72:	d0f3      	beq.n	800ce5c <__sccl+0x28>
 800ce74:	b909      	cbnz	r1, 800ce7a <__sccl+0x46>
 800ce76:	4628      	mov	r0, r5
 800ce78:	e7f0      	b.n	800ce5c <__sccl+0x28>
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	e7f1      	b.n	800ce62 <__sccl+0x2e>
 800ce7e:	786e      	ldrb	r6, [r5, #1]
 800ce80:	2e5d      	cmp	r6, #93	; 0x5d
 800ce82:	d0fa      	beq.n	800ce7a <__sccl+0x46>
 800ce84:	42b3      	cmp	r3, r6
 800ce86:	dcf8      	bgt.n	800ce7a <__sccl+0x46>
 800ce88:	3502      	adds	r5, #2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	3101      	adds	r1, #1
 800ce8e:	428e      	cmp	r6, r1
 800ce90:	5462      	strb	r2, [r4, r1]
 800ce92:	dcfb      	bgt.n	800ce8c <__sccl+0x58>
 800ce94:	1af1      	subs	r1, r6, r3
 800ce96:	3901      	subs	r1, #1
 800ce98:	1c58      	adds	r0, r3, #1
 800ce9a:	42b3      	cmp	r3, r6
 800ce9c:	bfa8      	it	ge
 800ce9e:	2100      	movge	r1, #0
 800cea0:	1843      	adds	r3, r0, r1
 800cea2:	e7e0      	b.n	800ce66 <__sccl+0x32>

0800cea4 <_strtol_l.constprop.0>:
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceaa:	d001      	beq.n	800ceb0 <_strtol_l.constprop.0+0xc>
 800ceac:	2b24      	cmp	r3, #36	; 0x24
 800ceae:	d906      	bls.n	800cebe <_strtol_l.constprop.0+0x1a>
 800ceb0:	f7fd faa0 	bl	800a3f4 <__errno>
 800ceb4:	2316      	movs	r3, #22
 800ceb6:	6003      	str	r3, [r0, #0]
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cfa4 <_strtol_l.constprop.0+0x100>
 800cec2:	460d      	mov	r5, r1
 800cec4:	462e      	mov	r6, r5
 800cec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceca:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cece:	f017 0708 	ands.w	r7, r7, #8
 800ced2:	d1f7      	bne.n	800cec4 <_strtol_l.constprop.0+0x20>
 800ced4:	2c2d      	cmp	r4, #45	; 0x2d
 800ced6:	d132      	bne.n	800cf3e <_strtol_l.constprop.0+0x9a>
 800ced8:	782c      	ldrb	r4, [r5, #0]
 800ceda:	2701      	movs	r7, #1
 800cedc:	1cb5      	adds	r5, r6, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d05b      	beq.n	800cf9a <_strtol_l.constprop.0+0xf6>
 800cee2:	2b10      	cmp	r3, #16
 800cee4:	d109      	bne.n	800cefa <_strtol_l.constprop.0+0x56>
 800cee6:	2c30      	cmp	r4, #48	; 0x30
 800cee8:	d107      	bne.n	800cefa <_strtol_l.constprop.0+0x56>
 800ceea:	782c      	ldrb	r4, [r5, #0]
 800ceec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cef0:	2c58      	cmp	r4, #88	; 0x58
 800cef2:	d14d      	bne.n	800cf90 <_strtol_l.constprop.0+0xec>
 800cef4:	786c      	ldrb	r4, [r5, #1]
 800cef6:	2310      	movs	r3, #16
 800cef8:	3502      	adds	r5, #2
 800cefa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cefe:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf02:	f04f 0c00 	mov.w	ip, #0
 800cf06:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf0a:	4666      	mov	r6, ip
 800cf0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cf14:	f1be 0f09 	cmp.w	lr, #9
 800cf18:	d816      	bhi.n	800cf48 <_strtol_l.constprop.0+0xa4>
 800cf1a:	4674      	mov	r4, lr
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	dd24      	ble.n	800cf6a <_strtol_l.constprop.0+0xc6>
 800cf20:	f1bc 0f00 	cmp.w	ip, #0
 800cf24:	db1e      	blt.n	800cf64 <_strtol_l.constprop.0+0xc0>
 800cf26:	45b1      	cmp	r9, r6
 800cf28:	d31c      	bcc.n	800cf64 <_strtol_l.constprop.0+0xc0>
 800cf2a:	d101      	bne.n	800cf30 <_strtol_l.constprop.0+0x8c>
 800cf2c:	45a2      	cmp	sl, r4
 800cf2e:	db19      	blt.n	800cf64 <_strtol_l.constprop.0+0xc0>
 800cf30:	fb06 4603 	mla	r6, r6, r3, r4
 800cf34:	f04f 0c01 	mov.w	ip, #1
 800cf38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf3c:	e7e8      	b.n	800cf10 <_strtol_l.constprop.0+0x6c>
 800cf3e:	2c2b      	cmp	r4, #43	; 0x2b
 800cf40:	bf04      	itt	eq
 800cf42:	782c      	ldrbeq	r4, [r5, #0]
 800cf44:	1cb5      	addeq	r5, r6, #2
 800cf46:	e7ca      	b.n	800cede <_strtol_l.constprop.0+0x3a>
 800cf48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf4c:	f1be 0f19 	cmp.w	lr, #25
 800cf50:	d801      	bhi.n	800cf56 <_strtol_l.constprop.0+0xb2>
 800cf52:	3c37      	subs	r4, #55	; 0x37
 800cf54:	e7e2      	b.n	800cf1c <_strtol_l.constprop.0+0x78>
 800cf56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf5a:	f1be 0f19 	cmp.w	lr, #25
 800cf5e:	d804      	bhi.n	800cf6a <_strtol_l.constprop.0+0xc6>
 800cf60:	3c57      	subs	r4, #87	; 0x57
 800cf62:	e7db      	b.n	800cf1c <_strtol_l.constprop.0+0x78>
 800cf64:	f04f 3cff 	mov.w	ip, #4294967295
 800cf68:	e7e6      	b.n	800cf38 <_strtol_l.constprop.0+0x94>
 800cf6a:	f1bc 0f00 	cmp.w	ip, #0
 800cf6e:	da05      	bge.n	800cf7c <_strtol_l.constprop.0+0xd8>
 800cf70:	2322      	movs	r3, #34	; 0x22
 800cf72:	6003      	str	r3, [r0, #0]
 800cf74:	4646      	mov	r6, r8
 800cf76:	b942      	cbnz	r2, 800cf8a <_strtol_l.constprop.0+0xe6>
 800cf78:	4630      	mov	r0, r6
 800cf7a:	e79e      	b.n	800ceba <_strtol_l.constprop.0+0x16>
 800cf7c:	b107      	cbz	r7, 800cf80 <_strtol_l.constprop.0+0xdc>
 800cf7e:	4276      	negs	r6, r6
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	d0f9      	beq.n	800cf78 <_strtol_l.constprop.0+0xd4>
 800cf84:	f1bc 0f00 	cmp.w	ip, #0
 800cf88:	d000      	beq.n	800cf8c <_strtol_l.constprop.0+0xe8>
 800cf8a:	1e69      	subs	r1, r5, #1
 800cf8c:	6011      	str	r1, [r2, #0]
 800cf8e:	e7f3      	b.n	800cf78 <_strtol_l.constprop.0+0xd4>
 800cf90:	2430      	movs	r4, #48	; 0x30
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1b1      	bne.n	800cefa <_strtol_l.constprop.0+0x56>
 800cf96:	2308      	movs	r3, #8
 800cf98:	e7af      	b.n	800cefa <_strtol_l.constprop.0+0x56>
 800cf9a:	2c30      	cmp	r4, #48	; 0x30
 800cf9c:	d0a5      	beq.n	800ceea <_strtol_l.constprop.0+0x46>
 800cf9e:	230a      	movs	r3, #10
 800cfa0:	e7ab      	b.n	800cefa <_strtol_l.constprop.0+0x56>
 800cfa2:	bf00      	nop
 800cfa4:	08010d4d 	.word	0x08010d4d

0800cfa8 <_strtol_r>:
 800cfa8:	f7ff bf7c 	b.w	800cea4 <_strtol_l.constprop.0>

0800cfac <_strtoul_l.constprop.0>:
 800cfac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb0:	4f36      	ldr	r7, [pc, #216]	; (800d08c <_strtoul_l.constprop.0+0xe0>)
 800cfb2:	4686      	mov	lr, r0
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfbc:	5de6      	ldrb	r6, [r4, r7]
 800cfbe:	f016 0608 	ands.w	r6, r6, #8
 800cfc2:	d1f8      	bne.n	800cfb6 <_strtoul_l.constprop.0+0xa>
 800cfc4:	2c2d      	cmp	r4, #45	; 0x2d
 800cfc6:	d12f      	bne.n	800d028 <_strtoul_l.constprop.0+0x7c>
 800cfc8:	782c      	ldrb	r4, [r5, #0]
 800cfca:	2601      	movs	r6, #1
 800cfcc:	1c85      	adds	r5, r0, #2
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d057      	beq.n	800d082 <_strtoul_l.constprop.0+0xd6>
 800cfd2:	2b10      	cmp	r3, #16
 800cfd4:	d109      	bne.n	800cfea <_strtoul_l.constprop.0+0x3e>
 800cfd6:	2c30      	cmp	r4, #48	; 0x30
 800cfd8:	d107      	bne.n	800cfea <_strtoul_l.constprop.0+0x3e>
 800cfda:	7828      	ldrb	r0, [r5, #0]
 800cfdc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cfe0:	2858      	cmp	r0, #88	; 0x58
 800cfe2:	d149      	bne.n	800d078 <_strtoul_l.constprop.0+0xcc>
 800cfe4:	786c      	ldrb	r4, [r5, #1]
 800cfe6:	2310      	movs	r3, #16
 800cfe8:	3502      	adds	r5, #2
 800cfea:	f04f 38ff 	mov.w	r8, #4294967295
 800cfee:	2700      	movs	r7, #0
 800cff0:	fbb8 f8f3 	udiv	r8, r8, r3
 800cff4:	fb03 f908 	mul.w	r9, r3, r8
 800cff8:	ea6f 0909 	mvn.w	r9, r9
 800cffc:	4638      	mov	r0, r7
 800cffe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d002:	f1bc 0f09 	cmp.w	ip, #9
 800d006:	d814      	bhi.n	800d032 <_strtoul_l.constprop.0+0x86>
 800d008:	4664      	mov	r4, ip
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	dd22      	ble.n	800d054 <_strtoul_l.constprop.0+0xa8>
 800d00e:	2f00      	cmp	r7, #0
 800d010:	db1d      	blt.n	800d04e <_strtoul_l.constprop.0+0xa2>
 800d012:	4580      	cmp	r8, r0
 800d014:	d31b      	bcc.n	800d04e <_strtoul_l.constprop.0+0xa2>
 800d016:	d101      	bne.n	800d01c <_strtoul_l.constprop.0+0x70>
 800d018:	45a1      	cmp	r9, r4
 800d01a:	db18      	blt.n	800d04e <_strtoul_l.constprop.0+0xa2>
 800d01c:	fb00 4003 	mla	r0, r0, r3, r4
 800d020:	2701      	movs	r7, #1
 800d022:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d026:	e7ea      	b.n	800cffe <_strtoul_l.constprop.0+0x52>
 800d028:	2c2b      	cmp	r4, #43	; 0x2b
 800d02a:	bf04      	itt	eq
 800d02c:	782c      	ldrbeq	r4, [r5, #0]
 800d02e:	1c85      	addeq	r5, r0, #2
 800d030:	e7cd      	b.n	800cfce <_strtoul_l.constprop.0+0x22>
 800d032:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d036:	f1bc 0f19 	cmp.w	ip, #25
 800d03a:	d801      	bhi.n	800d040 <_strtoul_l.constprop.0+0x94>
 800d03c:	3c37      	subs	r4, #55	; 0x37
 800d03e:	e7e4      	b.n	800d00a <_strtoul_l.constprop.0+0x5e>
 800d040:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d044:	f1bc 0f19 	cmp.w	ip, #25
 800d048:	d804      	bhi.n	800d054 <_strtoul_l.constprop.0+0xa8>
 800d04a:	3c57      	subs	r4, #87	; 0x57
 800d04c:	e7dd      	b.n	800d00a <_strtoul_l.constprop.0+0x5e>
 800d04e:	f04f 37ff 	mov.w	r7, #4294967295
 800d052:	e7e6      	b.n	800d022 <_strtoul_l.constprop.0+0x76>
 800d054:	2f00      	cmp	r7, #0
 800d056:	da07      	bge.n	800d068 <_strtoul_l.constprop.0+0xbc>
 800d058:	2322      	movs	r3, #34	; 0x22
 800d05a:	f8ce 3000 	str.w	r3, [lr]
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	b932      	cbnz	r2, 800d072 <_strtoul_l.constprop.0+0xc6>
 800d064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d068:	b106      	cbz	r6, 800d06c <_strtoul_l.constprop.0+0xc0>
 800d06a:	4240      	negs	r0, r0
 800d06c:	2a00      	cmp	r2, #0
 800d06e:	d0f9      	beq.n	800d064 <_strtoul_l.constprop.0+0xb8>
 800d070:	b107      	cbz	r7, 800d074 <_strtoul_l.constprop.0+0xc8>
 800d072:	1e69      	subs	r1, r5, #1
 800d074:	6011      	str	r1, [r2, #0]
 800d076:	e7f5      	b.n	800d064 <_strtoul_l.constprop.0+0xb8>
 800d078:	2430      	movs	r4, #48	; 0x30
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1b5      	bne.n	800cfea <_strtoul_l.constprop.0+0x3e>
 800d07e:	2308      	movs	r3, #8
 800d080:	e7b3      	b.n	800cfea <_strtoul_l.constprop.0+0x3e>
 800d082:	2c30      	cmp	r4, #48	; 0x30
 800d084:	d0a9      	beq.n	800cfda <_strtoul_l.constprop.0+0x2e>
 800d086:	230a      	movs	r3, #10
 800d088:	e7af      	b.n	800cfea <_strtoul_l.constprop.0+0x3e>
 800d08a:	bf00      	nop
 800d08c:	08010d4d 	.word	0x08010d4d

0800d090 <_strtoul_r>:
 800d090:	f7ff bf8c 	b.w	800cfac <_strtoul_l.constprop.0>

0800d094 <__submore>:
 800d094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d098:	460c      	mov	r4, r1
 800d09a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0a0:	4299      	cmp	r1, r3
 800d0a2:	d11d      	bne.n	800d0e0 <__submore+0x4c>
 800d0a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d0a8:	f7fd fa4a 	bl	800a540 <_malloc_r>
 800d0ac:	b918      	cbnz	r0, 800d0b6 <__submore+0x22>
 800d0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d0c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d0ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d0ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d0d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d0d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d0da:	6020      	str	r0, [r4, #0]
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e7e8      	b.n	800d0b2 <__submore+0x1e>
 800d0e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d0e2:	0077      	lsls	r7, r6, #1
 800d0e4:	463a      	mov	r2, r7
 800d0e6:	f000 fa25 	bl	800d534 <_realloc_r>
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0de      	beq.n	800d0ae <__submore+0x1a>
 800d0f0:	eb00 0806 	add.w	r8, r0, r6
 800d0f4:	4601      	mov	r1, r0
 800d0f6:	4632      	mov	r2, r6
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	f7fe fe55 	bl	800bda8 <memcpy>
 800d0fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d102:	f8c4 8000 	str.w	r8, [r4]
 800d106:	e7e9      	b.n	800d0dc <__submore+0x48>

0800d108 <__assert_func>:
 800d108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d10a:	4614      	mov	r4, r2
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b09      	ldr	r3, [pc, #36]	; (800d134 <__assert_func+0x2c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4605      	mov	r5, r0
 800d114:	68d8      	ldr	r0, [r3, #12]
 800d116:	b14c      	cbz	r4, 800d12c <__assert_func+0x24>
 800d118:	4b07      	ldr	r3, [pc, #28]	; (800d138 <__assert_func+0x30>)
 800d11a:	9100      	str	r1, [sp, #0]
 800d11c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d120:	4906      	ldr	r1, [pc, #24]	; (800d13c <__assert_func+0x34>)
 800d122:	462b      	mov	r3, r5
 800d124:	f000 f9a6 	bl	800d474 <fiprintf>
 800d128:	f000 fc5a 	bl	800d9e0 <abort>
 800d12c:	4b04      	ldr	r3, [pc, #16]	; (800d140 <__assert_func+0x38>)
 800d12e:	461c      	mov	r4, r3
 800d130:	e7f3      	b.n	800d11a <__assert_func+0x12>
 800d132:	bf00      	nop
 800d134:	20000014 	.word	0x20000014
 800d138:	08010d10 	.word	0x08010d10
 800d13c:	08010d1d 	.word	0x08010d1d
 800d140:	08010d4b 	.word	0x08010d4b

0800d144 <__sflush_r>:
 800d144:	898a      	ldrh	r2, [r1, #12]
 800d146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14a:	4605      	mov	r5, r0
 800d14c:	0710      	lsls	r0, r2, #28
 800d14e:	460c      	mov	r4, r1
 800d150:	d458      	bmi.n	800d204 <__sflush_r+0xc0>
 800d152:	684b      	ldr	r3, [r1, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	dc05      	bgt.n	800d164 <__sflush_r+0x20>
 800d158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	dc02      	bgt.n	800d164 <__sflush_r+0x20>
 800d15e:	2000      	movs	r0, #0
 800d160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d166:	2e00      	cmp	r6, #0
 800d168:	d0f9      	beq.n	800d15e <__sflush_r+0x1a>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d170:	682f      	ldr	r7, [r5, #0]
 800d172:	602b      	str	r3, [r5, #0]
 800d174:	d032      	beq.n	800d1dc <__sflush_r+0x98>
 800d176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	075a      	lsls	r2, r3, #29
 800d17c:	d505      	bpl.n	800d18a <__sflush_r+0x46>
 800d17e:	6863      	ldr	r3, [r4, #4]
 800d180:	1ac0      	subs	r0, r0, r3
 800d182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d184:	b10b      	cbz	r3, 800d18a <__sflush_r+0x46>
 800d186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d188:	1ac0      	subs	r0, r0, r3
 800d18a:	2300      	movs	r3, #0
 800d18c:	4602      	mov	r2, r0
 800d18e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d190:	6a21      	ldr	r1, [r4, #32]
 800d192:	4628      	mov	r0, r5
 800d194:	47b0      	blx	r6
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	89a3      	ldrh	r3, [r4, #12]
 800d19a:	d106      	bne.n	800d1aa <__sflush_r+0x66>
 800d19c:	6829      	ldr	r1, [r5, #0]
 800d19e:	291d      	cmp	r1, #29
 800d1a0:	d82c      	bhi.n	800d1fc <__sflush_r+0xb8>
 800d1a2:	4a2a      	ldr	r2, [pc, #168]	; (800d24c <__sflush_r+0x108>)
 800d1a4:	40ca      	lsrs	r2, r1
 800d1a6:	07d6      	lsls	r6, r2, #31
 800d1a8:	d528      	bpl.n	800d1fc <__sflush_r+0xb8>
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	6062      	str	r2, [r4, #4]
 800d1ae:	04d9      	lsls	r1, r3, #19
 800d1b0:	6922      	ldr	r2, [r4, #16]
 800d1b2:	6022      	str	r2, [r4, #0]
 800d1b4:	d504      	bpl.n	800d1c0 <__sflush_r+0x7c>
 800d1b6:	1c42      	adds	r2, r0, #1
 800d1b8:	d101      	bne.n	800d1be <__sflush_r+0x7a>
 800d1ba:	682b      	ldr	r3, [r5, #0]
 800d1bc:	b903      	cbnz	r3, 800d1c0 <__sflush_r+0x7c>
 800d1be:	6560      	str	r0, [r4, #84]	; 0x54
 800d1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1c2:	602f      	str	r7, [r5, #0]
 800d1c4:	2900      	cmp	r1, #0
 800d1c6:	d0ca      	beq.n	800d15e <__sflush_r+0x1a>
 800d1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1cc:	4299      	cmp	r1, r3
 800d1ce:	d002      	beq.n	800d1d6 <__sflush_r+0x92>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f7fd f949 	bl	800a468 <_free_r>
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1da:	e7c1      	b.n	800d160 <__sflush_r+0x1c>
 800d1dc:	6a21      	ldr	r1, [r4, #32]
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	47b0      	blx	r6
 800d1e4:	1c41      	adds	r1, r0, #1
 800d1e6:	d1c7      	bne.n	800d178 <__sflush_r+0x34>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0c4      	beq.n	800d178 <__sflush_r+0x34>
 800d1ee:	2b1d      	cmp	r3, #29
 800d1f0:	d001      	beq.n	800d1f6 <__sflush_r+0xb2>
 800d1f2:	2b16      	cmp	r3, #22
 800d1f4:	d101      	bne.n	800d1fa <__sflush_r+0xb6>
 800d1f6:	602f      	str	r7, [r5, #0]
 800d1f8:	e7b1      	b.n	800d15e <__sflush_r+0x1a>
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	e7ad      	b.n	800d160 <__sflush_r+0x1c>
 800d204:	690f      	ldr	r7, [r1, #16]
 800d206:	2f00      	cmp	r7, #0
 800d208:	d0a9      	beq.n	800d15e <__sflush_r+0x1a>
 800d20a:	0793      	lsls	r3, r2, #30
 800d20c:	680e      	ldr	r6, [r1, #0]
 800d20e:	bf08      	it	eq
 800d210:	694b      	ldreq	r3, [r1, #20]
 800d212:	600f      	str	r7, [r1, #0]
 800d214:	bf18      	it	ne
 800d216:	2300      	movne	r3, #0
 800d218:	eba6 0807 	sub.w	r8, r6, r7
 800d21c:	608b      	str	r3, [r1, #8]
 800d21e:	f1b8 0f00 	cmp.w	r8, #0
 800d222:	dd9c      	ble.n	800d15e <__sflush_r+0x1a>
 800d224:	6a21      	ldr	r1, [r4, #32]
 800d226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d228:	4643      	mov	r3, r8
 800d22a:	463a      	mov	r2, r7
 800d22c:	4628      	mov	r0, r5
 800d22e:	47b0      	blx	r6
 800d230:	2800      	cmp	r0, #0
 800d232:	dc06      	bgt.n	800d242 <__sflush_r+0xfe>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295
 800d240:	e78e      	b.n	800d160 <__sflush_r+0x1c>
 800d242:	4407      	add	r7, r0
 800d244:	eba8 0800 	sub.w	r8, r8, r0
 800d248:	e7e9      	b.n	800d21e <__sflush_r+0xda>
 800d24a:	bf00      	nop
 800d24c:	20400001 	.word	0x20400001

0800d250 <_fflush_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	690b      	ldr	r3, [r1, #16]
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	b913      	cbnz	r3, 800d260 <_fflush_r+0x10>
 800d25a:	2500      	movs	r5, #0
 800d25c:	4628      	mov	r0, r5
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	b118      	cbz	r0, 800d26a <_fflush_r+0x1a>
 800d262:	6983      	ldr	r3, [r0, #24]
 800d264:	b90b      	cbnz	r3, 800d26a <_fflush_r+0x1a>
 800d266:	f000 f887 	bl	800d378 <__sinit>
 800d26a:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <_fflush_r+0x6c>)
 800d26c:	429c      	cmp	r4, r3
 800d26e:	d11b      	bne.n	800d2a8 <_fflush_r+0x58>
 800d270:	686c      	ldr	r4, [r5, #4]
 800d272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d0ef      	beq.n	800d25a <_fflush_r+0xa>
 800d27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d27c:	07d0      	lsls	r0, r2, #31
 800d27e:	d404      	bmi.n	800d28a <_fflush_r+0x3a>
 800d280:	0599      	lsls	r1, r3, #22
 800d282:	d402      	bmi.n	800d28a <_fflush_r+0x3a>
 800d284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d286:	f000 f927 	bl	800d4d8 <__retarget_lock_acquire_recursive>
 800d28a:	4628      	mov	r0, r5
 800d28c:	4621      	mov	r1, r4
 800d28e:	f7ff ff59 	bl	800d144 <__sflush_r>
 800d292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d294:	07da      	lsls	r2, r3, #31
 800d296:	4605      	mov	r5, r0
 800d298:	d4e0      	bmi.n	800d25c <_fflush_r+0xc>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	059b      	lsls	r3, r3, #22
 800d29e:	d4dd      	bmi.n	800d25c <_fflush_r+0xc>
 800d2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a2:	f000 f91a 	bl	800d4da <__retarget_lock_release_recursive>
 800d2a6:	e7d9      	b.n	800d25c <_fflush_r+0xc>
 800d2a8:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <_fflush_r+0x70>)
 800d2aa:	429c      	cmp	r4, r3
 800d2ac:	d101      	bne.n	800d2b2 <_fflush_r+0x62>
 800d2ae:	68ac      	ldr	r4, [r5, #8]
 800d2b0:	e7df      	b.n	800d272 <_fflush_r+0x22>
 800d2b2:	4b04      	ldr	r3, [pc, #16]	; (800d2c4 <_fflush_r+0x74>)
 800d2b4:	429c      	cmp	r4, r3
 800d2b6:	bf08      	it	eq
 800d2b8:	68ec      	ldreq	r4, [r5, #12]
 800d2ba:	e7da      	b.n	800d272 <_fflush_r+0x22>
 800d2bc:	08010e70 	.word	0x08010e70
 800d2c0:	08010e90 	.word	0x08010e90
 800d2c4:	08010e50 	.word	0x08010e50

0800d2c8 <std>:
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	b510      	push	{r4, lr}
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2d6:	6083      	str	r3, [r0, #8]
 800d2d8:	8181      	strh	r1, [r0, #12]
 800d2da:	6643      	str	r3, [r0, #100]	; 0x64
 800d2dc:	81c2      	strh	r2, [r0, #14]
 800d2de:	6183      	str	r3, [r0, #24]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	2208      	movs	r2, #8
 800d2e4:	305c      	adds	r0, #92	; 0x5c
 800d2e6:	f7fd f8b7 	bl	800a458 <memset>
 800d2ea:	4b05      	ldr	r3, [pc, #20]	; (800d300 <std+0x38>)
 800d2ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d2ee:	4b05      	ldr	r3, [pc, #20]	; (800d304 <std+0x3c>)
 800d2f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2f2:	4b05      	ldr	r3, [pc, #20]	; (800d308 <std+0x40>)
 800d2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2f6:	4b05      	ldr	r3, [pc, #20]	; (800d30c <std+0x44>)
 800d2f8:	6224      	str	r4, [r4, #32]
 800d2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d2fc:	bd10      	pop	{r4, pc}
 800d2fe:	bf00      	nop
 800d300:	0800afb5 	.word	0x0800afb5
 800d304:	0800afdb 	.word	0x0800afdb
 800d308:	0800b013 	.word	0x0800b013
 800d30c:	0800b037 	.word	0x0800b037

0800d310 <_cleanup_r>:
 800d310:	4901      	ldr	r1, [pc, #4]	; (800d318 <_cleanup_r+0x8>)
 800d312:	f000 b8c1 	b.w	800d498 <_fwalk_reent>
 800d316:	bf00      	nop
 800d318:	0800d251 	.word	0x0800d251

0800d31c <__sfmoreglue>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	2268      	movs	r2, #104	; 0x68
 800d320:	1e4d      	subs	r5, r1, #1
 800d322:	4355      	muls	r5, r2
 800d324:	460e      	mov	r6, r1
 800d326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d32a:	f7fd f909 	bl	800a540 <_malloc_r>
 800d32e:	4604      	mov	r4, r0
 800d330:	b140      	cbz	r0, 800d344 <__sfmoreglue+0x28>
 800d332:	2100      	movs	r1, #0
 800d334:	e9c0 1600 	strd	r1, r6, [r0]
 800d338:	300c      	adds	r0, #12
 800d33a:	60a0      	str	r0, [r4, #8]
 800d33c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d340:	f7fd f88a 	bl	800a458 <memset>
 800d344:	4620      	mov	r0, r4
 800d346:	bd70      	pop	{r4, r5, r6, pc}

0800d348 <__sfp_lock_acquire>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__sfp_lock_acquire+0x8>)
 800d34a:	f000 b8c5 	b.w	800d4d8 <__retarget_lock_acquire_recursive>
 800d34e:	bf00      	nop
 800d350:	200122c9 	.word	0x200122c9

0800d354 <__sfp_lock_release>:
 800d354:	4801      	ldr	r0, [pc, #4]	; (800d35c <__sfp_lock_release+0x8>)
 800d356:	f000 b8c0 	b.w	800d4da <__retarget_lock_release_recursive>
 800d35a:	bf00      	nop
 800d35c:	200122c9 	.word	0x200122c9

0800d360 <__sinit_lock_acquire>:
 800d360:	4801      	ldr	r0, [pc, #4]	; (800d368 <__sinit_lock_acquire+0x8>)
 800d362:	f000 b8b9 	b.w	800d4d8 <__retarget_lock_acquire_recursive>
 800d366:	bf00      	nop
 800d368:	200122ca 	.word	0x200122ca

0800d36c <__sinit_lock_release>:
 800d36c:	4801      	ldr	r0, [pc, #4]	; (800d374 <__sinit_lock_release+0x8>)
 800d36e:	f000 b8b4 	b.w	800d4da <__retarget_lock_release_recursive>
 800d372:	bf00      	nop
 800d374:	200122ca 	.word	0x200122ca

0800d378 <__sinit>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	4604      	mov	r4, r0
 800d37c:	f7ff fff0 	bl	800d360 <__sinit_lock_acquire>
 800d380:	69a3      	ldr	r3, [r4, #24]
 800d382:	b11b      	cbz	r3, 800d38c <__sinit+0x14>
 800d384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d388:	f7ff bff0 	b.w	800d36c <__sinit_lock_release>
 800d38c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d390:	6523      	str	r3, [r4, #80]	; 0x50
 800d392:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <__sinit+0x68>)
 800d394:	4a13      	ldr	r2, [pc, #76]	; (800d3e4 <__sinit+0x6c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	62a2      	str	r2, [r4, #40]	; 0x28
 800d39a:	42a3      	cmp	r3, r4
 800d39c:	bf04      	itt	eq
 800d39e:	2301      	moveq	r3, #1
 800d3a0:	61a3      	streq	r3, [r4, #24]
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 f820 	bl	800d3e8 <__sfp>
 800d3a8:	6060      	str	r0, [r4, #4]
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 f81c 	bl	800d3e8 <__sfp>
 800d3b0:	60a0      	str	r0, [r4, #8]
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 f818 	bl	800d3e8 <__sfp>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	60e0      	str	r0, [r4, #12]
 800d3bc:	2104      	movs	r1, #4
 800d3be:	6860      	ldr	r0, [r4, #4]
 800d3c0:	f7ff ff82 	bl	800d2c8 <std>
 800d3c4:	68a0      	ldr	r0, [r4, #8]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	2109      	movs	r1, #9
 800d3ca:	f7ff ff7d 	bl	800d2c8 <std>
 800d3ce:	68e0      	ldr	r0, [r4, #12]
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	2112      	movs	r1, #18
 800d3d4:	f7ff ff78 	bl	800d2c8 <std>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	61a3      	str	r3, [r4, #24]
 800d3dc:	e7d2      	b.n	800d384 <__sinit+0xc>
 800d3de:	bf00      	nop
 800d3e0:	08010ac0 	.word	0x08010ac0
 800d3e4:	0800d311 	.word	0x0800d311

0800d3e8 <__sfp>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	4607      	mov	r7, r0
 800d3ec:	f7ff ffac 	bl	800d348 <__sfp_lock_acquire>
 800d3f0:	4b1e      	ldr	r3, [pc, #120]	; (800d46c <__sfp+0x84>)
 800d3f2:	681e      	ldr	r6, [r3, #0]
 800d3f4:	69b3      	ldr	r3, [r6, #24]
 800d3f6:	b913      	cbnz	r3, 800d3fe <__sfp+0x16>
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f7ff ffbd 	bl	800d378 <__sinit>
 800d3fe:	3648      	adds	r6, #72	; 0x48
 800d400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d404:	3b01      	subs	r3, #1
 800d406:	d503      	bpl.n	800d410 <__sfp+0x28>
 800d408:	6833      	ldr	r3, [r6, #0]
 800d40a:	b30b      	cbz	r3, 800d450 <__sfp+0x68>
 800d40c:	6836      	ldr	r6, [r6, #0]
 800d40e:	e7f7      	b.n	800d400 <__sfp+0x18>
 800d410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d414:	b9d5      	cbnz	r5, 800d44c <__sfp+0x64>
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <__sfp+0x88>)
 800d418:	60e3      	str	r3, [r4, #12]
 800d41a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d41e:	6665      	str	r5, [r4, #100]	; 0x64
 800d420:	f000 f859 	bl	800d4d6 <__retarget_lock_init_recursive>
 800d424:	f7ff ff96 	bl	800d354 <__sfp_lock_release>
 800d428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d42c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d430:	6025      	str	r5, [r4, #0]
 800d432:	61a5      	str	r5, [r4, #24]
 800d434:	2208      	movs	r2, #8
 800d436:	4629      	mov	r1, r5
 800d438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d43c:	f7fd f80c 	bl	800a458 <memset>
 800d440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d448:	4620      	mov	r0, r4
 800d44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d44c:	3468      	adds	r4, #104	; 0x68
 800d44e:	e7d9      	b.n	800d404 <__sfp+0x1c>
 800d450:	2104      	movs	r1, #4
 800d452:	4638      	mov	r0, r7
 800d454:	f7ff ff62 	bl	800d31c <__sfmoreglue>
 800d458:	4604      	mov	r4, r0
 800d45a:	6030      	str	r0, [r6, #0]
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d1d5      	bne.n	800d40c <__sfp+0x24>
 800d460:	f7ff ff78 	bl	800d354 <__sfp_lock_release>
 800d464:	230c      	movs	r3, #12
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	e7ee      	b.n	800d448 <__sfp+0x60>
 800d46a:	bf00      	nop
 800d46c:	08010ac0 	.word	0x08010ac0
 800d470:	ffff0001 	.word	0xffff0001

0800d474 <fiprintf>:
 800d474:	b40e      	push	{r1, r2, r3}
 800d476:	b503      	push	{r0, r1, lr}
 800d478:	4601      	mov	r1, r0
 800d47a:	ab03      	add	r3, sp, #12
 800d47c:	4805      	ldr	r0, [pc, #20]	; (800d494 <fiprintf+0x20>)
 800d47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d482:	6800      	ldr	r0, [r0, #0]
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	f000 f8ad 	bl	800d5e4 <_vfiprintf_r>
 800d48a:	b002      	add	sp, #8
 800d48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d490:	b003      	add	sp, #12
 800d492:	4770      	bx	lr
 800d494:	20000014 	.word	0x20000014

0800d498 <_fwalk_reent>:
 800d498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d49c:	4606      	mov	r6, r0
 800d49e:	4688      	mov	r8, r1
 800d4a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4a4:	2700      	movs	r7, #0
 800d4a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4aa:	f1b9 0901 	subs.w	r9, r9, #1
 800d4ae:	d505      	bpl.n	800d4bc <_fwalk_reent+0x24>
 800d4b0:	6824      	ldr	r4, [r4, #0]
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	d1f7      	bne.n	800d4a6 <_fwalk_reent+0xe>
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4bc:	89ab      	ldrh	r3, [r5, #12]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d907      	bls.n	800d4d2 <_fwalk_reent+0x3a>
 800d4c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	d003      	beq.n	800d4d2 <_fwalk_reent+0x3a>
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	47c0      	blx	r8
 800d4d0:	4307      	orrs	r7, r0
 800d4d2:	3568      	adds	r5, #104	; 0x68
 800d4d4:	e7e9      	b.n	800d4aa <_fwalk_reent+0x12>

0800d4d6 <__retarget_lock_init_recursive>:
 800d4d6:	4770      	bx	lr

0800d4d8 <__retarget_lock_acquire_recursive>:
 800d4d8:	4770      	bx	lr

0800d4da <__retarget_lock_release_recursive>:
 800d4da:	4770      	bx	lr

0800d4dc <__ascii_mbtowc>:
 800d4dc:	b082      	sub	sp, #8
 800d4de:	b901      	cbnz	r1, 800d4e2 <__ascii_mbtowc+0x6>
 800d4e0:	a901      	add	r1, sp, #4
 800d4e2:	b142      	cbz	r2, 800d4f6 <__ascii_mbtowc+0x1a>
 800d4e4:	b14b      	cbz	r3, 800d4fa <__ascii_mbtowc+0x1e>
 800d4e6:	7813      	ldrb	r3, [r2, #0]
 800d4e8:	600b      	str	r3, [r1, #0]
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	1e10      	subs	r0, r2, #0
 800d4ee:	bf18      	it	ne
 800d4f0:	2001      	movne	r0, #1
 800d4f2:	b002      	add	sp, #8
 800d4f4:	4770      	bx	lr
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	e7fb      	b.n	800d4f2 <__ascii_mbtowc+0x16>
 800d4fa:	f06f 0001 	mvn.w	r0, #1
 800d4fe:	e7f8      	b.n	800d4f2 <__ascii_mbtowc+0x16>

0800d500 <memmove>:
 800d500:	4288      	cmp	r0, r1
 800d502:	b510      	push	{r4, lr}
 800d504:	eb01 0402 	add.w	r4, r1, r2
 800d508:	d902      	bls.n	800d510 <memmove+0x10>
 800d50a:	4284      	cmp	r4, r0
 800d50c:	4623      	mov	r3, r4
 800d50e:	d807      	bhi.n	800d520 <memmove+0x20>
 800d510:	1e43      	subs	r3, r0, #1
 800d512:	42a1      	cmp	r1, r4
 800d514:	d008      	beq.n	800d528 <memmove+0x28>
 800d516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d51e:	e7f8      	b.n	800d512 <memmove+0x12>
 800d520:	4402      	add	r2, r0
 800d522:	4601      	mov	r1, r0
 800d524:	428a      	cmp	r2, r1
 800d526:	d100      	bne.n	800d52a <memmove+0x2a>
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d532:	e7f7      	b.n	800d524 <memmove+0x24>

0800d534 <_realloc_r>:
 800d534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d538:	4680      	mov	r8, r0
 800d53a:	4614      	mov	r4, r2
 800d53c:	460e      	mov	r6, r1
 800d53e:	b921      	cbnz	r1, 800d54a <_realloc_r+0x16>
 800d540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d544:	4611      	mov	r1, r2
 800d546:	f7fc bffb 	b.w	800a540 <_malloc_r>
 800d54a:	b92a      	cbnz	r2, 800d558 <_realloc_r+0x24>
 800d54c:	f7fc ff8c 	bl	800a468 <_free_r>
 800d550:	4625      	mov	r5, r4
 800d552:	4628      	mov	r0, r5
 800d554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d558:	f000 faae 	bl	800dab8 <_malloc_usable_size_r>
 800d55c:	4284      	cmp	r4, r0
 800d55e:	4607      	mov	r7, r0
 800d560:	d802      	bhi.n	800d568 <_realloc_r+0x34>
 800d562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d566:	d812      	bhi.n	800d58e <_realloc_r+0x5a>
 800d568:	4621      	mov	r1, r4
 800d56a:	4640      	mov	r0, r8
 800d56c:	f7fc ffe8 	bl	800a540 <_malloc_r>
 800d570:	4605      	mov	r5, r0
 800d572:	2800      	cmp	r0, #0
 800d574:	d0ed      	beq.n	800d552 <_realloc_r+0x1e>
 800d576:	42bc      	cmp	r4, r7
 800d578:	4622      	mov	r2, r4
 800d57a:	4631      	mov	r1, r6
 800d57c:	bf28      	it	cs
 800d57e:	463a      	movcs	r2, r7
 800d580:	f7fe fc12 	bl	800bda8 <memcpy>
 800d584:	4631      	mov	r1, r6
 800d586:	4640      	mov	r0, r8
 800d588:	f7fc ff6e 	bl	800a468 <_free_r>
 800d58c:	e7e1      	b.n	800d552 <_realloc_r+0x1e>
 800d58e:	4635      	mov	r5, r6
 800d590:	e7df      	b.n	800d552 <_realloc_r+0x1e>

0800d592 <__sfputc_r>:
 800d592:	6893      	ldr	r3, [r2, #8]
 800d594:	3b01      	subs	r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	b410      	push	{r4}
 800d59a:	6093      	str	r3, [r2, #8]
 800d59c:	da08      	bge.n	800d5b0 <__sfputc_r+0x1e>
 800d59e:	6994      	ldr	r4, [r2, #24]
 800d5a0:	42a3      	cmp	r3, r4
 800d5a2:	db01      	blt.n	800d5a8 <__sfputc_r+0x16>
 800d5a4:	290a      	cmp	r1, #10
 800d5a6:	d103      	bne.n	800d5b0 <__sfputc_r+0x1e>
 800d5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ac:	f000 b94a 	b.w	800d844 <__swbuf_r>
 800d5b0:	6813      	ldr	r3, [r2, #0]
 800d5b2:	1c58      	adds	r0, r3, #1
 800d5b4:	6010      	str	r0, [r2, #0]
 800d5b6:	7019      	strb	r1, [r3, #0]
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <__sfputs_r>:
 800d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	4614      	mov	r4, r2
 800d5c8:	18d5      	adds	r5, r2, r3
 800d5ca:	42ac      	cmp	r4, r5
 800d5cc:	d101      	bne.n	800d5d2 <__sfputs_r+0x12>
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	e007      	b.n	800d5e2 <__sfputs_r+0x22>
 800d5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5d6:	463a      	mov	r2, r7
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7ff ffda 	bl	800d592 <__sfputc_r>
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	d1f3      	bne.n	800d5ca <__sfputs_r+0xa>
 800d5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5e4 <_vfiprintf_r>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	b09d      	sub	sp, #116	; 0x74
 800d5ec:	4614      	mov	r4, r2
 800d5ee:	4698      	mov	r8, r3
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	b118      	cbz	r0, 800d5fc <_vfiprintf_r+0x18>
 800d5f4:	6983      	ldr	r3, [r0, #24]
 800d5f6:	b90b      	cbnz	r3, 800d5fc <_vfiprintf_r+0x18>
 800d5f8:	f7ff febe 	bl	800d378 <__sinit>
 800d5fc:	4b89      	ldr	r3, [pc, #548]	; (800d824 <_vfiprintf_r+0x240>)
 800d5fe:	429d      	cmp	r5, r3
 800d600:	d11b      	bne.n	800d63a <_vfiprintf_r+0x56>
 800d602:	6875      	ldr	r5, [r6, #4]
 800d604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d606:	07d9      	lsls	r1, r3, #31
 800d608:	d405      	bmi.n	800d616 <_vfiprintf_r+0x32>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	059a      	lsls	r2, r3, #22
 800d60e:	d402      	bmi.n	800d616 <_vfiprintf_r+0x32>
 800d610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d612:	f7ff ff61 	bl	800d4d8 <__retarget_lock_acquire_recursive>
 800d616:	89ab      	ldrh	r3, [r5, #12]
 800d618:	071b      	lsls	r3, r3, #28
 800d61a:	d501      	bpl.n	800d620 <_vfiprintf_r+0x3c>
 800d61c:	692b      	ldr	r3, [r5, #16]
 800d61e:	b9eb      	cbnz	r3, 800d65c <_vfiprintf_r+0x78>
 800d620:	4629      	mov	r1, r5
 800d622:	4630      	mov	r0, r6
 800d624:	f000 f96e 	bl	800d904 <__swsetup_r>
 800d628:	b1c0      	cbz	r0, 800d65c <_vfiprintf_r+0x78>
 800d62a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d62c:	07dc      	lsls	r4, r3, #31
 800d62e:	d50e      	bpl.n	800d64e <_vfiprintf_r+0x6a>
 800d630:	f04f 30ff 	mov.w	r0, #4294967295
 800d634:	b01d      	add	sp, #116	; 0x74
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63a:	4b7b      	ldr	r3, [pc, #492]	; (800d828 <_vfiprintf_r+0x244>)
 800d63c:	429d      	cmp	r5, r3
 800d63e:	d101      	bne.n	800d644 <_vfiprintf_r+0x60>
 800d640:	68b5      	ldr	r5, [r6, #8]
 800d642:	e7df      	b.n	800d604 <_vfiprintf_r+0x20>
 800d644:	4b79      	ldr	r3, [pc, #484]	; (800d82c <_vfiprintf_r+0x248>)
 800d646:	429d      	cmp	r5, r3
 800d648:	bf08      	it	eq
 800d64a:	68f5      	ldreq	r5, [r6, #12]
 800d64c:	e7da      	b.n	800d604 <_vfiprintf_r+0x20>
 800d64e:	89ab      	ldrh	r3, [r5, #12]
 800d650:	0598      	lsls	r0, r3, #22
 800d652:	d4ed      	bmi.n	800d630 <_vfiprintf_r+0x4c>
 800d654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d656:	f7ff ff40 	bl	800d4da <__retarget_lock_release_recursive>
 800d65a:	e7e9      	b.n	800d630 <_vfiprintf_r+0x4c>
 800d65c:	2300      	movs	r3, #0
 800d65e:	9309      	str	r3, [sp, #36]	; 0x24
 800d660:	2320      	movs	r3, #32
 800d662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d666:	f8cd 800c 	str.w	r8, [sp, #12]
 800d66a:	2330      	movs	r3, #48	; 0x30
 800d66c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d830 <_vfiprintf_r+0x24c>
 800d670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d674:	f04f 0901 	mov.w	r9, #1
 800d678:	4623      	mov	r3, r4
 800d67a:	469a      	mov	sl, r3
 800d67c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d680:	b10a      	cbz	r2, 800d686 <_vfiprintf_r+0xa2>
 800d682:	2a25      	cmp	r2, #37	; 0x25
 800d684:	d1f9      	bne.n	800d67a <_vfiprintf_r+0x96>
 800d686:	ebba 0b04 	subs.w	fp, sl, r4
 800d68a:	d00b      	beq.n	800d6a4 <_vfiprintf_r+0xc0>
 800d68c:	465b      	mov	r3, fp
 800d68e:	4622      	mov	r2, r4
 800d690:	4629      	mov	r1, r5
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff ff94 	bl	800d5c0 <__sfputs_r>
 800d698:	3001      	adds	r0, #1
 800d69a:	f000 80aa 	beq.w	800d7f2 <_vfiprintf_r+0x20e>
 800d69e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6a0:	445a      	add	r2, fp
 800d6a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 80a2 	beq.w	800d7f2 <_vfiprintf_r+0x20e>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6b8:	f10a 0a01 	add.w	sl, sl, #1
 800d6bc:	9304      	str	r3, [sp, #16]
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6c6:	4654      	mov	r4, sl
 800d6c8:	2205      	movs	r2, #5
 800d6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ce:	4858      	ldr	r0, [pc, #352]	; (800d830 <_vfiprintf_r+0x24c>)
 800d6d0:	f7f2 fd9e 	bl	8000210 <memchr>
 800d6d4:	9a04      	ldr	r2, [sp, #16]
 800d6d6:	b9d8      	cbnz	r0, 800d710 <_vfiprintf_r+0x12c>
 800d6d8:	06d1      	lsls	r1, r2, #27
 800d6da:	bf44      	itt	mi
 800d6dc:	2320      	movmi	r3, #32
 800d6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6e2:	0713      	lsls	r3, r2, #28
 800d6e4:	bf44      	itt	mi
 800d6e6:	232b      	movmi	r3, #43	; 0x2b
 800d6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f2:	d015      	beq.n	800d720 <_vfiprintf_r+0x13c>
 800d6f4:	9a07      	ldr	r2, [sp, #28]
 800d6f6:	4654      	mov	r4, sl
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	f04f 0c0a 	mov.w	ip, #10
 800d6fe:	4621      	mov	r1, r4
 800d700:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d704:	3b30      	subs	r3, #48	; 0x30
 800d706:	2b09      	cmp	r3, #9
 800d708:	d94e      	bls.n	800d7a8 <_vfiprintf_r+0x1c4>
 800d70a:	b1b0      	cbz	r0, 800d73a <_vfiprintf_r+0x156>
 800d70c:	9207      	str	r2, [sp, #28]
 800d70e:	e014      	b.n	800d73a <_vfiprintf_r+0x156>
 800d710:	eba0 0308 	sub.w	r3, r0, r8
 800d714:	fa09 f303 	lsl.w	r3, r9, r3
 800d718:	4313      	orrs	r3, r2
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	46a2      	mov	sl, r4
 800d71e:	e7d2      	b.n	800d6c6 <_vfiprintf_r+0xe2>
 800d720:	9b03      	ldr	r3, [sp, #12]
 800d722:	1d19      	adds	r1, r3, #4
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	9103      	str	r1, [sp, #12]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	bfbb      	ittet	lt
 800d72c:	425b      	neglt	r3, r3
 800d72e:	f042 0202 	orrlt.w	r2, r2, #2
 800d732:	9307      	strge	r3, [sp, #28]
 800d734:	9307      	strlt	r3, [sp, #28]
 800d736:	bfb8      	it	lt
 800d738:	9204      	strlt	r2, [sp, #16]
 800d73a:	7823      	ldrb	r3, [r4, #0]
 800d73c:	2b2e      	cmp	r3, #46	; 0x2e
 800d73e:	d10c      	bne.n	800d75a <_vfiprintf_r+0x176>
 800d740:	7863      	ldrb	r3, [r4, #1]
 800d742:	2b2a      	cmp	r3, #42	; 0x2a
 800d744:	d135      	bne.n	800d7b2 <_vfiprintf_r+0x1ce>
 800d746:	9b03      	ldr	r3, [sp, #12]
 800d748:	1d1a      	adds	r2, r3, #4
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	9203      	str	r2, [sp, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	bfb8      	it	lt
 800d752:	f04f 33ff 	movlt.w	r3, #4294967295
 800d756:	3402      	adds	r4, #2
 800d758:	9305      	str	r3, [sp, #20]
 800d75a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d840 <_vfiprintf_r+0x25c>
 800d75e:	7821      	ldrb	r1, [r4, #0]
 800d760:	2203      	movs	r2, #3
 800d762:	4650      	mov	r0, sl
 800d764:	f7f2 fd54 	bl	8000210 <memchr>
 800d768:	b140      	cbz	r0, 800d77c <_vfiprintf_r+0x198>
 800d76a:	2340      	movs	r3, #64	; 0x40
 800d76c:	eba0 000a 	sub.w	r0, r0, sl
 800d770:	fa03 f000 	lsl.w	r0, r3, r0
 800d774:	9b04      	ldr	r3, [sp, #16]
 800d776:	4303      	orrs	r3, r0
 800d778:	3401      	adds	r4, #1
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d780:	482c      	ldr	r0, [pc, #176]	; (800d834 <_vfiprintf_r+0x250>)
 800d782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d786:	2206      	movs	r2, #6
 800d788:	f7f2 fd42 	bl	8000210 <memchr>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d03f      	beq.n	800d810 <_vfiprintf_r+0x22c>
 800d790:	4b29      	ldr	r3, [pc, #164]	; (800d838 <_vfiprintf_r+0x254>)
 800d792:	bb1b      	cbnz	r3, 800d7dc <_vfiprintf_r+0x1f8>
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	3307      	adds	r3, #7
 800d798:	f023 0307 	bic.w	r3, r3, #7
 800d79c:	3308      	adds	r3, #8
 800d79e:	9303      	str	r3, [sp, #12]
 800d7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a2:	443b      	add	r3, r7
 800d7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a6:	e767      	b.n	800d678 <_vfiprintf_r+0x94>
 800d7a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	2001      	movs	r0, #1
 800d7b0:	e7a5      	b.n	800d6fe <_vfiprintf_r+0x11a>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	3401      	adds	r4, #1
 800d7b6:	9305      	str	r3, [sp, #20]
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	f04f 0c0a 	mov.w	ip, #10
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7c4:	3a30      	subs	r2, #48	; 0x30
 800d7c6:	2a09      	cmp	r2, #9
 800d7c8:	d903      	bls.n	800d7d2 <_vfiprintf_r+0x1ee>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d0c5      	beq.n	800d75a <_vfiprintf_r+0x176>
 800d7ce:	9105      	str	r1, [sp, #20]
 800d7d0:	e7c3      	b.n	800d75a <_vfiprintf_r+0x176>
 800d7d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e7f0      	b.n	800d7be <_vfiprintf_r+0x1da>
 800d7dc:	ab03      	add	r3, sp, #12
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	462a      	mov	r2, r5
 800d7e2:	4b16      	ldr	r3, [pc, #88]	; (800d83c <_vfiprintf_r+0x258>)
 800d7e4:	a904      	add	r1, sp, #16
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f7fc ffbe 	bl	800a768 <_printf_float>
 800d7ec:	4607      	mov	r7, r0
 800d7ee:	1c78      	adds	r0, r7, #1
 800d7f0:	d1d6      	bne.n	800d7a0 <_vfiprintf_r+0x1bc>
 800d7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7f4:	07d9      	lsls	r1, r3, #31
 800d7f6:	d405      	bmi.n	800d804 <_vfiprintf_r+0x220>
 800d7f8:	89ab      	ldrh	r3, [r5, #12]
 800d7fa:	059a      	lsls	r2, r3, #22
 800d7fc:	d402      	bmi.n	800d804 <_vfiprintf_r+0x220>
 800d7fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d800:	f7ff fe6b 	bl	800d4da <__retarget_lock_release_recursive>
 800d804:	89ab      	ldrh	r3, [r5, #12]
 800d806:	065b      	lsls	r3, r3, #25
 800d808:	f53f af12 	bmi.w	800d630 <_vfiprintf_r+0x4c>
 800d80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d80e:	e711      	b.n	800d634 <_vfiprintf_r+0x50>
 800d810:	ab03      	add	r3, sp, #12
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	462a      	mov	r2, r5
 800d816:	4b09      	ldr	r3, [pc, #36]	; (800d83c <_vfiprintf_r+0x258>)
 800d818:	a904      	add	r1, sp, #16
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7fd fa48 	bl	800acb0 <_printf_i>
 800d820:	e7e4      	b.n	800d7ec <_vfiprintf_r+0x208>
 800d822:	bf00      	nop
 800d824:	08010e70 	.word	0x08010e70
 800d828:	08010e90 	.word	0x08010e90
 800d82c:	08010e50 	.word	0x08010e50
 800d830:	08010ce4 	.word	0x08010ce4
 800d834:	08010cee 	.word	0x08010cee
 800d838:	0800a769 	.word	0x0800a769
 800d83c:	0800d5c1 	.word	0x0800d5c1
 800d840:	08010cea 	.word	0x08010cea

0800d844 <__swbuf_r>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	460e      	mov	r6, r1
 800d848:	4614      	mov	r4, r2
 800d84a:	4605      	mov	r5, r0
 800d84c:	b118      	cbz	r0, 800d856 <__swbuf_r+0x12>
 800d84e:	6983      	ldr	r3, [r0, #24]
 800d850:	b90b      	cbnz	r3, 800d856 <__swbuf_r+0x12>
 800d852:	f7ff fd91 	bl	800d378 <__sinit>
 800d856:	4b21      	ldr	r3, [pc, #132]	; (800d8dc <__swbuf_r+0x98>)
 800d858:	429c      	cmp	r4, r3
 800d85a:	d12b      	bne.n	800d8b4 <__swbuf_r+0x70>
 800d85c:	686c      	ldr	r4, [r5, #4]
 800d85e:	69a3      	ldr	r3, [r4, #24]
 800d860:	60a3      	str	r3, [r4, #8]
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	071a      	lsls	r2, r3, #28
 800d866:	d52f      	bpl.n	800d8c8 <__swbuf_r+0x84>
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	b36b      	cbz	r3, 800d8c8 <__swbuf_r+0x84>
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	6820      	ldr	r0, [r4, #0]
 800d870:	1ac0      	subs	r0, r0, r3
 800d872:	6963      	ldr	r3, [r4, #20]
 800d874:	b2f6      	uxtb	r6, r6
 800d876:	4283      	cmp	r3, r0
 800d878:	4637      	mov	r7, r6
 800d87a:	dc04      	bgt.n	800d886 <__swbuf_r+0x42>
 800d87c:	4621      	mov	r1, r4
 800d87e:	4628      	mov	r0, r5
 800d880:	f7ff fce6 	bl	800d250 <_fflush_r>
 800d884:	bb30      	cbnz	r0, 800d8d4 <__swbuf_r+0x90>
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	3b01      	subs	r3, #1
 800d88a:	60a3      	str	r3, [r4, #8]
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	6022      	str	r2, [r4, #0]
 800d892:	701e      	strb	r6, [r3, #0]
 800d894:	6963      	ldr	r3, [r4, #20]
 800d896:	3001      	adds	r0, #1
 800d898:	4283      	cmp	r3, r0
 800d89a:	d004      	beq.n	800d8a6 <__swbuf_r+0x62>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	07db      	lsls	r3, r3, #31
 800d8a0:	d506      	bpl.n	800d8b0 <__swbuf_r+0x6c>
 800d8a2:	2e0a      	cmp	r6, #10
 800d8a4:	d104      	bne.n	800d8b0 <__swbuf_r+0x6c>
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f7ff fcd1 	bl	800d250 <_fflush_r>
 800d8ae:	b988      	cbnz	r0, 800d8d4 <__swbuf_r+0x90>
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	; (800d8e0 <__swbuf_r+0x9c>)
 800d8b6:	429c      	cmp	r4, r3
 800d8b8:	d101      	bne.n	800d8be <__swbuf_r+0x7a>
 800d8ba:	68ac      	ldr	r4, [r5, #8]
 800d8bc:	e7cf      	b.n	800d85e <__swbuf_r+0x1a>
 800d8be:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <__swbuf_r+0xa0>)
 800d8c0:	429c      	cmp	r4, r3
 800d8c2:	bf08      	it	eq
 800d8c4:	68ec      	ldreq	r4, [r5, #12]
 800d8c6:	e7ca      	b.n	800d85e <__swbuf_r+0x1a>
 800d8c8:	4621      	mov	r1, r4
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f000 f81a 	bl	800d904 <__swsetup_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d0cb      	beq.n	800d86c <__swbuf_r+0x28>
 800d8d4:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d8:	e7ea      	b.n	800d8b0 <__swbuf_r+0x6c>
 800d8da:	bf00      	nop
 800d8dc:	08010e70 	.word	0x08010e70
 800d8e0:	08010e90 	.word	0x08010e90
 800d8e4:	08010e50 	.word	0x08010e50

0800d8e8 <__ascii_wctomb>:
 800d8e8:	b149      	cbz	r1, 800d8fe <__ascii_wctomb+0x16>
 800d8ea:	2aff      	cmp	r2, #255	; 0xff
 800d8ec:	bf85      	ittet	hi
 800d8ee:	238a      	movhi	r3, #138	; 0x8a
 800d8f0:	6003      	strhi	r3, [r0, #0]
 800d8f2:	700a      	strbls	r2, [r1, #0]
 800d8f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8f8:	bf98      	it	ls
 800d8fa:	2001      	movls	r0, #1
 800d8fc:	4770      	bx	lr
 800d8fe:	4608      	mov	r0, r1
 800d900:	4770      	bx	lr
	...

0800d904 <__swsetup_r>:
 800d904:	4b32      	ldr	r3, [pc, #200]	; (800d9d0 <__swsetup_r+0xcc>)
 800d906:	b570      	push	{r4, r5, r6, lr}
 800d908:	681d      	ldr	r5, [r3, #0]
 800d90a:	4606      	mov	r6, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	b125      	cbz	r5, 800d91a <__swsetup_r+0x16>
 800d910:	69ab      	ldr	r3, [r5, #24]
 800d912:	b913      	cbnz	r3, 800d91a <__swsetup_r+0x16>
 800d914:	4628      	mov	r0, r5
 800d916:	f7ff fd2f 	bl	800d378 <__sinit>
 800d91a:	4b2e      	ldr	r3, [pc, #184]	; (800d9d4 <__swsetup_r+0xd0>)
 800d91c:	429c      	cmp	r4, r3
 800d91e:	d10f      	bne.n	800d940 <__swsetup_r+0x3c>
 800d920:	686c      	ldr	r4, [r5, #4]
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d928:	0719      	lsls	r1, r3, #28
 800d92a:	d42c      	bmi.n	800d986 <__swsetup_r+0x82>
 800d92c:	06dd      	lsls	r5, r3, #27
 800d92e:	d411      	bmi.n	800d954 <__swsetup_r+0x50>
 800d930:	2309      	movs	r3, #9
 800d932:	6033      	str	r3, [r6, #0]
 800d934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d938:	81a3      	strh	r3, [r4, #12]
 800d93a:	f04f 30ff 	mov.w	r0, #4294967295
 800d93e:	e03e      	b.n	800d9be <__swsetup_r+0xba>
 800d940:	4b25      	ldr	r3, [pc, #148]	; (800d9d8 <__swsetup_r+0xd4>)
 800d942:	429c      	cmp	r4, r3
 800d944:	d101      	bne.n	800d94a <__swsetup_r+0x46>
 800d946:	68ac      	ldr	r4, [r5, #8]
 800d948:	e7eb      	b.n	800d922 <__swsetup_r+0x1e>
 800d94a:	4b24      	ldr	r3, [pc, #144]	; (800d9dc <__swsetup_r+0xd8>)
 800d94c:	429c      	cmp	r4, r3
 800d94e:	bf08      	it	eq
 800d950:	68ec      	ldreq	r4, [r5, #12]
 800d952:	e7e6      	b.n	800d922 <__swsetup_r+0x1e>
 800d954:	0758      	lsls	r0, r3, #29
 800d956:	d512      	bpl.n	800d97e <__swsetup_r+0x7a>
 800d958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d95a:	b141      	cbz	r1, 800d96e <__swsetup_r+0x6a>
 800d95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d960:	4299      	cmp	r1, r3
 800d962:	d002      	beq.n	800d96a <__swsetup_r+0x66>
 800d964:	4630      	mov	r0, r6
 800d966:	f7fc fd7f 	bl	800a468 <_free_r>
 800d96a:	2300      	movs	r3, #0
 800d96c:	6363      	str	r3, [r4, #52]	; 0x34
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d974:	81a3      	strh	r3, [r4, #12]
 800d976:	2300      	movs	r3, #0
 800d978:	6063      	str	r3, [r4, #4]
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	f043 0308 	orr.w	r3, r3, #8
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	6923      	ldr	r3, [r4, #16]
 800d988:	b94b      	cbnz	r3, 800d99e <__swsetup_r+0x9a>
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d994:	d003      	beq.n	800d99e <__swsetup_r+0x9a>
 800d996:	4621      	mov	r1, r4
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f84d 	bl	800da38 <__smakebuf_r>
 800d99e:	89a0      	ldrh	r0, [r4, #12]
 800d9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9a4:	f010 0301 	ands.w	r3, r0, #1
 800d9a8:	d00a      	beq.n	800d9c0 <__swsetup_r+0xbc>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60a3      	str	r3, [r4, #8]
 800d9ae:	6963      	ldr	r3, [r4, #20]
 800d9b0:	425b      	negs	r3, r3
 800d9b2:	61a3      	str	r3, [r4, #24]
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	b943      	cbnz	r3, 800d9ca <__swsetup_r+0xc6>
 800d9b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9bc:	d1ba      	bne.n	800d934 <__swsetup_r+0x30>
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	0781      	lsls	r1, r0, #30
 800d9c2:	bf58      	it	pl
 800d9c4:	6963      	ldrpl	r3, [r4, #20]
 800d9c6:	60a3      	str	r3, [r4, #8]
 800d9c8:	e7f4      	b.n	800d9b4 <__swsetup_r+0xb0>
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	e7f7      	b.n	800d9be <__swsetup_r+0xba>
 800d9ce:	bf00      	nop
 800d9d0:	20000014 	.word	0x20000014
 800d9d4:	08010e70 	.word	0x08010e70
 800d9d8:	08010e90 	.word	0x08010e90
 800d9dc:	08010e50 	.word	0x08010e50

0800d9e0 <abort>:
 800d9e0:	b508      	push	{r3, lr}
 800d9e2:	2006      	movs	r0, #6
 800d9e4:	f000 f898 	bl	800db18 <raise>
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	f7f5 ffaf 	bl	800394c <_exit>

0800d9ee <__swhatbuf_r>:
 800d9ee:	b570      	push	{r4, r5, r6, lr}
 800d9f0:	460e      	mov	r6, r1
 800d9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f6:	2900      	cmp	r1, #0
 800d9f8:	b096      	sub	sp, #88	; 0x58
 800d9fa:	4614      	mov	r4, r2
 800d9fc:	461d      	mov	r5, r3
 800d9fe:	da08      	bge.n	800da12 <__swhatbuf_r+0x24>
 800da00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	602a      	str	r2, [r5, #0]
 800da08:	061a      	lsls	r2, r3, #24
 800da0a:	d410      	bmi.n	800da2e <__swhatbuf_r+0x40>
 800da0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da10:	e00e      	b.n	800da30 <__swhatbuf_r+0x42>
 800da12:	466a      	mov	r2, sp
 800da14:	f000 f89c 	bl	800db50 <_fstat_r>
 800da18:	2800      	cmp	r0, #0
 800da1a:	dbf1      	blt.n	800da00 <__swhatbuf_r+0x12>
 800da1c:	9a01      	ldr	r2, [sp, #4]
 800da1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da26:	425a      	negs	r2, r3
 800da28:	415a      	adcs	r2, r3
 800da2a:	602a      	str	r2, [r5, #0]
 800da2c:	e7ee      	b.n	800da0c <__swhatbuf_r+0x1e>
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	2000      	movs	r0, #0
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	b016      	add	sp, #88	; 0x58
 800da36:	bd70      	pop	{r4, r5, r6, pc}

0800da38 <__smakebuf_r>:
 800da38:	898b      	ldrh	r3, [r1, #12]
 800da3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da3c:	079d      	lsls	r5, r3, #30
 800da3e:	4606      	mov	r6, r0
 800da40:	460c      	mov	r4, r1
 800da42:	d507      	bpl.n	800da54 <__smakebuf_r+0x1c>
 800da44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	6123      	str	r3, [r4, #16]
 800da4c:	2301      	movs	r3, #1
 800da4e:	6163      	str	r3, [r4, #20]
 800da50:	b002      	add	sp, #8
 800da52:	bd70      	pop	{r4, r5, r6, pc}
 800da54:	ab01      	add	r3, sp, #4
 800da56:	466a      	mov	r2, sp
 800da58:	f7ff ffc9 	bl	800d9ee <__swhatbuf_r>
 800da5c:	9900      	ldr	r1, [sp, #0]
 800da5e:	4605      	mov	r5, r0
 800da60:	4630      	mov	r0, r6
 800da62:	f7fc fd6d 	bl	800a540 <_malloc_r>
 800da66:	b948      	cbnz	r0, 800da7c <__smakebuf_r+0x44>
 800da68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6c:	059a      	lsls	r2, r3, #22
 800da6e:	d4ef      	bmi.n	800da50 <__smakebuf_r+0x18>
 800da70:	f023 0303 	bic.w	r3, r3, #3
 800da74:	f043 0302 	orr.w	r3, r3, #2
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	e7e3      	b.n	800da44 <__smakebuf_r+0xc>
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <__smakebuf_r+0x7c>)
 800da7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	6020      	str	r0, [r4, #0]
 800da84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	9b00      	ldr	r3, [sp, #0]
 800da8c:	6163      	str	r3, [r4, #20]
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	6120      	str	r0, [r4, #16]
 800da92:	b15b      	cbz	r3, 800daac <__smakebuf_r+0x74>
 800da94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da98:	4630      	mov	r0, r6
 800da9a:	f000 f86b 	bl	800db74 <_isatty_r>
 800da9e:	b128      	cbz	r0, 800daac <__smakebuf_r+0x74>
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	f023 0303 	bic.w	r3, r3, #3
 800daa6:	f043 0301 	orr.w	r3, r3, #1
 800daaa:	81a3      	strh	r3, [r4, #12]
 800daac:	89a0      	ldrh	r0, [r4, #12]
 800daae:	4305      	orrs	r5, r0
 800dab0:	81a5      	strh	r5, [r4, #12]
 800dab2:	e7cd      	b.n	800da50 <__smakebuf_r+0x18>
 800dab4:	0800d311 	.word	0x0800d311

0800dab8 <_malloc_usable_size_r>:
 800dab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dabc:	1f18      	subs	r0, r3, #4
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	bfbc      	itt	lt
 800dac2:	580b      	ldrlt	r3, [r1, r0]
 800dac4:	18c0      	addlt	r0, r0, r3
 800dac6:	4770      	bx	lr

0800dac8 <_raise_r>:
 800dac8:	291f      	cmp	r1, #31
 800daca:	b538      	push	{r3, r4, r5, lr}
 800dacc:	4604      	mov	r4, r0
 800dace:	460d      	mov	r5, r1
 800dad0:	d904      	bls.n	800dadc <_raise_r+0x14>
 800dad2:	2316      	movs	r3, #22
 800dad4:	6003      	str	r3, [r0, #0]
 800dad6:	f04f 30ff 	mov.w	r0, #4294967295
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dade:	b112      	cbz	r2, 800dae6 <_raise_r+0x1e>
 800dae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dae4:	b94b      	cbnz	r3, 800dafa <_raise_r+0x32>
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 f830 	bl	800db4c <_getpid_r>
 800daec:	462a      	mov	r2, r5
 800daee:	4601      	mov	r1, r0
 800daf0:	4620      	mov	r0, r4
 800daf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daf6:	f000 b817 	b.w	800db28 <_kill_r>
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d00a      	beq.n	800db14 <_raise_r+0x4c>
 800dafe:	1c59      	adds	r1, r3, #1
 800db00:	d103      	bne.n	800db0a <_raise_r+0x42>
 800db02:	2316      	movs	r3, #22
 800db04:	6003      	str	r3, [r0, #0]
 800db06:	2001      	movs	r0, #1
 800db08:	e7e7      	b.n	800dada <_raise_r+0x12>
 800db0a:	2400      	movs	r4, #0
 800db0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db10:	4628      	mov	r0, r5
 800db12:	4798      	blx	r3
 800db14:	2000      	movs	r0, #0
 800db16:	e7e0      	b.n	800dada <_raise_r+0x12>

0800db18 <raise>:
 800db18:	4b02      	ldr	r3, [pc, #8]	; (800db24 <raise+0xc>)
 800db1a:	4601      	mov	r1, r0
 800db1c:	6818      	ldr	r0, [r3, #0]
 800db1e:	f7ff bfd3 	b.w	800dac8 <_raise_r>
 800db22:	bf00      	nop
 800db24:	20000014 	.word	0x20000014

0800db28 <_kill_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d07      	ldr	r5, [pc, #28]	; (800db48 <_kill_r+0x20>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	4611      	mov	r1, r2
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	f7f5 fef9 	bl	800392c <_kill>
 800db3a:	1c43      	adds	r3, r0, #1
 800db3c:	d102      	bne.n	800db44 <_kill_r+0x1c>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	b103      	cbz	r3, 800db44 <_kill_r+0x1c>
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	bd38      	pop	{r3, r4, r5, pc}
 800db46:	bf00      	nop
 800db48:	200122c4 	.word	0x200122c4

0800db4c <_getpid_r>:
 800db4c:	f7f5 bee6 	b.w	800391c <_getpid>

0800db50 <_fstat_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4d07      	ldr	r5, [pc, #28]	; (800db70 <_fstat_r+0x20>)
 800db54:	2300      	movs	r3, #0
 800db56:	4604      	mov	r4, r0
 800db58:	4608      	mov	r0, r1
 800db5a:	4611      	mov	r1, r2
 800db5c:	602b      	str	r3, [r5, #0]
 800db5e:	f7f5 ff44 	bl	80039ea <_fstat>
 800db62:	1c43      	adds	r3, r0, #1
 800db64:	d102      	bne.n	800db6c <_fstat_r+0x1c>
 800db66:	682b      	ldr	r3, [r5, #0]
 800db68:	b103      	cbz	r3, 800db6c <_fstat_r+0x1c>
 800db6a:	6023      	str	r3, [r4, #0]
 800db6c:	bd38      	pop	{r3, r4, r5, pc}
 800db6e:	bf00      	nop
 800db70:	200122c4 	.word	0x200122c4

0800db74 <_isatty_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d06      	ldr	r5, [pc, #24]	; (800db90 <_isatty_r+0x1c>)
 800db78:	2300      	movs	r3, #0
 800db7a:	4604      	mov	r4, r0
 800db7c:	4608      	mov	r0, r1
 800db7e:	602b      	str	r3, [r5, #0]
 800db80:	f7f5 ff43 	bl	8003a0a <_isatty>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_isatty_r+0x1a>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_isatty_r+0x1a>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	200122c4 	.word	0x200122c4
 800db94:	00000000 	.word	0x00000000

0800db98 <cos>:
 800db98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db9a:	ec53 2b10 	vmov	r2, r3, d0
 800db9e:	4826      	ldr	r0, [pc, #152]	; (800dc38 <cos+0xa0>)
 800dba0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dba4:	4281      	cmp	r1, r0
 800dba6:	dc06      	bgt.n	800dbb6 <cos+0x1e>
 800dba8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dc30 <cos+0x98>
 800dbac:	b005      	add	sp, #20
 800dbae:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbb2:	f001 bcd5 	b.w	800f560 <__kernel_cos>
 800dbb6:	4821      	ldr	r0, [pc, #132]	; (800dc3c <cos+0xa4>)
 800dbb8:	4281      	cmp	r1, r0
 800dbba:	dd09      	ble.n	800dbd0 <cos+0x38>
 800dbbc:	ee10 0a10 	vmov	r0, s0
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f7f2 fb79 	bl	80002b8 <__aeabi_dsub>
 800dbc6:	ec41 0b10 	vmov	d0, r0, r1
 800dbca:	b005      	add	sp, #20
 800dbcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbd0:	4668      	mov	r0, sp
 800dbd2:	f001 fa05 	bl	800efe0 <__ieee754_rem_pio2>
 800dbd6:	f000 0003 	and.w	r0, r0, #3
 800dbda:	2801      	cmp	r0, #1
 800dbdc:	d00b      	beq.n	800dbf6 <cos+0x5e>
 800dbde:	2802      	cmp	r0, #2
 800dbe0:	d016      	beq.n	800dc10 <cos+0x78>
 800dbe2:	b9e0      	cbnz	r0, 800dc1e <cos+0x86>
 800dbe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbe8:	ed9d 0b00 	vldr	d0, [sp]
 800dbec:	f001 fcb8 	bl	800f560 <__kernel_cos>
 800dbf0:	ec51 0b10 	vmov	r0, r1, d0
 800dbf4:	e7e7      	b.n	800dbc6 <cos+0x2e>
 800dbf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbfa:	ed9d 0b00 	vldr	d0, [sp]
 800dbfe:	f002 f8c7 	bl	800fd90 <__kernel_sin>
 800dc02:	ec53 2b10 	vmov	r2, r3, d0
 800dc06:	ee10 0a10 	vmov	r0, s0
 800dc0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dc0e:	e7da      	b.n	800dbc6 <cos+0x2e>
 800dc10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc14:	ed9d 0b00 	vldr	d0, [sp]
 800dc18:	f001 fca2 	bl	800f560 <__kernel_cos>
 800dc1c:	e7f1      	b.n	800dc02 <cos+0x6a>
 800dc1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc22:	ed9d 0b00 	vldr	d0, [sp]
 800dc26:	2001      	movs	r0, #1
 800dc28:	f002 f8b2 	bl	800fd90 <__kernel_sin>
 800dc2c:	e7e0      	b.n	800dbf0 <cos+0x58>
 800dc2e:	bf00      	nop
	...
 800dc38:	3fe921fb 	.word	0x3fe921fb
 800dc3c:	7fefffff 	.word	0x7fefffff

0800dc40 <round>:
 800dc40:	ec51 0b10 	vmov	r0, r1, d0
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dc4a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dc4e:	2c13      	cmp	r4, #19
 800dc50:	ee10 2a10 	vmov	r2, s0
 800dc54:	460b      	mov	r3, r1
 800dc56:	dc19      	bgt.n	800dc8c <round+0x4c>
 800dc58:	2c00      	cmp	r4, #0
 800dc5a:	da09      	bge.n	800dc70 <round+0x30>
 800dc5c:	3401      	adds	r4, #1
 800dc5e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dc62:	d103      	bne.n	800dc6c <round+0x2c>
 800dc64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dc68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	e028      	b.n	800dcc2 <round+0x82>
 800dc70:	4d15      	ldr	r5, [pc, #84]	; (800dcc8 <round+0x88>)
 800dc72:	4125      	asrs	r5, r4
 800dc74:	ea01 0605 	and.w	r6, r1, r5
 800dc78:	4332      	orrs	r2, r6
 800dc7a:	d00e      	beq.n	800dc9a <round+0x5a>
 800dc7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dc80:	fa42 f404 	asr.w	r4, r2, r4
 800dc84:	4423      	add	r3, r4
 800dc86:	ea23 0305 	bic.w	r3, r3, r5
 800dc8a:	e7ef      	b.n	800dc6c <round+0x2c>
 800dc8c:	2c33      	cmp	r4, #51	; 0x33
 800dc8e:	dd07      	ble.n	800dca0 <round+0x60>
 800dc90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dc94:	d101      	bne.n	800dc9a <round+0x5a>
 800dc96:	f7f2 fb11 	bl	80002bc <__adddf3>
 800dc9a:	ec41 0b10 	vmov	d0, r0, r1
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}
 800dca0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dca4:	f04f 35ff 	mov.w	r5, #4294967295
 800dca8:	40f5      	lsrs	r5, r6
 800dcaa:	4228      	tst	r0, r5
 800dcac:	d0f5      	beq.n	800dc9a <round+0x5a>
 800dcae:	2101      	movs	r1, #1
 800dcb0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dcb4:	fa01 f404 	lsl.w	r4, r1, r4
 800dcb8:	1912      	adds	r2, r2, r4
 800dcba:	bf28      	it	cs
 800dcbc:	185b      	addcs	r3, r3, r1
 800dcbe:	ea22 0205 	bic.w	r2, r2, r5
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	e7e8      	b.n	800dc9a <round+0x5a>
 800dcc8:	000fffff 	.word	0x000fffff
 800dccc:	00000000 	.word	0x00000000

0800dcd0 <sin>:
 800dcd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcd2:	ec53 2b10 	vmov	r2, r3, d0
 800dcd6:	4828      	ldr	r0, [pc, #160]	; (800dd78 <sin+0xa8>)
 800dcd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dcdc:	4281      	cmp	r1, r0
 800dcde:	dc07      	bgt.n	800dcf0 <sin+0x20>
 800dce0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800dd70 <sin+0xa0>
 800dce4:	2000      	movs	r0, #0
 800dce6:	b005      	add	sp, #20
 800dce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcec:	f002 b850 	b.w	800fd90 <__kernel_sin>
 800dcf0:	4822      	ldr	r0, [pc, #136]	; (800dd7c <sin+0xac>)
 800dcf2:	4281      	cmp	r1, r0
 800dcf4:	dd09      	ble.n	800dd0a <sin+0x3a>
 800dcf6:	ee10 0a10 	vmov	r0, s0
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	f7f2 fadc 	bl	80002b8 <__aeabi_dsub>
 800dd00:	ec41 0b10 	vmov	d0, r0, r1
 800dd04:	b005      	add	sp, #20
 800dd06:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd0a:	4668      	mov	r0, sp
 800dd0c:	f001 f968 	bl	800efe0 <__ieee754_rem_pio2>
 800dd10:	f000 0003 	and.w	r0, r0, #3
 800dd14:	2801      	cmp	r0, #1
 800dd16:	d00c      	beq.n	800dd32 <sin+0x62>
 800dd18:	2802      	cmp	r0, #2
 800dd1a:	d011      	beq.n	800dd40 <sin+0x70>
 800dd1c:	b9f0      	cbnz	r0, 800dd5c <sin+0x8c>
 800dd1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd22:	ed9d 0b00 	vldr	d0, [sp]
 800dd26:	2001      	movs	r0, #1
 800dd28:	f002 f832 	bl	800fd90 <__kernel_sin>
 800dd2c:	ec51 0b10 	vmov	r0, r1, d0
 800dd30:	e7e6      	b.n	800dd00 <sin+0x30>
 800dd32:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd36:	ed9d 0b00 	vldr	d0, [sp]
 800dd3a:	f001 fc11 	bl	800f560 <__kernel_cos>
 800dd3e:	e7f5      	b.n	800dd2c <sin+0x5c>
 800dd40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd44:	ed9d 0b00 	vldr	d0, [sp]
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f002 f821 	bl	800fd90 <__kernel_sin>
 800dd4e:	ec53 2b10 	vmov	r2, r3, d0
 800dd52:	ee10 0a10 	vmov	r0, s0
 800dd56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd5a:	e7d1      	b.n	800dd00 <sin+0x30>
 800dd5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd60:	ed9d 0b00 	vldr	d0, [sp]
 800dd64:	f001 fbfc 	bl	800f560 <__kernel_cos>
 800dd68:	e7f1      	b.n	800dd4e <sin+0x7e>
 800dd6a:	bf00      	nop
 800dd6c:	f3af 8000 	nop.w
	...
 800dd78:	3fe921fb 	.word	0x3fe921fb
 800dd7c:	7fefffff 	.word	0x7fefffff

0800dd80 <acos>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	ed2d 8b02 	vpush	{d8}
 800dd86:	ec55 4b10 	vmov	r4, r5, d0
 800dd8a:	f000 f8cd 	bl	800df28 <__ieee754_acos>
 800dd8e:	4622      	mov	r2, r4
 800dd90:	462b      	mov	r3, r5
 800dd92:	4620      	mov	r0, r4
 800dd94:	4629      	mov	r1, r5
 800dd96:	eeb0 8a40 	vmov.f32	s16, s0
 800dd9a:	eef0 8a60 	vmov.f32	s17, s1
 800dd9e:	f7f2 fedd 	bl	8000b5c <__aeabi_dcmpun>
 800dda2:	b9a8      	cbnz	r0, 800ddd0 <acos+0x50>
 800dda4:	ec45 4b10 	vmov	d0, r4, r5
 800dda8:	f002 fa82 	bl	80102b0 <fabs>
 800ddac:	4b0c      	ldr	r3, [pc, #48]	; (800dde0 <acos+0x60>)
 800ddae:	ec51 0b10 	vmov	r0, r1, d0
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f7f2 fec8 	bl	8000b48 <__aeabi_dcmpgt>
 800ddb8:	b150      	cbz	r0, 800ddd0 <acos+0x50>
 800ddba:	f7fc fb1b 	bl	800a3f4 <__errno>
 800ddbe:	ecbd 8b02 	vpop	{d8}
 800ddc2:	2321      	movs	r3, #33	; 0x21
 800ddc4:	6003      	str	r3, [r0, #0]
 800ddc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddca:	4806      	ldr	r0, [pc, #24]	; (800dde4 <acos+0x64>)
 800ddcc:	f002 bb04 	b.w	80103d8 <nan>
 800ddd0:	eeb0 0a48 	vmov.f32	s0, s16
 800ddd4:	eef0 0a68 	vmov.f32	s1, s17
 800ddd8:	ecbd 8b02 	vpop	{d8}
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	3ff00000 	.word	0x3ff00000
 800dde4:	08010d4b 	.word	0x08010d4b

0800dde8 <atan2>:
 800dde8:	f000 bafe 	b.w	800e3e8 <__ieee754_atan2>

0800ddec <pow>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	ed2d 8b02 	vpush	{d8}
 800ddf2:	eeb0 8a40 	vmov.f32	s16, s0
 800ddf6:	eef0 8a60 	vmov.f32	s17, s1
 800ddfa:	ec55 4b11 	vmov	r4, r5, d1
 800ddfe:	f000 fbbf 	bl	800e580 <__ieee754_pow>
 800de02:	4622      	mov	r2, r4
 800de04:	462b      	mov	r3, r5
 800de06:	4620      	mov	r0, r4
 800de08:	4629      	mov	r1, r5
 800de0a:	ec57 6b10 	vmov	r6, r7, d0
 800de0e:	f7f2 fea5 	bl	8000b5c <__aeabi_dcmpun>
 800de12:	2800      	cmp	r0, #0
 800de14:	d13b      	bne.n	800de8e <pow+0xa2>
 800de16:	ec51 0b18 	vmov	r0, r1, d8
 800de1a:	2200      	movs	r2, #0
 800de1c:	2300      	movs	r3, #0
 800de1e:	f7f2 fe6b 	bl	8000af8 <__aeabi_dcmpeq>
 800de22:	b1b8      	cbz	r0, 800de54 <pow+0x68>
 800de24:	2200      	movs	r2, #0
 800de26:	2300      	movs	r3, #0
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 fe64 	bl	8000af8 <__aeabi_dcmpeq>
 800de30:	2800      	cmp	r0, #0
 800de32:	d146      	bne.n	800dec2 <pow+0xd6>
 800de34:	ec45 4b10 	vmov	d0, r4, r5
 800de38:	f002 fa43 	bl	80102c2 <finite>
 800de3c:	b338      	cbz	r0, 800de8e <pow+0xa2>
 800de3e:	2200      	movs	r2, #0
 800de40:	2300      	movs	r3, #0
 800de42:	4620      	mov	r0, r4
 800de44:	4629      	mov	r1, r5
 800de46:	f7f2 fe61 	bl	8000b0c <__aeabi_dcmplt>
 800de4a:	b300      	cbz	r0, 800de8e <pow+0xa2>
 800de4c:	f7fc fad2 	bl	800a3f4 <__errno>
 800de50:	2322      	movs	r3, #34	; 0x22
 800de52:	e01b      	b.n	800de8c <pow+0xa0>
 800de54:	ec47 6b10 	vmov	d0, r6, r7
 800de58:	f002 fa33 	bl	80102c2 <finite>
 800de5c:	b9e0      	cbnz	r0, 800de98 <pow+0xac>
 800de5e:	eeb0 0a48 	vmov.f32	s0, s16
 800de62:	eef0 0a68 	vmov.f32	s1, s17
 800de66:	f002 fa2c 	bl	80102c2 <finite>
 800de6a:	b1a8      	cbz	r0, 800de98 <pow+0xac>
 800de6c:	ec45 4b10 	vmov	d0, r4, r5
 800de70:	f002 fa27 	bl	80102c2 <finite>
 800de74:	b180      	cbz	r0, 800de98 <pow+0xac>
 800de76:	4632      	mov	r2, r6
 800de78:	463b      	mov	r3, r7
 800de7a:	4630      	mov	r0, r6
 800de7c:	4639      	mov	r1, r7
 800de7e:	f7f2 fe6d 	bl	8000b5c <__aeabi_dcmpun>
 800de82:	2800      	cmp	r0, #0
 800de84:	d0e2      	beq.n	800de4c <pow+0x60>
 800de86:	f7fc fab5 	bl	800a3f4 <__errno>
 800de8a:	2321      	movs	r3, #33	; 0x21
 800de8c:	6003      	str	r3, [r0, #0]
 800de8e:	ecbd 8b02 	vpop	{d8}
 800de92:	ec47 6b10 	vmov	d0, r6, r7
 800de96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de98:	2200      	movs	r2, #0
 800de9a:	2300      	movs	r3, #0
 800de9c:	4630      	mov	r0, r6
 800de9e:	4639      	mov	r1, r7
 800dea0:	f7f2 fe2a 	bl	8000af8 <__aeabi_dcmpeq>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d0f2      	beq.n	800de8e <pow+0xa2>
 800dea8:	eeb0 0a48 	vmov.f32	s0, s16
 800deac:	eef0 0a68 	vmov.f32	s1, s17
 800deb0:	f002 fa07 	bl	80102c2 <finite>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d0ea      	beq.n	800de8e <pow+0xa2>
 800deb8:	ec45 4b10 	vmov	d0, r4, r5
 800debc:	f002 fa01 	bl	80102c2 <finite>
 800dec0:	e7c3      	b.n	800de4a <pow+0x5e>
 800dec2:	4f01      	ldr	r7, [pc, #4]	; (800dec8 <pow+0xdc>)
 800dec4:	2600      	movs	r6, #0
 800dec6:	e7e2      	b.n	800de8e <pow+0xa2>
 800dec8:	3ff00000 	.word	0x3ff00000

0800decc <sqrt>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	ed2d 8b02 	vpush	{d8}
 800ded2:	ec55 4b10 	vmov	r4, r5, d0
 800ded6:	f001 fa8f 	bl	800f3f8 <__ieee754_sqrt>
 800deda:	4622      	mov	r2, r4
 800dedc:	462b      	mov	r3, r5
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	eeb0 8a40 	vmov.f32	s16, s0
 800dee6:	eef0 8a60 	vmov.f32	s17, s1
 800deea:	f7f2 fe37 	bl	8000b5c <__aeabi_dcmpun>
 800deee:	b990      	cbnz	r0, 800df16 <sqrt+0x4a>
 800def0:	2200      	movs	r2, #0
 800def2:	2300      	movs	r3, #0
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fe08 	bl	8000b0c <__aeabi_dcmplt>
 800defc:	b158      	cbz	r0, 800df16 <sqrt+0x4a>
 800defe:	f7fc fa79 	bl	800a3f4 <__errno>
 800df02:	2321      	movs	r3, #33	; 0x21
 800df04:	6003      	str	r3, [r0, #0]
 800df06:	2200      	movs	r2, #0
 800df08:	2300      	movs	r3, #0
 800df0a:	4610      	mov	r0, r2
 800df0c:	4619      	mov	r1, r3
 800df0e:	f7f2 fcb5 	bl	800087c <__aeabi_ddiv>
 800df12:	ec41 0b18 	vmov	d8, r0, r1
 800df16:	eeb0 0a48 	vmov.f32	s0, s16
 800df1a:	eef0 0a68 	vmov.f32	s1, s17
 800df1e:	ecbd 8b02 	vpop	{d8}
 800df22:	bd38      	pop	{r3, r4, r5, pc}
 800df24:	0000      	movs	r0, r0
	...

0800df28 <__ieee754_acos>:
 800df28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	ec55 4b10 	vmov	r4, r5, d0
 800df30:	49b7      	ldr	r1, [pc, #732]	; (800e210 <__ieee754_acos+0x2e8>)
 800df32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df36:	428b      	cmp	r3, r1
 800df38:	dd1b      	ble.n	800df72 <__ieee754_acos+0x4a>
 800df3a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800df3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800df42:	4323      	orrs	r3, r4
 800df44:	d106      	bne.n	800df54 <__ieee754_acos+0x2c>
 800df46:	2d00      	cmp	r5, #0
 800df48:	f300 8211 	bgt.w	800e36e <__ieee754_acos+0x446>
 800df4c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800e1a8 <__ieee754_acos+0x280>
 800df50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df54:	ee10 2a10 	vmov	r2, s0
 800df58:	462b      	mov	r3, r5
 800df5a:	ee10 0a10 	vmov	r0, s0
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f9aa 	bl	80002b8 <__aeabi_dsub>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	f7f2 fc88 	bl	800087c <__aeabi_ddiv>
 800df6c:	ec41 0b10 	vmov	d0, r0, r1
 800df70:	e7ee      	b.n	800df50 <__ieee754_acos+0x28>
 800df72:	49a8      	ldr	r1, [pc, #672]	; (800e214 <__ieee754_acos+0x2ec>)
 800df74:	428b      	cmp	r3, r1
 800df76:	f300 8087 	bgt.w	800e088 <__ieee754_acos+0x160>
 800df7a:	4aa7      	ldr	r2, [pc, #668]	; (800e218 <__ieee754_acos+0x2f0>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	f340 81f9 	ble.w	800e374 <__ieee754_acos+0x44c>
 800df82:	ee10 2a10 	vmov	r2, s0
 800df86:	ee10 0a10 	vmov	r0, s0
 800df8a:	462b      	mov	r3, r5
 800df8c:	4629      	mov	r1, r5
 800df8e:	f7f2 fb4b 	bl	8000628 <__aeabi_dmul>
 800df92:	a387      	add	r3, pc, #540	; (adr r3, 800e1b0 <__ieee754_acos+0x288>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	4606      	mov	r6, r0
 800df9a:	460f      	mov	r7, r1
 800df9c:	f7f2 fb44 	bl	8000628 <__aeabi_dmul>
 800dfa0:	a385      	add	r3, pc, #532	; (adr r3, 800e1b8 <__ieee754_acos+0x290>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	f7f2 f989 	bl	80002bc <__adddf3>
 800dfaa:	4632      	mov	r2, r6
 800dfac:	463b      	mov	r3, r7
 800dfae:	f7f2 fb3b 	bl	8000628 <__aeabi_dmul>
 800dfb2:	a383      	add	r3, pc, #524	; (adr r3, 800e1c0 <__ieee754_acos+0x298>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	f7f2 f97e 	bl	80002b8 <__aeabi_dsub>
 800dfbc:	4632      	mov	r2, r6
 800dfbe:	463b      	mov	r3, r7
 800dfc0:	f7f2 fb32 	bl	8000628 <__aeabi_dmul>
 800dfc4:	a380      	add	r3, pc, #512	; (adr r3, 800e1c8 <__ieee754_acos+0x2a0>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	f7f2 f977 	bl	80002bc <__adddf3>
 800dfce:	4632      	mov	r2, r6
 800dfd0:	463b      	mov	r3, r7
 800dfd2:	f7f2 fb29 	bl	8000628 <__aeabi_dmul>
 800dfd6:	a37e      	add	r3, pc, #504	; (adr r3, 800e1d0 <__ieee754_acos+0x2a8>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	f7f2 f96c 	bl	80002b8 <__aeabi_dsub>
 800dfe0:	4632      	mov	r2, r6
 800dfe2:	463b      	mov	r3, r7
 800dfe4:	f7f2 fb20 	bl	8000628 <__aeabi_dmul>
 800dfe8:	a37b      	add	r3, pc, #492	; (adr r3, 800e1d8 <__ieee754_acos+0x2b0>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 f965 	bl	80002bc <__adddf3>
 800dff2:	4632      	mov	r2, r6
 800dff4:	463b      	mov	r3, r7
 800dff6:	f7f2 fb17 	bl	8000628 <__aeabi_dmul>
 800dffa:	a379      	add	r3, pc, #484	; (adr r3, 800e1e0 <__ieee754_acos+0x2b8>)
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	4680      	mov	r8, r0
 800e002:	4689      	mov	r9, r1
 800e004:	4630      	mov	r0, r6
 800e006:	4639      	mov	r1, r7
 800e008:	f7f2 fb0e 	bl	8000628 <__aeabi_dmul>
 800e00c:	a376      	add	r3, pc, #472	; (adr r3, 800e1e8 <__ieee754_acos+0x2c0>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	f7f2 f951 	bl	80002b8 <__aeabi_dsub>
 800e016:	4632      	mov	r2, r6
 800e018:	463b      	mov	r3, r7
 800e01a:	f7f2 fb05 	bl	8000628 <__aeabi_dmul>
 800e01e:	a374      	add	r3, pc, #464	; (adr r3, 800e1f0 <__ieee754_acos+0x2c8>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	f7f2 f94a 	bl	80002bc <__adddf3>
 800e028:	4632      	mov	r2, r6
 800e02a:	463b      	mov	r3, r7
 800e02c:	f7f2 fafc 	bl	8000628 <__aeabi_dmul>
 800e030:	a371      	add	r3, pc, #452	; (adr r3, 800e1f8 <__ieee754_acos+0x2d0>)
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 f93f 	bl	80002b8 <__aeabi_dsub>
 800e03a:	4632      	mov	r2, r6
 800e03c:	463b      	mov	r3, r7
 800e03e:	f7f2 faf3 	bl	8000628 <__aeabi_dmul>
 800e042:	4b76      	ldr	r3, [pc, #472]	; (800e21c <__ieee754_acos+0x2f4>)
 800e044:	2200      	movs	r2, #0
 800e046:	f7f2 f939 	bl	80002bc <__adddf3>
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	4640      	mov	r0, r8
 800e050:	4649      	mov	r1, r9
 800e052:	f7f2 fc13 	bl	800087c <__aeabi_ddiv>
 800e056:	4622      	mov	r2, r4
 800e058:	462b      	mov	r3, r5
 800e05a:	f7f2 fae5 	bl	8000628 <__aeabi_dmul>
 800e05e:	4602      	mov	r2, r0
 800e060:	460b      	mov	r3, r1
 800e062:	a167      	add	r1, pc, #412	; (adr r1, 800e200 <__ieee754_acos+0x2d8>)
 800e064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e068:	f7f2 f926 	bl	80002b8 <__aeabi_dsub>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4620      	mov	r0, r4
 800e072:	4629      	mov	r1, r5
 800e074:	f7f2 f920 	bl	80002b8 <__aeabi_dsub>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	a162      	add	r1, pc, #392	; (adr r1, 800e208 <__ieee754_acos+0x2e0>)
 800e07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e082:	f7f2 f919 	bl	80002b8 <__aeabi_dsub>
 800e086:	e771      	b.n	800df6c <__ieee754_acos+0x44>
 800e088:	2d00      	cmp	r5, #0
 800e08a:	f280 80cb 	bge.w	800e224 <__ieee754_acos+0x2fc>
 800e08e:	ee10 0a10 	vmov	r0, s0
 800e092:	4b62      	ldr	r3, [pc, #392]	; (800e21c <__ieee754_acos+0x2f4>)
 800e094:	2200      	movs	r2, #0
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 f910 	bl	80002bc <__adddf3>
 800e09c:	4b60      	ldr	r3, [pc, #384]	; (800e220 <__ieee754_acos+0x2f8>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f7f2 fac2 	bl	8000628 <__aeabi_dmul>
 800e0a4:	a342      	add	r3, pc, #264	; (adr r3, 800e1b0 <__ieee754_acos+0x288>)
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	460d      	mov	r5, r1
 800e0ae:	f7f2 fabb 	bl	8000628 <__aeabi_dmul>
 800e0b2:	a341      	add	r3, pc, #260	; (adr r3, 800e1b8 <__ieee754_acos+0x290>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 f900 	bl	80002bc <__adddf3>
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 fab2 	bl	8000628 <__aeabi_dmul>
 800e0c4:	a33e      	add	r3, pc, #248	; (adr r3, 800e1c0 <__ieee754_acos+0x298>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f8f5 	bl	80002b8 <__aeabi_dsub>
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	f7f2 faa9 	bl	8000628 <__aeabi_dmul>
 800e0d6:	a33c      	add	r3, pc, #240	; (adr r3, 800e1c8 <__ieee754_acos+0x2a0>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	f7f2 f8ee 	bl	80002bc <__adddf3>
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	f7f2 faa0 	bl	8000628 <__aeabi_dmul>
 800e0e8:	a339      	add	r3, pc, #228	; (adr r3, 800e1d0 <__ieee754_acos+0x2a8>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	f7f2 f8e3 	bl	80002b8 <__aeabi_dsub>
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	f7f2 fa97 	bl	8000628 <__aeabi_dmul>
 800e0fa:	a337      	add	r3, pc, #220	; (adr r3, 800e1d8 <__ieee754_acos+0x2b0>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	f7f2 f8dc 	bl	80002bc <__adddf3>
 800e104:	4622      	mov	r2, r4
 800e106:	462b      	mov	r3, r5
 800e108:	f7f2 fa8e 	bl	8000628 <__aeabi_dmul>
 800e10c:	ec45 4b10 	vmov	d0, r4, r5
 800e110:	4680      	mov	r8, r0
 800e112:	4689      	mov	r9, r1
 800e114:	f001 f970 	bl	800f3f8 <__ieee754_sqrt>
 800e118:	a331      	add	r3, pc, #196	; (adr r3, 800e1e0 <__ieee754_acos+0x2b8>)
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	ec57 6b10 	vmov	r6, r7, d0
 800e126:	f7f2 fa7f 	bl	8000628 <__aeabi_dmul>
 800e12a:	a32f      	add	r3, pc, #188	; (adr r3, 800e1e8 <__ieee754_acos+0x2c0>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	f7f2 f8c2 	bl	80002b8 <__aeabi_dsub>
 800e134:	4622      	mov	r2, r4
 800e136:	462b      	mov	r3, r5
 800e138:	f7f2 fa76 	bl	8000628 <__aeabi_dmul>
 800e13c:	a32c      	add	r3, pc, #176	; (adr r3, 800e1f0 <__ieee754_acos+0x2c8>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	f7f2 f8bb 	bl	80002bc <__adddf3>
 800e146:	4622      	mov	r2, r4
 800e148:	462b      	mov	r3, r5
 800e14a:	f7f2 fa6d 	bl	8000628 <__aeabi_dmul>
 800e14e:	a32a      	add	r3, pc, #168	; (adr r3, 800e1f8 <__ieee754_acos+0x2d0>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f7f2 f8b0 	bl	80002b8 <__aeabi_dsub>
 800e158:	4622      	mov	r2, r4
 800e15a:	462b      	mov	r3, r5
 800e15c:	f7f2 fa64 	bl	8000628 <__aeabi_dmul>
 800e160:	4b2e      	ldr	r3, [pc, #184]	; (800e21c <__ieee754_acos+0x2f4>)
 800e162:	2200      	movs	r2, #0
 800e164:	f7f2 f8aa 	bl	80002bc <__adddf3>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4640      	mov	r0, r8
 800e16e:	4649      	mov	r1, r9
 800e170:	f7f2 fb84 	bl	800087c <__aeabi_ddiv>
 800e174:	4632      	mov	r2, r6
 800e176:	463b      	mov	r3, r7
 800e178:	f7f2 fa56 	bl	8000628 <__aeabi_dmul>
 800e17c:	a320      	add	r3, pc, #128	; (adr r3, 800e200 <__ieee754_acos+0x2d8>)
 800e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e182:	f7f2 f899 	bl	80002b8 <__aeabi_dsub>
 800e186:	4632      	mov	r2, r6
 800e188:	463b      	mov	r3, r7
 800e18a:	f7f2 f897 	bl	80002bc <__adddf3>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	f7f2 f893 	bl	80002bc <__adddf3>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	a103      	add	r1, pc, #12	; (adr r1, 800e1a8 <__ieee754_acos+0x280>)
 800e19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a0:	e76f      	b.n	800e082 <__ieee754_acos+0x15a>
 800e1a2:	bf00      	nop
 800e1a4:	f3af 8000 	nop.w
 800e1a8:	54442d18 	.word	0x54442d18
 800e1ac:	400921fb 	.word	0x400921fb
 800e1b0:	0dfdf709 	.word	0x0dfdf709
 800e1b4:	3f023de1 	.word	0x3f023de1
 800e1b8:	7501b288 	.word	0x7501b288
 800e1bc:	3f49efe0 	.word	0x3f49efe0
 800e1c0:	b5688f3b 	.word	0xb5688f3b
 800e1c4:	3fa48228 	.word	0x3fa48228
 800e1c8:	0e884455 	.word	0x0e884455
 800e1cc:	3fc9c155 	.word	0x3fc9c155
 800e1d0:	03eb6f7d 	.word	0x03eb6f7d
 800e1d4:	3fd4d612 	.word	0x3fd4d612
 800e1d8:	55555555 	.word	0x55555555
 800e1dc:	3fc55555 	.word	0x3fc55555
 800e1e0:	b12e9282 	.word	0xb12e9282
 800e1e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e1e8:	1b8d0159 	.word	0x1b8d0159
 800e1ec:	3fe6066c 	.word	0x3fe6066c
 800e1f0:	9c598ac8 	.word	0x9c598ac8
 800e1f4:	40002ae5 	.word	0x40002ae5
 800e1f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e1fc:	40033a27 	.word	0x40033a27
 800e200:	33145c07 	.word	0x33145c07
 800e204:	3c91a626 	.word	0x3c91a626
 800e208:	54442d18 	.word	0x54442d18
 800e20c:	3ff921fb 	.word	0x3ff921fb
 800e210:	3fefffff 	.word	0x3fefffff
 800e214:	3fdfffff 	.word	0x3fdfffff
 800e218:	3c600000 	.word	0x3c600000
 800e21c:	3ff00000 	.word	0x3ff00000
 800e220:	3fe00000 	.word	0x3fe00000
 800e224:	ee10 2a10 	vmov	r2, s0
 800e228:	462b      	mov	r3, r5
 800e22a:	496d      	ldr	r1, [pc, #436]	; (800e3e0 <__ieee754_acos+0x4b8>)
 800e22c:	2000      	movs	r0, #0
 800e22e:	f7f2 f843 	bl	80002b8 <__aeabi_dsub>
 800e232:	4b6c      	ldr	r3, [pc, #432]	; (800e3e4 <__ieee754_acos+0x4bc>)
 800e234:	2200      	movs	r2, #0
 800e236:	f7f2 f9f7 	bl	8000628 <__aeabi_dmul>
 800e23a:	4604      	mov	r4, r0
 800e23c:	460d      	mov	r5, r1
 800e23e:	ec45 4b10 	vmov	d0, r4, r5
 800e242:	f001 f8d9 	bl	800f3f8 <__ieee754_sqrt>
 800e246:	a34e      	add	r3, pc, #312	; (adr r3, 800e380 <__ieee754_acos+0x458>)
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	4620      	mov	r0, r4
 800e24e:	4629      	mov	r1, r5
 800e250:	ec59 8b10 	vmov	r8, r9, d0
 800e254:	f7f2 f9e8 	bl	8000628 <__aeabi_dmul>
 800e258:	a34b      	add	r3, pc, #300	; (adr r3, 800e388 <__ieee754_acos+0x460>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f82d 	bl	80002bc <__adddf3>
 800e262:	4622      	mov	r2, r4
 800e264:	462b      	mov	r3, r5
 800e266:	f7f2 f9df 	bl	8000628 <__aeabi_dmul>
 800e26a:	a349      	add	r3, pc, #292	; (adr r3, 800e390 <__ieee754_acos+0x468>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 f822 	bl	80002b8 <__aeabi_dsub>
 800e274:	4622      	mov	r2, r4
 800e276:	462b      	mov	r3, r5
 800e278:	f7f2 f9d6 	bl	8000628 <__aeabi_dmul>
 800e27c:	a346      	add	r3, pc, #280	; (adr r3, 800e398 <__ieee754_acos+0x470>)
 800e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e282:	f7f2 f81b 	bl	80002bc <__adddf3>
 800e286:	4622      	mov	r2, r4
 800e288:	462b      	mov	r3, r5
 800e28a:	f7f2 f9cd 	bl	8000628 <__aeabi_dmul>
 800e28e:	a344      	add	r3, pc, #272	; (adr r3, 800e3a0 <__ieee754_acos+0x478>)
 800e290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e294:	f7f2 f810 	bl	80002b8 <__aeabi_dsub>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	f7f2 f9c4 	bl	8000628 <__aeabi_dmul>
 800e2a0:	a341      	add	r3, pc, #260	; (adr r3, 800e3a8 <__ieee754_acos+0x480>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f2 f809 	bl	80002bc <__adddf3>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f9bb 	bl	8000628 <__aeabi_dmul>
 800e2b2:	a33f      	add	r3, pc, #252	; (adr r3, 800e3b0 <__ieee754_acos+0x488>)
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	4682      	mov	sl, r0
 800e2ba:	468b      	mov	fp, r1
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f2 f9b2 	bl	8000628 <__aeabi_dmul>
 800e2c4:	a33c      	add	r3, pc, #240	; (adr r3, 800e3b8 <__ieee754_acos+0x490>)
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f7f1 fff5 	bl	80002b8 <__aeabi_dsub>
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	f7f2 f9a9 	bl	8000628 <__aeabi_dmul>
 800e2d6:	a33a      	add	r3, pc, #232	; (adr r3, 800e3c0 <__ieee754_acos+0x498>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	f7f1 ffee 	bl	80002bc <__adddf3>
 800e2e0:	4622      	mov	r2, r4
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f7f2 f9a0 	bl	8000628 <__aeabi_dmul>
 800e2e8:	a337      	add	r3, pc, #220	; (adr r3, 800e3c8 <__ieee754_acos+0x4a0>)
 800e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ee:	f7f1 ffe3 	bl	80002b8 <__aeabi_dsub>
 800e2f2:	4622      	mov	r2, r4
 800e2f4:	462b      	mov	r3, r5
 800e2f6:	f7f2 f997 	bl	8000628 <__aeabi_dmul>
 800e2fa:	4b39      	ldr	r3, [pc, #228]	; (800e3e0 <__ieee754_acos+0x4b8>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f7f1 ffdd 	bl	80002bc <__adddf3>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4650      	mov	r0, sl
 800e308:	4659      	mov	r1, fp
 800e30a:	f7f2 fab7 	bl	800087c <__aeabi_ddiv>
 800e30e:	4642      	mov	r2, r8
 800e310:	464b      	mov	r3, r9
 800e312:	f7f2 f989 	bl	8000628 <__aeabi_dmul>
 800e316:	2600      	movs	r6, #0
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	4632      	mov	r2, r6
 800e31e:	464b      	mov	r3, r9
 800e320:	4630      	mov	r0, r6
 800e322:	4649      	mov	r1, r9
 800e324:	f7f2 f980 	bl	8000628 <__aeabi_dmul>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4620      	mov	r0, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	f7f1 ffc2 	bl	80002b8 <__aeabi_dsub>
 800e334:	4632      	mov	r2, r6
 800e336:	4604      	mov	r4, r0
 800e338:	460d      	mov	r5, r1
 800e33a:	464b      	mov	r3, r9
 800e33c:	4640      	mov	r0, r8
 800e33e:	4649      	mov	r1, r9
 800e340:	f7f1 ffbc 	bl	80002bc <__adddf3>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4620      	mov	r0, r4
 800e34a:	4629      	mov	r1, r5
 800e34c:	f7f2 fa96 	bl	800087c <__aeabi_ddiv>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	4650      	mov	r0, sl
 800e356:	4659      	mov	r1, fp
 800e358:	f7f1 ffb0 	bl	80002bc <__adddf3>
 800e35c:	4632      	mov	r2, r6
 800e35e:	464b      	mov	r3, r9
 800e360:	f7f1 ffac 	bl	80002bc <__adddf3>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	f7f1 ffa8 	bl	80002bc <__adddf3>
 800e36c:	e5fe      	b.n	800df6c <__ieee754_acos+0x44>
 800e36e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e3d0 <__ieee754_acos+0x4a8>
 800e372:	e5ed      	b.n	800df50 <__ieee754_acos+0x28>
 800e374:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e3d8 <__ieee754_acos+0x4b0>
 800e378:	e5ea      	b.n	800df50 <__ieee754_acos+0x28>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	0dfdf709 	.word	0x0dfdf709
 800e384:	3f023de1 	.word	0x3f023de1
 800e388:	7501b288 	.word	0x7501b288
 800e38c:	3f49efe0 	.word	0x3f49efe0
 800e390:	b5688f3b 	.word	0xb5688f3b
 800e394:	3fa48228 	.word	0x3fa48228
 800e398:	0e884455 	.word	0x0e884455
 800e39c:	3fc9c155 	.word	0x3fc9c155
 800e3a0:	03eb6f7d 	.word	0x03eb6f7d
 800e3a4:	3fd4d612 	.word	0x3fd4d612
 800e3a8:	55555555 	.word	0x55555555
 800e3ac:	3fc55555 	.word	0x3fc55555
 800e3b0:	b12e9282 	.word	0xb12e9282
 800e3b4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e3b8:	1b8d0159 	.word	0x1b8d0159
 800e3bc:	3fe6066c 	.word	0x3fe6066c
 800e3c0:	9c598ac8 	.word	0x9c598ac8
 800e3c4:	40002ae5 	.word	0x40002ae5
 800e3c8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e3cc:	40033a27 	.word	0x40033a27
	...
 800e3d8:	54442d18 	.word	0x54442d18
 800e3dc:	3ff921fb 	.word	0x3ff921fb
 800e3e0:	3ff00000 	.word	0x3ff00000
 800e3e4:	3fe00000 	.word	0x3fe00000

0800e3e8 <__ieee754_atan2>:
 800e3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3ec:	ec57 6b11 	vmov	r6, r7, d1
 800e3f0:	4273      	negs	r3, r6
 800e3f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e578 <__ieee754_atan2+0x190>
 800e3f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e3fa:	4333      	orrs	r3, r6
 800e3fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e400:	4573      	cmp	r3, lr
 800e402:	ec51 0b10 	vmov	r0, r1, d0
 800e406:	ee11 8a10 	vmov	r8, s2
 800e40a:	d80a      	bhi.n	800e422 <__ieee754_atan2+0x3a>
 800e40c:	4244      	negs	r4, r0
 800e40e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e412:	4304      	orrs	r4, r0
 800e414:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e418:	4574      	cmp	r4, lr
 800e41a:	ee10 9a10 	vmov	r9, s0
 800e41e:	468c      	mov	ip, r1
 800e420:	d907      	bls.n	800e432 <__ieee754_atan2+0x4a>
 800e422:	4632      	mov	r2, r6
 800e424:	463b      	mov	r3, r7
 800e426:	f7f1 ff49 	bl	80002bc <__adddf3>
 800e42a:	ec41 0b10 	vmov	d0, r0, r1
 800e42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e432:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e436:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e43a:	4334      	orrs	r4, r6
 800e43c:	d103      	bne.n	800e446 <__ieee754_atan2+0x5e>
 800e43e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e442:	f001 bd95 	b.w	800ff70 <atan>
 800e446:	17bc      	asrs	r4, r7, #30
 800e448:	f004 0402 	and.w	r4, r4, #2
 800e44c:	ea53 0909 	orrs.w	r9, r3, r9
 800e450:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e454:	d107      	bne.n	800e466 <__ieee754_atan2+0x7e>
 800e456:	2c02      	cmp	r4, #2
 800e458:	d060      	beq.n	800e51c <__ieee754_atan2+0x134>
 800e45a:	2c03      	cmp	r4, #3
 800e45c:	d1e5      	bne.n	800e42a <__ieee754_atan2+0x42>
 800e45e:	a142      	add	r1, pc, #264	; (adr r1, 800e568 <__ieee754_atan2+0x180>)
 800e460:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e464:	e7e1      	b.n	800e42a <__ieee754_atan2+0x42>
 800e466:	ea52 0808 	orrs.w	r8, r2, r8
 800e46a:	d106      	bne.n	800e47a <__ieee754_atan2+0x92>
 800e46c:	f1bc 0f00 	cmp.w	ip, #0
 800e470:	da5f      	bge.n	800e532 <__ieee754_atan2+0x14a>
 800e472:	a13f      	add	r1, pc, #252	; (adr r1, 800e570 <__ieee754_atan2+0x188>)
 800e474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e478:	e7d7      	b.n	800e42a <__ieee754_atan2+0x42>
 800e47a:	4572      	cmp	r2, lr
 800e47c:	d10f      	bne.n	800e49e <__ieee754_atan2+0xb6>
 800e47e:	4293      	cmp	r3, r2
 800e480:	f104 34ff 	add.w	r4, r4, #4294967295
 800e484:	d107      	bne.n	800e496 <__ieee754_atan2+0xae>
 800e486:	2c02      	cmp	r4, #2
 800e488:	d84c      	bhi.n	800e524 <__ieee754_atan2+0x13c>
 800e48a:	4b35      	ldr	r3, [pc, #212]	; (800e560 <__ieee754_atan2+0x178>)
 800e48c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e490:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e494:	e7c9      	b.n	800e42a <__ieee754_atan2+0x42>
 800e496:	2c02      	cmp	r4, #2
 800e498:	d848      	bhi.n	800e52c <__ieee754_atan2+0x144>
 800e49a:	4b32      	ldr	r3, [pc, #200]	; (800e564 <__ieee754_atan2+0x17c>)
 800e49c:	e7f6      	b.n	800e48c <__ieee754_atan2+0xa4>
 800e49e:	4573      	cmp	r3, lr
 800e4a0:	d0e4      	beq.n	800e46c <__ieee754_atan2+0x84>
 800e4a2:	1a9b      	subs	r3, r3, r2
 800e4a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e4a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4ac:	da1e      	bge.n	800e4ec <__ieee754_atan2+0x104>
 800e4ae:	2f00      	cmp	r7, #0
 800e4b0:	da01      	bge.n	800e4b6 <__ieee754_atan2+0xce>
 800e4b2:	323c      	adds	r2, #60	; 0x3c
 800e4b4:	db1e      	blt.n	800e4f4 <__ieee754_atan2+0x10c>
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	463b      	mov	r3, r7
 800e4ba:	f7f2 f9df 	bl	800087c <__aeabi_ddiv>
 800e4be:	ec41 0b10 	vmov	d0, r0, r1
 800e4c2:	f001 fef5 	bl	80102b0 <fabs>
 800e4c6:	f001 fd53 	bl	800ff70 <atan>
 800e4ca:	ec51 0b10 	vmov	r0, r1, d0
 800e4ce:	2c01      	cmp	r4, #1
 800e4d0:	d013      	beq.n	800e4fa <__ieee754_atan2+0x112>
 800e4d2:	2c02      	cmp	r4, #2
 800e4d4:	d015      	beq.n	800e502 <__ieee754_atan2+0x11a>
 800e4d6:	2c00      	cmp	r4, #0
 800e4d8:	d0a7      	beq.n	800e42a <__ieee754_atan2+0x42>
 800e4da:	a319      	add	r3, pc, #100	; (adr r3, 800e540 <__ieee754_atan2+0x158>)
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f7f1 feea 	bl	80002b8 <__aeabi_dsub>
 800e4e4:	a318      	add	r3, pc, #96	; (adr r3, 800e548 <__ieee754_atan2+0x160>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	e014      	b.n	800e516 <__ieee754_atan2+0x12e>
 800e4ec:	a118      	add	r1, pc, #96	; (adr r1, 800e550 <__ieee754_atan2+0x168>)
 800e4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f2:	e7ec      	b.n	800e4ce <__ieee754_atan2+0xe6>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	e7e9      	b.n	800e4ce <__ieee754_atan2+0xe6>
 800e4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4fe:	4619      	mov	r1, r3
 800e500:	e793      	b.n	800e42a <__ieee754_atan2+0x42>
 800e502:	a30f      	add	r3, pc, #60	; (adr r3, 800e540 <__ieee754_atan2+0x158>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	f7f1 fed6 	bl	80002b8 <__aeabi_dsub>
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	a10d      	add	r1, pc, #52	; (adr r1, 800e548 <__ieee754_atan2+0x160>)
 800e512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e516:	f7f1 fecf 	bl	80002b8 <__aeabi_dsub>
 800e51a:	e786      	b.n	800e42a <__ieee754_atan2+0x42>
 800e51c:	a10a      	add	r1, pc, #40	; (adr r1, 800e548 <__ieee754_atan2+0x160>)
 800e51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e522:	e782      	b.n	800e42a <__ieee754_atan2+0x42>
 800e524:	a10c      	add	r1, pc, #48	; (adr r1, 800e558 <__ieee754_atan2+0x170>)
 800e526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e52a:	e77e      	b.n	800e42a <__ieee754_atan2+0x42>
 800e52c:	2000      	movs	r0, #0
 800e52e:	2100      	movs	r1, #0
 800e530:	e77b      	b.n	800e42a <__ieee754_atan2+0x42>
 800e532:	a107      	add	r1, pc, #28	; (adr r1, 800e550 <__ieee754_atan2+0x168>)
 800e534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e538:	e777      	b.n	800e42a <__ieee754_atan2+0x42>
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	33145c07 	.word	0x33145c07
 800e544:	3ca1a626 	.word	0x3ca1a626
 800e548:	54442d18 	.word	0x54442d18
 800e54c:	400921fb 	.word	0x400921fb
 800e550:	54442d18 	.word	0x54442d18
 800e554:	3ff921fb 	.word	0x3ff921fb
 800e558:	54442d18 	.word	0x54442d18
 800e55c:	3fe921fb 	.word	0x3fe921fb
 800e560:	08010ec0 	.word	0x08010ec0
 800e564:	08010ed8 	.word	0x08010ed8
 800e568:	54442d18 	.word	0x54442d18
 800e56c:	c00921fb 	.word	0xc00921fb
 800e570:	54442d18 	.word	0x54442d18
 800e574:	bff921fb 	.word	0xbff921fb
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	00000000 	.word	0x00000000

0800e580 <__ieee754_pow>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	ed2d 8b06 	vpush	{d8-d10}
 800e588:	b089      	sub	sp, #36	; 0x24
 800e58a:	ed8d 1b00 	vstr	d1, [sp]
 800e58e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e592:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e596:	ea58 0102 	orrs.w	r1, r8, r2
 800e59a:	ec57 6b10 	vmov	r6, r7, d0
 800e59e:	d115      	bne.n	800e5cc <__ieee754_pow+0x4c>
 800e5a0:	19b3      	adds	r3, r6, r6
 800e5a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e5a6:	4152      	adcs	r2, r2
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	4b89      	ldr	r3, [pc, #548]	; (800e7d0 <__ieee754_pow+0x250>)
 800e5ac:	4193      	sbcs	r3, r2
 800e5ae:	f080 84d2 	bcs.w	800ef56 <__ieee754_pow+0x9d6>
 800e5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	f7f1 fe7f 	bl	80002bc <__adddf3>
 800e5be:	ec41 0b10 	vmov	d0, r0, r1
 800e5c2:	b009      	add	sp, #36	; 0x24
 800e5c4:	ecbd 8b06 	vpop	{d8-d10}
 800e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	4b81      	ldr	r3, [pc, #516]	; (800e7d4 <__ieee754_pow+0x254>)
 800e5ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e5d2:	429c      	cmp	r4, r3
 800e5d4:	ee10 aa10 	vmov	sl, s0
 800e5d8:	463d      	mov	r5, r7
 800e5da:	dc06      	bgt.n	800e5ea <__ieee754_pow+0x6a>
 800e5dc:	d101      	bne.n	800e5e2 <__ieee754_pow+0x62>
 800e5de:	2e00      	cmp	r6, #0
 800e5e0:	d1e7      	bne.n	800e5b2 <__ieee754_pow+0x32>
 800e5e2:	4598      	cmp	r8, r3
 800e5e4:	dc01      	bgt.n	800e5ea <__ieee754_pow+0x6a>
 800e5e6:	d10f      	bne.n	800e608 <__ieee754_pow+0x88>
 800e5e8:	b172      	cbz	r2, 800e608 <__ieee754_pow+0x88>
 800e5ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e5ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e5f2:	ea55 050a 	orrs.w	r5, r5, sl
 800e5f6:	d1dc      	bne.n	800e5b2 <__ieee754_pow+0x32>
 800e5f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5fc:	18db      	adds	r3, r3, r3
 800e5fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e602:	4152      	adcs	r2, r2
 800e604:	429d      	cmp	r5, r3
 800e606:	e7d0      	b.n	800e5aa <__ieee754_pow+0x2a>
 800e608:	2d00      	cmp	r5, #0
 800e60a:	da3b      	bge.n	800e684 <__ieee754_pow+0x104>
 800e60c:	4b72      	ldr	r3, [pc, #456]	; (800e7d8 <__ieee754_pow+0x258>)
 800e60e:	4598      	cmp	r8, r3
 800e610:	dc51      	bgt.n	800e6b6 <__ieee754_pow+0x136>
 800e612:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e616:	4598      	cmp	r8, r3
 800e618:	f340 84ac 	ble.w	800ef74 <__ieee754_pow+0x9f4>
 800e61c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e620:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e624:	2b14      	cmp	r3, #20
 800e626:	dd0f      	ble.n	800e648 <__ieee754_pow+0xc8>
 800e628:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e62c:	fa22 f103 	lsr.w	r1, r2, r3
 800e630:	fa01 f303 	lsl.w	r3, r1, r3
 800e634:	4293      	cmp	r3, r2
 800e636:	f040 849d 	bne.w	800ef74 <__ieee754_pow+0x9f4>
 800e63a:	f001 0101 	and.w	r1, r1, #1
 800e63e:	f1c1 0302 	rsb	r3, r1, #2
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	b182      	cbz	r2, 800e668 <__ieee754_pow+0xe8>
 800e646:	e05f      	b.n	800e708 <__ieee754_pow+0x188>
 800e648:	2a00      	cmp	r2, #0
 800e64a:	d15b      	bne.n	800e704 <__ieee754_pow+0x184>
 800e64c:	f1c3 0314 	rsb	r3, r3, #20
 800e650:	fa48 f103 	asr.w	r1, r8, r3
 800e654:	fa01 f303 	lsl.w	r3, r1, r3
 800e658:	4543      	cmp	r3, r8
 800e65a:	f040 8488 	bne.w	800ef6e <__ieee754_pow+0x9ee>
 800e65e:	f001 0101 	and.w	r1, r1, #1
 800e662:	f1c1 0302 	rsb	r3, r1, #2
 800e666:	9304      	str	r3, [sp, #16]
 800e668:	4b5c      	ldr	r3, [pc, #368]	; (800e7dc <__ieee754_pow+0x25c>)
 800e66a:	4598      	cmp	r8, r3
 800e66c:	d132      	bne.n	800e6d4 <__ieee754_pow+0x154>
 800e66e:	f1b9 0f00 	cmp.w	r9, #0
 800e672:	f280 8478 	bge.w	800ef66 <__ieee754_pow+0x9e6>
 800e676:	4959      	ldr	r1, [pc, #356]	; (800e7dc <__ieee754_pow+0x25c>)
 800e678:	4632      	mov	r2, r6
 800e67a:	463b      	mov	r3, r7
 800e67c:	2000      	movs	r0, #0
 800e67e:	f7f2 f8fd 	bl	800087c <__aeabi_ddiv>
 800e682:	e79c      	b.n	800e5be <__ieee754_pow+0x3e>
 800e684:	2300      	movs	r3, #0
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	2a00      	cmp	r2, #0
 800e68a:	d13d      	bne.n	800e708 <__ieee754_pow+0x188>
 800e68c:	4b51      	ldr	r3, [pc, #324]	; (800e7d4 <__ieee754_pow+0x254>)
 800e68e:	4598      	cmp	r8, r3
 800e690:	d1ea      	bne.n	800e668 <__ieee754_pow+0xe8>
 800e692:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e696:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e69a:	ea53 030a 	orrs.w	r3, r3, sl
 800e69e:	f000 845a 	beq.w	800ef56 <__ieee754_pow+0x9d6>
 800e6a2:	4b4f      	ldr	r3, [pc, #316]	; (800e7e0 <__ieee754_pow+0x260>)
 800e6a4:	429c      	cmp	r4, r3
 800e6a6:	dd08      	ble.n	800e6ba <__ieee754_pow+0x13a>
 800e6a8:	f1b9 0f00 	cmp.w	r9, #0
 800e6ac:	f2c0 8457 	blt.w	800ef5e <__ieee754_pow+0x9de>
 800e6b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6b4:	e783      	b.n	800e5be <__ieee754_pow+0x3e>
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	e7e5      	b.n	800e686 <__ieee754_pow+0x106>
 800e6ba:	f1b9 0f00 	cmp.w	r9, #0
 800e6be:	f04f 0000 	mov.w	r0, #0
 800e6c2:	f04f 0100 	mov.w	r1, #0
 800e6c6:	f6bf af7a 	bge.w	800e5be <__ieee754_pow+0x3e>
 800e6ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e6ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e6d2:	e774      	b.n	800e5be <__ieee754_pow+0x3e>
 800e6d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e6d8:	d106      	bne.n	800e6e8 <__ieee754_pow+0x168>
 800e6da:	4632      	mov	r2, r6
 800e6dc:	463b      	mov	r3, r7
 800e6de:	4630      	mov	r0, r6
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	f7f1 ffa1 	bl	8000628 <__aeabi_dmul>
 800e6e6:	e76a      	b.n	800e5be <__ieee754_pow+0x3e>
 800e6e8:	4b3e      	ldr	r3, [pc, #248]	; (800e7e4 <__ieee754_pow+0x264>)
 800e6ea:	4599      	cmp	r9, r3
 800e6ec:	d10c      	bne.n	800e708 <__ieee754_pow+0x188>
 800e6ee:	2d00      	cmp	r5, #0
 800e6f0:	db0a      	blt.n	800e708 <__ieee754_pow+0x188>
 800e6f2:	ec47 6b10 	vmov	d0, r6, r7
 800e6f6:	b009      	add	sp, #36	; 0x24
 800e6f8:	ecbd 8b06 	vpop	{d8-d10}
 800e6fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	f000 be7a 	b.w	800f3f8 <__ieee754_sqrt>
 800e704:	2300      	movs	r3, #0
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	ec47 6b10 	vmov	d0, r6, r7
 800e70c:	f001 fdd0 	bl	80102b0 <fabs>
 800e710:	ec51 0b10 	vmov	r0, r1, d0
 800e714:	f1ba 0f00 	cmp.w	sl, #0
 800e718:	d129      	bne.n	800e76e <__ieee754_pow+0x1ee>
 800e71a:	b124      	cbz	r4, 800e726 <__ieee754_pow+0x1a6>
 800e71c:	4b2f      	ldr	r3, [pc, #188]	; (800e7dc <__ieee754_pow+0x25c>)
 800e71e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e722:	429a      	cmp	r2, r3
 800e724:	d123      	bne.n	800e76e <__ieee754_pow+0x1ee>
 800e726:	f1b9 0f00 	cmp.w	r9, #0
 800e72a:	da05      	bge.n	800e738 <__ieee754_pow+0x1b8>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	2000      	movs	r0, #0
 800e732:	492a      	ldr	r1, [pc, #168]	; (800e7dc <__ieee754_pow+0x25c>)
 800e734:	f7f2 f8a2 	bl	800087c <__aeabi_ddiv>
 800e738:	2d00      	cmp	r5, #0
 800e73a:	f6bf af40 	bge.w	800e5be <__ieee754_pow+0x3e>
 800e73e:	9b04      	ldr	r3, [sp, #16]
 800e740:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e744:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e748:	4323      	orrs	r3, r4
 800e74a:	d108      	bne.n	800e75e <__ieee754_pow+0x1de>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4610      	mov	r0, r2
 800e752:	4619      	mov	r1, r3
 800e754:	f7f1 fdb0 	bl	80002b8 <__aeabi_dsub>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	e78f      	b.n	800e67e <__ieee754_pow+0xfe>
 800e75e:	9b04      	ldr	r3, [sp, #16]
 800e760:	2b01      	cmp	r3, #1
 800e762:	f47f af2c 	bne.w	800e5be <__ieee754_pow+0x3e>
 800e766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e76a:	4619      	mov	r1, r3
 800e76c:	e727      	b.n	800e5be <__ieee754_pow+0x3e>
 800e76e:	0feb      	lsrs	r3, r5, #31
 800e770:	3b01      	subs	r3, #1
 800e772:	9306      	str	r3, [sp, #24]
 800e774:	9a06      	ldr	r2, [sp, #24]
 800e776:	9b04      	ldr	r3, [sp, #16]
 800e778:	4313      	orrs	r3, r2
 800e77a:	d102      	bne.n	800e782 <__ieee754_pow+0x202>
 800e77c:	4632      	mov	r2, r6
 800e77e:	463b      	mov	r3, r7
 800e780:	e7e6      	b.n	800e750 <__ieee754_pow+0x1d0>
 800e782:	4b19      	ldr	r3, [pc, #100]	; (800e7e8 <__ieee754_pow+0x268>)
 800e784:	4598      	cmp	r8, r3
 800e786:	f340 80fb 	ble.w	800e980 <__ieee754_pow+0x400>
 800e78a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e78e:	4598      	cmp	r8, r3
 800e790:	4b13      	ldr	r3, [pc, #76]	; (800e7e0 <__ieee754_pow+0x260>)
 800e792:	dd0c      	ble.n	800e7ae <__ieee754_pow+0x22e>
 800e794:	429c      	cmp	r4, r3
 800e796:	dc0f      	bgt.n	800e7b8 <__ieee754_pow+0x238>
 800e798:	f1b9 0f00 	cmp.w	r9, #0
 800e79c:	da0f      	bge.n	800e7be <__ieee754_pow+0x23e>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	b009      	add	sp, #36	; 0x24
 800e7a2:	ecbd 8b06 	vpop	{d8-d10}
 800e7a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7aa:	f001 bbd6 	b.w	800ff5a <__math_oflow>
 800e7ae:	429c      	cmp	r4, r3
 800e7b0:	dbf2      	blt.n	800e798 <__ieee754_pow+0x218>
 800e7b2:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <__ieee754_pow+0x25c>)
 800e7b4:	429c      	cmp	r4, r3
 800e7b6:	dd19      	ble.n	800e7ec <__ieee754_pow+0x26c>
 800e7b8:	f1b9 0f00 	cmp.w	r9, #0
 800e7bc:	dcef      	bgt.n	800e79e <__ieee754_pow+0x21e>
 800e7be:	2000      	movs	r0, #0
 800e7c0:	b009      	add	sp, #36	; 0x24
 800e7c2:	ecbd 8b06 	vpop	{d8-d10}
 800e7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	f001 bbbd 	b.w	800ff48 <__math_uflow>
 800e7ce:	bf00      	nop
 800e7d0:	fff00000 	.word	0xfff00000
 800e7d4:	7ff00000 	.word	0x7ff00000
 800e7d8:	433fffff 	.word	0x433fffff
 800e7dc:	3ff00000 	.word	0x3ff00000
 800e7e0:	3fefffff 	.word	0x3fefffff
 800e7e4:	3fe00000 	.word	0x3fe00000
 800e7e8:	41e00000 	.word	0x41e00000
 800e7ec:	4b60      	ldr	r3, [pc, #384]	; (800e970 <__ieee754_pow+0x3f0>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f7f1 fd62 	bl	80002b8 <__aeabi_dsub>
 800e7f4:	a354      	add	r3, pc, #336	; (adr r3, 800e948 <__ieee754_pow+0x3c8>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	460d      	mov	r5, r1
 800e7fe:	f7f1 ff13 	bl	8000628 <__aeabi_dmul>
 800e802:	a353      	add	r3, pc, #332	; (adr r3, 800e950 <__ieee754_pow+0x3d0>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	4606      	mov	r6, r0
 800e80a:	460f      	mov	r7, r1
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 ff0a 	bl	8000628 <__aeabi_dmul>
 800e814:	4b57      	ldr	r3, [pc, #348]	; (800e974 <__ieee754_pow+0x3f4>)
 800e816:	4682      	mov	sl, r0
 800e818:	468b      	mov	fp, r1
 800e81a:	2200      	movs	r2, #0
 800e81c:	4620      	mov	r0, r4
 800e81e:	4629      	mov	r1, r5
 800e820:	f7f1 ff02 	bl	8000628 <__aeabi_dmul>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	a14b      	add	r1, pc, #300	; (adr r1, 800e958 <__ieee754_pow+0x3d8>)
 800e82a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e82e:	f7f1 fd43 	bl	80002b8 <__aeabi_dsub>
 800e832:	4622      	mov	r2, r4
 800e834:	462b      	mov	r3, r5
 800e836:	f7f1 fef7 	bl	8000628 <__aeabi_dmul>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	2000      	movs	r0, #0
 800e840:	494d      	ldr	r1, [pc, #308]	; (800e978 <__ieee754_pow+0x3f8>)
 800e842:	f7f1 fd39 	bl	80002b8 <__aeabi_dsub>
 800e846:	4622      	mov	r2, r4
 800e848:	4680      	mov	r8, r0
 800e84a:	4689      	mov	r9, r1
 800e84c:	462b      	mov	r3, r5
 800e84e:	4620      	mov	r0, r4
 800e850:	4629      	mov	r1, r5
 800e852:	f7f1 fee9 	bl	8000628 <__aeabi_dmul>
 800e856:	4602      	mov	r2, r0
 800e858:	460b      	mov	r3, r1
 800e85a:	4640      	mov	r0, r8
 800e85c:	4649      	mov	r1, r9
 800e85e:	f7f1 fee3 	bl	8000628 <__aeabi_dmul>
 800e862:	a33f      	add	r3, pc, #252	; (adr r3, 800e960 <__ieee754_pow+0x3e0>)
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	f7f1 fede 	bl	8000628 <__aeabi_dmul>
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	4650      	mov	r0, sl
 800e872:	4659      	mov	r1, fp
 800e874:	f7f1 fd20 	bl	80002b8 <__aeabi_dsub>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4680      	mov	r8, r0
 800e87e:	4689      	mov	r9, r1
 800e880:	4630      	mov	r0, r6
 800e882:	4639      	mov	r1, r7
 800e884:	f7f1 fd1a 	bl	80002bc <__adddf3>
 800e888:	2000      	movs	r0, #0
 800e88a:	4632      	mov	r2, r6
 800e88c:	463b      	mov	r3, r7
 800e88e:	4604      	mov	r4, r0
 800e890:	460d      	mov	r5, r1
 800e892:	f7f1 fd11 	bl	80002b8 <__aeabi_dsub>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4640      	mov	r0, r8
 800e89c:	4649      	mov	r1, r9
 800e89e:	f7f1 fd0b 	bl	80002b8 <__aeabi_dsub>
 800e8a2:	9b04      	ldr	r3, [sp, #16]
 800e8a4:	9a06      	ldr	r2, [sp, #24]
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	4682      	mov	sl, r0
 800e8ac:	468b      	mov	fp, r1
 800e8ae:	f040 81e7 	bne.w	800ec80 <__ieee754_pow+0x700>
 800e8b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e968 <__ieee754_pow+0x3e8>
 800e8b6:	eeb0 8a47 	vmov.f32	s16, s14
 800e8ba:	eef0 8a67 	vmov.f32	s17, s15
 800e8be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e8c2:	2600      	movs	r6, #0
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	463b      	mov	r3, r7
 800e8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8cc:	f7f1 fcf4 	bl	80002b8 <__aeabi_dsub>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	f7f1 fea8 	bl	8000628 <__aeabi_dmul>
 800e8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8dc:	4680      	mov	r8, r0
 800e8de:	4689      	mov	r9, r1
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	4659      	mov	r1, fp
 800e8e4:	f7f1 fea0 	bl	8000628 <__aeabi_dmul>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	f7f1 fce4 	bl	80002bc <__adddf3>
 800e8f4:	4632      	mov	r2, r6
 800e8f6:	463b      	mov	r3, r7
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	4689      	mov	r9, r1
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	4629      	mov	r1, r5
 800e900:	f7f1 fe92 	bl	8000628 <__aeabi_dmul>
 800e904:	460b      	mov	r3, r1
 800e906:	4604      	mov	r4, r0
 800e908:	460d      	mov	r5, r1
 800e90a:	4602      	mov	r2, r0
 800e90c:	4649      	mov	r1, r9
 800e90e:	4640      	mov	r0, r8
 800e910:	f7f1 fcd4 	bl	80002bc <__adddf3>
 800e914:	4b19      	ldr	r3, [pc, #100]	; (800e97c <__ieee754_pow+0x3fc>)
 800e916:	4299      	cmp	r1, r3
 800e918:	ec45 4b19 	vmov	d9, r4, r5
 800e91c:	4606      	mov	r6, r0
 800e91e:	460f      	mov	r7, r1
 800e920:	468b      	mov	fp, r1
 800e922:	f340 82f1 	ble.w	800ef08 <__ieee754_pow+0x988>
 800e926:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e92a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e92e:	4303      	orrs	r3, r0
 800e930:	f000 81e4 	beq.w	800ecfc <__ieee754_pow+0x77c>
 800e934:	ec51 0b18 	vmov	r0, r1, d8
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	f7f2 f8e6 	bl	8000b0c <__aeabi_dcmplt>
 800e940:	3800      	subs	r0, #0
 800e942:	bf18      	it	ne
 800e944:	2001      	movne	r0, #1
 800e946:	e72b      	b.n	800e7a0 <__ieee754_pow+0x220>
 800e948:	60000000 	.word	0x60000000
 800e94c:	3ff71547 	.word	0x3ff71547
 800e950:	f85ddf44 	.word	0xf85ddf44
 800e954:	3e54ae0b 	.word	0x3e54ae0b
 800e958:	55555555 	.word	0x55555555
 800e95c:	3fd55555 	.word	0x3fd55555
 800e960:	652b82fe 	.word	0x652b82fe
 800e964:	3ff71547 	.word	0x3ff71547
 800e968:	00000000 	.word	0x00000000
 800e96c:	bff00000 	.word	0xbff00000
 800e970:	3ff00000 	.word	0x3ff00000
 800e974:	3fd00000 	.word	0x3fd00000
 800e978:	3fe00000 	.word	0x3fe00000
 800e97c:	408fffff 	.word	0x408fffff
 800e980:	4bd5      	ldr	r3, [pc, #852]	; (800ecd8 <__ieee754_pow+0x758>)
 800e982:	402b      	ands	r3, r5
 800e984:	2200      	movs	r2, #0
 800e986:	b92b      	cbnz	r3, 800e994 <__ieee754_pow+0x414>
 800e988:	4bd4      	ldr	r3, [pc, #848]	; (800ecdc <__ieee754_pow+0x75c>)
 800e98a:	f7f1 fe4d 	bl	8000628 <__aeabi_dmul>
 800e98e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e992:	460c      	mov	r4, r1
 800e994:	1523      	asrs	r3, r4, #20
 800e996:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e99a:	4413      	add	r3, r2
 800e99c:	9305      	str	r3, [sp, #20]
 800e99e:	4bd0      	ldr	r3, [pc, #832]	; (800ece0 <__ieee754_pow+0x760>)
 800e9a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e9a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e9a8:	429c      	cmp	r4, r3
 800e9aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e9ae:	dd08      	ble.n	800e9c2 <__ieee754_pow+0x442>
 800e9b0:	4bcc      	ldr	r3, [pc, #816]	; (800ece4 <__ieee754_pow+0x764>)
 800e9b2:	429c      	cmp	r4, r3
 800e9b4:	f340 8162 	ble.w	800ec7c <__ieee754_pow+0x6fc>
 800e9b8:	9b05      	ldr	r3, [sp, #20]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	9305      	str	r3, [sp, #20]
 800e9be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e9c2:	2400      	movs	r4, #0
 800e9c4:	00e3      	lsls	r3, r4, #3
 800e9c6:	9307      	str	r3, [sp, #28]
 800e9c8:	4bc7      	ldr	r3, [pc, #796]	; (800ece8 <__ieee754_pow+0x768>)
 800e9ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9ce:	ed93 7b00 	vldr	d7, [r3]
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	ec53 2b17 	vmov	r2, r3, d7
 800e9d8:	eeb0 9a47 	vmov.f32	s18, s14
 800e9dc:	eef0 9a67 	vmov.f32	s19, s15
 800e9e0:	4682      	mov	sl, r0
 800e9e2:	f7f1 fc69 	bl	80002b8 <__aeabi_dsub>
 800e9e6:	4652      	mov	r2, sl
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	460f      	mov	r7, r1
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	ec51 0b19 	vmov	r0, r1, d9
 800e9f2:	f7f1 fc63 	bl	80002bc <__adddf3>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	49bb      	ldr	r1, [pc, #748]	; (800ecec <__ieee754_pow+0x76c>)
 800e9fe:	f7f1 ff3d 	bl	800087c <__aeabi_ddiv>
 800ea02:	ec41 0b1a 	vmov	d10, r0, r1
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	f7f1 fe0b 	bl	8000628 <__aeabi_dmul>
 800ea12:	2300      	movs	r3, #0
 800ea14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea18:	9302      	str	r3, [sp, #8]
 800ea1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea1e:	46ab      	mov	fp, r5
 800ea20:	106d      	asrs	r5, r5, #1
 800ea22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ea26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ea2a:	ec41 0b18 	vmov	d8, r0, r1
 800ea2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ea32:	2200      	movs	r2, #0
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	4614      	mov	r4, r2
 800ea3a:	461d      	mov	r5, r3
 800ea3c:	f7f1 fdf4 	bl	8000628 <__aeabi_dmul>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	4630      	mov	r0, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f1 fc36 	bl	80002b8 <__aeabi_dsub>
 800ea4c:	ec53 2b19 	vmov	r2, r3, d9
 800ea50:	4606      	mov	r6, r0
 800ea52:	460f      	mov	r7, r1
 800ea54:	4620      	mov	r0, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f1 fc2e 	bl	80002b8 <__aeabi_dsub>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4650      	mov	r0, sl
 800ea62:	4659      	mov	r1, fp
 800ea64:	f7f1 fc28 	bl	80002b8 <__aeabi_dsub>
 800ea68:	4642      	mov	r2, r8
 800ea6a:	464b      	mov	r3, r9
 800ea6c:	f7f1 fddc 	bl	8000628 <__aeabi_dmul>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fc1e 	bl	80002b8 <__aeabi_dsub>
 800ea7c:	ec53 2b1a 	vmov	r2, r3, d10
 800ea80:	f7f1 fdd2 	bl	8000628 <__aeabi_dmul>
 800ea84:	ec53 2b18 	vmov	r2, r3, d8
 800ea88:	ec41 0b19 	vmov	d9, r0, r1
 800ea8c:	ec51 0b18 	vmov	r0, r1, d8
 800ea90:	f7f1 fdca 	bl	8000628 <__aeabi_dmul>
 800ea94:	a37c      	add	r3, pc, #496	; (adr r3, 800ec88 <__ieee754_pow+0x708>)
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	460d      	mov	r5, r1
 800ea9e:	f7f1 fdc3 	bl	8000628 <__aeabi_dmul>
 800eaa2:	a37b      	add	r3, pc, #492	; (adr r3, 800ec90 <__ieee754_pow+0x710>)
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f7f1 fc08 	bl	80002bc <__adddf3>
 800eaac:	4622      	mov	r2, r4
 800eaae:	462b      	mov	r3, r5
 800eab0:	f7f1 fdba 	bl	8000628 <__aeabi_dmul>
 800eab4:	a378      	add	r3, pc, #480	; (adr r3, 800ec98 <__ieee754_pow+0x718>)
 800eab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaba:	f7f1 fbff 	bl	80002bc <__adddf3>
 800eabe:	4622      	mov	r2, r4
 800eac0:	462b      	mov	r3, r5
 800eac2:	f7f1 fdb1 	bl	8000628 <__aeabi_dmul>
 800eac6:	a376      	add	r3, pc, #472	; (adr r3, 800eca0 <__ieee754_pow+0x720>)
 800eac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eacc:	f7f1 fbf6 	bl	80002bc <__adddf3>
 800ead0:	4622      	mov	r2, r4
 800ead2:	462b      	mov	r3, r5
 800ead4:	f7f1 fda8 	bl	8000628 <__aeabi_dmul>
 800ead8:	a373      	add	r3, pc, #460	; (adr r3, 800eca8 <__ieee754_pow+0x728>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f1 fbed 	bl	80002bc <__adddf3>
 800eae2:	4622      	mov	r2, r4
 800eae4:	462b      	mov	r3, r5
 800eae6:	f7f1 fd9f 	bl	8000628 <__aeabi_dmul>
 800eaea:	a371      	add	r3, pc, #452	; (adr r3, 800ecb0 <__ieee754_pow+0x730>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f1 fbe4 	bl	80002bc <__adddf3>
 800eaf4:	4622      	mov	r2, r4
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	460f      	mov	r7, r1
 800eafa:	462b      	mov	r3, r5
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	f7f1 fd92 	bl	8000628 <__aeabi_dmul>
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	4630      	mov	r0, r6
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	f7f1 fd8c 	bl	8000628 <__aeabi_dmul>
 800eb10:	4642      	mov	r2, r8
 800eb12:	4604      	mov	r4, r0
 800eb14:	460d      	mov	r5, r1
 800eb16:	464b      	mov	r3, r9
 800eb18:	ec51 0b18 	vmov	r0, r1, d8
 800eb1c:	f7f1 fbce 	bl	80002bc <__adddf3>
 800eb20:	ec53 2b19 	vmov	r2, r3, d9
 800eb24:	f7f1 fd80 	bl	8000628 <__aeabi_dmul>
 800eb28:	4622      	mov	r2, r4
 800eb2a:	462b      	mov	r3, r5
 800eb2c:	f7f1 fbc6 	bl	80002bc <__adddf3>
 800eb30:	4642      	mov	r2, r8
 800eb32:	4682      	mov	sl, r0
 800eb34:	468b      	mov	fp, r1
 800eb36:	464b      	mov	r3, r9
 800eb38:	4640      	mov	r0, r8
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	f7f1 fd74 	bl	8000628 <__aeabi_dmul>
 800eb40:	4b6b      	ldr	r3, [pc, #428]	; (800ecf0 <__ieee754_pow+0x770>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	f7f1 fbb8 	bl	80002bc <__adddf3>
 800eb4c:	4652      	mov	r2, sl
 800eb4e:	465b      	mov	r3, fp
 800eb50:	f7f1 fbb4 	bl	80002bc <__adddf3>
 800eb54:	2000      	movs	r0, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 fd61 	bl	8000628 <__aeabi_dmul>
 800eb66:	4b62      	ldr	r3, [pc, #392]	; (800ecf0 <__ieee754_pow+0x770>)
 800eb68:	4680      	mov	r8, r0
 800eb6a:	4689      	mov	r9, r1
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 fba1 	bl	80002b8 <__aeabi_dsub>
 800eb76:	4632      	mov	r2, r6
 800eb78:	463b      	mov	r3, r7
 800eb7a:	f7f1 fb9d 	bl	80002b8 <__aeabi_dsub>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4650      	mov	r0, sl
 800eb84:	4659      	mov	r1, fp
 800eb86:	f7f1 fb97 	bl	80002b8 <__aeabi_dsub>
 800eb8a:	ec53 2b18 	vmov	r2, r3, d8
 800eb8e:	f7f1 fd4b 	bl	8000628 <__aeabi_dmul>
 800eb92:	4622      	mov	r2, r4
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	462b      	mov	r3, r5
 800eb9a:	ec51 0b19 	vmov	r0, r1, d9
 800eb9e:	f7f1 fd43 	bl	8000628 <__aeabi_dmul>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	4630      	mov	r0, r6
 800eba8:	4639      	mov	r1, r7
 800ebaa:	f7f1 fb87 	bl	80002bc <__adddf3>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	460f      	mov	r7, r1
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4640      	mov	r0, r8
 800ebb8:	4649      	mov	r1, r9
 800ebba:	f7f1 fb7f 	bl	80002bc <__adddf3>
 800ebbe:	a33e      	add	r3, pc, #248	; (adr r3, 800ecb8 <__ieee754_pow+0x738>)
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460d      	mov	r5, r1
 800ebca:	f7f1 fd2d 	bl	8000628 <__aeabi_dmul>
 800ebce:	4642      	mov	r2, r8
 800ebd0:	ec41 0b18 	vmov	d8, r0, r1
 800ebd4:	464b      	mov	r3, r9
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	4629      	mov	r1, r5
 800ebda:	f7f1 fb6d 	bl	80002b8 <__aeabi_dsub>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	f7f1 fb67 	bl	80002b8 <__aeabi_dsub>
 800ebea:	a335      	add	r3, pc, #212	; (adr r3, 800ecc0 <__ieee754_pow+0x740>)
 800ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf0:	f7f1 fd1a 	bl	8000628 <__aeabi_dmul>
 800ebf4:	a334      	add	r3, pc, #208	; (adr r3, 800ecc8 <__ieee754_pow+0x748>)
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	460f      	mov	r7, r1
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fd11 	bl	8000628 <__aeabi_dmul>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f7f1 fb55 	bl	80002bc <__adddf3>
 800ec12:	9a07      	ldr	r2, [sp, #28]
 800ec14:	4b37      	ldr	r3, [pc, #220]	; (800ecf4 <__ieee754_pow+0x774>)
 800ec16:	4413      	add	r3, r2
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	f7f1 fb4e 	bl	80002bc <__adddf3>
 800ec20:	4682      	mov	sl, r0
 800ec22:	9805      	ldr	r0, [sp, #20]
 800ec24:	468b      	mov	fp, r1
 800ec26:	f7f1 fc95 	bl	8000554 <__aeabi_i2d>
 800ec2a:	9a07      	ldr	r2, [sp, #28]
 800ec2c:	4b32      	ldr	r3, [pc, #200]	; (800ecf8 <__ieee754_pow+0x778>)
 800ec2e:	4413      	add	r3, r2
 800ec30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	4652      	mov	r2, sl
 800ec3a:	465b      	mov	r3, fp
 800ec3c:	ec51 0b18 	vmov	r0, r1, d8
 800ec40:	f7f1 fb3c 	bl	80002bc <__adddf3>
 800ec44:	4642      	mov	r2, r8
 800ec46:	464b      	mov	r3, r9
 800ec48:	f7f1 fb38 	bl	80002bc <__adddf3>
 800ec4c:	4632      	mov	r2, r6
 800ec4e:	463b      	mov	r3, r7
 800ec50:	f7f1 fb34 	bl	80002bc <__adddf3>
 800ec54:	2000      	movs	r0, #0
 800ec56:	4632      	mov	r2, r6
 800ec58:	463b      	mov	r3, r7
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	f7f1 fb2b 	bl	80002b8 <__aeabi_dsub>
 800ec62:	4642      	mov	r2, r8
 800ec64:	464b      	mov	r3, r9
 800ec66:	f7f1 fb27 	bl	80002b8 <__aeabi_dsub>
 800ec6a:	ec53 2b18 	vmov	r2, r3, d8
 800ec6e:	f7f1 fb23 	bl	80002b8 <__aeabi_dsub>
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	4650      	mov	r0, sl
 800ec78:	4659      	mov	r1, fp
 800ec7a:	e610      	b.n	800e89e <__ieee754_pow+0x31e>
 800ec7c:	2401      	movs	r4, #1
 800ec7e:	e6a1      	b.n	800e9c4 <__ieee754_pow+0x444>
 800ec80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ecd0 <__ieee754_pow+0x750>
 800ec84:	e617      	b.n	800e8b6 <__ieee754_pow+0x336>
 800ec86:	bf00      	nop
 800ec88:	4a454eef 	.word	0x4a454eef
 800ec8c:	3fca7e28 	.word	0x3fca7e28
 800ec90:	93c9db65 	.word	0x93c9db65
 800ec94:	3fcd864a 	.word	0x3fcd864a
 800ec98:	a91d4101 	.word	0xa91d4101
 800ec9c:	3fd17460 	.word	0x3fd17460
 800eca0:	518f264d 	.word	0x518f264d
 800eca4:	3fd55555 	.word	0x3fd55555
 800eca8:	db6fabff 	.word	0xdb6fabff
 800ecac:	3fdb6db6 	.word	0x3fdb6db6
 800ecb0:	33333303 	.word	0x33333303
 800ecb4:	3fe33333 	.word	0x3fe33333
 800ecb8:	e0000000 	.word	0xe0000000
 800ecbc:	3feec709 	.word	0x3feec709
 800ecc0:	dc3a03fd 	.word	0xdc3a03fd
 800ecc4:	3feec709 	.word	0x3feec709
 800ecc8:	145b01f5 	.word	0x145b01f5
 800eccc:	be3e2fe0 	.word	0xbe3e2fe0
 800ecd0:	00000000 	.word	0x00000000
 800ecd4:	3ff00000 	.word	0x3ff00000
 800ecd8:	7ff00000 	.word	0x7ff00000
 800ecdc:	43400000 	.word	0x43400000
 800ece0:	0003988e 	.word	0x0003988e
 800ece4:	000bb679 	.word	0x000bb679
 800ece8:	08010ef0 	.word	0x08010ef0
 800ecec:	3ff00000 	.word	0x3ff00000
 800ecf0:	40080000 	.word	0x40080000
 800ecf4:	08010f10 	.word	0x08010f10
 800ecf8:	08010f00 	.word	0x08010f00
 800ecfc:	a3b5      	add	r3, pc, #724	; (adr r3, 800efd4 <__ieee754_pow+0xa54>)
 800ecfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	f7f1 fad9 	bl	80002bc <__adddf3>
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	ec41 0b1a 	vmov	d10, r0, r1
 800ed10:	462b      	mov	r3, r5
 800ed12:	4630      	mov	r0, r6
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7f1 facf 	bl	80002b8 <__aeabi_dsub>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	ec51 0b1a 	vmov	r0, r1, d10
 800ed22:	f7f1 ff11 	bl	8000b48 <__aeabi_dcmpgt>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f47f ae04 	bne.w	800e934 <__ieee754_pow+0x3b4>
 800ed2c:	4aa4      	ldr	r2, [pc, #656]	; (800efc0 <__ieee754_pow+0xa40>)
 800ed2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed32:	4293      	cmp	r3, r2
 800ed34:	f340 8108 	ble.w	800ef48 <__ieee754_pow+0x9c8>
 800ed38:	151b      	asrs	r3, r3, #20
 800ed3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ed3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ed42:	fa4a f303 	asr.w	r3, sl, r3
 800ed46:	445b      	add	r3, fp
 800ed48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ed4c:	4e9d      	ldr	r6, [pc, #628]	; (800efc4 <__ieee754_pow+0xa44>)
 800ed4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ed52:	4116      	asrs	r6, r2
 800ed54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ed58:	2000      	movs	r0, #0
 800ed5a:	ea23 0106 	bic.w	r1, r3, r6
 800ed5e:	f1c2 0214 	rsb	r2, r2, #20
 800ed62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ed66:	fa4a fa02 	asr.w	sl, sl, r2
 800ed6a:	f1bb 0f00 	cmp.w	fp, #0
 800ed6e:	4602      	mov	r2, r0
 800ed70:	460b      	mov	r3, r1
 800ed72:	4620      	mov	r0, r4
 800ed74:	4629      	mov	r1, r5
 800ed76:	bfb8      	it	lt
 800ed78:	f1ca 0a00 	rsblt	sl, sl, #0
 800ed7c:	f7f1 fa9c 	bl	80002b8 <__aeabi_dsub>
 800ed80:	ec41 0b19 	vmov	d9, r0, r1
 800ed84:	4642      	mov	r2, r8
 800ed86:	464b      	mov	r3, r9
 800ed88:	ec51 0b19 	vmov	r0, r1, d9
 800ed8c:	f7f1 fa96 	bl	80002bc <__adddf3>
 800ed90:	a37b      	add	r3, pc, #492	; (adr r3, 800ef80 <__ieee754_pow+0xa00>)
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	2000      	movs	r0, #0
 800ed98:	4604      	mov	r4, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	f7f1 fc44 	bl	8000628 <__aeabi_dmul>
 800eda0:	ec53 2b19 	vmov	r2, r3, d9
 800eda4:	4606      	mov	r6, r0
 800eda6:	460f      	mov	r7, r1
 800eda8:	4620      	mov	r0, r4
 800edaa:	4629      	mov	r1, r5
 800edac:	f7f1 fa84 	bl	80002b8 <__aeabi_dsub>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	4640      	mov	r0, r8
 800edb6:	4649      	mov	r1, r9
 800edb8:	f7f1 fa7e 	bl	80002b8 <__aeabi_dsub>
 800edbc:	a372      	add	r3, pc, #456	; (adr r3, 800ef88 <__ieee754_pow+0xa08>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	f7f1 fc31 	bl	8000628 <__aeabi_dmul>
 800edc6:	a372      	add	r3, pc, #456	; (adr r3, 800ef90 <__ieee754_pow+0xa10>)
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	4680      	mov	r8, r0
 800edce:	4689      	mov	r9, r1
 800edd0:	4620      	mov	r0, r4
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 fc28 	bl	8000628 <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4640      	mov	r0, r8
 800edde:	4649      	mov	r1, r9
 800ede0:	f7f1 fa6c 	bl	80002bc <__adddf3>
 800ede4:	4604      	mov	r4, r0
 800ede6:	460d      	mov	r5, r1
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	4630      	mov	r0, r6
 800edee:	4639      	mov	r1, r7
 800edf0:	f7f1 fa64 	bl	80002bc <__adddf3>
 800edf4:	4632      	mov	r2, r6
 800edf6:	463b      	mov	r3, r7
 800edf8:	4680      	mov	r8, r0
 800edfa:	4689      	mov	r9, r1
 800edfc:	f7f1 fa5c 	bl	80002b8 <__aeabi_dsub>
 800ee00:	4602      	mov	r2, r0
 800ee02:	460b      	mov	r3, r1
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fa56 	bl	80002b8 <__aeabi_dsub>
 800ee0c:	4642      	mov	r2, r8
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460f      	mov	r7, r1
 800ee12:	464b      	mov	r3, r9
 800ee14:	4640      	mov	r0, r8
 800ee16:	4649      	mov	r1, r9
 800ee18:	f7f1 fc06 	bl	8000628 <__aeabi_dmul>
 800ee1c:	a35e      	add	r3, pc, #376	; (adr r3, 800ef98 <__ieee754_pow+0xa18>)
 800ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee22:	4604      	mov	r4, r0
 800ee24:	460d      	mov	r5, r1
 800ee26:	f7f1 fbff 	bl	8000628 <__aeabi_dmul>
 800ee2a:	a35d      	add	r3, pc, #372	; (adr r3, 800efa0 <__ieee754_pow+0xa20>)
 800ee2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee30:	f7f1 fa42 	bl	80002b8 <__aeabi_dsub>
 800ee34:	4622      	mov	r2, r4
 800ee36:	462b      	mov	r3, r5
 800ee38:	f7f1 fbf6 	bl	8000628 <__aeabi_dmul>
 800ee3c:	a35a      	add	r3, pc, #360	; (adr r3, 800efa8 <__ieee754_pow+0xa28>)
 800ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee42:	f7f1 fa3b 	bl	80002bc <__adddf3>
 800ee46:	4622      	mov	r2, r4
 800ee48:	462b      	mov	r3, r5
 800ee4a:	f7f1 fbed 	bl	8000628 <__aeabi_dmul>
 800ee4e:	a358      	add	r3, pc, #352	; (adr r3, 800efb0 <__ieee754_pow+0xa30>)
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	f7f1 fa30 	bl	80002b8 <__aeabi_dsub>
 800ee58:	4622      	mov	r2, r4
 800ee5a:	462b      	mov	r3, r5
 800ee5c:	f7f1 fbe4 	bl	8000628 <__aeabi_dmul>
 800ee60:	a355      	add	r3, pc, #340	; (adr r3, 800efb8 <__ieee754_pow+0xa38>)
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	f7f1 fa29 	bl	80002bc <__adddf3>
 800ee6a:	4622      	mov	r2, r4
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	f7f1 fbdb 	bl	8000628 <__aeabi_dmul>
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	4640      	mov	r0, r8
 800ee78:	4649      	mov	r1, r9
 800ee7a:	f7f1 fa1d 	bl	80002b8 <__aeabi_dsub>
 800ee7e:	4604      	mov	r4, r0
 800ee80:	460d      	mov	r5, r1
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4640      	mov	r0, r8
 800ee88:	4649      	mov	r1, r9
 800ee8a:	f7f1 fbcd 	bl	8000628 <__aeabi_dmul>
 800ee8e:	2200      	movs	r2, #0
 800ee90:	ec41 0b19 	vmov	d9, r0, r1
 800ee94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee98:	4620      	mov	r0, r4
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	f7f1 fa0c 	bl	80002b8 <__aeabi_dsub>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	ec51 0b19 	vmov	r0, r1, d9
 800eea8:	f7f1 fce8 	bl	800087c <__aeabi_ddiv>
 800eeac:	4632      	mov	r2, r6
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	463b      	mov	r3, r7
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	4649      	mov	r1, r9
 800eeb8:	f7f1 fbb6 	bl	8000628 <__aeabi_dmul>
 800eebc:	4632      	mov	r2, r6
 800eebe:	463b      	mov	r3, r7
 800eec0:	f7f1 f9fc 	bl	80002bc <__adddf3>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4620      	mov	r0, r4
 800eeca:	4629      	mov	r1, r5
 800eecc:	f7f1 f9f4 	bl	80002b8 <__aeabi_dsub>
 800eed0:	4642      	mov	r2, r8
 800eed2:	464b      	mov	r3, r9
 800eed4:	f7f1 f9f0 	bl	80002b8 <__aeabi_dsub>
 800eed8:	460b      	mov	r3, r1
 800eeda:	4602      	mov	r2, r0
 800eedc:	493a      	ldr	r1, [pc, #232]	; (800efc8 <__ieee754_pow+0xa48>)
 800eede:	2000      	movs	r0, #0
 800eee0:	f7f1 f9ea 	bl	80002b8 <__aeabi_dsub>
 800eee4:	ec41 0b10 	vmov	d0, r0, r1
 800eee8:	ee10 3a90 	vmov	r3, s1
 800eeec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eef4:	da2b      	bge.n	800ef4e <__ieee754_pow+0x9ce>
 800eef6:	4650      	mov	r0, sl
 800eef8:	f001 fa76 	bl	80103e8 <scalbn>
 800eefc:	ec51 0b10 	vmov	r0, r1, d0
 800ef00:	ec53 2b18 	vmov	r2, r3, d8
 800ef04:	f7ff bbed 	b.w	800e6e2 <__ieee754_pow+0x162>
 800ef08:	4b30      	ldr	r3, [pc, #192]	; (800efcc <__ieee754_pow+0xa4c>)
 800ef0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ef0e:	429e      	cmp	r6, r3
 800ef10:	f77f af0c 	ble.w	800ed2c <__ieee754_pow+0x7ac>
 800ef14:	4b2e      	ldr	r3, [pc, #184]	; (800efd0 <__ieee754_pow+0xa50>)
 800ef16:	440b      	add	r3, r1
 800ef18:	4303      	orrs	r3, r0
 800ef1a:	d009      	beq.n	800ef30 <__ieee754_pow+0x9b0>
 800ef1c:	ec51 0b18 	vmov	r0, r1, d8
 800ef20:	2200      	movs	r2, #0
 800ef22:	2300      	movs	r3, #0
 800ef24:	f7f1 fdf2 	bl	8000b0c <__aeabi_dcmplt>
 800ef28:	3800      	subs	r0, #0
 800ef2a:	bf18      	it	ne
 800ef2c:	2001      	movne	r0, #1
 800ef2e:	e447      	b.n	800e7c0 <__ieee754_pow+0x240>
 800ef30:	4622      	mov	r2, r4
 800ef32:	462b      	mov	r3, r5
 800ef34:	f7f1 f9c0 	bl	80002b8 <__aeabi_dsub>
 800ef38:	4642      	mov	r2, r8
 800ef3a:	464b      	mov	r3, r9
 800ef3c:	f7f1 fdfa 	bl	8000b34 <__aeabi_dcmpge>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	f43f aef3 	beq.w	800ed2c <__ieee754_pow+0x7ac>
 800ef46:	e7e9      	b.n	800ef1c <__ieee754_pow+0x99c>
 800ef48:	f04f 0a00 	mov.w	sl, #0
 800ef4c:	e71a      	b.n	800ed84 <__ieee754_pow+0x804>
 800ef4e:	ec51 0b10 	vmov	r0, r1, d0
 800ef52:	4619      	mov	r1, r3
 800ef54:	e7d4      	b.n	800ef00 <__ieee754_pow+0x980>
 800ef56:	491c      	ldr	r1, [pc, #112]	; (800efc8 <__ieee754_pow+0xa48>)
 800ef58:	2000      	movs	r0, #0
 800ef5a:	f7ff bb30 	b.w	800e5be <__ieee754_pow+0x3e>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	2100      	movs	r1, #0
 800ef62:	f7ff bb2c 	b.w	800e5be <__ieee754_pow+0x3e>
 800ef66:	4630      	mov	r0, r6
 800ef68:	4639      	mov	r1, r7
 800ef6a:	f7ff bb28 	b.w	800e5be <__ieee754_pow+0x3e>
 800ef6e:	9204      	str	r2, [sp, #16]
 800ef70:	f7ff bb7a 	b.w	800e668 <__ieee754_pow+0xe8>
 800ef74:	2300      	movs	r3, #0
 800ef76:	f7ff bb64 	b.w	800e642 <__ieee754_pow+0xc2>
 800ef7a:	bf00      	nop
 800ef7c:	f3af 8000 	nop.w
 800ef80:	00000000 	.word	0x00000000
 800ef84:	3fe62e43 	.word	0x3fe62e43
 800ef88:	fefa39ef 	.word	0xfefa39ef
 800ef8c:	3fe62e42 	.word	0x3fe62e42
 800ef90:	0ca86c39 	.word	0x0ca86c39
 800ef94:	be205c61 	.word	0xbe205c61
 800ef98:	72bea4d0 	.word	0x72bea4d0
 800ef9c:	3e663769 	.word	0x3e663769
 800efa0:	c5d26bf1 	.word	0xc5d26bf1
 800efa4:	3ebbbd41 	.word	0x3ebbbd41
 800efa8:	af25de2c 	.word	0xaf25de2c
 800efac:	3f11566a 	.word	0x3f11566a
 800efb0:	16bebd93 	.word	0x16bebd93
 800efb4:	3f66c16c 	.word	0x3f66c16c
 800efb8:	5555553e 	.word	0x5555553e
 800efbc:	3fc55555 	.word	0x3fc55555
 800efc0:	3fe00000 	.word	0x3fe00000
 800efc4:	000fffff 	.word	0x000fffff
 800efc8:	3ff00000 	.word	0x3ff00000
 800efcc:	4090cbff 	.word	0x4090cbff
 800efd0:	3f6f3400 	.word	0x3f6f3400
 800efd4:	652b82fe 	.word	0x652b82fe
 800efd8:	3c971547 	.word	0x3c971547
 800efdc:	00000000 	.word	0x00000000

0800efe0 <__ieee754_rem_pio2>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	ed2d 8b02 	vpush	{d8}
 800efe8:	ec55 4b10 	vmov	r4, r5, d0
 800efec:	4bca      	ldr	r3, [pc, #808]	; (800f318 <__ieee754_rem_pio2+0x338>)
 800efee:	b08b      	sub	sp, #44	; 0x2c
 800eff0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800eff4:	4598      	cmp	r8, r3
 800eff6:	4682      	mov	sl, r0
 800eff8:	9502      	str	r5, [sp, #8]
 800effa:	dc08      	bgt.n	800f00e <__ieee754_rem_pio2+0x2e>
 800effc:	2200      	movs	r2, #0
 800effe:	2300      	movs	r3, #0
 800f000:	ed80 0b00 	vstr	d0, [r0]
 800f004:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f008:	f04f 0b00 	mov.w	fp, #0
 800f00c:	e028      	b.n	800f060 <__ieee754_rem_pio2+0x80>
 800f00e:	4bc3      	ldr	r3, [pc, #780]	; (800f31c <__ieee754_rem_pio2+0x33c>)
 800f010:	4598      	cmp	r8, r3
 800f012:	dc78      	bgt.n	800f106 <__ieee754_rem_pio2+0x126>
 800f014:	9b02      	ldr	r3, [sp, #8]
 800f016:	4ec2      	ldr	r6, [pc, #776]	; (800f320 <__ieee754_rem_pio2+0x340>)
 800f018:	2b00      	cmp	r3, #0
 800f01a:	ee10 0a10 	vmov	r0, s0
 800f01e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f2e0 <__ieee754_rem_pio2+0x300>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	4629      	mov	r1, r5
 800f026:	dd39      	ble.n	800f09c <__ieee754_rem_pio2+0xbc>
 800f028:	f7f1 f946 	bl	80002b8 <__aeabi_dsub>
 800f02c:	45b0      	cmp	r8, r6
 800f02e:	4604      	mov	r4, r0
 800f030:	460d      	mov	r5, r1
 800f032:	d01b      	beq.n	800f06c <__ieee754_rem_pio2+0x8c>
 800f034:	a3ac      	add	r3, pc, #688	; (adr r3, 800f2e8 <__ieee754_rem_pio2+0x308>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 f93d 	bl	80002b8 <__aeabi_dsub>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	e9ca 2300 	strd	r2, r3, [sl]
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 f935 	bl	80002b8 <__aeabi_dsub>
 800f04e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f2e8 <__ieee754_rem_pio2+0x308>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	f7f1 f930 	bl	80002b8 <__aeabi_dsub>
 800f058:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f05c:	f04f 0b01 	mov.w	fp, #1
 800f060:	4658      	mov	r0, fp
 800f062:	b00b      	add	sp, #44	; 0x2c
 800f064:	ecbd 8b02 	vpop	{d8}
 800f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f2f0 <__ieee754_rem_pio2+0x310>)
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	f7f1 f921 	bl	80002b8 <__aeabi_dsub>
 800f076:	a3a0      	add	r3, pc, #640	; (adr r3, 800f2f8 <__ieee754_rem_pio2+0x318>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	4604      	mov	r4, r0
 800f07e:	460d      	mov	r5, r1
 800f080:	f7f1 f91a 	bl	80002b8 <__aeabi_dsub>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	e9ca 2300 	strd	r2, r3, [sl]
 800f08c:	4620      	mov	r0, r4
 800f08e:	4629      	mov	r1, r5
 800f090:	f7f1 f912 	bl	80002b8 <__aeabi_dsub>
 800f094:	a398      	add	r3, pc, #608	; (adr r3, 800f2f8 <__ieee754_rem_pio2+0x318>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	e7db      	b.n	800f054 <__ieee754_rem_pio2+0x74>
 800f09c:	f7f1 f90e 	bl	80002bc <__adddf3>
 800f0a0:	45b0      	cmp	r8, r6
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	460d      	mov	r5, r1
 800f0a6:	d016      	beq.n	800f0d6 <__ieee754_rem_pio2+0xf6>
 800f0a8:	a38f      	add	r3, pc, #572	; (adr r3, 800f2e8 <__ieee754_rem_pio2+0x308>)
 800f0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ae:	f7f1 f905 	bl	80002bc <__adddf3>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	e9ca 2300 	strd	r2, r3, [sl]
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7f1 f8fb 	bl	80002b8 <__aeabi_dsub>
 800f0c2:	a389      	add	r3, pc, #548	; (adr r3, 800f2e8 <__ieee754_rem_pio2+0x308>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 f8f8 	bl	80002bc <__adddf3>
 800f0cc:	f04f 3bff 	mov.w	fp, #4294967295
 800f0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f0d4:	e7c4      	b.n	800f060 <__ieee754_rem_pio2+0x80>
 800f0d6:	a386      	add	r3, pc, #536	; (adr r3, 800f2f0 <__ieee754_rem_pio2+0x310>)
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	f7f1 f8ee 	bl	80002bc <__adddf3>
 800f0e0:	a385      	add	r3, pc, #532	; (adr r3, 800f2f8 <__ieee754_rem_pio2+0x318>)
 800f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	f7f1 f8e7 	bl	80002bc <__adddf3>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	e9ca 2300 	strd	r2, r3, [sl]
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	f7f1 f8dd 	bl	80002b8 <__aeabi_dsub>
 800f0fe:	a37e      	add	r3, pc, #504	; (adr r3, 800f2f8 <__ieee754_rem_pio2+0x318>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	e7e0      	b.n	800f0c8 <__ieee754_rem_pio2+0xe8>
 800f106:	4b87      	ldr	r3, [pc, #540]	; (800f324 <__ieee754_rem_pio2+0x344>)
 800f108:	4598      	cmp	r8, r3
 800f10a:	f300 80d9 	bgt.w	800f2c0 <__ieee754_rem_pio2+0x2e0>
 800f10e:	f001 f8cf 	bl	80102b0 <fabs>
 800f112:	ec55 4b10 	vmov	r4, r5, d0
 800f116:	ee10 0a10 	vmov	r0, s0
 800f11a:	a379      	add	r3, pc, #484	; (adr r3, 800f300 <__ieee754_rem_pio2+0x320>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	4629      	mov	r1, r5
 800f122:	f7f1 fa81 	bl	8000628 <__aeabi_dmul>
 800f126:	4b80      	ldr	r3, [pc, #512]	; (800f328 <__ieee754_rem_pio2+0x348>)
 800f128:	2200      	movs	r2, #0
 800f12a:	f7f1 f8c7 	bl	80002bc <__adddf3>
 800f12e:	f7f1 fd2b 	bl	8000b88 <__aeabi_d2iz>
 800f132:	4683      	mov	fp, r0
 800f134:	f7f1 fa0e 	bl	8000554 <__aeabi_i2d>
 800f138:	4602      	mov	r2, r0
 800f13a:	460b      	mov	r3, r1
 800f13c:	ec43 2b18 	vmov	d8, r2, r3
 800f140:	a367      	add	r3, pc, #412	; (adr r3, 800f2e0 <__ieee754_rem_pio2+0x300>)
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f7f1 fa6f 	bl	8000628 <__aeabi_dmul>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4620      	mov	r0, r4
 800f150:	4629      	mov	r1, r5
 800f152:	f7f1 f8b1 	bl	80002b8 <__aeabi_dsub>
 800f156:	a364      	add	r3, pc, #400	; (adr r3, 800f2e8 <__ieee754_rem_pio2+0x308>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4606      	mov	r6, r0
 800f15e:	460f      	mov	r7, r1
 800f160:	ec51 0b18 	vmov	r0, r1, d8
 800f164:	f7f1 fa60 	bl	8000628 <__aeabi_dmul>
 800f168:	f1bb 0f1f 	cmp.w	fp, #31
 800f16c:	4604      	mov	r4, r0
 800f16e:	460d      	mov	r5, r1
 800f170:	dc0d      	bgt.n	800f18e <__ieee754_rem_pio2+0x1ae>
 800f172:	4b6e      	ldr	r3, [pc, #440]	; (800f32c <__ieee754_rem_pio2+0x34c>)
 800f174:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f17c:	4543      	cmp	r3, r8
 800f17e:	d006      	beq.n	800f18e <__ieee754_rem_pio2+0x1ae>
 800f180:	4622      	mov	r2, r4
 800f182:	462b      	mov	r3, r5
 800f184:	4630      	mov	r0, r6
 800f186:	4639      	mov	r1, r7
 800f188:	f7f1 f896 	bl	80002b8 <__aeabi_dsub>
 800f18c:	e00f      	b.n	800f1ae <__ieee754_rem_pio2+0x1ce>
 800f18e:	462b      	mov	r3, r5
 800f190:	4622      	mov	r2, r4
 800f192:	4630      	mov	r0, r6
 800f194:	4639      	mov	r1, r7
 800f196:	f7f1 f88f 	bl	80002b8 <__aeabi_dsub>
 800f19a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f19e:	9303      	str	r3, [sp, #12]
 800f1a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f1a8:	f1b8 0f10 	cmp.w	r8, #16
 800f1ac:	dc02      	bgt.n	800f1b4 <__ieee754_rem_pio2+0x1d4>
 800f1ae:	e9ca 0100 	strd	r0, r1, [sl]
 800f1b2:	e039      	b.n	800f228 <__ieee754_rem_pio2+0x248>
 800f1b4:	a34e      	add	r3, pc, #312	; (adr r3, 800f2f0 <__ieee754_rem_pio2+0x310>)
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	ec51 0b18 	vmov	r0, r1, d8
 800f1be:	f7f1 fa33 	bl	8000628 <__aeabi_dmul>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	4639      	mov	r1, r7
 800f1ce:	f7f1 f873 	bl	80002b8 <__aeabi_dsub>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4680      	mov	r8, r0
 800f1d8:	4689      	mov	r9, r1
 800f1da:	4630      	mov	r0, r6
 800f1dc:	4639      	mov	r1, r7
 800f1de:	f7f1 f86b 	bl	80002b8 <__aeabi_dsub>
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	462b      	mov	r3, r5
 800f1e6:	f7f1 f867 	bl	80002b8 <__aeabi_dsub>
 800f1ea:	a343      	add	r3, pc, #268	; (adr r3, 800f2f8 <__ieee754_rem_pio2+0x318>)
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	460d      	mov	r5, r1
 800f1f4:	ec51 0b18 	vmov	r0, r1, d8
 800f1f8:	f7f1 fa16 	bl	8000628 <__aeabi_dmul>
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	462b      	mov	r3, r5
 800f200:	f7f1 f85a 	bl	80002b8 <__aeabi_dsub>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	4604      	mov	r4, r0
 800f20a:	460d      	mov	r5, r1
 800f20c:	4640      	mov	r0, r8
 800f20e:	4649      	mov	r1, r9
 800f210:	f7f1 f852 	bl	80002b8 <__aeabi_dsub>
 800f214:	9a03      	ldr	r2, [sp, #12]
 800f216:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	2b31      	cmp	r3, #49	; 0x31
 800f21e:	dc24      	bgt.n	800f26a <__ieee754_rem_pio2+0x28a>
 800f220:	e9ca 0100 	strd	r0, r1, [sl]
 800f224:	4646      	mov	r6, r8
 800f226:	464f      	mov	r7, r9
 800f228:	e9da 8900 	ldrd	r8, r9, [sl]
 800f22c:	4630      	mov	r0, r6
 800f22e:	4642      	mov	r2, r8
 800f230:	464b      	mov	r3, r9
 800f232:	4639      	mov	r1, r7
 800f234:	f7f1 f840 	bl	80002b8 <__aeabi_dsub>
 800f238:	462b      	mov	r3, r5
 800f23a:	4622      	mov	r2, r4
 800f23c:	f7f1 f83c 	bl	80002b8 <__aeabi_dsub>
 800f240:	9b02      	ldr	r3, [sp, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f248:	f6bf af0a 	bge.w	800f060 <__ieee754_rem_pio2+0x80>
 800f24c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f250:	f8ca 3004 	str.w	r3, [sl, #4]
 800f254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f258:	f8ca 8000 	str.w	r8, [sl]
 800f25c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f260:	f8ca 300c 	str.w	r3, [sl, #12]
 800f264:	f1cb 0b00 	rsb	fp, fp, #0
 800f268:	e6fa      	b.n	800f060 <__ieee754_rem_pio2+0x80>
 800f26a:	a327      	add	r3, pc, #156	; (adr r3, 800f308 <__ieee754_rem_pio2+0x328>)
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	ec51 0b18 	vmov	r0, r1, d8
 800f274:	f7f1 f9d8 	bl	8000628 <__aeabi_dmul>
 800f278:	4604      	mov	r4, r0
 800f27a:	460d      	mov	r5, r1
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	4640      	mov	r0, r8
 800f282:	4649      	mov	r1, r9
 800f284:	f7f1 f818 	bl	80002b8 <__aeabi_dsub>
 800f288:	4602      	mov	r2, r0
 800f28a:	460b      	mov	r3, r1
 800f28c:	4606      	mov	r6, r0
 800f28e:	460f      	mov	r7, r1
 800f290:	4640      	mov	r0, r8
 800f292:	4649      	mov	r1, r9
 800f294:	f7f1 f810 	bl	80002b8 <__aeabi_dsub>
 800f298:	4622      	mov	r2, r4
 800f29a:	462b      	mov	r3, r5
 800f29c:	f7f1 f80c 	bl	80002b8 <__aeabi_dsub>
 800f2a0:	a31b      	add	r3, pc, #108	; (adr r3, 800f310 <__ieee754_rem_pio2+0x330>)
 800f2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	460d      	mov	r5, r1
 800f2aa:	ec51 0b18 	vmov	r0, r1, d8
 800f2ae:	f7f1 f9bb 	bl	8000628 <__aeabi_dmul>
 800f2b2:	4622      	mov	r2, r4
 800f2b4:	462b      	mov	r3, r5
 800f2b6:	f7f0 ffff 	bl	80002b8 <__aeabi_dsub>
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	460d      	mov	r5, r1
 800f2be:	e75f      	b.n	800f180 <__ieee754_rem_pio2+0x1a0>
 800f2c0:	4b1b      	ldr	r3, [pc, #108]	; (800f330 <__ieee754_rem_pio2+0x350>)
 800f2c2:	4598      	cmp	r8, r3
 800f2c4:	dd36      	ble.n	800f334 <__ieee754_rem_pio2+0x354>
 800f2c6:	ee10 2a10 	vmov	r2, s0
 800f2ca:	462b      	mov	r3, r5
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	f7f0 fff2 	bl	80002b8 <__aeabi_dsub>
 800f2d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f2d8:	e9ca 0100 	strd	r0, r1, [sl]
 800f2dc:	e694      	b.n	800f008 <__ieee754_rem_pio2+0x28>
 800f2de:	bf00      	nop
 800f2e0:	54400000 	.word	0x54400000
 800f2e4:	3ff921fb 	.word	0x3ff921fb
 800f2e8:	1a626331 	.word	0x1a626331
 800f2ec:	3dd0b461 	.word	0x3dd0b461
 800f2f0:	1a600000 	.word	0x1a600000
 800f2f4:	3dd0b461 	.word	0x3dd0b461
 800f2f8:	2e037073 	.word	0x2e037073
 800f2fc:	3ba3198a 	.word	0x3ba3198a
 800f300:	6dc9c883 	.word	0x6dc9c883
 800f304:	3fe45f30 	.word	0x3fe45f30
 800f308:	2e000000 	.word	0x2e000000
 800f30c:	3ba3198a 	.word	0x3ba3198a
 800f310:	252049c1 	.word	0x252049c1
 800f314:	397b839a 	.word	0x397b839a
 800f318:	3fe921fb 	.word	0x3fe921fb
 800f31c:	4002d97b 	.word	0x4002d97b
 800f320:	3ff921fb 	.word	0x3ff921fb
 800f324:	413921fb 	.word	0x413921fb
 800f328:	3fe00000 	.word	0x3fe00000
 800f32c:	08010f20 	.word	0x08010f20
 800f330:	7fefffff 	.word	0x7fefffff
 800f334:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f338:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f33c:	ee10 0a10 	vmov	r0, s0
 800f340:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f344:	ee10 6a10 	vmov	r6, s0
 800f348:	460f      	mov	r7, r1
 800f34a:	f7f1 fc1d 	bl	8000b88 <__aeabi_d2iz>
 800f34e:	f7f1 f901 	bl	8000554 <__aeabi_i2d>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	4630      	mov	r0, r6
 800f358:	4639      	mov	r1, r7
 800f35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f35e:	f7f0 ffab 	bl	80002b8 <__aeabi_dsub>
 800f362:	4b23      	ldr	r3, [pc, #140]	; (800f3f0 <__ieee754_rem_pio2+0x410>)
 800f364:	2200      	movs	r2, #0
 800f366:	f7f1 f95f 	bl	8000628 <__aeabi_dmul>
 800f36a:	460f      	mov	r7, r1
 800f36c:	4606      	mov	r6, r0
 800f36e:	f7f1 fc0b 	bl	8000b88 <__aeabi_d2iz>
 800f372:	f7f1 f8ef 	bl	8000554 <__aeabi_i2d>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4630      	mov	r0, r6
 800f37c:	4639      	mov	r1, r7
 800f37e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f382:	f7f0 ff99 	bl	80002b8 <__aeabi_dsub>
 800f386:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <__ieee754_rem_pio2+0x410>)
 800f388:	2200      	movs	r2, #0
 800f38a:	f7f1 f94d 	bl	8000628 <__aeabi_dmul>
 800f38e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f392:	ad04      	add	r5, sp, #16
 800f394:	f04f 0803 	mov.w	r8, #3
 800f398:	46a9      	mov	r9, r5
 800f39a:	2600      	movs	r6, #0
 800f39c:	2700      	movs	r7, #0
 800f39e:	4632      	mov	r2, r6
 800f3a0:	463b      	mov	r3, r7
 800f3a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f3a6:	46c3      	mov	fp, r8
 800f3a8:	3d08      	subs	r5, #8
 800f3aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3ae:	f7f1 fba3 	bl	8000af8 <__aeabi_dcmpeq>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d1f3      	bne.n	800f39e <__ieee754_rem_pio2+0x3be>
 800f3b6:	4b0f      	ldr	r3, [pc, #60]	; (800f3f4 <__ieee754_rem_pio2+0x414>)
 800f3b8:	9301      	str	r3, [sp, #4]
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	4622      	mov	r2, r4
 800f3c0:	465b      	mov	r3, fp
 800f3c2:	4651      	mov	r1, sl
 800f3c4:	4648      	mov	r0, r9
 800f3c6:	f000 f993 	bl	800f6f0 <__kernel_rem_pio2>
 800f3ca:	9b02      	ldr	r3, [sp, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	4683      	mov	fp, r0
 800f3d0:	f6bf ae46 	bge.w	800f060 <__ieee754_rem_pio2+0x80>
 800f3d4:	e9da 2100 	ldrd	r2, r1, [sl]
 800f3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3dc:	e9ca 2300 	strd	r2, r3, [sl]
 800f3e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f3e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f3ec:	e73a      	b.n	800f264 <__ieee754_rem_pio2+0x284>
 800f3ee:	bf00      	nop
 800f3f0:	41700000 	.word	0x41700000
 800f3f4:	08010fa0 	.word	0x08010fa0

0800f3f8 <__ieee754_sqrt>:
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	ec55 4b10 	vmov	r4, r5, d0
 800f400:	4e55      	ldr	r6, [pc, #340]	; (800f558 <__ieee754_sqrt+0x160>)
 800f402:	43ae      	bics	r6, r5
 800f404:	ee10 0a10 	vmov	r0, s0
 800f408:	ee10 3a10 	vmov	r3, s0
 800f40c:	462a      	mov	r2, r5
 800f40e:	4629      	mov	r1, r5
 800f410:	d110      	bne.n	800f434 <__ieee754_sqrt+0x3c>
 800f412:	ee10 2a10 	vmov	r2, s0
 800f416:	462b      	mov	r3, r5
 800f418:	f7f1 f906 	bl	8000628 <__aeabi_dmul>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	4620      	mov	r0, r4
 800f422:	4629      	mov	r1, r5
 800f424:	f7f0 ff4a 	bl	80002bc <__adddf3>
 800f428:	4604      	mov	r4, r0
 800f42a:	460d      	mov	r5, r1
 800f42c:	ec45 4b10 	vmov	d0, r4, r5
 800f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f434:	2d00      	cmp	r5, #0
 800f436:	dc10      	bgt.n	800f45a <__ieee754_sqrt+0x62>
 800f438:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f43c:	4330      	orrs	r0, r6
 800f43e:	d0f5      	beq.n	800f42c <__ieee754_sqrt+0x34>
 800f440:	b15d      	cbz	r5, 800f45a <__ieee754_sqrt+0x62>
 800f442:	ee10 2a10 	vmov	r2, s0
 800f446:	462b      	mov	r3, r5
 800f448:	ee10 0a10 	vmov	r0, s0
 800f44c:	f7f0 ff34 	bl	80002b8 <__aeabi_dsub>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	f7f1 fa12 	bl	800087c <__aeabi_ddiv>
 800f458:	e7e6      	b.n	800f428 <__ieee754_sqrt+0x30>
 800f45a:	1512      	asrs	r2, r2, #20
 800f45c:	d074      	beq.n	800f548 <__ieee754_sqrt+0x150>
 800f45e:	07d4      	lsls	r4, r2, #31
 800f460:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f464:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f46c:	bf5e      	ittt	pl
 800f46e:	0fda      	lsrpl	r2, r3, #31
 800f470:	005b      	lslpl	r3, r3, #1
 800f472:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f476:	2400      	movs	r4, #0
 800f478:	0fda      	lsrs	r2, r3, #31
 800f47a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f47e:	107f      	asrs	r7, r7, #1
 800f480:	005b      	lsls	r3, r3, #1
 800f482:	2516      	movs	r5, #22
 800f484:	4620      	mov	r0, r4
 800f486:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f48a:	1886      	adds	r6, r0, r2
 800f48c:	428e      	cmp	r6, r1
 800f48e:	bfde      	ittt	le
 800f490:	1b89      	suble	r1, r1, r6
 800f492:	18b0      	addle	r0, r6, r2
 800f494:	18a4      	addle	r4, r4, r2
 800f496:	0049      	lsls	r1, r1, #1
 800f498:	3d01      	subs	r5, #1
 800f49a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f49e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f4a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4a6:	d1f0      	bne.n	800f48a <__ieee754_sqrt+0x92>
 800f4a8:	462a      	mov	r2, r5
 800f4aa:	f04f 0e20 	mov.w	lr, #32
 800f4ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f4b2:	4281      	cmp	r1, r0
 800f4b4:	eb06 0c05 	add.w	ip, r6, r5
 800f4b8:	dc02      	bgt.n	800f4c0 <__ieee754_sqrt+0xc8>
 800f4ba:	d113      	bne.n	800f4e4 <__ieee754_sqrt+0xec>
 800f4bc:	459c      	cmp	ip, r3
 800f4be:	d811      	bhi.n	800f4e4 <__ieee754_sqrt+0xec>
 800f4c0:	f1bc 0f00 	cmp.w	ip, #0
 800f4c4:	eb0c 0506 	add.w	r5, ip, r6
 800f4c8:	da43      	bge.n	800f552 <__ieee754_sqrt+0x15a>
 800f4ca:	2d00      	cmp	r5, #0
 800f4cc:	db41      	blt.n	800f552 <__ieee754_sqrt+0x15a>
 800f4ce:	f100 0801 	add.w	r8, r0, #1
 800f4d2:	1a09      	subs	r1, r1, r0
 800f4d4:	459c      	cmp	ip, r3
 800f4d6:	bf88      	it	hi
 800f4d8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f4dc:	eba3 030c 	sub.w	r3, r3, ip
 800f4e0:	4432      	add	r2, r6
 800f4e2:	4640      	mov	r0, r8
 800f4e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f4e8:	f1be 0e01 	subs.w	lr, lr, #1
 800f4ec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f4f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f4f8:	d1db      	bne.n	800f4b2 <__ieee754_sqrt+0xba>
 800f4fa:	430b      	orrs	r3, r1
 800f4fc:	d006      	beq.n	800f50c <__ieee754_sqrt+0x114>
 800f4fe:	1c50      	adds	r0, r2, #1
 800f500:	bf13      	iteet	ne
 800f502:	3201      	addne	r2, #1
 800f504:	3401      	addeq	r4, #1
 800f506:	4672      	moveq	r2, lr
 800f508:	f022 0201 	bicne.w	r2, r2, #1
 800f50c:	1063      	asrs	r3, r4, #1
 800f50e:	0852      	lsrs	r2, r2, #1
 800f510:	07e1      	lsls	r1, r4, #31
 800f512:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f516:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f51a:	bf48      	it	mi
 800f51c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f520:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f524:	4614      	mov	r4, r2
 800f526:	e781      	b.n	800f42c <__ieee754_sqrt+0x34>
 800f528:	0ad9      	lsrs	r1, r3, #11
 800f52a:	3815      	subs	r0, #21
 800f52c:	055b      	lsls	r3, r3, #21
 800f52e:	2900      	cmp	r1, #0
 800f530:	d0fa      	beq.n	800f528 <__ieee754_sqrt+0x130>
 800f532:	02cd      	lsls	r5, r1, #11
 800f534:	d50a      	bpl.n	800f54c <__ieee754_sqrt+0x154>
 800f536:	f1c2 0420 	rsb	r4, r2, #32
 800f53a:	fa23 f404 	lsr.w	r4, r3, r4
 800f53e:	1e55      	subs	r5, r2, #1
 800f540:	4093      	lsls	r3, r2
 800f542:	4321      	orrs	r1, r4
 800f544:	1b42      	subs	r2, r0, r5
 800f546:	e78a      	b.n	800f45e <__ieee754_sqrt+0x66>
 800f548:	4610      	mov	r0, r2
 800f54a:	e7f0      	b.n	800f52e <__ieee754_sqrt+0x136>
 800f54c:	0049      	lsls	r1, r1, #1
 800f54e:	3201      	adds	r2, #1
 800f550:	e7ef      	b.n	800f532 <__ieee754_sqrt+0x13a>
 800f552:	4680      	mov	r8, r0
 800f554:	e7bd      	b.n	800f4d2 <__ieee754_sqrt+0xda>
 800f556:	bf00      	nop
 800f558:	7ff00000 	.word	0x7ff00000
 800f55c:	00000000 	.word	0x00000000

0800f560 <__kernel_cos>:
 800f560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	ec57 6b10 	vmov	r6, r7, d0
 800f568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f56c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f570:	ed8d 1b00 	vstr	d1, [sp]
 800f574:	da07      	bge.n	800f586 <__kernel_cos+0x26>
 800f576:	ee10 0a10 	vmov	r0, s0
 800f57a:	4639      	mov	r1, r7
 800f57c:	f7f1 fb04 	bl	8000b88 <__aeabi_d2iz>
 800f580:	2800      	cmp	r0, #0
 800f582:	f000 8088 	beq.w	800f696 <__kernel_cos+0x136>
 800f586:	4632      	mov	r2, r6
 800f588:	463b      	mov	r3, r7
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f1 f84b 	bl	8000628 <__aeabi_dmul>
 800f592:	4b51      	ldr	r3, [pc, #324]	; (800f6d8 <__kernel_cos+0x178>)
 800f594:	2200      	movs	r2, #0
 800f596:	4604      	mov	r4, r0
 800f598:	460d      	mov	r5, r1
 800f59a:	f7f1 f845 	bl	8000628 <__aeabi_dmul>
 800f59e:	a340      	add	r3, pc, #256	; (adr r3, 800f6a0 <__kernel_cos+0x140>)
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	4682      	mov	sl, r0
 800f5a6:	468b      	mov	fp, r1
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	f7f1 f83c 	bl	8000628 <__aeabi_dmul>
 800f5b0:	a33d      	add	r3, pc, #244	; (adr r3, 800f6a8 <__kernel_cos+0x148>)
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	f7f0 fe81 	bl	80002bc <__adddf3>
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	462b      	mov	r3, r5
 800f5be:	f7f1 f833 	bl	8000628 <__aeabi_dmul>
 800f5c2:	a33b      	add	r3, pc, #236	; (adr r3, 800f6b0 <__kernel_cos+0x150>)
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	f7f0 fe76 	bl	80002b8 <__aeabi_dsub>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	462b      	mov	r3, r5
 800f5d0:	f7f1 f82a 	bl	8000628 <__aeabi_dmul>
 800f5d4:	a338      	add	r3, pc, #224	; (adr r3, 800f6b8 <__kernel_cos+0x158>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	f7f0 fe6f 	bl	80002bc <__adddf3>
 800f5de:	4622      	mov	r2, r4
 800f5e0:	462b      	mov	r3, r5
 800f5e2:	f7f1 f821 	bl	8000628 <__aeabi_dmul>
 800f5e6:	a336      	add	r3, pc, #216	; (adr r3, 800f6c0 <__kernel_cos+0x160>)
 800f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ec:	f7f0 fe64 	bl	80002b8 <__aeabi_dsub>
 800f5f0:	4622      	mov	r2, r4
 800f5f2:	462b      	mov	r3, r5
 800f5f4:	f7f1 f818 	bl	8000628 <__aeabi_dmul>
 800f5f8:	a333      	add	r3, pc, #204	; (adr r3, 800f6c8 <__kernel_cos+0x168>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f7f0 fe5d 	bl	80002bc <__adddf3>
 800f602:	4622      	mov	r2, r4
 800f604:	462b      	mov	r3, r5
 800f606:	f7f1 f80f 	bl	8000628 <__aeabi_dmul>
 800f60a:	4622      	mov	r2, r4
 800f60c:	462b      	mov	r3, r5
 800f60e:	f7f1 f80b 	bl	8000628 <__aeabi_dmul>
 800f612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f616:	4604      	mov	r4, r0
 800f618:	460d      	mov	r5, r1
 800f61a:	4630      	mov	r0, r6
 800f61c:	4639      	mov	r1, r7
 800f61e:	f7f1 f803 	bl	8000628 <__aeabi_dmul>
 800f622:	460b      	mov	r3, r1
 800f624:	4602      	mov	r2, r0
 800f626:	4629      	mov	r1, r5
 800f628:	4620      	mov	r0, r4
 800f62a:	f7f0 fe45 	bl	80002b8 <__aeabi_dsub>
 800f62e:	4b2b      	ldr	r3, [pc, #172]	; (800f6dc <__kernel_cos+0x17c>)
 800f630:	4598      	cmp	r8, r3
 800f632:	4606      	mov	r6, r0
 800f634:	460f      	mov	r7, r1
 800f636:	dc10      	bgt.n	800f65a <__kernel_cos+0xfa>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4650      	mov	r0, sl
 800f63e:	4659      	mov	r1, fp
 800f640:	f7f0 fe3a 	bl	80002b8 <__aeabi_dsub>
 800f644:	460b      	mov	r3, r1
 800f646:	4926      	ldr	r1, [pc, #152]	; (800f6e0 <__kernel_cos+0x180>)
 800f648:	4602      	mov	r2, r0
 800f64a:	2000      	movs	r0, #0
 800f64c:	f7f0 fe34 	bl	80002b8 <__aeabi_dsub>
 800f650:	ec41 0b10 	vmov	d0, r0, r1
 800f654:	b003      	add	sp, #12
 800f656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65a:	4b22      	ldr	r3, [pc, #136]	; (800f6e4 <__kernel_cos+0x184>)
 800f65c:	4920      	ldr	r1, [pc, #128]	; (800f6e0 <__kernel_cos+0x180>)
 800f65e:	4598      	cmp	r8, r3
 800f660:	bfcc      	ite	gt
 800f662:	4d21      	ldrgt	r5, [pc, #132]	; (800f6e8 <__kernel_cos+0x188>)
 800f664:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f668:	2400      	movs	r4, #0
 800f66a:	4622      	mov	r2, r4
 800f66c:	462b      	mov	r3, r5
 800f66e:	2000      	movs	r0, #0
 800f670:	f7f0 fe22 	bl	80002b8 <__aeabi_dsub>
 800f674:	4622      	mov	r2, r4
 800f676:	4680      	mov	r8, r0
 800f678:	4689      	mov	r9, r1
 800f67a:	462b      	mov	r3, r5
 800f67c:	4650      	mov	r0, sl
 800f67e:	4659      	mov	r1, fp
 800f680:	f7f0 fe1a 	bl	80002b8 <__aeabi_dsub>
 800f684:	4632      	mov	r2, r6
 800f686:	463b      	mov	r3, r7
 800f688:	f7f0 fe16 	bl	80002b8 <__aeabi_dsub>
 800f68c:	4602      	mov	r2, r0
 800f68e:	460b      	mov	r3, r1
 800f690:	4640      	mov	r0, r8
 800f692:	4649      	mov	r1, r9
 800f694:	e7da      	b.n	800f64c <__kernel_cos+0xec>
 800f696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f6d0 <__kernel_cos+0x170>
 800f69a:	e7db      	b.n	800f654 <__kernel_cos+0xf4>
 800f69c:	f3af 8000 	nop.w
 800f6a0:	be8838d4 	.word	0xbe8838d4
 800f6a4:	bda8fae9 	.word	0xbda8fae9
 800f6a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f6ac:	3e21ee9e 	.word	0x3e21ee9e
 800f6b0:	809c52ad 	.word	0x809c52ad
 800f6b4:	3e927e4f 	.word	0x3e927e4f
 800f6b8:	19cb1590 	.word	0x19cb1590
 800f6bc:	3efa01a0 	.word	0x3efa01a0
 800f6c0:	16c15177 	.word	0x16c15177
 800f6c4:	3f56c16c 	.word	0x3f56c16c
 800f6c8:	5555554c 	.word	0x5555554c
 800f6cc:	3fa55555 	.word	0x3fa55555
 800f6d0:	00000000 	.word	0x00000000
 800f6d4:	3ff00000 	.word	0x3ff00000
 800f6d8:	3fe00000 	.word	0x3fe00000
 800f6dc:	3fd33332 	.word	0x3fd33332
 800f6e0:	3ff00000 	.word	0x3ff00000
 800f6e4:	3fe90000 	.word	0x3fe90000
 800f6e8:	3fd20000 	.word	0x3fd20000
 800f6ec:	00000000 	.word	0x00000000

0800f6f0 <__kernel_rem_pio2>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	ed2d 8b02 	vpush	{d8}
 800f6f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f6fc:	f112 0f14 	cmn.w	r2, #20
 800f700:	9308      	str	r3, [sp, #32]
 800f702:	9101      	str	r1, [sp, #4]
 800f704:	4bc4      	ldr	r3, [pc, #784]	; (800fa18 <__kernel_rem_pio2+0x328>)
 800f706:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f708:	900b      	str	r0, [sp, #44]	; 0x2c
 800f70a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f70e:	9302      	str	r3, [sp, #8]
 800f710:	9b08      	ldr	r3, [sp, #32]
 800f712:	f103 33ff 	add.w	r3, r3, #4294967295
 800f716:	bfa8      	it	ge
 800f718:	1ed4      	subge	r4, r2, #3
 800f71a:	9306      	str	r3, [sp, #24]
 800f71c:	bfb2      	itee	lt
 800f71e:	2400      	movlt	r4, #0
 800f720:	2318      	movge	r3, #24
 800f722:	fb94 f4f3 	sdivge	r4, r4, r3
 800f726:	f06f 0317 	mvn.w	r3, #23
 800f72a:	fb04 3303 	mla	r3, r4, r3, r3
 800f72e:	eb03 0a02 	add.w	sl, r3, r2
 800f732:	9b02      	ldr	r3, [sp, #8]
 800f734:	9a06      	ldr	r2, [sp, #24]
 800f736:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fa08 <__kernel_rem_pio2+0x318>
 800f73a:	eb03 0802 	add.w	r8, r3, r2
 800f73e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f740:	1aa7      	subs	r7, r4, r2
 800f742:	ae22      	add	r6, sp, #136	; 0x88
 800f744:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f748:	2500      	movs	r5, #0
 800f74a:	4545      	cmp	r5, r8
 800f74c:	dd13      	ble.n	800f776 <__kernel_rem_pio2+0x86>
 800f74e:	9b08      	ldr	r3, [sp, #32]
 800f750:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fa08 <__kernel_rem_pio2+0x318>
 800f754:	aa22      	add	r2, sp, #136	; 0x88
 800f756:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f75a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f75e:	f04f 0800 	mov.w	r8, #0
 800f762:	9b02      	ldr	r3, [sp, #8]
 800f764:	4598      	cmp	r8, r3
 800f766:	dc2f      	bgt.n	800f7c8 <__kernel_rem_pio2+0xd8>
 800f768:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f76c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f770:	462f      	mov	r7, r5
 800f772:	2600      	movs	r6, #0
 800f774:	e01b      	b.n	800f7ae <__kernel_rem_pio2+0xbe>
 800f776:	42ef      	cmn	r7, r5
 800f778:	d407      	bmi.n	800f78a <__kernel_rem_pio2+0x9a>
 800f77a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f77e:	f7f0 fee9 	bl	8000554 <__aeabi_i2d>
 800f782:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f786:	3501      	adds	r5, #1
 800f788:	e7df      	b.n	800f74a <__kernel_rem_pio2+0x5a>
 800f78a:	ec51 0b18 	vmov	r0, r1, d8
 800f78e:	e7f8      	b.n	800f782 <__kernel_rem_pio2+0x92>
 800f790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f794:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f798:	f7f0 ff46 	bl	8000628 <__aeabi_dmul>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7a4:	f7f0 fd8a 	bl	80002bc <__adddf3>
 800f7a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7ac:	3601      	adds	r6, #1
 800f7ae:	9b06      	ldr	r3, [sp, #24]
 800f7b0:	429e      	cmp	r6, r3
 800f7b2:	f1a7 0708 	sub.w	r7, r7, #8
 800f7b6:	ddeb      	ble.n	800f790 <__kernel_rem_pio2+0xa0>
 800f7b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f7bc:	f108 0801 	add.w	r8, r8, #1
 800f7c0:	ecab 7b02 	vstmia	fp!, {d7}
 800f7c4:	3508      	adds	r5, #8
 800f7c6:	e7cc      	b.n	800f762 <__kernel_rem_pio2+0x72>
 800f7c8:	9b02      	ldr	r3, [sp, #8]
 800f7ca:	aa0e      	add	r2, sp, #56	; 0x38
 800f7cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7d0:	930d      	str	r3, [sp, #52]	; 0x34
 800f7d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f7d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f7d8:	9c02      	ldr	r4, [sp, #8]
 800f7da:	930c      	str	r3, [sp, #48]	; 0x30
 800f7dc:	00e3      	lsls	r3, r4, #3
 800f7de:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e0:	ab9a      	add	r3, sp, #616	; 0x268
 800f7e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f7ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f7ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800f7f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f7f4:	46c3      	mov	fp, r8
 800f7f6:	46a1      	mov	r9, r4
 800f7f8:	f1b9 0f00 	cmp.w	r9, #0
 800f7fc:	f1a5 0508 	sub.w	r5, r5, #8
 800f800:	dc77      	bgt.n	800f8f2 <__kernel_rem_pio2+0x202>
 800f802:	ec47 6b10 	vmov	d0, r6, r7
 800f806:	4650      	mov	r0, sl
 800f808:	f000 fdee 	bl	80103e8 <scalbn>
 800f80c:	ec57 6b10 	vmov	r6, r7, d0
 800f810:	2200      	movs	r2, #0
 800f812:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f816:	ee10 0a10 	vmov	r0, s0
 800f81a:	4639      	mov	r1, r7
 800f81c:	f7f0 ff04 	bl	8000628 <__aeabi_dmul>
 800f820:	ec41 0b10 	vmov	d0, r0, r1
 800f824:	f000 fd58 	bl	80102d8 <floor>
 800f828:	4b7c      	ldr	r3, [pc, #496]	; (800fa1c <__kernel_rem_pio2+0x32c>)
 800f82a:	ec51 0b10 	vmov	r0, r1, d0
 800f82e:	2200      	movs	r2, #0
 800f830:	f7f0 fefa 	bl	8000628 <__aeabi_dmul>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	4630      	mov	r0, r6
 800f83a:	4639      	mov	r1, r7
 800f83c:	f7f0 fd3c 	bl	80002b8 <__aeabi_dsub>
 800f840:	460f      	mov	r7, r1
 800f842:	4606      	mov	r6, r0
 800f844:	f7f1 f9a0 	bl	8000b88 <__aeabi_d2iz>
 800f848:	9004      	str	r0, [sp, #16]
 800f84a:	f7f0 fe83 	bl	8000554 <__aeabi_i2d>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4630      	mov	r0, r6
 800f854:	4639      	mov	r1, r7
 800f856:	f7f0 fd2f 	bl	80002b8 <__aeabi_dsub>
 800f85a:	f1ba 0f00 	cmp.w	sl, #0
 800f85e:	4606      	mov	r6, r0
 800f860:	460f      	mov	r7, r1
 800f862:	dd6d      	ble.n	800f940 <__kernel_rem_pio2+0x250>
 800f864:	1e62      	subs	r2, r4, #1
 800f866:	ab0e      	add	r3, sp, #56	; 0x38
 800f868:	9d04      	ldr	r5, [sp, #16]
 800f86a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f86e:	f1ca 0118 	rsb	r1, sl, #24
 800f872:	fa40 f301 	asr.w	r3, r0, r1
 800f876:	441d      	add	r5, r3
 800f878:	408b      	lsls	r3, r1
 800f87a:	1ac0      	subs	r0, r0, r3
 800f87c:	ab0e      	add	r3, sp, #56	; 0x38
 800f87e:	9504      	str	r5, [sp, #16]
 800f880:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f884:	f1ca 0317 	rsb	r3, sl, #23
 800f888:	fa40 fb03 	asr.w	fp, r0, r3
 800f88c:	f1bb 0f00 	cmp.w	fp, #0
 800f890:	dd65      	ble.n	800f95e <__kernel_rem_pio2+0x26e>
 800f892:	9b04      	ldr	r3, [sp, #16]
 800f894:	2200      	movs	r2, #0
 800f896:	3301      	adds	r3, #1
 800f898:	9304      	str	r3, [sp, #16]
 800f89a:	4615      	mov	r5, r2
 800f89c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f8a0:	4294      	cmp	r4, r2
 800f8a2:	f300 809c 	bgt.w	800f9de <__kernel_rem_pio2+0x2ee>
 800f8a6:	f1ba 0f00 	cmp.w	sl, #0
 800f8aa:	dd07      	ble.n	800f8bc <__kernel_rem_pio2+0x1cc>
 800f8ac:	f1ba 0f01 	cmp.w	sl, #1
 800f8b0:	f000 80c0 	beq.w	800fa34 <__kernel_rem_pio2+0x344>
 800f8b4:	f1ba 0f02 	cmp.w	sl, #2
 800f8b8:	f000 80c6 	beq.w	800fa48 <__kernel_rem_pio2+0x358>
 800f8bc:	f1bb 0f02 	cmp.w	fp, #2
 800f8c0:	d14d      	bne.n	800f95e <__kernel_rem_pio2+0x26e>
 800f8c2:	4632      	mov	r2, r6
 800f8c4:	463b      	mov	r3, r7
 800f8c6:	4956      	ldr	r1, [pc, #344]	; (800fa20 <__kernel_rem_pio2+0x330>)
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f7f0 fcf5 	bl	80002b8 <__aeabi_dsub>
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	2d00      	cmp	r5, #0
 800f8d4:	d043      	beq.n	800f95e <__kernel_rem_pio2+0x26e>
 800f8d6:	4650      	mov	r0, sl
 800f8d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fa10 <__kernel_rem_pio2+0x320>
 800f8dc:	f000 fd84 	bl	80103e8 <scalbn>
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	ec53 2b10 	vmov	r2, r3, d0
 800f8e8:	f7f0 fce6 	bl	80002b8 <__aeabi_dsub>
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	e035      	b.n	800f95e <__kernel_rem_pio2+0x26e>
 800f8f2:	4b4c      	ldr	r3, [pc, #304]	; (800fa24 <__kernel_rem_pio2+0x334>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	4639      	mov	r1, r7
 800f8fa:	f7f0 fe95 	bl	8000628 <__aeabi_dmul>
 800f8fe:	f7f1 f943 	bl	8000b88 <__aeabi_d2iz>
 800f902:	f7f0 fe27 	bl	8000554 <__aeabi_i2d>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	ec43 2b18 	vmov	d8, r2, r3
 800f90e:	4b46      	ldr	r3, [pc, #280]	; (800fa28 <__kernel_rem_pio2+0x338>)
 800f910:	2200      	movs	r2, #0
 800f912:	f7f0 fe89 	bl	8000628 <__aeabi_dmul>
 800f916:	4602      	mov	r2, r0
 800f918:	460b      	mov	r3, r1
 800f91a:	4630      	mov	r0, r6
 800f91c:	4639      	mov	r1, r7
 800f91e:	f7f0 fccb 	bl	80002b8 <__aeabi_dsub>
 800f922:	f7f1 f931 	bl	8000b88 <__aeabi_d2iz>
 800f926:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f92a:	f84b 0b04 	str.w	r0, [fp], #4
 800f92e:	ec51 0b18 	vmov	r0, r1, d8
 800f932:	f7f0 fcc3 	bl	80002bc <__adddf3>
 800f936:	f109 39ff 	add.w	r9, r9, #4294967295
 800f93a:	4606      	mov	r6, r0
 800f93c:	460f      	mov	r7, r1
 800f93e:	e75b      	b.n	800f7f8 <__kernel_rem_pio2+0x108>
 800f940:	d106      	bne.n	800f950 <__kernel_rem_pio2+0x260>
 800f942:	1e63      	subs	r3, r4, #1
 800f944:	aa0e      	add	r2, sp, #56	; 0x38
 800f946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f94a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f94e:	e79d      	b.n	800f88c <__kernel_rem_pio2+0x19c>
 800f950:	4b36      	ldr	r3, [pc, #216]	; (800fa2c <__kernel_rem_pio2+0x33c>)
 800f952:	2200      	movs	r2, #0
 800f954:	f7f1 f8ee 	bl	8000b34 <__aeabi_dcmpge>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d13d      	bne.n	800f9d8 <__kernel_rem_pio2+0x2e8>
 800f95c:	4683      	mov	fp, r0
 800f95e:	2200      	movs	r2, #0
 800f960:	2300      	movs	r3, #0
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f1 f8c7 	bl	8000af8 <__aeabi_dcmpeq>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	f000 80c0 	beq.w	800faf0 <__kernel_rem_pio2+0x400>
 800f970:	1e65      	subs	r5, r4, #1
 800f972:	462b      	mov	r3, r5
 800f974:	2200      	movs	r2, #0
 800f976:	9902      	ldr	r1, [sp, #8]
 800f978:	428b      	cmp	r3, r1
 800f97a:	da6c      	bge.n	800fa56 <__kernel_rem_pio2+0x366>
 800f97c:	2a00      	cmp	r2, #0
 800f97e:	f000 8089 	beq.w	800fa94 <__kernel_rem_pio2+0x3a4>
 800f982:	ab0e      	add	r3, sp, #56	; 0x38
 800f984:	f1aa 0a18 	sub.w	sl, sl, #24
 800f988:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 80ad 	beq.w	800faec <__kernel_rem_pio2+0x3fc>
 800f992:	4650      	mov	r0, sl
 800f994:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fa10 <__kernel_rem_pio2+0x320>
 800f998:	f000 fd26 	bl	80103e8 <scalbn>
 800f99c:	ab9a      	add	r3, sp, #616	; 0x268
 800f99e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f9a2:	ec57 6b10 	vmov	r6, r7, d0
 800f9a6:	00ec      	lsls	r4, r5, #3
 800f9a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f9ac:	46aa      	mov	sl, r5
 800f9ae:	f1ba 0f00 	cmp.w	sl, #0
 800f9b2:	f280 80d6 	bge.w	800fb62 <__kernel_rem_pio2+0x472>
 800f9b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fa08 <__kernel_rem_pio2+0x318>
 800f9ba:	462e      	mov	r6, r5
 800f9bc:	2e00      	cmp	r6, #0
 800f9be:	f2c0 8104 	blt.w	800fbca <__kernel_rem_pio2+0x4da>
 800f9c2:	ab72      	add	r3, sp, #456	; 0x1c8
 800f9c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f9c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fa30 <__kernel_rem_pio2+0x340>
 800f9cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f9d0:	f04f 0800 	mov.w	r8, #0
 800f9d4:	1baf      	subs	r7, r5, r6
 800f9d6:	e0ea      	b.n	800fbae <__kernel_rem_pio2+0x4be>
 800f9d8:	f04f 0b02 	mov.w	fp, #2
 800f9dc:	e759      	b.n	800f892 <__kernel_rem_pio2+0x1a2>
 800f9de:	f8d8 3000 	ldr.w	r3, [r8]
 800f9e2:	b955      	cbnz	r5, 800f9fa <__kernel_rem_pio2+0x30a>
 800f9e4:	b123      	cbz	r3, 800f9f0 <__kernel_rem_pio2+0x300>
 800f9e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f9ea:	f8c8 3000 	str.w	r3, [r8]
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	3201      	adds	r2, #1
 800f9f2:	f108 0804 	add.w	r8, r8, #4
 800f9f6:	461d      	mov	r5, r3
 800f9f8:	e752      	b.n	800f8a0 <__kernel_rem_pio2+0x1b0>
 800f9fa:	1acb      	subs	r3, r1, r3
 800f9fc:	f8c8 3000 	str.w	r3, [r8]
 800fa00:	462b      	mov	r3, r5
 800fa02:	e7f5      	b.n	800f9f0 <__kernel_rem_pio2+0x300>
 800fa04:	f3af 8000 	nop.w
	...
 800fa14:	3ff00000 	.word	0x3ff00000
 800fa18:	080110e8 	.word	0x080110e8
 800fa1c:	40200000 	.word	0x40200000
 800fa20:	3ff00000 	.word	0x3ff00000
 800fa24:	3e700000 	.word	0x3e700000
 800fa28:	41700000 	.word	0x41700000
 800fa2c:	3fe00000 	.word	0x3fe00000
 800fa30:	080110a8 	.word	0x080110a8
 800fa34:	1e62      	subs	r2, r4, #1
 800fa36:	ab0e      	add	r3, sp, #56	; 0x38
 800fa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fa40:	a90e      	add	r1, sp, #56	; 0x38
 800fa42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fa46:	e739      	b.n	800f8bc <__kernel_rem_pio2+0x1cc>
 800fa48:	1e62      	subs	r2, r4, #1
 800fa4a:	ab0e      	add	r3, sp, #56	; 0x38
 800fa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fa54:	e7f4      	b.n	800fa40 <__kernel_rem_pio2+0x350>
 800fa56:	a90e      	add	r1, sp, #56	; 0x38
 800fa58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	e789      	b.n	800f976 <__kernel_rem_pio2+0x286>
 800fa62:	3301      	adds	r3, #1
 800fa64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fa68:	2900      	cmp	r1, #0
 800fa6a:	d0fa      	beq.n	800fa62 <__kernel_rem_pio2+0x372>
 800fa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fa72:	446a      	add	r2, sp
 800fa74:	3a98      	subs	r2, #152	; 0x98
 800fa76:	920a      	str	r2, [sp, #40]	; 0x28
 800fa78:	9a08      	ldr	r2, [sp, #32]
 800fa7a:	18e3      	adds	r3, r4, r3
 800fa7c:	18a5      	adds	r5, r4, r2
 800fa7e:	aa22      	add	r2, sp, #136	; 0x88
 800fa80:	f104 0801 	add.w	r8, r4, #1
 800fa84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	9b04      	ldr	r3, [sp, #16]
 800fa8c:	4543      	cmp	r3, r8
 800fa8e:	da04      	bge.n	800fa9a <__kernel_rem_pio2+0x3aa>
 800fa90:	461c      	mov	r4, r3
 800fa92:	e6a3      	b.n	800f7dc <__kernel_rem_pio2+0xec>
 800fa94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa96:	2301      	movs	r3, #1
 800fa98:	e7e4      	b.n	800fa64 <__kernel_rem_pio2+0x374>
 800fa9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800faa0:	f7f0 fd58 	bl	8000554 <__aeabi_i2d>
 800faa4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800faa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faaa:	46ab      	mov	fp, r5
 800faac:	461c      	mov	r4, r3
 800faae:	f04f 0900 	mov.w	r9, #0
 800fab2:	2600      	movs	r6, #0
 800fab4:	2700      	movs	r7, #0
 800fab6:	9b06      	ldr	r3, [sp, #24]
 800fab8:	4599      	cmp	r9, r3
 800faba:	dd06      	ble.n	800faca <__kernel_rem_pio2+0x3da>
 800fabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fabe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fac2:	f108 0801 	add.w	r8, r8, #1
 800fac6:	930a      	str	r3, [sp, #40]	; 0x28
 800fac8:	e7df      	b.n	800fa8a <__kernel_rem_pio2+0x39a>
 800faca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800face:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fad2:	f7f0 fda9 	bl	8000628 <__aeabi_dmul>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	4630      	mov	r0, r6
 800fadc:	4639      	mov	r1, r7
 800fade:	f7f0 fbed 	bl	80002bc <__adddf3>
 800fae2:	f109 0901 	add.w	r9, r9, #1
 800fae6:	4606      	mov	r6, r0
 800fae8:	460f      	mov	r7, r1
 800faea:	e7e4      	b.n	800fab6 <__kernel_rem_pio2+0x3c6>
 800faec:	3d01      	subs	r5, #1
 800faee:	e748      	b.n	800f982 <__kernel_rem_pio2+0x292>
 800faf0:	ec47 6b10 	vmov	d0, r6, r7
 800faf4:	f1ca 0000 	rsb	r0, sl, #0
 800faf8:	f000 fc76 	bl	80103e8 <scalbn>
 800fafc:	ec57 6b10 	vmov	r6, r7, d0
 800fb00:	4ba0      	ldr	r3, [pc, #640]	; (800fd84 <__kernel_rem_pio2+0x694>)
 800fb02:	ee10 0a10 	vmov	r0, s0
 800fb06:	2200      	movs	r2, #0
 800fb08:	4639      	mov	r1, r7
 800fb0a:	f7f1 f813 	bl	8000b34 <__aeabi_dcmpge>
 800fb0e:	b1f8      	cbz	r0, 800fb50 <__kernel_rem_pio2+0x460>
 800fb10:	4b9d      	ldr	r3, [pc, #628]	; (800fd88 <__kernel_rem_pio2+0x698>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	4630      	mov	r0, r6
 800fb16:	4639      	mov	r1, r7
 800fb18:	f7f0 fd86 	bl	8000628 <__aeabi_dmul>
 800fb1c:	f7f1 f834 	bl	8000b88 <__aeabi_d2iz>
 800fb20:	4680      	mov	r8, r0
 800fb22:	f7f0 fd17 	bl	8000554 <__aeabi_i2d>
 800fb26:	4b97      	ldr	r3, [pc, #604]	; (800fd84 <__kernel_rem_pio2+0x694>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f7f0 fd7d 	bl	8000628 <__aeabi_dmul>
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4602      	mov	r2, r0
 800fb32:	4639      	mov	r1, r7
 800fb34:	4630      	mov	r0, r6
 800fb36:	f7f0 fbbf 	bl	80002b8 <__aeabi_dsub>
 800fb3a:	f7f1 f825 	bl	8000b88 <__aeabi_d2iz>
 800fb3e:	1c65      	adds	r5, r4, #1
 800fb40:	ab0e      	add	r3, sp, #56	; 0x38
 800fb42:	f10a 0a18 	add.w	sl, sl, #24
 800fb46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fb4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fb4e:	e720      	b.n	800f992 <__kernel_rem_pio2+0x2a2>
 800fb50:	4630      	mov	r0, r6
 800fb52:	4639      	mov	r1, r7
 800fb54:	f7f1 f818 	bl	8000b88 <__aeabi_d2iz>
 800fb58:	ab0e      	add	r3, sp, #56	; 0x38
 800fb5a:	4625      	mov	r5, r4
 800fb5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fb60:	e717      	b.n	800f992 <__kernel_rem_pio2+0x2a2>
 800fb62:	ab0e      	add	r3, sp, #56	; 0x38
 800fb64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fb68:	f7f0 fcf4 	bl	8000554 <__aeabi_i2d>
 800fb6c:	4632      	mov	r2, r6
 800fb6e:	463b      	mov	r3, r7
 800fb70:	f7f0 fd5a 	bl	8000628 <__aeabi_dmul>
 800fb74:	4b84      	ldr	r3, [pc, #528]	; (800fd88 <__kernel_rem_pio2+0x698>)
 800fb76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	4639      	mov	r1, r7
 800fb80:	f7f0 fd52 	bl	8000628 <__aeabi_dmul>
 800fb84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb88:	4606      	mov	r6, r0
 800fb8a:	460f      	mov	r7, r1
 800fb8c:	e70f      	b.n	800f9ae <__kernel_rem_pio2+0x2be>
 800fb8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fb92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fb96:	f7f0 fd47 	bl	8000628 <__aeabi_dmul>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fba2:	f7f0 fb8b 	bl	80002bc <__adddf3>
 800fba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fbaa:	f108 0801 	add.w	r8, r8, #1
 800fbae:	9b02      	ldr	r3, [sp, #8]
 800fbb0:	4598      	cmp	r8, r3
 800fbb2:	dc01      	bgt.n	800fbb8 <__kernel_rem_pio2+0x4c8>
 800fbb4:	45b8      	cmp	r8, r7
 800fbb6:	ddea      	ble.n	800fb8e <__kernel_rem_pio2+0x49e>
 800fbb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fbbc:	ab4a      	add	r3, sp, #296	; 0x128
 800fbbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fbc2:	ed87 7b00 	vstr	d7, [r7]
 800fbc6:	3e01      	subs	r6, #1
 800fbc8:	e6f8      	b.n	800f9bc <__kernel_rem_pio2+0x2cc>
 800fbca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	dc0b      	bgt.n	800fbe8 <__kernel_rem_pio2+0x4f8>
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dc35      	bgt.n	800fc40 <__kernel_rem_pio2+0x550>
 800fbd4:	d059      	beq.n	800fc8a <__kernel_rem_pio2+0x59a>
 800fbd6:	9b04      	ldr	r3, [sp, #16]
 800fbd8:	f003 0007 	and.w	r0, r3, #7
 800fbdc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fbe0:	ecbd 8b02 	vpop	{d8}
 800fbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d1f3      	bne.n	800fbd6 <__kernel_rem_pio2+0x4e6>
 800fbee:	ab4a      	add	r3, sp, #296	; 0x128
 800fbf0:	4423      	add	r3, r4
 800fbf2:	9306      	str	r3, [sp, #24]
 800fbf4:	461c      	mov	r4, r3
 800fbf6:	469a      	mov	sl, r3
 800fbf8:	9502      	str	r5, [sp, #8]
 800fbfa:	9b02      	ldr	r3, [sp, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f1aa 0a08 	sub.w	sl, sl, #8
 800fc02:	dc6b      	bgt.n	800fcdc <__kernel_rem_pio2+0x5ec>
 800fc04:	46aa      	mov	sl, r5
 800fc06:	f1ba 0f01 	cmp.w	sl, #1
 800fc0a:	f1a4 0408 	sub.w	r4, r4, #8
 800fc0e:	f300 8085 	bgt.w	800fd1c <__kernel_rem_pio2+0x62c>
 800fc12:	9c06      	ldr	r4, [sp, #24]
 800fc14:	2000      	movs	r0, #0
 800fc16:	3408      	adds	r4, #8
 800fc18:	2100      	movs	r1, #0
 800fc1a:	2d01      	cmp	r5, #1
 800fc1c:	f300 809d 	bgt.w	800fd5a <__kernel_rem_pio2+0x66a>
 800fc20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fc24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fc28:	f1bb 0f00 	cmp.w	fp, #0
 800fc2c:	f040 809b 	bne.w	800fd66 <__kernel_rem_pio2+0x676>
 800fc30:	9b01      	ldr	r3, [sp, #4]
 800fc32:	e9c3 5600 	strd	r5, r6, [r3]
 800fc36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fc3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fc3e:	e7ca      	b.n	800fbd6 <__kernel_rem_pio2+0x4e6>
 800fc40:	3408      	adds	r4, #8
 800fc42:	ab4a      	add	r3, sp, #296	; 0x128
 800fc44:	441c      	add	r4, r3
 800fc46:	462e      	mov	r6, r5
 800fc48:	2000      	movs	r0, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	2e00      	cmp	r6, #0
 800fc4e:	da36      	bge.n	800fcbe <__kernel_rem_pio2+0x5ce>
 800fc50:	f1bb 0f00 	cmp.w	fp, #0
 800fc54:	d039      	beq.n	800fcca <__kernel_rem_pio2+0x5da>
 800fc56:	4602      	mov	r2, r0
 800fc58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc5c:	9c01      	ldr	r4, [sp, #4]
 800fc5e:	e9c4 2300 	strd	r2, r3, [r4]
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fc6a:	f7f0 fb25 	bl	80002b8 <__aeabi_dsub>
 800fc6e:	ae4c      	add	r6, sp, #304	; 0x130
 800fc70:	2401      	movs	r4, #1
 800fc72:	42a5      	cmp	r5, r4
 800fc74:	da2c      	bge.n	800fcd0 <__kernel_rem_pio2+0x5e0>
 800fc76:	f1bb 0f00 	cmp.w	fp, #0
 800fc7a:	d002      	beq.n	800fc82 <__kernel_rem_pio2+0x592>
 800fc7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc80:	4619      	mov	r1, r3
 800fc82:	9b01      	ldr	r3, [sp, #4]
 800fc84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fc88:	e7a5      	b.n	800fbd6 <__kernel_rem_pio2+0x4e6>
 800fc8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800fc8e:	eb0d 0403 	add.w	r4, sp, r3
 800fc92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fc96:	2000      	movs	r0, #0
 800fc98:	2100      	movs	r1, #0
 800fc9a:	2d00      	cmp	r5, #0
 800fc9c:	da09      	bge.n	800fcb2 <__kernel_rem_pio2+0x5c2>
 800fc9e:	f1bb 0f00 	cmp.w	fp, #0
 800fca2:	d002      	beq.n	800fcaa <__kernel_rem_pio2+0x5ba>
 800fca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fca8:	4619      	mov	r1, r3
 800fcaa:	9b01      	ldr	r3, [sp, #4]
 800fcac:	e9c3 0100 	strd	r0, r1, [r3]
 800fcb0:	e791      	b.n	800fbd6 <__kernel_rem_pio2+0x4e6>
 800fcb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fcb6:	f7f0 fb01 	bl	80002bc <__adddf3>
 800fcba:	3d01      	subs	r5, #1
 800fcbc:	e7ed      	b.n	800fc9a <__kernel_rem_pio2+0x5aa>
 800fcbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fcc2:	f7f0 fafb 	bl	80002bc <__adddf3>
 800fcc6:	3e01      	subs	r6, #1
 800fcc8:	e7c0      	b.n	800fc4c <__kernel_rem_pio2+0x55c>
 800fcca:	4602      	mov	r2, r0
 800fccc:	460b      	mov	r3, r1
 800fcce:	e7c5      	b.n	800fc5c <__kernel_rem_pio2+0x56c>
 800fcd0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fcd4:	f7f0 faf2 	bl	80002bc <__adddf3>
 800fcd8:	3401      	adds	r4, #1
 800fcda:	e7ca      	b.n	800fc72 <__kernel_rem_pio2+0x582>
 800fcdc:	e9da 8900 	ldrd	r8, r9, [sl]
 800fce0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fce4:	9b02      	ldr	r3, [sp, #8]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	9302      	str	r3, [sp, #8]
 800fcea:	4632      	mov	r2, r6
 800fcec:	463b      	mov	r3, r7
 800fcee:	4640      	mov	r0, r8
 800fcf0:	4649      	mov	r1, r9
 800fcf2:	f7f0 fae3 	bl	80002bc <__adddf3>
 800fcf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fad9 	bl	80002b8 <__aeabi_dsub>
 800fd06:	4632      	mov	r2, r6
 800fd08:	463b      	mov	r3, r7
 800fd0a:	f7f0 fad7 	bl	80002bc <__adddf3>
 800fd0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800fd12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd16:	ed8a 7b00 	vstr	d7, [sl]
 800fd1a:	e76e      	b.n	800fbfa <__kernel_rem_pio2+0x50a>
 800fd1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fd20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fd24:	4640      	mov	r0, r8
 800fd26:	4632      	mov	r2, r6
 800fd28:	463b      	mov	r3, r7
 800fd2a:	4649      	mov	r1, r9
 800fd2c:	f7f0 fac6 	bl	80002bc <__adddf3>
 800fd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	4640      	mov	r0, r8
 800fd3a:	4649      	mov	r1, r9
 800fd3c:	f7f0 fabc 	bl	80002b8 <__aeabi_dsub>
 800fd40:	4632      	mov	r2, r6
 800fd42:	463b      	mov	r3, r7
 800fd44:	f7f0 faba 	bl	80002bc <__adddf3>
 800fd48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd50:	ed84 7b00 	vstr	d7, [r4]
 800fd54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd58:	e755      	b.n	800fc06 <__kernel_rem_pio2+0x516>
 800fd5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fd5e:	f7f0 faad 	bl	80002bc <__adddf3>
 800fd62:	3d01      	subs	r5, #1
 800fd64:	e759      	b.n	800fc1a <__kernel_rem_pio2+0x52a>
 800fd66:	9b01      	ldr	r3, [sp, #4]
 800fd68:	9a01      	ldr	r2, [sp, #4]
 800fd6a:	601d      	str	r5, [r3, #0]
 800fd6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fd70:	605c      	str	r4, [r3, #4]
 800fd72:	609f      	str	r7, [r3, #8]
 800fd74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fd78:	60d3      	str	r3, [r2, #12]
 800fd7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd7e:	6110      	str	r0, [r2, #16]
 800fd80:	6153      	str	r3, [r2, #20]
 800fd82:	e728      	b.n	800fbd6 <__kernel_rem_pio2+0x4e6>
 800fd84:	41700000 	.word	0x41700000
 800fd88:	3e700000 	.word	0x3e700000
 800fd8c:	00000000 	.word	0x00000000

0800fd90 <__kernel_sin>:
 800fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd94:	ed2d 8b04 	vpush	{d8-d9}
 800fd98:	eeb0 8a41 	vmov.f32	s16, s2
 800fd9c:	eef0 8a61 	vmov.f32	s17, s3
 800fda0:	ec55 4b10 	vmov	r4, r5, d0
 800fda4:	b083      	sub	sp, #12
 800fda6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fdaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fdae:	9001      	str	r0, [sp, #4]
 800fdb0:	da06      	bge.n	800fdc0 <__kernel_sin+0x30>
 800fdb2:	ee10 0a10 	vmov	r0, s0
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	f7f0 fee6 	bl	8000b88 <__aeabi_d2iz>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	d051      	beq.n	800fe64 <__kernel_sin+0xd4>
 800fdc0:	4622      	mov	r2, r4
 800fdc2:	462b      	mov	r3, r5
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	4629      	mov	r1, r5
 800fdc8:	f7f0 fc2e 	bl	8000628 <__aeabi_dmul>
 800fdcc:	4682      	mov	sl, r0
 800fdce:	468b      	mov	fp, r1
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	f7f0 fc26 	bl	8000628 <__aeabi_dmul>
 800fddc:	a341      	add	r3, pc, #260	; (adr r3, 800fee4 <__kernel_sin+0x154>)
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	4680      	mov	r8, r0
 800fde4:	4689      	mov	r9, r1
 800fde6:	4650      	mov	r0, sl
 800fde8:	4659      	mov	r1, fp
 800fdea:	f7f0 fc1d 	bl	8000628 <__aeabi_dmul>
 800fdee:	a33f      	add	r3, pc, #252	; (adr r3, 800feec <__kernel_sin+0x15c>)
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	f7f0 fa60 	bl	80002b8 <__aeabi_dsub>
 800fdf8:	4652      	mov	r2, sl
 800fdfa:	465b      	mov	r3, fp
 800fdfc:	f7f0 fc14 	bl	8000628 <__aeabi_dmul>
 800fe00:	a33c      	add	r3, pc, #240	; (adr r3, 800fef4 <__kernel_sin+0x164>)
 800fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe06:	f7f0 fa59 	bl	80002bc <__adddf3>
 800fe0a:	4652      	mov	r2, sl
 800fe0c:	465b      	mov	r3, fp
 800fe0e:	f7f0 fc0b 	bl	8000628 <__aeabi_dmul>
 800fe12:	a33a      	add	r3, pc, #232	; (adr r3, 800fefc <__kernel_sin+0x16c>)
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fa4e 	bl	80002b8 <__aeabi_dsub>
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	465b      	mov	r3, fp
 800fe20:	f7f0 fc02 	bl	8000628 <__aeabi_dmul>
 800fe24:	a337      	add	r3, pc, #220	; (adr r3, 800ff04 <__kernel_sin+0x174>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fa47 	bl	80002bc <__adddf3>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	4606      	mov	r6, r0
 800fe32:	460f      	mov	r7, r1
 800fe34:	b9eb      	cbnz	r3, 800fe72 <__kernel_sin+0xe2>
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	f7f0 fbf3 	bl	8000628 <__aeabi_dmul>
 800fe42:	a325      	add	r3, pc, #148	; (adr r3, 800fed8 <__kernel_sin+0x148>)
 800fe44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe48:	f7f0 fa36 	bl	80002b8 <__aeabi_dsub>
 800fe4c:	4642      	mov	r2, r8
 800fe4e:	464b      	mov	r3, r9
 800fe50:	f7f0 fbea 	bl	8000628 <__aeabi_dmul>
 800fe54:	4602      	mov	r2, r0
 800fe56:	460b      	mov	r3, r1
 800fe58:	4620      	mov	r0, r4
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	f7f0 fa2e 	bl	80002bc <__adddf3>
 800fe60:	4604      	mov	r4, r0
 800fe62:	460d      	mov	r5, r1
 800fe64:	ec45 4b10 	vmov	d0, r4, r5
 800fe68:	b003      	add	sp, #12
 800fe6a:	ecbd 8b04 	vpop	{d8-d9}
 800fe6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe72:	4b1b      	ldr	r3, [pc, #108]	; (800fee0 <__kernel_sin+0x150>)
 800fe74:	ec51 0b18 	vmov	r0, r1, d8
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f7f0 fbd5 	bl	8000628 <__aeabi_dmul>
 800fe7e:	4632      	mov	r2, r6
 800fe80:	ec41 0b19 	vmov	d9, r0, r1
 800fe84:	463b      	mov	r3, r7
 800fe86:	4640      	mov	r0, r8
 800fe88:	4649      	mov	r1, r9
 800fe8a:	f7f0 fbcd 	bl	8000628 <__aeabi_dmul>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	ec51 0b19 	vmov	r0, r1, d9
 800fe96:	f7f0 fa0f 	bl	80002b8 <__aeabi_dsub>
 800fe9a:	4652      	mov	r2, sl
 800fe9c:	465b      	mov	r3, fp
 800fe9e:	f7f0 fbc3 	bl	8000628 <__aeabi_dmul>
 800fea2:	ec53 2b18 	vmov	r2, r3, d8
 800fea6:	f7f0 fa07 	bl	80002b8 <__aeabi_dsub>
 800feaa:	a30b      	add	r3, pc, #44	; (adr r3, 800fed8 <__kernel_sin+0x148>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	4606      	mov	r6, r0
 800feb2:	460f      	mov	r7, r1
 800feb4:	4640      	mov	r0, r8
 800feb6:	4649      	mov	r1, r9
 800feb8:	f7f0 fbb6 	bl	8000628 <__aeabi_dmul>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	4630      	mov	r0, r6
 800fec2:	4639      	mov	r1, r7
 800fec4:	f7f0 f9fa 	bl	80002bc <__adddf3>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4620      	mov	r0, r4
 800fece:	4629      	mov	r1, r5
 800fed0:	f7f0 f9f2 	bl	80002b8 <__aeabi_dsub>
 800fed4:	e7c4      	b.n	800fe60 <__kernel_sin+0xd0>
 800fed6:	bf00      	nop
 800fed8:	55555549 	.word	0x55555549
 800fedc:	3fc55555 	.word	0x3fc55555
 800fee0:	3fe00000 	.word	0x3fe00000
 800fee4:	5acfd57c 	.word	0x5acfd57c
 800fee8:	3de5d93a 	.word	0x3de5d93a
 800feec:	8a2b9ceb 	.word	0x8a2b9ceb
 800fef0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fef4:	57b1fe7d 	.word	0x57b1fe7d
 800fef8:	3ec71de3 	.word	0x3ec71de3
 800fefc:	19c161d5 	.word	0x19c161d5
 800ff00:	3f2a01a0 	.word	0x3f2a01a0
 800ff04:	1110f8a6 	.word	0x1110f8a6
 800ff08:	3f811111 	.word	0x3f811111

0800ff0c <with_errno>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4604      	mov	r4, r0
 800ff10:	460d      	mov	r5, r1
 800ff12:	4616      	mov	r6, r2
 800ff14:	f7fa fa6e 	bl	800a3f4 <__errno>
 800ff18:	4629      	mov	r1, r5
 800ff1a:	6006      	str	r6, [r0, #0]
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}

0800ff20 <xflow>:
 800ff20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff22:	4614      	mov	r4, r2
 800ff24:	461d      	mov	r5, r3
 800ff26:	b108      	cbz	r0, 800ff2c <xflow+0xc>
 800ff28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff2c:	e9cd 2300 	strd	r2, r3, [sp]
 800ff30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff34:	4620      	mov	r0, r4
 800ff36:	4629      	mov	r1, r5
 800ff38:	f7f0 fb76 	bl	8000628 <__aeabi_dmul>
 800ff3c:	2222      	movs	r2, #34	; 0x22
 800ff3e:	b003      	add	sp, #12
 800ff40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff44:	f7ff bfe2 	b.w	800ff0c <with_errno>

0800ff48 <__math_uflow>:
 800ff48:	b508      	push	{r3, lr}
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ff50:	f7ff ffe6 	bl	800ff20 <xflow>
 800ff54:	ec41 0b10 	vmov	d0, r0, r1
 800ff58:	bd08      	pop	{r3, pc}

0800ff5a <__math_oflow>:
 800ff5a:	b508      	push	{r3, lr}
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ff62:	f7ff ffdd 	bl	800ff20 <xflow>
 800ff66:	ec41 0b10 	vmov	d0, r0, r1
 800ff6a:	bd08      	pop	{r3, pc}
 800ff6c:	0000      	movs	r0, r0
	...

0800ff70 <atan>:
 800ff70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff74:	ec55 4b10 	vmov	r4, r5, d0
 800ff78:	4bc3      	ldr	r3, [pc, #780]	; (8010288 <atan+0x318>)
 800ff7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ff7e:	429e      	cmp	r6, r3
 800ff80:	46ab      	mov	fp, r5
 800ff82:	dd18      	ble.n	800ffb6 <atan+0x46>
 800ff84:	4bc1      	ldr	r3, [pc, #772]	; (801028c <atan+0x31c>)
 800ff86:	429e      	cmp	r6, r3
 800ff88:	dc01      	bgt.n	800ff8e <atan+0x1e>
 800ff8a:	d109      	bne.n	800ffa0 <atan+0x30>
 800ff8c:	b144      	cbz	r4, 800ffa0 <atan+0x30>
 800ff8e:	4622      	mov	r2, r4
 800ff90:	462b      	mov	r3, r5
 800ff92:	4620      	mov	r0, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7f0 f991 	bl	80002bc <__adddf3>
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	460d      	mov	r5, r1
 800ff9e:	e006      	b.n	800ffae <atan+0x3e>
 800ffa0:	f1bb 0f00 	cmp.w	fp, #0
 800ffa4:	f300 8131 	bgt.w	801020a <atan+0x29a>
 800ffa8:	a59b      	add	r5, pc, #620	; (adr r5, 8010218 <atan+0x2a8>)
 800ffaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ffae:	ec45 4b10 	vmov	d0, r4, r5
 800ffb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb6:	4bb6      	ldr	r3, [pc, #728]	; (8010290 <atan+0x320>)
 800ffb8:	429e      	cmp	r6, r3
 800ffba:	dc14      	bgt.n	800ffe6 <atan+0x76>
 800ffbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ffc0:	429e      	cmp	r6, r3
 800ffc2:	dc0d      	bgt.n	800ffe0 <atan+0x70>
 800ffc4:	a396      	add	r3, pc, #600	; (adr r3, 8010220 <atan+0x2b0>)
 800ffc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffca:	ee10 0a10 	vmov	r0, s0
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f7f0 f974 	bl	80002bc <__adddf3>
 800ffd4:	4baf      	ldr	r3, [pc, #700]	; (8010294 <atan+0x324>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f7f0 fdb6 	bl	8000b48 <__aeabi_dcmpgt>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d1e6      	bne.n	800ffae <atan+0x3e>
 800ffe0:	f04f 3aff 	mov.w	sl, #4294967295
 800ffe4:	e02b      	b.n	801003e <atan+0xce>
 800ffe6:	f000 f963 	bl	80102b0 <fabs>
 800ffea:	4bab      	ldr	r3, [pc, #684]	; (8010298 <atan+0x328>)
 800ffec:	429e      	cmp	r6, r3
 800ffee:	ec55 4b10 	vmov	r4, r5, d0
 800fff2:	f300 80bf 	bgt.w	8010174 <atan+0x204>
 800fff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fffa:	429e      	cmp	r6, r3
 800fffc:	f300 80a0 	bgt.w	8010140 <atan+0x1d0>
 8010000:	ee10 2a10 	vmov	r2, s0
 8010004:	ee10 0a10 	vmov	r0, s0
 8010008:	462b      	mov	r3, r5
 801000a:	4629      	mov	r1, r5
 801000c:	f7f0 f956 	bl	80002bc <__adddf3>
 8010010:	4ba0      	ldr	r3, [pc, #640]	; (8010294 <atan+0x324>)
 8010012:	2200      	movs	r2, #0
 8010014:	f7f0 f950 	bl	80002b8 <__aeabi_dsub>
 8010018:	2200      	movs	r2, #0
 801001a:	4606      	mov	r6, r0
 801001c:	460f      	mov	r7, r1
 801001e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010022:	4620      	mov	r0, r4
 8010024:	4629      	mov	r1, r5
 8010026:	f7f0 f949 	bl	80002bc <__adddf3>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4630      	mov	r0, r6
 8010030:	4639      	mov	r1, r7
 8010032:	f7f0 fc23 	bl	800087c <__aeabi_ddiv>
 8010036:	f04f 0a00 	mov.w	sl, #0
 801003a:	4604      	mov	r4, r0
 801003c:	460d      	mov	r5, r1
 801003e:	4622      	mov	r2, r4
 8010040:	462b      	mov	r3, r5
 8010042:	4620      	mov	r0, r4
 8010044:	4629      	mov	r1, r5
 8010046:	f7f0 faef 	bl	8000628 <__aeabi_dmul>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4680      	mov	r8, r0
 8010050:	4689      	mov	r9, r1
 8010052:	f7f0 fae9 	bl	8000628 <__aeabi_dmul>
 8010056:	a374      	add	r3, pc, #464	; (adr r3, 8010228 <atan+0x2b8>)
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	4606      	mov	r6, r0
 801005e:	460f      	mov	r7, r1
 8010060:	f7f0 fae2 	bl	8000628 <__aeabi_dmul>
 8010064:	a372      	add	r3, pc, #456	; (adr r3, 8010230 <atan+0x2c0>)
 8010066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006a:	f7f0 f927 	bl	80002bc <__adddf3>
 801006e:	4632      	mov	r2, r6
 8010070:	463b      	mov	r3, r7
 8010072:	f7f0 fad9 	bl	8000628 <__aeabi_dmul>
 8010076:	a370      	add	r3, pc, #448	; (adr r3, 8010238 <atan+0x2c8>)
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	f7f0 f91e 	bl	80002bc <__adddf3>
 8010080:	4632      	mov	r2, r6
 8010082:	463b      	mov	r3, r7
 8010084:	f7f0 fad0 	bl	8000628 <__aeabi_dmul>
 8010088:	a36d      	add	r3, pc, #436	; (adr r3, 8010240 <atan+0x2d0>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	f7f0 f915 	bl	80002bc <__adddf3>
 8010092:	4632      	mov	r2, r6
 8010094:	463b      	mov	r3, r7
 8010096:	f7f0 fac7 	bl	8000628 <__aeabi_dmul>
 801009a:	a36b      	add	r3, pc, #428	; (adr r3, 8010248 <atan+0x2d8>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	f7f0 f90c 	bl	80002bc <__adddf3>
 80100a4:	4632      	mov	r2, r6
 80100a6:	463b      	mov	r3, r7
 80100a8:	f7f0 fabe 	bl	8000628 <__aeabi_dmul>
 80100ac:	a368      	add	r3, pc, #416	; (adr r3, 8010250 <atan+0x2e0>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	f7f0 f903 	bl	80002bc <__adddf3>
 80100b6:	4642      	mov	r2, r8
 80100b8:	464b      	mov	r3, r9
 80100ba:	f7f0 fab5 	bl	8000628 <__aeabi_dmul>
 80100be:	a366      	add	r3, pc, #408	; (adr r3, 8010258 <atan+0x2e8>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	4680      	mov	r8, r0
 80100c6:	4689      	mov	r9, r1
 80100c8:	4630      	mov	r0, r6
 80100ca:	4639      	mov	r1, r7
 80100cc:	f7f0 faac 	bl	8000628 <__aeabi_dmul>
 80100d0:	a363      	add	r3, pc, #396	; (adr r3, 8010260 <atan+0x2f0>)
 80100d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d6:	f7f0 f8ef 	bl	80002b8 <__aeabi_dsub>
 80100da:	4632      	mov	r2, r6
 80100dc:	463b      	mov	r3, r7
 80100de:	f7f0 faa3 	bl	8000628 <__aeabi_dmul>
 80100e2:	a361      	add	r3, pc, #388	; (adr r3, 8010268 <atan+0x2f8>)
 80100e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e8:	f7f0 f8e6 	bl	80002b8 <__aeabi_dsub>
 80100ec:	4632      	mov	r2, r6
 80100ee:	463b      	mov	r3, r7
 80100f0:	f7f0 fa9a 	bl	8000628 <__aeabi_dmul>
 80100f4:	a35e      	add	r3, pc, #376	; (adr r3, 8010270 <atan+0x300>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	f7f0 f8dd 	bl	80002b8 <__aeabi_dsub>
 80100fe:	4632      	mov	r2, r6
 8010100:	463b      	mov	r3, r7
 8010102:	f7f0 fa91 	bl	8000628 <__aeabi_dmul>
 8010106:	a35c      	add	r3, pc, #368	; (adr r3, 8010278 <atan+0x308>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	f7f0 f8d4 	bl	80002b8 <__aeabi_dsub>
 8010110:	4632      	mov	r2, r6
 8010112:	463b      	mov	r3, r7
 8010114:	f7f0 fa88 	bl	8000628 <__aeabi_dmul>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4640      	mov	r0, r8
 801011e:	4649      	mov	r1, r9
 8010120:	f7f0 f8cc 	bl	80002bc <__adddf3>
 8010124:	4622      	mov	r2, r4
 8010126:	462b      	mov	r3, r5
 8010128:	f7f0 fa7e 	bl	8000628 <__aeabi_dmul>
 801012c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	d14b      	bne.n	80101ce <atan+0x25e>
 8010136:	4620      	mov	r0, r4
 8010138:	4629      	mov	r1, r5
 801013a:	f7f0 f8bd 	bl	80002b8 <__aeabi_dsub>
 801013e:	e72c      	b.n	800ff9a <atan+0x2a>
 8010140:	ee10 0a10 	vmov	r0, s0
 8010144:	4b53      	ldr	r3, [pc, #332]	; (8010294 <atan+0x324>)
 8010146:	2200      	movs	r2, #0
 8010148:	4629      	mov	r1, r5
 801014a:	f7f0 f8b5 	bl	80002b8 <__aeabi_dsub>
 801014e:	4b51      	ldr	r3, [pc, #324]	; (8010294 <atan+0x324>)
 8010150:	4606      	mov	r6, r0
 8010152:	460f      	mov	r7, r1
 8010154:	2200      	movs	r2, #0
 8010156:	4620      	mov	r0, r4
 8010158:	4629      	mov	r1, r5
 801015a:	f7f0 f8af 	bl	80002bc <__adddf3>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	4630      	mov	r0, r6
 8010164:	4639      	mov	r1, r7
 8010166:	f7f0 fb89 	bl	800087c <__aeabi_ddiv>
 801016a:	f04f 0a01 	mov.w	sl, #1
 801016e:	4604      	mov	r4, r0
 8010170:	460d      	mov	r5, r1
 8010172:	e764      	b.n	801003e <atan+0xce>
 8010174:	4b49      	ldr	r3, [pc, #292]	; (801029c <atan+0x32c>)
 8010176:	429e      	cmp	r6, r3
 8010178:	da1d      	bge.n	80101b6 <atan+0x246>
 801017a:	ee10 0a10 	vmov	r0, s0
 801017e:	4b48      	ldr	r3, [pc, #288]	; (80102a0 <atan+0x330>)
 8010180:	2200      	movs	r2, #0
 8010182:	4629      	mov	r1, r5
 8010184:	f7f0 f898 	bl	80002b8 <__aeabi_dsub>
 8010188:	4b45      	ldr	r3, [pc, #276]	; (80102a0 <atan+0x330>)
 801018a:	4606      	mov	r6, r0
 801018c:	460f      	mov	r7, r1
 801018e:	2200      	movs	r2, #0
 8010190:	4620      	mov	r0, r4
 8010192:	4629      	mov	r1, r5
 8010194:	f7f0 fa48 	bl	8000628 <__aeabi_dmul>
 8010198:	4b3e      	ldr	r3, [pc, #248]	; (8010294 <atan+0x324>)
 801019a:	2200      	movs	r2, #0
 801019c:	f7f0 f88e 	bl	80002bc <__adddf3>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4630      	mov	r0, r6
 80101a6:	4639      	mov	r1, r7
 80101a8:	f7f0 fb68 	bl	800087c <__aeabi_ddiv>
 80101ac:	f04f 0a02 	mov.w	sl, #2
 80101b0:	4604      	mov	r4, r0
 80101b2:	460d      	mov	r5, r1
 80101b4:	e743      	b.n	801003e <atan+0xce>
 80101b6:	462b      	mov	r3, r5
 80101b8:	ee10 2a10 	vmov	r2, s0
 80101bc:	4939      	ldr	r1, [pc, #228]	; (80102a4 <atan+0x334>)
 80101be:	2000      	movs	r0, #0
 80101c0:	f7f0 fb5c 	bl	800087c <__aeabi_ddiv>
 80101c4:	f04f 0a03 	mov.w	sl, #3
 80101c8:	4604      	mov	r4, r0
 80101ca:	460d      	mov	r5, r1
 80101cc:	e737      	b.n	801003e <atan+0xce>
 80101ce:	4b36      	ldr	r3, [pc, #216]	; (80102a8 <atan+0x338>)
 80101d0:	4e36      	ldr	r6, [pc, #216]	; (80102ac <atan+0x33c>)
 80101d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80101d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80101da:	e9da 2300 	ldrd	r2, r3, [sl]
 80101de:	f7f0 f86b 	bl	80002b8 <__aeabi_dsub>
 80101e2:	4622      	mov	r2, r4
 80101e4:	462b      	mov	r3, r5
 80101e6:	f7f0 f867 	bl	80002b8 <__aeabi_dsub>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80101f2:	f7f0 f861 	bl	80002b8 <__aeabi_dsub>
 80101f6:	f1bb 0f00 	cmp.w	fp, #0
 80101fa:	4604      	mov	r4, r0
 80101fc:	460d      	mov	r5, r1
 80101fe:	f6bf aed6 	bge.w	800ffae <atan+0x3e>
 8010202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010206:	461d      	mov	r5, r3
 8010208:	e6d1      	b.n	800ffae <atan+0x3e>
 801020a:	a51d      	add	r5, pc, #116	; (adr r5, 8010280 <atan+0x310>)
 801020c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010210:	e6cd      	b.n	800ffae <atan+0x3e>
 8010212:	bf00      	nop
 8010214:	f3af 8000 	nop.w
 8010218:	54442d18 	.word	0x54442d18
 801021c:	bff921fb 	.word	0xbff921fb
 8010220:	8800759c 	.word	0x8800759c
 8010224:	7e37e43c 	.word	0x7e37e43c
 8010228:	e322da11 	.word	0xe322da11
 801022c:	3f90ad3a 	.word	0x3f90ad3a
 8010230:	24760deb 	.word	0x24760deb
 8010234:	3fa97b4b 	.word	0x3fa97b4b
 8010238:	a0d03d51 	.word	0xa0d03d51
 801023c:	3fb10d66 	.word	0x3fb10d66
 8010240:	c54c206e 	.word	0xc54c206e
 8010244:	3fb745cd 	.word	0x3fb745cd
 8010248:	920083ff 	.word	0x920083ff
 801024c:	3fc24924 	.word	0x3fc24924
 8010250:	5555550d 	.word	0x5555550d
 8010254:	3fd55555 	.word	0x3fd55555
 8010258:	2c6a6c2f 	.word	0x2c6a6c2f
 801025c:	bfa2b444 	.word	0xbfa2b444
 8010260:	52defd9a 	.word	0x52defd9a
 8010264:	3fadde2d 	.word	0x3fadde2d
 8010268:	af749a6d 	.word	0xaf749a6d
 801026c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010270:	fe231671 	.word	0xfe231671
 8010274:	3fbc71c6 	.word	0x3fbc71c6
 8010278:	9998ebc4 	.word	0x9998ebc4
 801027c:	3fc99999 	.word	0x3fc99999
 8010280:	54442d18 	.word	0x54442d18
 8010284:	3ff921fb 	.word	0x3ff921fb
 8010288:	440fffff 	.word	0x440fffff
 801028c:	7ff00000 	.word	0x7ff00000
 8010290:	3fdbffff 	.word	0x3fdbffff
 8010294:	3ff00000 	.word	0x3ff00000
 8010298:	3ff2ffff 	.word	0x3ff2ffff
 801029c:	40038000 	.word	0x40038000
 80102a0:	3ff80000 	.word	0x3ff80000
 80102a4:	bff00000 	.word	0xbff00000
 80102a8:	08011118 	.word	0x08011118
 80102ac:	080110f8 	.word	0x080110f8

080102b0 <fabs>:
 80102b0:	ec51 0b10 	vmov	r0, r1, d0
 80102b4:	ee10 2a10 	vmov	r2, s0
 80102b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80102bc:	ec43 2b10 	vmov	d0, r2, r3
 80102c0:	4770      	bx	lr

080102c2 <finite>:
 80102c2:	b082      	sub	sp, #8
 80102c4:	ed8d 0b00 	vstr	d0, [sp]
 80102c8:	9801      	ldr	r0, [sp, #4]
 80102ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80102ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80102d2:	0fc0      	lsrs	r0, r0, #31
 80102d4:	b002      	add	sp, #8
 80102d6:	4770      	bx	lr

080102d8 <floor>:
 80102d8:	ec51 0b10 	vmov	r0, r1, d0
 80102dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80102e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80102e8:	2e13      	cmp	r6, #19
 80102ea:	ee10 5a10 	vmov	r5, s0
 80102ee:	ee10 8a10 	vmov	r8, s0
 80102f2:	460c      	mov	r4, r1
 80102f4:	dc32      	bgt.n	801035c <floor+0x84>
 80102f6:	2e00      	cmp	r6, #0
 80102f8:	da14      	bge.n	8010324 <floor+0x4c>
 80102fa:	a333      	add	r3, pc, #204	; (adr r3, 80103c8 <floor+0xf0>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f7ef ffdc 	bl	80002bc <__adddf3>
 8010304:	2200      	movs	r2, #0
 8010306:	2300      	movs	r3, #0
 8010308:	f7f0 fc1e 	bl	8000b48 <__aeabi_dcmpgt>
 801030c:	b138      	cbz	r0, 801031e <floor+0x46>
 801030e:	2c00      	cmp	r4, #0
 8010310:	da57      	bge.n	80103c2 <floor+0xea>
 8010312:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010316:	431d      	orrs	r5, r3
 8010318:	d001      	beq.n	801031e <floor+0x46>
 801031a:	4c2d      	ldr	r4, [pc, #180]	; (80103d0 <floor+0xf8>)
 801031c:	2500      	movs	r5, #0
 801031e:	4621      	mov	r1, r4
 8010320:	4628      	mov	r0, r5
 8010322:	e025      	b.n	8010370 <floor+0x98>
 8010324:	4f2b      	ldr	r7, [pc, #172]	; (80103d4 <floor+0xfc>)
 8010326:	4137      	asrs	r7, r6
 8010328:	ea01 0307 	and.w	r3, r1, r7
 801032c:	4303      	orrs	r3, r0
 801032e:	d01f      	beq.n	8010370 <floor+0x98>
 8010330:	a325      	add	r3, pc, #148	; (adr r3, 80103c8 <floor+0xf0>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7ef ffc1 	bl	80002bc <__adddf3>
 801033a:	2200      	movs	r2, #0
 801033c:	2300      	movs	r3, #0
 801033e:	f7f0 fc03 	bl	8000b48 <__aeabi_dcmpgt>
 8010342:	2800      	cmp	r0, #0
 8010344:	d0eb      	beq.n	801031e <floor+0x46>
 8010346:	2c00      	cmp	r4, #0
 8010348:	bfbe      	ittt	lt
 801034a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801034e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010352:	19a4      	addlt	r4, r4, r6
 8010354:	ea24 0407 	bic.w	r4, r4, r7
 8010358:	2500      	movs	r5, #0
 801035a:	e7e0      	b.n	801031e <floor+0x46>
 801035c:	2e33      	cmp	r6, #51	; 0x33
 801035e:	dd0b      	ble.n	8010378 <floor+0xa0>
 8010360:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010364:	d104      	bne.n	8010370 <floor+0x98>
 8010366:	ee10 2a10 	vmov	r2, s0
 801036a:	460b      	mov	r3, r1
 801036c:	f7ef ffa6 	bl	80002bc <__adddf3>
 8010370:	ec41 0b10 	vmov	d0, r0, r1
 8010374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010378:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801037c:	f04f 33ff 	mov.w	r3, #4294967295
 8010380:	fa23 f707 	lsr.w	r7, r3, r7
 8010384:	4207      	tst	r7, r0
 8010386:	d0f3      	beq.n	8010370 <floor+0x98>
 8010388:	a30f      	add	r3, pc, #60	; (adr r3, 80103c8 <floor+0xf0>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f7ef ff95 	bl	80002bc <__adddf3>
 8010392:	2200      	movs	r2, #0
 8010394:	2300      	movs	r3, #0
 8010396:	f7f0 fbd7 	bl	8000b48 <__aeabi_dcmpgt>
 801039a:	2800      	cmp	r0, #0
 801039c:	d0bf      	beq.n	801031e <floor+0x46>
 801039e:	2c00      	cmp	r4, #0
 80103a0:	da02      	bge.n	80103a8 <floor+0xd0>
 80103a2:	2e14      	cmp	r6, #20
 80103a4:	d103      	bne.n	80103ae <floor+0xd6>
 80103a6:	3401      	adds	r4, #1
 80103a8:	ea25 0507 	bic.w	r5, r5, r7
 80103ac:	e7b7      	b.n	801031e <floor+0x46>
 80103ae:	2301      	movs	r3, #1
 80103b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80103b4:	fa03 f606 	lsl.w	r6, r3, r6
 80103b8:	4435      	add	r5, r6
 80103ba:	4545      	cmp	r5, r8
 80103bc:	bf38      	it	cc
 80103be:	18e4      	addcc	r4, r4, r3
 80103c0:	e7f2      	b.n	80103a8 <floor+0xd0>
 80103c2:	2500      	movs	r5, #0
 80103c4:	462c      	mov	r4, r5
 80103c6:	e7aa      	b.n	801031e <floor+0x46>
 80103c8:	8800759c 	.word	0x8800759c
 80103cc:	7e37e43c 	.word	0x7e37e43c
 80103d0:	bff00000 	.word	0xbff00000
 80103d4:	000fffff 	.word	0x000fffff

080103d8 <nan>:
 80103d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80103e0 <nan+0x8>
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	00000000 	.word	0x00000000
 80103e4:	7ff80000 	.word	0x7ff80000

080103e8 <scalbn>:
 80103e8:	b570      	push	{r4, r5, r6, lr}
 80103ea:	ec55 4b10 	vmov	r4, r5, d0
 80103ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80103f2:	4606      	mov	r6, r0
 80103f4:	462b      	mov	r3, r5
 80103f6:	b99a      	cbnz	r2, 8010420 <scalbn+0x38>
 80103f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80103fc:	4323      	orrs	r3, r4
 80103fe:	d036      	beq.n	801046e <scalbn+0x86>
 8010400:	4b39      	ldr	r3, [pc, #228]	; (80104e8 <scalbn+0x100>)
 8010402:	4629      	mov	r1, r5
 8010404:	ee10 0a10 	vmov	r0, s0
 8010408:	2200      	movs	r2, #0
 801040a:	f7f0 f90d 	bl	8000628 <__aeabi_dmul>
 801040e:	4b37      	ldr	r3, [pc, #220]	; (80104ec <scalbn+0x104>)
 8010410:	429e      	cmp	r6, r3
 8010412:	4604      	mov	r4, r0
 8010414:	460d      	mov	r5, r1
 8010416:	da10      	bge.n	801043a <scalbn+0x52>
 8010418:	a32b      	add	r3, pc, #172	; (adr r3, 80104c8 <scalbn+0xe0>)
 801041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041e:	e03a      	b.n	8010496 <scalbn+0xae>
 8010420:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010424:	428a      	cmp	r2, r1
 8010426:	d10c      	bne.n	8010442 <scalbn+0x5a>
 8010428:	ee10 2a10 	vmov	r2, s0
 801042c:	4620      	mov	r0, r4
 801042e:	4629      	mov	r1, r5
 8010430:	f7ef ff44 	bl	80002bc <__adddf3>
 8010434:	4604      	mov	r4, r0
 8010436:	460d      	mov	r5, r1
 8010438:	e019      	b.n	801046e <scalbn+0x86>
 801043a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801043e:	460b      	mov	r3, r1
 8010440:	3a36      	subs	r2, #54	; 0x36
 8010442:	4432      	add	r2, r6
 8010444:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010448:	428a      	cmp	r2, r1
 801044a:	dd08      	ble.n	801045e <scalbn+0x76>
 801044c:	2d00      	cmp	r5, #0
 801044e:	a120      	add	r1, pc, #128	; (adr r1, 80104d0 <scalbn+0xe8>)
 8010450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010454:	da1c      	bge.n	8010490 <scalbn+0xa8>
 8010456:	a120      	add	r1, pc, #128	; (adr r1, 80104d8 <scalbn+0xf0>)
 8010458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801045c:	e018      	b.n	8010490 <scalbn+0xa8>
 801045e:	2a00      	cmp	r2, #0
 8010460:	dd08      	ble.n	8010474 <scalbn+0x8c>
 8010462:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010466:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801046a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801046e:	ec45 4b10 	vmov	d0, r4, r5
 8010472:	bd70      	pop	{r4, r5, r6, pc}
 8010474:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010478:	da19      	bge.n	80104ae <scalbn+0xc6>
 801047a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801047e:	429e      	cmp	r6, r3
 8010480:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010484:	dd0a      	ble.n	801049c <scalbn+0xb4>
 8010486:	a112      	add	r1, pc, #72	; (adr r1, 80104d0 <scalbn+0xe8>)
 8010488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e2      	bne.n	8010456 <scalbn+0x6e>
 8010490:	a30f      	add	r3, pc, #60	; (adr r3, 80104d0 <scalbn+0xe8>)
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	f7f0 f8c7 	bl	8000628 <__aeabi_dmul>
 801049a:	e7cb      	b.n	8010434 <scalbn+0x4c>
 801049c:	a10a      	add	r1, pc, #40	; (adr r1, 80104c8 <scalbn+0xe0>)
 801049e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d0b8      	beq.n	8010418 <scalbn+0x30>
 80104a6:	a10e      	add	r1, pc, #56	; (adr r1, 80104e0 <scalbn+0xf8>)
 80104a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104ac:	e7b4      	b.n	8010418 <scalbn+0x30>
 80104ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80104b2:	3236      	adds	r2, #54	; 0x36
 80104b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80104b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80104bc:	4620      	mov	r0, r4
 80104be:	4b0c      	ldr	r3, [pc, #48]	; (80104f0 <scalbn+0x108>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	e7e8      	b.n	8010496 <scalbn+0xae>
 80104c4:	f3af 8000 	nop.w
 80104c8:	c2f8f359 	.word	0xc2f8f359
 80104cc:	01a56e1f 	.word	0x01a56e1f
 80104d0:	8800759c 	.word	0x8800759c
 80104d4:	7e37e43c 	.word	0x7e37e43c
 80104d8:	8800759c 	.word	0x8800759c
 80104dc:	fe37e43c 	.word	0xfe37e43c
 80104e0:	c2f8f359 	.word	0xc2f8f359
 80104e4:	81a56e1f 	.word	0x81a56e1f
 80104e8:	43500000 	.word	0x43500000
 80104ec:	ffff3cb0 	.word	0xffff3cb0
 80104f0:	3c900000 	.word	0x3c900000

080104f4 <_sbrk>:
 80104f4:	4a04      	ldr	r2, [pc, #16]	; (8010508 <_sbrk+0x14>)
 80104f6:	6811      	ldr	r1, [r2, #0]
 80104f8:	4603      	mov	r3, r0
 80104fa:	b909      	cbnz	r1, 8010500 <_sbrk+0xc>
 80104fc:	4903      	ldr	r1, [pc, #12]	; (801050c <_sbrk+0x18>)
 80104fe:	6011      	str	r1, [r2, #0]
 8010500:	6810      	ldr	r0, [r2, #0]
 8010502:	4403      	add	r3, r0
 8010504:	6013      	str	r3, [r2, #0]
 8010506:	4770      	bx	lr
 8010508:	200122cc 	.word	0x200122cc
 801050c:	200122d0 	.word	0x200122d0

08010510 <_init>:
 8010510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010512:	bf00      	nop
 8010514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010516:	bc08      	pop	{r3}
 8010518:	469e      	mov	lr, r3
 801051a:	4770      	bx	lr

0801051c <_fini>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	bf00      	nop
 8010520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010522:	bc08      	pop	{r3}
 8010524:	469e      	mov	lr, r3
 8010526:	4770      	bx	lr
