
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800c760  0800c760  0001c760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d018  0800d018  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d018  0800d018  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d018  0800d018  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d01c  0800d01c  0001d01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001e0  0800d200  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800d200  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007746  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016db  00000000  00000000  00027956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011164  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000880d  00000000  00000000  0003ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fe7  00000000  00000000  00043661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  0009c698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c748 	.word	0x0800c748

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c748 	.word	0x0800c748

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b84      	ldr	r3, [pc, #528]	; (8000ed0 <main+0x218>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a82      	ldr	r2, [pc, #520]	; (8000ed0 <main+0x218>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f004 fdb0 	bl	8005834 <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cd4:	f000 f926 	bl	8000f24 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	; (8000ed4 <main+0x21c>)
 8000cda:	4a7f      	ldr	r2, [pc, #508]	; (8000ed8 <main+0x220>)
 8000cdc:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
//	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos

	double angleToGo_Relative = 0;
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double angle_start = 0;
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2300 	strd	r2, r3, [r7]

    /* Loop forever */
	while(1){

		fillComand();
 8000cf6:	f001 ff63 	bl	8002bc0 <fillComand>

		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000cfa:	4b78      	ldr	r3, [pc, #480]	; (8000edc <main+0x224>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d01d      	beq.n	8000d3e <main+0x86>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d02:	4b77      	ldr	r3, [pc, #476]	; (8000ee0 <main+0x228>)
 8000d04:	ed93 7b00 	vldr	d7, [r3]
 8000d08:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <main+0x22c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4a76      	ldr	r2, [pc, #472]	; (8000ee8 <main+0x230>)
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	f8ad 2018 	strh.w	r2, [sp, #24]
 8000d14:	4a75      	ldr	r2, [pc, #468]	; (8000eec <main+0x234>)
 8000d16:	9205      	str	r2, [sp, #20]
 8000d18:	4a75      	ldr	r2, [pc, #468]	; (8000ef0 <main+0x238>)
 8000d1a:	9204      	str	r2, [sp, #16]
 8000d1c:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <main+0x23c>)
 8000d1e:	9203      	str	r2, [sp, #12]
 8000d20:	4a75      	ldr	r2, [pc, #468]	; (8000ef8 <main+0x240>)
 8000d22:	9202      	str	r2, [sp, #8]
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	4b75      	ldr	r3, [pc, #468]	; (8000efc <main+0x244>)
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d2e:	eef0 0a67 	vmov.f32	s1, s15
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <main+0x248>)
 8000d34:	4a73      	ldr	r2, [pc, #460]	; (8000f04 <main+0x24c>)
 8000d36:	4974      	ldr	r1, [pc, #464]	; (8000f08 <main+0x250>)
 8000d38:	4874      	ldr	r0, [pc, #464]	; (8000f0c <main+0x254>)
 8000d3a:	f001 fe69 	bl	8002a10 <go>
			   &flag_control,
			   data,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d3e:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <main+0x258>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d02c      	beq.n	8000da0 <main+0xe8>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			Done = goTo(handler_Motor_Array,
 8000d46:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <main+0x228>)
 8000d48:	ed93 7b00 	vldr	d7, [r3]
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <main+0x22c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
					    Mode,
					    &flag_angulo,
					    &flag_measurements,
					    &flag_control,
					    data,
					    parameters_Path_Robot.line_Distance,
 8000d50:	4a6b      	ldr	r2, [pc, #428]	; (8000f00 <main+0x248>)
 8000d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
			Done = goTo(handler_Motor_Array,
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a64      	ldr	r2, [pc, #400]	; (8000ee8 <main+0x230>)
 8000d58:	8812      	ldrh	r2, [r2, #0]
 8000d5a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8000d5e:	9106      	str	r1, [sp, #24]
 8000d60:	4a62      	ldr	r2, [pc, #392]	; (8000eec <main+0x234>)
 8000d62:	9205      	str	r2, [sp, #20]
 8000d64:	4a62      	ldr	r2, [pc, #392]	; (8000ef0 <main+0x238>)
 8000d66:	9204      	str	r2, [sp, #16]
 8000d68:	4a62      	ldr	r2, [pc, #392]	; (8000ef4 <main+0x23c>)
 8000d6a:	9203      	str	r2, [sp, #12]
 8000d6c:	4a62      	ldr	r2, [pc, #392]	; (8000ef8 <main+0x240>)
 8000d6e:	9202      	str	r2, [sp, #8]
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <main+0x244>)
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	eeb0 0a47 	vmov.f32	s0, s14
 8000d7a:	eef0 0a67 	vmov.f32	s1, s15
 8000d7e:	4b60      	ldr	r3, [pc, #384]	; (8000f00 <main+0x248>)
 8000d80:	4a60      	ldr	r2, [pc, #384]	; (8000f04 <main+0x24c>)
 8000d82:	4961      	ldr	r1, [pc, #388]	; (8000f08 <main+0x250>)
 8000d84:	4861      	ldr	r0, [pc, #388]	; (8000f0c <main+0x254>)
 8000d86:	f001 fc25 	bl	80025d4 <goTo>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b61      	ldr	r3, [pc, #388]	; (8000f14 <main+0x25c>)
 8000d90:	701a      	strb	r2, [r3, #0]
					    Mode_dir);

			if (Done){parseCommands("stop");}
 8000d92:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <main+0x25c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <main+0xe8>
 8000d9a:	485f      	ldr	r0, [pc, #380]	; (8000f18 <main+0x260>)
 8000d9c:	f000 fb10 	bl	80013c0 <parseCommands>

		}

		if (flag_Roll){
 8000da0:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <main+0x264>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01b      	beq.n	8000de0 <main+0x128>

			// Si llegamos a este comando lo que se quiere es girar indefinidamente en cierta direccion (CW o CCW)

			// Cambiamos los parametros
			roll(handler_Motor_Array,
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <main+0x228>)
 8000daa:	ed93 7b00 	vldr	d7, [r3]
 8000dae:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <main+0x22c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <main+0x230>)
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000dba:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <main+0x234>)
 8000dbc:	9204      	str	r2, [sp, #16]
 8000dbe:	4a4c      	ldr	r2, [pc, #304]	; (8000ef0 <main+0x238>)
 8000dc0:	9203      	str	r2, [sp, #12]
 8000dc2:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <main+0x23c>)
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <main+0x240>)
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd0:	eef0 0a67 	vmov.f32	s1, s15
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <main+0x248>)
 8000dd6:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <main+0x24c>)
 8000dd8:	494b      	ldr	r1, [pc, #300]	; (8000f08 <main+0x250>)
 8000dda:	484c      	ldr	r0, [pc, #304]	; (8000f0c <main+0x254>)
 8000ddc:	f001 fec4 	bl	8002b68 <roll>
				data,
				Mode_dir);

		}

		if (flag_RollTo){
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <main+0x268>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d086      	beq.n	8000cf6 <main+0x3e>

			// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot
			Done = RESET; // Reseteamos la bandera
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <main+0x25c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
			angle_start = parameters_Pos_Robot.grad_global;
 8000dee:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <main+0x24c>)
 8000df0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000df4:	e9c7 2300 	strd	r2, r3, [r7]

			while (!Done){
 8000df8:	e055      	b.n	8000ea6 <main+0x1ee>

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <main+0x24c>)
 8000dfc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e04:	f7ff fa58 	bl	80002b8 <__aeabi_dsub>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff feba 	bl	8000b88 <__aeabi_d2iz>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bfb8      	it	lt
 8000e1a:	425b      	neglt	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fb99 	bl	8000554 <__aeabi_i2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				roll(handler_Motor_Array,
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <main+0x228>)
 8000e2c:	ed93 7b00 	vldr	d7, [r3]
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <main+0x22c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4a2c      	ldr	r2, [pc, #176]	; (8000ee8 <main+0x230>)
 8000e36:	8812      	ldrh	r2, [r2, #0]
 8000e38:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000e3c:	4a2b      	ldr	r2, [pc, #172]	; (8000eec <main+0x234>)
 8000e3e:	9204      	str	r2, [sp, #16]
 8000e40:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <main+0x238>)
 8000e42:	9203      	str	r2, [sp, #12]
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <main+0x23c>)
 8000e46:	9202      	str	r2, [sp, #8]
 8000e48:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <main+0x240>)
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e52:	eef0 0a67 	vmov.f32	s1, s15
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <main+0x248>)
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <main+0x24c>)
 8000e5a:	492b      	ldr	r1, [pc, #172]	; (8000f08 <main+0x250>)
 8000e5c:	482b      	ldr	r0, [pc, #172]	; (8000f0c <main+0x254>)
 8000e5e:	f001 fe83 	bl	8002b68 <roll>
					data,
				    Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <main+0x248>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb74 	bl	8000554 <__aeabi_i2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	2101      	movs	r1, #1
 8000e72:	460c      	mov	r4, r1
 8000e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e78:	f7ff fe48 	bl	8000b0c <__aeabi_dcmplt>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <main+0x1ce>
 8000e82:	2300      	movs	r3, #0
 8000e84:	461c      	mov	r4, r3
 8000e86:	b2e3      	uxtb	r3, r4
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <main+0x1ee>
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <main+0x25c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf0c      	ite	eq
 8000e9a:	2301      	moveq	r3, #1
 8000e9c:	2300      	movne	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <main+0x25c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			while (!Done){
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <main+0x25c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0a5      	beq.n	8000dfa <main+0x142>
			}

			// Paramos el robot
			if (Done){parseCommands("stop");}
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <main+0x25c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <main+0x204>
 8000eb6:	4818      	ldr	r0, [pc, #96]	; (8000f18 <main+0x260>)
 8000eb8:	f000 fa82 	bl	80013c0 <parseCommands>
			angleToGo_Relative = 0; // Reseteamos
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Done = RESET; // Reseteamos la bandera
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <main+0x25c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
		fillComand();
 8000ece:	e712      	b.n	8000cf6 <main+0x3e>
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	20000610 	.word	0x20000610
 8000ed8:	3ddfaebc 	.word	0x3ddfaebc
 8000edc:	20000519 	.word	0x20000519
 8000ee0:	20000600 	.word	0x20000600
 8000ee4:	20000516 	.word	0x20000516
 8000ee8:	20000514 	.word	0x20000514
 8000eec:	20000494 	.word	0x20000494
 8000ef0:	2000051b 	.word	0x2000051b
 8000ef4:	20000518 	.word	0x20000518
 8000ef8:	20000517 	.word	0x20000517
 8000efc:	20000528 	.word	0x20000528
 8000f00:	20000548 	.word	0x20000548
 8000f04:	200005b0 	.word	0x200005b0
 8000f08:	200003b4 	.word	0x200003b4
 8000f0c:	200003c4 	.word	0x200003c4
 8000f10:	2000051a 	.word	0x2000051a
 8000f14:	2000051e 	.word	0x2000051e
 8000f18:	0800c760 	.word	0x0800c760
 8000f1c:	2000051c 	.word	0x2000051c
 8000f20:	2000051d 	.word	0x2000051d

08000f24 <inSystem>:
}




void inSystem (void){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f28:	4baf      	ldr	r3, [pc, #700]	; (80011e8 <inSystem+0x2c4>)
 8000f2a:	4ab0      	ldr	r2, [pc, #704]	; (80011ec <inSystem+0x2c8>)
 8000f2c:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000f2e:	4bae      	ldr	r3, [pc, #696]	; (80011e8 <inSystem+0x2c4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000f34:	4bac      	ldr	r3, [pc, #688]	; (80011e8 <inSystem+0x2c4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f3a:	4bab      	ldr	r3, [pc, #684]	; (80011e8 <inSystem+0x2c4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000f40:	4ba9      	ldr	r3, [pc, #676]	; (80011e8 <inSystem+0x2c4>)
 8000f42:	2205      	movs	r2, #5
 8000f44:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <inSystem+0x2c4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000f4c:	4ba6      	ldr	r3, [pc, #664]	; (80011e8 <inSystem+0x2c4>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000f52:	48a5      	ldr	r0, [pc, #660]	; (80011e8 <inSystem+0x2c4>)
 8000f54:	f003 fbd6 	bl	8004704 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	48a3      	ldr	r0, [pc, #652]	; (80011e8 <inSystem+0x2c4>)
 8000f5c:	f003 fcfc 	bl	8004958 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000f60:	4ba3      	ldr	r3, [pc, #652]	; (80011f0 <inSystem+0x2cc>)
 8000f62:	4aa4      	ldr	r2, [pc, #656]	; (80011f4 <inSystem+0x2d0>)
 8000f64:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000f66:	4ba2      	ldr	r3, [pc, #648]	; (80011f0 <inSystem+0x2cc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000f6c:	4ba0      	ldr	r3, [pc, #640]	; (80011f0 <inSystem+0x2cc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000f72:	4b9f      	ldr	r3, [pc, #636]	; (80011f0 <inSystem+0x2cc>)
 8000f74:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f78:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8000f7a:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <inSystem+0x2cc>)
 8000f7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f80:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000f82:	489b      	ldr	r0, [pc, #620]	; (80011f0 <inSystem+0x2cc>)
 8000f84:	f001 ff8a 	bl	8002e9c <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000f88:	4899      	ldr	r0, [pc, #612]	; (80011f0 <inSystem+0x2cc>)
 8000f8a:	f002 fb4b 	bl	8003624 <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000f8e:	f001 ff69 	bl	8002e64 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000f92:	4b99      	ldr	r3, [pc, #612]	; (80011f8 <inSystem+0x2d4>)
 8000f94:	4a99      	ldr	r2, [pc, #612]	; (80011fc <inSystem+0x2d8>)
 8000f96:	499a      	ldr	r1, [pc, #616]	; (8001200 <inSystem+0x2dc>)
 8000f98:	489a      	ldr	r0, [pc, #616]	; (8001204 <inSystem+0x2e0>)
 8000f9a:	f001 f9f3 	bl	8002384 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000f9e:	4b9a      	ldr	r3, [pc, #616]	; (8001208 <inSystem+0x2e4>)
 8000fa0:	4a92      	ldr	r2, [pc, #584]	; (80011ec <inSystem+0x2c8>)
 8000fa2:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fa4:	4b98      	ldr	r3, [pc, #608]	; (8001208 <inSystem+0x2e4>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000faa:	4b97      	ldr	r3, [pc, #604]	; (8001208 <inSystem+0x2e4>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fb0:	4b95      	ldr	r3, [pc, #596]	; (8001208 <inSystem+0x2e4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000fb6:	4b94      	ldr	r3, [pc, #592]	; (8001208 <inSystem+0x2e4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <inSystem+0x2e4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fc2:	4b91      	ldr	r3, [pc, #580]	; (8001208 <inSystem+0x2e4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000fc8:	488f      	ldr	r0, [pc, #572]	; (8001208 <inSystem+0x2e4>)
 8000fca:	f003 fb9b 	bl	8004704 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000fce:	4b8f      	ldr	r3, [pc, #572]	; (800120c <inSystem+0x2e8>)
 8000fd0:	4a8f      	ldr	r2, [pc, #572]	; (8001210 <inSystem+0x2ec>)
 8000fd2:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000fd4:	4b8d      	ldr	r3, [pc, #564]	; (800120c <inSystem+0x2e8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000fda:	4b8c      	ldr	r3, [pc, #560]	; (800120c <inSystem+0x2e8>)
 8000fdc:	4a8d      	ldr	r2, [pc, #564]	; (8001214 <inSystem+0x2f0>)
 8000fde:	611a      	str	r2, [r3, #16]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000fe0:	4b8a      	ldr	r3, [pc, #552]	; (800120c <inSystem+0x2e8>)
 8000fe2:	2221      	movs	r2, #33	; 0x21
 8000fe4:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000fe6:	4b89      	ldr	r3, [pc, #548]	; (800120c <inSystem+0x2e8>)
 8000fe8:	2264      	movs	r2, #100	; 0x64
 8000fea:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000fec:	4b87      	ldr	r3, [pc, #540]	; (800120c <inSystem+0x2e8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000ff2:	4b86      	ldr	r3, [pc, #536]	; (800120c <inSystem+0x2e8>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000ff8:	4884      	ldr	r0, [pc, #528]	; (800120c <inSystem+0x2e8>)
 8000ffa:	f003 ff47 	bl	8004e8c <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8000ffe:	4883      	ldr	r0, [pc, #524]	; (800120c <inSystem+0x2e8>)
 8001000:	f004 f82e 	bl	8005060 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001004:	4b84      	ldr	r3, [pc, #528]	; (8001218 <inSystem+0x2f4>)
 8001006:	4a79      	ldr	r2, [pc, #484]	; (80011ec <inSystem+0x2c8>)
 8001008:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <inSystem+0x2f4>)
 800100c:	2202      	movs	r2, #2
 800100e:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001010:	4b81      	ldr	r3, [pc, #516]	; (8001218 <inSystem+0x2f4>)
 8001012:	2202      	movs	r2, #2
 8001014:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <inSystem+0x2f4>)
 8001018:	2200      	movs	r2, #0
 800101a:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800101c:	4b7e      	ldr	r3, [pc, #504]	; (8001218 <inSystem+0x2f4>)
 800101e:	2201      	movs	r2, #1
 8001020:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001022:	4b7d      	ldr	r3, [pc, #500]	; (8001218 <inSystem+0x2f4>)
 8001024:	2200      	movs	r2, #0
 8001026:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001028:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <inSystem+0x2f4>)
 800102a:	2202      	movs	r2, #2
 800102c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800102e:	487a      	ldr	r0, [pc, #488]	; (8001218 <inSystem+0x2f4>)
 8001030:	f003 fb68 	bl	8004704 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001034:	4b79      	ldr	r3, [pc, #484]	; (800121c <inSystem+0x2f8>)
 8001036:	4a76      	ldr	r2, [pc, #472]	; (8001210 <inSystem+0x2ec>)
 8001038:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 800103a:	4b78      	ldr	r3, [pc, #480]	; (800121c <inSystem+0x2f8>)
 800103c:	2201      	movs	r2, #1
 800103e:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <inSystem+0x2f8>)
 8001042:	4a74      	ldr	r2, [pc, #464]	; (8001214 <inSystem+0x2f0>)
 8001044:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001046:	4b75      	ldr	r3, [pc, #468]	; (800121c <inSystem+0x2f8>)
 8001048:	2221      	movs	r2, #33	; 0x21
 800104a:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <inSystem+0x2f8>)
 800104e:	2264      	movs	r2, #100	; 0x64
 8001050:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001052:	4b72      	ldr	r3, [pc, #456]	; (800121c <inSystem+0x2f8>)
 8001054:	2201      	movs	r2, #1
 8001056:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001058:	4b70      	ldr	r3, [pc, #448]	; (800121c <inSystem+0x2f8>)
 800105a:	2201      	movs	r2, #1
 800105c:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 800105e:	486f      	ldr	r0, [pc, #444]	; (800121c <inSystem+0x2f8>)
 8001060:	f003 ff14 	bl	8004e8c <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001064:	486d      	ldr	r0, [pc, #436]	; (800121c <inSystem+0x2f8>)
 8001066:	f003 fffb 	bl	8005060 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 800106a:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <inSystem+0x2fc>)
 800106c:	4a6d      	ldr	r2, [pc, #436]	; (8001224 <inSystem+0x300>)
 800106e:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001070:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <inSystem+0x2fc>)
 8001072:	2200      	movs	r2, #0
 8001074:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001076:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <inSystem+0x2fc>)
 8001078:	2201      	movs	r2, #1
 800107a:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800107c:	4b68      	ldr	r3, [pc, #416]	; (8001220 <inSystem+0x2fc>)
 800107e:	220a      	movs	r2, #10
 8001080:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001082:	4b67      	ldr	r3, [pc, #412]	; (8001220 <inSystem+0x2fc>)
 8001084:	2200      	movs	r2, #0
 8001086:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001088:	4b65      	ldr	r3, [pc, #404]	; (8001220 <inSystem+0x2fc>)
 800108a:	2200      	movs	r2, #0
 800108c:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800108e:	4b64      	ldr	r3, [pc, #400]	; (8001220 <inSystem+0x2fc>)
 8001090:	2202      	movs	r2, #2
 8001092:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001094:	4862      	ldr	r0, [pc, #392]	; (8001220 <inSystem+0x2fc>)
 8001096:	f003 fb35 	bl	8004704 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800109a:	2100      	movs	r1, #0
 800109c:	4860      	ldr	r0, [pc, #384]	; (8001220 <inSystem+0x2fc>)
 800109e:	f003 fc86 	bl	80049ae <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010a2:	4b61      	ldr	r3, [pc, #388]	; (8001228 <inSystem+0x304>)
 80010a4:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <inSystem+0x300>)
 80010a6:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010a8:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <inSystem+0x304>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <inSystem+0x304>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010b4:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <inSystem+0x304>)
 80010b6:	220b      	movs	r2, #11
 80010b8:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <inSystem+0x304>)
 80010bc:	2200      	movs	r2, #0
 80010be:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <inSystem+0x304>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <inSystem+0x304>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 80010cc:	4856      	ldr	r0, [pc, #344]	; (8001228 <inSystem+0x304>)
 80010ce:	f003 fb19 	bl	8004704 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80010d2:	2100      	movs	r1, #0
 80010d4:	4854      	ldr	r0, [pc, #336]	; (8001228 <inSystem+0x304>)
 80010d6:	f003 fc6a 	bl	80049ae <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <inSystem+0x308>)
 80010dc:	4a51      	ldr	r2, [pc, #324]	; (8001224 <inSystem+0x300>)
 80010de:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <inSystem+0x308>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <inSystem+0x308>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <inSystem+0x308>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <inSystem+0x308>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010f8:	4b4c      	ldr	r3, [pc, #304]	; (800122c <inSystem+0x308>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <inSystem+0x308>)
 8001100:	2202      	movs	r2, #2
 8001102:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001104:	4849      	ldr	r0, [pc, #292]	; (800122c <inSystem+0x308>)
 8001106:	f003 fafd 	bl	8004704 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800110a:	2100      	movs	r1, #0
 800110c:	4847      	ldr	r0, [pc, #284]	; (800122c <inSystem+0x308>)
 800110e:	f003 fc4e 	bl	80049ae <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <inSystem+0x2e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800111a:	4b45      	ldr	r3, [pc, #276]	; (8001230 <inSystem+0x30c>)
 800111c:	4a45      	ldr	r2, [pc, #276]	; (8001234 <inSystem+0x310>)
 800111e:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001120:	4b43      	ldr	r3, [pc, #268]	; (8001230 <inSystem+0x30c>)
 8001122:	2200      	movs	r2, #0
 8001124:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <inSystem+0x30c>)
 8001128:	2201      	movs	r2, #1
 800112a:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <inSystem+0x30c>)
 800112e:	2202      	movs	r2, #2
 8001130:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <inSystem+0x30c>)
 8001134:	2200      	movs	r2, #0
 8001136:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <inSystem+0x30c>)
 800113a:	2200      	movs	r2, #0
 800113c:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <inSystem+0x30c>)
 8001140:	2202      	movs	r2, #2
 8001142:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001144:	483a      	ldr	r0, [pc, #232]	; (8001230 <inSystem+0x30c>)
 8001146:	f003 fadd 	bl	8004704 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800114a:	2100      	movs	r1, #0
 800114c:	4838      	ldr	r0, [pc, #224]	; (8001230 <inSystem+0x30c>)
 800114e:	f003 fc2e 	bl	80049ae <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <inSystem+0x2e0>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <inSystem+0x314>)
 800115c:	4a31      	ldr	r2, [pc, #196]	; (8001224 <inSystem+0x300>)
 800115e:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <inSystem+0x314>)
 8001162:	2200      	movs	r2, #0
 8001164:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <inSystem+0x314>)
 8001168:	2200      	movs	r2, #0
 800116a:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <inSystem+0x314>)
 800116e:	2201      	movs	r2, #1
 8001170:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001172:	4b31      	ldr	r3, [pc, #196]	; (8001238 <inSystem+0x314>)
 8001174:	2200      	movs	r2, #0
 8001176:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <inSystem+0x314>)
 800117a:	2200      	movs	r2, #0
 800117c:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <inSystem+0x314>)
 8001180:	2202      	movs	r2, #2
 8001182:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <inSystem+0x318>)
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <inSystem+0x314>)
 8001188:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <inSystem+0x318>)
 800118c:	2202      	movs	r2, #2
 800118e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001190:	482a      	ldr	r0, [pc, #168]	; (800123c <inSystem+0x318>)
 8001192:	f002 fa89 	bl	80036a8 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <inSystem+0x31c>)
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <inSystem+0x300>)
 800119a:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <inSystem+0x31c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <inSystem+0x31c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <inSystem+0x31c>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <inSystem+0x31c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <inSystem+0x31c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <inSystem+0x31c>)
 80011bc:	2202      	movs	r2, #2
 80011be:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <inSystem+0x320>)
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <inSystem+0x31c>)
 80011c4:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <inSystem+0x320>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <inSystem+0x320>)
 80011ce:	f002 fa6b 	bl	80036a8 <extInt_Config>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <inSystem+0x324>)
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <inSystem+0x2c8>)
 80011d6:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <inSystem+0x324>)
 80011da:	2207      	movs	r2, #7
 80011dc:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <inSystem+0x324>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	715a      	strb	r2, [r3, #5]
 80011e4:	e032      	b.n	800124c <inSystem+0x328>
 80011e6:	bf00      	nop
 80011e8:	200001fc 	.word	0x200001fc
 80011ec:	40020000 	.word	0x40020000
 80011f0:	200002a8 	.word	0x200002a8
 80011f4:	40000400 	.word	0x40000400
 80011f8:	20000528 	.word	0x20000528
 80011fc:	20000548 	.word	0x20000548
 8001200:	200005b0 	.word	0x200005b0
 8001204:	200003c4 	.word	0x200003c4
 8001208:	20000208 	.word	0x20000208
 800120c:	200002e4 	.word	0x200002e4
 8001210:	40000c00 	.word	0x40000c00
 8001214:	41e00000 	.word	0x41e00000
 8001218:	20000214 	.word	0x20000214
 800121c:	200002fc 	.word	0x200002fc
 8001220:	20000244 	.word	0x20000244
 8001224:	40020800 	.word	0x40020800
 8001228:	20000238 	.word	0x20000238
 800122c:	2000025c 	.word	0x2000025c
 8001230:	20000250 	.word	0x20000250
 8001234:	40020c00 	.word	0x40020c00
 8001238:	20000268 	.word	0x20000268
 800123c:	20000298 	.word	0x20000298
 8001240:	20000274 	.word	0x20000274
 8001244:	200002a0 	.word	0x200002a0
 8001248:	2000022c 	.word	0x2000022c
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <inSystem+0x468>)
 800124e:	2200      	movs	r2, #0
 8001250:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001252:	4b4e      	ldr	r3, [pc, #312]	; (800138c <inSystem+0x468>)
 8001254:	2209      	movs	r2, #9
 8001256:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <inSystem+0x468>)
 800125a:	2200      	movs	r2, #0
 800125c:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <inSystem+0x468>)
 8001260:	2203      	movs	r2, #3
 8001262:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001264:	4849      	ldr	r0, [pc, #292]	; (800138c <inSystem+0x468>)
 8001266:	f003 fa4d 	bl	8004704 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <inSystem+0x46c>)
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <inSystem+0x470>)
 800126e:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <inSystem+0x46c>)
 8001272:	2207      	movs	r2, #7
 8001274:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <inSystem+0x46c>)
 8001278:	2202      	movs	r2, #2
 800127a:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800127c:	4b44      	ldr	r3, [pc, #272]	; (8001390 <inSystem+0x46c>)
 800127e:	2200      	movs	r2, #0
 8001280:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <inSystem+0x46c>)
 8001284:	220a      	movs	r2, #10
 8001286:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <inSystem+0x46c>)
 800128a:	2200      	movs	r2, #0
 800128c:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <inSystem+0x46c>)
 8001290:	2203      	movs	r2, #3
 8001292:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001294:	483e      	ldr	r0, [pc, #248]	; (8001390 <inSystem+0x46c>)
 8001296:	f003 fa35 	bl	8004704 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <inSystem+0x474>)
 800129c:	4a3f      	ldr	r2, [pc, #252]	; (800139c <inSystem+0x478>)
 800129e:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 80012a0:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <inSystem+0x474>)
 80012a2:	4a3f      	ldr	r2, [pc, #252]	; (80013a0 <inSystem+0x47c>)
 80012a4:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <inSystem+0x474>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <inSystem+0x474>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <inSystem+0x474>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <inSystem+0x474>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <inSystem+0x474>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <inSystem+0x474>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <inSystem+0x474>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80012d0:	4831      	ldr	r0, [pc, #196]	; (8001398 <inSystem+0x474>)
 80012d2:	f004 fe2b 	bl	8005f2c <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <inSystem+0x480>)
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012dc:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <inSystem+0x480>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <inSystem+0x480>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <inSystem+0x480>)
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <inSystem+0x480>)
 80012f4:	2210      	movs	r2, #16
 80012f6:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <inSystem+0x480>)
 80012fa:	f001 fdcf 	bl	8002e9c <BasicTimer_Config>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <inSystem+0x484>)
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <inSystem+0x488>)
 8001302:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <inSystem+0x484>)
 8001306:	2204      	movs	r2, #4
 8001308:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <inSystem+0x484>)
 800130c:	2202      	movs	r2, #2
 800130e:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <inSystem+0x484>)
 8001312:	2208      	movs	r2, #8
 8001314:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <inSystem+0x484>)
 8001318:	2201      	movs	r2, #1
 800131a:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <inSystem+0x484>)
 800131e:	2200      	movs	r2, #0
 8001320:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <inSystem+0x484>)
 8001324:	2202      	movs	r2, #2
 8001326:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <inSystem+0x48c>)
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <inSystem+0x488>)
 800132c:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <inSystem+0x48c>)
 8001330:	2204      	movs	r2, #4
 8001332:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <inSystem+0x48c>)
 8001336:	2202      	movs	r2, #2
 8001338:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <inSystem+0x48c>)
 800133c:	2209      	movs	r2, #9
 800133e:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <inSystem+0x48c>)
 8001342:	2201      	movs	r2, #1
 8001344:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <inSystem+0x48c>)
 8001348:	2200      	movs	r2, #0
 800134a:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <inSystem+0x48c>)
 800134e:	2202      	movs	r2, #2
 8001350:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <inSystem+0x490>)
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <inSystem+0x494>)
 8001356:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <inSystem+0x490>)
 800135a:	2232      	movs	r2, #50	; 0x32
 800135c:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <inSystem+0x490>)
 8001360:	2268      	movs	r2, #104	; 0x68
 8001362:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <inSystem+0x490>)
 8001366:	2201      	movs	r2, #1
 8001368:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <inSystem+0x498>)
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <inSystem+0x484>)
 800136e:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <inSystem+0x498>)
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <inSystem+0x48c>)
 8001374:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <inSystem+0x498>)
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <inSystem+0x490>)
 800137a:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <inSystem+0x498>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <inSystem+0x498>)
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
//	configMPUAccel(&handler_MPUAccel_6050);

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000022c 	.word	0x2000022c
 8001390:	20000220 	.word	0x20000220
 8001394:	40020000 	.word	0x40020000
 8001398:	20000314 	.word	0x20000314
 800139c:	40011000 	.word	0x40011000
 80013a0:	05f5e100 	.word	0x05f5e100
 80013a4:	200002bc 	.word	0x200002bc
 80013a8:	20000280 	.word	0x20000280
 80013ac:	40020400 	.word	0x40020400
 80013b0:	2000028c 	.word	0x2000028c
 80013b4:	200003a8 	.word	0x200003a8
 80013b8:	40005400 	.word	0x40005400
 80013bc:	200003b4 	.word	0x200003b4

080013c0 <parseCommands>:


void parseCommands(char *stringVector){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 80013c8:	4b93      	ldr	r3, [pc, #588]	; (8001618 <parseCommands+0x258>)
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b93      	ldr	r3, [pc, #588]	; (800161c <parseCommands+0x25c>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	4b93      	ldr	r3, [pc, #588]	; (8001620 <parseCommands+0x260>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4b93      	ldr	r3, [pc, #588]	; (8001624 <parseCommands+0x264>)
 80013d6:	4a94      	ldr	r2, [pc, #592]	; (8001628 <parseCommands+0x268>)
 80013d8:	4994      	ldr	r1, [pc, #592]	; (800162c <parseCommands+0x26c>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f006 f978 	bl	80076d0 <siscanf>


	if (strcmp(cmd, "help") == 0){
 80013e0:	4993      	ldr	r1, [pc, #588]	; (8001630 <parseCommands+0x270>)
 80013e2:	4891      	ldr	r0, [pc, #580]	; (8001628 <parseCommands+0x268>)
 80013e4:	f7fe fefc 	bl	80001e0 <strcmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d120      	bne.n	8001430 <parseCommands+0x70>

		writeMsg(&handlerUSART, "HELP MENU CMD : \n");
 80013ee:	4991      	ldr	r1, [pc, #580]	; (8001634 <parseCommands+0x274>)
 80013f0:	4891      	ldr	r0, [pc, #580]	; (8001638 <parseCommands+0x278>)
 80013f2:	f005 f987 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "1)  go #dir 1--> Ahead , 0-->back Ward\n");
 80013f6:	4991      	ldr	r1, [pc, #580]	; (800163c <parseCommands+0x27c>)
 80013f8:	488f      	ldr	r0, [pc, #572]	; (8001638 <parseCommands+0x278>)
 80013fa:	f005 f983 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "2)  goto #dir #Distance \n");
 80013fe:	4990      	ldr	r1, [pc, #576]	; (8001640 <parseCommands+0x280>)
 8001400:	488d      	ldr	r0, [pc, #564]	; (8001638 <parseCommands+0x278>)
 8001402:	f005 f97f 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "3)  roll #dir_roll 1--> CW , 0-->CCW \n");
 8001406:	498f      	ldr	r1, [pc, #572]	; (8001644 <parseCommands+0x284>)
 8001408:	488b      	ldr	r0, [pc, #556]	; (8001638 <parseCommands+0x278>)
 800140a:	f005 f97b 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "4)  rollto #dir_roll #angle  \n");
 800140e:	498e      	ldr	r1, [pc, #568]	; (8001648 <parseCommands+0x288>)
 8001410:	4889      	ldr	r0, [pc, #548]	; (8001638 <parseCommands+0x278>)
 8001412:	f005 f977 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "5)  change #dir #operation 1--->Line , 0--->Roll \n");
 8001416:	498d      	ldr	r1, [pc, #564]	; (800164c <parseCommands+0x28c>)
 8001418:	4887      	ldr	r0, [pc, #540]	; (8001638 <parseCommands+0x278>)
 800141a:	f005 f973 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, "6)  reinit  \n");
 800141e:	498c      	ldr	r1, [pc, #560]	; (8001650 <parseCommands+0x290>)
 8001420:	4885      	ldr	r0, [pc, #532]	; (8001638 <parseCommands+0x278>)
 8001422:	f005 f96f 	bl	8006704 <writeMsg>
		writeMsg(&handlerUSART, " \n");
 8001426:	498b      	ldr	r1, [pc, #556]	; (8001654 <parseCommands+0x294>)
 8001428:	4883      	ldr	r0, [pc, #524]	; (8001638 <parseCommands+0x278>)
 800142a:	f005 f96b 	bl	8006704 <writeMsg>
	else {
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
	}


}
 800142e:	e0ee      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "go") == 0){
 8001430:	4989      	ldr	r1, [pc, #548]	; (8001658 <parseCommands+0x298>)
 8001432:	487d      	ldr	r0, [pc, #500]	; (8001628 <parseCommands+0x268>)
 8001434:	f7fe fed4 	bl	80001e0 <strcmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d11b      	bne.n	8001476 <parseCommands+0xb6>
		Mode_dir.Mode = Mode = sLine;
 800143e:	4b87      	ldr	r3, [pc, #540]	; (800165c <parseCommands+0x29c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	4b85      	ldr	r3, [pc, #532]	; (800165c <parseCommands+0x29c>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b85      	ldr	r3, [pc, #532]	; (8001660 <parseCommands+0x2a0>)
 800144a:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 800144c:	4b75      	ldr	r3, [pc, #468]	; (8001624 <parseCommands+0x264>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b83      	ldr	r3, [pc, #524]	; (8001660 <parseCommands+0x2a0>)
 8001454:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <parseCommands+0x2a0>)
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	4882      	ldr	r0, [pc, #520]	; (8001664 <parseCommands+0x2a4>)
 800145c:	f000 fdac 	bl	8001fb8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001460:	4881      	ldr	r0, [pc, #516]	; (8001668 <parseCommands+0x2a8>)
 8001462:	f002 f8df 	bl	8003624 <startTimer>
		flag_Go_Straigh = SET;
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <parseCommands+0x2ac>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO go EJECUTADO____\n\r");
 800146c:	4980      	ldr	r1, [pc, #512]	; (8001670 <parseCommands+0x2b0>)
 800146e:	4872      	ldr	r0, [pc, #456]	; (8001638 <parseCommands+0x278>)
 8001470:	f005 f948 	bl	8006704 <writeMsg>
}
 8001474:	e0cb      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "goto") == 0){
 8001476:	497f      	ldr	r1, [pc, #508]	; (8001674 <parseCommands+0x2b4>)
 8001478:	486b      	ldr	r0, [pc, #428]	; (8001628 <parseCommands+0x268>)
 800147a:	f7fe feb1 	bl	80001e0 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d120      	bne.n	80014c6 <parseCommands+0x106>
		Mode_dir.Mode = Mode = sLine ;
 8001484:	4b75      	ldr	r3, [pc, #468]	; (800165c <parseCommands+0x29c>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <parseCommands+0x29c>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <parseCommands+0x2a0>)
 8001490:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <parseCommands+0x264>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b71      	ldr	r3, [pc, #452]	; (8001660 <parseCommands+0x2a0>)
 800149a:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800149c:	4b70      	ldr	r3, [pc, #448]	; (8001660 <parseCommands+0x2a0>)
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	4870      	ldr	r0, [pc, #448]	; (8001664 <parseCommands+0x2a4>)
 80014a2:	f000 fd89 	bl	8001fb8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80014a6:	4870      	ldr	r0, [pc, #448]	; (8001668 <parseCommands+0x2a8>)
 80014a8:	f002 f8bc 	bl	8003624 <startTimer>
		parameters_Path_Robot.line_Distance = secondParameter; // almacenamos la distancia en milimrtros a recorrer
 80014ac:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <parseCommands+0x260>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b71      	ldr	r3, [pc, #452]	; (8001678 <parseCommands+0x2b8>)
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
		flag_GoTo_Straigh = SET;
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <parseCommands+0x2bc>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO goto EJECUTADO____\n\r");
 80014bc:	4970      	ldr	r1, [pc, #448]	; (8001680 <parseCommands+0x2c0>)
 80014be:	485e      	ldr	r0, [pc, #376]	; (8001638 <parseCommands+0x278>)
 80014c0:	f005 f920 	bl	8006704 <writeMsg>
}
 80014c4:	e0a3      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "roll") == 0){
 80014c6:	496f      	ldr	r1, [pc, #444]	; (8001684 <parseCommands+0x2c4>)
 80014c8:	4857      	ldr	r0, [pc, #348]	; (8001628 <parseCommands+0x268>)
 80014ca:	f7fe fe89 	bl	80001e0 <strcmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d11b      	bne.n	800150c <parseCommands+0x14c>
		Mode_dir.Mode = Mode = sRoll;
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <parseCommands+0x29c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	4b60      	ldr	r3, [pc, #384]	; (800165c <parseCommands+0x29c>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <parseCommands+0x2a0>)
 80014e0:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <parseCommands+0x264>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <parseCommands+0x2a0>)
 80014ea:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80014ec:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <parseCommands+0x2a0>)
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	485c      	ldr	r0, [pc, #368]	; (8001664 <parseCommands+0x2a4>)
 80014f2:	f000 fd61 	bl	8001fb8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80014f6:	485c      	ldr	r0, [pc, #368]	; (8001668 <parseCommands+0x2a8>)
 80014f8:	f002 f894 	bl	8003624 <startTimer>
		flag_Roll = SET;
 80014fc:	4b62      	ldr	r3, [pc, #392]	; (8001688 <parseCommands+0x2c8>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO roll EJECUTADO____\n\r");
 8001502:	4962      	ldr	r1, [pc, #392]	; (800168c <parseCommands+0x2cc>)
 8001504:	484c      	ldr	r0, [pc, #304]	; (8001638 <parseCommands+0x278>)
 8001506:	f005 f8fd 	bl	8006704 <writeMsg>
}
 800150a:	e080      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "rollto") == 0){
 800150c:	4960      	ldr	r1, [pc, #384]	; (8001690 <parseCommands+0x2d0>)
 800150e:	4846      	ldr	r0, [pc, #280]	; (8001628 <parseCommands+0x268>)
 8001510:	f7fe fe66 	bl	80001e0 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d120      	bne.n	800155c <parseCommands+0x19c>
		Mode_dir.Mode = Mode = sRoll;
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <parseCommands+0x29c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	4b4e      	ldr	r3, [pc, #312]	; (800165c <parseCommands+0x29c>)
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <parseCommands+0x2a0>)
 8001526:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = firstParameter;
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <parseCommands+0x264>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <parseCommands+0x2a0>)
 8001530:	705a      	strb	r2, [r3, #1]
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001532:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <parseCommands+0x2a0>)
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	484b      	ldr	r0, [pc, #300]	; (8001664 <parseCommands+0x2a4>)
 8001538:	f000 fd3e 	bl	8001fb8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800153c:	484a      	ldr	r0, [pc, #296]	; (8001668 <parseCommands+0x2a8>)
 800153e:	f002 f871 	bl	8003624 <startTimer>
		parameters_Path_Robot.angle = secondParameter;
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <parseCommands+0x260>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <parseCommands+0x2b8>)
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
		flag_RollTo = SET;
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <parseCommands+0x2d4>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		writeMsg(&handlerUSART, "\n____COMANDO rollto EJECUTADO____\n\r");
 8001552:	4951      	ldr	r1, [pc, #324]	; (8001698 <parseCommands+0x2d8>)
 8001554:	4838      	ldr	r0, [pc, #224]	; (8001638 <parseCommands+0x278>)
 8001556:	f005 f8d5 	bl	8006704 <writeMsg>
}
 800155a:	e058      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "reinit") == 0){
 800155c:	494f      	ldr	r1, [pc, #316]	; (800169c <parseCommands+0x2dc>)
 800155e:	4832      	ldr	r0, [pc, #200]	; (8001628 <parseCommands+0x268>)
 8001560:	f7fe fe3e 	bl	80001e0 <strcmp>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <parseCommands+0x1c0>
		int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <parseCommands+0x2e0>)
 800156c:	4a42      	ldr	r2, [pc, #264]	; (8001678 <parseCommands+0x2b8>)
 800156e:	494d      	ldr	r1, [pc, #308]	; (80016a4 <parseCommands+0x2e4>)
 8001570:	483c      	ldr	r0, [pc, #240]	; (8001664 <parseCommands+0x2a4>)
 8001572:	f000 ff07 	bl	8002384 <int_Config_Motor>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 8001576:	494c      	ldr	r1, [pc, #304]	; (80016a8 <parseCommands+0x2e8>)
 8001578:	482f      	ldr	r0, [pc, #188]	; (8001638 <parseCommands+0x278>)
 800157a:	f005 f8c3 	bl	8006704 <writeMsg>
}
 800157e:	e046      	b.n	800160e <parseCommands+0x24e>
	}else if (strcmp(cmd, "change") == 0){
 8001580:	494a      	ldr	r1, [pc, #296]	; (80016ac <parseCommands+0x2ec>)
 8001582:	4829      	ldr	r0, [pc, #164]	; (8001628 <parseCommands+0x268>)
 8001584:	f7fe fe2c 	bl	80001e0 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d121      	bne.n	80015d2 <parseCommands+0x212>
		if (Mode == sLine ){
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <parseCommands+0x29c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <parseCommands+0x1ec>
			Mode_dir.direction_s_r = firstParameter;
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <parseCommands+0x264>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <parseCommands+0x2a0>)
 800159e:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <parseCommands+0x2a0>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <parseCommands+0x2a4>)
 80015a6:	f000 fdf2 	bl	800218e <change_dir_straigh_Roll>
 80015aa:	e00d      	b.n	80015c8 <parseCommands+0x208>
		}else if (Mode == sRoll ){
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <parseCommands+0x29c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d109      	bne.n	80015c8 <parseCommands+0x208>
			Mode_dir.direction_s_r = firstParameter;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <parseCommands+0x264>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <parseCommands+0x2a0>)
 80015bc:	705a      	strb	r2, [r3, #1]
			change_dir_straigh_Roll(handler_Motor_Array, Mode_dir);
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <parseCommands+0x2a0>)
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	4828      	ldr	r0, [pc, #160]	; (8001664 <parseCommands+0x2a4>)
 80015c4:	f000 fde3 	bl	800218e <change_dir_straigh_Roll>
		writeMsg(&handlerUSART, "\n____COMANDO reinit EJECUTADO____\n\r");
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <parseCommands+0x2e8>)
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <parseCommands+0x278>)
 80015cc:	f005 f89a 	bl	8006704 <writeMsg>
}
 80015d0:	e01d      	b.n	800160e <parseCommands+0x24e>
	else if (strcmp(cmd, "stop") == 0){
 80015d2:	4937      	ldr	r1, [pc, #220]	; (80016b0 <parseCommands+0x2f0>)
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <parseCommands+0x268>)
 80015d6:	f7fe fe03 	bl	80001e0 <strcmp>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d112      	bne.n	8001606 <parseCommands+0x246>
		stop(handler_Motor_Array); // Apagamos los motores
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <parseCommands+0x2a4>)
 80015e2:	f000 feab 	bl	800233c <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <parseCommands+0x2a8>)
 80015e8:	f002 f82e 	bl	8003648 <stopTimer>
		flag_Go_Straigh   = RESET;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <parseCommands+0x2ac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <parseCommands+0x2bc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <parseCommands+0x2c8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <parseCommands+0x2d4>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
}
 8001604:	e003      	b.n	800160e <parseCommands+0x24e>
		writeMsg(&handlerUSART, "Comando Incorrecto :c \n");
 8001606:	492b      	ldr	r1, [pc, #172]	; (80016b4 <parseCommands+0x2f4>)
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <parseCommands+0x278>)
 800160a:	f005 f87b 	bl	8006704 <writeMsg>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200004d4 	.word	0x200004d4
 800161c:	20000490 	.word	0x20000490
 8001620:	2000048c 	.word	0x2000048c
 8001624:	20000488 	.word	0x20000488
 8001628:	20000468 	.word	0x20000468
 800162c:	0800c768 	.word	0x0800c768
 8001630:	0800c778 	.word	0x0800c778
 8001634:	0800c780 	.word	0x0800c780
 8001638:	20000314 	.word	0x20000314
 800163c:	0800c794 	.word	0x0800c794
 8001640:	0800c7bc 	.word	0x0800c7bc
 8001644:	0800c7d8 	.word	0x0800c7d8
 8001648:	0800c800 	.word	0x0800c800
 800164c:	0800c820 	.word	0x0800c820
 8001650:	0800c854 	.word	0x0800c854
 8001654:	0800c864 	.word	0x0800c864
 8001658:	0800c868 	.word	0x0800c868
 800165c:	20000516 	.word	0x20000516
 8001660:	20000514 	.word	0x20000514
 8001664:	200003c4 	.word	0x200003c4
 8001668:	200002bc 	.word	0x200002bc
 800166c:	20000519 	.word	0x20000519
 8001670:	0800c86c 	.word	0x0800c86c
 8001674:	0800c88c 	.word	0x0800c88c
 8001678:	20000548 	.word	0x20000548
 800167c:	2000051a 	.word	0x2000051a
 8001680:	0800c894 	.word	0x0800c894
 8001684:	0800c8b8 	.word	0x0800c8b8
 8001688:	2000051c 	.word	0x2000051c
 800168c:	0800c8c0 	.word	0x0800c8c0
 8001690:	0800c8e4 	.word	0x0800c8e4
 8001694:	2000051d 	.word	0x2000051d
 8001698:	0800c8ec 	.word	0x0800c8ec
 800169c:	0800c910 	.word	0x0800c910
 80016a0:	20000528 	.word	0x20000528
 80016a4:	200005b0 	.word	0x200005b0
 80016a8:	0800c918 	.word	0x0800c918
 80016ac:	0800c93c 	.word	0x0800c93c
 80016b0:	0800c760 	.word	0x0800c760
 80016b4:	0800c944 	.word	0x0800c944

080016b8 <usart1Rx_Callback>:


// Interrupcion usart 1
void usart1Rx_Callback(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80016bc:	f005 f84a 	bl	8006754 <getRxData>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <usart1Rx_Callback+0x14>)
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000466 	.word	0x20000466

080016d0 <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <BasicTimer3_Callback+0x10>)
 80016d6:	f003 f9b6 	bl	8004a46 <GPIOxTooglePin>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001fc 	.word	0x200001fc

080016e4 <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <BasicTimer2_Callback+0x38>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <BasicTimer2_Callback+0x3c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <BasicTimer2_Callback+0x40>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d803      	bhi.n	8001704 <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <BasicTimer2_Callback+0x44>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	}else{ counting_action++; }

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001702:	e005      	b.n	8001710 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <BasicTimer2_Callback+0x40>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <BasicTimer2_Callback+0x40>)
 800170e:	801a      	strh	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000517 	.word	0x20000517
 8001720:	20000000 	.word	0x20000000
 8001724:	20000522 	.word	0x20000522
 8001728:	20000518 	.word	0x20000518

0800172c <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <callback_extInt1+0x1c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	791a      	ldrb	r2, [r3, #4]
 8001736:	3201      	adds	r2, #1
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	711a      	strb	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200003c4 	.word	0x200003c4

0800174c <callback_extInt3>:

void callback_extInt3(void){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <callback_extInt3+0x1c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	791a      	ldrb	r2, [r3, #4]
 8001756:	3201      	adds	r2, #1
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	711a      	strb	r2, [r3, #4]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200003c4 	.word	0x200003c4

0800176c <getAngle>:

	return promedio;
}


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6178      	str	r0, [r7, #20]
 8001774:	ed87 0a04 	vstr	s0, [r7, #16]
 8001778:	ed87 1b02 	vstr	d1, [r7, #8]
 800177c:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f003 f9ce 	bl	8004b20 <readGyro_Z>
 8001784:	ee10 3a10 	vmov	r3, s0
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fef5 	bl	8000578 <__aeabi_f2d>
 800178e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001792:	f7fe fd91 	bl	80002b8 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fa3b 	bl	8000c18 <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80017a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017aa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80017ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001818 <getAngle+0xac>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 80017c6:	69b8      	ldr	r0, [r7, #24]
 80017c8:	f7fe fed6 	bl	8000578 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <getAngle+0xb0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fecc 	bl	8000578 <__aeabi_f2d>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe fd69 	bl	80002bc <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff fa11 	bl	8000c18 <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <getAngle+0xb0>)
 80017fa:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <getAngle+0xb4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <getAngle+0xb8>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <getAngle+0xb8>)
 800180c:	801a      	strh	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	447a0000 	.word	0x447a0000
 800181c:	20000608 	.word	0x20000608
 8001820:	200002bc 	.word	0x200002bc
 8001824:	20000520 	.word	0x20000520

08001828 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_t operation_mode){
 8001828:	b580      	push	{r7, lr}
 800182a:	ed2d 8b02 	vpush	{d8}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	71fb      	strb	r3, [r7, #7]

	//Verificamos el modo
	if(operation_mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 81d5 	bne.w	8001bec <get_measuremets_parameters+0x3c4>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001842:	4bab      	ldr	r3, [pc, #684]	; (8001af0 <get_measuremets_parameters+0x2c8>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4baa      	ldr	r3, [pc, #680]	; (8001af4 <get_measuremets_parameters+0x2cc>)
 800184a:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 800184c:	4baa      	ldr	r3, [pc, #680]	; (8001af8 <get_measuremets_parameters+0x2d0>)
 800184e:	edd3 6a00 	vldr	s13, [r3]
 8001852:	4baa      	ldr	r3, [pc, #680]	; (8001afc <get_measuremets_parameters+0x2d4>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	4ba7      	ldr	r3, [pc, #668]	; (8001b00 <get_measuremets_parameters+0x2d8>)
 8001864:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001868:	4ba5      	ldr	r3, [pc, #660]	; (8001b00 <get_measuremets_parameters+0x2d8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe83 	bl	8000578 <__aeabi_f2d>
 8001872:	a39b      	add	r3, pc, #620	; (adr r3, 8001ae0 <get_measuremets_parameters+0x2b8>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fed6 	bl	8000628 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b9e      	ldr	r3, [pc, #632]	; (8001b04 <get_measuremets_parameters+0x2dc>)
 800188a:	f7fe fff7 	bl	800087c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001898:	4b97      	ldr	r3, [pc, #604]	; (8001af8 <get_measuremets_parameters+0x2d0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe6b 	bl	8000578 <__aeabi_f2d>
 80018a2:	a38f      	add	r3, pc, #572	; (adr r3, 8001ae0 <get_measuremets_parameters+0x2b8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe febe 	bl	8000628 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <get_measuremets_parameters+0x2dc>)
 80018ba:	f7fe ffdf 	bl	800087c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b17 	vmov	d7, r2, r3
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	f008 fdb7 	bl	800a440 <sin>
 80018d2:	eeb0 8a40 	vmov.f32	s16, s0
 80018d6:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80018da:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <get_measuremets_parameters+0x2d0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe4a 	bl	8000578 <__aeabi_f2d>
 80018e4:	a37e      	add	r3, pc, #504	; (adr r3, 8001ae0 <get_measuremets_parameters+0x2b8>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe9d 	bl	8000628 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <get_measuremets_parameters+0x2dc>)
 80018fc:	f7fe ffbe 	bl	800087c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b17 	vmov	d7, r2, r3
 8001908:	eeb0 0a47 	vmov.f32	s0, s14
 800190c:	eef0 0a67 	vmov.f32	s1, s15
 8001910:	f008 fcfa 	bl	800a308 <cos>
 8001914:	eeb0 7a40 	vmov.f32	s14, s0
 8001918:	eef0 7a60 	vmov.f32	s15, s1
 800191c:	eeb0 1a47 	vmov.f32	s2, s14
 8001920:	eef0 1a67 	vmov.f32	s3, s15
 8001924:	eeb0 0a48 	vmov.f32	s0, s16
 8001928:	eef0 0a68 	vmov.f32	s1, s17
 800192c:	f008 fde0 	bl	800a4f0 <atan2>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001934:	a36c      	add	r3, pc, #432	; (adr r3, 8001ae8 <get_measuremets_parameters+0x2c0>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe75 	bl	8000628 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800194c:	f7fe fcb6 	bl	80002bc <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001960:	a35f      	add	r3, pc, #380	; (adr r3, 8001ae0 <get_measuremets_parameters+0x2b8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe5f 	bl	8000628 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <get_measuremets_parameters+0x2dc>)
 8001978:	f7fe ff80 	bl	800087c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ec43 2b17 	vmov	d7, r2, r3
 8001984:	eeb0 0a47 	vmov.f32	s0, s14
 8001988:	eef0 0a67 	vmov.f32	s1, s15
 800198c:	f008 fd58 	bl	800a440 <sin>
 8001990:	eeb0 8a40 	vmov.f32	s16, s0
 8001994:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800199e:	a350      	add	r3, pc, #320	; (adr r3, 8001ae0 <get_measuremets_parameters+0x2b8>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fe40 	bl	8000628 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <get_measuremets_parameters+0x2dc>)
 80019b6:	f7fe ff61 	bl	800087c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ec43 2b17 	vmov	d7, r2, r3
 80019c2:	eeb0 0a47 	vmov.f32	s0, s14
 80019c6:	eef0 0a67 	vmov.f32	s1, s15
 80019ca:	f008 fc9d 	bl	800a308 <cos>
 80019ce:	eeb0 7a40 	vmov.f32	s14, s0
 80019d2:	eef0 7a60 	vmov.f32	s15, s1
 80019d6:	eeb0 1a47 	vmov.f32	s2, s14
 80019da:	eef0 1a67 	vmov.f32	s3, s15
 80019de:	eeb0 0a48 	vmov.f32	s0, s16
 80019e2:	eef0 0a68 	vmov.f32	s1, s17
 80019e6:	f008 fd83 	bl	800a4f0 <atan2>
 80019ea:	eeb0 7a40 	vmov.f32	s14, s0
 80019ee:	eef0 7a60 	vmov.f32	s15, s1
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80019fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001a02:	eef0 0a67 	vmov.f32	s1, s15
 8001a06:	f008 fd1b 	bl	800a440 <sin>
 8001a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8001a0e:	eef0 8a60 	vmov.f32	s17, s1
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a18:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1c:	eef0 0a67 	vmov.f32	s1, s15
 8001a20:	f008 fc72 	bl	800a308 <cos>
 8001a24:	eeb0 7a40 	vmov.f32	s14, s0
 8001a28:	eef0 7a60 	vmov.f32	s15, s1
 8001a2c:	eeb0 1a47 	vmov.f32	s2, s14
 8001a30:	eef0 1a67 	vmov.f32	s3, s15
 8001a34:	eeb0 0a48 	vmov.f32	s0, s16
 8001a38:	eef0 0a68 	vmov.f32	s1, s17
 8001a3c:	f008 fd58 	bl	800a4f0 <atan2>
 8001a40:	eeb0 7a40 	vmov.f32	s14, s0
 8001a44:	eef0 7a60 	vmov.f32	s15, s1
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (Mode_dir.direction_s_r == SET){
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <get_measuremets_parameters+0x2e0>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d15e      	bne.n	8001b14 <get_measuremets_parameters+0x2ec>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <get_measuremets_parameters+0x2e4>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a72:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <get_measuremets_parameters+0x2e8>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <get_measuremets_parameters+0x2cc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab6:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <get_measuremets_parameters+0x2cc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ada:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ade:	e065      	b.n	8001bac <get_measuremets_parameters+0x384>
 8001ae0:	54442d18 	.word	0x54442d18
 8001ae4:	400921fb 	.word	0x400921fb
 8001ae8:	1a63c1f8 	.word	0x1a63c1f8
 8001aec:	404ca5dc 	.word	0x404ca5dc
 8001af0:	20000520 	.word	0x20000520
 8001af4:	20000524 	.word	0x20000524
 8001af8:	20000608 	.word	0x20000608
 8001afc:	20000522 	.word	0x20000522
 8001b00:	2000060c 	.word	0x2000060c
 8001b04:	40668000 	.word	0x40668000
 8001b08:	20000514 	.word	0x20000514
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	20000008 	.word	0x20000008

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <get_measuremets_parameters+0x3ac>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	eef1 7a67 	vneg.f32	s15, s15
 8001b34:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <get_measuremets_parameters+0x3b0>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	eef1 7a67 	vneg.f32	s15, s15
 8001b5c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b68:	eef1 6a67 	vneg.f32	s13, s15
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <get_measuremets_parameters+0x3b4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b8e:	eef1 6a67 	vneg.f32	s13, s15
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <get_measuremets_parameters+0x3b4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba8:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <get_measuremets_parameters+0x3b8>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <get_measuremets_parameters+0x3bc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <get_measuremets_parameters+0x3c0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001bd2:	e1de      	b.n	8001f92 <get_measuremets_parameters+0x76a>
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000524 	.word	0x20000524
 8001be0:	20000608 	.word	0x20000608
 8001be4:	20000520 	.word	0x20000520
 8001be8:	20000522 	.word	0x20000522
	else if(Mode == sRoll)
 8001bec:	4bb0      	ldr	r3, [pc, #704]	; (8001eb0 <get_measuremets_parameters+0x688>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	f040 81cd 	bne.w	8001f90 <get_measuremets_parameters+0x768>
			time_accion = time_accumulated;
 8001bf6:	4baf      	ldr	r3, [pc, #700]	; (8001eb4 <get_measuremets_parameters+0x68c>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4bae      	ldr	r3, [pc, #696]	; (8001eb8 <get_measuremets_parameters+0x690>)
 8001bfe:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8001c00:	4bae      	ldr	r3, [pc, #696]	; (8001ebc <get_measuremets_parameters+0x694>)
 8001c02:	edd3 6a00 	vldr	s13, [r3]
 8001c06:	4bae      	ldr	r3, [pc, #696]	; (8001ec0 <get_measuremets_parameters+0x698>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	4bab      	ldr	r3, [pc, #684]	; (8001ec4 <get_measuremets_parameters+0x69c>)
 8001c18:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001c1c:	4ba9      	ldr	r3, [pc, #676]	; (8001ec4 <get_measuremets_parameters+0x69c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fca9 	bl	8000578 <__aeabi_f2d>
 8001c26:	a39e      	add	r3, pc, #632	; (adr r3, 8001ea0 <get_measuremets_parameters+0x678>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fcfc 	bl	8000628 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4ba2      	ldr	r3, [pc, #648]	; (8001ec8 <get_measuremets_parameters+0x6a0>)
 8001c3e:	f7fe fe1d 	bl	800087c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001c4c:	4b9b      	ldr	r3, [pc, #620]	; (8001ebc <get_measuremets_parameters+0x694>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc91 	bl	8000578 <__aeabi_f2d>
 8001c56:	a392      	add	r3, pc, #584	; (adr r3, 8001ea0 <get_measuremets_parameters+0x678>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fce4 	bl	8000628 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b96      	ldr	r3, [pc, #600]	; (8001ec8 <get_measuremets_parameters+0x6a0>)
 8001c6e:	f7fe fe05 	bl	800087c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	ec43 2b17 	vmov	d7, r2, r3
 8001c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7e:	eef0 0a67 	vmov.f32	s1, s15
 8001c82:	f008 fbdd 	bl	800a440 <sin>
 8001c86:	eeb0 8a40 	vmov.f32	s16, s0
 8001c8a:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <get_measuremets_parameters+0x694>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc70 	bl	8000578 <__aeabi_f2d>
 8001c98:	a381      	add	r3, pc, #516	; (adr r3, 8001ea0 <get_measuremets_parameters+0x678>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fcc3 	bl	8000628 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <get_measuremets_parameters+0x6a0>)
 8001cb0:	f7fe fde4 	bl	800087c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	ec43 2b17 	vmov	d7, r2, r3
 8001cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc0:	eef0 0a67 	vmov.f32	s1, s15
 8001cc4:	f008 fb20 	bl	800a308 <cos>
 8001cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ccc:	eef0 7a60 	vmov.f32	s15, s1
 8001cd0:	eeb0 1a47 	vmov.f32	s2, s14
 8001cd4:	eef0 1a67 	vmov.f32	s3, s15
 8001cd8:	eeb0 0a48 	vmov.f32	s0, s16
 8001cdc:	eef0 0a68 	vmov.f32	s1, s17
 8001ce0:	f008 fc06 	bl	800a4f0 <atan2>
 8001ce4:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ce8:	a36f      	add	r3, pc, #444	; (adr r3, 8001ea8 <get_measuremets_parameters+0x680>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc9b 	bl	8000628 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d00:	f7fe fadc 	bl	80002bc <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d14:	a362      	add	r3, pc, #392	; (adr r3, 8001ea0 <get_measuremets_parameters+0x678>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc85 	bl	8000628 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <get_measuremets_parameters+0x6a0>)
 8001d2c:	f7fe fda6 	bl	800087c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	ec43 2b17 	vmov	d7, r2, r3
 8001d38:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3c:	eef0 0a67 	vmov.f32	s1, s15
 8001d40:	f008 fb7e 	bl	800a440 <sin>
 8001d44:	eeb0 8a40 	vmov.f32	s16, s0
 8001d48:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d52:	a353      	add	r3, pc, #332	; (adr r3, 8001ea0 <get_measuremets_parameters+0x678>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc66 	bl	8000628 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <get_measuremets_parameters+0x6a0>)
 8001d6a:	f7fe fd87 	bl	800087c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ec43 2b17 	vmov	d7, r2, r3
 8001d76:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7a:	eef0 0a67 	vmov.f32	s1, s15
 8001d7e:	f008 fac3 	bl	800a308 <cos>
 8001d82:	eeb0 7a40 	vmov.f32	s14, s0
 8001d86:	eef0 7a60 	vmov.f32	s15, s1
 8001d8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d8e:	eef0 1a67 	vmov.f32	s3, s15
 8001d92:	eeb0 0a48 	vmov.f32	s0, s16
 8001d96:	eef0 0a68 	vmov.f32	s1, s17
 8001d9a:	f008 fba9 	bl	800a4f0 <atan2>
 8001d9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001da2:	eef0 7a60 	vmov.f32	s15, s1
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	ed93 7b02 	vldr	d7, [r3, #8]
 8001db2:	eeb0 0a47 	vmov.f32	s0, s14
 8001db6:	eef0 0a67 	vmov.f32	s1, s15
 8001dba:	f008 fb41 	bl	800a440 <sin>
 8001dbe:	eeb0 8a40 	vmov.f32	s16, s0
 8001dc2:	eef0 8a60 	vmov.f32	s17, s1
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	ed93 7b02 	vldr	d7, [r3, #8]
 8001dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd0:	eef0 0a67 	vmov.f32	s1, s15
 8001dd4:	f008 fa98 	bl	800a308 <cos>
 8001dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ddc:	eef0 7a60 	vmov.f32	s15, s1
 8001de0:	eeb0 1a47 	vmov.f32	s2, s14
 8001de4:	eef0 1a67 	vmov.f32	s3, s15
 8001de8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dec:	eef0 0a68 	vmov.f32	s1, s17
 8001df0:	f008 fb7e 	bl	800a4f0 <atan2>
 8001df4:	eeb0 7a40 	vmov.f32	s14, s0
 8001df8:	eef0 7a60 	vmov.f32	s15, s1
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	ed83 7b02 	vstr	d7, [r3, #8]
			if (Mode_dir.direction_s_r == SET){
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <get_measuremets_parameters+0x6a4>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d166      	bne.n	8001ed8 <get_measuremets_parameters+0x6b0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	791b      	ldrb	r3, [r3, #4]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <get_measuremets_parameters+0x6a8>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <get_measuremets_parameters+0x6ac>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	eef1 7a67 	vneg.f32	s15, s15
 8001e4e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <get_measuremets_parameters+0x690>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e7c:	eef1 6a67 	vneg.f32	s13, s15
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <get_measuremets_parameters+0x690>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	edc3 7a02 	vstr	s15, [r3, #8]
 8001e9a:	e065      	b.n	8001f68 <get_measuremets_parameters+0x740>
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	54442d18 	.word	0x54442d18
 8001ea4:	400921fb 	.word	0x400921fb
 8001ea8:	1a63c1f8 	.word	0x1a63c1f8
 8001eac:	404ca5dc 	.word	0x404ca5dc
 8001eb0:	20000516 	.word	0x20000516
 8001eb4:	20000520 	.word	0x20000520
 8001eb8:	20000524 	.word	0x20000524
 8001ebc:	20000608 	.word	0x20000608
 8001ec0:	20000522 	.word	0x20000522
 8001ec4:	2000060c 	.word	0x2000060c
 8001ec8:	40668000 	.word	0x40668000
 8001ecc:	20000514 	.word	0x20000514
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	20000008 	.word	0x20000008
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <get_measuremets_parameters+0x778>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	eef1 7a67 	vneg.f32	s15, s15
 8001ef8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3304      	adds	r3, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <get_measuremets_parameters+0x77c>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3304      	adds	r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f28:	eef1 6a67 	vneg.f32	s13, s15
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <get_measuremets_parameters+0x780>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f40:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <get_measuremets_parameters+0x780>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f64:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <get_measuremets_parameters+0x784>)
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <get_measuremets_parameters+0x788>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <get_measuremets_parameters+0x78c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	801a      	strh	r2, [r3, #0]
}
 8001f8e:	e000      	b.n	8001f92 <get_measuremets_parameters+0x76a>
	else{  __NOP(); }
 8001f90:	bf00      	nop
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	ecbd 8b02 	vpop	{d8}
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000524 	.word	0x20000524
 8001fac:	20000608 	.word	0x20000608
 8001fb0:	20000520 	.word	0x20000520
 8001fb4:	20000522 	.word	0x20000522

08001fb8 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 8001fc2:	783b      	ldrb	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d120      	bne.n	800200a <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f844 	bl	8002058 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 f854 	bl	8005084 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fce2 	bl	80049ae <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 f846 	bl	8005084 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fcd3 	bl	80049ae <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002008:	e022      	b.n	8002050 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 800200a:	783b      	ldrb	r3, [r7, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11f      	bne.n	8002050 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f820 	bl	8002058 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	4618      	mov	r0, r3
 8002020:	f003 f830 	bl	8005084 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fcbe 	bl	80049ae <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	4618      	mov	r0, r3
 800203c:	f003 f822 	bl	8005084 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fcaf 	bl	80049ae <GPIO_WritePin_Afopt>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 8002062:	783b      	ldrb	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d143      	bne.n	80020f0 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	7f1a      	ldrb	r2, [r3, #28]
 800206e:	787b      	ldrb	r3, [r7, #1]
 8002070:	429a      	cmp	r2, r3
 8002072:	d018      	beq.n	80020a6 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	787a      	ldrb	r2, [r7, #1]
 800207a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	7f1b      	ldrb	r3, [r3, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f002 fc8a 	bl	80049ae <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fb87 	bl	80057b4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	7f1a      	ldrb	r2, [r3, #28]
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d068      	beq.n	8002186 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	787a      	ldrb	r2, [r7, #1]
 80020bc:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	7f1b      	ldrb	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f002 fc67 	bl	80049ae <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 fb63 	bl	80057b4 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80020ee:	e04a      	b.n	8002186 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == sRoll){
 80020f0:	783b      	ldrb	r3, [r7, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d147      	bne.n	8002186 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	7f1a      	ldrb	r2, [r3, #28]
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d11d      	bne.n	800213e <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002102:	787b      	ldrb	r3, [r7, #1]
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2da      	uxtb	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	7f1b      	ldrb	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f002 fc3e 	bl	80049ae <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fb3b 	bl	80057b4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	7f1a      	ldrb	r2, [r3, #28]
 8002146:	787b      	ldrb	r3, [r7, #1]
 8002148:	429a      	cmp	r2, r3
 800214a:	d01c      	beq.n	8002186 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	787a      	ldrb	r2, [r7, #1]
 8002154:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	7f1b      	ldrb	r3, [r3, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f002 fc1b 	bl	80049ae <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fb17 	bl	80057b4 <PWMx_Toggle>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <change_dir_straigh_Roll>:

void change_dir_straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	8039      	strh	r1, [r7, #0]

	if (operation_mode_dir.Mode == sLine){
 8002198:	783b      	ldrb	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d161      	bne.n	8002262 <change_dir_straigh_Roll+0xd4>
		// Si estamos aqui es porque queremos cambiar la direccion en linea recta correctamente

		// antes de cambiar la direccion apagamos los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fc01 	bl	80049ae <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fbf9 	bl	80049ae <GPIO_WritePin_Afopt>

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	7f1a      	ldrb	r2, [r3, #28]
 80021c2:	787b      	ldrb	r3, [r7, #1]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d018      	beq.n	80021fa <change_dir_straigh_Roll+0x6c>
			// si estamos aqui es porque se quiere cambiar la direccion del robot

			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	787a      	ldrb	r2, [r7, #1]
 80021ce:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	7f1b      	ldrb	r3, [r3, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f002 fbe0 	bl	80049ae <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fadd 	bl	80057b4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	7f1a      	ldrb	r2, [r3, #28]
 8002202:	787b      	ldrb	r3, [r7, #1]
 8002204:	429a      	cmp	r2, r3
 8002206:	d01c      	beq.n	8002242 <change_dir_straigh_Roll+0xb4>
			// si estamos aqui es porque se quiere cambiar la direccion del robot
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	787a      	ldrb	r2, [r7, #1]
 8002210:	771a      	strb	r2, [r3, #28]
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	7f1b      	ldrb	r3, [r3, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f002 fbbd 	bl	80049ae <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fab9 	bl	80057b4 <PWMx_Toggle>
		}
		// Puede que no analice ningún if y simplemente no haga nada


		// volvemos a encender los motores
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fbaf 	bl	80049ae <GPIO_WritePin_Afopt>
		GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2101      	movs	r1, #1
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fba7 	bl	80049ae <GPIO_WritePin_Afopt>
			// volvemos a encender los motores
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);

	}
}
 8002260:	e068      	b.n	8002334 <change_dir_straigh_Roll+0x1a6>
	}else if (operation_mode_dir.Mode == sRoll){
 8002262:	783b      	ldrb	r3, [r7, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d165      	bne.n	8002334 <change_dir_straigh_Roll+0x1a6>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,RESET);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fb9c 	bl	80049ae <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fb94 	bl	80049ae <GPIO_WritePin_Afopt>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	7f1a      	ldrb	r2, [r3, #28]
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	429a      	cmp	r2, r3
 8002290:	d11d      	bne.n	80022ce <change_dir_straigh_Roll+0x140>
				ptrMotorhandler[0]->configMotor.dir = !operation_mode_dir.direction_s_r;
 8002292:	787b      	ldrb	r3, [r7, #1]
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir ); // La direccion estaba en RESET, la cambiamos a SET
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	7f1b      	ldrb	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f002 fb76 	bl	80049ae <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fa73 	bl	80057b4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	7f1a      	ldrb	r2, [r3, #28]
 80022d6:	787b      	ldrb	r3, [r7, #1]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d01c      	beq.n	8002316 <change_dir_straigh_Roll+0x188>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	787a      	ldrb	r2, [r7, #1]
 80022e4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a1a      	ldr	r2, [r3, #32]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f002 fb53 	bl	80049ae <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fa4f 	bl	80057b4 <PWMx_Toggle>
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fb45 	bl	80049ae <GPIO_WritePin_Afopt>
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fb3d 	bl	80049ae <GPIO_WritePin_Afopt>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <stop>:


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f9f2 	bl	8005734 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fb28 	bl	80049ae <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f9e4 	bl	8005734 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f002 fb19 	bl	80049ae <GPIO_WritePin_Afopt>


}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <int_Config_Motor+0x21c>)
 8002396:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <int_Config_Motor+0x220>)
 800239e:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <int_Config_Motor+0x224>)
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7f      	ldr	r2, [pc, #508]	; (80025ac <int_Config_Motor+0x228>)
 80023ae:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7e      	ldr	r2, [pc, #504]	; (80025b0 <int_Config_Motor+0x22c>)
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a71      	ldr	r2, [pc, #452]	; (80025b4 <int_Config_Motor+0x230>)
 80023f0:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <int_Config_Motor+0x234>)
 8002406:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3304      	adds	r3, #4
 800240c:	4a6b      	ldr	r2, [pc, #428]	; (80025bc <int_Config_Motor+0x238>)
 800240e:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <int_Config_Motor+0x220>)
 8002418:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <int_Config_Motor+0x23c>)
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a66      	ldr	r2, [pc, #408]	; (80025c4 <int_Config_Motor+0x240>)
 800242c:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a64      	ldr	r2, [pc, #400]	; (80025c8 <int_Config_Motor+0x244>)
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3304      	adds	r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3304      	adds	r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <int_Config_Motor+0x230>)
 800247a:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3304      	adds	r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <int_Config_Motor+0x234>)
 8002494:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024bc:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4a42      	ldr	r2, [pc, #264]	; (80025cc <int_Config_Motor+0x248>)
 80024c2:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <int_Config_Motor+0x24c>)
 80024c8:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200003cc 	.word	0x200003cc
 80025a4:	41e00000 	.word	0x41e00000
 80025a8:	20000244 	.word	0x20000244
 80025ac:	2000025c 	.word	0x2000025c
 80025b0:	200002e4 	.word	0x200002e4
 80025b4:	437a0000 	.word	0x437a0000
 80025b8:	42c80000 	.word	0x42c80000
 80025bc:	200003f8 	.word	0x200003f8
 80025c0:	20000238 	.word	0x20000238
 80025c4:	20000250 	.word	0x20000250
 80025c8:	200002fc 	.word	0x200002fc
 80025cc:	3dcccccd 	.word	0x3dcccccd
 80025d0:	3f4ccccd 	.word	0x3f4ccccd

080025d4 <goTo>:
		 uint8_t *fAnglulo,
		 uint8_t *fMeasurements,
		 uint8_t *fcontrol,
		 char buff[64],
		 uint32_t distance_mm ,
		 state_dir_t operation_mode_dir){
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b092      	sub	sp, #72	; 0x48
 80025d8:	af08      	add	r7, sp, #32
 80025da:	6178      	str	r0, [r7, #20]
 80025dc:	6139      	str	r1, [r7, #16]
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t done = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8002610:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002612:	f7fd ff8f 	bl	8000534 <__aeabi_ui2d>
 8002616:	4604      	mov	r4, r0
 8002618:	460d      	mov	r5, r1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002620:	eeb0 0a47 	vmov.f32	s0, s14
 8002624:	eef0 0a67 	vmov.f32	s1, s15
 8002628:	f007 fe6e 	bl	800a308 <cos>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fff8 	bl	8000628 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002646:	f7fd fe39 	bl	80002bc <__adddf3>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8002654:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002656:	f7fd ff6d 	bl	8000534 <__aeabi_ui2d>
 800265a:	4604      	mov	r4, r0
 800265c:	460d      	mov	r5, r1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	ed93 7b04 	vldr	d7, [r3, #16]
 8002664:	eeb0 0a47 	vmov.f32	s0, s14
 8002668:	eef0 0a67 	vmov.f32	s1, s15
 800266c:	f007 fee8 	bl	800a440 <sin>
 8002670:	ec53 2b10 	vmov	r2, r3, d0
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fd ffd6 	bl	8000628 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800268a:	f7fd fe17 	bl	80002bc <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 8002698:	68b8      	ldr	r0, [r7, #8]
 800269a:	f002 fac9 	bl	8004c30 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 800269e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7ff fc89 	bl	8001fb8 <On_motor_Straigh_Roll>

	while(!done){
 80026a6:	e04c      	b.n	8002742 <goTo+0x16e>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80026b4:	eeb0 1a46 	vmov.f32	s2, s12
 80026b8:	eef0 1a66 	vmov.f32	s3, s13
 80026bc:	eeb0 0a47 	vmov.f32	s0, s14
 80026c0:	eef0 0a67 	vmov.f32	s1, s15
 80026c4:	68b8      	ldr	r0, [r7, #8]
 80026c6:	f002 fb9f 	bl	8004e08 <distance_traveled>
 80026ca:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 80026ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80026d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	9305      	str	r3, [sp, #20]
 80026da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026dc:	9304      	str	r3, [sp, #16]
 80026de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e0:	9303      	str	r3, [sp, #12]
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	ed97 0b00 	vldr	d0, [r7]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f000 f988 	bl	8002a10 <go>
		   fMeasurements,
		   fcontrol,
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva

		if (!(distance_to_go < distance_mm)){
 8002700:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002702:	f7fd ff17 	bl	8000534 <__aeabi_ui2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	2101      	movs	r1, #1
 800270c:	460c      	mov	r4, r1
 800270e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002712:	f7fe f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <goTo+0x14c>
 800271c:	2300      	movs	r3, #0
 800271e:	461c      	mov	r4, r3
 8002720:	b2e3      	uxtb	r3, r4
 8002722:	f083 0301 	eor.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <goTo+0x16a>
			// Paramos el proceso
			done = !done;
 800272c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Observamos si hay algun comando en espera
		fillComand();
 800273e:	f000 fa3f 	bl	8002bc0 <fillComand>
	while(!done){
 8002742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ae      	beq.n	80026a8 <goTo+0xd4>

	}


	return done;
 800274a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800274e:	4618      	mov	r0, r3
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002758 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <PID_control+0x1cc>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a6f      	ldr	r2, [pc, #444]	; (8002928 <PID_control+0x1d0>)
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800292c <PID_control+0x1d4>
 800277e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002782:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002792:	eeb0 1a46 	vmov.f32	s2, s12
 8002796:	eef0 1a66 	vmov.f32	s3, s13
 800279a:	eeb0 0a47 	vmov.f32	s0, s14
 800279e:	eef0 0a67 	vmov.f32	s1, s15
 80027a2:	68b8      	ldr	r0, [r7, #8]
 80027a4:	f002 faec 	bl	8004d80 <distance_to_straight_line>
 80027a8:	ec51 0b10 	vmov	r0, r1, d0
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <PID_control+0x1d8>)
 80027b2:	f7fe f863 	bl	800087c <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe fa2b 	bl	8000c18 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 80027c6:	ed97 1a04 	vldr	s2, [r7, #16]
 80027ca:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002934 <PID_control+0x1dc>
 80027ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80027d2:	6838      	ldr	r0, [r7, #0]
 80027d4:	f000 f8bc 	bl	8002950 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 80027d8:	4b57      	ldr	r3, [pc, #348]	; (8002938 <PID_control+0x1e0>)
 80027da:	ed93 7a00 	vldr	s14, [r3]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <PID_control+0x1e4>)
 80027ea:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <PID_control+0x1e0>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <PID_control+0x1e8>)
 8002800:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <PID_control+0x1e4>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	ed93 7a02 	vldr	s14, [r3, #8]
 8002818:	eeb0 1a47 	vmov.f32	s2, s14
 800281c:	eef0 0a67 	vmov.f32	s1, s15
 8002820:	ed97 0a05 	vldr	s0, [r7, #20]
 8002824:	4610      	mov	r0, r2
 8002826:	f000 f893 	bl	8002950 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3304      	adds	r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <PID_control+0x1e8>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002842:	eeb0 1a47 	vmov.f32	s2, s14
 8002846:	eef0 0a67 	vmov.f32	s1, s15
 800284a:	ed97 0a05 	vldr	s0, [r7, #20]
 800284e:	4610      	mov	r0, r2
 8002850:	f000 f87e 	bl	8002950 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ed93 7a05 	vldr	s14, [r3, #20]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	ed93 7a05 	vldr	s14, [r3, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3304      	adds	r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002892:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	edd3 7a05 	vldr	s15, [r3, #20]
 800289e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002944 <PID_control+0x1ec>
 80028a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	db04      	blt.n	80028b6 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <PID_control+0x1f0>)
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	e00e      	b.n	80028d4 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80028be:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d803      	bhi.n	80028d4 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <PID_control+0x1f4>)
 80028d2:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3304      	adds	r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	edd3 7a05 	vldr	s15, [r3, #20]
 80028de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002944 <PID_control+0x1ec>
 80028e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	db05      	blt.n	80028f8 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3304      	adds	r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <PID_control+0x1f0>)
 80028f4:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 80028f6:	e011      	b.n	800291c <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3304      	adds	r3, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002902:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d900      	bls.n	8002912 <PID_control+0x1ba>
}
 8002910:	e004      	b.n	800291c <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3304      	adds	r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <PID_control+0x1f4>)
 800291a:	615a      	str	r2, [r3, #20]
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200002bc 	.word	0x200002bc
 8002928:	20000000 	.word	0x20000000
 800292c:	447a0000 	.word	0x447a0000
 8002930:	408f4000 	.word	0x408f4000
 8002934:	00000000 	.word	0x00000000
 8002938:	20000610 	.word	0x20000610
 800293c:	20000614 	.word	0x20000614
 8002940:	20000618 	.word	0x20000618
 8002944:	42700000 	.word	0x42700000
 8002948:	42700000 	.word	0x42700000
 800294c:	41b80000 	.word	0x41b80000

08002950 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	ed87 0a02 	vstr	s0, [r7, #8]
 800295c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002960:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002964:	ed97 7a01 	vldr	s14, [r7, #4]
 8002968:	edd7 7a00 	vldr	s15, [r7]
 800296c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	ed93 7a04 	vldr	s14, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	edd3 6a01 	vldr	s13, [r3, #4]
 8002996:	edd7 7a02 	vldr	s15, [r7, #8]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b8:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	ed93 7a06 	vldr	s14, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80029da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029de:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 80029e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80029e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	60da      	str	r2, [r3, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3724      	adds	r7, #36	; 0x24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <go>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6178      	str	r0, [r7, #20]
 8002a18:	6139      	str	r1, [r7, #16]
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	ed97 1b00 	vldr	d1, [r7]
 8002a30:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8002b5c <go+0x14c>
 8002a34:	6938      	ldr	r0, [r7, #16]
 8002a36:	f7fe fe99 	bl	800176c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <go+0x52>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f7fe fee9 	bl	8001828 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d073      	beq.n	8002b52 <go+0x142>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a88:	ee16 0a90 	vmov	r0, s13
 8002a8c:	f7fd fd74 	bl	8000578 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa2:	eef0 0a67 	vmov.f32	s1, s15
 8002aa6:	f007 fc2f 	bl	800a308 <cos>
 8002aaa:	ec51 0b10 	vmov	r0, r1, d0
 8002aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab2:	f7fd fdb9 	bl	8000628 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aca:	eef0 0a67 	vmov.f32	s1, s15
 8002ace:	f007 fcb7 	bl	800a440 <sin>
 8002ad2:	ec51 0b10 	vmov	r0, r1, d0
 8002ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ada:	f7fd fda5 	bl	8000628 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002af4:	f7fd fbe2 	bl	80002bc <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002b28:	e9cd 2300 	strd	r2, r3, [sp]
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	490b      	ldr	r1, [pc, #44]	; (8002b60 <go+0x150>)
 8002b32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b34:	f004 fdac 	bl	8007690 <siprintf>

		writeMsg(&handlerUSART, buff);
 8002b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b3a:	480a      	ldr	r0, [pc, #40]	; (8002b64 <go+0x154>)
 8002b3c:	f003 fde2 	bl	8006704 <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff fe06 	bl	8002758 <PID_control>

		*fcontrol = RESET;
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
	}
}
 8002b52:	bf00      	nop
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	0800c95c 	.word	0x0800c95c
 8002b64:	20000314 	.word	0x20000314

08002b68 <roll>:
		state_t mode,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6178      	str	r0, [r7, #20]
 8002b70:	6139      	str	r1, [r7, #16]
 8002b72:	60fa      	str	r2, [r7, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <roll+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	ed97 1b00 	vldr	d1, [r7]
 8002b88:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002bbc <roll+0x54>
 8002b8c:	6938      	ldr	r0, [r7, #16]
 8002b8e:	f7fe fded 	bl	800176c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <roll+0x4c>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 8002ba0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	6978      	ldr	r0, [r7, #20]
 8002baa:	f7fe fe3d 	bl	8001828 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
	}

}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <fillComand>:



void fillComand(void){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

	if (rxData != '\0'){
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <fillComand+0x8c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <fillComand+0x86>
		writeChar(&handlerUSART, rxData);
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <fillComand+0x8c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	481f      	ldr	r0, [pc, #124]	; (8002c50 <fillComand+0x90>)
 8002bd4:	f003 fd7e 	bl	80066d4 <writeChar>
		bufferReception[counterReception] = rxData;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <fillComand+0x94>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <fillComand+0x8c>)
 8002be0:	7819      	ldrb	r1, [r3, #0]
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <fillComand+0x98>)
 8002be4:	5499      	strb	r1, [r3, r2]
		counterReception++;
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <fillComand+0x94>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <fillComand+0x94>)
 8002bf0:	701a      	strb	r2, [r3, #0]

		if (rxData == '@'){
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <fillComand+0x8c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d10f      	bne.n	8002c1a <fillComand+0x5a>
			doneTransaction = SET;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <fillComand+0x9c>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]

			bufferReception[counterReception-1] = '\0';
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <fillComand+0x94>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <fillComand+0x98>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	54d1      	strb	r1, [r2, r3]

			counterReception = 0;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <fillComand+0x94>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
			parseCommands(bufferReception);
 8002c12:	4811      	ldr	r0, [pc, #68]	; (8002c58 <fillComand+0x98>)
 8002c14:	f7fe fbd4 	bl	80013c0 <parseCommands>
 8002c18:	e012      	b.n	8002c40 <fillComand+0x80>

		}else if (rxData == 'z'){
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <fillComand+0x8c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b7a      	cmp	r3, #122	; 0x7a
 8002c20:	d10e      	bne.n	8002c40 <fillComand+0x80>

			memset(bufferReception, 0, sizeof(bufferReception));
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	2100      	movs	r1, #0
 8002c26:	480c      	ldr	r0, [pc, #48]	; (8002c58 <fillComand+0x98>)
 8002c28:	f003 ffd0 	bl	8006bcc <memset>
			counterReception = 0;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <fillComand+0x94>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
			writeMsg(&handlerUSART, "\n___Buffer Vaciado___\n \r");
 8002c32:	490b      	ldr	r1, [pc, #44]	; (8002c60 <fillComand+0xa0>)
 8002c34:	4806      	ldr	r0, [pc, #24]	; (8002c50 <fillComand+0x90>)
 8002c36:	f003 fd65 	bl	8006704 <writeMsg>
			rxData = '\0';
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <fillComand+0x8c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
		}
		rxData = '\0';
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <fillComand+0x8c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
	}

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000466 	.word	0x20000466
 8002c50:	20000314 	.word	0x20000314
 8002c54:	20000464 	.word	0x20000464
 8002c58:	20000424 	.word	0x20000424
 8002c5c:	20000465 	.word	0x20000465
 8002c60:	0800c96c 	.word	0x0800c96c

08002c64 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <ITM_SendChar+0x48>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <ITM_SendChar+0x48>)
 8002c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c78:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <ITM_SendChar+0x4c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <ITM_SendChar+0x4c>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002c86:	bf00      	nop
 8002c88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f8      	beq.n	8002c88 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002c96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	6013      	str	r3, [r2, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000edfc 	.word	0xe000edfc
 8002cb0:	e0000e00 	.word	0xe0000e00

08002cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
	return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_kill>:

int _kill(int pid, int sig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cce:	f003 ff4b 	bl	8006b68 <__errno>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2216      	movs	r2, #22
 8002cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_exit>:

void _exit (int status)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ffe7 	bl	8002cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cf6:	e7fe      	b.n	8002cf6 <_exit+0x12>

08002cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e00a      	b.n	8002d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d0a:	f3af 8000 	nop.w
 8002d0e:	4601      	mov	r1, r0
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	b2ca      	uxtb	r2, r1
 8002d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf0      	blt.n	8002d0a <_read+0x12>
	}

return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e009      	b.n	8002d58 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff89 	bl	8002c64 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	dbf1      	blt.n	8002d44 <_write+0x12>
	}
	return len;
 8002d60:	687b      	ldr	r3, [r7, #4]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_close>:

int _close(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return -1;
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d92:	605a      	str	r2, [r3, #4]
	return 0;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_isatty>:

int _isatty(int file)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
	return 1;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dd8:	f003 fd5a 	bl	8006890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <LoopForever+0xe>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df4:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <LoopForever+0x16>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e02:	f003 feb7 	bl	8006b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e06:	f7fd ff57 	bl	8000cb8 <main>

08002e0a <LoopForever>:

LoopForever:
    b LoopForever
 8002e0a:	e7fe      	b.n	8002e0a <LoopForever>
  ldr   r0, =_estack
 8002e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e18:	0800d020 	.word	0x0800d020
  ldr r2, =_sbss
 8002e1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002e20:	20000648 	.word	0x20000648

08002e24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC_IRQHandler>
	...

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <inTIM4+0x30>)
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <inTIM4+0x34>)
 8002e6c:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <inTIM4+0x30>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <inTIM4+0x30>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <inTIM4+0x30>)
 8002e7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e80:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <inTIM4+0x30>)
 8002e84:	220a      	movs	r2, #10
 8002e86:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <inTIM4+0x30>)
 8002e8a:	f000 f807 	bl	8002e9c <BasicTimer_Config>

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200002d0 	.word	0x200002d0
 8002e98:	40000800 	.word	0x40000800

08002e9c <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a85      	ldr	r2, [pc, #532]	; (80030cc <BasicTimer_Config+0x230>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d106      	bne.n	8002ec8 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <BasicTimer_Config+0x234>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a84      	ldr	r2, [pc, #528]	; (80030d0 <BasicTimer_Config+0x234>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	e030      	b.n	8002f2a <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d106      	bne.n	8002ee0 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	; (80030d0 <BasicTimer_Config+0x234>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a7e      	ldr	r2, [pc, #504]	; (80030d0 <BasicTimer_Config+0x234>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	e024      	b.n	8002f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7b      	ldr	r2, [pc, #492]	; (80030d4 <BasicTimer_Config+0x238>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d106      	bne.n	8002ef8 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <BasicTimer_Config+0x234>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <BasicTimer_Config+0x234>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	e018      	b.n	8002f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a76      	ldr	r2, [pc, #472]	; (80030d8 <BasicTimer_Config+0x23c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d106      	bne.n	8002f10 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <BasicTimer_Config+0x234>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a72      	ldr	r2, [pc, #456]	; (80030d0 <BasicTimer_Config+0x234>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	e00c      	b.n	8002f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a71      	ldr	r2, [pc, #452]	; (80030dc <BasicTimer_Config+0x240>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d106      	bne.n	8002f28 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <BasicTimer_Config+0x234>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a6c      	ldr	r2, [pc, #432]	; (80030d0 <BasicTimer_Config+0x234>)
 8002f20:	f043 0308 	orr.w	r3, r3, #8
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	e000      	b.n	8002f2a <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8002f28:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f38:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	791b      	ldrb	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 80d3 	bne.w	80030f4 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2ba0      	cmp	r3, #160	; 0xa0
 8002f68:	d022      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2bc8      	cmp	r3, #200	; 0xc8
 8002f6e:	d01f      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002f76:	d01b      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f7e:	d017      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f86:	d013      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002f8e:	d00f      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002f96:	d00b      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002f9e:	d007      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002fa6:	d003      	beq.n	8002fb0 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fae:	d10b      	bne.n	8002fc8 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2264      	movs	r2, #100	; 0x64
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fc6:	e07c      	b.n	80030c2 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002fce:	d029      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fd6:	d025      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d020      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002fe8:	d01c      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d017      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d012      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003004:	4293      	cmp	r3, r2
 8003006:	d00d      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800300e:	d009      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f242 3228 	movw	r2, #9000	; 0x2328
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	3a01      	subs	r2, #1
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
 800303c:	e041      	b.n	80030c2 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003044:	d028      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f644 6220 	movw	r2, #20000	; 0x4e20
 800304c:	4293      	cmp	r3, r2
 800304e:	d023      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f247 5230 	movw	r2, #30000	; 0x7530
 8003056:	4293      	cmp	r3, r2
 8003058:	d01e      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003060:	4293      	cmp	r3, r2
 8003062:	d019      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f24c 3250 	movw	r2, #50000	; 0xc350
 800306a:	4293      	cmp	r3, r2
 800306c:	d014      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003074:	4293      	cmp	r3, r2
 8003076:	d00f      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <BasicTimer_Config+0x244>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <BasicTimer_Config+0x248>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <BasicTimer_Config+0x24c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a16      	ldr	r2, [pc, #88]	; (80030ec <BasicTimer_Config+0x250>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d108      	bne.n	80030aa <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	3a01      	subs	r2, #1
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a8:	e00b      	b.n	80030c2 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <BasicTimer_Config+0x254>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	3a01      	subs	r2, #1
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
 80030ca:	e027      	b.n	800311c <BasicTimer_Config+0x280>
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	00011170 	.word	0x00011170
 80030e4:	00013880 	.word	0x00013880
 80030e8:	00015f90 	.word	0x00015f90
 80030ec:	000186a0 	.word	0x000186a0
 80030f0:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0210 	orr.w	r2, r2, #16
 8003102:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3a01      	subs	r2, #1
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3a01      	subs	r2, #1
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7c1b      	ldrb	r3, [r3, #16]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d12d      	bne.n	8003180 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d103      	bne.n	8003146 <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 800313e:	201c      	movs	r0, #28
 8003140:	f7ff fe72 	bl	8002e28 <__NVIC_EnableIRQ>
 8003144:	e024      	b.n	8003190 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <BasicTimer_Config+0x300>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8003150:	201d      	movs	r0, #29
 8003152:	f7ff fe69 	bl	8002e28 <__NVIC_EnableIRQ>
 8003156:	e01b      	b.n	8003190 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <BasicTimer_Config+0x304>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d103      	bne.n	800316a <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8003162:	201e      	movs	r0, #30
 8003164:	f7ff fe60 	bl	8002e28 <__NVIC_EnableIRQ>
 8003168:	e012      	b.n	8003190 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <BasicTimer_Config+0x308>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8003174:	2032      	movs	r0, #50	; 0x32
 8003176:	f7ff fe57 	bl	8002e28 <__NVIC_EnableIRQ>
 800317a:	e009      	b.n	8003190 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 800317c:	bf00      	nop
 800317e:	e007      	b.n	8003190 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003190:	b662      	cpsie	i
}
 8003192:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00

080031a8 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031ac:	bf00      	nop
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031bc:	bf00      	nop
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031cc:	bf00      	nop
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031dc:	bf00      	nop
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031ec:	bf00      	nop
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80031fc:	bf00      	nop
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800320c:	bf00      	nop
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800321c:	bf00      	nop
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800322c:	bf00      	nop
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800323c:	bf00      	nop
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800324c:	bf00      	nop
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800325c:	bf00      	nop
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800326c:	bf00      	nop
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800327c:	bf00      	nop
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800328c:	bf00      	nop
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800329c:	bf00      	nop
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80032ac:	bf00      	nop
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80032bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80032ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80032da:	f7fe fa03 	bl	80016e4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80032de:	e066      	b.n	80033ae <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80032e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80032ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032f8:	f023 0302 	bic.w	r3, r3, #2
 80032fc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80032fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800330c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800330e:	f7ff ff5b 	bl	80031c8 <Capture_TIM2_Ch1_Callback>
}
 8003312:	e04c      	b.n	80033ae <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8003314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8003322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8003332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800333c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003340:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8003342:	f7ff ff49 	bl	80031d8 <Capture_TIM2_Ch2_Callback>
}
 8003346:	e032      	b.n	80033ae <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8003348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8003356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003360:	f023 0308 	bic.w	r3, r3, #8
 8003364:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8003366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003374:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8003376:	f7ff ff37 	bl	80031e8 <Capture_TIM2_Ch3_Callback>
}
 800337a:	e018      	b.n	80033ae <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 800337c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d011      	beq.n	80033ae <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800338a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003394:	f023 0310 	bic.w	r3, r3, #16
 8003398:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800339a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80033aa:	f7ff ff25 	bl	80031f8 <Capture_TIM2_Ch4_Callback>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80033d0:	f7fe f97e 	bl	80016d0 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80033d4:	e052      	b.n	800347c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	4a26      	ldr	r2, [pc, #152]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033e8:	f023 0302 	bic.w	r3, r3, #2
 80033ec:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <TIM3_IRQHandler+0xcc>)
 80033f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f8:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80033fa:	f7ff ff05 	bl	8003208 <Capture_TIM3_Ch1_Callback>
}
 80033fe:	e03d      	b.n	800347c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003412:	f023 0304 	bic.w	r3, r3, #4
 8003416:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800341e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003422:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8003424:	f7ff fef8 	bl	8003218 <Capture_TIM3_Ch2_Callback>
}
 8003428:	e028      	b.n	800347c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800343c:	f023 0308 	bic.w	r3, r3, #8
 8003440:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800344e:	f7ff feeb 	bl	8003228 <Capture_TIM3_Ch3_Callback>
}
 8003452:	e013      	b.n	800347c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	4a06      	ldr	r2, [pc, #24]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003466:	f023 0310 	bic.w	r3, r3, #16
 800346a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <TIM3_IRQHandler+0xcc>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4a03      	ldr	r2, [pc, #12]	; (8003480 <TIM3_IRQHandler+0xcc>)
 8003472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003476:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8003478:	f7ff fede 	bl	8003238 <Capture_TIM3_Ch4_Callback>
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40000400 	.word	0x40000400

08003484 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <TIM4_IRQHandler+0xcc>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <TIM4_IRQHandler+0xcc>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80034a0:	f7ff fe82 	bl	80031a8 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80034a4:	e052      	b.n	800354c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c8:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80034ca:	f7ff febd 	bl	8003248 <Capture_TIM4_Ch1_Callback>
}
 80034ce:	e03d      	b.n	800354c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f2:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80034f4:	f7ff fec8 	bl	8003288 <Capture_TIM5_Ch2_Callback>
}
 80034f8:	e028      	b.n	800354c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <TIM4_IRQHandler+0xcc>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <TIM4_IRQHandler+0xcc>)
 800350c:	f023 0308 	bic.w	r3, r3, #8
 8003510:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800351e:	f7ff fe9b 	bl	8003258 <Capture_TIM4_Ch3_Callback>
}
 8003522:	e013      	b.n	800354c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4a06      	ldr	r2, [pc, #24]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003536:	f023 0310 	bic.w	r3, r3, #16
 800353a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <TIM4_IRQHandler+0xcc>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4a03      	ldr	r2, [pc, #12]	; (8003550 <TIM4_IRQHandler+0xcc>)
 8003542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003546:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8003548:	f7ff fe8e 	bl	8003268 <Capture_TIM4_Ch4_Callback>
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40000800 	.word	0x40000800

08003554 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <TIM5_IRQHandler+0xcc>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <TIM5_IRQHandler+0xcc>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8003570:	f7ff fe22 	bl	80031b8 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8003574:	e052      	b.n	800361c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8003576:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003588:	f023 0302 	bic.w	r3, r3, #2
 800358c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	4a23      	ldr	r2, [pc, #140]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003598:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800359a:	f7ff fe6d 	bl	8003278 <Capture_TIM5_Ch1_Callback>
}
 800359e:	e03d      	b.n	800361c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80035a0:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c2:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80035c4:	f7ff fe60 	bl	8003288 <Capture_TIM5_Ch2_Callback>
}
 80035c8:	e028      	b.n	800361c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035dc:	f023 0308 	bic.w	r3, r3, #8
 80035e0:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ec:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80035ee:	f7ff fe53 	bl	8003298 <Capture_TIM5_Ch3_Callback>
}
 80035f2:	e013      	b.n	800361c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <TIM5_IRQHandler+0xcc>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	4a06      	ldr	r2, [pc, #24]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003606:	f023 0310 	bic.w	r3, r3, #16
 800360a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <TIM5_IRQHandler+0xcc>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	4a03      	ldr	r2, [pc, #12]	; (8003620 <TIM5_IRQHandler+0xcc>)
 8003612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003616:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8003618:	f7ff fe46 	bl	80032a8 <Capture_TIM5_Ch4_Callback>
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40000c00 	.word	0x40000c00

08003624 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <__NVIC_EnableIRQ>:
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f825 	bl	8004704 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80036ba:	4b96      	ldr	r3, [pc, #600]	; (8003914 <extInt_Config+0x26c>)
 80036bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	791b      	ldrb	r3, [r3, #4]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	f200 85cd 	bhi.w	8004268 <extInt_Config+0xbc0>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <extInt_Config+0x2c>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003715 	.word	0x08003715
 80036d8:	080037cb 	.word	0x080037cb
 80036dc:	08003881 	.word	0x08003881
 80036e0:	08003957 	.word	0x08003957
 80036e4:	08003a0d 	.word	0x08003a0d
 80036e8:	08003abb 	.word	0x08003abb
 80036ec:	08003b81 	.word	0x08003b81
 80036f0:	08003c29 	.word	0x08003c29
 80036f4:	08003cd1 	.word	0x08003cd1
 80036f8:	08003d79 	.word	0x08003d79
 80036fc:	08003e3f 	.word	0x08003e3f
 8003700:	08003ee7 	.word	0x08003ee7
 8003704:	08003f8f 	.word	0x08003f8f
 8003708:	08004055 	.word	0x08004055
 800370c:	080040fb 	.word	0x080040fb
 8003710:	080041a3 	.word	0x080041a3
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8003714:	4b80      	ldr	r3, [pc, #512]	; (8003918 <extInt_Config+0x270>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a7f      	ldr	r2, [pc, #508]	; (8003918 <extInt_Config+0x270>)
 800371a:	f023 030f 	bic.w	r3, r3, #15
 800371e:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <extInt_Config+0x274>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d105      	bne.n	8003738 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 800372c:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <extInt_Config+0x270>)
 800372e:	4a7a      	ldr	r2, [pc, #488]	; (8003918 <extInt_Config+0x270>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8003734:	f000 bd9a 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a78      	ldr	r2, [pc, #480]	; (8003920 <extInt_Config+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d107      	bne.n	8003754 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8003744:	4b74      	ldr	r3, [pc, #464]	; (8003918 <extInt_Config+0x270>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a73      	ldr	r2, [pc, #460]	; (8003918 <extInt_Config+0x270>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6093      	str	r3, [r2, #8]
					break;
 8003750:	f000 bd8c 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a72      	ldr	r2, [pc, #456]	; (8003924 <extInt_Config+0x27c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d107      	bne.n	8003770 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8003760:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <extInt_Config+0x270>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a6c      	ldr	r2, [pc, #432]	; (8003918 <extInt_Config+0x270>)
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	6093      	str	r3, [r2, #8]
					break;
 800376c:	f000 bd7e 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6c      	ldr	r2, [pc, #432]	; (8003928 <extInt_Config+0x280>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d107      	bne.n	800378c <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <extInt_Config+0x270>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a65      	ldr	r2, [pc, #404]	; (8003918 <extInt_Config+0x270>)
 8003782:	f043 0303 	orr.w	r3, r3, #3
 8003786:	6093      	str	r3, [r2, #8]
					break;
 8003788:	f000 bd70 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a66      	ldr	r2, [pc, #408]	; (800392c <extInt_Config+0x284>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d107      	bne.n	80037a8 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <extInt_Config+0x270>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <extInt_Config+0x270>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6093      	str	r3, [r2, #8]
					break;
 80037a4:	f000 bd62 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a60      	ldr	r2, [pc, #384]	; (8003930 <extInt_Config+0x288>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d107      	bne.n	80037c4 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <extInt_Config+0x270>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a57      	ldr	r2, [pc, #348]	; (8003918 <extInt_Config+0x270>)
 80037ba:	f043 0307 	orr.w	r3, r3, #7
 80037be:	6093      	str	r3, [r2, #8]
					break;
 80037c0:	f000 bd54 	b.w	800426c <extInt_Config+0xbc4>
						__NOP();
 80037c4:	bf00      	nop
					break;
 80037c6:	f000 bd51 	b.w	800426c <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <extInt_Config+0x270>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a52      	ldr	r2, [pc, #328]	; (8003918 <extInt_Config+0x270>)
 80037d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d4:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4f      	ldr	r2, [pc, #316]	; (800391c <extInt_Config+0x274>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d105      	bne.n	80037ee <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <extInt_Config+0x270>)
 80037e4:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <extInt_Config+0x270>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80037ea:	f000 bd3f 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <extInt_Config+0x278>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d107      	bne.n	800380a <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <extInt_Config+0x270>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a46      	ldr	r2, [pc, #280]	; (8003918 <extInt_Config+0x270>)
 8003800:	f043 0310 	orr.w	r3, r3, #16
 8003804:	6093      	str	r3, [r2, #8]
					break;
 8003806:	f000 bd31 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a44      	ldr	r2, [pc, #272]	; (8003924 <extInt_Config+0x27c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d107      	bne.n	8003826 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <extInt_Config+0x270>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <extInt_Config+0x270>)
 800381c:	f043 0320 	orr.w	r3, r3, #32
 8003820:	6093      	str	r3, [r2, #8]
					break;
 8003822:	f000 bd23 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3e      	ldr	r2, [pc, #248]	; (8003928 <extInt_Config+0x280>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d107      	bne.n	8003842 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <extInt_Config+0x270>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a38      	ldr	r2, [pc, #224]	; (8003918 <extInt_Config+0x270>)
 8003838:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800383c:	6093      	str	r3, [r2, #8]
					break;
 800383e:	f000 bd15 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a38      	ldr	r2, [pc, #224]	; (800392c <extInt_Config+0x284>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d107      	bne.n	800385e <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800384e:	4b32      	ldr	r3, [pc, #200]	; (8003918 <extInt_Config+0x270>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a31      	ldr	r2, [pc, #196]	; (8003918 <extInt_Config+0x270>)
 8003854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003858:	6093      	str	r3, [r2, #8]
					break;
 800385a:	f000 bd07 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a32      	ldr	r2, [pc, #200]	; (8003930 <extInt_Config+0x288>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d107      	bne.n	800387a <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <extInt_Config+0x270>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <extInt_Config+0x270>)
 8003870:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003874:	6093      	str	r3, [r2, #8]
					break;
 8003876:	f000 bcf9 	b.w	800426c <extInt_Config+0xbc4>
						__NOP();
 800387a:	bf00      	nop
					break;
 800387c:	f000 bcf6 	b.w	800426c <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <extInt_Config+0x270>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <extInt_Config+0x270>)
 8003886:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800388a:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a22      	ldr	r2, [pc, #136]	; (800391c <extInt_Config+0x274>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d105      	bne.n	80038a4 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <extInt_Config+0x270>)
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <extInt_Config+0x270>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80038a0:	f000 bce4 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <extInt_Config+0x278>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d107      	bne.n	80038c0 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <extInt_Config+0x270>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <extInt_Config+0x270>)
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6093      	str	r3, [r2, #8]
					break;
 80038bc:	f000 bcd6 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <extInt_Config+0x27c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d107      	bne.n	80038dc <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <extInt_Config+0x270>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <extInt_Config+0x270>)
 80038d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d6:	6093      	str	r3, [r2, #8]
					break;
 80038d8:	f000 bcc8 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <extInt_Config+0x280>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d107      	bne.n	80038f8 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <extInt_Config+0x270>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <extInt_Config+0x270>)
 80038ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038f2:	6093      	str	r3, [r2, #8]
					break;
 80038f4:	f000 bcba 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <extInt_Config+0x284>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d117      	bne.n	8003934 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <extInt_Config+0x270>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a03      	ldr	r2, [pc, #12]	; (8003918 <extInt_Config+0x270>)
 800390a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800390e:	6093      	str	r3, [r2, #8]
					break;
 8003910:	f000 bcac 	b.w	800426c <extInt_Config+0xbc4>
 8003914:	40023800 	.word	0x40023800
 8003918:	40013800 	.word	0x40013800
 800391c:	40020000 	.word	0x40020000
 8003920:	40020400 	.word	0x40020400
 8003924:	40020800 	.word	0x40020800
 8003928:	40020c00 	.word	0x40020c00
 800392c:	40021000 	.word	0x40021000
 8003930:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a8a      	ldr	r2, [pc, #552]	; (8003b64 <extInt_Config+0x4bc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d107      	bne.n	8003950 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8003940:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <extInt_Config+0x4c0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a88      	ldr	r2, [pc, #544]	; (8003b68 <extInt_Config+0x4c0>)
 8003946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800394a:	6093      	str	r3, [r2, #8]
					break;
 800394c:	f000 bc8e 	b.w	800426c <extInt_Config+0xbc4>
						__NOP();
 8003950:	bf00      	nop
					break;
 8003952:	f000 bc8b 	b.w	800426c <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8003956:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <extInt_Config+0x4c0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4a83      	ldr	r2, [pc, #524]	; (8003b68 <extInt_Config+0x4c0>)
 800395c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003960:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <extInt_Config+0x4c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d105      	bne.n	800397a <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800396e:	4b7e      	ldr	r3, [pc, #504]	; (8003b68 <extInt_Config+0x4c0>)
 8003970:	4a7d      	ldr	r2, [pc, #500]	; (8003b68 <extInt_Config+0x4c0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8003976:	f000 bc79 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7b      	ldr	r2, [pc, #492]	; (8003b70 <extInt_Config+0x4c8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d107      	bne.n	8003996 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003986:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <extInt_Config+0x4c0>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4a77      	ldr	r2, [pc, #476]	; (8003b68 <extInt_Config+0x4c0>)
 800398c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003990:	6093      	str	r3, [r2, #8]
					break;
 8003992:	f000 bc6b 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a75      	ldr	r2, [pc, #468]	; (8003b74 <extInt_Config+0x4cc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d107      	bne.n	80039b2 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80039a2:	4b71      	ldr	r3, [pc, #452]	; (8003b68 <extInt_Config+0x4c0>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4a70      	ldr	r2, [pc, #448]	; (8003b68 <extInt_Config+0x4c0>)
 80039a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039ac:	6093      	str	r3, [r2, #8]
					break;
 80039ae:	f000 bc5d 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6f      	ldr	r2, [pc, #444]	; (8003b78 <extInt_Config+0x4d0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d107      	bne.n	80039ce <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <extInt_Config+0x4c0>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a69      	ldr	r2, [pc, #420]	; (8003b68 <extInt_Config+0x4c0>)
 80039c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80039c8:	6093      	str	r3, [r2, #8]
					break;
 80039ca:	f000 bc4f 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <extInt_Config+0x4d4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d107      	bne.n	80039ea <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <extInt_Config+0x4c0>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4a62      	ldr	r2, [pc, #392]	; (8003b68 <extInt_Config+0x4c0>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6093      	str	r3, [r2, #8]
					break;
 80039e6:	f000 bc41 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5c      	ldr	r2, [pc, #368]	; (8003b64 <extInt_Config+0x4bc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d107      	bne.n	8003a06 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80039f6:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <extInt_Config+0x4c0>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a5b      	ldr	r2, [pc, #364]	; (8003b68 <extInt_Config+0x4c0>)
 80039fc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003a00:	6093      	str	r3, [r2, #8]
					break;
 8003a02:	f000 bc33 	b.w	800426c <extInt_Config+0xbc4>
						__NOP();
 8003a06:	bf00      	nop
					break;
 8003a08:	f000 bc30 	b.w	800426c <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8003a0c:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <extInt_Config+0x4c0>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a55      	ldr	r2, [pc, #340]	; (8003b68 <extInt_Config+0x4c0>)
 8003a12:	f023 030f 	bic.w	r3, r3, #15
 8003a16:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a53      	ldr	r2, [pc, #332]	; (8003b6c <extInt_Config+0x4c4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d105      	bne.n	8003a30 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <extInt_Config+0x4c0>)
 8003a26:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <extInt_Config+0x4c0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003a2c:	f000 bc1e 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <extInt_Config+0x4c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d107      	bne.n	8003a4c <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003a3c:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <extInt_Config+0x4c0>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <extInt_Config+0x4c0>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	60d3      	str	r3, [r2, #12]
					break;
 8003a48:	f000 bc10 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a48      	ldr	r2, [pc, #288]	; (8003b74 <extInt_Config+0x4cc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d107      	bne.n	8003a68 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <extInt_Config+0x4c0>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <extInt_Config+0x4c0>)
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	60d3      	str	r3, [r2, #12]
					break;
 8003a64:	f000 bc02 	b.w	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <extInt_Config+0x4d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d106      	bne.n	8003a82 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003a74:	4b3c      	ldr	r3, [pc, #240]	; (8003b68 <extInt_Config+0x4c0>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <extInt_Config+0x4c0>)
 8003a7a:	f043 0303 	orr.w	r3, r3, #3
 8003a7e:	60d3      	str	r3, [r2, #12]
					break;
 8003a80:	e3f4      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <extInt_Config+0x4d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d106      	bne.n	8003a9c <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8003a8e:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <extInt_Config+0x4c0>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <extInt_Config+0x4c0>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	60d3      	str	r3, [r2, #12]
					break;
 8003a9a:	e3e7      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <extInt_Config+0x4bc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d106      	bne.n	8003ab6 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <extInt_Config+0x4c0>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <extInt_Config+0x4c0>)
 8003aae:	f043 0307 	orr.w	r3, r3, #7
 8003ab2:	60d3      	str	r3, [r2, #12]
					break;
 8003ab4:	e3da      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003ab6:	bf00      	nop
					break;
 8003ab8:	e3d8      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <extInt_Config+0x4c0>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <extInt_Config+0x4c0>)
 8003ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac4:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <extInt_Config+0x4c4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d104      	bne.n	8003adc <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003ad2:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <extInt_Config+0x4c0>)
 8003ad4:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <extInt_Config+0x4c0>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003ada:	e3c7      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <extInt_Config+0x4c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d106      	bne.n	8003af6 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <extInt_Config+0x4c0>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <extInt_Config+0x4c0>)
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	60d3      	str	r3, [r2, #12]
					break;
 8003af4:	e3ba      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <extInt_Config+0x4cc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d106      	bne.n	8003b10 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <extInt_Config+0x4c0>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <extInt_Config+0x4c0>)
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	60d3      	str	r3, [r2, #12]
					break;
 8003b0e:	e3ad      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <extInt_Config+0x4d0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d106      	bne.n	8003b2a <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <extInt_Config+0x4c0>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <extInt_Config+0x4c0>)
 8003b22:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003b26:	60d3      	str	r3, [r2, #12]
					break;
 8003b28:	e3a0      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <extInt_Config+0x4d4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d106      	bne.n	8003b44 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <extInt_Config+0x4c0>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <extInt_Config+0x4c0>)
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b40:	60d3      	str	r3, [r2, #12]
					break;
 8003b42:	e393      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a06      	ldr	r2, [pc, #24]	; (8003b64 <extInt_Config+0x4bc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d106      	bne.n	8003b5e <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <extInt_Config+0x4c0>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <extInt_Config+0x4c0>)
 8003b56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003b5a:	60d3      	str	r3, [r2, #12]
					break;
 8003b5c:	e386      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003b5e:	bf00      	nop
					break;
 8003b60:	e384      	b.n	800426c <extInt_Config+0xbc4>
 8003b62:	bf00      	nop
 8003b64:	40021c00 	.word	0x40021c00
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8003b80:	4b86      	ldr	r3, [pc, #536]	; (8003d9c <extInt_Config+0x6f4>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a85      	ldr	r2, [pc, #532]	; (8003d9c <extInt_Config+0x6f4>)
 8003b86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b8a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <extInt_Config+0x6f8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d104      	bne.n	8003ba2 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003b98:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <extInt_Config+0x6f4>)
 8003b9a:	4a80      	ldr	r2, [pc, #512]	; (8003d9c <extInt_Config+0x6f4>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003ba0:	e364      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7e      	ldr	r2, [pc, #504]	; (8003da4 <extInt_Config+0x6fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d106      	bne.n	8003bbc <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8003bae:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <extInt_Config+0x6f4>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <extInt_Config+0x6f4>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	60d3      	str	r3, [r2, #12]
					break;
 8003bba:	e357      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a79      	ldr	r2, [pc, #484]	; (8003da8 <extInt_Config+0x700>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d106      	bne.n	8003bd6 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003bc8:	4b74      	ldr	r3, [pc, #464]	; (8003d9c <extInt_Config+0x6f4>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <extInt_Config+0x6f4>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	60d3      	str	r3, [r2, #12]
					break;
 8003bd4:	e34a      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a73      	ldr	r2, [pc, #460]	; (8003dac <extInt_Config+0x704>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d106      	bne.n	8003bf0 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003be2:	4b6e      	ldr	r3, [pc, #440]	; (8003d9c <extInt_Config+0x6f4>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4a6d      	ldr	r2, [pc, #436]	; (8003d9c <extInt_Config+0x6f4>)
 8003be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bec:	60d3      	str	r3, [r2, #12]
					break;
 8003bee:	e33d      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <extInt_Config+0x708>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d106      	bne.n	8003c0a <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003bfc:	4b67      	ldr	r3, [pc, #412]	; (8003d9c <extInt_Config+0x6f4>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a66      	ldr	r2, [pc, #408]	; (8003d9c <extInt_Config+0x6f4>)
 8003c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c06:	60d3      	str	r3, [r2, #12]
					break;
 8003c08:	e330      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <extInt_Config+0x70c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d106      	bne.n	8003c24 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003c16:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <extInt_Config+0x6f4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4a60      	ldr	r2, [pc, #384]	; (8003d9c <extInt_Config+0x6f4>)
 8003c1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c20:	60d3      	str	r3, [r2, #12]
					break;
 8003c22:	e323      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003c24:	bf00      	nop
					break;
 8003c26:	e321      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8003c28:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <extInt_Config+0x6f4>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a5b      	ldr	r2, [pc, #364]	; (8003d9c <extInt_Config+0x6f4>)
 8003c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c32:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a59      	ldr	r2, [pc, #356]	; (8003da0 <extInt_Config+0x6f8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d104      	bne.n	8003c4a <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8003c40:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <extInt_Config+0x6f4>)
 8003c42:	4a56      	ldr	r2, [pc, #344]	; (8003d9c <extInt_Config+0x6f4>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003c48:	e310      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a54      	ldr	r2, [pc, #336]	; (8003da4 <extInt_Config+0x6fc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d106      	bne.n	8003c64 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003c56:	4b51      	ldr	r3, [pc, #324]	; (8003d9c <extInt_Config+0x6f4>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a50      	ldr	r2, [pc, #320]	; (8003d9c <extInt_Config+0x6f4>)
 8003c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c60:	60d3      	str	r3, [r2, #12]
					break;
 8003c62:	e303      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4f      	ldr	r2, [pc, #316]	; (8003da8 <extInt_Config+0x700>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d106      	bne.n	8003c7e <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003c70:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <extInt_Config+0x6f4>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a49      	ldr	r2, [pc, #292]	; (8003d9c <extInt_Config+0x6f4>)
 8003c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c7a:	60d3      	str	r3, [r2, #12]
					break;
 8003c7c:	e2f6      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a49      	ldr	r2, [pc, #292]	; (8003dac <extInt_Config+0x704>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d106      	bne.n	8003c98 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003c8a:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <extInt_Config+0x6f4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <extInt_Config+0x6f4>)
 8003c90:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c94:	60d3      	str	r3, [r2, #12]
					break;
 8003c96:	e2e9      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	; (8003db0 <extInt_Config+0x708>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d106      	bne.n	8003cb2 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003ca4:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <extInt_Config+0x6f4>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <extInt_Config+0x6f4>)
 8003caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cae:	60d3      	str	r3, [r2, #12]
					break;
 8003cb0:	e2dc      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3e      	ldr	r2, [pc, #248]	; (8003db4 <extInt_Config+0x70c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d106      	bne.n	8003ccc <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8003cbe:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <extInt_Config+0x6f4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a36      	ldr	r2, [pc, #216]	; (8003d9c <extInt_Config+0x6f4>)
 8003cc4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003cc8:	60d3      	str	r3, [r2, #12]
					break;
 8003cca:	e2cf      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003ccc:	bf00      	nop
					break;
 8003cce:	e2cd      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8003cd0:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <extInt_Config+0x6f4>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4a31      	ldr	r2, [pc, #196]	; (8003d9c <extInt_Config+0x6f4>)
 8003cd6:	f023 030f 	bic.w	r3, r3, #15
 8003cda:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <extInt_Config+0x6f8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d104      	bne.n	8003cf2 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <extInt_Config+0x6f4>)
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <extInt_Config+0x6f4>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003cf0:	e2bc      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <extInt_Config+0x6fc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d106      	bne.n	8003d0c <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <extInt_Config+0x6f4>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <extInt_Config+0x6f4>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6113      	str	r3, [r2, #16]
					break;
 8003d0a:	e2af      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <extInt_Config+0x700>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d106      	bne.n	8003d26 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <extInt_Config+0x6f4>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <extInt_Config+0x6f4>)
 8003d1e:	f043 0302 	orr.w	r3, r3, #2
 8003d22:	6113      	str	r3, [r2, #16]
					break;
 8003d24:	e2a2      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <extInt_Config+0x704>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d106      	bne.n	8003d40 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <extInt_Config+0x6f4>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <extInt_Config+0x6f4>)
 8003d38:	f043 0303 	orr.w	r3, r3, #3
 8003d3c:	6113      	str	r3, [r2, #16]
					break;
 8003d3e:	e295      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <extInt_Config+0x708>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d106      	bne.n	8003d5a <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <extInt_Config+0x6f4>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <extInt_Config+0x6f4>)
 8003d52:	f043 0304 	orr.w	r3, r3, #4
 8003d56:	6113      	str	r3, [r2, #16]
					break;
 8003d58:	e288      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <extInt_Config+0x70c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d106      	bne.n	8003d74 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <extInt_Config+0x6f4>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <extInt_Config+0x6f4>)
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	6113      	str	r3, [r2, #16]
					break;
 8003d72:	e27b      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003d74:	bf00      	nop
					break;
 8003d76:	e279      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <extInt_Config+0x6f4>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <extInt_Config+0x6f4>)
 8003d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d82:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <extInt_Config+0x6f8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d113      	bne.n	8003db8 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <extInt_Config+0x6f4>)
 8003d92:	4a02      	ldr	r2, [pc, #8]	; (8003d9c <extInt_Config+0x6f4>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003d98:	e268      	b.n	800426c <extInt_Config+0xbc4>
 8003d9a:	bf00      	nop
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40020400 	.word	0x40020400
 8003da8:	40020800 	.word	0x40020800
 8003dac:	40020c00 	.word	0x40020c00
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a83      	ldr	r2, [pc, #524]	; (8003fcc <extInt_Config+0x924>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d106      	bne.n	8003dd2 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003dc4:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <extInt_Config+0x928>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	4a81      	ldr	r2, [pc, #516]	; (8003fd0 <extInt_Config+0x928>)
 8003dca:	f043 0310 	orr.w	r3, r3, #16
 8003dce:	6113      	str	r3, [r2, #16]
					break;
 8003dd0:	e24c      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a7e      	ldr	r2, [pc, #504]	; (8003fd4 <extInt_Config+0x92c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d106      	bne.n	8003dec <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8003dde:	4b7c      	ldr	r3, [pc, #496]	; (8003fd0 <extInt_Config+0x928>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	4a7b      	ldr	r2, [pc, #492]	; (8003fd0 <extInt_Config+0x928>)
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	6113      	str	r3, [r2, #16]
					break;
 8003dea:	e23f      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a79      	ldr	r2, [pc, #484]	; (8003fd8 <extInt_Config+0x930>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d106      	bne.n	8003e06 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003df8:	4b75      	ldr	r3, [pc, #468]	; (8003fd0 <extInt_Config+0x928>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4a74      	ldr	r2, [pc, #464]	; (8003fd0 <extInt_Config+0x928>)
 8003dfe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003e02:	6113      	str	r3, [r2, #16]
					break;
 8003e04:	e232      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a73      	ldr	r2, [pc, #460]	; (8003fdc <extInt_Config+0x934>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d106      	bne.n	8003e20 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003e12:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <extInt_Config+0x928>)
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <extInt_Config+0x928>)
 8003e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1c:	6113      	str	r3, [r2, #16]
					break;
 8003e1e:	e225      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <extInt_Config+0x938>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d106      	bne.n	8003e3a <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <extInt_Config+0x928>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <extInt_Config+0x928>)
 8003e32:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003e36:	6113      	str	r3, [r2, #16]
					break;
 8003e38:	e218      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003e3a:	bf00      	nop
					break;
 8003e3c:	e216      	b.n	800426c <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8003e3e:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <extInt_Config+0x928>)
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <extInt_Config+0x928>)
 8003e44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e48:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a64      	ldr	r2, [pc, #400]	; (8003fe4 <extInt_Config+0x93c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d104      	bne.n	8003e60 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003e56:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <extInt_Config+0x928>)
 8003e58:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <extInt_Config+0x928>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003e5e:	e205      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a59      	ldr	r2, [pc, #356]	; (8003fcc <extInt_Config+0x924>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d106      	bne.n	8003e7a <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003e6c:	4b58      	ldr	r3, [pc, #352]	; (8003fd0 <extInt_Config+0x928>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4a57      	ldr	r2, [pc, #348]	; (8003fd0 <extInt_Config+0x928>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6113      	str	r3, [r2, #16]
					break;
 8003e78:	e1f8      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a54      	ldr	r2, [pc, #336]	; (8003fd4 <extInt_Config+0x92c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d106      	bne.n	8003e94 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003e86:	4b52      	ldr	r3, [pc, #328]	; (8003fd0 <extInt_Config+0x928>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	4a51      	ldr	r2, [pc, #324]	; (8003fd0 <extInt_Config+0x928>)
 8003e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e90:	6113      	str	r3, [r2, #16]
					break;
 8003e92:	e1eb      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <extInt_Config+0x930>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d106      	bne.n	8003eae <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <extInt_Config+0x928>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <extInt_Config+0x928>)
 8003ea6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003eaa:	6113      	str	r3, [r2, #16]
					break;
 8003eac:	e1de      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a49      	ldr	r2, [pc, #292]	; (8003fdc <extInt_Config+0x934>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d106      	bne.n	8003ec8 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003eba:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <extInt_Config+0x928>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <extInt_Config+0x928>)
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	6113      	str	r3, [r2, #16]
					break;
 8003ec6:	e1d1      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <extInt_Config+0x938>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d106      	bne.n	8003ee2 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003ed4:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <extInt_Config+0x928>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <extInt_Config+0x928>)
 8003eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ede:	6113      	str	r3, [r2, #16]
					break;
 8003ee0:	e1c4      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003ee2:	bf00      	nop
					break;
 8003ee4:	e1c2      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <extInt_Config+0x928>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <extInt_Config+0x928>)
 8003eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3a      	ldr	r2, [pc, #232]	; (8003fe4 <extInt_Config+0x93c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d104      	bne.n	8003f08 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8003efe:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <extInt_Config+0x928>)
 8003f00:	4a33      	ldr	r2, [pc, #204]	; (8003fd0 <extInt_Config+0x928>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003f06:	e1b1      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <extInt_Config+0x924>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d106      	bne.n	8003f22 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <extInt_Config+0x928>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a2d      	ldr	r2, [pc, #180]	; (8003fd0 <extInt_Config+0x928>)
 8003f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f1e:	6113      	str	r3, [r2, #16]
					break;
 8003f20:	e1a4      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <extInt_Config+0x92c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d106      	bne.n	8003f3c <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8003f2e:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <extInt_Config+0x928>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4a27      	ldr	r2, [pc, #156]	; (8003fd0 <extInt_Config+0x928>)
 8003f34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f38:	6113      	str	r3, [r2, #16]
					break;
 8003f3a:	e197      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <extInt_Config+0x930>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d106      	bne.n	8003f56 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <extInt_Config+0x928>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <extInt_Config+0x928>)
 8003f4e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003f52:	6113      	str	r3, [r2, #16]
					break;
 8003f54:	e18a      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <extInt_Config+0x934>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d106      	bne.n	8003f70 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <extInt_Config+0x928>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <extInt_Config+0x928>)
 8003f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6c:	6113      	str	r3, [r2, #16]
					break;
 8003f6e:	e17d      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <extInt_Config+0x938>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d106      	bne.n	8003f8a <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <extInt_Config+0x928>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <extInt_Config+0x928>)
 8003f82:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003f86:	6113      	str	r3, [r2, #16]
					break;
 8003f88:	e170      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8003f8a:	bf00      	nop
					break;
 8003f8c:	e16e      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <extInt_Config+0x928>)
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <extInt_Config+0x928>)
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <extInt_Config+0x93c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d104      	bne.n	8003fb0 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <extInt_Config+0x928>)
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <extInt_Config+0x928>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8003fae:	e15d      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <extInt_Config+0x924>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d115      	bne.n	8003fe8 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <extInt_Config+0x928>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <extInt_Config+0x928>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6153      	str	r3, [r2, #20]
					break;
 8003fc8:	e150      	b.n	800426c <extInt_Config+0xbc4>
 8003fca:	bf00      	nop
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a89      	ldr	r2, [pc, #548]	; (8004214 <extInt_Config+0xb6c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d106      	bne.n	8004002 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003ff4:	4b88      	ldr	r3, [pc, #544]	; (8004218 <extInt_Config+0xb70>)
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4a87      	ldr	r2, [pc, #540]	; (8004218 <extInt_Config+0xb70>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	6153      	str	r3, [r2, #20]
					break;
 8004000:	e134      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a84      	ldr	r2, [pc, #528]	; (800421c <extInt_Config+0xb74>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d106      	bne.n	800401c <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <extInt_Config+0xb70>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4a81      	ldr	r2, [pc, #516]	; (8004218 <extInt_Config+0xb70>)
 8004014:	f043 0303 	orr.w	r3, r3, #3
 8004018:	6153      	str	r3, [r2, #20]
					break;
 800401a:	e127      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7f      	ldr	r2, [pc, #508]	; (8004220 <extInt_Config+0xb78>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d106      	bne.n	8004036 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8004028:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <extInt_Config+0xb70>)
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4a7a      	ldr	r2, [pc, #488]	; (8004218 <extInt_Config+0xb70>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	6153      	str	r3, [r2, #20]
					break;
 8004034:	e11a      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a79      	ldr	r2, [pc, #484]	; (8004224 <extInt_Config+0xb7c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d106      	bne.n	8004050 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8004042:	4b75      	ldr	r3, [pc, #468]	; (8004218 <extInt_Config+0xb70>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4a74      	ldr	r2, [pc, #464]	; (8004218 <extInt_Config+0xb70>)
 8004048:	f043 0307 	orr.w	r3, r3, #7
 800404c:	6153      	str	r3, [r2, #20]
					break;
 800404e:	e10d      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 8004050:	bf00      	nop
					break;
 8004052:	e10b      	b.n	800426c <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8004054:	4b70      	ldr	r3, [pc, #448]	; (8004218 <extInt_Config+0xb70>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4a6f      	ldr	r2, [pc, #444]	; (8004218 <extInt_Config+0xb70>)
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <extInt_Config+0xb80>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d104      	bne.n	8004076 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <extInt_Config+0xb70>)
 800406e:	4a6a      	ldr	r2, [pc, #424]	; (8004218 <extInt_Config+0xb70>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	6153      	str	r3, [r2, #20]
 8004074:	e041      	b.n	80040fa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6b      	ldr	r2, [pc, #428]	; (800422c <extInt_Config+0xb84>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d106      	bne.n	8004090 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8004082:	4b65      	ldr	r3, [pc, #404]	; (8004218 <extInt_Config+0xb70>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4a64      	ldr	r2, [pc, #400]	; (8004218 <extInt_Config+0xb70>)
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	6153      	str	r3, [r2, #20]
 800408e:	e034      	b.n	80040fa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <extInt_Config+0xb6c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d106      	bne.n	80040aa <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800409c:	4b5e      	ldr	r3, [pc, #376]	; (8004218 <extInt_Config+0xb70>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4a5d      	ldr	r2, [pc, #372]	; (8004218 <extInt_Config+0xb70>)
 80040a2:	f043 0320 	orr.w	r3, r3, #32
 80040a6:	6153      	str	r3, [r2, #20]
 80040a8:	e027      	b.n	80040fa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5a      	ldr	r2, [pc, #360]	; (800421c <extInt_Config+0xb74>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d106      	bne.n	80040c4 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <extInt_Config+0xb70>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4a57      	ldr	r2, [pc, #348]	; (8004218 <extInt_Config+0xb70>)
 80040bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80040c0:	6153      	str	r3, [r2, #20]
 80040c2:	e01a      	b.n	80040fa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a55      	ldr	r2, [pc, #340]	; (8004220 <extInt_Config+0xb78>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d106      	bne.n	80040de <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 80040d0:	4b51      	ldr	r3, [pc, #324]	; (8004218 <extInt_Config+0xb70>)
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	4a50      	ldr	r2, [pc, #320]	; (8004218 <extInt_Config+0xb70>)
 80040d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040da:	6153      	str	r3, [r2, #20]
 80040dc:	e00d      	b.n	80040fa <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4f      	ldr	r2, [pc, #316]	; (8004224 <extInt_Config+0xb7c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d106      	bne.n	80040f8 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80040ea:	4b4b      	ldr	r3, [pc, #300]	; (8004218 <extInt_Config+0xb70>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4a4a      	ldr	r2, [pc, #296]	; (8004218 <extInt_Config+0xb70>)
 80040f0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80040f4:	6153      	str	r3, [r2, #20]
 80040f6:	e000      	b.n	80040fa <extInt_Config+0xa52>

					} else {
						__NOP();
 80040f8:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <extInt_Config+0xb70>)
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4a46      	ldr	r2, [pc, #280]	; (8004218 <extInt_Config+0xb70>)
 8004100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004104:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a46      	ldr	r2, [pc, #280]	; (8004228 <extInt_Config+0xb80>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d104      	bne.n	800411c <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <extInt_Config+0xb70>)
 8004114:	4a40      	ldr	r2, [pc, #256]	; (8004218 <extInt_Config+0xb70>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800411a:	e0a7      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a42      	ldr	r2, [pc, #264]	; (800422c <extInt_Config+0xb84>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d106      	bne.n	8004136 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <extInt_Config+0xb70>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <extInt_Config+0xb70>)
 800412e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004132:	6153      	str	r3, [r2, #20]
					break;
 8004134:	e09a      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a35      	ldr	r2, [pc, #212]	; (8004214 <extInt_Config+0xb6c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d106      	bne.n	8004150 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8004142:	4b35      	ldr	r3, [pc, #212]	; (8004218 <extInt_Config+0xb70>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <extInt_Config+0xb70>)
 8004148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414c:	6153      	str	r3, [r2, #20]
					break;
 800414e:	e08d      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a31      	ldr	r2, [pc, #196]	; (800421c <extInt_Config+0xb74>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d106      	bne.n	800416a <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800415c:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <extInt_Config+0xb70>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <extInt_Config+0xb70>)
 8004162:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004166:	6153      	str	r3, [r2, #20]
					break;
 8004168:	e080      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <extInt_Config+0xb78>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d106      	bne.n	8004184 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8004176:	4b28      	ldr	r3, [pc, #160]	; (8004218 <extInt_Config+0xb70>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4a27      	ldr	r2, [pc, #156]	; (8004218 <extInt_Config+0xb70>)
 800417c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004180:	6153      	str	r3, [r2, #20]
					break;
 8004182:	e073      	b.n	800426c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a26      	ldr	r2, [pc, #152]	; (8004224 <extInt_Config+0xb7c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d106      	bne.n	800419e <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8004190:	4b21      	ldr	r3, [pc, #132]	; (8004218 <extInt_Config+0xb70>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	4a20      	ldr	r2, [pc, #128]	; (8004218 <extInt_Config+0xb70>)
 8004196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419a:	6153      	str	r3, [r2, #20]
					break;
 800419c:	e066      	b.n	800426c <extInt_Config+0xbc4>
						__NOP();
 800419e:	bf00      	nop
					break;
 80041a0:	e064      	b.n	800426c <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <extInt_Config+0xb70>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <extInt_Config+0xb70>)
 80041a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ac:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <extInt_Config+0xb80>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d104      	bne.n	80041c4 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <extInt_Config+0xb70>)
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <extInt_Config+0xb70>)
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 80041c2:	e053      	b.n	800426c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <extInt_Config+0xb84>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d106      	bne.n	80041de <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <extInt_Config+0xb70>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4a10      	ldr	r2, [pc, #64]	; (8004218 <extInt_Config+0xb70>)
 80041d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041da:	6153      	str	r3, [r2, #20]
						break;
 80041dc:	e046      	b.n	800426c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <extInt_Config+0xb6c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d106      	bne.n	80041f8 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <extInt_Config+0xb70>)
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <extInt_Config+0xb70>)
 80041f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041f4:	6153      	str	r3, [r2, #20]
						break;
 80041f6:	e039      	b.n	800426c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <extInt_Config+0xb74>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d115      	bne.n	8004230 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <extInt_Config+0xb70>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	4a03      	ldr	r2, [pc, #12]	; (8004218 <extInt_Config+0xb70>)
 800420a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800420e:	6153      	str	r3, [r2, #20]
						break;
 8004210:	e02c      	b.n	800426c <extInt_Config+0xbc4>
 8004212:	bf00      	nop
 8004214:	40020800 	.word	0x40020800
 8004218:	40013800 	.word	0x40013800
 800421c:	40020c00 	.word	0x40020c00
 8004220:	40021000 	.word	0x40021000
 8004224:	40021c00 	.word	0x40021c00
 8004228:	40020000 	.word	0x40020000
 800422c:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <extInt_Config+0xd40>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d106      	bne.n	800424a <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800423c:	4b6b      	ldr	r3, [pc, #428]	; (80043ec <extInt_Config+0xd44>)
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	4a6a      	ldr	r2, [pc, #424]	; (80043ec <extInt_Config+0xd44>)
 8004242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004246:	6153      	str	r3, [r2, #20]
						break;
 8004248:	e010      	b.n	800426c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <extInt_Config+0xd48>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d106      	bne.n	8004264 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <extInt_Config+0xd44>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4a64      	ldr	r2, [pc, #400]	; (80043ec <extInt_Config+0xd44>)
 800425c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004260:	6153      	str	r3, [r2, #20]
						break;
 8004262:	e003      	b.n	800426c <extInt_Config+0xbc4>
							__NOP();
 8004264:	bf00      	nop
						break;
 8004266:	e001      	b.n	800426c <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8004268:	bf00      	nop
						break;
 800426a:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	791b      	ldrb	r3, [r3, #4]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d020      	beq.n	80042b6 <extInt_Config+0xc0e>
 8004274:	2b02      	cmp	r3, #2
 8004276:	dc37      	bgt.n	80042e8 <extInt_Config+0xc40>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <extInt_Config+0xbda>
 800427c:	2b01      	cmp	r3, #1
 800427e:	d00d      	beq.n	800429c <extInt_Config+0xbf4>
 8004280:	e032      	b.n	80042e8 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <extInt_Config+0xd4c>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	7912      	ldrb	r2, [r2, #4]
 800428c:	4611      	mov	r1, r2
 800428e:	2201      	movs	r2, #1
 8004290:	408a      	lsls	r2, r1
 8004292:	4611      	mov	r1, r2
 8004294:	4a57      	ldr	r2, [pc, #348]	; (80043f4 <extInt_Config+0xd4c>)
 8004296:	430b      	orrs	r3, r1
 8004298:	60d3      	str	r3, [r2, #12]

		break;
 800429a:	e027      	b.n	80042ec <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800429c:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <extInt_Config+0xd4c>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	7912      	ldrb	r2, [r2, #4]
 80042a6:	4611      	mov	r1, r2
 80042a8:	2201      	movs	r2, #1
 80042aa:	408a      	lsls	r2, r1
 80042ac:	4611      	mov	r1, r2
 80042ae:	4a51      	ldr	r2, [pc, #324]	; (80043f4 <extInt_Config+0xd4c>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6093      	str	r3, [r2, #8]

		break;
 80042b4:	e01a      	b.n	80042ec <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042b6:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <extInt_Config+0xd4c>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	7912      	ldrb	r2, [r2, #4]
 80042c0:	4611      	mov	r1, r2
 80042c2:	2201      	movs	r2, #1
 80042c4:	408a      	lsls	r2, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	4a4a      	ldr	r2, [pc, #296]	; (80043f4 <extInt_Config+0xd4c>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <extInt_Config+0xd4c>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	7912      	ldrb	r2, [r2, #4]
 80042d8:	4611      	mov	r1, r2
 80042da:	2201      	movs	r2, #1
 80042dc:	408a      	lsls	r2, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	4a44      	ldr	r2, [pc, #272]	; (80043f4 <extInt_Config+0xd4c>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6093      	str	r3, [r2, #8]

		break;
 80042e6:	e001      	b.n	80042ec <extInt_Config+0xc44>

	}default :{

		__NOP();
 80042e8:	bf00      	nop
		break;
 80042ea:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80042ec:	b672      	cpsid	i
}
 80042ee:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042f0:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <extInt_Config+0xd4c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	7912      	ldrb	r2, [r2, #4]
 80042fa:	4611      	mov	r1, r2
 80042fc:	2201      	movs	r2, #1
 80042fe:	408a      	lsls	r2, r1
 8004300:	4611      	mov	r1, r2
 8004302:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <extInt_Config+0xd4c>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d862      	bhi.n	80043d8 <extInt_Config+0xd30>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <extInt_Config+0xc70>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004359 	.word	0x08004359
 800431c:	08004361 	.word	0x08004361
 8004320:	08004369 	.word	0x08004369
 8004324:	08004371 	.word	0x08004371
 8004328:	08004379 	.word	0x08004379
 800432c:	08004381 	.word	0x08004381
 8004330:	08004389 	.word	0x08004389
 8004334:	08004391 	.word	0x08004391
 8004338:	08004399 	.word	0x08004399
 800433c:	080043a1 	.word	0x080043a1
 8004340:	080043a9 	.word	0x080043a9
 8004344:	080043b1 	.word	0x080043b1
 8004348:	080043b9 	.word	0x080043b9
 800434c:	080043c1 	.word	0x080043c1
 8004350:	080043c9 	.word	0x080043c9
 8004354:	080043d1 	.word	0x080043d1
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8004358:	2006      	movs	r0, #6
 800435a:	f7ff f987 	bl	800366c <__NVIC_EnableIRQ>
			break;
 800435e:	e03d      	b.n	80043dc <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8004360:	2007      	movs	r0, #7
 8004362:	f7ff f983 	bl	800366c <__NVIC_EnableIRQ>
			break;
 8004366:	e039      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8004368:	2008      	movs	r0, #8
 800436a:	f7ff f97f 	bl	800366c <__NVIC_EnableIRQ>
			break;
 800436e:	e035      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8004370:	2009      	movs	r0, #9
 8004372:	f7ff f97b 	bl	800366c <__NVIC_EnableIRQ>
			break;
 8004376:	e031      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8004378:	200a      	movs	r0, #10
 800437a:	f7ff f977 	bl	800366c <__NVIC_EnableIRQ>
			break;
 800437e:	e02d      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004380:	2017      	movs	r0, #23
 8004382:	f7ff f973 	bl	800366c <__NVIC_EnableIRQ>
			break;
 8004386:	e029      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004388:	2017      	movs	r0, #23
 800438a:	f7ff f96f 	bl	800366c <__NVIC_EnableIRQ>
			break;
 800438e:	e025      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004390:	2017      	movs	r0, #23
 8004392:	f7ff f96b 	bl	800366c <__NVIC_EnableIRQ>
			break;
 8004396:	e021      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004398:	2017      	movs	r0, #23
 800439a:	f7ff f967 	bl	800366c <__NVIC_EnableIRQ>
			break;
 800439e:	e01d      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043a0:	2017      	movs	r0, #23
 80043a2:	f7ff f963 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043a6:	e019      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043a8:	2028      	movs	r0, #40	; 0x28
 80043aa:	f7ff f95f 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043ae:	e015      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043b0:	2028      	movs	r0, #40	; 0x28
 80043b2:	f7ff f95b 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043b6:	e011      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043b8:	2028      	movs	r0, #40	; 0x28
 80043ba:	f7ff f957 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043be:	e00d      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043c0:	2028      	movs	r0, #40	; 0x28
 80043c2:	f7ff f953 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043c6:	e009      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043c8:	2028      	movs	r0, #40	; 0x28
 80043ca:	f7ff f94f 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043ce:	e005      	b.n	80043dc <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d0:	2028      	movs	r0, #40	; 0x28
 80043d2:	f7ff f94b 	bl	800366c <__NVIC_EnableIRQ>
			break;
 80043d6:	e001      	b.n	80043dc <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 80043d8:	bf00      	nop
			break;
 80043da:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80043dc:	b662      	cpsie	i
}
 80043de:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40013800 	.word	0x40013800
 80043f0:	40021c00 	.word	0x40021c00
 80043f4:	40013c00 	.word	0x40013c00

080043f8 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
	__NOP();
 80043fc:	bf00      	nop
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
	__NOP();
 800440c:	bf00      	nop
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
	__NOP();
 800441c:	bf00      	nop
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	__NOP();
 800442c:	bf00      	nop
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
	__NOP();
 800443c:	bf00      	nop
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
	__NOP();
 800444c:	bf00      	nop
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
	__NOP();
 800445c:	bf00      	nop
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
	__NOP();
 800446c:	bf00      	nop
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	__NOP();
 800447c:	bf00      	nop
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
	__NOP();
 800448c:	bf00      	nop
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
	__NOP();
 800449c:	bf00      	nop
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
	__NOP();
 80044ac:	bf00      	nop
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
	__NOP();
 80044bc:	bf00      	nop
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
	__NOP();
 80044cc:	bf00      	nop
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <EXTI0_IRQHandler+0x24>)
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <EXTI0_IRQHandler+0x24>)
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4a03      	ldr	r2, [pc, #12]	; (80044fc <EXTI0_IRQHandler+0x24>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 80044f4:	f7ff ff80 	bl	80043f8 <callback_extInt0>
	}
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40013c00 	.word	0x40013c00

08004500 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <EXTI1_IRQHandler+0x24>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <EXTI1_IRQHandler+0x24>)
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	4a03      	ldr	r2, [pc, #12]	; (8004524 <EXTI1_IRQHandler+0x24>)
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800451c:	f7fd f906 	bl	800172c <callback_extInt1>
	}
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013c00 	.word	0x40013c00

08004528 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <EXTI2_IRQHandler+0x24>)
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <EXTI2_IRQHandler+0x24>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <EXTI2_IRQHandler+0x24>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8004544:	f7ff ff60 	bl	8004408 <callback_extInt2>
	}
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40013c00 	.word	0x40013c00

08004550 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <EXTI3_IRQHandler+0x24>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <EXTI3_IRQHandler+0x24>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	4a03      	ldr	r2, [pc, #12]	; (8004574 <EXTI3_IRQHandler+0x24>)
 8004566:	f043 0308 	orr.w	r3, r3, #8
 800456a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800456c:	f7fd f8ee 	bl	800174c <callback_extInt3>
	}
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40013c00 	.word	0x40013c00

08004578 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <EXTI4_IRQHandler+0x24>)
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <EXTI4_IRQHandler+0x24>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4a03      	ldr	r2, [pc, #12]	; (800459c <EXTI4_IRQHandler+0x24>)
 800458e:	f043 0310 	orr.w	r3, r3, #16
 8004592:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8004594:	f7ff ff40 	bl	8004418 <callback_extInt4>
	}
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40013c00 	.word	0x40013c00

080045a0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80045a4:	4b26      	ldr	r3, [pc, #152]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 80045bc:	f7ff ff34 	bl	8004428 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80045c0:	e03c      	b.n	800463c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d8:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80045da:	f7ff ff2d 	bl	8004438 <callback_extInt6>
}
 80045de:	e02d      	b.n	800463c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 80045f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f6:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80045f8:	f7ff ff26 	bl	8004448 <callback_extInt7>
}
 80045fc:	e01e      	b.n	800463c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8004616:	f7ff ff1f 	bl	8004458 <callback_extInt8>
}
 800461a:	e00f      	b.n	800463c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <EXTI9_5_IRQHandler+0xa0>)
 800462e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004632:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8004634:	f7ff ff18 	bl	8004468 <callback_extInt9>
}
 8004638:	e000      	b.n	800463c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800463a:	bf00      	nop
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40013c00 	.word	0x40013c00

08004644 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	4a29      	ldr	r2, [pc, #164]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 800465a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8004660:	f7ff ff0a 	bl	8004478 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8004664:	e049      	b.n	80046fa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	4a22      	ldr	r2, [pc, #136]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800467c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800467e:	f7ff ff03 	bl	8004488 <callback_extInt11>
}
 8004682:	e03a      	b.n	80046fa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 8004696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800469a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800469c:	f7ff fefc 	bl	8004498 <callback_extInt12>
}
 80046a0:	e02b      	b.n	80046fa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80046a2:	4b17      	ldr	r3, [pc, #92]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	4a13      	ldr	r2, [pc, #76]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046b8:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 80046ba:	f7ff fef5 	bl	80044a8 <callback_extInt13>
}
 80046be:	e01c      	b.n	80046fa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046d6:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80046d8:	f7ff feee 	bl	80044b8 <callback_extInt14>
}
 80046dc:	e00d      	b.n	80046fa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <EXTI15_10_IRQHandler+0xbc>)
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80046f6:	f7ff fee7 	bl	80044c8 <callback_extInt15>
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40013c00 	.word	0x40013c00

08004704 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a88      	ldr	r2, [pc, #544]	; (800493c <GPIO_Config+0x238>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d106      	bne.n	800472c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800471e:	4b88      	ldr	r3, [pc, #544]	; (8004940 <GPIO_Config+0x23c>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a87      	ldr	r2, [pc, #540]	; (8004940 <GPIO_Config+0x23c>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	e03a      	b.n	80047a2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a84      	ldr	r2, [pc, #528]	; (8004944 <GPIO_Config+0x240>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d106      	bne.n	8004744 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8004736:	4b82      	ldr	r3, [pc, #520]	; (8004940 <GPIO_Config+0x23c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a81      	ldr	r2, [pc, #516]	; (8004940 <GPIO_Config+0x23c>)
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
 8004742:	e02e      	b.n	80047a2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a7f      	ldr	r2, [pc, #508]	; (8004948 <GPIO_Config+0x244>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d106      	bne.n	800475c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800474e:	4b7c      	ldr	r3, [pc, #496]	; (8004940 <GPIO_Config+0x23c>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a7b      	ldr	r2, [pc, #492]	; (8004940 <GPIO_Config+0x23c>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	e022      	b.n	80047a2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7a      	ldr	r2, [pc, #488]	; (800494c <GPIO_Config+0x248>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d106      	bne.n	8004774 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <GPIO_Config+0x23c>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <GPIO_Config+0x23c>)
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	6313      	str	r3, [r2, #48]	; 0x30
 8004772:	e016      	b.n	80047a2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a75      	ldr	r2, [pc, #468]	; (8004950 <GPIO_Config+0x24c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d106      	bne.n	800478c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800477e:	4b70      	ldr	r3, [pc, #448]	; (8004940 <GPIO_Config+0x23c>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a6f      	ldr	r2, [pc, #444]	; (8004940 <GPIO_Config+0x23c>)
 8004784:	f043 0310 	orr.w	r3, r3, #16
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	e00a      	b.n	80047a2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a70      	ldr	r2, [pc, #448]	; (8004954 <GPIO_Config+0x250>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d105      	bne.n	80047a2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <GPIO_Config+0x23c>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4a69      	ldr	r2, [pc, #420]	; (8004940 <GPIO_Config+0x23c>)
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	795b      	ldrb	r3, [r3, #5]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d143      	bne.n	8004832 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	791b      	ldrb	r3, [r3, #4]
 80047ae:	2b07      	cmp	r3, #7
 80047b0:	d81f      	bhi.n	80047f2 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	210f      	movs	r1, #15
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	400a      	ands	r2, r1
 80047d2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7a5b      	ldrb	r3, [r3, #9]
 80047de:	4619      	mov	r1, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	621a      	str	r2, [r3, #32]
 80047f0:	e01f      	b.n	8004832 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	791b      	ldrb	r3, [r3, #4]
 80047f6:	3b08      	subs	r3, #8
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004802:	210f      	movs	r1, #15
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	400a      	ands	r2, r1
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7a5b      	ldrb	r3, [r3, #9]
 8004820:	4619      	mov	r1, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	4619      	mov	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	795b      	ldrb	r3, [r3, #5]
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	791b      	ldrb	r3, [r3, #4]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2103      	movs	r1, #3
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	4619      	mov	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	400a      	ands	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7a1b      	ldrb	r3, [r3, #8]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	791b      	ldrb	r3, [r3, #4]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	791b      	ldrb	r3, [r3, #4]
 800488c:	4619      	mov	r1, r3
 800488e:	2301      	movs	r3, #1
 8004890:	408b      	lsls	r3, r1
 8004892:	43db      	mvns	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	400a      	ands	r2, r1
 800489c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	799b      	ldrb	r3, [r3, #6]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	791b      	ldrb	r3, [r3, #4]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	791b      	ldrb	r3, [r3, #4]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2103      	movs	r1, #3
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	400a      	ands	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	79db      	ldrb	r3, [r3, #7]
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	791b      	ldrb	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2103      	movs	r1, #3
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	400a      	ands	r2, r1
 800491c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68d9      	ldr	r1, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40020000 	.word	0x40020000
 8004940:	40023800 	.word	0x40023800
 8004944:	40020400 	.word	0x40020400
 8004948:	40020800 	.word	0x40020800
 800494c:	40020c00 	.word	0x40020c00
 8004950:	40021000 	.word	0x40021000
 8004954:	40021c00 	.word	0x40021c00

08004958 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10d      	bne.n	8004986 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	2301      	movs	r3, #1
 8004978:	408b      	lsls	r3, r1
 800497a:	4619      	mov	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8004984:	e00d      	b.n	80049a2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	3310      	adds	r3, #16
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	4619      	mov	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	4619      	mov	r1, r3
 80049cc:	2301      	movs	r3, #1
 80049ce:	408b      	lsls	r3, r1
 80049d0:	4619      	mov	r1, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 80049da:	e00d      	b.n	80049f8 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	3310      	adds	r3, #16
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	619a      	str	r2, [r3, #24]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	791b      	ldrb	r3, [r3, #4]
 8004a14:	461a      	mov	r2, r3
 8004a16:	2301      	movs	r3, #1
 8004a18:	4093      	lsls	r3, r2
 8004a1a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8004a24:	897b      	ldrh	r3, [r7, #10]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	40d3      	lsrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ffd8 	bl	8004a04 <GPIO_ReadPin>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff76 	bl	8004958 <GPIO_WritePin>
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <readData>:


}

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 ff9b 	bl	80069d8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68d8      	ldr	r0, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	791b      	ldrb	r3, [r3, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f001 fffd 	bl	8006aae <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 f81e 	bl	8006afe <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004ac2:	e000      	b.n	8004ac6 <readData+0x52>
		__NOP();
 8004ac4:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f6      	bne.n	8004ac4 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 ffad 	bl	8006a3a <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68d8      	ldr	r0, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	791b      	ldrb	r3, [r3, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4619      	mov	r1, r3
 8004aee:	f001 ffde 	bl	8006aae <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 ffc7 	bl	8006a8a <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 ff57 	bl	80069b4 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f002 f811 	bl	8006b32 <i2c_readDataByte>
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <readGyro_Z>:

	return GYROY_R;

}

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8004b40:	2147      	movs	r1, #71	; 0x47
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff96 	bl	8004a74 <readData>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8004b4c:	2148      	movs	r1, #72	; 0x48
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ff90 	bl	8004a74 <readData>
 8004b54:	4603      	mov	r3, r0
 8004b56:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8004b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	b21a      	sxth	r2, r3
 8004b60:	89bb      	ldrh	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d846      	bhi.n	8004bfc <readGyro_Z+0xdc>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <readGyro_Z+0x54>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004ba3 	.word	0x08004ba3
 8004b7c:	08004bc1 	.word	0x08004bc1
 8004b80:	08004bdf 	.word	0x08004bdf
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8004b84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb fce3 	bl	8000554 <__aeabi_i2d>
 8004b8e:	a325      	add	r3, pc, #148	; (adr r3, 8004c24 <readGyro_Z+0x104>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb fe72 	bl	800087c <__aeabi_ddiv>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004ba0:	e02d      	b.n	8004bfe <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8004ba2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fb fcd4 	bl	8000554 <__aeabi_i2d>
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <readGyro_Z+0xf8>)
 8004bb2:	f7fb fe63 	bl	800087c <__aeabi_ddiv>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004bbe:	e01e      	b.n	8004bfe <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8004bc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fcc5 	bl	8000554 <__aeabi_i2d>
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <readGyro_Z+0xfc>)
 8004bd0:	f7fb fe54 	bl	800087c <__aeabi_ddiv>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004bdc:	e00f      	b.n	8004bfe <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8004bde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb fcb6 	bl	8000554 <__aeabi_i2d>
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <readGyro_Z+0x100>)
 8004bee:	f7fb fe45 	bl	800087c <__aeabi_ddiv>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004bfa:	e000      	b.n	8004bfe <readGyro_Z+0xde>
		}default:{
			break;
 8004bfc:	bf00      	nop
		}

	}

	return GYROZ_R;
 8004bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c02:	f7fc f809 	bl	8000c18 <__aeabi_d2f>
 8004c06:	4603      	mov	r3, r0
 8004c08:	ee07 3a90 	vmov	s15, r3

}
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40508000 	.word	0x40508000
 8004c1c:	40408000 	.word	0x40408000
 8004c20:	40300000 	.word	0x40300000
 8004c24:	00000000 	.word	0x00000000
 8004c28:	40606000 	.word	0x40606000
 8004c2c:	00000000 	.word	0x00000000

08004c30 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8004c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c34:	b08a      	sub	sp, #40	; 0x28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004c46:	f7fb fb37 	bl	80002b8 <__aeabi_dsub>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004c5e:	f7fb fb2b 	bl	80002b8 <__aeabi_dsub>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8004c6a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8004d78 <calculation_parameter_distance+0x148>
 8004c6e:	ed97 0b08 	vldr	d0, [r7, #32]
 8004c72:	f005 fc3f 	bl	800a4f4 <pow>
 8004c76:	ec59 8b10 	vmov	r8, r9, d0
 8004c7a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8004d78 <calculation_parameter_distance+0x148>
 8004c7e:	ed97 0b06 	vldr	d0, [r7, #24]
 8004c82:	f005 fc37 	bl	800a4f4 <pow>
 8004c86:	ec53 2b10 	vmov	r2, r3, d0
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fb fb15 	bl	80002bc <__adddf3>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	ec43 2b17 	vmov	d7, r2, r3
 8004c9a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c9e:	eef0 0a67 	vmov.f32	s1, s15
 8004ca2:	f005 fc97 	bl	800a5d4 <sqrt>
 8004ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8004caa:	eef0 7a60 	vmov.f32	s15, s1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cde:	f7fb fca3 	bl	8000628 <__aeabi_dmul>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf4:	f7fb fc98 	bl	8000628 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb fada 	bl	80002b8 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8004d0e:	6979      	ldr	r1, [r7, #20]
 8004d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d14:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8004d18:	6a3c      	ldr	r4, [r7, #32]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d3c:	f7fb fc74 	bl	8000628 <__aeabi_dmul>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	461d      	mov	r5, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d52:	f7fb fc69 	bl	8000628 <__aeabi_dmul>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb faad 	bl	80002bc <__adddf3>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8004d6c:	bf00      	nop
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d76:	bf00      	nop
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	40000000 	.word	0x40000000

08004d80 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6178      	str	r0, [r7, #20]
 8004d88:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d8c:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9a:	f7fb fc45 	bl	8000628 <__aeabi_dmul>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	461d      	mov	r5, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db0:	f7fb fc3a 	bl	8000628 <__aeabi_dmul>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4620      	mov	r0, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	f7fb fa7e 	bl	80002bc <__adddf3>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004dce:	f7fb fa75 	bl	80002bc <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fd4c 	bl	800087c <__aeabi_ddiv>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8004de8:	4611      	mov	r1, r2
 8004dea:	61b9      	str	r1, [r7, #24]
 8004dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	61fb      	str	r3, [r7, #28]

	return distance;
 8004df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004dfe:	eef0 0a67 	vmov.f32	s1, s15
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bdb0      	pop	{r4, r5, r7, pc}

08004e08 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6178      	str	r0, [r7, #20]
 8004e10:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e14:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e22:	f7fb fc01 	bl	8000628 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	461d      	mov	r5, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e38:	f7fb fbf6 	bl	8000628 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb fa3a 	bl	80002bc <__adddf3>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004e56:	f7fb fa31 	bl	80002bc <__adddf3>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8004e68:	f7fb fd08 	bl	800087c <__aeabi_ddiv>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8004e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e78:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8004e80:	eef0 0a67 	vmov.f32	s1, s15
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004e8c <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a6c      	ldr	r2, [pc, #432]	; (800504c <pwm_Config+0x1c0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d106      	bne.n	8004eac <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8004e9e:	4b6c      	ldr	r3, [pc, #432]	; (8005050 <pwm_Config+0x1c4>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	4a6b      	ldr	r2, [pc, #428]	; (8005050 <pwm_Config+0x1c4>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eaa:	e030      	b.n	8004f0e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d106      	bne.n	8004ec4 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004eb6:	4b66      	ldr	r3, [pc, #408]	; (8005050 <pwm_Config+0x1c4>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4a65      	ldr	r2, [pc, #404]	; (8005050 <pwm_Config+0x1c4>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec2:	e024      	b.n	8004f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a62      	ldr	r2, [pc, #392]	; (8005054 <pwm_Config+0x1c8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d106      	bne.n	8004edc <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004ece:	4b60      	ldr	r3, [pc, #384]	; (8005050 <pwm_Config+0x1c4>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <pwm_Config+0x1c4>)
 8004ed4:	f043 0302 	orr.w	r3, r3, #2
 8004ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eda:	e018      	b.n	8004f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <pwm_Config+0x1cc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d106      	bne.n	8004ef4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <pwm_Config+0x1c4>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	4a59      	ldr	r2, [pc, #356]	; (8005050 <pwm_Config+0x1c4>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef2:	e00c      	b.n	8004f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a58      	ldr	r2, [pc, #352]	; (800505c <pwm_Config+0x1d0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d106      	bne.n	8004f0c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004efe:	4b54      	ldr	r3, [pc, #336]	; (8005050 <pwm_Config+0x1c4>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4a53      	ldr	r2, [pc, #332]	; (8005050 <pwm_Config+0x1c4>)
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0a:	e000      	b.n	8004f0e <pwm_Config+0x82>
	}
	else{
		__NOP();
 8004f0c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f1c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7d5b      	ldrb	r3, [r3, #21]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f930 	bl	800518c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa3f 	bl	80053b0 <setDuttyCycle>
 8004f32:	e005      	b.n	8004f40 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f929 	bl	800518c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fb10 	bl	8005560 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0210 	bic.w	r2, r2, #16
 8004f4e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d86f      	bhi.n	8005040 <pwm_Config+0x1b4>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <pwm_Config+0xdc>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004fdd 	.word	0x08004fdd
 8004f74:	0800500f 	.word	0x0800500f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0203 	bic.w	r2, r2, #3
 8004f86:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f96:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0208 	orr.w	r2, r2, #8
 8004fa6:	619a      	str	r2, [r3, #24]


		break;
 8004fa8:	e04b      	b.n	8005042 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fb8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004fc8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd8:	619a      	str	r2, [r3, #24]

		break;
 8004fda:	e032      	b.n	8005042 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0203 	bic.w	r2, r2, #3
 8004fea:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004ffa:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	61da      	str	r2, [r3, #28]

		break;
 800500c:	e019      	b.n	8005042 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800501c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800502c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503c:	61da      	str	r2, [r3, #28]

		break;
 800503e:	e000      	b.n	8005042 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8005040:	bf00      	nop
	}// fin del switch-case




}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40023800 	.word	0x40023800
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00

08005060 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3d      	ldr	r2, [pc, #244]	; (8005188 <enableOutput+0x104>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d13a      	bne.n	800510c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	791b      	ldrb	r3, [r3, #4]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d862      	bhi.n	8005174 <enableOutput+0xf0>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <enableOutput+0x30>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050d7 	.word	0x080050d7
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050fb 	.word	0x080050fb
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	621a      	str	r2, [r3, #32]

				break;
 80050d4:	e051      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0210 	orr.w	r2, r2, #16
 80050e4:	621a      	str	r2, [r3, #32]

				break;
 80050e6:	e048      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f6:	621a      	str	r2, [r3, #32]

				break;
 80050f8:	e03f      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005108:	621a      	str	r2, [r3, #32]

				break;
 800510a:	e036      	b.n	800517a <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	791b      	ldrb	r3, [r3, #4]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d831      	bhi.n	8005178 <enableOutput+0xf4>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <enableOutput+0x98>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513f 	.word	0x0800513f
 8005124:	08005151 	.word	0x08005151
 8005128:	08005163 	.word	0x08005163
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	621a      	str	r2, [r3, #32]

				break;
 800513c:	e01d      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0210 	orr.w	r2, r2, #16
 800514c:	621a      	str	r2, [r3, #32]

				break;
 800514e:	e014      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515e:	621a      	str	r2, [r3, #32]

				break;
 8005160:	e00b      	b.n	800517a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005170:	621a      	str	r2, [r3, #32]

				break;
 8005172:	e002      	b.n	800517a <enableOutput+0xf6>
				break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <enableOutput+0xf6>
			}

			default: {
				break;
 8005178:	bf00      	nop
			}

		}
	}
	return SET;
 800517a:	2301      	movs	r3, #1
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40010000 	.word	0x40010000

0800518c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d01a      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b14      	cmp	r3, #20
 80051b2:	d017      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b1e      	cmp	r3, #30
 80051b8:	d014      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b28      	cmp	r3, #40	; 0x28
 80051be:	d011      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b32      	cmp	r3, #50	; 0x32
 80051c4:	d00e      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b3c      	cmp	r3, #60	; 0x3c
 80051ca:	d00b      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b46      	cmp	r3, #70	; 0x46
 80051d0:	d008      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d005      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b5a      	cmp	r3, #90	; 0x5a
 80051dc:	d002      	beq.n	80051e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b64      	cmp	r3, #100	; 0x64
 80051e2:	d111      	bne.n	8005208 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	899b      	ldrh	r3, [r3, #12]
 80051e8:	461a      	mov	r2, r3
 80051ea:	0152      	lsls	r2, r2, #5
 80051ec:	1ad2      	subs	r2, r2, r3
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	4b68      	ldr	r3, [pc, #416]	; (8005398 <setFrequency+0x20c>)
 80051f8:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <setFrequency+0x20c>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c
 8005206:	e0c0      	b.n	800538a <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2ba0      	cmp	r3, #160	; 0xa0
 800520c:	d022      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2bc8      	cmp	r3, #200	; 0xc8
 8005212:	d01f      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800521a:	d01b      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005222:	d017      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800522a:	d013      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005232:	d00f      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800523a:	d00b      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005242:	d007      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800524a:	d003      	beq.n	8005254 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005252:	d114      	bne.n	800527e <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	899b      	ldrh	r3, [r3, #12]
 8005258:	461a      	mov	r2, r3
 800525a:	0092      	lsls	r2, r2, #2
 800525c:	4413      	add	r3, r2
 800525e:	461a      	mov	r2, r3
 8005260:	0091      	lsls	r1, r2, #2
 8005262:	461a      	mov	r2, r3
 8005264:	460b      	mov	r3, r1
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	b29a      	uxth	r2, r3
 800526c:	4b4a      	ldr	r3, [pc, #296]	; (8005398 <setFrequency+0x20c>)
 800526e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8005270:	4b49      	ldr	r3, [pc, #292]	; (8005398 <setFrequency+0x20c>)
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c
 800527c:	e085      	b.n	800538a <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005284:	d029      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800528c:	d025      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005294:	4293      	cmp	r3, r2
 8005296:	d020      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800529e:	d01c      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d017      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f241 7270 	movw	r2, #6000	; 0x1770
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d012      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00d      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80052c4:	d009      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f242 3228 	movw	r2, #9000	; 0x2328
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10f      	bne.n	80052fa <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	899b      	ldrh	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <setFrequency+0x20c>)
 80052ea:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80052ec:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <setFrequency+0x20c>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80052f8:	e047      	b.n	800538a <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005300:	d028      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005308:	4293      	cmp	r3, r2
 800530a:	d023      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f247 5230 	movw	r2, #30000	; 0x7530
 8005312:	4293      	cmp	r3, r2
 8005314:	d01e      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f649 4240 	movw	r2, #40000	; 0x9c40
 800531c:	4293      	cmp	r3, r2
 800531e:	d019      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005326:	4293      	cmp	r3, r2
 8005328:	d014      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a19      	ldr	r2, [pc, #100]	; (800539c <setFrequency+0x210>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <setFrequency+0x214>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <setFrequency+0x218>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <setFrequency+0x21c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10a      	bne.n	800536a <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	899a      	ldrh	r2, [r3, #12]
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <setFrequency+0x20c>)
 800535a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <setFrequency+0x20c>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c
 8005368:	e00f      	b.n	800538a <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	899b      	ldrh	r3, [r3, #12]
 800536e:	4a0f      	ldr	r2, [pc, #60]	; (80053ac <setFrequency+0x220>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	b29a      	uxth	r2, r3
 8005378:	4b07      	ldr	r3, [pc, #28]	; (8005398 <setFrequency+0x20c>)
 800537a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <setFrequency+0x20c>)
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000061c 	.word	0x2000061c
 800539c:	00011170 	.word	0x00011170
 80053a0:	00013880 	.word	0x00013880
 80053a4:	00015f90 	.word	0x00015f90
 80053a8:	000186a0 	.word	0x000186a0
 80053ac:	cccccccd 	.word	0xcccccccd

080053b0 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b08b      	sub	sp, #44	; 0x2c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	791b      	ldrb	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	f200 80c3 	bhi.w	8005548 <setDuttyCycle+0x198>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <setDuttyCycle+0x18>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	08005435 	.word	0x08005435
 80053d0:	08005491 	.word	0x08005491
 80053d4:	080054ed 	.word	0x080054ed
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	ed93 7a04 	vldr	s14, [r3, #16]
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <setDuttyCycle+0x1a4>)
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	ee17 0a90 	vmov	r0, s15
 80053f2:	f7fb f8c1 	bl	8000578 <__aeabi_f2d>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	4b55      	ldr	r3, [pc, #340]	; (8005558 <setDuttyCycle+0x1a8>)
 8005404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005408:	f7fb fa38 	bl	800087c <__aeabi_ddiv>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4610      	mov	r0, r2
 8005412:	4619      	mov	r1, r3
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	4b50      	ldr	r3, [pc, #320]	; (800555c <setDuttyCycle+0x1ac>)
 800541a:	f7fa ff4d 	bl	80002b8 <__aeabi_dsub>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681c      	ldr	r4, [r3, #0]
 800542a:	f7fb fbd5 	bl	8000bd8 <__aeabi_d2uiz>
 800542e:	4603      	mov	r3, r0
 8005430:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8005432:	e08a      	b.n	800554a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	ed93 7a04 	vldr	s14, [r3, #16]
 800543a:	4b46      	ldr	r3, [pc, #280]	; (8005554 <setDuttyCycle+0x1a4>)
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	ee17 0a90 	vmov	r0, s15
 800544e:	f7fb f893 	bl	8000578 <__aeabi_f2d>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	4b3e      	ldr	r3, [pc, #248]	; (8005558 <setDuttyCycle+0x1a8>)
 8005460:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005464:	f7fb fa0a 	bl	800087c <__aeabi_ddiv>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <setDuttyCycle+0x1ac>)
 8005476:	f7fa ff1f 	bl	80002b8 <__aeabi_dsub>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681c      	ldr	r4, [r3, #0]
 8005486:	f7fb fba7 	bl	8000bd8 <__aeabi_d2uiz>
 800548a:	4603      	mov	r3, r0
 800548c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800548e:	e05c      	b.n	800554a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	ed93 7a04 	vldr	s14, [r3, #16]
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <setDuttyCycle+0x1a4>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	ee17 0a90 	vmov	r0, s15
 80054aa:	f7fb f865 	bl	8000578 <__aeabi_f2d>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <setDuttyCycle+0x1a8>)
 80054bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054c0:	f7fb f9dc 	bl	800087c <__aeabi_ddiv>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	4b22      	ldr	r3, [pc, #136]	; (800555c <setDuttyCycle+0x1ac>)
 80054d2:	f7fa fef1 	bl	80002b8 <__aeabi_dsub>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681c      	ldr	r4, [r3, #0]
 80054e2:	f7fb fb79 	bl	8000bd8 <__aeabi_d2uiz>
 80054e6:	4603      	mov	r3, r0
 80054e8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80054ea:	e02e      	b.n	800554a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80054f2:	4b18      	ldr	r3, [pc, #96]	; (8005554 <setDuttyCycle+0x1a4>)
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005502:	ee17 0a90 	vmov	r0, s15
 8005506:	f7fb f837 	bl	8000578 <__aeabi_f2d>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <setDuttyCycle+0x1a8>)
 8005518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800551c:	f7fb f9ae 	bl	800087c <__aeabi_ddiv>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4610      	mov	r0, r2
 8005526:	4619      	mov	r1, r3
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <setDuttyCycle+0x1ac>)
 800552e:	f7fa fec3 	bl	80002b8 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681c      	ldr	r4, [r3, #0]
 800553e:	f7fb fb4b 	bl	8000bd8 <__aeabi_d2uiz>
 8005542:	4603      	mov	r3, r0
 8005544:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005546:	e000      	b.n	800554a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8005548:	bf00      	nop
	}

	}// fin del switch-case

}
 800554a:	bf00      	nop
 800554c:	372c      	adds	r7, #44	; 0x2c
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	bf00      	nop
 8005554:	2000061c 	.word	0x2000061c
 8005558:	40590000 	.word	0x40590000
 800555c:	3ff00000 	.word	0x3ff00000

08005560 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	791b      	ldrb	r3, [r3, #4]
 800556c:	2b03      	cmp	r3, #3
 800556e:	f200 80d3 	bhi.w	8005718 <setDuttyCycleAfOpt+0x1b8>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <setDuttyCycleAfOpt+0x18>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005589 	.word	0x08005589
 800557c:	080055ed 	.word	0x080055ed
 8005580:	08005651 	.word	0x08005651
 8005584:	080056b5 	.word	0x080056b5
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	edd3 7a04 	vldr	s15, [r3, #16]
 800558e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005724 <setDuttyCycleAfOpt+0x1c4>
 8005592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005596:	4b64      	ldr	r3, [pc, #400]	; (8005728 <setDuttyCycleAfOpt+0x1c8>)
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	ee17 0a90 	vmov	r0, s15
 80055aa:	f7fa ffe5 	bl	8000578 <__aeabi_f2d>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	4b5c      	ldr	r3, [pc, #368]	; (800572c <setDuttyCycleAfOpt+0x1cc>)
 80055bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c0:	f7fb f95c 	bl	800087c <__aeabi_ddiv>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	4b57      	ldr	r3, [pc, #348]	; (8005730 <setDuttyCycleAfOpt+0x1d0>)
 80055d2:	f7fa fe71 	bl	80002b8 <__aeabi_dsub>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681c      	ldr	r4, [r3, #0]
 80055e2:	f7fb faf9 	bl	8000bd8 <__aeabi_d2uiz>
 80055e6:	4603      	mov	r3, r0
 80055e8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80055ea:	e096      	b.n	800571a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80055f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005724 <setDuttyCycleAfOpt+0x1c4>
 80055f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <setDuttyCycleAfOpt+0x1c8>)
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	ee17 0a90 	vmov	r0, s15
 800560e:	f7fa ffb3 	bl	8000578 <__aeabi_f2d>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	4b43      	ldr	r3, [pc, #268]	; (800572c <setDuttyCycleAfOpt+0x1cc>)
 8005620:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005624:	f7fb f92a 	bl	800087c <__aeabi_ddiv>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <setDuttyCycleAfOpt+0x1d0>)
 8005636:	f7fa fe3f 	bl	80002b8 <__aeabi_dsub>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681c      	ldr	r4, [r3, #0]
 8005646:	f7fb fac7 	bl	8000bd8 <__aeabi_d2uiz>
 800564a:	4603      	mov	r3, r0
 800564c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800564e:	e064      	b.n	800571a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edd3 7a04 	vldr	s15, [r3, #16]
 8005656:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005724 <setDuttyCycleAfOpt+0x1c4>
 800565a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <setDuttyCycleAfOpt+0x1c8>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566e:	ee17 0a90 	vmov	r0, s15
 8005672:	f7fa ff81 	bl	8000578 <__aeabi_f2d>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4b2a      	ldr	r3, [pc, #168]	; (800572c <setDuttyCycleAfOpt+0x1cc>)
 8005684:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005688:	f7fb f8f8 	bl	800087c <__aeabi_ddiv>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <setDuttyCycleAfOpt+0x1d0>)
 800569a:	f7fa fe0d 	bl	80002b8 <__aeabi_dsub>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681c      	ldr	r4, [r3, #0]
 80056aa:	f7fb fa95 	bl	8000bd8 <__aeabi_d2uiz>
 80056ae:	4603      	mov	r3, r0
 80056b0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80056b2:	e032      	b.n	800571a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80056ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005724 <setDuttyCycleAfOpt+0x1c4>
 80056be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056c2:	4b19      	ldr	r3, [pc, #100]	; (8005728 <setDuttyCycleAfOpt+0x1c8>)
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	ee17 0a90 	vmov	r0, s15
 80056d6:	f7fa ff4f 	bl	8000578 <__aeabi_f2d>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <setDuttyCycleAfOpt+0x1cc>)
 80056e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056ec:	f7fb f8c6 	bl	800087c <__aeabi_ddiv>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <setDuttyCycleAfOpt+0x1d0>)
 80056fe:	f7fa fddb 	bl	80002b8 <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681c      	ldr	r4, [r3, #0]
 800570e:	f7fb fa63 	bl	8000bd8 <__aeabi_d2uiz>
 8005712:	4603      	mov	r3, r0
 8005714:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005716:	e000      	b.n	800571a <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8005718:	bf00      	nop
	}

	}// fin del switch-case


}
 800571a:	bf00      	nop
 800571c:	372c      	adds	r7, #44	; 0x2c
 800571e:	46bd      	mov	sp, r7
 8005720:	bd90      	pop	{r4, r7, pc}
 8005722:	bf00      	nop
 8005724:	42c80000 	.word	0x42c80000
 8005728:	2000061c 	.word	0x2000061c
 800572c:	40590000 	.word	0x40590000
 8005730:	3ff00000 	.word	0x3ff00000

08005734 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	791b      	ldrb	r3, [r3, #4]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d82f      	bhi.n	80057a4 <disableOutput+0x70>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <disableOutput+0x18>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	08005781 	.word	0x08005781
 8005758:	08005793 	.word	0x08005793
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	621a      	str	r2, [r3, #32]

			break;
 800576c:	e01b      	b.n	80057a6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0210 	bic.w	r2, r2, #16
 800577c:	621a      	str	r2, [r3, #32]

			break;
 800577e:	e012      	b.n	80057a6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800578e:	621a      	str	r2, [r3, #32]

			break;
 8005790:	e009      	b.n	80057a6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057a0:	621a      	str	r2, [r3, #32]

			break;
 80057a2:	e000      	b.n	80057a6 <disableOutput+0x72>
		}

		default: {
			break;
 80057a4:	bf00      	nop
		}
		}

	return RESET;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	791b      	ldrb	r3, [r3, #4]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d82f      	bhi.n	8005824 <PWMx_Toggle+0x70>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <PWMx_Toggle+0x18>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ef 	.word	0x080057ef
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005813 	.word	0x08005813
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f082 0202 	eor.w	r2, r2, #2
 80057ea:	621a      	str	r2, [r3, #32]

				break;
 80057ec:	e01b      	b.n	8005826 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f082 0220 	eor.w	r2, r2, #32
 80057fc:	621a      	str	r2, [r3, #32]

				break;
 80057fe:	e012      	b.n	8005826 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800580e:	621a      	str	r2, [r3, #32]

				break;
 8005810:	e009      	b.n	8005826 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8005820:	621a      	str	r2, [r3, #32]

				break;
 8005822:	e000      	b.n	8005826 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8005824:	bf00      	nop
			}
			}


}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop

08005834 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800583e:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a91      	ldr	r2, [pc, #580]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005848:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800584a:	4b8f      	ldr	r3, [pc, #572]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8005852:	4b8e      	ldr	r3, [pc, #568]	; (8005a8c <RCC_enableMaxFrequencies+0x258>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a8d      	ldr	r2, [pc, #564]	; (8005a8c <RCC_enableMaxFrequencies+0x258>)
 8005858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800585c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800585e:	4b8a      	ldr	r3, [pc, #552]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4a89      	ldr	r2, [pc, #548]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005864:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005868:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b08      	cmp	r3, #8
 800586e:	f200 82fc 	bhi.w	8005e6a <RCC_enableMaxFrequencies+0x636>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <RCC_enableMaxFrequencies+0x44>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589d 	.word	0x0800589d
 800587c:	0800593f 	.word	0x0800593f
 8005880:	080059e1 	.word	0x080059e1
 8005884:	08005a95 	.word	0x08005a95
 8005888:	08005b37 	.word	0x08005b37
 800588c:	08005bd9 	.word	0x08005bd9
 8005890:	08005c85 	.word	0x08005c85
 8005894:	08005d27 	.word	0x08005d27
 8005898:	08005dc9 	.word	0x08005dc9
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800589c:	4b7a      	ldr	r3, [pc, #488]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a79      	ldr	r2, [pc, #484]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80058a8:	4b77      	ldr	r3, [pc, #476]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a76      	ldr	r2, [pc, #472]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058ae:	f043 0310 	orr.w	r3, r3, #16
 80058b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80058b4:	4b74      	ldr	r3, [pc, #464]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80058c4:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a6f      	ldr	r2, [pc, #444]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058ca:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80058ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80058d0:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a6c      	ldr	r2, [pc, #432]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80058da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80058dc:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a69      	ldr	r2, [pc, #420]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e6:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80058e8:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a66      	ldr	r2, [pc, #408]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80058f4:	4b64      	ldr	r3, [pc, #400]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a63      	ldr	r2, [pc, #396]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80058fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005900:	4b61      	ldr	r3, [pc, #388]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a60      	ldr	r2, [pc, #384]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a5d      	ldr	r2, [pc, #372]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005916:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005918:	e000      	b.n	800591c <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 800591a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800591c:	4b5a      	ldr	r3, [pc, #360]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f8      	beq.n	800591a <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 800592e:	f023 030f 	bic.w	r3, r3, #15
 8005932:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8005934:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005936:	4a56      	ldr	r2, [pc, #344]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6013      	str	r3, [r2, #0]

			break;
 800593c:	e296      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800593e:	4b52      	ldr	r3, [pc, #328]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a51      	ldr	r2, [pc, #324]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005944:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005948:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800594a:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a4e      	ldr	r2, [pc, #312]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005950:	f043 0310 	orr.w	r3, r3, #16
 8005954:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4a4b      	ldr	r2, [pc, #300]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800595c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005964:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005966:	4b48      	ldr	r3, [pc, #288]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a47      	ldr	r2, [pc, #284]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800596c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005970:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005972:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a44      	ldr	r2, [pc, #272]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005978:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800597c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800597e:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a41      	ldr	r2, [pc, #260]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005988:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005994:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005996:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 800599c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059a0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80059a2:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ac:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80059ae:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a35      	ldr	r2, [pc, #212]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80059ba:	e000      	b.n	80059be <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 80059bc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80059be:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f8      	beq.n	80059bc <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a30      	ldr	r2, [pc, #192]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 80059d0:	f023 030f 	bic.w	r3, r3, #15
 80059d4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 80059d8:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6013      	str	r3, [r2, #0]

			break;
 80059de:	e245      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80059e0:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80059ec:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059f2:	f043 0310 	orr.w	r3, r3, #16
 80059f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a22      	ldr	r2, [pc, #136]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 80059fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a0e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8005a12:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005a1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005a2c:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a36:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a42:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a4e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005a5c:	e000      	b.n	8005a60 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8005a5e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <RCC_enableMaxFrequencies+0x254>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f8      	beq.n	8005a5e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005a72:	f023 030f 	bic.w	r3, r3, #15
 8005a76:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <RCC_enableMaxFrequencies+0x25c>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	6013      	str	r3, [r2, #0]


			break;
 8005a84:	e1f2      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	40007000 	.word	0x40007000
 8005a90:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005a94:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a78      	ldr	r2, [pc, #480]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005aa0:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a75      	ldr	r2, [pc, #468]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aa6:	f043 0310 	orr.w	r3, r3, #16
 8005aaa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005aac:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a72      	ldr	r2, [pc, #456]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ab2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005abc:	4b6f      	ldr	r3, [pc, #444]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a6e      	ldr	r2, [pc, #440]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ac2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8005ac6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005ac8:	4b6c      	ldr	r3, [pc, #432]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a6b      	ldr	r2, [pc, #428]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ace:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ad2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005ad4:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ad6:	4a69      	ldr	r2, [pc, #420]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005adc:	4b67      	ldr	r3, [pc, #412]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a66      	ldr	r2, [pc, #408]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005ae8:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4a63      	ldr	r2, [pc, #396]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a60      	ldr	r2, [pc, #384]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005afe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005b00:	4b5e      	ldr	r3, [pc, #376]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a5d      	ldr	r2, [pc, #372]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005b0c:	e000      	b.n	8005b10 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8005b0e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005b10:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f8      	beq.n	8005b0e <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005b1c:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a57      	ldr	r2, [pc, #348]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005b22:	f023 030f 	bic.w	r3, r3, #15
 8005b26:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005b28:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a54      	ldr	r2, [pc, #336]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6013      	str	r3, [r2, #0]

			break;
 8005b34:	e19a      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4a50      	ldr	r2, [pc, #320]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b40:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4a4d      	ldr	r2, [pc, #308]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b48:	f043 0310 	orr.w	r3, r3, #16
 8005b4c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4a46      	ldr	r2, [pc, #280]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b64:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005b68:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005b6a:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a43      	ldr	r2, [pc, #268]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005b74:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005b76:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b78:	4a40      	ldr	r2, [pc, #256]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005b7e:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	4a3e      	ldr	r2, [pc, #248]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005b8a:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b94:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4a38      	ldr	r2, [pc, #224]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ba0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005ba2:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a35      	ldr	r2, [pc, #212]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bac:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005bae:	e000      	b.n	8005bb2 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8005bb0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005bb2:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f8      	beq.n	8005bb0 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005bbe:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005bca:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2c      	ldr	r2, [pc, #176]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6013      	str	r3, [r2, #0]

			break;
 8005bd6:	e149      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005be2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bea:	f043 0310 	orr.w	r3, r3, #16
 8005bee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c06:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8005c0a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005c0c:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c16:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005c18:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005c2c:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c36:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c42:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005c50:	e000      	b.n	8005c54 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8005c52:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <RCC_enableMaxFrequencies+0x448>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f8      	beq.n	8005c52 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005c66:	f023 030f 	bic.w	r3, r3, #15
 8005c6a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <RCC_enableMaxFrequencies+0x44c>)
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	6013      	str	r3, [r2, #0]

			break;
 8005c78:	e0f8      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005c84:	4b83      	ldr	r3, [pc, #524]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a82      	ldr	r2, [pc, #520]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005c90:	4b80      	ldr	r3, [pc, #512]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a7f      	ldr	r2, [pc, #508]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005c9c:	4b7d      	ldr	r3, [pc, #500]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a7c      	ldr	r2, [pc, #496]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005caa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8005cac:	4b79      	ldr	r3, [pc, #484]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a78      	ldr	r2, [pc, #480]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cb2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005cb6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005cb8:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a75      	ldr	r2, [pc, #468]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005cc2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005cc4:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cc6:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005ccc:	4b71      	ldr	r3, [pc, #452]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	4a70      	ldr	r2, [pc, #448]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005cd8:	4b6e      	ldr	r3, [pc, #440]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a6d      	ldr	r2, [pc, #436]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005ce4:	4b6b      	ldr	r3, [pc, #428]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a6a      	ldr	r2, [pc, #424]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a67      	ldr	r2, [pc, #412]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005cfc:	e000      	b.n	8005d00 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8005cfe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005d00:	4b64      	ldr	r3, [pc, #400]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f8      	beq.n	8005cfe <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005d0c:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005d12:	f023 030f 	bic.w	r3, r3, #15
 8005d16:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005d18:	4b5f      	ldr	r3, [pc, #380]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5e      	ldr	r2, [pc, #376]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	6013      	str	r3, [r2, #0]

			break;
 8005d24:	e0a2      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005d26:	4b5b      	ldr	r3, [pc, #364]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4a5a      	ldr	r2, [pc, #360]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d30:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005d32:	4b58      	ldr	r3, [pc, #352]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a57      	ldr	r2, [pc, #348]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d38:	f043 0310 	orr.w	r3, r3, #16
 8005d3c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4a54      	ldr	r2, [pc, #336]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d44:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8005d4e:	4b51      	ldr	r3, [pc, #324]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4a50      	ldr	r2, [pc, #320]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d54:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8005d58:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4a4d      	ldr	r2, [pc, #308]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005d64:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005d66:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d68:	4a4a      	ldr	r2, [pc, #296]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005d6e:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4a48      	ldr	r2, [pc, #288]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d78:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005d7a:	4b46      	ldr	r3, [pc, #280]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	4a45      	ldr	r2, [pc, #276]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d84:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005d86:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4a42      	ldr	r2, [pc, #264]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d90:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005d92:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a3f      	ldr	r2, [pc, #252]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005d9e:	e000      	b.n	8005da2 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8005da0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005da2:	4b3c      	ldr	r3, [pc, #240]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f8      	beq.n	8005da0 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005dae:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a39      	ldr	r2, [pc, #228]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005db4:	f023 030f 	bic.w	r3, r3, #15
 8005db8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005dba:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	6013      	str	r3, [r2, #0]

			break;
 8005dc6:	e051      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005dc8:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4a31      	ldr	r2, [pc, #196]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a2e      	ldr	r2, [pc, #184]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005dda:	f043 0308 	orr.w	r3, r3, #8
 8005dde:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005de0:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005de6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005df0:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005df6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8005dfa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4a24      	ldr	r2, [pc, #144]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005e06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005e08:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e0a:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e26:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e32:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005e40:	e000      	b.n	8005e44 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8005e42:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f8      	beq.n	8005e42 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005e56:	f023 030f 	bic.w	r3, r3, #15
 8005e5a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <RCC_enableMaxFrequencies+0x664>)
 8005e62:	f043 0303 	orr.w	r3, r3, #3
 8005e66:	6013      	str	r3, [r2, #0]

			break;
 8005e68:	e000      	b.n	8005e6c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8005e6a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e72:	f043 0302 	orr.w	r3, r3, #2
 8005e76:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005e78:	e000      	b.n	8005e7c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8005e7a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <RCC_enableMaxFrequencies+0x660>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f8      	beq.n	8005e7a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8005e88:	f000 fd14 	bl	80068b4 <SystemCoreClockUpdate>

}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40023c00 	.word	0x40023c00

08005e9c <__NVIC_EnableIRQ>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	db0b      	blt.n	8005ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	f003 021f 	and.w	r2, r3, #31
 8005eb4:	4907      	ldr	r1, [pc, #28]	; (8005ed4 <__NVIC_EnableIRQ+0x38>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8005ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	e000e100 	.word	0xe000e100

08005ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db0a      	blt.n	8005f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	490c      	ldr	r1, [pc, #48]	; (8005f24 <__NVIC_SetPriority+0x4c>)
 8005ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef6:	0112      	lsls	r2, r2, #4
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	440b      	add	r3, r1
 8005efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f00:	e00a      	b.n	8005f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	4908      	ldr	r1, [pc, #32]	; (8005f28 <__NVIC_SetPriority+0x50>)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	0112      	lsls	r2, r2, #4
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	440b      	add	r3, r1
 8005f16:	761a      	strb	r2, [r3, #24]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000e100 	.word	0xe000e100
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f34:	b672      	cpsid	i
}
 8005f36:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a91      	ldr	r2, [pc, #580]	; (8006184 <USART_Config+0x258>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d106      	bne.n	8005f50 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8005f42:	4b91      	ldr	r3, [pc, #580]	; (8006188 <USART_Config+0x25c>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	4a90      	ldr	r2, [pc, #576]	; (8006188 <USART_Config+0x25c>)
 8005f48:	f043 0310 	orr.w	r3, r3, #16
 8005f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f4e:	e018      	b.n	8005f82 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a8d      	ldr	r2, [pc, #564]	; (800618c <USART_Config+0x260>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d106      	bne.n	8005f68 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <USART_Config+0x25c>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	4a8a      	ldr	r2, [pc, #552]	; (8006188 <USART_Config+0x25c>)
 8005f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f64:	6413      	str	r3, [r2, #64]	; 0x40
 8005f66:	e00c      	b.n	8005f82 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a88      	ldr	r2, [pc, #544]	; (8006190 <USART_Config+0x264>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d106      	bne.n	8005f80 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8005f72:	4b85      	ldr	r3, [pc, #532]	; (8006188 <USART_Config+0x25c>)
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	4a84      	ldr	r2, [pc, #528]	; (8006188 <USART_Config+0x25c>)
 8005f78:	f043 0320 	orr.w	r3, r3, #32
 8005f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f7e:	e000      	b.n	8005f82 <USART_Config+0x56>
	}
	else{
		__NOP();
 8005f80:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7a5b      	ldrb	r3, [r3, #9]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d025      	beq.n	8005fe6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7a5b      	ldrb	r3, [r3, #9]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d110      	bne.n	8005fc4 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fb0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e018      	b.n	8005ff6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e007      	b.n	8005ff6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7a1b      	ldrb	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d108      	bne.n	8006010 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	e007      	b.n	8006020 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800601e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	7a9b      	ldrb	r3, [r3, #10]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d82f      	bhi.n	8006088 <USART_Config+0x15c>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <USART_Config+0x104>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006041 	.word	0x08006041
 8006034:	08006053 	.word	0x08006053
 8006038:	08006065 	.word	0x08006065
 800603c:	08006077 	.word	0x08006077
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800604e:	611a      	str	r2, [r3, #16]
			break;
 8006050:	e023      	b.n	800609a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006060:	611a      	str	r2, [r3, #16]
			break;
 8006062:	e01a      	b.n	800609a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006072:	611a      	str	r2, [r3, #16]
			break;
 8006074:	e011      	b.n	800609a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006084:	611a      	str	r2, [r3, #16]
			break;
 8006086:	e008      	b.n	800609a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006096:	611a      	str	r2, [r3, #16]
			break;
 8006098:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681c      	ldr	r4, [r3, #0]
 80060a2:	4611      	mov	r1, r2
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8d7 	bl	8006258 <brrCalculus>
 80060aa:	4603      	mov	r3, r0
 80060ac:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	799b      	ldrb	r3, [r3, #6]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d82e      	bhi.n	8006114 <USART_Config+0x1e8>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <USART_Config+0x190>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060df 	.word	0x080060df
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	08006103 	.word	0x08006103
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	60da      	str	r2, [r3, #12]
			break;
 80060dc:	e023      	b.n	8006126 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0204 	orr.w	r2, r2, #4
 80060ec:	60da      	str	r2, [r3, #12]
			break;
 80060ee:	e01a      	b.n	8006126 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 020c 	orr.w	r2, r2, #12
 80060fe:	60da      	str	r2, [r3, #12]
			break;
 8006100:	e011      	b.n	8006126 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 020c 	bic.w	r2, r2, #12
 8006110:	60da      	str	r2, [r3, #12]
			break;
 8006112:	e008      	b.n	8006126 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 020c 	bic.w	r2, r2, #12
 8006122:	60da      	str	r2, [r3, #12]
			break;
 8006124:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	799b      	ldrb	r3, [r3, #6]
 800612a:	2b03      	cmp	r3, #3
 800612c:	d008      	beq.n	8006140 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613c:	60da      	str	r2, [r3, #12]
 800613e:	e007      	b.n	8006150 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	795b      	ldrb	r3, [r3, #5]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d139      	bne.n	80061cc <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0220 	orr.w	r2, r2, #32
 8006166:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a05      	ldr	r2, [pc, #20]	; (8006184 <USART_Config+0x258>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d110      	bne.n	8006194 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8006172:	2025      	movs	r0, #37	; 0x25
 8006174:	f7ff fe92 	bl	8005e9c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8006178:	2101      	movs	r1, #1
 800617a:	2025      	movs	r0, #37	; 0x25
 800617c:	f7ff feac 	bl	8005ed8 <__NVIC_SetPriority>
 8006180:	e02c      	b.n	80061dc <USART_Config+0x2b0>
 8006182:	bf00      	nop
 8006184:	40011000 	.word	0x40011000
 8006188:	40023800 	.word	0x40023800
 800618c:	40004400 	.word	0x40004400
 8006190:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2c      	ldr	r2, [pc, #176]	; (800624c <USART_Config+0x320>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d107      	bne.n	80061ae <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800619e:	2026      	movs	r0, #38	; 0x26
 80061a0:	f7ff fe7c 	bl	8005e9c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 80061a4:	2101      	movs	r1, #1
 80061a6:	2026      	movs	r0, #38	; 0x26
 80061a8:	f7ff fe96 	bl	8005ed8 <__NVIC_SetPriority>
 80061ac:	e016      	b.n	80061dc <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a27      	ldr	r2, [pc, #156]	; (8006250 <USART_Config+0x324>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d107      	bne.n	80061c8 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80061b8:	2047      	movs	r0, #71	; 0x47
 80061ba:	f7ff fe6f 	bl	8005e9c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 80061be:	2101      	movs	r1, #1
 80061c0:	2047      	movs	r0, #71	; 0x47
 80061c2:	f7ff fe89 	bl	8005ed8 <__NVIC_SetPriority>
 80061c6:	e009      	b.n	80061dc <USART_Config+0x2b0>
		}
		else{
				__NOP();
 80061c8:	bf00      	nop
 80061ca:	e007      	b.n	80061dc <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0220 	bic.w	r2, r2, #32
 80061da:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d124      	bne.n	800622e <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061f2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a16      	ldr	r2, [pc, #88]	; (8006254 <USART_Config+0x328>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d103      	bne.n	8006206 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80061fe:	2025      	movs	r0, #37	; 0x25
 8006200:	f7ff fe4c 	bl	8005e9c <__NVIC_EnableIRQ>
 8006204:	e01b      	b.n	800623e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a10      	ldr	r2, [pc, #64]	; (800624c <USART_Config+0x320>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8006210:	2026      	movs	r0, #38	; 0x26
 8006212:	f7ff fe43 	bl	8005e9c <__NVIC_EnableIRQ>
 8006216:	e012      	b.n	800623e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <USART_Config+0x324>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d103      	bne.n	800622a <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8006222:	2047      	movs	r0, #71	; 0x47
 8006224:	f7ff fe3a 	bl	8005e9c <__NVIC_EnableIRQ>
 8006228:	e009      	b.n	800623e <USART_Config+0x312>
		}
		else{
				__NOP();
 800622a:	bf00      	nop
 800622c:	e007      	b.n	800623e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800623c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800623e:	b662      	cpsie	i
}
 8006240:	bf00      	nop
	}

	__enable_irq();
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bd90      	pop	{r4, r7, pc}
 800624a:	bf00      	nop
 800624c:	40004400 	.word	0x40004400
 8006250:	40011400 	.word	0x40011400
 8006254:	40011000 	.word	0x40011000

08006258 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	79db      	ldrb	r3, [r3, #7]
 8006266:	2b03      	cmp	r3, #3
 8006268:	f200 8217 	bhi.w	800669a <brrCalculus+0x442>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <brrCalculus+0x1c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006285 	.word	0x08006285
 8006278:	0800637f 	.word	0x0800637f
 800627c:	08006499 	.word	0x08006499
 8006280:	080065a1 	.word	0x080065a1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8006284:	4980      	ldr	r1, [pc, #512]	; (8006488 <brrCalculus+0x230>)
 8006286:	a37c      	add	r3, pc, #496	; (adr r3, 8006478 <brrCalculus+0x220>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	ee17 0a90 	vmov	r0, s15
 800629e:	f7fa f96b 	bl	8000578 <__aeabi_f2d>
 80062a2:	4b79      	ldr	r3, [pc, #484]	; (8006488 <brrCalculus+0x230>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f9be 	bl	8000628 <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4975      	ldr	r1, [pc, #468]	; (8006488 <brrCalculus+0x230>)
 80062b2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80062b6:	4b74      	ldr	r3, [pc, #464]	; (8006488 <brrCalculus+0x230>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	f7fa fc62 	bl	8000b88 <__aeabi_d2iz>
 80062c4:	4603      	mov	r3, r0
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	4b70      	ldr	r3, [pc, #448]	; (800648c <brrCalculus+0x234>)
 80062ca:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80062cc:	4b6e      	ldr	r3, [pc, #440]	; (8006488 <brrCalculus+0x230>)
 80062ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80062d2:	4b6d      	ldr	r3, [pc, #436]	; (8006488 <brrCalculus+0x230>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	4610      	mov	r0, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	f7fa fc54 	bl	8000b88 <__aeabi_d2iz>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fa f936 	bl	8000554 <__aeabi_i2d>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4620      	mov	r0, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	f7f9 ffe2 	bl	80002b8 <__aeabi_dsub>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	f7fa fc8c 	bl	8000c18 <__aeabi_d2f>
 8006300:	4603      	mov	r3, r0
 8006302:	4a63      	ldr	r2, [pc, #396]	; (8006490 <brrCalculus+0x238>)
 8006304:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8006306:	4b62      	ldr	r3, [pc, #392]	; (8006490 <brrCalculus+0x238>)
 8006308:	edd3 7a00 	vldr	s15, [r3]
 800630c:	2004      	movs	r0, #4
 800630e:	eeb0 0a67 	vmov.f32	s0, s15
 8006312:	f000 fa6d 	bl	80067f0 <roundToNDecimals>
 8006316:	eef0 7a40 	vmov.f32	s15, s0
 800631a:	4b5d      	ldr	r3, [pc, #372]	; (8006490 <brrCalculus+0x238>)
 800631c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8006320:	4b5b      	ldr	r3, [pc, #364]	; (8006490 <brrCalculus+0x238>)
 8006322:	edd3 7a00 	vldr	s15, [r3]
 8006326:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800632a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800632e:	4b58      	ldr	r3, [pc, #352]	; (8006490 <brrCalculus+0x238>)
 8006330:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8006334:	4b56      	ldr	r3, [pc, #344]	; (8006490 <brrCalculus+0x238>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7fa f91d 	bl	8000578 <__aeabi_f2d>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	ec43 2b10 	vmov	d0, r2, r3
 8006346:	f004 f833 	bl	800a3b0 <round>
 800634a:	ec53 2b10 	vmov	r2, r3, d0
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	f7fa fc61 	bl	8000c18 <__aeabi_d2f>
 8006356:	4603      	mov	r3, r0
 8006358:	4a4d      	ldr	r2, [pc, #308]	; (8006490 <brrCalculus+0x238>)
 800635a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800635c:	4b4b      	ldr	r3, [pc, #300]	; (800648c <brrCalculus+0x234>)
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	b29a      	uxth	r2, r3
 8006364:	4b4a      	ldr	r3, [pc, #296]	; (8006490 <brrCalculus+0x238>)
 8006366:	edd3 7a00 	vldr	s15, [r3]
 800636a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636e:	ee17 3a90 	vmov	r3, s15
 8006372:	b29b      	uxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	4b46      	ldr	r3, [pc, #280]	; (8006494 <brrCalculus+0x23c>)
 800637a:	801a      	strh	r2, [r3, #0]


		break;
 800637c:	e18f      	b.n	800669e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800637e:	4942      	ldr	r1, [pc, #264]	; (8006488 <brrCalculus+0x230>)
 8006380:	a33f      	add	r3, pc, #252	; (adr r3, 8006480 <brrCalculus+0x228>)
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006394:	ee17 0a90 	vmov	r0, s15
 8006398:	f7fa f8ee 	bl	8000578 <__aeabi_f2d>
 800639c:	4b3a      	ldr	r3, [pc, #232]	; (8006488 <brrCalculus+0x230>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7fa f941 	bl	8000628 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4937      	ldr	r1, [pc, #220]	; (8006488 <brrCalculus+0x230>)
 80063ac:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80063b0:	4b35      	ldr	r3, [pc, #212]	; (8006488 <brrCalculus+0x230>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fa fbe5 	bl	8000b88 <__aeabi_d2iz>
 80063be:	4603      	mov	r3, r0
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	4b32      	ldr	r3, [pc, #200]	; (800648c <brrCalculus+0x234>)
 80063c4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80063c6:	4b30      	ldr	r3, [pc, #192]	; (8006488 <brrCalculus+0x230>)
 80063c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80063cc:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <brrCalculus+0x230>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	4610      	mov	r0, r2
 80063d4:	4619      	mov	r1, r3
 80063d6:	f7fa fbd7 	bl	8000b88 <__aeabi_d2iz>
 80063da:	4603      	mov	r3, r0
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa f8b9 	bl	8000554 <__aeabi_i2d>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7f9 ff65 	bl	80002b8 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fc0f 	bl	8000c18 <__aeabi_d2f>
 80063fa:	4603      	mov	r3, r0
 80063fc:	4a24      	ldr	r2, [pc, #144]	; (8006490 <brrCalculus+0x238>)
 80063fe:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8006400:	4b23      	ldr	r3, [pc, #140]	; (8006490 <brrCalculus+0x238>)
 8006402:	edd3 7a00 	vldr	s15, [r3]
 8006406:	2004      	movs	r0, #4
 8006408:	eeb0 0a67 	vmov.f32	s0, s15
 800640c:	f000 f9f0 	bl	80067f0 <roundToNDecimals>
 8006410:	eef0 7a40 	vmov.f32	s15, s0
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <brrCalculus+0x238>)
 8006416:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <brrCalculus+0x238>)
 800641c:	edd3 7a00 	vldr	s15, [r3]
 8006420:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8006424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <brrCalculus+0x238>)
 800642a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <brrCalculus+0x238>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f7fa f8a0 	bl	8000578 <__aeabi_f2d>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	ec43 2b10 	vmov	d0, r2, r3
 8006440:	f003 ffb6 	bl	800a3b0 <round>
 8006444:	ec53 2b10 	vmov	r2, r3, d0
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	f7fa fbe4 	bl	8000c18 <__aeabi_d2f>
 8006450:	4603      	mov	r3, r0
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <brrCalculus+0x238>)
 8006454:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <brrCalculus+0x234>)
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	b29a      	uxth	r2, r3
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <brrCalculus+0x238>)
 8006460:	edd3 7a00 	vldr	s15, [r3]
 8006464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006468:	ee17 3a90 	vmov	r3, s15
 800646c:	b29b      	uxth	r3, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	b29a      	uxth	r2, r3
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <brrCalculus+0x23c>)
 8006474:	801a      	strh	r2, [r3, #0]


		break;
 8006476:	e112      	b.n	800669e <brrCalculus+0x446>
 8006478:	b4e81b4f 	.word	0xb4e81b4f
 800647c:	3edb4e81 	.word	0x3edb4e81
 8006480:	b4e81b4f 	.word	0xb4e81b4f
 8006484:	3ecb4e81 	.word	0x3ecb4e81
 8006488:	20000628 	.word	0x20000628
 800648c:	20000620 	.word	0x20000620
 8006490:	20000624 	.word	0x20000624
 8006494:	2000061e 	.word	0x2000061e
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8006498:	4989      	ldr	r1, [pc, #548]	; (80066c0 <brrCalculus+0x468>)
 800649a:	a385      	add	r3, pc, #532	; (adr r3, 80066b0 <brrCalculus+0x458>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ee17 0a90 	vmov	r0, s15
 80064b2:	f7fa f861 	bl	8000578 <__aeabi_f2d>
 80064b6:	4b82      	ldr	r3, [pc, #520]	; (80066c0 <brrCalculus+0x468>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7fa f8b4 	bl	8000628 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	497e      	ldr	r1, [pc, #504]	; (80066c0 <brrCalculus+0x468>)
 80064c6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80064ca:	4b7d      	ldr	r3, [pc, #500]	; (80066c0 <brrCalculus+0x468>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	4610      	mov	r0, r2
 80064d2:	4619      	mov	r1, r3
 80064d4:	f7fa fb58 	bl	8000b88 <__aeabi_d2iz>
 80064d8:	4603      	mov	r3, r0
 80064da:	b29a      	uxth	r2, r3
 80064dc:	4b79      	ldr	r3, [pc, #484]	; (80066c4 <brrCalculus+0x46c>)
 80064de:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80064e0:	4b77      	ldr	r3, [pc, #476]	; (80066c0 <brrCalculus+0x468>)
 80064e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80064e6:	4b76      	ldr	r3, [pc, #472]	; (80066c0 <brrCalculus+0x468>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	f7fa fb4a 	bl	8000b88 <__aeabi_d2iz>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fa f82c 	bl	8000554 <__aeabi_i2d>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4620      	mov	r0, r4
 8006502:	4629      	mov	r1, r5
 8006504:	f7f9 fed8 	bl	80002b8 <__aeabi_dsub>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f7fa fb82 	bl	8000c18 <__aeabi_d2f>
 8006514:	4603      	mov	r3, r0
 8006516:	4a6c      	ldr	r2, [pc, #432]	; (80066c8 <brrCalculus+0x470>)
 8006518:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800651a:	4b6b      	ldr	r3, [pc, #428]	; (80066c8 <brrCalculus+0x470>)
 800651c:	edd3 7a00 	vldr	s15, [r3]
 8006520:	2004      	movs	r0, #4
 8006522:	eeb0 0a67 	vmov.f32	s0, s15
 8006526:	f000 f963 	bl	80067f0 <roundToNDecimals>
 800652a:	eef0 7a40 	vmov.f32	s15, s0
 800652e:	4b66      	ldr	r3, [pc, #408]	; (80066c8 <brrCalculus+0x470>)
 8006530:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8006534:	4b64      	ldr	r3, [pc, #400]	; (80066c8 <brrCalculus+0x470>)
 8006536:	edd3 7a00 	vldr	s15, [r3]
 800653a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800653e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006542:	4b61      	ldr	r3, [pc, #388]	; (80066c8 <brrCalculus+0x470>)
 8006544:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8006548:	4b5f      	ldr	r3, [pc, #380]	; (80066c8 <brrCalculus+0x470>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7fa f813 	bl	8000578 <__aeabi_f2d>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	ec43 2b10 	vmov	d0, r2, r3
 800655a:	f003 ff29 	bl	800a3b0 <round>
 800655e:	ec51 0b10 	vmov	r0, r1, d0
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	4b59      	ldr	r3, [pc, #356]	; (80066cc <brrCalculus+0x474>)
 8006568:	f7f9 fea8 	bl	80002bc <__adddf3>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f7fa fb50 	bl	8000c18 <__aeabi_d2f>
 8006578:	4603      	mov	r3, r0
 800657a:	4a53      	ldr	r2, [pc, #332]	; (80066c8 <brrCalculus+0x470>)
 800657c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800657e:	4b51      	ldr	r3, [pc, #324]	; (80066c4 <brrCalculus+0x46c>)
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	b29a      	uxth	r2, r3
 8006586:	4b50      	ldr	r3, [pc, #320]	; (80066c8 <brrCalculus+0x470>)
 8006588:	edd3 7a00 	vldr	s15, [r3]
 800658c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006590:	ee17 3a90 	vmov	r3, s15
 8006594:	b29b      	uxth	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b29a      	uxth	r2, r3
 800659a:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <brrCalculus+0x478>)
 800659c:	801a      	strh	r2, [r3, #0]


		break;
 800659e:	e07e      	b.n	800669e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80065a0:	4947      	ldr	r1, [pc, #284]	; (80066c0 <brrCalculus+0x468>)
 80065a2:	a345      	add	r3, pc, #276	; (adr r3, 80066b8 <brrCalculus+0x460>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	ee17 0a90 	vmov	r0, s15
 80065ba:	f7f9 ffdd 	bl	8000578 <__aeabi_f2d>
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <brrCalculus+0x468>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7fa f830 	bl	8000628 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	493c      	ldr	r1, [pc, #240]	; (80066c0 <brrCalculus+0x468>)
 80065ce:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80065d2:	4b3b      	ldr	r3, [pc, #236]	; (80066c0 <brrCalculus+0x468>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	f7fa fad4 	bl	8000b88 <__aeabi_d2iz>
 80065e0:	4603      	mov	r3, r0
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <brrCalculus+0x46c>)
 80065e6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80065e8:	4b35      	ldr	r3, [pc, #212]	; (80066c0 <brrCalculus+0x468>)
 80065ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80065ee:	4b34      	ldr	r3, [pc, #208]	; (80066c0 <brrCalculus+0x468>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7fa fac6 	bl	8000b88 <__aeabi_d2iz>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ffa8 	bl	8000554 <__aeabi_i2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fe54 	bl	80002b8 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	f7fa fafe 	bl	8000c18 <__aeabi_d2f>
 800661c:	4603      	mov	r3, r0
 800661e:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <brrCalculus+0x470>)
 8006620:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8006622:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <brrCalculus+0x470>)
 8006624:	edd3 7a00 	vldr	s15, [r3]
 8006628:	2004      	movs	r0, #4
 800662a:	eeb0 0a67 	vmov.f32	s0, s15
 800662e:	f000 f8df 	bl	80067f0 <roundToNDecimals>
 8006632:	eef0 7a40 	vmov.f32	s15, s0
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <brrCalculus+0x470>)
 8006638:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800663c:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <brrCalculus+0x470>)
 800663e:	edd3 7a00 	vldr	s15, [r3]
 8006642:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8006646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800664a:	4b1f      	ldr	r3, [pc, #124]	; (80066c8 <brrCalculus+0x470>)
 800664c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8006650:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <brrCalculus+0x470>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7f9 ff8f 	bl	8000578 <__aeabi_f2d>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	ec43 2b10 	vmov	d0, r2, r3
 8006662:	f003 fea5 	bl	800a3b0 <round>
 8006666:	ec53 2b10 	vmov	r2, r3, d0
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	f7fa fad3 	bl	8000c18 <__aeabi_d2f>
 8006672:	4603      	mov	r3, r0
 8006674:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <brrCalculus+0x470>)
 8006676:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006678:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <brrCalculus+0x46c>)
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	b29a      	uxth	r2, r3
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <brrCalculus+0x470>)
 8006682:	edd3 7a00 	vldr	s15, [r3]
 8006686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668a:	ee17 3a90 	vmov	r3, s15
 800668e:	b29b      	uxth	r3, r3
 8006690:	4313      	orrs	r3, r2
 8006692:	b29a      	uxth	r2, r3
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <brrCalculus+0x478>)
 8006696:	801a      	strh	r2, [r3, #0]


		break;
 8006698:	e001      	b.n	800669e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800669a:	bf00      	nop
		break;
 800669c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <brrCalculus+0x478>)
 80066a0:	881b      	ldrh	r3, [r3, #0]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bdb0      	pop	{r4, r5, r7, pc}
 80066aa:	bf00      	nop
 80066ac:	f3af 8000 	nop.w
 80066b0:	789abcdf 	.word	0x789abcdf
 80066b4:	3ec23456 	.word	0x3ec23456
 80066b8:	789abcdf 	.word	0x789abcdf
 80066bc:	3ea23456 	.word	0x3ea23456
 80066c0:	20000628 	.word	0x20000628
 80066c4:	20000620 	.word	0x20000620
 80066c8:	20000624 	.word	0x20000624
 80066cc:	3ff00000 	.word	0x3ff00000
 80066d0:	2000061e 	.word	0x2000061e

080066d4 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80066de:	e000      	b.n	80066e2 <writeChar+0xe>
		__NOP();
 80066e0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f7      	beq.n	80066e0 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	605a      	str	r2, [r3, #4]

}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800670e:	e008      	b.n	8006722 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff ffdc 	bl	80066d4 <writeChar>
		msgToSend ++ ;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f2      	bne.n	8006710 <writeMsg+0xc>
	}
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
	__NOP();
 8006738:	bf00      	nop
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
	__NOP();
 8006748:	bf00      	nop
}
 800674a:	bf00      	nop
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	return auxRxData;
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <getRxData+0x14>)
 800675a:	781b      	ldrb	r3, [r3, #0]
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000630 	.word	0x20000630

0800676c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <USART2_IRQHandler+0x24>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d006      	beq.n	800678a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <USART2_IRQHandler+0x24>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <USART2_IRQHandler+0x28>)
 8006784:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8006786:	f7ff ffd5 	bl	8006734 <usart2Rx_Callback>
	}

}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40004400 	.word	0x40004400
 8006794:	20000630 	.word	0x20000630

08006798 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <USART1_IRQHandler+0x24>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d006      	beq.n	80067b6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <USART1_IRQHandler+0x24>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <USART1_IRQHandler+0x28>)
 80067b0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80067b2:	f7fa ff81 	bl	80016b8 <usart1Rx_Callback>
	}
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40011000 	.word	0x40011000
 80067c0:	20000630 	.word	0x20000630

080067c4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <USART6_IRQHandler+0x24>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <USART6_IRQHandler+0x24>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b04      	ldr	r3, [pc, #16]	; (80067ec <USART6_IRQHandler+0x28>)
 80067dc:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80067de:	f7ff ffb1 	bl	8006744 <usart6Rx_Callback>
	}

}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40011400 	.word	0x40011400
 80067ec:	20000630 	.word	0x20000630

080067f0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80067fa:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 80067fc:	6838      	ldr	r0, [r7, #0]
 80067fe:	f7f9 fea9 	bl	8000554 <__aeabi_i2d>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	ec43 2b11 	vmov	d1, r2, r3
 800680a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006888 <roundToNDecimals+0x98>
 800680e:	f003 fe71 	bl	800a4f4 <pow>
 8006812:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7f9 feae 	bl	8000578 <__aeabi_f2d>
 800681c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006820:	f7f9 ff02 	bl	8000628 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4610      	mov	r0, r2
 800682a:	4619      	mov	r1, r3
 800682c:	f7fa f9f4 	bl	8000c18 <__aeabi_d2f>
 8006830:	4603      	mov	r3, r0
 8006832:	607b      	str	r3, [r7, #4]

    number = round(number);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7f9 fe9f 	bl	8000578 <__aeabi_f2d>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	ec43 2b10 	vmov	d0, r2, r3
 8006842:	f003 fdb5 	bl	800a3b0 <round>
 8006846:	ec53 2b10 	vmov	r2, r3, d0
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	f7fa f9e3 	bl	8000c18 <__aeabi_d2f>
 8006852:	4603      	mov	r3, r0
 8006854:	607b      	str	r3, [r7, #4]

    number /= factor;
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7f9 fe8e 	bl	8000578 <__aeabi_f2d>
 800685c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006860:	f7fa f80c 	bl	800087c <__aeabi_ddiv>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f7fa f9d4 	bl	8000c18 <__aeabi_d2f>
 8006870:	4603      	mov	r3, r0
 8006872:	607b      	str	r3, [r7, #4]

    return number;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	ee07 3a90 	vmov	s15, r3
}
 800687a:	eeb0 0a67 	vmov.f32	s0, s15
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	f3af 8000 	nop.w
 8006888:	00000000 	.word	0x00000000
 800688c:	40240000 	.word	0x40240000

08006890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <SystemInit+0x20>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <SystemInit+0x20>)
 800689c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00

080068b4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	2302      	movs	r3, #2
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	2302      	movs	r3, #2
 80068cc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80068ce:	4b34      	ldr	r3, [pc, #208]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d011      	beq.n	8006902 <SystemCoreClockUpdate+0x4e>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d844      	bhi.n	800696e <SystemCoreClockUpdate+0xba>
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <SystemCoreClockUpdate+0x3e>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d004      	beq.n	80068fa <SystemCoreClockUpdate+0x46>
 80068f0:	e03d      	b.n	800696e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80068f2:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 80068f4:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <SystemCoreClockUpdate+0xf4>)
 80068f6:	601a      	str	r2, [r3, #0]
      break;
 80068f8:	e03d      	b.n	8006976 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80068fa:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 80068fc:	4a2b      	ldr	r2, [pc, #172]	; (80069ac <SystemCoreClockUpdate+0xf8>)
 80068fe:	601a      	str	r2, [r3, #0]
      break;
 8006900:	e039      	b.n	8006976 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	0d9b      	lsrs	r3, r3, #22
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006916:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800691e:	4a23      	ldr	r2, [pc, #140]	; (80069ac <SystemCoreClockUpdate+0xf8>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006928:	6852      	ldr	r2, [r2, #4]
 800692a:	0992      	lsrs	r2, r2, #6
 800692c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e00b      	b.n	8006950 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <SystemCoreClockUpdate+0xf4>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006942:	6852      	ldr	r2, [r2, #4]
 8006944:	0992      	lsrs	r2, r2, #6
 8006946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006950:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	3301      	adds	r3, #1
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 800696a:	6013      	str	r3, [r2, #0]
      break;
 800696c:	e003      	b.n	8006976 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 8006970:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <SystemCoreClockUpdate+0xf4>)
 8006972:	601a      	str	r2, [r3, #0]
      break;
 8006974:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <SystemCoreClockUpdate+0xec>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <SystemCoreClockUpdate+0xfc>)
 8006982:	5cd3      	ldrb	r3, [r2, r3]
 8006984:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006986:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <SystemCoreClockUpdate+0xf0>)
 8006992:	6013      	str	r3, [r2, #0]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40023800 	.word	0x40023800
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	00f42400 	.word	0x00f42400
 80069ac:	017d7840 	.word	0x017d7840
 80069b0:	0800c994 	.word	0x0800c994

080069b4 <i2c_stopTransaction>:

}


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ca:	601a      	str	r2, [r3, #0]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7a1b      	ldrb	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f6:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80069f8:	e000      	b.n	80069fc <i2c_startTransaction+0x24>
		__NOP();
 80069fa:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f7      	bne.n	80069fa <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a18:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006a1a:	e000      	b.n	8006a1e <i2c_startTransaction+0x46>
		__NOP();
 8006a1c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f7      	beq.n	8006a1c <i2c_startTransaction+0x44>
	}
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7a1b      	ldrb	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a58:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a68:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006a6a:	e000      	b.n	8006a6e <i2c_reStartTransaction+0x34>
		__NOP();
 8006a6c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f7      	beq.n	8006a6c <i2c_reStartTransaction+0x32>
	}
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
 8006aba:	4613      	mov	r3, r2
 8006abc:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	005a      	lsls	r2, r3, #1
 8006ac6:	78bb      	ldrb	r3, [r7, #2]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8006ad0:	e000      	b.n	8006ad4 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8006ad2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f7      	beq.n	8006ad2 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	73fb      	strb	r3, [r7, #15]

}
 8006af2:	bf00      	nop
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8006b12:	e000      	b.n	8006b16 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8006b14:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f7      	beq.n	8006b14 <i2c_sendMemoryAddress+0x16>
	}
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <i2c_readDataByte>:
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
		__NOP();
	}
}

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8006b3a:	e000      	b.n	8006b3e <i2c_readDataByte+0xc>
		__NOP();
 8006b3c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f7      	beq.n	8006b3c <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	799b      	ldrb	r3, [r3, #6]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <__errno>:
 8006b68:	4b01      	ldr	r3, [pc, #4]	; (8006b70 <__errno+0x8>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000010 	.word	0x20000010

08006b74 <__libc_init_array>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	4d0d      	ldr	r5, [pc, #52]	; (8006bac <__libc_init_array+0x38>)
 8006b78:	4c0d      	ldr	r4, [pc, #52]	; (8006bb0 <__libc_init_array+0x3c>)
 8006b7a:	1b64      	subs	r4, r4, r5
 8006b7c:	10a4      	asrs	r4, r4, #2
 8006b7e:	2600      	movs	r6, #0
 8006b80:	42a6      	cmp	r6, r4
 8006b82:	d109      	bne.n	8006b98 <__libc_init_array+0x24>
 8006b84:	4d0b      	ldr	r5, [pc, #44]	; (8006bb4 <__libc_init_array+0x40>)
 8006b86:	4c0c      	ldr	r4, [pc, #48]	; (8006bb8 <__libc_init_array+0x44>)
 8006b88:	f005 fdde 	bl	800c748 <_init>
 8006b8c:	1b64      	subs	r4, r4, r5
 8006b8e:	10a4      	asrs	r4, r4, #2
 8006b90:	2600      	movs	r6, #0
 8006b92:	42a6      	cmp	r6, r4
 8006b94:	d105      	bne.n	8006ba2 <__libc_init_array+0x2e>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9c:	4798      	blx	r3
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	e7ee      	b.n	8006b80 <__libc_init_array+0xc>
 8006ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba6:	4798      	blx	r3
 8006ba8:	3601      	adds	r6, #1
 8006baa:	e7f2      	b.n	8006b92 <__libc_init_array+0x1e>
 8006bac:	0800d018 	.word	0x0800d018
 8006bb0:	0800d018 	.word	0x0800d018
 8006bb4:	0800d018 	.word	0x0800d018
 8006bb8:	0800d01c 	.word	0x0800d01c

08006bbc <malloc>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <malloc+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f000 b877 	b.w	8006cb4 <_malloc_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000010 	.word	0x20000010

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_free_r>:
 8006bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bde:	2900      	cmp	r1, #0
 8006be0:	d044      	beq.n	8006c6c <_free_r+0x90>
 8006be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be6:	9001      	str	r0, [sp, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f1a1 0404 	sub.w	r4, r1, #4
 8006bee:	bfb8      	it	lt
 8006bf0:	18e4      	addlt	r4, r4, r3
 8006bf2:	f001 fc9f 	bl	8008534 <__malloc_lock>
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <_free_r+0x94>)
 8006bf8:	9801      	ldr	r0, [sp, #4]
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	b933      	cbnz	r3, 8006c0c <_free_r+0x30>
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	b003      	add	sp, #12
 8006c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c08:	f001 bc9a 	b.w	8008540 <__malloc_unlock>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d908      	bls.n	8006c22 <_free_r+0x46>
 8006c10:	6825      	ldr	r5, [r4, #0]
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1949      	addeq	r1, r1, r5
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	e7ed      	b.n	8006bfe <_free_r+0x22>
 8006c22:	461a      	mov	r2, r3
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b10b      	cbz	r3, 8006c2c <_free_r+0x50>
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d9fa      	bls.n	8006c22 <_free_r+0x46>
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	1855      	adds	r5, r2, r1
 8006c30:	42a5      	cmp	r5, r4
 8006c32:	d10b      	bne.n	8006c4c <_free_r+0x70>
 8006c34:	6824      	ldr	r4, [r4, #0]
 8006c36:	4421      	add	r1, r4
 8006c38:	1854      	adds	r4, r2, r1
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	d1e0      	bne.n	8006c02 <_free_r+0x26>
 8006c40:	681c      	ldr	r4, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	4421      	add	r1, r4
 8006c48:	6011      	str	r1, [r2, #0]
 8006c4a:	e7da      	b.n	8006c02 <_free_r+0x26>
 8006c4c:	d902      	bls.n	8006c54 <_free_r+0x78>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6003      	str	r3, [r0, #0]
 8006c52:	e7d6      	b.n	8006c02 <_free_r+0x26>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf04      	itt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	bf04      	itt	eq
 8006c64:	1949      	addeq	r1, r1, r5
 8006c66:	6021      	streq	r1, [r4, #0]
 8006c68:	6054      	str	r4, [r2, #4]
 8006c6a:	e7ca      	b.n	8006c02 <_free_r+0x26>
 8006c6c:	b003      	add	sp, #12
 8006c6e:	bd30      	pop	{r4, r5, pc}
 8006c70:	20000634 	.word	0x20000634

08006c74 <sbrk_aligned>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4e0e      	ldr	r6, [pc, #56]	; (8006cb0 <sbrk_aligned+0x3c>)
 8006c78:	460c      	mov	r4, r1
 8006c7a:	6831      	ldr	r1, [r6, #0]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	b911      	cbnz	r1, 8006c86 <sbrk_aligned+0x12>
 8006c80:	f000 fcf6 	bl	8007670 <_sbrk_r>
 8006c84:	6030      	str	r0, [r6, #0]
 8006c86:	4621      	mov	r1, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 fcf1 	bl	8007670 <_sbrk_r>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d00a      	beq.n	8006ca8 <sbrk_aligned+0x34>
 8006c92:	1cc4      	adds	r4, r0, #3
 8006c94:	f024 0403 	bic.w	r4, r4, #3
 8006c98:	42a0      	cmp	r0, r4
 8006c9a:	d007      	beq.n	8006cac <sbrk_aligned+0x38>
 8006c9c:	1a21      	subs	r1, r4, r0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 fce6 	bl	8007670 <_sbrk_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d101      	bne.n	8006cac <sbrk_aligned+0x38>
 8006ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8006cac:	4620      	mov	r0, r4
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	20000638 	.word	0x20000638

08006cb4 <_malloc_r>:
 8006cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb8:	1ccd      	adds	r5, r1, #3
 8006cba:	f025 0503 	bic.w	r5, r5, #3
 8006cbe:	3508      	adds	r5, #8
 8006cc0:	2d0c      	cmp	r5, #12
 8006cc2:	bf38      	it	cc
 8006cc4:	250c      	movcc	r5, #12
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	4607      	mov	r7, r0
 8006cca:	db01      	blt.n	8006cd0 <_malloc_r+0x1c>
 8006ccc:	42a9      	cmp	r1, r5
 8006cce:	d905      	bls.n	8006cdc <_malloc_r+0x28>
 8006cd0:	230c      	movs	r3, #12
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	4e2e      	ldr	r6, [pc, #184]	; (8006d98 <_malloc_r+0xe4>)
 8006cde:	f001 fc29 	bl	8008534 <__malloc_lock>
 8006ce2:	6833      	ldr	r3, [r6, #0]
 8006ce4:	461c      	mov	r4, r3
 8006ce6:	bb34      	cbnz	r4, 8006d36 <_malloc_r+0x82>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4638      	mov	r0, r7
 8006cec:	f7ff ffc2 	bl	8006c74 <sbrk_aligned>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	d14d      	bne.n	8006d92 <_malloc_r+0xde>
 8006cf6:	6834      	ldr	r4, [r6, #0]
 8006cf8:	4626      	mov	r6, r4
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	d140      	bne.n	8006d80 <_malloc_r+0xcc>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	4631      	mov	r1, r6
 8006d02:	4638      	mov	r0, r7
 8006d04:	eb04 0803 	add.w	r8, r4, r3
 8006d08:	f000 fcb2 	bl	8007670 <_sbrk_r>
 8006d0c:	4580      	cmp	r8, r0
 8006d0e:	d13a      	bne.n	8006d86 <_malloc_r+0xd2>
 8006d10:	6821      	ldr	r1, [r4, #0]
 8006d12:	3503      	adds	r5, #3
 8006d14:	1a6d      	subs	r5, r5, r1
 8006d16:	f025 0503 	bic.w	r5, r5, #3
 8006d1a:	3508      	adds	r5, #8
 8006d1c:	2d0c      	cmp	r5, #12
 8006d1e:	bf38      	it	cc
 8006d20:	250c      	movcc	r5, #12
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ffa5 	bl	8006c74 <sbrk_aligned>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d02b      	beq.n	8006d86 <_malloc_r+0xd2>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	442b      	add	r3, r5
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	e00e      	b.n	8006d54 <_malloc_r+0xa0>
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	1b52      	subs	r2, r2, r5
 8006d3a:	d41e      	bmi.n	8006d7a <_malloc_r+0xc6>
 8006d3c:	2a0b      	cmp	r2, #11
 8006d3e:	d916      	bls.n	8006d6e <_malloc_r+0xba>
 8006d40:	1961      	adds	r1, r4, r5
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	6025      	str	r5, [r4, #0]
 8006d46:	bf18      	it	ne
 8006d48:	6059      	strne	r1, [r3, #4]
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	bf08      	it	eq
 8006d4e:	6031      	streq	r1, [r6, #0]
 8006d50:	5162      	str	r2, [r4, r5]
 8006d52:	604b      	str	r3, [r1, #4]
 8006d54:	4638      	mov	r0, r7
 8006d56:	f104 060b 	add.w	r6, r4, #11
 8006d5a:	f001 fbf1 	bl	8008540 <__malloc_unlock>
 8006d5e:	f026 0607 	bic.w	r6, r6, #7
 8006d62:	1d23      	adds	r3, r4, #4
 8006d64:	1af2      	subs	r2, r6, r3
 8006d66:	d0b6      	beq.n	8006cd6 <_malloc_r+0x22>
 8006d68:	1b9b      	subs	r3, r3, r6
 8006d6a:	50a3      	str	r3, [r4, r2]
 8006d6c:	e7b3      	b.n	8006cd6 <_malloc_r+0x22>
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	bf0c      	ite	eq
 8006d74:	6032      	streq	r2, [r6, #0]
 8006d76:	605a      	strne	r2, [r3, #4]
 8006d78:	e7ec      	b.n	8006d54 <_malloc_r+0xa0>
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	6864      	ldr	r4, [r4, #4]
 8006d7e:	e7b2      	b.n	8006ce6 <_malloc_r+0x32>
 8006d80:	4634      	mov	r4, r6
 8006d82:	6876      	ldr	r6, [r6, #4]
 8006d84:	e7b9      	b.n	8006cfa <_malloc_r+0x46>
 8006d86:	230c      	movs	r3, #12
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f001 fbd8 	bl	8008540 <__malloc_unlock>
 8006d90:	e7a1      	b.n	8006cd6 <_malloc_r+0x22>
 8006d92:	6025      	str	r5, [r4, #0]
 8006d94:	e7de      	b.n	8006d54 <_malloc_r+0xa0>
 8006d96:	bf00      	nop
 8006d98:	20000634 	.word	0x20000634

08006d9c <__cvt>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	ec55 4b10 	vmov	r4, r5, d0
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	460e      	mov	r6, r1
 8006da8:	4619      	mov	r1, r3
 8006daa:	462b      	mov	r3, r5
 8006dac:	bfbb      	ittet	lt
 8006dae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006db2:	461d      	movlt	r5, r3
 8006db4:	2300      	movge	r3, #0
 8006db6:	232d      	movlt	r3, #45	; 0x2d
 8006db8:	700b      	strb	r3, [r1, #0]
 8006dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dc0:	4691      	mov	r9, r2
 8006dc2:	f023 0820 	bic.w	r8, r3, #32
 8006dc6:	bfbc      	itt	lt
 8006dc8:	4622      	movlt	r2, r4
 8006dca:	4614      	movlt	r4, r2
 8006dcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd0:	d005      	beq.n	8006dde <__cvt+0x42>
 8006dd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dd6:	d100      	bne.n	8006dda <__cvt+0x3e>
 8006dd8:	3601      	adds	r6, #1
 8006dda:	2102      	movs	r1, #2
 8006ddc:	e000      	b.n	8006de0 <__cvt+0x44>
 8006dde:	2103      	movs	r1, #3
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	ab02      	add	r3, sp, #8
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	ec45 4b10 	vmov	d0, r4, r5
 8006dec:	4653      	mov	r3, sl
 8006dee:	4632      	mov	r2, r6
 8006df0:	f000 fd8e 	bl	8007910 <_dtoa_r>
 8006df4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006df8:	4607      	mov	r7, r0
 8006dfa:	d102      	bne.n	8006e02 <__cvt+0x66>
 8006dfc:	f019 0f01 	tst.w	r9, #1
 8006e00:	d022      	beq.n	8006e48 <__cvt+0xac>
 8006e02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e06:	eb07 0906 	add.w	r9, r7, r6
 8006e0a:	d110      	bne.n	8006e2e <__cvt+0x92>
 8006e0c:	783b      	ldrb	r3, [r7, #0]
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d10a      	bne.n	8006e28 <__cvt+0x8c>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 8006e1e:	b918      	cbnz	r0, 8006e28 <__cvt+0x8c>
 8006e20:	f1c6 0601 	rsb	r6, r6, #1
 8006e24:	f8ca 6000 	str.w	r6, [sl]
 8006e28:	f8da 3000 	ldr.w	r3, [sl]
 8006e2c:	4499      	add	r9, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fe5f 	bl	8000af8 <__aeabi_dcmpeq>
 8006e3a:	b108      	cbz	r0, 8006e40 <__cvt+0xa4>
 8006e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e40:	2230      	movs	r2, #48	; 0x30
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	454b      	cmp	r3, r9
 8006e46:	d307      	bcc.n	8006e58 <__cvt+0xbc>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e4c:	1bdb      	subs	r3, r3, r7
 8006e4e:	4638      	mov	r0, r7
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	b004      	add	sp, #16
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e7f0      	b.n	8006e42 <__cvt+0xa6>

08006e60 <__exponent>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	4603      	mov	r3, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	bfb8      	it	lt
 8006e68:	4249      	neglt	r1, r1
 8006e6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e6e:	bfb4      	ite	lt
 8006e70:	222d      	movlt	r2, #45	; 0x2d
 8006e72:	222b      	movge	r2, #43	; 0x2b
 8006e74:	2909      	cmp	r1, #9
 8006e76:	7042      	strb	r2, [r0, #1]
 8006e78:	dd2a      	ble.n	8006ed0 <__exponent+0x70>
 8006e7a:	f10d 0407 	add.w	r4, sp, #7
 8006e7e:	46a4      	mov	ip, r4
 8006e80:	270a      	movs	r7, #10
 8006e82:	46a6      	mov	lr, r4
 8006e84:	460a      	mov	r2, r1
 8006e86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e8e:	3530      	adds	r5, #48	; 0x30
 8006e90:	2a63      	cmp	r2, #99	; 0x63
 8006e92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	dcf1      	bgt.n	8006e82 <__exponent+0x22>
 8006e9e:	3130      	adds	r1, #48	; 0x30
 8006ea0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ea8:	1c44      	adds	r4, r0, #1
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4561      	cmp	r1, ip
 8006eae:	d30a      	bcc.n	8006ec6 <__exponent+0x66>
 8006eb0:	f10d 0209 	add.w	r2, sp, #9
 8006eb4:	eba2 020e 	sub.w	r2, r2, lr
 8006eb8:	4565      	cmp	r5, ip
 8006eba:	bf88      	it	hi
 8006ebc:	2200      	movhi	r2, #0
 8006ebe:	4413      	add	r3, r2
 8006ec0:	1a18      	subs	r0, r3, r0
 8006ec2:	b003      	add	sp, #12
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ece:	e7ed      	b.n	8006eac <__exponent+0x4c>
 8006ed0:	2330      	movs	r3, #48	; 0x30
 8006ed2:	3130      	adds	r1, #48	; 0x30
 8006ed4:	7083      	strb	r3, [r0, #2]
 8006ed6:	70c1      	strb	r1, [r0, #3]
 8006ed8:	1d03      	adds	r3, r0, #4
 8006eda:	e7f1      	b.n	8006ec0 <__exponent+0x60>

08006edc <_printf_float>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	ed2d 8b02 	vpush	{d8}
 8006ee4:	b08d      	sub	sp, #52	; 0x34
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eec:	4616      	mov	r6, r2
 8006eee:	461f      	mov	r7, r3
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f001 fafb 	bl	80084ec <_localeconv_r>
 8006ef6:	f8d0 a000 	ldr.w	sl, [r0]
 8006efa:	4650      	mov	r0, sl
 8006efc:	f7f9 f97a 	bl	80001f4 <strlen>
 8006f00:	2300      	movs	r3, #0
 8006f02:	930a      	str	r3, [sp, #40]	; 0x28
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	9305      	str	r3, [sp, #20]
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f10:	3307      	adds	r3, #7
 8006f12:	f023 0307 	bic.w	r3, r3, #7
 8006f16:	f103 0208 	add.w	r2, r3, #8
 8006f1a:	f8c8 2000 	str.w	r2, [r8]
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f2e:	9307      	str	r3, [sp, #28]
 8006f30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f34:	ee08 0a10 	vmov	s16, r0
 8006f38:	4b9f      	ldr	r3, [pc, #636]	; (80071b8 <_printf_float+0x2dc>)
 8006f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	f7f9 fe0b 	bl	8000b5c <__aeabi_dcmpun>
 8006f46:	bb88      	cbnz	r0, 8006fac <_printf_float+0xd0>
 8006f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f4c:	4b9a      	ldr	r3, [pc, #616]	; (80071b8 <_printf_float+0x2dc>)
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	f7f9 fde5 	bl	8000b20 <__aeabi_dcmple>
 8006f56:	bb48      	cbnz	r0, 8006fac <_printf_float+0xd0>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fdd4 	bl	8000b0c <__aeabi_dcmplt>
 8006f64:	b110      	cbz	r0, 8006f6c <_printf_float+0x90>
 8006f66:	232d      	movs	r3, #45	; 0x2d
 8006f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6c:	4b93      	ldr	r3, [pc, #588]	; (80071bc <_printf_float+0x2e0>)
 8006f6e:	4894      	ldr	r0, [pc, #592]	; (80071c0 <_printf_float+0x2e4>)
 8006f70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f74:	bf94      	ite	ls
 8006f76:	4698      	movls	r8, r3
 8006f78:	4680      	movhi	r8, r0
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	f023 0204 	bic.w	r2, r3, #4
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	9700      	str	r7, [sp, #0]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f9d8 	bl	8007348 <_printf_common>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f040 8090 	bne.w	80070be <_printf_float+0x1e2>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b00d      	add	sp, #52	; 0x34
 8006fa4:	ecbd 8b02 	vpop	{d8}
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4642      	mov	r2, r8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	f7f9 fdd2 	bl	8000b5c <__aeabi_dcmpun>
 8006fb8:	b140      	cbz	r0, 8006fcc <_printf_float+0xf0>
 8006fba:	464b      	mov	r3, r9
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfbc      	itt	lt
 8006fc0:	232d      	movlt	r3, #45	; 0x2d
 8006fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fc6:	487f      	ldr	r0, [pc, #508]	; (80071c4 <_printf_float+0x2e8>)
 8006fc8:	4b7f      	ldr	r3, [pc, #508]	; (80071c8 <_printf_float+0x2ec>)
 8006fca:	e7d1      	b.n	8006f70 <_printf_float+0x94>
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fd2:	9206      	str	r2, [sp, #24]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	d13f      	bne.n	8007058 <_printf_float+0x17c>
 8006fd8:	2306      	movs	r3, #6
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	6861      	ldr	r1, [r4, #4]
 8006fe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8006fea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fee:	ab09      	add	r3, sp, #36	; 0x24
 8006ff0:	ec49 8b10 	vmov	d0, r8, r9
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff fecd 	bl	8006d9c <__cvt>
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	2b47      	cmp	r3, #71	; 0x47
 8007008:	4680      	mov	r8, r0
 800700a:	d108      	bne.n	800701e <_printf_float+0x142>
 800700c:	1cc8      	adds	r0, r1, #3
 800700e:	db02      	blt.n	8007016 <_printf_float+0x13a>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	4299      	cmp	r1, r3
 8007014:	dd41      	ble.n	800709a <_printf_float+0x1be>
 8007016:	f1ab 0b02 	sub.w	fp, fp, #2
 800701a:	fa5f fb8b 	uxtb.w	fp, fp
 800701e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007022:	d820      	bhi.n	8007066 <_printf_float+0x18a>
 8007024:	3901      	subs	r1, #1
 8007026:	465a      	mov	r2, fp
 8007028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800702c:	9109      	str	r1, [sp, #36]	; 0x24
 800702e:	f7ff ff17 	bl	8006e60 <__exponent>
 8007032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007034:	1813      	adds	r3, r2, r0
 8007036:	2a01      	cmp	r2, #1
 8007038:	4681      	mov	r9, r0
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	dc02      	bgt.n	8007044 <_printf_float+0x168>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	07d2      	lsls	r2, r2, #31
 8007042:	d501      	bpl.n	8007048 <_printf_float+0x16c>
 8007044:	3301      	adds	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800704c:	2b00      	cmp	r3, #0
 800704e:	d09c      	beq.n	8006f8a <_printf_float+0xae>
 8007050:	232d      	movs	r3, #45	; 0x2d
 8007052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007056:	e798      	b.n	8006f8a <_printf_float+0xae>
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2a47      	cmp	r2, #71	; 0x47
 800705c:	d1be      	bne.n	8006fdc <_printf_float+0x100>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1bc      	bne.n	8006fdc <_printf_float+0x100>
 8007062:	2301      	movs	r3, #1
 8007064:	e7b9      	b.n	8006fda <_printf_float+0xfe>
 8007066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800706a:	d118      	bne.n	800709e <_printf_float+0x1c2>
 800706c:	2900      	cmp	r1, #0
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	dd0b      	ble.n	800708a <_printf_float+0x1ae>
 8007072:	6121      	str	r1, [r4, #16]
 8007074:	b913      	cbnz	r3, 800707c <_printf_float+0x1a0>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d502      	bpl.n	8007082 <_printf_float+0x1a6>
 800707c:	3301      	adds	r3, #1
 800707e:	440b      	add	r3, r1
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	65a1      	str	r1, [r4, #88]	; 0x58
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	e7de      	b.n	8007048 <_printf_float+0x16c>
 800708a:	b913      	cbnz	r3, 8007092 <_printf_float+0x1b6>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	07d2      	lsls	r2, r2, #31
 8007090:	d501      	bpl.n	8007096 <_printf_float+0x1ba>
 8007092:	3302      	adds	r3, #2
 8007094:	e7f4      	b.n	8007080 <_printf_float+0x1a4>
 8007096:	2301      	movs	r3, #1
 8007098:	e7f2      	b.n	8007080 <_printf_float+0x1a4>
 800709a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a0:	4299      	cmp	r1, r3
 80070a2:	db05      	blt.n	80070b0 <_printf_float+0x1d4>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6121      	str	r1, [r4, #16]
 80070a8:	07d8      	lsls	r0, r3, #31
 80070aa:	d5ea      	bpl.n	8007082 <_printf_float+0x1a6>
 80070ac:	1c4b      	adds	r3, r1, #1
 80070ae:	e7e7      	b.n	8007080 <_printf_float+0x1a4>
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfd4      	ite	le
 80070b4:	f1c1 0202 	rsble	r2, r1, #2
 80070b8:	2201      	movgt	r2, #1
 80070ba:	4413      	add	r3, r2
 80070bc:	e7e0      	b.n	8007080 <_printf_float+0x1a4>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	055a      	lsls	r2, r3, #21
 80070c2:	d407      	bmi.n	80070d4 <_printf_float+0x1f8>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	4642      	mov	r2, r8
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	d12c      	bne.n	800712c <_printf_float+0x250>
 80070d2:	e764      	b.n	8006f9e <_printf_float+0xc2>
 80070d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070d8:	f240 80e0 	bls.w	800729c <_printf_float+0x3c0>
 80070dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fd08 	bl	8000af8 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d034      	beq.n	8007156 <_printf_float+0x27a>
 80070ec:	4a37      	ldr	r2, [pc, #220]	; (80071cc <_printf_float+0x2f0>)
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f af51 	beq.w	8006f9e <_printf_float+0xc2>
 80070fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007100:	429a      	cmp	r2, r3
 8007102:	db02      	blt.n	800710a <_printf_float+0x22e>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	07d8      	lsls	r0, r3, #31
 8007108:	d510      	bpl.n	800712c <_printf_float+0x250>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af41 	beq.w	8006f9e <_printf_float+0xc2>
 800711c:	f04f 0800 	mov.w	r8, #0
 8007120:	f104 091a 	add.w	r9, r4, #26
 8007124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	4543      	cmp	r3, r8
 800712a:	dc09      	bgt.n	8007140 <_printf_float+0x264>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	079b      	lsls	r3, r3, #30
 8007130:	f100 8105 	bmi.w	800733e <_printf_float+0x462>
 8007134:	68e0      	ldr	r0, [r4, #12]
 8007136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007138:	4298      	cmp	r0, r3
 800713a:	bfb8      	it	lt
 800713c:	4618      	movlt	r0, r3
 800713e:	e730      	b.n	8006fa2 <_printf_float+0xc6>
 8007140:	2301      	movs	r3, #1
 8007142:	464a      	mov	r2, r9
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f af27 	beq.w	8006f9e <_printf_float+0xc2>
 8007150:	f108 0801 	add.w	r8, r8, #1
 8007154:	e7e6      	b.n	8007124 <_printf_float+0x248>
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc39      	bgt.n	80071d0 <_printf_float+0x2f4>
 800715c:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <_printf_float+0x2f0>)
 800715e:	2301      	movs	r3, #1
 8007160:	4631      	mov	r1, r6
 8007162:	4628      	mov	r0, r5
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	f43f af19 	beq.w	8006f9e <_printf_float+0xc2>
 800716c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007170:	4313      	orrs	r3, r2
 8007172:	d102      	bne.n	800717a <_printf_float+0x29e>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07d9      	lsls	r1, r3, #31
 8007178:	d5d8      	bpl.n	800712c <_printf_float+0x250>
 800717a:	ee18 3a10 	vmov	r3, s16
 800717e:	4652      	mov	r2, sl
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	f43f af09 	beq.w	8006f9e <_printf_float+0xc2>
 800718c:	f04f 0900 	mov.w	r9, #0
 8007190:	f104 0a1a 	add.w	sl, r4, #26
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	425b      	negs	r3, r3
 8007198:	454b      	cmp	r3, r9
 800719a:	dc01      	bgt.n	80071a0 <_printf_float+0x2c4>
 800719c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719e:	e792      	b.n	80070c6 <_printf_float+0x1ea>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4652      	mov	r2, sl
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f aef7 	beq.w	8006f9e <_printf_float+0xc2>
 80071b0:	f109 0901 	add.w	r9, r9, #1
 80071b4:	e7ee      	b.n	8007194 <_printf_float+0x2b8>
 80071b6:	bf00      	nop
 80071b8:	7fefffff 	.word	0x7fefffff
 80071bc:	0800c9a8 	.word	0x0800c9a8
 80071c0:	0800c9ac 	.word	0x0800c9ac
 80071c4:	0800c9b4 	.word	0x0800c9b4
 80071c8:	0800c9b0 	.word	0x0800c9b0
 80071cc:	0800cbd9 	.word	0x0800cbd9
 80071d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071d4:	429a      	cmp	r2, r3
 80071d6:	bfa8      	it	ge
 80071d8:	461a      	movge	r2, r3
 80071da:	2a00      	cmp	r2, #0
 80071dc:	4691      	mov	r9, r2
 80071de:	dc37      	bgt.n	8007250 <_printf_float+0x374>
 80071e0:	f04f 0b00 	mov.w	fp, #0
 80071e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e8:	f104 021a 	add.w	r2, r4, #26
 80071ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	eba3 0309 	sub.w	r3, r3, r9
 80071f4:	455b      	cmp	r3, fp
 80071f6:	dc33      	bgt.n	8007260 <_printf_float+0x384>
 80071f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071fc:	429a      	cmp	r2, r3
 80071fe:	db3b      	blt.n	8007278 <_printf_float+0x39c>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07da      	lsls	r2, r3, #31
 8007204:	d438      	bmi.n	8007278 <_printf_float+0x39c>
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	9a05      	ldr	r2, [sp, #20]
 800720a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720c:	1a9a      	subs	r2, r3, r2
 800720e:	eba3 0901 	sub.w	r9, r3, r1
 8007212:	4591      	cmp	r9, r2
 8007214:	bfa8      	it	ge
 8007216:	4691      	movge	r9, r2
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	dc35      	bgt.n	800728a <_printf_float+0x3ae>
 800721e:	f04f 0800 	mov.w	r8, #0
 8007222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007226:	f104 0a1a 	add.w	sl, r4, #26
 800722a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	eba3 0309 	sub.w	r3, r3, r9
 8007234:	4543      	cmp	r3, r8
 8007236:	f77f af79 	ble.w	800712c <_printf_float+0x250>
 800723a:	2301      	movs	r3, #1
 800723c:	4652      	mov	r2, sl
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f aeaa 	beq.w	8006f9e <_printf_float+0xc2>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	e7ec      	b.n	800722a <_printf_float+0x34e>
 8007250:	4613      	mov	r3, r2
 8007252:	4631      	mov	r1, r6
 8007254:	4642      	mov	r2, r8
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	d1c0      	bne.n	80071e0 <_printf_float+0x304>
 800725e:	e69e      	b.n	8006f9e <_printf_float+0xc2>
 8007260:	2301      	movs	r3, #1
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	9205      	str	r2, [sp, #20]
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f ae97 	beq.w	8006f9e <_printf_float+0xc2>
 8007270:	9a05      	ldr	r2, [sp, #20]
 8007272:	f10b 0b01 	add.w	fp, fp, #1
 8007276:	e7b9      	b.n	80071ec <_printf_float+0x310>
 8007278:	ee18 3a10 	vmov	r3, s16
 800727c:	4652      	mov	r2, sl
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d1be      	bne.n	8007206 <_printf_float+0x32a>
 8007288:	e689      	b.n	8006f9e <_printf_float+0xc2>
 800728a:	9a05      	ldr	r2, [sp, #20]
 800728c:	464b      	mov	r3, r9
 800728e:	4442      	add	r2, r8
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	d1c1      	bne.n	800721e <_printf_float+0x342>
 800729a:	e680      	b.n	8006f9e <_printf_float+0xc2>
 800729c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729e:	2a01      	cmp	r2, #1
 80072a0:	dc01      	bgt.n	80072a6 <_printf_float+0x3ca>
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d538      	bpl.n	8007318 <_printf_float+0x43c>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4642      	mov	r2, r8
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae74 	beq.w	8006f9e <_printf_float+0xc2>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f ae6b 	beq.w	8006f9e <_printf_float+0xc2>
 80072c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fc12 	bl	8000af8 <__aeabi_dcmpeq>
 80072d4:	b9d8      	cbnz	r0, 800730e <_printf_float+0x432>
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	f108 0201 	add.w	r2, r8, #1
 80072dc:	3b01      	subs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	d10e      	bne.n	8007306 <_printf_float+0x42a>
 80072e8:	e659      	b.n	8006f9e <_printf_float+0xc2>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae52 	beq.w	8006f9e <_printf_float+0xc2>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007300:	3b01      	subs	r3, #1
 8007302:	4543      	cmp	r3, r8
 8007304:	dcf1      	bgt.n	80072ea <_printf_float+0x40e>
 8007306:	464b      	mov	r3, r9
 8007308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800730c:	e6dc      	b.n	80070c8 <_printf_float+0x1ec>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	f104 0a1a 	add.w	sl, r4, #26
 8007316:	e7f2      	b.n	80072fe <_printf_float+0x422>
 8007318:	2301      	movs	r3, #1
 800731a:	4642      	mov	r2, r8
 800731c:	e7df      	b.n	80072de <_printf_float+0x402>
 800731e:	2301      	movs	r3, #1
 8007320:	464a      	mov	r2, r9
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae38 	beq.w	8006f9e <_printf_float+0xc2>
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007336:	1a5b      	subs	r3, r3, r1
 8007338:	4543      	cmp	r3, r8
 800733a:	dcf0      	bgt.n	800731e <_printf_float+0x442>
 800733c:	e6fa      	b.n	8007134 <_printf_float+0x258>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f104 0919 	add.w	r9, r4, #25
 8007346:	e7f4      	b.n	8007332 <_printf_float+0x456>

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4616      	mov	r6, r2
 800734e:	4699      	mov	r9, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007364:	4607      	mov	r7, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b10a      	cbz	r2, 800736e <_printf_common+0x26>
 800736a:	3301      	adds	r3, #1
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	0699      	lsls	r1, r3, #26
 8007372:	bf42      	ittt	mi
 8007374:	6833      	ldrmi	r3, [r6, #0]
 8007376:	3302      	addmi	r3, #2
 8007378:	6033      	strmi	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	f015 0506 	ands.w	r5, r5, #6
 8007380:	d106      	bne.n	8007390 <_printf_common+0x48>
 8007382:	f104 0a19 	add.w	sl, r4, #25
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	6832      	ldr	r2, [r6, #0]
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	42ab      	cmp	r3, r5
 800738e:	dc26      	bgt.n	80073de <_printf_common+0x96>
 8007390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007394:	1e13      	subs	r3, r2, #0
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	bf18      	it	ne
 800739a:	2301      	movne	r3, #1
 800739c:	0692      	lsls	r2, r2, #26
 800739e:	d42b      	bmi.n	80073f8 <_printf_common+0xb0>
 80073a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d01e      	beq.n	80073ec <_printf_common+0xa4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	68e5      	ldr	r5, [r4, #12]
 80073b2:	6832      	ldr	r2, [r6, #0]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	2600      	movs	r6, #0
 80073d4:	341a      	adds	r4, #26
 80073d6:	42b5      	cmp	r5, r6
 80073d8:	d11a      	bne.n	8007410 <_printf_common+0xc8>
 80073da:	2000      	movs	r0, #0
 80073dc:	e008      	b.n	80073f0 <_printf_common+0xa8>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4649      	mov	r1, r9
 80073e4:	4638      	mov	r0, r7
 80073e6:	47c0      	blx	r8
 80073e8:	3001      	adds	r0, #1
 80073ea:	d103      	bne.n	80073f4 <_printf_common+0xac>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7c6      	b.n	8007386 <_printf_common+0x3e>
 80073f8:	18e1      	adds	r1, r4, r3
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	2030      	movs	r0, #48	; 0x30
 80073fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007402:	4422      	add	r2, r4
 8007404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740c:	3302      	adds	r3, #2
 800740e:	e7c7      	b.n	80073a0 <_printf_common+0x58>
 8007410:	2301      	movs	r3, #1
 8007412:	4622      	mov	r2, r4
 8007414:	4649      	mov	r1, r9
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	3001      	adds	r0, #1
 800741c:	d0e6      	beq.n	80073ec <_printf_common+0xa4>
 800741e:	3601      	adds	r6, #1
 8007420:	e7d9      	b.n	80073d6 <_printf_common+0x8e>
	...

08007424 <_printf_i>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	7e0f      	ldrb	r7, [r1, #24]
 800742a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800742c:	2f78      	cmp	r7, #120	; 0x78
 800742e:	4691      	mov	r9, r2
 8007430:	4680      	mov	r8, r0
 8007432:	460c      	mov	r4, r1
 8007434:	469a      	mov	sl, r3
 8007436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800743a:	d807      	bhi.n	800744c <_printf_i+0x28>
 800743c:	2f62      	cmp	r7, #98	; 0x62
 800743e:	d80a      	bhi.n	8007456 <_printf_i+0x32>
 8007440:	2f00      	cmp	r7, #0
 8007442:	f000 80d8 	beq.w	80075f6 <_printf_i+0x1d2>
 8007446:	2f58      	cmp	r7, #88	; 0x58
 8007448:	f000 80a3 	beq.w	8007592 <_printf_i+0x16e>
 800744c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007454:	e03a      	b.n	80074cc <_printf_i+0xa8>
 8007456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800745a:	2b15      	cmp	r3, #21
 800745c:	d8f6      	bhi.n	800744c <_printf_i+0x28>
 800745e:	a101      	add	r1, pc, #4	; (adr r1, 8007464 <_printf_i+0x40>)
 8007460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074d1 	.word	0x080074d1
 800746c:	0800744d 	.word	0x0800744d
 8007470:	0800744d 	.word	0x0800744d
 8007474:	0800744d 	.word	0x0800744d
 8007478:	0800744d 	.word	0x0800744d
 800747c:	080074d1 	.word	0x080074d1
 8007480:	0800744d 	.word	0x0800744d
 8007484:	0800744d 	.word	0x0800744d
 8007488:	0800744d 	.word	0x0800744d
 800748c:	0800744d 	.word	0x0800744d
 8007490:	080075dd 	.word	0x080075dd
 8007494:	08007501 	.word	0x08007501
 8007498:	080075bf 	.word	0x080075bf
 800749c:	0800744d 	.word	0x0800744d
 80074a0:	0800744d 	.word	0x0800744d
 80074a4:	080075ff 	.word	0x080075ff
 80074a8:	0800744d 	.word	0x0800744d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800744d 	.word	0x0800744d
 80074b4:	0800744d 	.word	0x0800744d
 80074b8:	080075c7 	.word	0x080075c7
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0a3      	b.n	8007618 <_printf_i+0x1f4>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	0606      	lsls	r6, r0, #24
 80074d6:	f101 0304 	add.w	r3, r1, #4
 80074da:	d50a      	bpl.n	80074f2 <_printf_i+0xce>
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	da03      	bge.n	80074ec <_printf_i+0xc8>
 80074e4:	232d      	movs	r3, #45	; 0x2d
 80074e6:	4276      	negs	r6, r6
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	485e      	ldr	r0, [pc, #376]	; (8007668 <_printf_i+0x244>)
 80074ee:	230a      	movs	r3, #10
 80074f0:	e019      	b.n	8007526 <_printf_i+0x102>
 80074f2:	680e      	ldr	r6, [r1, #0]
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074fa:	bf18      	it	ne
 80074fc:	b236      	sxthne	r6, r6
 80074fe:	e7ef      	b.n	80074e0 <_printf_i+0xbc>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	6029      	str	r1, [r5, #0]
 8007508:	0601      	lsls	r1, r0, #24
 800750a:	d501      	bpl.n	8007510 <_printf_i+0xec>
 800750c:	681e      	ldr	r6, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0xf2>
 8007510:	0646      	lsls	r6, r0, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0xe8>
 8007514:	881e      	ldrh	r6, [r3, #0]
 8007516:	4854      	ldr	r0, [pc, #336]	; (8007668 <_printf_i+0x244>)
 8007518:	2f6f      	cmp	r7, #111	; 0x6f
 800751a:	bf0c      	ite	eq
 800751c:	2308      	moveq	r3, #8
 800751e:	230a      	movne	r3, #10
 8007520:	2100      	movs	r1, #0
 8007522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007526:	6865      	ldr	r5, [r4, #4]
 8007528:	60a5      	str	r5, [r4, #8]
 800752a:	2d00      	cmp	r5, #0
 800752c:	bfa2      	ittt	ge
 800752e:	6821      	ldrge	r1, [r4, #0]
 8007530:	f021 0104 	bicge.w	r1, r1, #4
 8007534:	6021      	strge	r1, [r4, #0]
 8007536:	b90e      	cbnz	r6, 800753c <_printf_i+0x118>
 8007538:	2d00      	cmp	r5, #0
 800753a:	d04d      	beq.n	80075d8 <_printf_i+0x1b4>
 800753c:	4615      	mov	r5, r2
 800753e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007542:	fb03 6711 	mls	r7, r3, r1, r6
 8007546:	5dc7      	ldrb	r7, [r0, r7]
 8007548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800754c:	4637      	mov	r7, r6
 800754e:	42bb      	cmp	r3, r7
 8007550:	460e      	mov	r6, r1
 8007552:	d9f4      	bls.n	800753e <_printf_i+0x11a>
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <_printf_i+0x14c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07de      	lsls	r6, r3, #31
 800755c:	d508      	bpl.n	8007570 <_printf_i+0x14c>
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	4299      	cmp	r1, r3
 8007564:	bfde      	ittt	le
 8007566:	2330      	movle	r3, #48	; 0x30
 8007568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800756c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007570:	1b52      	subs	r2, r2, r5
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	464b      	mov	r3, r9
 800757a:	aa03      	add	r2, sp, #12
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff fee2 	bl	8007348 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	d14c      	bne.n	8007622 <_printf_i+0x1fe>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b004      	add	sp, #16
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	4835      	ldr	r0, [pc, #212]	; (8007668 <_printf_i+0x244>)
 8007594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007598:	6829      	ldr	r1, [r5, #0]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a0:	6029      	str	r1, [r5, #0]
 80075a2:	061d      	lsls	r5, r3, #24
 80075a4:	d514      	bpl.n	80075d0 <_printf_i+0x1ac>
 80075a6:	07df      	lsls	r7, r3, #31
 80075a8:	bf44      	itt	mi
 80075aa:	f043 0320 	orrmi.w	r3, r3, #32
 80075ae:	6023      	strmi	r3, [r4, #0]
 80075b0:	b91e      	cbnz	r6, 80075ba <_printf_i+0x196>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f023 0320 	bic.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2310      	movs	r3, #16
 80075bc:	e7b0      	b.n	8007520 <_printf_i+0xfc>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2378      	movs	r3, #120	; 0x78
 80075c8:	4828      	ldr	r0, [pc, #160]	; (800766c <_printf_i+0x248>)
 80075ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ce:	e7e3      	b.n	8007598 <_printf_i+0x174>
 80075d0:	0659      	lsls	r1, r3, #25
 80075d2:	bf48      	it	mi
 80075d4:	b2b6      	uxthmi	r6, r6
 80075d6:	e7e6      	b.n	80075a6 <_printf_i+0x182>
 80075d8:	4615      	mov	r5, r2
 80075da:	e7bb      	b.n	8007554 <_printf_i+0x130>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	6826      	ldr	r6, [r4, #0]
 80075e0:	6961      	ldr	r1, [r4, #20]
 80075e2:	1d18      	adds	r0, r3, #4
 80075e4:	6028      	str	r0, [r5, #0]
 80075e6:	0635      	lsls	r5, r6, #24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0x1cc>
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0x1d2>
 80075f0:	0670      	lsls	r0, r6, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0x1c8>
 80075f4:	8019      	strh	r1, [r3, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	4615      	mov	r5, r2
 80075fc:	e7ba      	b.n	8007574 <_printf_i+0x150>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	602a      	str	r2, [r5, #0]
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	2100      	movs	r1, #0
 800760a:	4628      	mov	r0, r5
 800760c:	f7f8 fe00 	bl	8000210 <memchr>
 8007610:	b108      	cbz	r0, 8007616 <_printf_i+0x1f2>
 8007612:	1b40      	subs	r0, r0, r5
 8007614:	6060      	str	r0, [r4, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007620:	e7a8      	b.n	8007574 <_printf_i+0x150>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	462a      	mov	r2, r5
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d0ab      	beq.n	8007588 <_printf_i+0x164>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	079b      	lsls	r3, r3, #30
 8007634:	d413      	bmi.n	800765e <_printf_i+0x23a>
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	4298      	cmp	r0, r3
 800763c:	bfb8      	it	lt
 800763e:	4618      	movlt	r0, r3
 8007640:	e7a4      	b.n	800758c <_printf_i+0x168>
 8007642:	2301      	movs	r3, #1
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d09b      	beq.n	8007588 <_printf_i+0x164>
 8007650:	3501      	adds	r5, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	9903      	ldr	r1, [sp, #12]
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	dcf2      	bgt.n	8007642 <_printf_i+0x21e>
 800765c:	e7eb      	b.n	8007636 <_printf_i+0x212>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0619 	add.w	r6, r4, #25
 8007664:	e7f5      	b.n	8007652 <_printf_i+0x22e>
 8007666:	bf00      	nop
 8007668:	0800c9b8 	.word	0x0800c9b8
 800766c:	0800c9c9 	.word	0x0800c9c9

08007670 <_sbrk_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d06      	ldr	r5, [pc, #24]	; (800768c <_sbrk_r+0x1c>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	f005 f856 	bl	800c72c <_sbrk>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_sbrk_r+0x1a>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_sbrk_r+0x1a>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	2000063c 	.word	0x2000063c

08007690 <siprintf>:
 8007690:	b40e      	push	{r1, r2, r3}
 8007692:	b500      	push	{lr}
 8007694:	b09c      	sub	sp, #112	; 0x70
 8007696:	ab1d      	add	r3, sp, #116	; 0x74
 8007698:	9002      	str	r0, [sp, #8]
 800769a:	9006      	str	r0, [sp, #24]
 800769c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076a0:	4809      	ldr	r0, [pc, #36]	; (80076c8 <siprintf+0x38>)
 80076a2:	9107      	str	r1, [sp, #28]
 80076a4:	9104      	str	r1, [sp, #16]
 80076a6:	4909      	ldr	r1, [pc, #36]	; (80076cc <siprintf+0x3c>)
 80076a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ac:	9105      	str	r1, [sp, #20]
 80076ae:	6800      	ldr	r0, [r0, #0]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	a902      	add	r1, sp, #8
 80076b4:	f001 fb40 	bl	8008d38 <_svfiprintf_r>
 80076b8:	9b02      	ldr	r3, [sp, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	b01c      	add	sp, #112	; 0x70
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	b003      	add	sp, #12
 80076c6:	4770      	bx	lr
 80076c8:	20000010 	.word	0x20000010
 80076cc:	ffff0208 	.word	0xffff0208

080076d0 <siscanf>:
 80076d0:	b40e      	push	{r1, r2, r3}
 80076d2:	b510      	push	{r4, lr}
 80076d4:	b09f      	sub	sp, #124	; 0x7c
 80076d6:	ac21      	add	r4, sp, #132	; 0x84
 80076d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80076dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80076e6:	9004      	str	r0, [sp, #16]
 80076e8:	9008      	str	r0, [sp, #32]
 80076ea:	f7f8 fd83 	bl	80001f4 <strlen>
 80076ee:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <siscanf+0x50>)
 80076f0:	9005      	str	r0, [sp, #20]
 80076f2:	9009      	str	r0, [sp, #36]	; 0x24
 80076f4:	930d      	str	r3, [sp, #52]	; 0x34
 80076f6:	480b      	ldr	r0, [pc, #44]	; (8007724 <siscanf+0x54>)
 80076f8:	9a01      	ldr	r2, [sp, #4]
 80076fa:	6800      	ldr	r0, [r0, #0]
 80076fc:	9403      	str	r4, [sp, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	9311      	str	r3, [sp, #68]	; 0x44
 8007702:	9316      	str	r3, [sp, #88]	; 0x58
 8007704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007708:	f8ad 301e 	strh.w	r3, [sp, #30]
 800770c:	a904      	add	r1, sp, #16
 800770e:	4623      	mov	r3, r4
 8007710:	f001 fc6c 	bl	8008fec <__ssvfiscanf_r>
 8007714:	b01f      	add	sp, #124	; 0x7c
 8007716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771a:	b003      	add	sp, #12
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	0800774b 	.word	0x0800774b
 8007724:	20000010 	.word	0x20000010

08007728 <__sread>:
 8007728:	b510      	push	{r4, lr}
 800772a:	460c      	mov	r4, r1
 800772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007730:	f001 ff26 	bl	8009580 <_read_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	bfab      	itete	ge
 8007738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800773a:	89a3      	ldrhlt	r3, [r4, #12]
 800773c:	181b      	addge	r3, r3, r0
 800773e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007742:	bfac      	ite	ge
 8007744:	6563      	strge	r3, [r4, #84]	; 0x54
 8007746:	81a3      	strhlt	r3, [r4, #12]
 8007748:	bd10      	pop	{r4, pc}

0800774a <__seofread>:
 800774a:	2000      	movs	r0, #0
 800774c:	4770      	bx	lr

0800774e <__swrite>:
 800774e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	461f      	mov	r7, r3
 8007754:	898b      	ldrh	r3, [r1, #12]
 8007756:	05db      	lsls	r3, r3, #23
 8007758:	4605      	mov	r5, r0
 800775a:	460c      	mov	r4, r1
 800775c:	4616      	mov	r6, r2
 800775e:	d505      	bpl.n	800776c <__swrite+0x1e>
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	2302      	movs	r3, #2
 8007766:	2200      	movs	r2, #0
 8007768:	f000 fec4 	bl	80084f4 <_lseek_r>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	4632      	mov	r2, r6
 800777a:	463b      	mov	r3, r7
 800777c:	4628      	mov	r0, r5
 800777e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007782:	f000 b817 	b.w	80077b4 <_write_r>

08007786 <__sseek>:
 8007786:	b510      	push	{r4, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778e:	f000 feb1 	bl	80084f4 <_lseek_r>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	bf15      	itete	ne
 8007798:	6560      	strne	r0, [r4, #84]	; 0x54
 800779a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800779e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077a2:	81a3      	strheq	r3, [r4, #12]
 80077a4:	bf18      	it	ne
 80077a6:	81a3      	strhne	r3, [r4, #12]
 80077a8:	bd10      	pop	{r4, pc}

080077aa <__sclose>:
 80077aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ae:	f000 b813 	b.w	80077d8 <_close_r>
	...

080077b4 <_write_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	; (80077d4 <_write_r+0x20>)
 80077b8:	4604      	mov	r4, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	4611      	mov	r1, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7fb fab5 	bl	8002d32 <_write>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_write_r+0x1e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_write_r+0x1e>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	2000063c 	.word	0x2000063c

080077d8 <_close_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	; (80077f4 <_close_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fb fac1 	bl	8002d6a <_close>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_close_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_close_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	2000063c 	.word	0x2000063c

080077f8 <quorem>:
 80077f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	6903      	ldr	r3, [r0, #16]
 80077fe:	690c      	ldr	r4, [r1, #16]
 8007800:	42a3      	cmp	r3, r4
 8007802:	4607      	mov	r7, r0
 8007804:	f2c0 8081 	blt.w	800790a <quorem+0x112>
 8007808:	3c01      	subs	r4, #1
 800780a:	f101 0814 	add.w	r8, r1, #20
 800780e:	f100 0514 	add.w	r5, r0, #20
 8007812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800781c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007820:	3301      	adds	r3, #1
 8007822:	429a      	cmp	r2, r3
 8007824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800782c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007830:	d331      	bcc.n	8007896 <quorem+0x9e>
 8007832:	f04f 0e00 	mov.w	lr, #0
 8007836:	4640      	mov	r0, r8
 8007838:	46ac      	mov	ip, r5
 800783a:	46f2      	mov	sl, lr
 800783c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007840:	b293      	uxth	r3, r2
 8007842:	fb06 e303 	mla	r3, r6, r3, lr
 8007846:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800784a:	b29b      	uxth	r3, r3
 800784c:	ebaa 0303 	sub.w	r3, sl, r3
 8007850:	f8dc a000 	ldr.w	sl, [ip]
 8007854:	0c12      	lsrs	r2, r2, #16
 8007856:	fa13 f38a 	uxtah	r3, r3, sl
 800785a:	fb06 e202 	mla	r2, r6, r2, lr
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007866:	b292      	uxth	r2, r2
 8007868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800786c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007870:	f8bd 3000 	ldrh.w	r3, [sp]
 8007874:	4581      	cmp	r9, r0
 8007876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787a:	f84c 3b04 	str.w	r3, [ip], #4
 800787e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007882:	d2db      	bcs.n	800783c <quorem+0x44>
 8007884:	f855 300b 	ldr.w	r3, [r5, fp]
 8007888:	b92b      	cbnz	r3, 8007896 <quorem+0x9e>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	3b04      	subs	r3, #4
 800788e:	429d      	cmp	r5, r3
 8007890:	461a      	mov	r2, r3
 8007892:	d32e      	bcc.n	80078f2 <quorem+0xfa>
 8007894:	613c      	str	r4, [r7, #16]
 8007896:	4638      	mov	r0, r7
 8007898:	f001 f8da 	bl	8008a50 <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	db24      	blt.n	80078ea <quorem+0xf2>
 80078a0:	3601      	adds	r6, #1
 80078a2:	4628      	mov	r0, r5
 80078a4:	f04f 0c00 	mov.w	ip, #0
 80078a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078ac:	f8d0 e000 	ldr.w	lr, [r0]
 80078b0:	b293      	uxth	r3, r2
 80078b2:	ebac 0303 	sub.w	r3, ip, r3
 80078b6:	0c12      	lsrs	r2, r2, #16
 80078b8:	fa13 f38e 	uxtah	r3, r3, lr
 80078bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ca:	45c1      	cmp	r9, r8
 80078cc:	f840 3b04 	str.w	r3, [r0], #4
 80078d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078d4:	d2e8      	bcs.n	80078a8 <quorem+0xb0>
 80078d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078de:	b922      	cbnz	r2, 80078ea <quorem+0xf2>
 80078e0:	3b04      	subs	r3, #4
 80078e2:	429d      	cmp	r5, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	d30a      	bcc.n	80078fe <quorem+0x106>
 80078e8:	613c      	str	r4, [r7, #16]
 80078ea:	4630      	mov	r0, r6
 80078ec:	b003      	add	sp, #12
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d1cc      	bne.n	8007894 <quorem+0x9c>
 80078fa:	3c01      	subs	r4, #1
 80078fc:	e7c7      	b.n	800788e <quorem+0x96>
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	3b04      	subs	r3, #4
 8007902:	2a00      	cmp	r2, #0
 8007904:	d1f0      	bne.n	80078e8 <quorem+0xf0>
 8007906:	3c01      	subs	r4, #1
 8007908:	e7eb      	b.n	80078e2 <quorem+0xea>
 800790a:	2000      	movs	r0, #0
 800790c:	e7ee      	b.n	80078ec <quorem+0xf4>
	...

08007910 <_dtoa_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	ed2d 8b04 	vpush	{d8-d9}
 8007918:	ec57 6b10 	vmov	r6, r7, d0
 800791c:	b093      	sub	sp, #76	; 0x4c
 800791e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007924:	9106      	str	r1, [sp, #24]
 8007926:	ee10 aa10 	vmov	sl, s0
 800792a:	4604      	mov	r4, r0
 800792c:	9209      	str	r2, [sp, #36]	; 0x24
 800792e:	930c      	str	r3, [sp, #48]	; 0x30
 8007930:	46bb      	mov	fp, r7
 8007932:	b975      	cbnz	r5, 8007952 <_dtoa_r+0x42>
 8007934:	2010      	movs	r0, #16
 8007936:	f7ff f941 	bl	8006bbc <malloc>
 800793a:	4602      	mov	r2, r0
 800793c:	6260      	str	r0, [r4, #36]	; 0x24
 800793e:	b920      	cbnz	r0, 800794a <_dtoa_r+0x3a>
 8007940:	4ba7      	ldr	r3, [pc, #668]	; (8007be0 <_dtoa_r+0x2d0>)
 8007942:	21ea      	movs	r1, #234	; 0xea
 8007944:	48a7      	ldr	r0, [pc, #668]	; (8007be4 <_dtoa_r+0x2d4>)
 8007946:	f001 ff97 	bl	8009878 <__assert_func>
 800794a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800794e:	6005      	str	r5, [r0, #0]
 8007950:	60c5      	str	r5, [r0, #12]
 8007952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	b151      	cbz	r1, 800796e <_dtoa_r+0x5e>
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	604a      	str	r2, [r1, #4]
 800795c:	2301      	movs	r3, #1
 800795e:	4093      	lsls	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
 8007962:	4620      	mov	r0, r4
 8007964:	f000 fe32 	bl	80085cc <_Bfree>
 8007968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	1e3b      	subs	r3, r7, #0
 8007970:	bfaa      	itet	ge
 8007972:	2300      	movge	r3, #0
 8007974:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007978:	f8c8 3000 	strge.w	r3, [r8]
 800797c:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <_dtoa_r+0x2d8>)
 800797e:	bfbc      	itt	lt
 8007980:	2201      	movlt	r2, #1
 8007982:	f8c8 2000 	strlt.w	r2, [r8]
 8007986:	ea33 030b 	bics.w	r3, r3, fp
 800798a:	d11b      	bne.n	80079c4 <_dtoa_r+0xb4>
 800798c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800798e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007998:	4333      	orrs	r3, r6
 800799a:	f000 8592 	beq.w	80084c2 <_dtoa_r+0xbb2>
 800799e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a0:	b963      	cbnz	r3, 80079bc <_dtoa_r+0xac>
 80079a2:	4b92      	ldr	r3, [pc, #584]	; (8007bec <_dtoa_r+0x2dc>)
 80079a4:	e022      	b.n	80079ec <_dtoa_r+0xdc>
 80079a6:	4b92      	ldr	r3, [pc, #584]	; (8007bf0 <_dtoa_r+0x2e0>)
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	3308      	adds	r3, #8
 80079ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	9801      	ldr	r0, [sp, #4]
 80079b2:	b013      	add	sp, #76	; 0x4c
 80079b4:	ecbd 8b04 	vpop	{d8-d9}
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	4b8b      	ldr	r3, [pc, #556]	; (8007bec <_dtoa_r+0x2dc>)
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	3303      	adds	r3, #3
 80079c2:	e7f3      	b.n	80079ac <_dtoa_r+0x9c>
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4650      	mov	r0, sl
 80079ca:	4659      	mov	r1, fp
 80079cc:	f7f9 f894 	bl	8000af8 <__aeabi_dcmpeq>
 80079d0:	ec4b ab19 	vmov	d9, sl, fp
 80079d4:	4680      	mov	r8, r0
 80079d6:	b158      	cbz	r0, 80079f0 <_dtoa_r+0xe0>
 80079d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079da:	2301      	movs	r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 856b 	beq.w	80084bc <_dtoa_r+0xbac>
 80079e6:	4883      	ldr	r0, [pc, #524]	; (8007bf4 <_dtoa_r+0x2e4>)
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	1e43      	subs	r3, r0, #1
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	e7df      	b.n	80079b0 <_dtoa_r+0xa0>
 80079f0:	ec4b ab10 	vmov	d0, sl, fp
 80079f4:	aa10      	add	r2, sp, #64	; 0x40
 80079f6:	a911      	add	r1, sp, #68	; 0x44
 80079f8:	4620      	mov	r0, r4
 80079fa:	f001 f8cf 	bl	8008b9c <__d2b>
 80079fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a02:	ee08 0a10 	vmov	s16, r0
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	f000 8084 	beq.w	8007b14 <_dtoa_r+0x204>
 8007a0c:	ee19 3a90 	vmov	r3, s19
 8007a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a18:	4656      	mov	r6, sl
 8007a1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a26:	4b74      	ldr	r3, [pc, #464]	; (8007bf8 <_dtoa_r+0x2e8>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	f7f8 fc43 	bl	80002b8 <__aeabi_dsub>
 8007a32:	a365      	add	r3, pc, #404	; (adr r3, 8007bc8 <_dtoa_r+0x2b8>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f7f8 fdf6 	bl	8000628 <__aeabi_dmul>
 8007a3c:	a364      	add	r3, pc, #400	; (adr r3, 8007bd0 <_dtoa_r+0x2c0>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc3b 	bl	80002bc <__adddf3>
 8007a46:	4606      	mov	r6, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	f7f8 fd82 	bl	8000554 <__aeabi_i2d>
 8007a50:	a361      	add	r3, pc, #388	; (adr r3, 8007bd8 <_dtoa_r+0x2c8>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fde7 	bl	8000628 <__aeabi_dmul>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4639      	mov	r1, r7
 8007a62:	f7f8 fc2b 	bl	80002bc <__adddf3>
 8007a66:	4606      	mov	r6, r0
 8007a68:	460f      	mov	r7, r1
 8007a6a:	f7f9 f88d 	bl	8000b88 <__aeabi_d2iz>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	9000      	str	r0, [sp, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f9 f848 	bl	8000b0c <__aeabi_dcmplt>
 8007a7c:	b150      	cbz	r0, 8007a94 <_dtoa_r+0x184>
 8007a7e:	9800      	ldr	r0, [sp, #0]
 8007a80:	f7f8 fd68 	bl	8000554 <__aeabi_i2d>
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	f7f9 f836 	bl	8000af8 <__aeabi_dcmpeq>
 8007a8c:	b910      	cbnz	r0, 8007a94 <_dtoa_r+0x184>
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b16      	cmp	r3, #22
 8007a98:	d85a      	bhi.n	8007b50 <_dtoa_r+0x240>
 8007a9a:	9a00      	ldr	r2, [sp, #0]
 8007a9c:	4b57      	ldr	r3, [pc, #348]	; (8007bfc <_dtoa_r+0x2ec>)
 8007a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	ec51 0b19 	vmov	r0, r1, d9
 8007aaa:	f7f9 f82f 	bl	8000b0c <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d050      	beq.n	8007b54 <_dtoa_r+0x244>
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007abe:	1b5d      	subs	r5, r3, r5
 8007ac0:	1e6b      	subs	r3, r5, #1
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	bf45      	ittet	mi
 8007ac6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007aca:	9304      	strmi	r3, [sp, #16]
 8007acc:	2300      	movpl	r3, #0
 8007ace:	2300      	movmi	r3, #0
 8007ad0:	bf4c      	ite	mi
 8007ad2:	9305      	strmi	r3, [sp, #20]
 8007ad4:	9304      	strpl	r3, [sp, #16]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db3d      	blt.n	8007b58 <_dtoa_r+0x248>
 8007adc:	9b05      	ldr	r3, [sp, #20]
 8007ade:	9a00      	ldr	r2, [sp, #0]
 8007ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ae2:	4413      	add	r3, r2
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9307      	str	r3, [sp, #28]
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	f200 8089 	bhi.w	8007c04 <_dtoa_r+0x2f4>
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	bfc4      	itt	gt
 8007af6:	3b04      	subgt	r3, #4
 8007af8:	9306      	strgt	r3, [sp, #24]
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	f1a3 0302 	sub.w	r3, r3, #2
 8007b00:	bfcc      	ite	gt
 8007b02:	2500      	movgt	r5, #0
 8007b04:	2501      	movle	r5, #1
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	f200 8087 	bhi.w	8007c1a <_dtoa_r+0x30a>
 8007b0c:	e8df f003 	tbb	[pc, r3]
 8007b10:	59383a2d 	.word	0x59383a2d
 8007b14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b18:	441d      	add	r5, r3
 8007b1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	bfc1      	itttt	gt
 8007b22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b32:	bfda      	itte	le
 8007b34:	f1c3 0320 	rsble	r3, r3, #32
 8007b38:	fa06 f003 	lslle.w	r0, r6, r3
 8007b3c:	4318      	orrgt	r0, r3
 8007b3e:	f7f8 fcf9 	bl	8000534 <__aeabi_ui2d>
 8007b42:	2301      	movs	r3, #1
 8007b44:	4606      	mov	r6, r0
 8007b46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b4a:	3d01      	subs	r5, #1
 8007b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b4e:	e76a      	b.n	8007a26 <_dtoa_r+0x116>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e7b2      	b.n	8007aba <_dtoa_r+0x1aa>
 8007b54:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b56:	e7b1      	b.n	8007abc <_dtoa_r+0x1ac>
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	9a00      	ldr	r2, [sp, #0]
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	4253      	negs	r3, r2
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	2300      	movs	r3, #0
 8007b66:	930a      	str	r3, [sp, #40]	; 0x28
 8007b68:	e7bf      	b.n	8007aea <_dtoa_r+0x1da>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9308      	str	r3, [sp, #32]
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc55      	bgt.n	8007c20 <_dtoa_r+0x310>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7e:	e00c      	b.n	8007b9a <_dtoa_r+0x28a>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e7f3      	b.n	8007b6c <_dtoa_r+0x25c>
 8007b84:	2300      	movs	r3, #0
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	9303      	str	r3, [sp, #12]
 8007b96:	bfb8      	it	lt
 8007b98:	2301      	movlt	r3, #1
 8007b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6042      	str	r2, [r0, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	f102 0614 	add.w	r6, r2, #20
 8007ba6:	429e      	cmp	r6, r3
 8007ba8:	6841      	ldr	r1, [r0, #4]
 8007baa:	d93d      	bls.n	8007c28 <_dtoa_r+0x318>
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fccd 	bl	800854c <_Balloc>
 8007bb2:	9001      	str	r0, [sp, #4]
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d13b      	bne.n	8007c30 <_dtoa_r+0x320>
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <_dtoa_r+0x2f0>)
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bc0:	e6c0      	b.n	8007944 <_dtoa_r+0x34>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e7df      	b.n	8007b86 <_dtoa_r+0x276>
 8007bc6:	bf00      	nop
 8007bc8:	636f4361 	.word	0x636f4361
 8007bcc:	3fd287a7 	.word	0x3fd287a7
 8007bd0:	8b60c8b3 	.word	0x8b60c8b3
 8007bd4:	3fc68a28 	.word	0x3fc68a28
 8007bd8:	509f79fb 	.word	0x509f79fb
 8007bdc:	3fd34413 	.word	0x3fd34413
 8007be0:	0800c9e7 	.word	0x0800c9e7
 8007be4:	0800c9fe 	.word	0x0800c9fe
 8007be8:	7ff00000 	.word	0x7ff00000
 8007bec:	0800c9e3 	.word	0x0800c9e3
 8007bf0:	0800c9da 	.word	0x0800c9da
 8007bf4:	0800cbda 	.word	0x0800cbda
 8007bf8:	3ff80000 	.word	0x3ff80000
 8007bfc:	0800caf0 	.word	0x0800caf0
 8007c00:	0800ca59 	.word	0x0800ca59
 8007c04:	2501      	movs	r5, #1
 8007c06:	2300      	movs	r3, #0
 8007c08:	9306      	str	r3, [sp, #24]
 8007c0a:	9508      	str	r5, [sp, #32]
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2312      	movs	r3, #18
 8007c18:	e7b0      	b.n	8007b7c <_dtoa_r+0x26c>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	e7f5      	b.n	8007c0c <_dtoa_r+0x2fc>
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c26:	e7b8      	b.n	8007b9a <_dtoa_r+0x28a>
 8007c28:	3101      	adds	r1, #1
 8007c2a:	6041      	str	r1, [r0, #4]
 8007c2c:	0052      	lsls	r2, r2, #1
 8007c2e:	e7b8      	b.n	8007ba2 <_dtoa_r+0x292>
 8007c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	2b0e      	cmp	r3, #14
 8007c3a:	f200 809d 	bhi.w	8007d78 <_dtoa_r+0x468>
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	f000 809a 	beq.w	8007d78 <_dtoa_r+0x468>
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd32      	ble.n	8007cb0 <_dtoa_r+0x3a0>
 8007c4a:	4ab7      	ldr	r2, [pc, #732]	; (8007f28 <_dtoa_r+0x618>)
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	05d8      	lsls	r0, r3, #23
 8007c5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c60:	d516      	bpl.n	8007c90 <_dtoa_r+0x380>
 8007c62:	4bb2      	ldr	r3, [pc, #712]	; (8007f2c <_dtoa_r+0x61c>)
 8007c64:	ec51 0b19 	vmov	r0, r1, d9
 8007c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c6c:	f7f8 fe06 	bl	800087c <__aeabi_ddiv>
 8007c70:	f007 070f 	and.w	r7, r7, #15
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	2503      	movs	r5, #3
 8007c7a:	4eac      	ldr	r6, [pc, #688]	; (8007f2c <_dtoa_r+0x61c>)
 8007c7c:	b957      	cbnz	r7, 8007c94 <_dtoa_r+0x384>
 8007c7e:	4642      	mov	r2, r8
 8007c80:	464b      	mov	r3, r9
 8007c82:	4650      	mov	r0, sl
 8007c84:	4659      	mov	r1, fp
 8007c86:	f7f8 fdf9 	bl	800087c <__aeabi_ddiv>
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	468b      	mov	fp, r1
 8007c8e:	e028      	b.n	8007ce2 <_dtoa_r+0x3d2>
 8007c90:	2502      	movs	r5, #2
 8007c92:	e7f2      	b.n	8007c7a <_dtoa_r+0x36a>
 8007c94:	07f9      	lsls	r1, r7, #31
 8007c96:	d508      	bpl.n	8007caa <_dtoa_r+0x39a>
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ca0:	f7f8 fcc2 	bl	8000628 <__aeabi_dmul>
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4689      	mov	r9, r1
 8007caa:	107f      	asrs	r7, r7, #1
 8007cac:	3608      	adds	r6, #8
 8007cae:	e7e5      	b.n	8007c7c <_dtoa_r+0x36c>
 8007cb0:	f000 809b 	beq.w	8007dea <_dtoa_r+0x4da>
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	4f9d      	ldr	r7, [pc, #628]	; (8007f2c <_dtoa_r+0x61c>)
 8007cb8:	425e      	negs	r6, r3
 8007cba:	4b9b      	ldr	r3, [pc, #620]	; (8007f28 <_dtoa_r+0x618>)
 8007cbc:	f006 020f 	and.w	r2, r6, #15
 8007cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	ec51 0b19 	vmov	r0, r1, d9
 8007ccc:	f7f8 fcac 	bl	8000628 <__aeabi_dmul>
 8007cd0:	1136      	asrs	r6, r6, #4
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	468b      	mov	fp, r1
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2502      	movs	r5, #2
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d17a      	bne.n	8007dd4 <_dtoa_r+0x4c4>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1d3      	bne.n	8007c8a <_dtoa_r+0x37a>
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8082 	beq.w	8007dee <_dtoa_r+0x4de>
 8007cea:	4b91      	ldr	r3, [pc, #580]	; (8007f30 <_dtoa_r+0x620>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	4650      	mov	r0, sl
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	f7f8 ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d079      	beq.n	8007dee <_dtoa_r+0x4de>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d076      	beq.n	8007dee <_dtoa_r+0x4de>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dd36      	ble.n	8007d74 <_dtoa_r+0x464>
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	4650      	mov	r0, sl
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	1e5f      	subs	r7, r3, #1
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <_dtoa_r+0x624>)
 8007d12:	f7f8 fc89 	bl	8000628 <__aeabi_dmul>
 8007d16:	9e02      	ldr	r6, [sp, #8]
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7f8 fc18 	bl	8000554 <__aeabi_i2d>
 8007d24:	4652      	mov	r2, sl
 8007d26:	465b      	mov	r3, fp
 8007d28:	f7f8 fc7e 	bl	8000628 <__aeabi_dmul>
 8007d2c:	4b82      	ldr	r3, [pc, #520]	; (8007f38 <_dtoa_r+0x628>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f7f8 fac4 	bl	80002bc <__adddf3>
 8007d34:	46d0      	mov	r8, sl
 8007d36:	46d9      	mov	r9, fp
 8007d38:	4682      	mov	sl, r0
 8007d3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d158      	bne.n	8007df4 <_dtoa_r+0x4e4>
 8007d42:	4b7e      	ldr	r3, [pc, #504]	; (8007f3c <_dtoa_r+0x62c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fab5 	bl	80002b8 <__aeabi_dsub>
 8007d4e:	4652      	mov	r2, sl
 8007d50:	465b      	mov	r3, fp
 8007d52:	4680      	mov	r8, r0
 8007d54:	4689      	mov	r9, r1
 8007d56:	f7f8 fef7 	bl	8000b48 <__aeabi_dcmpgt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f040 8295 	bne.w	800828a <_dtoa_r+0x97a>
 8007d60:	4652      	mov	r2, sl
 8007d62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fecf 	bl	8000b0c <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f040 8289 	bne.w	8008286 <_dtoa_r+0x976>
 8007d74:	ec5b ab19 	vmov	sl, fp, d9
 8007d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f2c0 8148 	blt.w	8008010 <_dtoa_r+0x700>
 8007d80:	9a00      	ldr	r2, [sp, #0]
 8007d82:	2a0e      	cmp	r2, #14
 8007d84:	f300 8144 	bgt.w	8008010 <_dtoa_r+0x700>
 8007d88:	4b67      	ldr	r3, [pc, #412]	; (8007f28 <_dtoa_r+0x618>)
 8007d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f280 80d5 	bge.w	8007f44 <_dtoa_r+0x634>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f300 80d1 	bgt.w	8007f44 <_dtoa_r+0x634>
 8007da2:	f040 826f 	bne.w	8008284 <_dtoa_r+0x974>
 8007da6:	4b65      	ldr	r3, [pc, #404]	; (8007f3c <_dtoa_r+0x62c>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 fc3b 	bl	8000628 <__aeabi_dmul>
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	f7f8 febd 	bl	8000b34 <__aeabi_dcmpge>
 8007dba:	9e03      	ldr	r6, [sp, #12]
 8007dbc:	4637      	mov	r7, r6
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f040 8245 	bne.w	800824e <_dtoa_r+0x93e>
 8007dc4:	9d01      	ldr	r5, [sp, #4]
 8007dc6:	2331      	movs	r3, #49	; 0x31
 8007dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	e240      	b.n	8008256 <_dtoa_r+0x946>
 8007dd4:	07f2      	lsls	r2, r6, #31
 8007dd6:	d505      	bpl.n	8007de4 <_dtoa_r+0x4d4>
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	f7f8 fc24 	bl	8000628 <__aeabi_dmul>
 8007de0:	3501      	adds	r5, #1
 8007de2:	2301      	movs	r3, #1
 8007de4:	1076      	asrs	r6, r6, #1
 8007de6:	3708      	adds	r7, #8
 8007de8:	e777      	b.n	8007cda <_dtoa_r+0x3ca>
 8007dea:	2502      	movs	r5, #2
 8007dec:	e779      	b.n	8007ce2 <_dtoa_r+0x3d2>
 8007dee:	9f00      	ldr	r7, [sp, #0]
 8007df0:	9e03      	ldr	r6, [sp, #12]
 8007df2:	e794      	b.n	8007d1e <_dtoa_r+0x40e>
 8007df4:	9901      	ldr	r1, [sp, #4]
 8007df6:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <_dtoa_r+0x618>)
 8007df8:	4431      	add	r1, r6
 8007dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8007dfc:	9908      	ldr	r1, [sp, #32]
 8007dfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e06:	2900      	cmp	r1, #0
 8007e08:	d043      	beq.n	8007e92 <_dtoa_r+0x582>
 8007e0a:	494d      	ldr	r1, [pc, #308]	; (8007f40 <_dtoa_r+0x630>)
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f7f8 fd35 	bl	800087c <__aeabi_ddiv>
 8007e12:	4652      	mov	r2, sl
 8007e14:	465b      	mov	r3, fp
 8007e16:	f7f8 fa4f 	bl	80002b8 <__aeabi_dsub>
 8007e1a:	9d01      	ldr	r5, [sp, #4]
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	4649      	mov	r1, r9
 8007e22:	4640      	mov	r0, r8
 8007e24:	f7f8 feb0 	bl	8000b88 <__aeabi_d2iz>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	f7f8 fb93 	bl	8000554 <__aeabi_i2d>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 fa3f 	bl	80002b8 <__aeabi_dsub>
 8007e3a:	3630      	adds	r6, #48	; 0x30
 8007e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	465b      	mov	r3, fp
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	f7f8 fe60 	bl	8000b0c <__aeabi_dcmplt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d163      	bne.n	8007f18 <_dtoa_r+0x608>
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	4936      	ldr	r1, [pc, #216]	; (8007f30 <_dtoa_r+0x620>)
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7f8 fa2e 	bl	80002b8 <__aeabi_dsub>
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	f7f8 fe54 	bl	8000b0c <__aeabi_dcmplt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 80b5 	bne.w	8007fd4 <_dtoa_r+0x6c4>
 8007e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e6c:	429d      	cmp	r5, r3
 8007e6e:	d081      	beq.n	8007d74 <_dtoa_r+0x464>
 8007e70:	4b30      	ldr	r3, [pc, #192]	; (8007f34 <_dtoa_r+0x624>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	4650      	mov	r0, sl
 8007e76:	4659      	mov	r1, fp
 8007e78:	f7f8 fbd6 	bl	8000628 <__aeabi_dmul>
 8007e7c:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <_dtoa_r+0x624>)
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fbce 	bl	8000628 <__aeabi_dmul>
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	e7c6      	b.n	8007e20 <_dtoa_r+0x510>
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 fbc7 	bl	8000628 <__aeabi_dmul>
 8007e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9c:	9d01      	ldr	r5, [sp, #4]
 8007e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7f8 fe6e 	bl	8000b88 <__aeabi_d2iz>
 8007eac:	4606      	mov	r6, r0
 8007eae:	f7f8 fb51 	bl	8000554 <__aeabi_i2d>
 8007eb2:	3630      	adds	r6, #48	; 0x30
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 f9fc 	bl	80002b8 <__aeabi_dsub>
 8007ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4689      	mov	r9, r1
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	d124      	bne.n	8007f1c <_dtoa_r+0x60c>
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <_dtoa_r+0x630>)
 8007ed4:	4650      	mov	r0, sl
 8007ed6:	4659      	mov	r1, fp
 8007ed8:	f7f8 f9f0 	bl	80002bc <__adddf3>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe30 	bl	8000b48 <__aeabi_dcmpgt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d173      	bne.n	8007fd4 <_dtoa_r+0x6c4>
 8007eec:	4652      	mov	r2, sl
 8007eee:	465b      	mov	r3, fp
 8007ef0:	4913      	ldr	r1, [pc, #76]	; (8007f40 <_dtoa_r+0x630>)
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f7f8 f9e0 	bl	80002b8 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fe04 	bl	8000b0c <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f43f af35 	beq.w	8007d74 <_dtoa_r+0x464>
 8007f0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f0c:	1e6b      	subs	r3, r5, #1
 8007f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f14:	2b30      	cmp	r3, #48	; 0x30
 8007f16:	d0f8      	beq.n	8007f0a <_dtoa_r+0x5fa>
 8007f18:	9700      	str	r7, [sp, #0]
 8007f1a:	e049      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <_dtoa_r+0x624>)
 8007f1e:	f7f8 fb83 	bl	8000628 <__aeabi_dmul>
 8007f22:	4680      	mov	r8, r0
 8007f24:	4689      	mov	r9, r1
 8007f26:	e7bd      	b.n	8007ea4 <_dtoa_r+0x594>
 8007f28:	0800caf0 	.word	0x0800caf0
 8007f2c:	0800cac8 	.word	0x0800cac8
 8007f30:	3ff00000 	.word	0x3ff00000
 8007f34:	40240000 	.word	0x40240000
 8007f38:	401c0000 	.word	0x401c0000
 8007f3c:	40140000 	.word	0x40140000
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	9d01      	ldr	r5, [sp, #4]
 8007f46:	4656      	mov	r6, sl
 8007f48:	465f      	mov	r7, fp
 8007f4a:	4642      	mov	r2, r8
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 fc93 	bl	800087c <__aeabi_ddiv>
 8007f56:	f7f8 fe17 	bl	8000b88 <__aeabi_d2iz>
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	f7f8 fafa 	bl	8000554 <__aeabi_i2d>
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	f7f8 fb60 	bl	8000628 <__aeabi_dmul>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f74:	f7f8 f9a0 	bl	80002b8 <__aeabi_dsub>
 8007f78:	f805 6b01 	strb.w	r6, [r5], #1
 8007f7c:	9e01      	ldr	r6, [sp, #4]
 8007f7e:	9f03      	ldr	r7, [sp, #12]
 8007f80:	1bae      	subs	r6, r5, r6
 8007f82:	42b7      	cmp	r7, r6
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	d135      	bne.n	8007ff6 <_dtoa_r+0x6e6>
 8007f8a:	f7f8 f997 	bl	80002bc <__adddf3>
 8007f8e:	4642      	mov	r2, r8
 8007f90:	464b      	mov	r3, r9
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	f7f8 fdd7 	bl	8000b48 <__aeabi_dcmpgt>
 8007f9a:	b9d0      	cbnz	r0, 8007fd2 <_dtoa_r+0x6c2>
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fda8 	bl	8000af8 <__aeabi_dcmpeq>
 8007fa8:	b110      	cbz	r0, 8007fb0 <_dtoa_r+0x6a0>
 8007faa:	f01a 0f01 	tst.w	sl, #1
 8007fae:	d110      	bne.n	8007fd2 <_dtoa_r+0x6c2>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	ee18 1a10 	vmov	r1, s16
 8007fb6:	f000 fb09 	bl	80085cc <_Bfree>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9800      	ldr	r0, [sp, #0]
 8007fbe:	702b      	strb	r3, [r5, #0]
 8007fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f43f acf1 	beq.w	80079b0 <_dtoa_r+0xa0>
 8007fce:	601d      	str	r5, [r3, #0]
 8007fd0:	e4ee      	b.n	80079b0 <_dtoa_r+0xa0>
 8007fd2:	9f00      	ldr	r7, [sp, #0]
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fdc:	2a39      	cmp	r2, #57	; 0x39
 8007fde:	d106      	bne.n	8007fee <_dtoa_r+0x6de>
 8007fe0:	9a01      	ldr	r2, [sp, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d1f7      	bne.n	8007fd6 <_dtoa_r+0x6c6>
 8007fe6:	9901      	ldr	r1, [sp, #4]
 8007fe8:	2230      	movs	r2, #48	; 0x30
 8007fea:	3701      	adds	r7, #1
 8007fec:	700a      	strb	r2, [r1, #0]
 8007fee:	781a      	ldrb	r2, [r3, #0]
 8007ff0:	3201      	adds	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e790      	b.n	8007f18 <_dtoa_r+0x608>
 8007ff6:	4ba6      	ldr	r3, [pc, #664]	; (8008290 <_dtoa_r+0x980>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f7f8 fb15 	bl	8000628 <__aeabi_dmul>
 8007ffe:	2200      	movs	r2, #0
 8008000:	2300      	movs	r3, #0
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	f7f8 fd77 	bl	8000af8 <__aeabi_dcmpeq>
 800800a:	2800      	cmp	r0, #0
 800800c:	d09d      	beq.n	8007f4a <_dtoa_r+0x63a>
 800800e:	e7cf      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8008010:	9a08      	ldr	r2, [sp, #32]
 8008012:	2a00      	cmp	r2, #0
 8008014:	f000 80d7 	beq.w	80081c6 <_dtoa_r+0x8b6>
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	2a01      	cmp	r2, #1
 800801c:	f300 80ba 	bgt.w	8008194 <_dtoa_r+0x884>
 8008020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008022:	2a00      	cmp	r2, #0
 8008024:	f000 80b2 	beq.w	800818c <_dtoa_r+0x87c>
 8008028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800802c:	9e07      	ldr	r6, [sp, #28]
 800802e:	9d04      	ldr	r5, [sp, #16]
 8008030:	9a04      	ldr	r2, [sp, #16]
 8008032:	441a      	add	r2, r3
 8008034:	9204      	str	r2, [sp, #16]
 8008036:	9a05      	ldr	r2, [sp, #20]
 8008038:	2101      	movs	r1, #1
 800803a:	441a      	add	r2, r3
 800803c:	4620      	mov	r0, r4
 800803e:	9205      	str	r2, [sp, #20]
 8008040:	f000 fb7c 	bl	800873c <__i2b>
 8008044:	4607      	mov	r7, r0
 8008046:	2d00      	cmp	r5, #0
 8008048:	dd0c      	ble.n	8008064 <_dtoa_r+0x754>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd09      	ble.n	8008064 <_dtoa_r+0x754>
 8008050:	42ab      	cmp	r3, r5
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	bfa8      	it	ge
 8008056:	462b      	movge	r3, r5
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	9204      	str	r2, [sp, #16]
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	1aed      	subs	r5, r5, r3
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	b31b      	cbz	r3, 80080b0 <_dtoa_r+0x7a0>
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80af 	beq.w	80081ce <_dtoa_r+0x8be>
 8008070:	2e00      	cmp	r6, #0
 8008072:	dd13      	ble.n	800809c <_dtoa_r+0x78c>
 8008074:	4639      	mov	r1, r7
 8008076:	4632      	mov	r2, r6
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fc1f 	bl	80088bc <__pow5mult>
 800807e:	ee18 2a10 	vmov	r2, s16
 8008082:	4601      	mov	r1, r0
 8008084:	4607      	mov	r7, r0
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fb6e 	bl	8008768 <__multiply>
 800808c:	ee18 1a10 	vmov	r1, s16
 8008090:	4680      	mov	r8, r0
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fa9a 	bl	80085cc <_Bfree>
 8008098:	ee08 8a10 	vmov	s16, r8
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	1b9a      	subs	r2, r3, r6
 80080a0:	d006      	beq.n	80080b0 <_dtoa_r+0x7a0>
 80080a2:	ee18 1a10 	vmov	r1, s16
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fc08 	bl	80088bc <__pow5mult>
 80080ac:	ee08 0a10 	vmov	s16, r0
 80080b0:	2101      	movs	r1, #1
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fb42 	bl	800873c <__i2b>
 80080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	4606      	mov	r6, r0
 80080be:	f340 8088 	ble.w	80081d2 <_dtoa_r+0x8c2>
 80080c2:	461a      	mov	r2, r3
 80080c4:	4601      	mov	r1, r0
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fbf8 	bl	80088bc <__pow5mult>
 80080cc:	9b06      	ldr	r3, [sp, #24]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	4606      	mov	r6, r0
 80080d2:	f340 8081 	ble.w	80081d8 <_dtoa_r+0x8c8>
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	6933      	ldr	r3, [r6, #16]
 80080dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080e0:	6918      	ldr	r0, [r3, #16]
 80080e2:	f000 fadb 	bl	800869c <__hi0bits>
 80080e6:	f1c0 0020 	rsb	r0, r0, #32
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	4418      	add	r0, r3
 80080ee:	f010 001f 	ands.w	r0, r0, #31
 80080f2:	f000 8092 	beq.w	800821a <_dtoa_r+0x90a>
 80080f6:	f1c0 0320 	rsb	r3, r0, #32
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	f340 808a 	ble.w	8008214 <_dtoa_r+0x904>
 8008100:	f1c0 001c 	rsb	r0, r0, #28
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	4403      	add	r3, r0
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	4403      	add	r3, r0
 800810e:	4405      	add	r5, r0
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd07      	ble.n	8008128 <_dtoa_r+0x818>
 8008118:	ee18 1a10 	vmov	r1, s16
 800811c:	461a      	mov	r2, r3
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fc26 	bl	8008970 <__lshift>
 8008124:	ee08 0a10 	vmov	s16, r0
 8008128:	9b05      	ldr	r3, [sp, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	dd05      	ble.n	800813a <_dtoa_r+0x82a>
 800812e:	4631      	mov	r1, r6
 8008130:	461a      	mov	r2, r3
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fc1c 	bl	8008970 <__lshift>
 8008138:	4606      	mov	r6, r0
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d06e      	beq.n	800821e <_dtoa_r+0x90e>
 8008140:	ee18 0a10 	vmov	r0, s16
 8008144:	4631      	mov	r1, r6
 8008146:	f000 fc83 	bl	8008a50 <__mcmp>
 800814a:	2800      	cmp	r0, #0
 800814c:	da67      	bge.n	800821e <_dtoa_r+0x90e>
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	3b01      	subs	r3, #1
 8008152:	ee18 1a10 	vmov	r1, s16
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	220a      	movs	r2, #10
 800815a:	2300      	movs	r3, #0
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fa57 	bl	8008610 <__multadd>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	ee08 0a10 	vmov	s16, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 81b1 	beq.w	80084d0 <_dtoa_r+0xbc0>
 800816e:	2300      	movs	r3, #0
 8008170:	4639      	mov	r1, r7
 8008172:	220a      	movs	r2, #10
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fa4b 	bl	8008610 <__multadd>
 800817a:	9b02      	ldr	r3, [sp, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	4607      	mov	r7, r0
 8008180:	f300 808e 	bgt.w	80082a0 <_dtoa_r+0x990>
 8008184:	9b06      	ldr	r3, [sp, #24]
 8008186:	2b02      	cmp	r3, #2
 8008188:	dc51      	bgt.n	800822e <_dtoa_r+0x91e>
 800818a:	e089      	b.n	80082a0 <_dtoa_r+0x990>
 800818c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800818e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008192:	e74b      	b.n	800802c <_dtoa_r+0x71c>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	1e5e      	subs	r6, r3, #1
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	42b3      	cmp	r3, r6
 800819c:	bfbf      	itttt	lt
 800819e:	9b07      	ldrlt	r3, [sp, #28]
 80081a0:	9607      	strlt	r6, [sp, #28]
 80081a2:	1af2      	sublt	r2, r6, r3
 80081a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081a6:	bfb6      	itet	lt
 80081a8:	189b      	addlt	r3, r3, r2
 80081aa:	1b9e      	subge	r6, r3, r6
 80081ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	bfb8      	it	lt
 80081b2:	2600      	movlt	r6, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfb7      	itett	lt
 80081b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80081bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80081c0:	1a9d      	sublt	r5, r3, r2
 80081c2:	2300      	movlt	r3, #0
 80081c4:	e734      	b.n	8008030 <_dtoa_r+0x720>
 80081c6:	9e07      	ldr	r6, [sp, #28]
 80081c8:	9d04      	ldr	r5, [sp, #16]
 80081ca:	9f08      	ldr	r7, [sp, #32]
 80081cc:	e73b      	b.n	8008046 <_dtoa_r+0x736>
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	e767      	b.n	80080a2 <_dtoa_r+0x792>
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	dc18      	bgt.n	800820a <_dtoa_r+0x8fa>
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	d115      	bne.n	800820a <_dtoa_r+0x8fa>
 80081de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081e2:	b993      	cbnz	r3, 800820a <_dtoa_r+0x8fa>
 80081e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081e8:	0d1b      	lsrs	r3, r3, #20
 80081ea:	051b      	lsls	r3, r3, #20
 80081ec:	b183      	cbz	r3, 8008210 <_dtoa_r+0x900>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	3301      	adds	r3, #1
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	3301      	adds	r3, #1
 80081f8:	9305      	str	r3, [sp, #20]
 80081fa:	f04f 0801 	mov.w	r8, #1
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f af6a 	bne.w	80080da <_dtoa_r+0x7ca>
 8008206:	2001      	movs	r0, #1
 8008208:	e76f      	b.n	80080ea <_dtoa_r+0x7da>
 800820a:	f04f 0800 	mov.w	r8, #0
 800820e:	e7f6      	b.n	80081fe <_dtoa_r+0x8ee>
 8008210:	4698      	mov	r8, r3
 8008212:	e7f4      	b.n	80081fe <_dtoa_r+0x8ee>
 8008214:	f43f af7d 	beq.w	8008112 <_dtoa_r+0x802>
 8008218:	4618      	mov	r0, r3
 800821a:	301c      	adds	r0, #28
 800821c:	e772      	b.n	8008104 <_dtoa_r+0x7f4>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	dc37      	bgt.n	8008294 <_dtoa_r+0x984>
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	2b02      	cmp	r3, #2
 8008228:	dd34      	ble.n	8008294 <_dtoa_r+0x984>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	9b02      	ldr	r3, [sp, #8]
 8008230:	b96b      	cbnz	r3, 800824e <_dtoa_r+0x93e>
 8008232:	4631      	mov	r1, r6
 8008234:	2205      	movs	r2, #5
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f9ea 	bl	8008610 <__multadd>
 800823c:	4601      	mov	r1, r0
 800823e:	4606      	mov	r6, r0
 8008240:	ee18 0a10 	vmov	r0, s16
 8008244:	f000 fc04 	bl	8008a50 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	f73f adbb 	bgt.w	8007dc4 <_dtoa_r+0x4b4>
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	9d01      	ldr	r5, [sp, #4]
 8008252:	43db      	mvns	r3, r3
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	4631      	mov	r1, r6
 800825c:	4620      	mov	r0, r4
 800825e:	f000 f9b5 	bl	80085cc <_Bfree>
 8008262:	2f00      	cmp	r7, #0
 8008264:	f43f aea4 	beq.w	8007fb0 <_dtoa_r+0x6a0>
 8008268:	f1b8 0f00 	cmp.w	r8, #0
 800826c:	d005      	beq.n	800827a <_dtoa_r+0x96a>
 800826e:	45b8      	cmp	r8, r7
 8008270:	d003      	beq.n	800827a <_dtoa_r+0x96a>
 8008272:	4641      	mov	r1, r8
 8008274:	4620      	mov	r0, r4
 8008276:	f000 f9a9 	bl	80085cc <_Bfree>
 800827a:	4639      	mov	r1, r7
 800827c:	4620      	mov	r0, r4
 800827e:	f000 f9a5 	bl	80085cc <_Bfree>
 8008282:	e695      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8008284:	2600      	movs	r6, #0
 8008286:	4637      	mov	r7, r6
 8008288:	e7e1      	b.n	800824e <_dtoa_r+0x93e>
 800828a:	9700      	str	r7, [sp, #0]
 800828c:	4637      	mov	r7, r6
 800828e:	e599      	b.n	8007dc4 <_dtoa_r+0x4b4>
 8008290:	40240000 	.word	0x40240000
 8008294:	9b08      	ldr	r3, [sp, #32]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80ca 	beq.w	8008430 <_dtoa_r+0xb20>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	2d00      	cmp	r5, #0
 80082a2:	dd05      	ble.n	80082b0 <_dtoa_r+0x9a0>
 80082a4:	4639      	mov	r1, r7
 80082a6:	462a      	mov	r2, r5
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fb61 	bl	8008970 <__lshift>
 80082ae:	4607      	mov	r7, r0
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	d05b      	beq.n	800836e <_dtoa_r+0xa5e>
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f947 	bl	800854c <_Balloc>
 80082be:	4605      	mov	r5, r0
 80082c0:	b928      	cbnz	r0, 80082ce <_dtoa_r+0x9be>
 80082c2:	4b87      	ldr	r3, [pc, #540]	; (80084e0 <_dtoa_r+0xbd0>)
 80082c4:	4602      	mov	r2, r0
 80082c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082ca:	f7ff bb3b 	b.w	8007944 <_dtoa_r+0x34>
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	3202      	adds	r2, #2
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	f107 010c 	add.w	r1, r7, #12
 80082d8:	300c      	adds	r0, #12
 80082da:	f000 f91d 	bl	8008518 <memcpy>
 80082de:	2201      	movs	r2, #1
 80082e0:	4629      	mov	r1, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fb44 	bl	8008970 <__lshift>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	f103 0901 	add.w	r9, r3, #1
 80082ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	f00a 0301 	and.w	r3, sl, #1
 80082fa:	46b8      	mov	r8, r7
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	4607      	mov	r7, r0
 8008300:	4631      	mov	r1, r6
 8008302:	ee18 0a10 	vmov	r0, s16
 8008306:	f7ff fa77 	bl	80077f8 <quorem>
 800830a:	4641      	mov	r1, r8
 800830c:	9002      	str	r0, [sp, #8]
 800830e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008312:	ee18 0a10 	vmov	r0, s16
 8008316:	f000 fb9b 	bl	8008a50 <__mcmp>
 800831a:	463a      	mov	r2, r7
 800831c:	9003      	str	r0, [sp, #12]
 800831e:	4631      	mov	r1, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fbb1 	bl	8008a88 <__mdiff>
 8008326:	68c2      	ldr	r2, [r0, #12]
 8008328:	f109 3bff 	add.w	fp, r9, #4294967295
 800832c:	4605      	mov	r5, r0
 800832e:	bb02      	cbnz	r2, 8008372 <_dtoa_r+0xa62>
 8008330:	4601      	mov	r1, r0
 8008332:	ee18 0a10 	vmov	r0, s16
 8008336:	f000 fb8b 	bl	8008a50 <__mcmp>
 800833a:	4602      	mov	r2, r0
 800833c:	4629      	mov	r1, r5
 800833e:	4620      	mov	r0, r4
 8008340:	9207      	str	r2, [sp, #28]
 8008342:	f000 f943 	bl	80085cc <_Bfree>
 8008346:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800834a:	ea43 0102 	orr.w	r1, r3, r2
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	430b      	orrs	r3, r1
 8008352:	464d      	mov	r5, r9
 8008354:	d10f      	bne.n	8008376 <_dtoa_r+0xa66>
 8008356:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800835a:	d02a      	beq.n	80083b2 <_dtoa_r+0xaa2>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	dd02      	ble.n	8008368 <_dtoa_r+0xa58>
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008368:	f88b a000 	strb.w	sl, [fp]
 800836c:	e775      	b.n	800825a <_dtoa_r+0x94a>
 800836e:	4638      	mov	r0, r7
 8008370:	e7ba      	b.n	80082e8 <_dtoa_r+0x9d8>
 8008372:	2201      	movs	r2, #1
 8008374:	e7e2      	b.n	800833c <_dtoa_r+0xa2c>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	db04      	blt.n	8008386 <_dtoa_r+0xa76>
 800837c:	9906      	ldr	r1, [sp, #24]
 800837e:	430b      	orrs	r3, r1
 8008380:	9904      	ldr	r1, [sp, #16]
 8008382:	430b      	orrs	r3, r1
 8008384:	d122      	bne.n	80083cc <_dtoa_r+0xabc>
 8008386:	2a00      	cmp	r2, #0
 8008388:	ddee      	ble.n	8008368 <_dtoa_r+0xa58>
 800838a:	ee18 1a10 	vmov	r1, s16
 800838e:	2201      	movs	r2, #1
 8008390:	4620      	mov	r0, r4
 8008392:	f000 faed 	bl	8008970 <__lshift>
 8008396:	4631      	mov	r1, r6
 8008398:	ee08 0a10 	vmov	s16, r0
 800839c:	f000 fb58 	bl	8008a50 <__mcmp>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	dc03      	bgt.n	80083ac <_dtoa_r+0xa9c>
 80083a4:	d1e0      	bne.n	8008368 <_dtoa_r+0xa58>
 80083a6:	f01a 0f01 	tst.w	sl, #1
 80083aa:	d0dd      	beq.n	8008368 <_dtoa_r+0xa58>
 80083ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083b0:	d1d7      	bne.n	8008362 <_dtoa_r+0xa52>
 80083b2:	2339      	movs	r3, #57	; 0x39
 80083b4:	f88b 3000 	strb.w	r3, [fp]
 80083b8:	462b      	mov	r3, r5
 80083ba:	461d      	mov	r5, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083c2:	2a39      	cmp	r2, #57	; 0x39
 80083c4:	d071      	beq.n	80084aa <_dtoa_r+0xb9a>
 80083c6:	3201      	adds	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e746      	b.n	800825a <_dtoa_r+0x94a>
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	dd07      	ble.n	80083e0 <_dtoa_r+0xad0>
 80083d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083d4:	d0ed      	beq.n	80083b2 <_dtoa_r+0xaa2>
 80083d6:	f10a 0301 	add.w	r3, sl, #1
 80083da:	f88b 3000 	strb.w	r3, [fp]
 80083de:	e73c      	b.n	800825a <_dtoa_r+0x94a>
 80083e0:	9b05      	ldr	r3, [sp, #20]
 80083e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80083e6:	4599      	cmp	r9, r3
 80083e8:	d047      	beq.n	800847a <_dtoa_r+0xb6a>
 80083ea:	ee18 1a10 	vmov	r1, s16
 80083ee:	2300      	movs	r3, #0
 80083f0:	220a      	movs	r2, #10
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f90c 	bl	8008610 <__multadd>
 80083f8:	45b8      	cmp	r8, r7
 80083fa:	ee08 0a10 	vmov	s16, r0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	f04f 020a 	mov.w	r2, #10
 8008406:	4641      	mov	r1, r8
 8008408:	4620      	mov	r0, r4
 800840a:	d106      	bne.n	800841a <_dtoa_r+0xb0a>
 800840c:	f000 f900 	bl	8008610 <__multadd>
 8008410:	4680      	mov	r8, r0
 8008412:	4607      	mov	r7, r0
 8008414:	f109 0901 	add.w	r9, r9, #1
 8008418:	e772      	b.n	8008300 <_dtoa_r+0x9f0>
 800841a:	f000 f8f9 	bl	8008610 <__multadd>
 800841e:	4639      	mov	r1, r7
 8008420:	4680      	mov	r8, r0
 8008422:	2300      	movs	r3, #0
 8008424:	220a      	movs	r2, #10
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f8f2 	bl	8008610 <__multadd>
 800842c:	4607      	mov	r7, r0
 800842e:	e7f1      	b.n	8008414 <_dtoa_r+0xb04>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	9d01      	ldr	r5, [sp, #4]
 8008436:	ee18 0a10 	vmov	r0, s16
 800843a:	4631      	mov	r1, r6
 800843c:	f7ff f9dc 	bl	80077f8 <quorem>
 8008440:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	f805 ab01 	strb.w	sl, [r5], #1
 800844a:	1aea      	subs	r2, r5, r3
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	4293      	cmp	r3, r2
 8008450:	dd09      	ble.n	8008466 <_dtoa_r+0xb56>
 8008452:	ee18 1a10 	vmov	r1, s16
 8008456:	2300      	movs	r3, #0
 8008458:	220a      	movs	r2, #10
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f8d8 	bl	8008610 <__multadd>
 8008460:	ee08 0a10 	vmov	s16, r0
 8008464:	e7e7      	b.n	8008436 <_dtoa_r+0xb26>
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfc8      	it	gt
 800846c:	461d      	movgt	r5, r3
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	bfd8      	it	le
 8008472:	2501      	movle	r5, #1
 8008474:	441d      	add	r5, r3
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	ee18 1a10 	vmov	r1, s16
 800847e:	2201      	movs	r2, #1
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fa75 	bl	8008970 <__lshift>
 8008486:	4631      	mov	r1, r6
 8008488:	ee08 0a10 	vmov	s16, r0
 800848c:	f000 fae0 	bl	8008a50 <__mcmp>
 8008490:	2800      	cmp	r0, #0
 8008492:	dc91      	bgt.n	80083b8 <_dtoa_r+0xaa8>
 8008494:	d102      	bne.n	800849c <_dtoa_r+0xb8c>
 8008496:	f01a 0f01 	tst.w	sl, #1
 800849a:	d18d      	bne.n	80083b8 <_dtoa_r+0xaa8>
 800849c:	462b      	mov	r3, r5
 800849e:	461d      	mov	r5, r3
 80084a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084a4:	2a30      	cmp	r2, #48	; 0x30
 80084a6:	d0fa      	beq.n	800849e <_dtoa_r+0xb8e>
 80084a8:	e6d7      	b.n	800825a <_dtoa_r+0x94a>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d184      	bne.n	80083ba <_dtoa_r+0xaaa>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	2331      	movs	r3, #49	; 0x31
 80084b8:	7013      	strb	r3, [r2, #0]
 80084ba:	e6ce      	b.n	800825a <_dtoa_r+0x94a>
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <_dtoa_r+0xbd4>)
 80084be:	f7ff ba95 	b.w	80079ec <_dtoa_r+0xdc>
 80084c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f47f aa6e 	bne.w	80079a6 <_dtoa_r+0x96>
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <_dtoa_r+0xbd8>)
 80084cc:	f7ff ba8e 	b.w	80079ec <_dtoa_r+0xdc>
 80084d0:	9b02      	ldr	r3, [sp, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dcae      	bgt.n	8008434 <_dtoa_r+0xb24>
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	f73f aea8 	bgt.w	800822e <_dtoa_r+0x91e>
 80084de:	e7a9      	b.n	8008434 <_dtoa_r+0xb24>
 80084e0:	0800ca59 	.word	0x0800ca59
 80084e4:	0800cbd9 	.word	0x0800cbd9
 80084e8:	0800c9da 	.word	0x0800c9da

080084ec <_localeconv_r>:
 80084ec:	4800      	ldr	r0, [pc, #0]	; (80084f0 <_localeconv_r+0x4>)
 80084ee:	4770      	bx	lr
 80084f0:	20000164 	.word	0x20000164

080084f4 <_lseek_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_lseek_r+0x20>)
 80084f8:	4604      	mov	r4, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7fa fc58 	bl	8002db8 <_lseek>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_lseek_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_lseek_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	2000063c 	.word	0x2000063c

08008518 <memcpy>:
 8008518:	440a      	add	r2, r1
 800851a:	4291      	cmp	r1, r2
 800851c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008520:	d100      	bne.n	8008524 <memcpy+0xc>
 8008522:	4770      	bx	lr
 8008524:	b510      	push	{r4, lr}
 8008526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800852a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852e:	4291      	cmp	r1, r2
 8008530:	d1f9      	bne.n	8008526 <memcpy+0xe>
 8008532:	bd10      	pop	{r4, pc}

08008534 <__malloc_lock>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__malloc_lock+0x8>)
 8008536:	f001 bb87 	b.w	8009c48 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	20000640 	.word	0x20000640

08008540 <__malloc_unlock>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__malloc_unlock+0x8>)
 8008542:	f001 bb82 	b.w	8009c4a <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	20000640 	.word	0x20000640

0800854c <_Balloc>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b976      	cbnz	r6, 8008574 <_Balloc+0x28>
 8008556:	2010      	movs	r0, #16
 8008558:	f7fe fb30 	bl	8006bbc <malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	6260      	str	r0, [r4, #36]	; 0x24
 8008560:	b920      	cbnz	r0, 800856c <_Balloc+0x20>
 8008562:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <_Balloc+0x78>)
 8008564:	4818      	ldr	r0, [pc, #96]	; (80085c8 <_Balloc+0x7c>)
 8008566:	2166      	movs	r1, #102	; 0x66
 8008568:	f001 f986 	bl	8009878 <__assert_func>
 800856c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008570:	6006      	str	r6, [r0, #0]
 8008572:	60c6      	str	r6, [r0, #12]
 8008574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008576:	68f3      	ldr	r3, [r6, #12]
 8008578:	b183      	cbz	r3, 800859c <_Balloc+0x50>
 800857a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008582:	b9b8      	cbnz	r0, 80085b4 <_Balloc+0x68>
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f605 	lsl.w	r6, r1, r5
 800858a:	1d72      	adds	r2, r6, #5
 800858c:	0092      	lsls	r2, r2, #2
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fb60 	bl	8008c54 <_calloc_r>
 8008594:	b160      	cbz	r0, 80085b0 <_Balloc+0x64>
 8008596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800859a:	e00e      	b.n	80085ba <_Balloc+0x6e>
 800859c:	2221      	movs	r2, #33	; 0x21
 800859e:	2104      	movs	r1, #4
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fb57 	bl	8008c54 <_calloc_r>
 80085a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a8:	60f0      	str	r0, [r6, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <_Balloc+0x2e>
 80085b0:	2000      	movs	r0, #0
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ba:	2300      	movs	r3, #0
 80085bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c0:	e7f7      	b.n	80085b2 <_Balloc+0x66>
 80085c2:	bf00      	nop
 80085c4:	0800c9e7 	.word	0x0800c9e7
 80085c8:	0800ca6a 	.word	0x0800ca6a

080085cc <_Bfree>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b976      	cbnz	r6, 80085f4 <_Bfree+0x28>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7fe faf0 	bl	8006bbc <malloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	6268      	str	r0, [r5, #36]	; 0x24
 80085e0:	b920      	cbnz	r0, 80085ec <_Bfree+0x20>
 80085e2:	4b09      	ldr	r3, [pc, #36]	; (8008608 <_Bfree+0x3c>)
 80085e4:	4809      	ldr	r0, [pc, #36]	; (800860c <_Bfree+0x40>)
 80085e6:	218a      	movs	r1, #138	; 0x8a
 80085e8:	f001 f946 	bl	8009878 <__assert_func>
 80085ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f0:	6006      	str	r6, [r0, #0]
 80085f2:	60c6      	str	r6, [r0, #12]
 80085f4:	b13c      	cbz	r4, 8008606 <_Bfree+0x3a>
 80085f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008600:	6021      	str	r1, [r4, #0]
 8008602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	0800c9e7 	.word	0x0800c9e7
 800860c:	0800ca6a 	.word	0x0800ca6a

08008610 <__multadd>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	690d      	ldr	r5, [r1, #16]
 8008616:	4607      	mov	r7, r0
 8008618:	460c      	mov	r4, r1
 800861a:	461e      	mov	r6, r3
 800861c:	f101 0c14 	add.w	ip, r1, #20
 8008620:	2000      	movs	r0, #0
 8008622:	f8dc 3000 	ldr.w	r3, [ip]
 8008626:	b299      	uxth	r1, r3
 8008628:	fb02 6101 	mla	r1, r2, r1, r6
 800862c:	0c1e      	lsrs	r6, r3, #16
 800862e:	0c0b      	lsrs	r3, r1, #16
 8008630:	fb02 3306 	mla	r3, r2, r6, r3
 8008634:	b289      	uxth	r1, r1
 8008636:	3001      	adds	r0, #1
 8008638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800863c:	4285      	cmp	r5, r0
 800863e:	f84c 1b04 	str.w	r1, [ip], #4
 8008642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008646:	dcec      	bgt.n	8008622 <__multadd+0x12>
 8008648:	b30e      	cbz	r6, 800868e <__multadd+0x7e>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	42ab      	cmp	r3, r5
 800864e:	dc19      	bgt.n	8008684 <__multadd+0x74>
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	4638      	mov	r0, r7
 8008654:	3101      	adds	r1, #1
 8008656:	f7ff ff79 	bl	800854c <_Balloc>
 800865a:	4680      	mov	r8, r0
 800865c:	b928      	cbnz	r0, 800866a <__multadd+0x5a>
 800865e:	4602      	mov	r2, r0
 8008660:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <__multadd+0x84>)
 8008662:	480d      	ldr	r0, [pc, #52]	; (8008698 <__multadd+0x88>)
 8008664:	21b5      	movs	r1, #181	; 0xb5
 8008666:	f001 f907 	bl	8009878 <__assert_func>
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	3202      	adds	r2, #2
 800866e:	f104 010c 	add.w	r1, r4, #12
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	300c      	adds	r0, #12
 8008676:	f7ff ff4f 	bl	8008518 <memcpy>
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa5 	bl	80085cc <_Bfree>
 8008682:	4644      	mov	r4, r8
 8008684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008688:	3501      	adds	r5, #1
 800868a:	615e      	str	r6, [r3, #20]
 800868c:	6125      	str	r5, [r4, #16]
 800868e:	4620      	mov	r0, r4
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	0800ca59 	.word	0x0800ca59
 8008698:	0800ca6a 	.word	0x0800ca6a

0800869c <__hi0bits>:
 800869c:	0c03      	lsrs	r3, r0, #16
 800869e:	041b      	lsls	r3, r3, #16
 80086a0:	b9d3      	cbnz	r3, 80086d8 <__hi0bits+0x3c>
 80086a2:	0400      	lsls	r0, r0, #16
 80086a4:	2310      	movs	r3, #16
 80086a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086aa:	bf04      	itt	eq
 80086ac:	0200      	lsleq	r0, r0, #8
 80086ae:	3308      	addeq	r3, #8
 80086b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086b4:	bf04      	itt	eq
 80086b6:	0100      	lsleq	r0, r0, #4
 80086b8:	3304      	addeq	r3, #4
 80086ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086be:	bf04      	itt	eq
 80086c0:	0080      	lsleq	r0, r0, #2
 80086c2:	3302      	addeq	r3, #2
 80086c4:	2800      	cmp	r0, #0
 80086c6:	db05      	blt.n	80086d4 <__hi0bits+0x38>
 80086c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086cc:	f103 0301 	add.w	r3, r3, #1
 80086d0:	bf08      	it	eq
 80086d2:	2320      	moveq	r3, #32
 80086d4:	4618      	mov	r0, r3
 80086d6:	4770      	bx	lr
 80086d8:	2300      	movs	r3, #0
 80086da:	e7e4      	b.n	80086a6 <__hi0bits+0xa>

080086dc <__lo0bits>:
 80086dc:	6803      	ldr	r3, [r0, #0]
 80086de:	f013 0207 	ands.w	r2, r3, #7
 80086e2:	4601      	mov	r1, r0
 80086e4:	d00b      	beq.n	80086fe <__lo0bits+0x22>
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	d423      	bmi.n	8008732 <__lo0bits+0x56>
 80086ea:	0798      	lsls	r0, r3, #30
 80086ec:	bf49      	itett	mi
 80086ee:	085b      	lsrmi	r3, r3, #1
 80086f0:	089b      	lsrpl	r3, r3, #2
 80086f2:	2001      	movmi	r0, #1
 80086f4:	600b      	strmi	r3, [r1, #0]
 80086f6:	bf5c      	itt	pl
 80086f8:	600b      	strpl	r3, [r1, #0]
 80086fa:	2002      	movpl	r0, #2
 80086fc:	4770      	bx	lr
 80086fe:	b298      	uxth	r0, r3
 8008700:	b9a8      	cbnz	r0, 800872e <__lo0bits+0x52>
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	2010      	movs	r0, #16
 8008706:	b2da      	uxtb	r2, r3
 8008708:	b90a      	cbnz	r2, 800870e <__lo0bits+0x32>
 800870a:	3008      	adds	r0, #8
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	071a      	lsls	r2, r3, #28
 8008710:	bf04      	itt	eq
 8008712:	091b      	lsreq	r3, r3, #4
 8008714:	3004      	addeq	r0, #4
 8008716:	079a      	lsls	r2, r3, #30
 8008718:	bf04      	itt	eq
 800871a:	089b      	lsreq	r3, r3, #2
 800871c:	3002      	addeq	r0, #2
 800871e:	07da      	lsls	r2, r3, #31
 8008720:	d403      	bmi.n	800872a <__lo0bits+0x4e>
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	f100 0001 	add.w	r0, r0, #1
 8008728:	d005      	beq.n	8008736 <__lo0bits+0x5a>
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	4770      	bx	lr
 800872e:	4610      	mov	r0, r2
 8008730:	e7e9      	b.n	8008706 <__lo0bits+0x2a>
 8008732:	2000      	movs	r0, #0
 8008734:	4770      	bx	lr
 8008736:	2020      	movs	r0, #32
 8008738:	4770      	bx	lr
	...

0800873c <__i2b>:
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	2101      	movs	r1, #1
 8008742:	f7ff ff03 	bl	800854c <_Balloc>
 8008746:	4602      	mov	r2, r0
 8008748:	b928      	cbnz	r0, 8008756 <__i2b+0x1a>
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <__i2b+0x24>)
 800874c:	4805      	ldr	r0, [pc, #20]	; (8008764 <__i2b+0x28>)
 800874e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008752:	f001 f891 	bl	8009878 <__assert_func>
 8008756:	2301      	movs	r3, #1
 8008758:	6144      	str	r4, [r0, #20]
 800875a:	6103      	str	r3, [r0, #16]
 800875c:	bd10      	pop	{r4, pc}
 800875e:	bf00      	nop
 8008760:	0800ca59 	.word	0x0800ca59
 8008764:	0800ca6a 	.word	0x0800ca6a

08008768 <__multiply>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4691      	mov	r9, r2
 800876e:	690a      	ldr	r2, [r1, #16]
 8008770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	bfb8      	it	lt
 8008778:	460b      	movlt	r3, r1
 800877a:	460c      	mov	r4, r1
 800877c:	bfbc      	itt	lt
 800877e:	464c      	movlt	r4, r9
 8008780:	4699      	movlt	r9, r3
 8008782:	6927      	ldr	r7, [r4, #16]
 8008784:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008788:	68a3      	ldr	r3, [r4, #8]
 800878a:	6861      	ldr	r1, [r4, #4]
 800878c:	eb07 060a 	add.w	r6, r7, sl
 8008790:	42b3      	cmp	r3, r6
 8008792:	b085      	sub	sp, #20
 8008794:	bfb8      	it	lt
 8008796:	3101      	addlt	r1, #1
 8008798:	f7ff fed8 	bl	800854c <_Balloc>
 800879c:	b930      	cbnz	r0, 80087ac <__multiply+0x44>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b44      	ldr	r3, [pc, #272]	; (80088b4 <__multiply+0x14c>)
 80087a2:	4845      	ldr	r0, [pc, #276]	; (80088b8 <__multiply+0x150>)
 80087a4:	f240 115d 	movw	r1, #349	; 0x15d
 80087a8:	f001 f866 	bl	8009878 <__assert_func>
 80087ac:	f100 0514 	add.w	r5, r0, #20
 80087b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087b4:	462b      	mov	r3, r5
 80087b6:	2200      	movs	r2, #0
 80087b8:	4543      	cmp	r3, r8
 80087ba:	d321      	bcc.n	8008800 <__multiply+0x98>
 80087bc:	f104 0314 	add.w	r3, r4, #20
 80087c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087c4:	f109 0314 	add.w	r3, r9, #20
 80087c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087cc:	9202      	str	r2, [sp, #8]
 80087ce:	1b3a      	subs	r2, r7, r4
 80087d0:	3a15      	subs	r2, #21
 80087d2:	f022 0203 	bic.w	r2, r2, #3
 80087d6:	3204      	adds	r2, #4
 80087d8:	f104 0115 	add.w	r1, r4, #21
 80087dc:	428f      	cmp	r7, r1
 80087de:	bf38      	it	cc
 80087e0:	2204      	movcc	r2, #4
 80087e2:	9201      	str	r2, [sp, #4]
 80087e4:	9a02      	ldr	r2, [sp, #8]
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d80c      	bhi.n	8008806 <__multiply+0x9e>
 80087ec:	2e00      	cmp	r6, #0
 80087ee:	dd03      	ble.n	80087f8 <__multiply+0x90>
 80087f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d05a      	beq.n	80088ae <__multiply+0x146>
 80087f8:	6106      	str	r6, [r0, #16]
 80087fa:	b005      	add	sp, #20
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	f843 2b04 	str.w	r2, [r3], #4
 8008804:	e7d8      	b.n	80087b8 <__multiply+0x50>
 8008806:	f8b3 a000 	ldrh.w	sl, [r3]
 800880a:	f1ba 0f00 	cmp.w	sl, #0
 800880e:	d024      	beq.n	800885a <__multiply+0xf2>
 8008810:	f104 0e14 	add.w	lr, r4, #20
 8008814:	46a9      	mov	r9, r5
 8008816:	f04f 0c00 	mov.w	ip, #0
 800881a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800881e:	f8d9 1000 	ldr.w	r1, [r9]
 8008822:	fa1f fb82 	uxth.w	fp, r2
 8008826:	b289      	uxth	r1, r1
 8008828:	fb0a 110b 	mla	r1, sl, fp, r1
 800882c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008830:	f8d9 2000 	ldr.w	r2, [r9]
 8008834:	4461      	add	r1, ip
 8008836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800883a:	fb0a c20b 	mla	r2, sl, fp, ip
 800883e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008842:	b289      	uxth	r1, r1
 8008844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008848:	4577      	cmp	r7, lr
 800884a:	f849 1b04 	str.w	r1, [r9], #4
 800884e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008852:	d8e2      	bhi.n	800881a <__multiply+0xb2>
 8008854:	9a01      	ldr	r2, [sp, #4]
 8008856:	f845 c002 	str.w	ip, [r5, r2]
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008860:	3304      	adds	r3, #4
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	d020      	beq.n	80088aa <__multiply+0x142>
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	f104 0c14 	add.w	ip, r4, #20
 800886e:	46ae      	mov	lr, r5
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	f8bc b000 	ldrh.w	fp, [ip]
 8008878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800887c:	fb09 220b 	mla	r2, r9, fp, r2
 8008880:	4492      	add	sl, r2
 8008882:	b289      	uxth	r1, r1
 8008884:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008888:	f84e 1b04 	str.w	r1, [lr], #4
 800888c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008890:	f8be 1000 	ldrh.w	r1, [lr]
 8008894:	0c12      	lsrs	r2, r2, #16
 8008896:	fb09 1102 	mla	r1, r9, r2, r1
 800889a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800889e:	4567      	cmp	r7, ip
 80088a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088a4:	d8e6      	bhi.n	8008874 <__multiply+0x10c>
 80088a6:	9a01      	ldr	r2, [sp, #4]
 80088a8:	50a9      	str	r1, [r5, r2]
 80088aa:	3504      	adds	r5, #4
 80088ac:	e79a      	b.n	80087e4 <__multiply+0x7c>
 80088ae:	3e01      	subs	r6, #1
 80088b0:	e79c      	b.n	80087ec <__multiply+0x84>
 80088b2:	bf00      	nop
 80088b4:	0800ca59 	.word	0x0800ca59
 80088b8:	0800ca6a 	.word	0x0800ca6a

080088bc <__pow5mult>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	4615      	mov	r5, r2
 80088c2:	f012 0203 	ands.w	r2, r2, #3
 80088c6:	4606      	mov	r6, r0
 80088c8:	460f      	mov	r7, r1
 80088ca:	d007      	beq.n	80088dc <__pow5mult+0x20>
 80088cc:	4c25      	ldr	r4, [pc, #148]	; (8008964 <__pow5mult+0xa8>)
 80088ce:	3a01      	subs	r2, #1
 80088d0:	2300      	movs	r3, #0
 80088d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088d6:	f7ff fe9b 	bl	8008610 <__multadd>
 80088da:	4607      	mov	r7, r0
 80088dc:	10ad      	asrs	r5, r5, #2
 80088de:	d03d      	beq.n	800895c <__pow5mult+0xa0>
 80088e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088e2:	b97c      	cbnz	r4, 8008904 <__pow5mult+0x48>
 80088e4:	2010      	movs	r0, #16
 80088e6:	f7fe f969 	bl	8006bbc <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6270      	str	r0, [r6, #36]	; 0x24
 80088ee:	b928      	cbnz	r0, 80088fc <__pow5mult+0x40>
 80088f0:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <__pow5mult+0xac>)
 80088f2:	481e      	ldr	r0, [pc, #120]	; (800896c <__pow5mult+0xb0>)
 80088f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088f8:	f000 ffbe 	bl	8009878 <__assert_func>
 80088fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008900:	6004      	str	r4, [r0, #0]
 8008902:	60c4      	str	r4, [r0, #12]
 8008904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800890c:	b94c      	cbnz	r4, 8008922 <__pow5mult+0x66>
 800890e:	f240 2171 	movw	r1, #625	; 0x271
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff12 	bl	800873c <__i2b>
 8008918:	2300      	movs	r3, #0
 800891a:	f8c8 0008 	str.w	r0, [r8, #8]
 800891e:	4604      	mov	r4, r0
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	07eb      	lsls	r3, r5, #31
 8008928:	d50a      	bpl.n	8008940 <__pow5mult+0x84>
 800892a:	4639      	mov	r1, r7
 800892c:	4622      	mov	r2, r4
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff ff1a 	bl	8008768 <__multiply>
 8008934:	4639      	mov	r1, r7
 8008936:	4680      	mov	r8, r0
 8008938:	4630      	mov	r0, r6
 800893a:	f7ff fe47 	bl	80085cc <_Bfree>
 800893e:	4647      	mov	r7, r8
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	d00b      	beq.n	800895c <__pow5mult+0xa0>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	b938      	cbnz	r0, 8008958 <__pow5mult+0x9c>
 8008948:	4622      	mov	r2, r4
 800894a:	4621      	mov	r1, r4
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff ff0b 	bl	8008768 <__multiply>
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f8c0 9000 	str.w	r9, [r0]
 8008958:	4604      	mov	r4, r0
 800895a:	e7e4      	b.n	8008926 <__pow5mult+0x6a>
 800895c:	4638      	mov	r0, r7
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	bf00      	nop
 8008964:	0800cbb8 	.word	0x0800cbb8
 8008968:	0800c9e7 	.word	0x0800c9e7
 800896c:	0800ca6a 	.word	0x0800ca6a

08008970 <__lshift>:
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	6849      	ldr	r1, [r1, #4]
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	4607      	mov	r7, r0
 8008982:	4691      	mov	r9, r2
 8008984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008988:	f108 0601 	add.w	r6, r8, #1
 800898c:	42b3      	cmp	r3, r6
 800898e:	db0b      	blt.n	80089a8 <__lshift+0x38>
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff fddb 	bl	800854c <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b948      	cbnz	r0, 80089ae <__lshift+0x3e>
 800899a:	4602      	mov	r2, r0
 800899c:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <__lshift+0xd8>)
 800899e:	482b      	ldr	r0, [pc, #172]	; (8008a4c <__lshift+0xdc>)
 80089a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089a4:	f000 ff68 	bl	8009878 <__assert_func>
 80089a8:	3101      	adds	r1, #1
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	e7ee      	b.n	800898c <__lshift+0x1c>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f100 0114 	add.w	r1, r0, #20
 80089b4:	f100 0210 	add.w	r2, r0, #16
 80089b8:	4618      	mov	r0, r3
 80089ba:	4553      	cmp	r3, sl
 80089bc:	db37      	blt.n	8008a2e <__lshift+0xbe>
 80089be:	6920      	ldr	r0, [r4, #16]
 80089c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c4:	f104 0314 	add.w	r3, r4, #20
 80089c8:	f019 091f 	ands.w	r9, r9, #31
 80089cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089d4:	d02f      	beq.n	8008a36 <__lshift+0xc6>
 80089d6:	f1c9 0e20 	rsb	lr, r9, #32
 80089da:	468a      	mov	sl, r1
 80089dc:	f04f 0c00 	mov.w	ip, #0
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	fa02 f209 	lsl.w	r2, r2, r9
 80089e6:	ea42 020c 	orr.w	r2, r2, ip
 80089ea:	f84a 2b04 	str.w	r2, [sl], #4
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	4298      	cmp	r0, r3
 80089f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089f8:	d8f2      	bhi.n	80089e0 <__lshift+0x70>
 80089fa:	1b03      	subs	r3, r0, r4
 80089fc:	3b15      	subs	r3, #21
 80089fe:	f023 0303 	bic.w	r3, r3, #3
 8008a02:	3304      	adds	r3, #4
 8008a04:	f104 0215 	add.w	r2, r4, #21
 8008a08:	4290      	cmp	r0, r2
 8008a0a:	bf38      	it	cc
 8008a0c:	2304      	movcc	r3, #4
 8008a0e:	f841 c003 	str.w	ip, [r1, r3]
 8008a12:	f1bc 0f00 	cmp.w	ip, #0
 8008a16:	d001      	beq.n	8008a1c <__lshift+0xac>
 8008a18:	f108 0602 	add.w	r6, r8, #2
 8008a1c:	3e01      	subs	r6, #1
 8008a1e:	4638      	mov	r0, r7
 8008a20:	612e      	str	r6, [r5, #16]
 8008a22:	4621      	mov	r1, r4
 8008a24:	f7ff fdd2 	bl	80085cc <_Bfree>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a32:	3301      	adds	r3, #1
 8008a34:	e7c1      	b.n	80089ba <__lshift+0x4a>
 8008a36:	3904      	subs	r1, #4
 8008a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a40:	4298      	cmp	r0, r3
 8008a42:	d8f9      	bhi.n	8008a38 <__lshift+0xc8>
 8008a44:	e7ea      	b.n	8008a1c <__lshift+0xac>
 8008a46:	bf00      	nop
 8008a48:	0800ca59 	.word	0x0800ca59
 8008a4c:	0800ca6a 	.word	0x0800ca6a

08008a50 <__mcmp>:
 8008a50:	b530      	push	{r4, r5, lr}
 8008a52:	6902      	ldr	r2, [r0, #16]
 8008a54:	690c      	ldr	r4, [r1, #16]
 8008a56:	1b12      	subs	r2, r2, r4
 8008a58:	d10e      	bne.n	8008a78 <__mcmp+0x28>
 8008a5a:	f100 0314 	add.w	r3, r0, #20
 8008a5e:	3114      	adds	r1, #20
 8008a60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a70:	42a5      	cmp	r5, r4
 8008a72:	d003      	beq.n	8008a7c <__mcmp+0x2c>
 8008a74:	d305      	bcc.n	8008a82 <__mcmp+0x32>
 8008a76:	2201      	movs	r2, #1
 8008a78:	4610      	mov	r0, r2
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	4283      	cmp	r3, r0
 8008a7e:	d3f3      	bcc.n	8008a68 <__mcmp+0x18>
 8008a80:	e7fa      	b.n	8008a78 <__mcmp+0x28>
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295
 8008a86:	e7f7      	b.n	8008a78 <__mcmp+0x28>

08008a88 <__mdiff>:
 8008a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	4606      	mov	r6, r0
 8008a90:	4611      	mov	r1, r2
 8008a92:	4620      	mov	r0, r4
 8008a94:	4690      	mov	r8, r2
 8008a96:	f7ff ffdb 	bl	8008a50 <__mcmp>
 8008a9a:	1e05      	subs	r5, r0, #0
 8008a9c:	d110      	bne.n	8008ac0 <__mdiff+0x38>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff fd53 	bl	800854c <_Balloc>
 8008aa6:	b930      	cbnz	r0, 8008ab6 <__mdiff+0x2e>
 8008aa8:	4b3a      	ldr	r3, [pc, #232]	; (8008b94 <__mdiff+0x10c>)
 8008aaa:	4602      	mov	r2, r0
 8008aac:	f240 2132 	movw	r1, #562	; 0x232
 8008ab0:	4839      	ldr	r0, [pc, #228]	; (8008b98 <__mdiff+0x110>)
 8008ab2:	f000 fee1 	bl	8009878 <__assert_func>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	bfa4      	itt	ge
 8008ac2:	4643      	movge	r3, r8
 8008ac4:	46a0      	movge	r8, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008acc:	bfa6      	itte	ge
 8008ace:	461c      	movge	r4, r3
 8008ad0:	2500      	movge	r5, #0
 8008ad2:	2501      	movlt	r5, #1
 8008ad4:	f7ff fd3a 	bl	800854c <_Balloc>
 8008ad8:	b920      	cbnz	r0, 8008ae4 <__mdiff+0x5c>
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <__mdiff+0x10c>)
 8008adc:	4602      	mov	r2, r0
 8008ade:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ae2:	e7e5      	b.n	8008ab0 <__mdiff+0x28>
 8008ae4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ae8:	6926      	ldr	r6, [r4, #16]
 8008aea:	60c5      	str	r5, [r0, #12]
 8008aec:	f104 0914 	add.w	r9, r4, #20
 8008af0:	f108 0514 	add.w	r5, r8, #20
 8008af4:	f100 0e14 	add.w	lr, r0, #20
 8008af8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008afc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b00:	f108 0210 	add.w	r2, r8, #16
 8008b04:	46f2      	mov	sl, lr
 8008b06:	2100      	movs	r1, #0
 8008b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b10:	fa1f f883 	uxth.w	r8, r3
 8008b14:	fa11 f18b 	uxtah	r1, r1, fp
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	eba1 0808 	sub.w	r8, r1, r8
 8008b1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b26:	fa1f f888 	uxth.w	r8, r8
 8008b2a:	1419      	asrs	r1, r3, #16
 8008b2c:	454e      	cmp	r6, r9
 8008b2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b32:	f84a 3b04 	str.w	r3, [sl], #4
 8008b36:	d8e7      	bhi.n	8008b08 <__mdiff+0x80>
 8008b38:	1b33      	subs	r3, r6, r4
 8008b3a:	3b15      	subs	r3, #21
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	3304      	adds	r3, #4
 8008b42:	3415      	adds	r4, #21
 8008b44:	42a6      	cmp	r6, r4
 8008b46:	bf38      	it	cc
 8008b48:	2304      	movcc	r3, #4
 8008b4a:	441d      	add	r5, r3
 8008b4c:	4473      	add	r3, lr
 8008b4e:	469e      	mov	lr, r3
 8008b50:	462e      	mov	r6, r5
 8008b52:	4566      	cmp	r6, ip
 8008b54:	d30e      	bcc.n	8008b74 <__mdiff+0xec>
 8008b56:	f10c 0203 	add.w	r2, ip, #3
 8008b5a:	1b52      	subs	r2, r2, r5
 8008b5c:	f022 0203 	bic.w	r2, r2, #3
 8008b60:	3d03      	subs	r5, #3
 8008b62:	45ac      	cmp	ip, r5
 8008b64:	bf38      	it	cc
 8008b66:	2200      	movcc	r2, #0
 8008b68:	441a      	add	r2, r3
 8008b6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b6e:	b17b      	cbz	r3, 8008b90 <__mdiff+0x108>
 8008b70:	6107      	str	r7, [r0, #16]
 8008b72:	e7a3      	b.n	8008abc <__mdiff+0x34>
 8008b74:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b78:	fa11 f288 	uxtah	r2, r1, r8
 8008b7c:	1414      	asrs	r4, r2, #16
 8008b7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b82:	b292      	uxth	r2, r2
 8008b84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b88:	f84e 2b04 	str.w	r2, [lr], #4
 8008b8c:	1421      	asrs	r1, r4, #16
 8008b8e:	e7e0      	b.n	8008b52 <__mdiff+0xca>
 8008b90:	3f01      	subs	r7, #1
 8008b92:	e7ea      	b.n	8008b6a <__mdiff+0xe2>
 8008b94:	0800ca59 	.word	0x0800ca59
 8008b98:	0800ca6a 	.word	0x0800ca6a

08008b9c <__d2b>:
 8008b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	ec57 6b10 	vmov	r6, r7, d0
 8008ba8:	4690      	mov	r8, r2
 8008baa:	f7ff fccf 	bl	800854c <_Balloc>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b930      	cbnz	r0, 8008bc0 <__d2b+0x24>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <__d2b+0xb0>)
 8008bb6:	4826      	ldr	r0, [pc, #152]	; (8008c50 <__d2b+0xb4>)
 8008bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008bbc:	f000 fe5c 	bl	8009878 <__assert_func>
 8008bc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc8:	bb35      	cbnz	r5, 8008c18 <__d2b+0x7c>
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	d028      	beq.n	8008c22 <__d2b+0x86>
 8008bd0:	4668      	mov	r0, sp
 8008bd2:	9600      	str	r6, [sp, #0]
 8008bd4:	f7ff fd82 	bl	80086dc <__lo0bits>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	b300      	cbz	r0, 8008c1e <__d2b+0x82>
 8008bdc:	9a01      	ldr	r2, [sp, #4]
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	430b      	orrs	r3, r1
 8008be8:	40c2      	lsrs	r2, r0
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	61a3      	str	r3, [r4, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf14      	ite	ne
 8008bf6:	2202      	movne	r2, #2
 8008bf8:	2201      	moveq	r2, #1
 8008bfa:	6122      	str	r2, [r4, #16]
 8008bfc:	b1d5      	cbz	r5, 8008c34 <__d2b+0x98>
 8008bfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c02:	4405      	add	r5, r0
 8008c04:	f8c9 5000 	str.w	r5, [r9]
 8008c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0c:	f8c8 0000 	str.w	r0, [r8]
 8008c10:	4620      	mov	r0, r4
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	e7d5      	b.n	8008bca <__d2b+0x2e>
 8008c1e:	6161      	str	r1, [r4, #20]
 8008c20:	e7e5      	b.n	8008bee <__d2b+0x52>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fd5a 	bl	80086dc <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	3020      	adds	r0, #32
 8008c32:	e7e3      	b.n	8008bfc <__d2b+0x60>
 8008c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c3c:	f8c9 0000 	str.w	r0, [r9]
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f7ff fd2b 	bl	800869c <__hi0bits>
 8008c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4a:	e7df      	b.n	8008c0c <__d2b+0x70>
 8008c4c:	0800ca59 	.word	0x0800ca59
 8008c50:	0800ca6a 	.word	0x0800ca6a

08008c54 <_calloc_r>:
 8008c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c56:	fba1 2402 	umull	r2, r4, r1, r2
 8008c5a:	b94c      	cbnz	r4, 8008c70 <_calloc_r+0x1c>
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	f7fe f828 	bl	8006cb4 <_malloc_r>
 8008c64:	9a01      	ldr	r2, [sp, #4]
 8008c66:	4605      	mov	r5, r0
 8008c68:	b930      	cbnz	r0, 8008c78 <_calloc_r+0x24>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bd30      	pop	{r4, r5, pc}
 8008c70:	220c      	movs	r2, #12
 8008c72:	6002      	str	r2, [r0, #0]
 8008c74:	2500      	movs	r5, #0
 8008c76:	e7f8      	b.n	8008c6a <_calloc_r+0x16>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7fd ffa7 	bl	8006bcc <memset>
 8008c7e:	e7f4      	b.n	8008c6a <_calloc_r+0x16>

08008c80 <__ssputs_r>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	688e      	ldr	r6, [r1, #8]
 8008c86:	429e      	cmp	r6, r3
 8008c88:	4682      	mov	sl, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4690      	mov	r8, r2
 8008c8e:	461f      	mov	r7, r3
 8008c90:	d838      	bhi.n	8008d04 <__ssputs_r+0x84>
 8008c92:	898a      	ldrh	r2, [r1, #12]
 8008c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c98:	d032      	beq.n	8008d00 <__ssputs_r+0x80>
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	6909      	ldr	r1, [r1, #16]
 8008c9e:	eba5 0901 	sub.w	r9, r5, r1
 8008ca2:	6965      	ldr	r5, [r4, #20]
 8008ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cac:	3301      	adds	r3, #1
 8008cae:	444b      	add	r3, r9
 8008cb0:	106d      	asrs	r5, r5, #1
 8008cb2:	429d      	cmp	r5, r3
 8008cb4:	bf38      	it	cc
 8008cb6:	461d      	movcc	r5, r3
 8008cb8:	0553      	lsls	r3, r2, #21
 8008cba:	d531      	bpl.n	8008d20 <__ssputs_r+0xa0>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7fd fff9 	bl	8006cb4 <_malloc_r>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b950      	cbnz	r0, 8008cdc <__ssputs_r+0x5c>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	f8ca 3000 	str.w	r3, [sl]
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	6921      	ldr	r1, [r4, #16]
 8008cde:	464a      	mov	r2, r9
 8008ce0:	f7ff fc1a 	bl	8008518 <memcpy>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	6126      	str	r6, [r4, #16]
 8008cf2:	6165      	str	r5, [r4, #20]
 8008cf4:	444e      	add	r6, r9
 8008cf6:	eba5 0509 	sub.w	r5, r5, r9
 8008cfa:	6026      	str	r6, [r4, #0]
 8008cfc:	60a5      	str	r5, [r4, #8]
 8008cfe:	463e      	mov	r6, r7
 8008d00:	42be      	cmp	r6, r7
 8008d02:	d900      	bls.n	8008d06 <__ssputs_r+0x86>
 8008d04:	463e      	mov	r6, r7
 8008d06:	6820      	ldr	r0, [r4, #0]
 8008d08:	4632      	mov	r2, r6
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	f000 ffb0 	bl	8009c70 <memmove>
 8008d10:	68a3      	ldr	r3, [r4, #8]
 8008d12:	1b9b      	subs	r3, r3, r6
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	4433      	add	r3, r6
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e7db      	b.n	8008cd8 <__ssputs_r+0x58>
 8008d20:	462a      	mov	r2, r5
 8008d22:	f000 ffbf 	bl	8009ca4 <_realloc_r>
 8008d26:	4606      	mov	r6, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1e1      	bne.n	8008cf0 <__ssputs_r+0x70>
 8008d2c:	6921      	ldr	r1, [r4, #16]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	f7fd ff54 	bl	8006bdc <_free_r>
 8008d34:	e7c7      	b.n	8008cc6 <__ssputs_r+0x46>
	...

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	061b      	lsls	r3, r3, #24
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4607      	mov	r7, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	d50e      	bpl.n	8008d6a <_svfiprintf_r+0x32>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b963      	cbnz	r3, 8008d6a <_svfiprintf_r+0x32>
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	f7fd ffaf 	bl	8006cb4 <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_svfiprintf_r+0x2e>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e0d1      	b.n	8008f0a <_svfiprintf_r+0x1d2>
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f24 <_svfiprintf_r+0x1ec>
 8008d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x5c>
 8008d90:	2a25      	cmp	r2, #37	; 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x50>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7a>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6d 	bl	8008c80 <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80aa 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	; 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a2 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	4851      	ldr	r0, [pc, #324]	; (8008f24 <_svfiprintf_r+0x1ec>)
 8008dde:	f7f7 fa17 	bl	8000210 <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xe6>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	; 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xf6>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4654      	mov	r4, sl
 8008e06:	2000      	movs	r0, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	; 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94e      	bls.n	8008eb6 <_svfiprintf_r+0x17e>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x110>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x110>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	46a2      	mov	sl, r4
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0x9c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d135      	bne.n	8008ec0 <_svfiprintf_r+0x188>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	9203      	str	r2, [sp, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb8      	it	lt
 8008e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e64:	3402      	adds	r4, #2
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f34 <_svfiprintf_r+0x1fc>
 8008e6c:	7821      	ldrb	r1, [r4, #0]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7f7 f9cd 	bl	8000210 <memchr>
 8008e76:	b140      	cbz	r0, 8008e8a <_svfiprintf_r+0x152>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	eba0 000a 	sub.w	r0, r0, sl
 8008e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	4303      	orrs	r3, r0
 8008e86:	3401      	adds	r4, #1
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	4826      	ldr	r0, [pc, #152]	; (8008f28 <_svfiprintf_r+0x1f0>)
 8008e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e94:	2206      	movs	r2, #6
 8008e96:	f7f7 f9bb 	bl	8000210 <memchr>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d038      	beq.n	8008f10 <_svfiprintf_r+0x1d8>
 8008e9e:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008ea0:	bb1b      	cbnz	r3, 8008eea <_svfiprintf_r+0x1b2>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	3307      	adds	r3, #7
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	3308      	adds	r3, #8
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb0:	4433      	add	r3, r6
 8008eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb4:	e767      	b.n	8008d86 <_svfiprintf_r+0x4e>
 8008eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eba:	460c      	mov	r4, r1
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	e7a5      	b.n	8008e0c <_svfiprintf_r+0xd4>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	3401      	adds	r4, #1
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f04f 0c0a 	mov.w	ip, #10
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	2a09      	cmp	r2, #9
 8008ed6:	d903      	bls.n	8008ee0 <_svfiprintf_r+0x1a8>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c5      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008edc:	9105      	str	r1, [sp, #20]
 8008ede:	e7c3      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e7f0      	b.n	8008ecc <_svfiprintf_r+0x194>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008ef2:	a904      	add	r1, sp, #16
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7fd fff1 	bl	8006edc <_printf_float>
 8008efa:	1c42      	adds	r2, r0, #1
 8008efc:	4606      	mov	r6, r0
 8008efe:	d1d6      	bne.n	8008eae <_svfiprintf_r+0x176>
 8008f00:	89ab      	ldrh	r3, [r5, #12]
 8008f02:	065b      	lsls	r3, r3, #25
 8008f04:	f53f af2c 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f0a:	b01d      	add	sp, #116	; 0x74
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	462a      	mov	r2, r5
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008f18:	a904      	add	r1, sp, #16
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f7fe fa82 	bl	8007424 <_printf_i>
 8008f20:	e7eb      	b.n	8008efa <_svfiprintf_r+0x1c2>
 8008f22:	bf00      	nop
 8008f24:	0800cbc4 	.word	0x0800cbc4
 8008f28:	0800cbce 	.word	0x0800cbce
 8008f2c:	08006edd 	.word	0x08006edd
 8008f30:	08008c81 	.word	0x08008c81
 8008f34:	0800cbca 	.word	0x0800cbca

08008f38 <_sungetc_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	1c4b      	adds	r3, r1, #1
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	d103      	bne.n	8008f48 <_sungetc_r+0x10>
 8008f40:	f04f 35ff 	mov.w	r5, #4294967295
 8008f44:	4628      	mov	r0, r5
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	8993      	ldrh	r3, [r2, #12]
 8008f4a:	f023 0320 	bic.w	r3, r3, #32
 8008f4e:	8193      	strh	r3, [r2, #12]
 8008f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f52:	6852      	ldr	r2, [r2, #4]
 8008f54:	b2cd      	uxtb	r5, r1
 8008f56:	b18b      	cbz	r3, 8008f7c <_sungetc_r+0x44>
 8008f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	dd08      	ble.n	8008f70 <_sungetc_r+0x38>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	1e5a      	subs	r2, r3, #1
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	e7e9      	b.n	8008f44 <_sungetc_r+0xc>
 8008f70:	4621      	mov	r1, r4
 8008f72:	f000 fc47 	bl	8009804 <__submore>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0f1      	beq.n	8008f5e <_sungetc_r+0x26>
 8008f7a:	e7e1      	b.n	8008f40 <_sungetc_r+0x8>
 8008f7c:	6921      	ldr	r1, [r4, #16]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	b151      	cbz	r1, 8008f98 <_sungetc_r+0x60>
 8008f82:	4299      	cmp	r1, r3
 8008f84:	d208      	bcs.n	8008f98 <_sungetc_r+0x60>
 8008f86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f8a:	42a9      	cmp	r1, r5
 8008f8c:	d104      	bne.n	8008f98 <_sungetc_r+0x60>
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	3201      	adds	r2, #1
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	6062      	str	r2, [r4, #4]
 8008f96:	e7d5      	b.n	8008f44 <_sungetc_r+0xc>
 8008f98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e7dc      	b.n	8008f6c <_sungetc_r+0x34>

08008fb2 <__ssrefill_r>:
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008fb8:	b169      	cbz	r1, 8008fd6 <__ssrefill_r+0x24>
 8008fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	d001      	beq.n	8008fc6 <__ssrefill_r+0x14>
 8008fc2:	f7fd fe0b 	bl	8006bdc <_free_r>
 8008fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8008fce:	b113      	cbz	r3, 8008fd6 <__ssrefill_r+0x24>
 8008fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	f043 0320 	orr.w	r3, r3, #32
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fea:	e7f3      	b.n	8008fd4 <__ssrefill_r+0x22>

08008fec <__ssvfiscanf_r>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008ffc:	49a6      	ldr	r1, [pc, #664]	; (8009298 <__ssvfiscanf_r+0x2ac>)
 8008ffe:	91a0      	str	r1, [sp, #640]	; 0x280
 8009000:	f10d 0804 	add.w	r8, sp, #4
 8009004:	49a5      	ldr	r1, [pc, #660]	; (800929c <__ssvfiscanf_r+0x2b0>)
 8009006:	4fa6      	ldr	r7, [pc, #664]	; (80092a0 <__ssvfiscanf_r+0x2b4>)
 8009008:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80092a4 <__ssvfiscanf_r+0x2b8>
 800900c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009010:	4606      	mov	r6, r0
 8009012:	91a1      	str	r1, [sp, #644]	; 0x284
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	7813      	ldrb	r3, [r2, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 815a 	beq.w	80092d2 <__ssvfiscanf_r+0x2e6>
 800901e:	5dd9      	ldrb	r1, [r3, r7]
 8009020:	f011 0108 	ands.w	r1, r1, #8
 8009024:	f102 0501 	add.w	r5, r2, #1
 8009028:	d019      	beq.n	800905e <__ssvfiscanf_r+0x72>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dd0f      	ble.n	8009050 <__ssvfiscanf_r+0x64>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	5cba      	ldrb	r2, [r7, r2]
 8009036:	0712      	lsls	r2, r2, #28
 8009038:	d401      	bmi.n	800903e <__ssvfiscanf_r+0x52>
 800903a:	462a      	mov	r2, r5
 800903c:	e7eb      	b.n	8009016 <__ssvfiscanf_r+0x2a>
 800903e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009040:	3201      	adds	r2, #1
 8009042:	9245      	str	r2, [sp, #276]	; 0x114
 8009044:	6862      	ldr	r2, [r4, #4]
 8009046:	3301      	adds	r3, #1
 8009048:	3a01      	subs	r2, #1
 800904a:	6062      	str	r2, [r4, #4]
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	e7ec      	b.n	800902a <__ssvfiscanf_r+0x3e>
 8009050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009052:	4621      	mov	r1, r4
 8009054:	4630      	mov	r0, r6
 8009056:	4798      	blx	r3
 8009058:	2800      	cmp	r0, #0
 800905a:	d0e9      	beq.n	8009030 <__ssvfiscanf_r+0x44>
 800905c:	e7ed      	b.n	800903a <__ssvfiscanf_r+0x4e>
 800905e:	2b25      	cmp	r3, #37	; 0x25
 8009060:	d012      	beq.n	8009088 <__ssvfiscanf_r+0x9c>
 8009062:	469a      	mov	sl, r3
 8009064:	6863      	ldr	r3, [r4, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f340 8091 	ble.w	800918e <__ssvfiscanf_r+0x1a2>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	7813      	ldrb	r3, [r2, #0]
 8009070:	4553      	cmp	r3, sl
 8009072:	f040 812e 	bne.w	80092d2 <__ssvfiscanf_r+0x2e6>
 8009076:	6863      	ldr	r3, [r4, #4]
 8009078:	3b01      	subs	r3, #1
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800907e:	3201      	adds	r2, #1
 8009080:	3301      	adds	r3, #1
 8009082:	6022      	str	r2, [r4, #0]
 8009084:	9345      	str	r3, [sp, #276]	; 0x114
 8009086:	e7d8      	b.n	800903a <__ssvfiscanf_r+0x4e>
 8009088:	9141      	str	r1, [sp, #260]	; 0x104
 800908a:	9143      	str	r1, [sp, #268]	; 0x10c
 800908c:	7853      	ldrb	r3, [r2, #1]
 800908e:	2b2a      	cmp	r3, #42	; 0x2a
 8009090:	bf02      	ittt	eq
 8009092:	2310      	moveq	r3, #16
 8009094:	1c95      	addeq	r5, r2, #2
 8009096:	9341      	streq	r3, [sp, #260]	; 0x104
 8009098:	220a      	movs	r2, #10
 800909a:	46aa      	mov	sl, r5
 800909c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80090a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d91d      	bls.n	80090e4 <__ssvfiscanf_r+0xf8>
 80090a8:	487e      	ldr	r0, [pc, #504]	; (80092a4 <__ssvfiscanf_r+0x2b8>)
 80090aa:	2203      	movs	r2, #3
 80090ac:	f7f7 f8b0 	bl	8000210 <memchr>
 80090b0:	b140      	cbz	r0, 80090c4 <__ssvfiscanf_r+0xd8>
 80090b2:	2301      	movs	r3, #1
 80090b4:	eba0 0009 	sub.w	r0, r0, r9
 80090b8:	fa03 f000 	lsl.w	r0, r3, r0
 80090bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090be:	4318      	orrs	r0, r3
 80090c0:	9041      	str	r0, [sp, #260]	; 0x104
 80090c2:	4655      	mov	r5, sl
 80090c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090c8:	2b78      	cmp	r3, #120	; 0x78
 80090ca:	d806      	bhi.n	80090da <__ssvfiscanf_r+0xee>
 80090cc:	2b57      	cmp	r3, #87	; 0x57
 80090ce:	d810      	bhi.n	80090f2 <__ssvfiscanf_r+0x106>
 80090d0:	2b25      	cmp	r3, #37	; 0x25
 80090d2:	d0c6      	beq.n	8009062 <__ssvfiscanf_r+0x76>
 80090d4:	d856      	bhi.n	8009184 <__ssvfiscanf_r+0x198>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d064      	beq.n	80091a4 <__ssvfiscanf_r+0x1b8>
 80090da:	2303      	movs	r3, #3
 80090dc:	9347      	str	r3, [sp, #284]	; 0x11c
 80090de:	230a      	movs	r3, #10
 80090e0:	9342      	str	r3, [sp, #264]	; 0x108
 80090e2:	e071      	b.n	80091c8 <__ssvfiscanf_r+0x1dc>
 80090e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80090e6:	fb02 1103 	mla	r1, r2, r3, r1
 80090ea:	3930      	subs	r1, #48	; 0x30
 80090ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80090ee:	4655      	mov	r5, sl
 80090f0:	e7d3      	b.n	800909a <__ssvfiscanf_r+0xae>
 80090f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80090f6:	2a20      	cmp	r2, #32
 80090f8:	d8ef      	bhi.n	80090da <__ssvfiscanf_r+0xee>
 80090fa:	a101      	add	r1, pc, #4	; (adr r1, 8009100 <__ssvfiscanf_r+0x114>)
 80090fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009100:	080091b3 	.word	0x080091b3
 8009104:	080090db 	.word	0x080090db
 8009108:	080090db 	.word	0x080090db
 800910c:	08009211 	.word	0x08009211
 8009110:	080090db 	.word	0x080090db
 8009114:	080090db 	.word	0x080090db
 8009118:	080090db 	.word	0x080090db
 800911c:	080090db 	.word	0x080090db
 8009120:	080090db 	.word	0x080090db
 8009124:	080090db 	.word	0x080090db
 8009128:	080090db 	.word	0x080090db
 800912c:	08009227 	.word	0x08009227
 8009130:	080091fd 	.word	0x080091fd
 8009134:	0800918b 	.word	0x0800918b
 8009138:	0800918b 	.word	0x0800918b
 800913c:	0800918b 	.word	0x0800918b
 8009140:	080090db 	.word	0x080090db
 8009144:	08009201 	.word	0x08009201
 8009148:	080090db 	.word	0x080090db
 800914c:	080090db 	.word	0x080090db
 8009150:	080090db 	.word	0x080090db
 8009154:	080090db 	.word	0x080090db
 8009158:	08009237 	.word	0x08009237
 800915c:	08009209 	.word	0x08009209
 8009160:	080091ab 	.word	0x080091ab
 8009164:	080090db 	.word	0x080090db
 8009168:	080090db 	.word	0x080090db
 800916c:	08009233 	.word	0x08009233
 8009170:	080090db 	.word	0x080090db
 8009174:	080091fd 	.word	0x080091fd
 8009178:	080090db 	.word	0x080090db
 800917c:	080090db 	.word	0x080090db
 8009180:	080091b3 	.word	0x080091b3
 8009184:	3b45      	subs	r3, #69	; 0x45
 8009186:	2b02      	cmp	r3, #2
 8009188:	d8a7      	bhi.n	80090da <__ssvfiscanf_r+0xee>
 800918a:	2305      	movs	r3, #5
 800918c:	e01b      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 800918e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009190:	4621      	mov	r1, r4
 8009192:	4630      	mov	r0, r6
 8009194:	4798      	blx	r3
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f af68 	beq.w	800906c <__ssvfiscanf_r+0x80>
 800919c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800919e:	2800      	cmp	r0, #0
 80091a0:	f040 808d 	bne.w	80092be <__ssvfiscanf_r+0x2d2>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e08f      	b.n	80092ca <__ssvfiscanf_r+0x2de>
 80091aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091ac:	f042 0220 	orr.w	r2, r2, #32
 80091b0:	9241      	str	r2, [sp, #260]	; 0x104
 80091b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b8:	9241      	str	r2, [sp, #260]	; 0x104
 80091ba:	2210      	movs	r2, #16
 80091bc:	2b6f      	cmp	r3, #111	; 0x6f
 80091be:	9242      	str	r2, [sp, #264]	; 0x108
 80091c0:	bf34      	ite	cc
 80091c2:	2303      	movcc	r3, #3
 80091c4:	2304      	movcs	r3, #4
 80091c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd42      	ble.n	8009254 <__ssvfiscanf_r+0x268>
 80091ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091d0:	0659      	lsls	r1, r3, #25
 80091d2:	d404      	bmi.n	80091de <__ssvfiscanf_r+0x1f2>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	5cba      	ldrb	r2, [r7, r2]
 80091da:	0712      	lsls	r2, r2, #28
 80091dc:	d441      	bmi.n	8009262 <__ssvfiscanf_r+0x276>
 80091de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	dc50      	bgt.n	8009286 <__ssvfiscanf_r+0x29a>
 80091e4:	466b      	mov	r3, sp
 80091e6:	4622      	mov	r2, r4
 80091e8:	a941      	add	r1, sp, #260	; 0x104
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 f876 	bl	80092dc <_scanf_chars>
 80091f0:	2801      	cmp	r0, #1
 80091f2:	d06e      	beq.n	80092d2 <__ssvfiscanf_r+0x2e6>
 80091f4:	2802      	cmp	r0, #2
 80091f6:	f47f af20 	bne.w	800903a <__ssvfiscanf_r+0x4e>
 80091fa:	e7cf      	b.n	800919c <__ssvfiscanf_r+0x1b0>
 80091fc:	220a      	movs	r2, #10
 80091fe:	e7dd      	b.n	80091bc <__ssvfiscanf_r+0x1d0>
 8009200:	2300      	movs	r3, #0
 8009202:	9342      	str	r3, [sp, #264]	; 0x108
 8009204:	2303      	movs	r3, #3
 8009206:	e7de      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 8009208:	2308      	movs	r3, #8
 800920a:	9342      	str	r3, [sp, #264]	; 0x108
 800920c:	2304      	movs	r3, #4
 800920e:	e7da      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 8009210:	4629      	mov	r1, r5
 8009212:	4640      	mov	r0, r8
 8009214:	f000 f9c6 	bl	80095a4 <__sccl>
 8009218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800921a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921e:	9341      	str	r3, [sp, #260]	; 0x104
 8009220:	4605      	mov	r5, r0
 8009222:	2301      	movs	r3, #1
 8009224:	e7cf      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 8009226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922c:	9341      	str	r3, [sp, #260]	; 0x104
 800922e:	2300      	movs	r3, #0
 8009230:	e7c9      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 8009232:	2302      	movs	r3, #2
 8009234:	e7c7      	b.n	80091c6 <__ssvfiscanf_r+0x1da>
 8009236:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009238:	06c3      	lsls	r3, r0, #27
 800923a:	f53f aefe 	bmi.w	800903a <__ssvfiscanf_r+0x4e>
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009242:	1d19      	adds	r1, r3, #4
 8009244:	9100      	str	r1, [sp, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f010 0f01 	tst.w	r0, #1
 800924c:	bf14      	ite	ne
 800924e:	801a      	strhne	r2, [r3, #0]
 8009250:	601a      	streq	r2, [r3, #0]
 8009252:	e6f2      	b.n	800903a <__ssvfiscanf_r+0x4e>
 8009254:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009256:	4621      	mov	r1, r4
 8009258:	4630      	mov	r0, r6
 800925a:	4798      	blx	r3
 800925c:	2800      	cmp	r0, #0
 800925e:	d0b6      	beq.n	80091ce <__ssvfiscanf_r+0x1e2>
 8009260:	e79c      	b.n	800919c <__ssvfiscanf_r+0x1b0>
 8009262:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009264:	3201      	adds	r2, #1
 8009266:	9245      	str	r2, [sp, #276]	; 0x114
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	3a01      	subs	r2, #1
 800926c:	2a00      	cmp	r2, #0
 800926e:	6062      	str	r2, [r4, #4]
 8009270:	dd02      	ble.n	8009278 <__ssvfiscanf_r+0x28c>
 8009272:	3301      	adds	r3, #1
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	e7ad      	b.n	80091d4 <__ssvfiscanf_r+0x1e8>
 8009278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800927a:	4621      	mov	r1, r4
 800927c:	4630      	mov	r0, r6
 800927e:	4798      	blx	r3
 8009280:	2800      	cmp	r0, #0
 8009282:	d0a7      	beq.n	80091d4 <__ssvfiscanf_r+0x1e8>
 8009284:	e78a      	b.n	800919c <__ssvfiscanf_r+0x1b0>
 8009286:	2b04      	cmp	r3, #4
 8009288:	dc0e      	bgt.n	80092a8 <__ssvfiscanf_r+0x2bc>
 800928a:	466b      	mov	r3, sp
 800928c:	4622      	mov	r2, r4
 800928e:	a941      	add	r1, sp, #260	; 0x104
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f87d 	bl	8009390 <_scanf_i>
 8009296:	e7ab      	b.n	80091f0 <__ssvfiscanf_r+0x204>
 8009298:	08008f39 	.word	0x08008f39
 800929c:	08008fb3 	.word	0x08008fb3
 80092a0:	0800cc2d 	.word	0x0800cc2d
 80092a4:	0800cbca 	.word	0x0800cbca
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <__ssvfiscanf_r+0x2ec>)
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f43f aec5 	beq.w	800903a <__ssvfiscanf_r+0x4e>
 80092b0:	466b      	mov	r3, sp
 80092b2:	4622      	mov	r2, r4
 80092b4:	a941      	add	r1, sp, #260	; 0x104
 80092b6:	4630      	mov	r0, r6
 80092b8:	f3af 8000 	nop.w
 80092bc:	e798      	b.n	80091f0 <__ssvfiscanf_r+0x204>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80092c4:	bf18      	it	ne
 80092c6:	f04f 30ff 	movne.w	r0, #4294967295
 80092ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092d4:	e7f9      	b.n	80092ca <__ssvfiscanf_r+0x2de>
 80092d6:	bf00      	nop
 80092d8:	00000000 	.word	0x00000000

080092dc <_scanf_chars>:
 80092dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e0:	4615      	mov	r5, r2
 80092e2:	688a      	ldr	r2, [r1, #8]
 80092e4:	4680      	mov	r8, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b932      	cbnz	r2, 80092f8 <_scanf_chars+0x1c>
 80092ea:	698a      	ldr	r2, [r1, #24]
 80092ec:	2a00      	cmp	r2, #0
 80092ee:	bf0c      	ite	eq
 80092f0:	2201      	moveq	r2, #1
 80092f2:	f04f 32ff 	movne.w	r2, #4294967295
 80092f6:	608a      	str	r2, [r1, #8]
 80092f8:	6822      	ldr	r2, [r4, #0]
 80092fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800938c <_scanf_chars+0xb0>
 80092fe:	06d1      	lsls	r1, r2, #27
 8009300:	bf5f      	itttt	pl
 8009302:	681a      	ldrpl	r2, [r3, #0]
 8009304:	1d11      	addpl	r1, r2, #4
 8009306:	6019      	strpl	r1, [r3, #0]
 8009308:	6816      	ldrpl	r6, [r2, #0]
 800930a:	2700      	movs	r7, #0
 800930c:	69a0      	ldr	r0, [r4, #24]
 800930e:	b188      	cbz	r0, 8009334 <_scanf_chars+0x58>
 8009310:	2801      	cmp	r0, #1
 8009312:	d107      	bne.n	8009324 <_scanf_chars+0x48>
 8009314:	682a      	ldr	r2, [r5, #0]
 8009316:	7811      	ldrb	r1, [r2, #0]
 8009318:	6962      	ldr	r2, [r4, #20]
 800931a:	5c52      	ldrb	r2, [r2, r1]
 800931c:	b952      	cbnz	r2, 8009334 <_scanf_chars+0x58>
 800931e:	2f00      	cmp	r7, #0
 8009320:	d031      	beq.n	8009386 <_scanf_chars+0xaa>
 8009322:	e022      	b.n	800936a <_scanf_chars+0x8e>
 8009324:	2802      	cmp	r0, #2
 8009326:	d120      	bne.n	800936a <_scanf_chars+0x8e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	d41a      	bmi.n	800936a <_scanf_chars+0x8e>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	06da      	lsls	r2, r3, #27
 8009338:	bf5e      	ittt	pl
 800933a:	682b      	ldrpl	r3, [r5, #0]
 800933c:	781b      	ldrbpl	r3, [r3, #0]
 800933e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009342:	682a      	ldr	r2, [r5, #0]
 8009344:	686b      	ldr	r3, [r5, #4]
 8009346:	3201      	adds	r2, #1
 8009348:	602a      	str	r2, [r5, #0]
 800934a:	68a2      	ldr	r2, [r4, #8]
 800934c:	3b01      	subs	r3, #1
 800934e:	3a01      	subs	r2, #1
 8009350:	606b      	str	r3, [r5, #4]
 8009352:	3701      	adds	r7, #1
 8009354:	60a2      	str	r2, [r4, #8]
 8009356:	b142      	cbz	r2, 800936a <_scanf_chars+0x8e>
 8009358:	2b00      	cmp	r3, #0
 800935a:	dcd7      	bgt.n	800930c <_scanf_chars+0x30>
 800935c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009360:	4629      	mov	r1, r5
 8009362:	4640      	mov	r0, r8
 8009364:	4798      	blx	r3
 8009366:	2800      	cmp	r0, #0
 8009368:	d0d0      	beq.n	800930c <_scanf_chars+0x30>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f013 0310 	ands.w	r3, r3, #16
 8009370:	d105      	bne.n	800937e <_scanf_chars+0xa2>
 8009372:	68e2      	ldr	r2, [r4, #12]
 8009374:	3201      	adds	r2, #1
 8009376:	60e2      	str	r2, [r4, #12]
 8009378:	69a2      	ldr	r2, [r4, #24]
 800937a:	b102      	cbz	r2, 800937e <_scanf_chars+0xa2>
 800937c:	7033      	strb	r3, [r6, #0]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	443b      	add	r3, r7
 8009382:	6123      	str	r3, [r4, #16]
 8009384:	2000      	movs	r0, #0
 8009386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938a:	bf00      	nop
 800938c:	0800cc2d 	.word	0x0800cc2d

08009390 <_scanf_i>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4698      	mov	r8, r3
 8009396:	4b76      	ldr	r3, [pc, #472]	; (8009570 <_scanf_i+0x1e0>)
 8009398:	460c      	mov	r4, r1
 800939a:	4682      	mov	sl, r0
 800939c:	4616      	mov	r6, r2
 800939e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093a2:	b087      	sub	sp, #28
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80093aa:	4b72      	ldr	r3, [pc, #456]	; (8009574 <_scanf_i+0x1e4>)
 80093ac:	69a1      	ldr	r1, [r4, #24]
 80093ae:	4a72      	ldr	r2, [pc, #456]	; (8009578 <_scanf_i+0x1e8>)
 80093b0:	2903      	cmp	r1, #3
 80093b2:	bf18      	it	ne
 80093b4:	461a      	movne	r2, r3
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	1e5a      	subs	r2, r3, #1
 80093bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80093c0:	bf88      	it	hi
 80093c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093c6:	4627      	mov	r7, r4
 80093c8:	bf82      	ittt	hi
 80093ca:	eb03 0905 	addhi.w	r9, r3, r5
 80093ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093d2:	60a3      	strhi	r3, [r4, #8]
 80093d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80093d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80093dc:	bf98      	it	ls
 80093de:	f04f 0900 	movls.w	r9, #0
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	463d      	mov	r5, r7
 80093e6:	f04f 0b00 	mov.w	fp, #0
 80093ea:	6831      	ldr	r1, [r6, #0]
 80093ec:	ab03      	add	r3, sp, #12
 80093ee:	7809      	ldrb	r1, [r1, #0]
 80093f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80093f4:	2202      	movs	r2, #2
 80093f6:	f7f6 ff0b 	bl	8000210 <memchr>
 80093fa:	b328      	cbz	r0, 8009448 <_scanf_i+0xb8>
 80093fc:	f1bb 0f01 	cmp.w	fp, #1
 8009400:	d159      	bne.n	80094b6 <_scanf_i+0x126>
 8009402:	6862      	ldr	r2, [r4, #4]
 8009404:	b92a      	cbnz	r2, 8009412 <_scanf_i+0x82>
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	2308      	movs	r3, #8
 800940a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	68a2      	ldr	r2, [r4, #8]
 800941c:	1e51      	subs	r1, r2, #1
 800941e:	60a1      	str	r1, [r4, #8]
 8009420:	b192      	cbz	r2, 8009448 <_scanf_i+0xb8>
 8009422:	6832      	ldr	r2, [r6, #0]
 8009424:	1c51      	adds	r1, r2, #1
 8009426:	6031      	str	r1, [r6, #0]
 8009428:	7812      	ldrb	r2, [r2, #0]
 800942a:	f805 2b01 	strb.w	r2, [r5], #1
 800942e:	6872      	ldr	r2, [r6, #4]
 8009430:	3a01      	subs	r2, #1
 8009432:	2a00      	cmp	r2, #0
 8009434:	6072      	str	r2, [r6, #4]
 8009436:	dc07      	bgt.n	8009448 <_scanf_i+0xb8>
 8009438:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800943c:	4631      	mov	r1, r6
 800943e:	4650      	mov	r0, sl
 8009440:	4790      	blx	r2
 8009442:	2800      	cmp	r0, #0
 8009444:	f040 8085 	bne.w	8009552 <_scanf_i+0x1c2>
 8009448:	f10b 0b01 	add.w	fp, fp, #1
 800944c:	f1bb 0f03 	cmp.w	fp, #3
 8009450:	d1cb      	bne.n	80093ea <_scanf_i+0x5a>
 8009452:	6863      	ldr	r3, [r4, #4]
 8009454:	b90b      	cbnz	r3, 800945a <_scanf_i+0xca>
 8009456:	230a      	movs	r3, #10
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	4947      	ldr	r1, [pc, #284]	; (800957c <_scanf_i+0x1ec>)
 800945e:	6960      	ldr	r0, [r4, #20]
 8009460:	1ac9      	subs	r1, r1, r3
 8009462:	f000 f89f 	bl	80095a4 <__sccl>
 8009466:	f04f 0b00 	mov.w	fp, #0
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d03d      	beq.n	80094ee <_scanf_i+0x15e>
 8009472:	6831      	ldr	r1, [r6, #0]
 8009474:	6960      	ldr	r0, [r4, #20]
 8009476:	f891 c000 	ldrb.w	ip, [r1]
 800947a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800947e:	2800      	cmp	r0, #0
 8009480:	d035      	beq.n	80094ee <_scanf_i+0x15e>
 8009482:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009486:	d124      	bne.n	80094d2 <_scanf_i+0x142>
 8009488:	0510      	lsls	r0, r2, #20
 800948a:	d522      	bpl.n	80094d2 <_scanf_i+0x142>
 800948c:	f10b 0b01 	add.w	fp, fp, #1
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	d003      	beq.n	800949e <_scanf_i+0x10e>
 8009496:	3301      	adds	r3, #1
 8009498:	f109 39ff 	add.w	r9, r9, #4294967295
 800949c:	60a3      	str	r3, [r4, #8]
 800949e:	6873      	ldr	r3, [r6, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	6073      	str	r3, [r6, #4]
 80094a6:	dd1b      	ble.n	80094e0 <_scanf_i+0x150>
 80094a8:	6833      	ldr	r3, [r6, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	60a3      	str	r3, [r4, #8]
 80094b4:	e7d9      	b.n	800946a <_scanf_i+0xda>
 80094b6:	f1bb 0f02 	cmp.w	fp, #2
 80094ba:	d1ae      	bne.n	800941a <_scanf_i+0x8a>
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80094c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80094c6:	d1bf      	bne.n	8009448 <_scanf_i+0xb8>
 80094c8:	2310      	movs	r3, #16
 80094ca:	6063      	str	r3, [r4, #4]
 80094cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094d0:	e7a2      	b.n	8009418 <_scanf_i+0x88>
 80094d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80094d6:	6022      	str	r2, [r4, #0]
 80094d8:	780b      	ldrb	r3, [r1, #0]
 80094da:	f805 3b01 	strb.w	r3, [r5], #1
 80094de:	e7de      	b.n	800949e <_scanf_i+0x10e>
 80094e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094e4:	4631      	mov	r1, r6
 80094e6:	4650      	mov	r0, sl
 80094e8:	4798      	blx	r3
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d0df      	beq.n	80094ae <_scanf_i+0x11e>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	05db      	lsls	r3, r3, #23
 80094f2:	d50d      	bpl.n	8009510 <_scanf_i+0x180>
 80094f4:	42bd      	cmp	r5, r7
 80094f6:	d909      	bls.n	800950c <_scanf_i+0x17c>
 80094f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80094fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009500:	4632      	mov	r2, r6
 8009502:	4650      	mov	r0, sl
 8009504:	4798      	blx	r3
 8009506:	f105 39ff 	add.w	r9, r5, #4294967295
 800950a:	464d      	mov	r5, r9
 800950c:	42bd      	cmp	r5, r7
 800950e:	d02d      	beq.n	800956c <_scanf_i+0x1dc>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	f012 0210 	ands.w	r2, r2, #16
 8009516:	d113      	bne.n	8009540 <_scanf_i+0x1b0>
 8009518:	702a      	strb	r2, [r5, #0]
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	9e01      	ldr	r6, [sp, #4]
 800951e:	4639      	mov	r1, r7
 8009520:	4650      	mov	r0, sl
 8009522:	47b0      	blx	r6
 8009524:	6821      	ldr	r1, [r4, #0]
 8009526:	f8d8 3000 	ldr.w	r3, [r8]
 800952a:	f011 0f20 	tst.w	r1, #32
 800952e:	d013      	beq.n	8009558 <_scanf_i+0x1c8>
 8009530:	1d1a      	adds	r2, r3, #4
 8009532:	f8c8 2000 	str.w	r2, [r8]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6018      	str	r0, [r3, #0]
 800953a:	68e3      	ldr	r3, [r4, #12]
 800953c:	3301      	adds	r3, #1
 800953e:	60e3      	str	r3, [r4, #12]
 8009540:	1bed      	subs	r5, r5, r7
 8009542:	44ab      	add	fp, r5
 8009544:	6925      	ldr	r5, [r4, #16]
 8009546:	445d      	add	r5, fp
 8009548:	6125      	str	r5, [r4, #16]
 800954a:	2000      	movs	r0, #0
 800954c:	b007      	add	sp, #28
 800954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009552:	f04f 0b00 	mov.w	fp, #0
 8009556:	e7ca      	b.n	80094ee <_scanf_i+0x15e>
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	f8c8 2000 	str.w	r2, [r8]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f011 0f01 	tst.w	r1, #1
 8009564:	bf14      	ite	ne
 8009566:	8018      	strhne	r0, [r3, #0]
 8009568:	6018      	streq	r0, [r3, #0]
 800956a:	e7e6      	b.n	800953a <_scanf_i+0x1aa>
 800956c:	2001      	movs	r0, #1
 800956e:	e7ed      	b.n	800954c <_scanf_i+0x1bc>
 8009570:	0800c988 	.word	0x0800c988
 8009574:	08009801 	.word	0x08009801
 8009578:	08009719 	.word	0x08009719
 800957c:	0800cbee 	.word	0x0800cbee

08009580 <_read_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d07      	ldr	r5, [pc, #28]	; (80095a0 <_read_r+0x20>)
 8009584:	4604      	mov	r4, r0
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
 800958a:	2200      	movs	r2, #0
 800958c:	602a      	str	r2, [r5, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7f9 fbb2 	bl	8002cf8 <_read>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_read_r+0x1e>
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	b103      	cbz	r3, 800959e <_read_r+0x1e>
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	2000063c 	.word	0x2000063c

080095a4 <__sccl>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	780b      	ldrb	r3, [r1, #0]
 80095a8:	4604      	mov	r4, r0
 80095aa:	2b5e      	cmp	r3, #94	; 0x5e
 80095ac:	bf0b      	itete	eq
 80095ae:	784b      	ldrbeq	r3, [r1, #1]
 80095b0:	1c48      	addne	r0, r1, #1
 80095b2:	1c88      	addeq	r0, r1, #2
 80095b4:	2200      	movne	r2, #0
 80095b6:	bf08      	it	eq
 80095b8:	2201      	moveq	r2, #1
 80095ba:	1e61      	subs	r1, r4, #1
 80095bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80095c0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80095c4:	42a9      	cmp	r1, r5
 80095c6:	d1fb      	bne.n	80095c0 <__sccl+0x1c>
 80095c8:	b90b      	cbnz	r3, 80095ce <__sccl+0x2a>
 80095ca:	3801      	subs	r0, #1
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
 80095ce:	f082 0201 	eor.w	r2, r2, #1
 80095d2:	54e2      	strb	r2, [r4, r3]
 80095d4:	4605      	mov	r5, r0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80095dc:	292d      	cmp	r1, #45	; 0x2d
 80095de:	d006      	beq.n	80095ee <__sccl+0x4a>
 80095e0:	295d      	cmp	r1, #93	; 0x5d
 80095e2:	d0f3      	beq.n	80095cc <__sccl+0x28>
 80095e4:	b909      	cbnz	r1, 80095ea <__sccl+0x46>
 80095e6:	4628      	mov	r0, r5
 80095e8:	e7f0      	b.n	80095cc <__sccl+0x28>
 80095ea:	460b      	mov	r3, r1
 80095ec:	e7f1      	b.n	80095d2 <__sccl+0x2e>
 80095ee:	786e      	ldrb	r6, [r5, #1]
 80095f0:	2e5d      	cmp	r6, #93	; 0x5d
 80095f2:	d0fa      	beq.n	80095ea <__sccl+0x46>
 80095f4:	42b3      	cmp	r3, r6
 80095f6:	dcf8      	bgt.n	80095ea <__sccl+0x46>
 80095f8:	3502      	adds	r5, #2
 80095fa:	4619      	mov	r1, r3
 80095fc:	3101      	adds	r1, #1
 80095fe:	428e      	cmp	r6, r1
 8009600:	5462      	strb	r2, [r4, r1]
 8009602:	dcfb      	bgt.n	80095fc <__sccl+0x58>
 8009604:	1af1      	subs	r1, r6, r3
 8009606:	3901      	subs	r1, #1
 8009608:	1c58      	adds	r0, r3, #1
 800960a:	42b3      	cmp	r3, r6
 800960c:	bfa8      	it	ge
 800960e:	2100      	movge	r1, #0
 8009610:	1843      	adds	r3, r0, r1
 8009612:	e7e0      	b.n	80095d6 <__sccl+0x32>

08009614 <_strtol_l.constprop.0>:
 8009614:	2b01      	cmp	r3, #1
 8009616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800961a:	d001      	beq.n	8009620 <_strtol_l.constprop.0+0xc>
 800961c:	2b24      	cmp	r3, #36	; 0x24
 800961e:	d906      	bls.n	800962e <_strtol_l.constprop.0+0x1a>
 8009620:	f7fd faa2 	bl	8006b68 <__errno>
 8009624:	2316      	movs	r3, #22
 8009626:	6003      	str	r3, [r0, #0]
 8009628:	2000      	movs	r0, #0
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009714 <_strtol_l.constprop.0+0x100>
 8009632:	460d      	mov	r5, r1
 8009634:	462e      	mov	r6, r5
 8009636:	f815 4b01 	ldrb.w	r4, [r5], #1
 800963a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800963e:	f017 0708 	ands.w	r7, r7, #8
 8009642:	d1f7      	bne.n	8009634 <_strtol_l.constprop.0+0x20>
 8009644:	2c2d      	cmp	r4, #45	; 0x2d
 8009646:	d132      	bne.n	80096ae <_strtol_l.constprop.0+0x9a>
 8009648:	782c      	ldrb	r4, [r5, #0]
 800964a:	2701      	movs	r7, #1
 800964c:	1cb5      	adds	r5, r6, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05b      	beq.n	800970a <_strtol_l.constprop.0+0xf6>
 8009652:	2b10      	cmp	r3, #16
 8009654:	d109      	bne.n	800966a <_strtol_l.constprop.0+0x56>
 8009656:	2c30      	cmp	r4, #48	; 0x30
 8009658:	d107      	bne.n	800966a <_strtol_l.constprop.0+0x56>
 800965a:	782c      	ldrb	r4, [r5, #0]
 800965c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009660:	2c58      	cmp	r4, #88	; 0x58
 8009662:	d14d      	bne.n	8009700 <_strtol_l.constprop.0+0xec>
 8009664:	786c      	ldrb	r4, [r5, #1]
 8009666:	2310      	movs	r3, #16
 8009668:	3502      	adds	r5, #2
 800966a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800966e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009672:	f04f 0c00 	mov.w	ip, #0
 8009676:	fbb8 f9f3 	udiv	r9, r8, r3
 800967a:	4666      	mov	r6, ip
 800967c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009680:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009684:	f1be 0f09 	cmp.w	lr, #9
 8009688:	d816      	bhi.n	80096b8 <_strtol_l.constprop.0+0xa4>
 800968a:	4674      	mov	r4, lr
 800968c:	42a3      	cmp	r3, r4
 800968e:	dd24      	ble.n	80096da <_strtol_l.constprop.0+0xc6>
 8009690:	f1bc 0f00 	cmp.w	ip, #0
 8009694:	db1e      	blt.n	80096d4 <_strtol_l.constprop.0+0xc0>
 8009696:	45b1      	cmp	r9, r6
 8009698:	d31c      	bcc.n	80096d4 <_strtol_l.constprop.0+0xc0>
 800969a:	d101      	bne.n	80096a0 <_strtol_l.constprop.0+0x8c>
 800969c:	45a2      	cmp	sl, r4
 800969e:	db19      	blt.n	80096d4 <_strtol_l.constprop.0+0xc0>
 80096a0:	fb06 4603 	mla	r6, r6, r3, r4
 80096a4:	f04f 0c01 	mov.w	ip, #1
 80096a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096ac:	e7e8      	b.n	8009680 <_strtol_l.constprop.0+0x6c>
 80096ae:	2c2b      	cmp	r4, #43	; 0x2b
 80096b0:	bf04      	itt	eq
 80096b2:	782c      	ldrbeq	r4, [r5, #0]
 80096b4:	1cb5      	addeq	r5, r6, #2
 80096b6:	e7ca      	b.n	800964e <_strtol_l.constprop.0+0x3a>
 80096b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096bc:	f1be 0f19 	cmp.w	lr, #25
 80096c0:	d801      	bhi.n	80096c6 <_strtol_l.constprop.0+0xb2>
 80096c2:	3c37      	subs	r4, #55	; 0x37
 80096c4:	e7e2      	b.n	800968c <_strtol_l.constprop.0+0x78>
 80096c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096ca:	f1be 0f19 	cmp.w	lr, #25
 80096ce:	d804      	bhi.n	80096da <_strtol_l.constprop.0+0xc6>
 80096d0:	3c57      	subs	r4, #87	; 0x57
 80096d2:	e7db      	b.n	800968c <_strtol_l.constprop.0+0x78>
 80096d4:	f04f 3cff 	mov.w	ip, #4294967295
 80096d8:	e7e6      	b.n	80096a8 <_strtol_l.constprop.0+0x94>
 80096da:	f1bc 0f00 	cmp.w	ip, #0
 80096de:	da05      	bge.n	80096ec <_strtol_l.constprop.0+0xd8>
 80096e0:	2322      	movs	r3, #34	; 0x22
 80096e2:	6003      	str	r3, [r0, #0]
 80096e4:	4646      	mov	r6, r8
 80096e6:	b942      	cbnz	r2, 80096fa <_strtol_l.constprop.0+0xe6>
 80096e8:	4630      	mov	r0, r6
 80096ea:	e79e      	b.n	800962a <_strtol_l.constprop.0+0x16>
 80096ec:	b107      	cbz	r7, 80096f0 <_strtol_l.constprop.0+0xdc>
 80096ee:	4276      	negs	r6, r6
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d0f9      	beq.n	80096e8 <_strtol_l.constprop.0+0xd4>
 80096f4:	f1bc 0f00 	cmp.w	ip, #0
 80096f8:	d000      	beq.n	80096fc <_strtol_l.constprop.0+0xe8>
 80096fa:	1e69      	subs	r1, r5, #1
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	e7f3      	b.n	80096e8 <_strtol_l.constprop.0+0xd4>
 8009700:	2430      	movs	r4, #48	; 0x30
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1b1      	bne.n	800966a <_strtol_l.constprop.0+0x56>
 8009706:	2308      	movs	r3, #8
 8009708:	e7af      	b.n	800966a <_strtol_l.constprop.0+0x56>
 800970a:	2c30      	cmp	r4, #48	; 0x30
 800970c:	d0a5      	beq.n	800965a <_strtol_l.constprop.0+0x46>
 800970e:	230a      	movs	r3, #10
 8009710:	e7ab      	b.n	800966a <_strtol_l.constprop.0+0x56>
 8009712:	bf00      	nop
 8009714:	0800cc2d 	.word	0x0800cc2d

08009718 <_strtol_r>:
 8009718:	f7ff bf7c 	b.w	8009614 <_strtol_l.constprop.0>

0800971c <_strtoul_l.constprop.0>:
 800971c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009720:	4f36      	ldr	r7, [pc, #216]	; (80097fc <_strtoul_l.constprop.0+0xe0>)
 8009722:	4686      	mov	lr, r0
 8009724:	460d      	mov	r5, r1
 8009726:	4628      	mov	r0, r5
 8009728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800972c:	5de6      	ldrb	r6, [r4, r7]
 800972e:	f016 0608 	ands.w	r6, r6, #8
 8009732:	d1f8      	bne.n	8009726 <_strtoul_l.constprop.0+0xa>
 8009734:	2c2d      	cmp	r4, #45	; 0x2d
 8009736:	d12f      	bne.n	8009798 <_strtoul_l.constprop.0+0x7c>
 8009738:	782c      	ldrb	r4, [r5, #0]
 800973a:	2601      	movs	r6, #1
 800973c:	1c85      	adds	r5, r0, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d057      	beq.n	80097f2 <_strtoul_l.constprop.0+0xd6>
 8009742:	2b10      	cmp	r3, #16
 8009744:	d109      	bne.n	800975a <_strtoul_l.constprop.0+0x3e>
 8009746:	2c30      	cmp	r4, #48	; 0x30
 8009748:	d107      	bne.n	800975a <_strtoul_l.constprop.0+0x3e>
 800974a:	7828      	ldrb	r0, [r5, #0]
 800974c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009750:	2858      	cmp	r0, #88	; 0x58
 8009752:	d149      	bne.n	80097e8 <_strtoul_l.constprop.0+0xcc>
 8009754:	786c      	ldrb	r4, [r5, #1]
 8009756:	2310      	movs	r3, #16
 8009758:	3502      	adds	r5, #2
 800975a:	f04f 38ff 	mov.w	r8, #4294967295
 800975e:	2700      	movs	r7, #0
 8009760:	fbb8 f8f3 	udiv	r8, r8, r3
 8009764:	fb03 f908 	mul.w	r9, r3, r8
 8009768:	ea6f 0909 	mvn.w	r9, r9
 800976c:	4638      	mov	r0, r7
 800976e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009772:	f1bc 0f09 	cmp.w	ip, #9
 8009776:	d814      	bhi.n	80097a2 <_strtoul_l.constprop.0+0x86>
 8009778:	4664      	mov	r4, ip
 800977a:	42a3      	cmp	r3, r4
 800977c:	dd22      	ble.n	80097c4 <_strtoul_l.constprop.0+0xa8>
 800977e:	2f00      	cmp	r7, #0
 8009780:	db1d      	blt.n	80097be <_strtoul_l.constprop.0+0xa2>
 8009782:	4580      	cmp	r8, r0
 8009784:	d31b      	bcc.n	80097be <_strtoul_l.constprop.0+0xa2>
 8009786:	d101      	bne.n	800978c <_strtoul_l.constprop.0+0x70>
 8009788:	45a1      	cmp	r9, r4
 800978a:	db18      	blt.n	80097be <_strtoul_l.constprop.0+0xa2>
 800978c:	fb00 4003 	mla	r0, r0, r3, r4
 8009790:	2701      	movs	r7, #1
 8009792:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009796:	e7ea      	b.n	800976e <_strtoul_l.constprop.0+0x52>
 8009798:	2c2b      	cmp	r4, #43	; 0x2b
 800979a:	bf04      	itt	eq
 800979c:	782c      	ldrbeq	r4, [r5, #0]
 800979e:	1c85      	addeq	r5, r0, #2
 80097a0:	e7cd      	b.n	800973e <_strtoul_l.constprop.0+0x22>
 80097a2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80097a6:	f1bc 0f19 	cmp.w	ip, #25
 80097aa:	d801      	bhi.n	80097b0 <_strtoul_l.constprop.0+0x94>
 80097ac:	3c37      	subs	r4, #55	; 0x37
 80097ae:	e7e4      	b.n	800977a <_strtoul_l.constprop.0+0x5e>
 80097b0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097b4:	f1bc 0f19 	cmp.w	ip, #25
 80097b8:	d804      	bhi.n	80097c4 <_strtoul_l.constprop.0+0xa8>
 80097ba:	3c57      	subs	r4, #87	; 0x57
 80097bc:	e7dd      	b.n	800977a <_strtoul_l.constprop.0+0x5e>
 80097be:	f04f 37ff 	mov.w	r7, #4294967295
 80097c2:	e7e6      	b.n	8009792 <_strtoul_l.constprop.0+0x76>
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	da07      	bge.n	80097d8 <_strtoul_l.constprop.0+0xbc>
 80097c8:	2322      	movs	r3, #34	; 0x22
 80097ca:	f8ce 3000 	str.w	r3, [lr]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	b932      	cbnz	r2, 80097e2 <_strtoul_l.constprop.0+0xc6>
 80097d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d8:	b106      	cbz	r6, 80097dc <_strtoul_l.constprop.0+0xc0>
 80097da:	4240      	negs	r0, r0
 80097dc:	2a00      	cmp	r2, #0
 80097de:	d0f9      	beq.n	80097d4 <_strtoul_l.constprop.0+0xb8>
 80097e0:	b107      	cbz	r7, 80097e4 <_strtoul_l.constprop.0+0xc8>
 80097e2:	1e69      	subs	r1, r5, #1
 80097e4:	6011      	str	r1, [r2, #0]
 80097e6:	e7f5      	b.n	80097d4 <_strtoul_l.constprop.0+0xb8>
 80097e8:	2430      	movs	r4, #48	; 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1b5      	bne.n	800975a <_strtoul_l.constprop.0+0x3e>
 80097ee:	2308      	movs	r3, #8
 80097f0:	e7b3      	b.n	800975a <_strtoul_l.constprop.0+0x3e>
 80097f2:	2c30      	cmp	r4, #48	; 0x30
 80097f4:	d0a9      	beq.n	800974a <_strtoul_l.constprop.0+0x2e>
 80097f6:	230a      	movs	r3, #10
 80097f8:	e7af      	b.n	800975a <_strtoul_l.constprop.0+0x3e>
 80097fa:	bf00      	nop
 80097fc:	0800cc2d 	.word	0x0800cc2d

08009800 <_strtoul_r>:
 8009800:	f7ff bf8c 	b.w	800971c <_strtoul_l.constprop.0>

08009804 <__submore>:
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800980c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009810:	4299      	cmp	r1, r3
 8009812:	d11d      	bne.n	8009850 <__submore+0x4c>
 8009814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009818:	f7fd fa4c 	bl	8006cb4 <_malloc_r>
 800981c:	b918      	cbnz	r0, 8009826 <__submore+0x22>
 800981e:	f04f 30ff 	mov.w	r0, #4294967295
 8009822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982a:	63a3      	str	r3, [r4, #56]	; 0x38
 800982c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009830:	6360      	str	r0, [r4, #52]	; 0x34
 8009832:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009836:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800983a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800983e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009842:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009846:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800984a:	6020      	str	r0, [r4, #0]
 800984c:	2000      	movs	r0, #0
 800984e:	e7e8      	b.n	8009822 <__submore+0x1e>
 8009850:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009852:	0077      	lsls	r7, r6, #1
 8009854:	463a      	mov	r2, r7
 8009856:	f000 fa25 	bl	8009ca4 <_realloc_r>
 800985a:	4605      	mov	r5, r0
 800985c:	2800      	cmp	r0, #0
 800985e:	d0de      	beq.n	800981e <__submore+0x1a>
 8009860:	eb00 0806 	add.w	r8, r0, r6
 8009864:	4601      	mov	r1, r0
 8009866:	4632      	mov	r2, r6
 8009868:	4640      	mov	r0, r8
 800986a:	f7fe fe55 	bl	8008518 <memcpy>
 800986e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009872:	f8c4 8000 	str.w	r8, [r4]
 8009876:	e7e9      	b.n	800984c <__submore+0x48>

08009878 <__assert_func>:
 8009878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800987a:	4614      	mov	r4, r2
 800987c:	461a      	mov	r2, r3
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <__assert_func+0x2c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4605      	mov	r5, r0
 8009884:	68d8      	ldr	r0, [r3, #12]
 8009886:	b14c      	cbz	r4, 800989c <__assert_func+0x24>
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <__assert_func+0x30>)
 800988a:	9100      	str	r1, [sp, #0]
 800988c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009890:	4906      	ldr	r1, [pc, #24]	; (80098ac <__assert_func+0x34>)
 8009892:	462b      	mov	r3, r5
 8009894:	f000 f9a6 	bl	8009be4 <fiprintf>
 8009898:	f000 fc5a 	bl	800a150 <abort>
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <__assert_func+0x38>)
 800989e:	461c      	mov	r4, r3
 80098a0:	e7f3      	b.n	800988a <__assert_func+0x12>
 80098a2:	bf00      	nop
 80098a4:	20000010 	.word	0x20000010
 80098a8:	0800cbf0 	.word	0x0800cbf0
 80098ac:	0800cbfd 	.word	0x0800cbfd
 80098b0:	0800cc2b 	.word	0x0800cc2b

080098b4 <__sflush_r>:
 80098b4:	898a      	ldrh	r2, [r1, #12]
 80098b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	4605      	mov	r5, r0
 80098bc:	0710      	lsls	r0, r2, #28
 80098be:	460c      	mov	r4, r1
 80098c0:	d458      	bmi.n	8009974 <__sflush_r+0xc0>
 80098c2:	684b      	ldr	r3, [r1, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc05      	bgt.n	80098d4 <__sflush_r+0x20>
 80098c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dc02      	bgt.n	80098d4 <__sflush_r+0x20>
 80098ce:	2000      	movs	r0, #0
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d0f9      	beq.n	80098ce <__sflush_r+0x1a>
 80098da:	2300      	movs	r3, #0
 80098dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098e0:	682f      	ldr	r7, [r5, #0]
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	d032      	beq.n	800994c <__sflush_r+0x98>
 80098e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	075a      	lsls	r2, r3, #29
 80098ec:	d505      	bpl.n	80098fa <__sflush_r+0x46>
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	1ac0      	subs	r0, r0, r3
 80098f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f4:	b10b      	cbz	r3, 80098fa <__sflush_r+0x46>
 80098f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	4602      	mov	r2, r0
 80098fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	4628      	mov	r0, r5
 8009904:	47b0      	blx	r6
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	d106      	bne.n	800991a <__sflush_r+0x66>
 800990c:	6829      	ldr	r1, [r5, #0]
 800990e:	291d      	cmp	r1, #29
 8009910:	d82c      	bhi.n	800996c <__sflush_r+0xb8>
 8009912:	4a2a      	ldr	r2, [pc, #168]	; (80099bc <__sflush_r+0x108>)
 8009914:	40ca      	lsrs	r2, r1
 8009916:	07d6      	lsls	r6, r2, #31
 8009918:	d528      	bpl.n	800996c <__sflush_r+0xb8>
 800991a:	2200      	movs	r2, #0
 800991c:	6062      	str	r2, [r4, #4]
 800991e:	04d9      	lsls	r1, r3, #19
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	6022      	str	r2, [r4, #0]
 8009924:	d504      	bpl.n	8009930 <__sflush_r+0x7c>
 8009926:	1c42      	adds	r2, r0, #1
 8009928:	d101      	bne.n	800992e <__sflush_r+0x7a>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	b903      	cbnz	r3, 8009930 <__sflush_r+0x7c>
 800992e:	6560      	str	r0, [r4, #84]	; 0x54
 8009930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009932:	602f      	str	r7, [r5, #0]
 8009934:	2900      	cmp	r1, #0
 8009936:	d0ca      	beq.n	80098ce <__sflush_r+0x1a>
 8009938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800993c:	4299      	cmp	r1, r3
 800993e:	d002      	beq.n	8009946 <__sflush_r+0x92>
 8009940:	4628      	mov	r0, r5
 8009942:	f7fd f94b 	bl	8006bdc <_free_r>
 8009946:	2000      	movs	r0, #0
 8009948:	6360      	str	r0, [r4, #52]	; 0x34
 800994a:	e7c1      	b.n	80098d0 <__sflush_r+0x1c>
 800994c:	6a21      	ldr	r1, [r4, #32]
 800994e:	2301      	movs	r3, #1
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	1c41      	adds	r1, r0, #1
 8009956:	d1c7      	bne.n	80098e8 <__sflush_r+0x34>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0c4      	beq.n	80098e8 <__sflush_r+0x34>
 800995e:	2b1d      	cmp	r3, #29
 8009960:	d001      	beq.n	8009966 <__sflush_r+0xb2>
 8009962:	2b16      	cmp	r3, #22
 8009964:	d101      	bne.n	800996a <__sflush_r+0xb6>
 8009966:	602f      	str	r7, [r5, #0]
 8009968:	e7b1      	b.n	80098ce <__sflush_r+0x1a>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	e7ad      	b.n	80098d0 <__sflush_r+0x1c>
 8009974:	690f      	ldr	r7, [r1, #16]
 8009976:	2f00      	cmp	r7, #0
 8009978:	d0a9      	beq.n	80098ce <__sflush_r+0x1a>
 800997a:	0793      	lsls	r3, r2, #30
 800997c:	680e      	ldr	r6, [r1, #0]
 800997e:	bf08      	it	eq
 8009980:	694b      	ldreq	r3, [r1, #20]
 8009982:	600f      	str	r7, [r1, #0]
 8009984:	bf18      	it	ne
 8009986:	2300      	movne	r3, #0
 8009988:	eba6 0807 	sub.w	r8, r6, r7
 800998c:	608b      	str	r3, [r1, #8]
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	dd9c      	ble.n	80098ce <__sflush_r+0x1a>
 8009994:	6a21      	ldr	r1, [r4, #32]
 8009996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009998:	4643      	mov	r3, r8
 800999a:	463a      	mov	r2, r7
 800999c:	4628      	mov	r0, r5
 800999e:	47b0      	blx	r6
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dc06      	bgt.n	80099b2 <__sflush_r+0xfe>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e78e      	b.n	80098d0 <__sflush_r+0x1c>
 80099b2:	4407      	add	r7, r0
 80099b4:	eba8 0800 	sub.w	r8, r8, r0
 80099b8:	e7e9      	b.n	800998e <__sflush_r+0xda>
 80099ba:	bf00      	nop
 80099bc:	20400001 	.word	0x20400001

080099c0 <_fflush_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	690b      	ldr	r3, [r1, #16]
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	b913      	cbnz	r3, 80099d0 <_fflush_r+0x10>
 80099ca:	2500      	movs	r5, #0
 80099cc:	4628      	mov	r0, r5
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	b118      	cbz	r0, 80099da <_fflush_r+0x1a>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <_fflush_r+0x1a>
 80099d6:	f000 f887 	bl	8009ae8 <__sinit>
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <_fflush_r+0x6c>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d11b      	bne.n	8009a18 <_fflush_r+0x58>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0ef      	beq.n	80099ca <_fflush_r+0xa>
 80099ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099ec:	07d0      	lsls	r0, r2, #31
 80099ee:	d404      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f0:	0599      	lsls	r1, r3, #22
 80099f2:	d402      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f6:	f000 f927 	bl	8009c48 <__retarget_lock_acquire_recursive>
 80099fa:	4628      	mov	r0, r5
 80099fc:	4621      	mov	r1, r4
 80099fe:	f7ff ff59 	bl	80098b4 <__sflush_r>
 8009a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a04:	07da      	lsls	r2, r3, #31
 8009a06:	4605      	mov	r5, r0
 8009a08:	d4e0      	bmi.n	80099cc <_fflush_r+0xc>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	059b      	lsls	r3, r3, #22
 8009a0e:	d4dd      	bmi.n	80099cc <_fflush_r+0xc>
 8009a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a12:	f000 f91a 	bl	8009c4a <__retarget_lock_release_recursive>
 8009a16:	e7d9      	b.n	80099cc <_fflush_r+0xc>
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <_fflush_r+0x70>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d101      	bne.n	8009a22 <_fflush_r+0x62>
 8009a1e:	68ac      	ldr	r4, [r5, #8]
 8009a20:	e7df      	b.n	80099e2 <_fflush_r+0x22>
 8009a22:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <_fflush_r+0x74>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	bf08      	it	eq
 8009a28:	68ec      	ldreq	r4, [r5, #12]
 8009a2a:	e7da      	b.n	80099e2 <_fflush_r+0x22>
 8009a2c:	0800cd50 	.word	0x0800cd50
 8009a30:	0800cd70 	.word	0x0800cd70
 8009a34:	0800cd30 	.word	0x0800cd30

08009a38 <std>:
 8009a38:	2300      	movs	r3, #0
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a46:	6083      	str	r3, [r0, #8]
 8009a48:	8181      	strh	r1, [r0, #12]
 8009a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a4c:	81c2      	strh	r2, [r0, #14]
 8009a4e:	6183      	str	r3, [r0, #24]
 8009a50:	4619      	mov	r1, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	305c      	adds	r0, #92	; 0x5c
 8009a56:	f7fd f8b9 	bl	8006bcc <memset>
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x38>)
 8009a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x3c>)
 8009a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <std+0x40>)
 8009a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <std+0x44>)
 8009a68:	6224      	str	r4, [r4, #32]
 8009a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	08007729 	.word	0x08007729
 8009a74:	0800774f 	.word	0x0800774f
 8009a78:	08007787 	.word	0x08007787
 8009a7c:	080077ab 	.word	0x080077ab

08009a80 <_cleanup_r>:
 8009a80:	4901      	ldr	r1, [pc, #4]	; (8009a88 <_cleanup_r+0x8>)
 8009a82:	f000 b8c1 	b.w	8009c08 <_fwalk_reent>
 8009a86:	bf00      	nop
 8009a88:	080099c1 	.word	0x080099c1

08009a8c <__sfmoreglue>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	2268      	movs	r2, #104	; 0x68
 8009a90:	1e4d      	subs	r5, r1, #1
 8009a92:	4355      	muls	r5, r2
 8009a94:	460e      	mov	r6, r1
 8009a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a9a:	f7fd f90b 	bl	8006cb4 <_malloc_r>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	b140      	cbz	r0, 8009ab4 <__sfmoreglue+0x28>
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa8:	300c      	adds	r0, #12
 8009aaa:	60a0      	str	r0, [r4, #8]
 8009aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ab0:	f7fd f88c 	bl	8006bcc <memset>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <__sfp_lock_acquire>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <__sfp_lock_acquire+0x8>)
 8009aba:	f000 b8c5 	b.w	8009c48 <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20000641 	.word	0x20000641

08009ac4 <__sfp_lock_release>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__sfp_lock_release+0x8>)
 8009ac6:	f000 b8c0 	b.w	8009c4a <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20000641 	.word	0x20000641

08009ad0 <__sinit_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sinit_lock_acquire+0x8>)
 8009ad2:	f000 b8b9 	b.w	8009c48 <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000642 	.word	0x20000642

08009adc <__sinit_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__sinit_lock_release+0x8>)
 8009ade:	f000 b8b4 	b.w	8009c4a <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20000642 	.word	0x20000642

08009ae8 <__sinit>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff fff0 	bl	8009ad0 <__sinit_lock_acquire>
 8009af0:	69a3      	ldr	r3, [r4, #24]
 8009af2:	b11b      	cbz	r3, 8009afc <__sinit+0x14>
 8009af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af8:	f7ff bff0 	b.w	8009adc <__sinit_lock_release>
 8009afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b00:	6523      	str	r3, [r4, #80]	; 0x50
 8009b02:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <__sinit+0x68>)
 8009b04:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <__sinit+0x6c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	bf04      	itt	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	61a3      	streq	r3, [r4, #24]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f820 	bl	8009b58 <__sfp>
 8009b18:	6060      	str	r0, [r4, #4]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f81c 	bl	8009b58 <__sfp>
 8009b20:	60a0      	str	r0, [r4, #8]
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f818 	bl	8009b58 <__sfp>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	60e0      	str	r0, [r4, #12]
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	6860      	ldr	r0, [r4, #4]
 8009b30:	f7ff ff82 	bl	8009a38 <std>
 8009b34:	68a0      	ldr	r0, [r4, #8]
 8009b36:	2201      	movs	r2, #1
 8009b38:	2109      	movs	r1, #9
 8009b3a:	f7ff ff7d 	bl	8009a38 <std>
 8009b3e:	68e0      	ldr	r0, [r4, #12]
 8009b40:	2202      	movs	r2, #2
 8009b42:	2112      	movs	r1, #18
 8009b44:	f7ff ff78 	bl	8009a38 <std>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	e7d2      	b.n	8009af4 <__sinit+0xc>
 8009b4e:	bf00      	nop
 8009b50:	0800c9a4 	.word	0x0800c9a4
 8009b54:	08009a81 	.word	0x08009a81

08009b58 <__sfp>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	f7ff ffac 	bl	8009ab8 <__sfp_lock_acquire>
 8009b60:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <__sfp+0x84>)
 8009b62:	681e      	ldr	r6, [r3, #0]
 8009b64:	69b3      	ldr	r3, [r6, #24]
 8009b66:	b913      	cbnz	r3, 8009b6e <__sfp+0x16>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ffbd 	bl	8009ae8 <__sinit>
 8009b6e:	3648      	adds	r6, #72	; 0x48
 8009b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	d503      	bpl.n	8009b80 <__sfp+0x28>
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	b30b      	cbz	r3, 8009bc0 <__sfp+0x68>
 8009b7c:	6836      	ldr	r6, [r6, #0]
 8009b7e:	e7f7      	b.n	8009b70 <__sfp+0x18>
 8009b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b84:	b9d5      	cbnz	r5, 8009bbc <__sfp+0x64>
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <__sfp+0x88>)
 8009b88:	60e3      	str	r3, [r4, #12]
 8009b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8009b90:	f000 f859 	bl	8009c46 <__retarget_lock_init_recursive>
 8009b94:	f7ff ff96 	bl	8009ac4 <__sfp_lock_release>
 8009b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	61a5      	str	r5, [r4, #24]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bac:	f7fd f80e 	bl	8006bcc <memset>
 8009bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbc:	3468      	adds	r4, #104	; 0x68
 8009bbe:	e7d9      	b.n	8009b74 <__sfp+0x1c>
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7ff ff62 	bl	8009a8c <__sfmoreglue>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	6030      	str	r0, [r6, #0]
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1d5      	bne.n	8009b7c <__sfp+0x24>
 8009bd0:	f7ff ff78 	bl	8009ac4 <__sfp_lock_release>
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	e7ee      	b.n	8009bb8 <__sfp+0x60>
 8009bda:	bf00      	nop
 8009bdc:	0800c9a4 	.word	0x0800c9a4
 8009be0:	ffff0001 	.word	0xffff0001

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	4601      	mov	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4805      	ldr	r0, [pc, #20]	; (8009c04 <fiprintf+0x20>)
 8009bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f8ad 	bl	8009d54 <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	20000010 	.word	0x20000010

08009c08 <_fwalk_reent>:
 8009c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	4688      	mov	r8, r1
 8009c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c14:	2700      	movs	r7, #0
 8009c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009c1e:	d505      	bpl.n	8009c2c <_fwalk_reent+0x24>
 8009c20:	6824      	ldr	r4, [r4, #0]
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d1f7      	bne.n	8009c16 <_fwalk_reent+0xe>
 8009c26:	4638      	mov	r0, r7
 8009c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d907      	bls.n	8009c42 <_fwalk_reent+0x3a>
 8009c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c36:	3301      	adds	r3, #1
 8009c38:	d003      	beq.n	8009c42 <_fwalk_reent+0x3a>
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	47c0      	blx	r8
 8009c40:	4307      	orrs	r7, r0
 8009c42:	3568      	adds	r5, #104	; 0x68
 8009c44:	e7e9      	b.n	8009c1a <_fwalk_reent+0x12>

08009c46 <__retarget_lock_init_recursive>:
 8009c46:	4770      	bx	lr

08009c48 <__retarget_lock_acquire_recursive>:
 8009c48:	4770      	bx	lr

08009c4a <__retarget_lock_release_recursive>:
 8009c4a:	4770      	bx	lr

08009c4c <__ascii_mbtowc>:
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	b901      	cbnz	r1, 8009c52 <__ascii_mbtowc+0x6>
 8009c50:	a901      	add	r1, sp, #4
 8009c52:	b142      	cbz	r2, 8009c66 <__ascii_mbtowc+0x1a>
 8009c54:	b14b      	cbz	r3, 8009c6a <__ascii_mbtowc+0x1e>
 8009c56:	7813      	ldrb	r3, [r2, #0]
 8009c58:	600b      	str	r3, [r1, #0]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	1e10      	subs	r0, r2, #0
 8009c5e:	bf18      	it	ne
 8009c60:	2001      	movne	r0, #1
 8009c62:	b002      	add	sp, #8
 8009c64:	4770      	bx	lr
 8009c66:	4610      	mov	r0, r2
 8009c68:	e7fb      	b.n	8009c62 <__ascii_mbtowc+0x16>
 8009c6a:	f06f 0001 	mvn.w	r0, #1
 8009c6e:	e7f8      	b.n	8009c62 <__ascii_mbtowc+0x16>

08009c70 <memmove>:
 8009c70:	4288      	cmp	r0, r1
 8009c72:	b510      	push	{r4, lr}
 8009c74:	eb01 0402 	add.w	r4, r1, r2
 8009c78:	d902      	bls.n	8009c80 <memmove+0x10>
 8009c7a:	4284      	cmp	r4, r0
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	d807      	bhi.n	8009c90 <memmove+0x20>
 8009c80:	1e43      	subs	r3, r0, #1
 8009c82:	42a1      	cmp	r1, r4
 8009c84:	d008      	beq.n	8009c98 <memmove+0x28>
 8009c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8e:	e7f8      	b.n	8009c82 <memmove+0x12>
 8009c90:	4402      	add	r2, r0
 8009c92:	4601      	mov	r1, r0
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d100      	bne.n	8009c9a <memmove+0x2a>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca2:	e7f7      	b.n	8009c94 <memmove+0x24>

08009ca4 <_realloc_r>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	4680      	mov	r8, r0
 8009caa:	4614      	mov	r4, r2
 8009cac:	460e      	mov	r6, r1
 8009cae:	b921      	cbnz	r1, 8009cba <_realloc_r+0x16>
 8009cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	f7fc bffd 	b.w	8006cb4 <_malloc_r>
 8009cba:	b92a      	cbnz	r2, 8009cc8 <_realloc_r+0x24>
 8009cbc:	f7fc ff8e 	bl	8006bdc <_free_r>
 8009cc0:	4625      	mov	r5, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc8:	f000 faae 	bl	800a228 <_malloc_usable_size_r>
 8009ccc:	4284      	cmp	r4, r0
 8009cce:	4607      	mov	r7, r0
 8009cd0:	d802      	bhi.n	8009cd8 <_realloc_r+0x34>
 8009cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cd6:	d812      	bhi.n	8009cfe <_realloc_r+0x5a>
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7fc ffea 	bl	8006cb4 <_malloc_r>
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0ed      	beq.n	8009cc2 <_realloc_r+0x1e>
 8009ce6:	42bc      	cmp	r4, r7
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4631      	mov	r1, r6
 8009cec:	bf28      	it	cs
 8009cee:	463a      	movcs	r2, r7
 8009cf0:	f7fe fc12 	bl	8008518 <memcpy>
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	f7fc ff70 	bl	8006bdc <_free_r>
 8009cfc:	e7e1      	b.n	8009cc2 <_realloc_r+0x1e>
 8009cfe:	4635      	mov	r5, r6
 8009d00:	e7df      	b.n	8009cc2 <_realloc_r+0x1e>

08009d02 <__sfputc_r>:
 8009d02:	6893      	ldr	r3, [r2, #8]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	b410      	push	{r4}
 8009d0a:	6093      	str	r3, [r2, #8]
 8009d0c:	da08      	bge.n	8009d20 <__sfputc_r+0x1e>
 8009d0e:	6994      	ldr	r4, [r2, #24]
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	db01      	blt.n	8009d18 <__sfputc_r+0x16>
 8009d14:	290a      	cmp	r1, #10
 8009d16:	d103      	bne.n	8009d20 <__sfputc_r+0x1e>
 8009d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1c:	f000 b94a 	b.w	8009fb4 <__swbuf_r>
 8009d20:	6813      	ldr	r3, [r2, #0]
 8009d22:	1c58      	adds	r0, r3, #1
 8009d24:	6010      	str	r0, [r2, #0]
 8009d26:	7019      	strb	r1, [r3, #0]
 8009d28:	4608      	mov	r0, r1
 8009d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <__sfputs_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	4606      	mov	r6, r0
 8009d34:	460f      	mov	r7, r1
 8009d36:	4614      	mov	r4, r2
 8009d38:	18d5      	adds	r5, r2, r3
 8009d3a:	42ac      	cmp	r4, r5
 8009d3c:	d101      	bne.n	8009d42 <__sfputs_r+0x12>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e007      	b.n	8009d52 <__sfputs_r+0x22>
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	463a      	mov	r2, r7
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff ffda 	bl	8009d02 <__sfputc_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d1f3      	bne.n	8009d3a <__sfputs_r+0xa>
 8009d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d54 <_vfiprintf_r>:
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	460d      	mov	r5, r1
 8009d5a:	b09d      	sub	sp, #116	; 0x74
 8009d5c:	4614      	mov	r4, r2
 8009d5e:	4698      	mov	r8, r3
 8009d60:	4606      	mov	r6, r0
 8009d62:	b118      	cbz	r0, 8009d6c <_vfiprintf_r+0x18>
 8009d64:	6983      	ldr	r3, [r0, #24]
 8009d66:	b90b      	cbnz	r3, 8009d6c <_vfiprintf_r+0x18>
 8009d68:	f7ff febe 	bl	8009ae8 <__sinit>
 8009d6c:	4b89      	ldr	r3, [pc, #548]	; (8009f94 <_vfiprintf_r+0x240>)
 8009d6e:	429d      	cmp	r5, r3
 8009d70:	d11b      	bne.n	8009daa <_vfiprintf_r+0x56>
 8009d72:	6875      	ldr	r5, [r6, #4]
 8009d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	d405      	bmi.n	8009d86 <_vfiprintf_r+0x32>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	059a      	lsls	r2, r3, #22
 8009d7e:	d402      	bmi.n	8009d86 <_vfiprintf_r+0x32>
 8009d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d82:	f7ff ff61 	bl	8009c48 <__retarget_lock_acquire_recursive>
 8009d86:	89ab      	ldrh	r3, [r5, #12]
 8009d88:	071b      	lsls	r3, r3, #28
 8009d8a:	d501      	bpl.n	8009d90 <_vfiprintf_r+0x3c>
 8009d8c:	692b      	ldr	r3, [r5, #16]
 8009d8e:	b9eb      	cbnz	r3, 8009dcc <_vfiprintf_r+0x78>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 f96e 	bl	800a074 <__swsetup_r>
 8009d98:	b1c0      	cbz	r0, 8009dcc <_vfiprintf_r+0x78>
 8009d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d9c:	07dc      	lsls	r4, r3, #31
 8009d9e:	d50e      	bpl.n	8009dbe <_vfiprintf_r+0x6a>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b01d      	add	sp, #116	; 0x74
 8009da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	4b7b      	ldr	r3, [pc, #492]	; (8009f98 <_vfiprintf_r+0x244>)
 8009dac:	429d      	cmp	r5, r3
 8009dae:	d101      	bne.n	8009db4 <_vfiprintf_r+0x60>
 8009db0:	68b5      	ldr	r5, [r6, #8]
 8009db2:	e7df      	b.n	8009d74 <_vfiprintf_r+0x20>
 8009db4:	4b79      	ldr	r3, [pc, #484]	; (8009f9c <_vfiprintf_r+0x248>)
 8009db6:	429d      	cmp	r5, r3
 8009db8:	bf08      	it	eq
 8009dba:	68f5      	ldreq	r5, [r6, #12]
 8009dbc:	e7da      	b.n	8009d74 <_vfiprintf_r+0x20>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	0598      	lsls	r0, r3, #22
 8009dc2:	d4ed      	bmi.n	8009da0 <_vfiprintf_r+0x4c>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f7ff ff40 	bl	8009c4a <__retarget_lock_release_recursive>
 8009dca:	e7e9      	b.n	8009da0 <_vfiprintf_r+0x4c>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dda:	2330      	movs	r3, #48	; 0x30
 8009ddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fa0 <_vfiprintf_r+0x24c>
 8009de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de4:	f04f 0901 	mov.w	r9, #1
 8009de8:	4623      	mov	r3, r4
 8009dea:	469a      	mov	sl, r3
 8009dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df0:	b10a      	cbz	r2, 8009df6 <_vfiprintf_r+0xa2>
 8009df2:	2a25      	cmp	r2, #37	; 0x25
 8009df4:	d1f9      	bne.n	8009dea <_vfiprintf_r+0x96>
 8009df6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dfa:	d00b      	beq.n	8009e14 <_vfiprintf_r+0xc0>
 8009dfc:	465b      	mov	r3, fp
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ff94 	bl	8009d30 <__sfputs_r>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f000 80aa 	beq.w	8009f62 <_vfiprintf_r+0x20e>
 8009e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e10:	445a      	add	r2, fp
 8009e12:	9209      	str	r2, [sp, #36]	; 0x24
 8009e14:	f89a 3000 	ldrb.w	r3, [sl]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80a2 	beq.w	8009f62 <_vfiprintf_r+0x20e>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e28:	f10a 0a01 	add.w	sl, sl, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e34:	931a      	str	r3, [sp, #104]	; 0x68
 8009e36:	4654      	mov	r4, sl
 8009e38:	2205      	movs	r2, #5
 8009e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3e:	4858      	ldr	r0, [pc, #352]	; (8009fa0 <_vfiprintf_r+0x24c>)
 8009e40:	f7f6 f9e6 	bl	8000210 <memchr>
 8009e44:	9a04      	ldr	r2, [sp, #16]
 8009e46:	b9d8      	cbnz	r0, 8009e80 <_vfiprintf_r+0x12c>
 8009e48:	06d1      	lsls	r1, r2, #27
 8009e4a:	bf44      	itt	mi
 8009e4c:	2320      	movmi	r3, #32
 8009e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e52:	0713      	lsls	r3, r2, #28
 8009e54:	bf44      	itt	mi
 8009e56:	232b      	movmi	r3, #43	; 0x2b
 8009e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d015      	beq.n	8009e90 <_vfiprintf_r+0x13c>
 8009e64:	9a07      	ldr	r2, [sp, #28]
 8009e66:	4654      	mov	r4, sl
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4621      	mov	r1, r4
 8009e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e74:	3b30      	subs	r3, #48	; 0x30
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d94e      	bls.n	8009f18 <_vfiprintf_r+0x1c4>
 8009e7a:	b1b0      	cbz	r0, 8009eaa <_vfiprintf_r+0x156>
 8009e7c:	9207      	str	r2, [sp, #28]
 8009e7e:	e014      	b.n	8009eaa <_vfiprintf_r+0x156>
 8009e80:	eba0 0308 	sub.w	r3, r0, r8
 8009e84:	fa09 f303 	lsl.w	r3, r9, r3
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	46a2      	mov	sl, r4
 8009e8e:	e7d2      	b.n	8009e36 <_vfiprintf_r+0xe2>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	1d19      	adds	r1, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9103      	str	r1, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfbb      	ittet	lt
 8009e9c:	425b      	neglt	r3, r3
 8009e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea2:	9307      	strge	r3, [sp, #28]
 8009ea4:	9307      	strlt	r3, [sp, #28]
 8009ea6:	bfb8      	it	lt
 8009ea8:	9204      	strlt	r2, [sp, #16]
 8009eaa:	7823      	ldrb	r3, [r4, #0]
 8009eac:	2b2e      	cmp	r3, #46	; 0x2e
 8009eae:	d10c      	bne.n	8009eca <_vfiprintf_r+0x176>
 8009eb0:	7863      	ldrb	r3, [r4, #1]
 8009eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb4:	d135      	bne.n	8009f22 <_vfiprintf_r+0x1ce>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9203      	str	r2, [sp, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ec6:	3402      	adds	r4, #2
 8009ec8:	9305      	str	r3, [sp, #20]
 8009eca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fb0 <_vfiprintf_r+0x25c>
 8009ece:	7821      	ldrb	r1, [r4, #0]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	f7f6 f99c 	bl	8000210 <memchr>
 8009ed8:	b140      	cbz	r0, 8009eec <_vfiprintf_r+0x198>
 8009eda:	2340      	movs	r3, #64	; 0x40
 8009edc:	eba0 000a 	sub.w	r0, r0, sl
 8009ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	4303      	orrs	r3, r0
 8009ee8:	3401      	adds	r4, #1
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef0:	482c      	ldr	r0, [pc, #176]	; (8009fa4 <_vfiprintf_r+0x250>)
 8009ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef6:	2206      	movs	r2, #6
 8009ef8:	f7f6 f98a 	bl	8000210 <memchr>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d03f      	beq.n	8009f80 <_vfiprintf_r+0x22c>
 8009f00:	4b29      	ldr	r3, [pc, #164]	; (8009fa8 <_vfiprintf_r+0x254>)
 8009f02:	bb1b      	cbnz	r3, 8009f4c <_vfiprintf_r+0x1f8>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	3307      	adds	r3, #7
 8009f08:	f023 0307 	bic.w	r3, r3, #7
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f12:	443b      	add	r3, r7
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	e767      	b.n	8009de8 <_vfiprintf_r+0x94>
 8009f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e7a5      	b.n	8009e6e <_vfiprintf_r+0x11a>
 8009f22:	2300      	movs	r3, #0
 8009f24:	3401      	adds	r4, #1
 8009f26:	9305      	str	r3, [sp, #20]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f34:	3a30      	subs	r2, #48	; 0x30
 8009f36:	2a09      	cmp	r2, #9
 8009f38:	d903      	bls.n	8009f42 <_vfiprintf_r+0x1ee>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0c5      	beq.n	8009eca <_vfiprintf_r+0x176>
 8009f3e:	9105      	str	r1, [sp, #20]
 8009f40:	e7c3      	b.n	8009eca <_vfiprintf_r+0x176>
 8009f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f46:	4604      	mov	r4, r0
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e7f0      	b.n	8009f2e <_vfiprintf_r+0x1da>
 8009f4c:	ab03      	add	r3, sp, #12
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	462a      	mov	r2, r5
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <_vfiprintf_r+0x258>)
 8009f54:	a904      	add	r1, sp, #16
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7fc ffc0 	bl	8006edc <_printf_float>
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	1c78      	adds	r0, r7, #1
 8009f60:	d1d6      	bne.n	8009f10 <_vfiprintf_r+0x1bc>
 8009f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f64:	07d9      	lsls	r1, r3, #31
 8009f66:	d405      	bmi.n	8009f74 <_vfiprintf_r+0x220>
 8009f68:	89ab      	ldrh	r3, [r5, #12]
 8009f6a:	059a      	lsls	r2, r3, #22
 8009f6c:	d402      	bmi.n	8009f74 <_vfiprintf_r+0x220>
 8009f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f70:	f7ff fe6b 	bl	8009c4a <__retarget_lock_release_recursive>
 8009f74:	89ab      	ldrh	r3, [r5, #12]
 8009f76:	065b      	lsls	r3, r3, #25
 8009f78:	f53f af12 	bmi.w	8009da0 <_vfiprintf_r+0x4c>
 8009f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f7e:	e711      	b.n	8009da4 <_vfiprintf_r+0x50>
 8009f80:	ab03      	add	r3, sp, #12
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	462a      	mov	r2, r5
 8009f86:	4b09      	ldr	r3, [pc, #36]	; (8009fac <_vfiprintf_r+0x258>)
 8009f88:	a904      	add	r1, sp, #16
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7fd fa4a 	bl	8007424 <_printf_i>
 8009f90:	e7e4      	b.n	8009f5c <_vfiprintf_r+0x208>
 8009f92:	bf00      	nop
 8009f94:	0800cd50 	.word	0x0800cd50
 8009f98:	0800cd70 	.word	0x0800cd70
 8009f9c:	0800cd30 	.word	0x0800cd30
 8009fa0:	0800cbc4 	.word	0x0800cbc4
 8009fa4:	0800cbce 	.word	0x0800cbce
 8009fa8:	08006edd 	.word	0x08006edd
 8009fac:	08009d31 	.word	0x08009d31
 8009fb0:	0800cbca 	.word	0x0800cbca

08009fb4 <__swbuf_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	460e      	mov	r6, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	4605      	mov	r5, r0
 8009fbc:	b118      	cbz	r0, 8009fc6 <__swbuf_r+0x12>
 8009fbe:	6983      	ldr	r3, [r0, #24]
 8009fc0:	b90b      	cbnz	r3, 8009fc6 <__swbuf_r+0x12>
 8009fc2:	f7ff fd91 	bl	8009ae8 <__sinit>
 8009fc6:	4b21      	ldr	r3, [pc, #132]	; (800a04c <__swbuf_r+0x98>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	d12b      	bne.n	800a024 <__swbuf_r+0x70>
 8009fcc:	686c      	ldr	r4, [r5, #4]
 8009fce:	69a3      	ldr	r3, [r4, #24]
 8009fd0:	60a3      	str	r3, [r4, #8]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	071a      	lsls	r2, r3, #28
 8009fd6:	d52f      	bpl.n	800a038 <__swbuf_r+0x84>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	b36b      	cbz	r3, 800a038 <__swbuf_r+0x84>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	1ac0      	subs	r0, r0, r3
 8009fe2:	6963      	ldr	r3, [r4, #20]
 8009fe4:	b2f6      	uxtb	r6, r6
 8009fe6:	4283      	cmp	r3, r0
 8009fe8:	4637      	mov	r7, r6
 8009fea:	dc04      	bgt.n	8009ff6 <__swbuf_r+0x42>
 8009fec:	4621      	mov	r1, r4
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7ff fce6 	bl	80099c0 <_fflush_r>
 8009ff4:	bb30      	cbnz	r0, 800a044 <__swbuf_r+0x90>
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	60a3      	str	r3, [r4, #8]
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	6022      	str	r2, [r4, #0]
 800a002:	701e      	strb	r6, [r3, #0]
 800a004:	6963      	ldr	r3, [r4, #20]
 800a006:	3001      	adds	r0, #1
 800a008:	4283      	cmp	r3, r0
 800a00a:	d004      	beq.n	800a016 <__swbuf_r+0x62>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	07db      	lsls	r3, r3, #31
 800a010:	d506      	bpl.n	800a020 <__swbuf_r+0x6c>
 800a012:	2e0a      	cmp	r6, #10
 800a014:	d104      	bne.n	800a020 <__swbuf_r+0x6c>
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	f7ff fcd1 	bl	80099c0 <_fflush_r>
 800a01e:	b988      	cbnz	r0, 800a044 <__swbuf_r+0x90>
 800a020:	4638      	mov	r0, r7
 800a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <__swbuf_r+0x9c>)
 800a026:	429c      	cmp	r4, r3
 800a028:	d101      	bne.n	800a02e <__swbuf_r+0x7a>
 800a02a:	68ac      	ldr	r4, [r5, #8]
 800a02c:	e7cf      	b.n	8009fce <__swbuf_r+0x1a>
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <__swbuf_r+0xa0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	bf08      	it	eq
 800a034:	68ec      	ldreq	r4, [r5, #12]
 800a036:	e7ca      	b.n	8009fce <__swbuf_r+0x1a>
 800a038:	4621      	mov	r1, r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f81a 	bl	800a074 <__swsetup_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	d0cb      	beq.n	8009fdc <__swbuf_r+0x28>
 800a044:	f04f 37ff 	mov.w	r7, #4294967295
 800a048:	e7ea      	b.n	800a020 <__swbuf_r+0x6c>
 800a04a:	bf00      	nop
 800a04c:	0800cd50 	.word	0x0800cd50
 800a050:	0800cd70 	.word	0x0800cd70
 800a054:	0800cd30 	.word	0x0800cd30

0800a058 <__ascii_wctomb>:
 800a058:	b149      	cbz	r1, 800a06e <__ascii_wctomb+0x16>
 800a05a:	2aff      	cmp	r2, #255	; 0xff
 800a05c:	bf85      	ittet	hi
 800a05e:	238a      	movhi	r3, #138	; 0x8a
 800a060:	6003      	strhi	r3, [r0, #0]
 800a062:	700a      	strbls	r2, [r1, #0]
 800a064:	f04f 30ff 	movhi.w	r0, #4294967295
 800a068:	bf98      	it	ls
 800a06a:	2001      	movls	r0, #1
 800a06c:	4770      	bx	lr
 800a06e:	4608      	mov	r0, r1
 800a070:	4770      	bx	lr
	...

0800a074 <__swsetup_r>:
 800a074:	4b32      	ldr	r3, [pc, #200]	; (800a140 <__swsetup_r+0xcc>)
 800a076:	b570      	push	{r4, r5, r6, lr}
 800a078:	681d      	ldr	r5, [r3, #0]
 800a07a:	4606      	mov	r6, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	b125      	cbz	r5, 800a08a <__swsetup_r+0x16>
 800a080:	69ab      	ldr	r3, [r5, #24]
 800a082:	b913      	cbnz	r3, 800a08a <__swsetup_r+0x16>
 800a084:	4628      	mov	r0, r5
 800a086:	f7ff fd2f 	bl	8009ae8 <__sinit>
 800a08a:	4b2e      	ldr	r3, [pc, #184]	; (800a144 <__swsetup_r+0xd0>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	d10f      	bne.n	800a0b0 <__swsetup_r+0x3c>
 800a090:	686c      	ldr	r4, [r5, #4]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a098:	0719      	lsls	r1, r3, #28
 800a09a:	d42c      	bmi.n	800a0f6 <__swsetup_r+0x82>
 800a09c:	06dd      	lsls	r5, r3, #27
 800a09e:	d411      	bmi.n	800a0c4 <__swsetup_r+0x50>
 800a0a0:	2309      	movs	r3, #9
 800a0a2:	6033      	str	r3, [r6, #0]
 800a0a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ae:	e03e      	b.n	800a12e <__swsetup_r+0xba>
 800a0b0:	4b25      	ldr	r3, [pc, #148]	; (800a148 <__swsetup_r+0xd4>)
 800a0b2:	429c      	cmp	r4, r3
 800a0b4:	d101      	bne.n	800a0ba <__swsetup_r+0x46>
 800a0b6:	68ac      	ldr	r4, [r5, #8]
 800a0b8:	e7eb      	b.n	800a092 <__swsetup_r+0x1e>
 800a0ba:	4b24      	ldr	r3, [pc, #144]	; (800a14c <__swsetup_r+0xd8>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	bf08      	it	eq
 800a0c0:	68ec      	ldreq	r4, [r5, #12]
 800a0c2:	e7e6      	b.n	800a092 <__swsetup_r+0x1e>
 800a0c4:	0758      	lsls	r0, r3, #29
 800a0c6:	d512      	bpl.n	800a0ee <__swsetup_r+0x7a>
 800a0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ca:	b141      	cbz	r1, 800a0de <__swsetup_r+0x6a>
 800a0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d002      	beq.n	800a0da <__swsetup_r+0x66>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7fc fd81 	bl	8006bdc <_free_r>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6063      	str	r3, [r4, #4]
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f043 0308 	orr.w	r3, r3, #8
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	b94b      	cbnz	r3, 800a10e <__swsetup_r+0x9a>
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a104:	d003      	beq.n	800a10e <__swsetup_r+0x9a>
 800a106:	4621      	mov	r1, r4
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f84d 	bl	800a1a8 <__smakebuf_r>
 800a10e:	89a0      	ldrh	r0, [r4, #12]
 800a110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a114:	f010 0301 	ands.w	r3, r0, #1
 800a118:	d00a      	beq.n	800a130 <__swsetup_r+0xbc>
 800a11a:	2300      	movs	r3, #0
 800a11c:	60a3      	str	r3, [r4, #8]
 800a11e:	6963      	ldr	r3, [r4, #20]
 800a120:	425b      	negs	r3, r3
 800a122:	61a3      	str	r3, [r4, #24]
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	b943      	cbnz	r3, 800a13a <__swsetup_r+0xc6>
 800a128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a12c:	d1ba      	bne.n	800a0a4 <__swsetup_r+0x30>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	0781      	lsls	r1, r0, #30
 800a132:	bf58      	it	pl
 800a134:	6963      	ldrpl	r3, [r4, #20]
 800a136:	60a3      	str	r3, [r4, #8]
 800a138:	e7f4      	b.n	800a124 <__swsetup_r+0xb0>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e7f7      	b.n	800a12e <__swsetup_r+0xba>
 800a13e:	bf00      	nop
 800a140:	20000010 	.word	0x20000010
 800a144:	0800cd50 	.word	0x0800cd50
 800a148:	0800cd70 	.word	0x0800cd70
 800a14c:	0800cd30 	.word	0x0800cd30

0800a150 <abort>:
 800a150:	b508      	push	{r3, lr}
 800a152:	2006      	movs	r0, #6
 800a154:	f000 f898 	bl	800a288 <raise>
 800a158:	2001      	movs	r0, #1
 800a15a:	f7f8 fdc3 	bl	8002ce4 <_exit>

0800a15e <__swhatbuf_r>:
 800a15e:	b570      	push	{r4, r5, r6, lr}
 800a160:	460e      	mov	r6, r1
 800a162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a166:	2900      	cmp	r1, #0
 800a168:	b096      	sub	sp, #88	; 0x58
 800a16a:	4614      	mov	r4, r2
 800a16c:	461d      	mov	r5, r3
 800a16e:	da08      	bge.n	800a182 <__swhatbuf_r+0x24>
 800a170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	061a      	lsls	r2, r3, #24
 800a17a:	d410      	bmi.n	800a19e <__swhatbuf_r+0x40>
 800a17c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a180:	e00e      	b.n	800a1a0 <__swhatbuf_r+0x42>
 800a182:	466a      	mov	r2, sp
 800a184:	f000 f89c 	bl	800a2c0 <_fstat_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	dbf1      	blt.n	800a170 <__swhatbuf_r+0x12>
 800a18c:	9a01      	ldr	r2, [sp, #4]
 800a18e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a196:	425a      	negs	r2, r3
 800a198:	415a      	adcs	r2, r3
 800a19a:	602a      	str	r2, [r5, #0]
 800a19c:	e7ee      	b.n	800a17c <__swhatbuf_r+0x1e>
 800a19e:	2340      	movs	r3, #64	; 0x40
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	b016      	add	sp, #88	; 0x58
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}

0800a1a8 <__smakebuf_r>:
 800a1a8:	898b      	ldrh	r3, [r1, #12]
 800a1aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ac:	079d      	lsls	r5, r3, #30
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	d507      	bpl.n	800a1c4 <__smakebuf_r+0x1c>
 800a1b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	2301      	movs	r3, #1
 800a1be:	6163      	str	r3, [r4, #20]
 800a1c0:	b002      	add	sp, #8
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	ab01      	add	r3, sp, #4
 800a1c6:	466a      	mov	r2, sp
 800a1c8:	f7ff ffc9 	bl	800a15e <__swhatbuf_r>
 800a1cc:	9900      	ldr	r1, [sp, #0]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f7fc fd6f 	bl	8006cb4 <_malloc_r>
 800a1d6:	b948      	cbnz	r0, 800a1ec <__smakebuf_r+0x44>
 800a1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1dc:	059a      	lsls	r2, r3, #22
 800a1de:	d4ef      	bmi.n	800a1c0 <__smakebuf_r+0x18>
 800a1e0:	f023 0303 	bic.w	r3, r3, #3
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	e7e3      	b.n	800a1b4 <__smakebuf_r+0xc>
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <__smakebuf_r+0x7c>)
 800a1ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	6020      	str	r0, [r4, #0]
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	6163      	str	r3, [r4, #20]
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	6120      	str	r0, [r4, #16]
 800a202:	b15b      	cbz	r3, 800a21c <__smakebuf_r+0x74>
 800a204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 f86b 	bl	800a2e4 <_isatty_r>
 800a20e:	b128      	cbz	r0, 800a21c <__smakebuf_r+0x74>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	89a0      	ldrh	r0, [r4, #12]
 800a21e:	4305      	orrs	r5, r0
 800a220:	81a5      	strh	r5, [r4, #12]
 800a222:	e7cd      	b.n	800a1c0 <__smakebuf_r+0x18>
 800a224:	08009a81 	.word	0x08009a81

0800a228 <_malloc_usable_size_r>:
 800a228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22c:	1f18      	subs	r0, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfbc      	itt	lt
 800a232:	580b      	ldrlt	r3, [r1, r0]
 800a234:	18c0      	addlt	r0, r0, r3
 800a236:	4770      	bx	lr

0800a238 <_raise_r>:
 800a238:	291f      	cmp	r1, #31
 800a23a:	b538      	push	{r3, r4, r5, lr}
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	d904      	bls.n	800a24c <_raise_r+0x14>
 800a242:	2316      	movs	r3, #22
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a24e:	b112      	cbz	r2, 800a256 <_raise_r+0x1e>
 800a250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a254:	b94b      	cbnz	r3, 800a26a <_raise_r+0x32>
 800a256:	4620      	mov	r0, r4
 800a258:	f000 f830 	bl	800a2bc <_getpid_r>
 800a25c:	462a      	mov	r2, r5
 800a25e:	4601      	mov	r1, r0
 800a260:	4620      	mov	r0, r4
 800a262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a266:	f000 b817 	b.w	800a298 <_kill_r>
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d00a      	beq.n	800a284 <_raise_r+0x4c>
 800a26e:	1c59      	adds	r1, r3, #1
 800a270:	d103      	bne.n	800a27a <_raise_r+0x42>
 800a272:	2316      	movs	r3, #22
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	2001      	movs	r0, #1
 800a278:	e7e7      	b.n	800a24a <_raise_r+0x12>
 800a27a:	2400      	movs	r4, #0
 800a27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a280:	4628      	mov	r0, r5
 800a282:	4798      	blx	r3
 800a284:	2000      	movs	r0, #0
 800a286:	e7e0      	b.n	800a24a <_raise_r+0x12>

0800a288 <raise>:
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <raise+0xc>)
 800a28a:	4601      	mov	r1, r0
 800a28c:	6818      	ldr	r0, [r3, #0]
 800a28e:	f7ff bfd3 	b.w	800a238 <_raise_r>
 800a292:	bf00      	nop
 800a294:	20000010 	.word	0x20000010

0800a298 <_kill_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d07      	ldr	r5, [pc, #28]	; (800a2b8 <_kill_r+0x20>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	602b      	str	r3, [r5, #0]
 800a2a6:	f7f8 fd0d 	bl	8002cc4 <_kill>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d102      	bne.n	800a2b4 <_kill_r+0x1c>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	b103      	cbz	r3, 800a2b4 <_kill_r+0x1c>
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	bf00      	nop
 800a2b8:	2000063c 	.word	0x2000063c

0800a2bc <_getpid_r>:
 800a2bc:	f7f8 bcfa 	b.w	8002cb4 <_getpid>

0800a2c0 <_fstat_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_fstat_r+0x20>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	f7f8 fd58 	bl	8002d82 <_fstat>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d102      	bne.n	800a2dc <_fstat_r+0x1c>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	b103      	cbz	r3, 800a2dc <_fstat_r+0x1c>
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	bf00      	nop
 800a2e0:	2000063c 	.word	0x2000063c

0800a2e4 <_isatty_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	; (800a300 <_isatty_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f8 fd57 	bl	8002da2 <_isatty>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_isatty_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_isatty_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	2000063c 	.word	0x2000063c
 800a304:	00000000 	.word	0x00000000

0800a308 <cos>:
 800a308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a30a:	ec53 2b10 	vmov	r2, r3, d0
 800a30e:	4826      	ldr	r0, [pc, #152]	; (800a3a8 <cos+0xa0>)
 800a310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a314:	4281      	cmp	r1, r0
 800a316:	dc06      	bgt.n	800a326 <cos+0x1e>
 800a318:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a3a0 <cos+0x98>
 800a31c:	b005      	add	sp, #20
 800a31e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a322:	f001 ba41 	b.w	800b7a8 <__kernel_cos>
 800a326:	4821      	ldr	r0, [pc, #132]	; (800a3ac <cos+0xa4>)
 800a328:	4281      	cmp	r1, r0
 800a32a:	dd09      	ble.n	800a340 <cos+0x38>
 800a32c:	ee10 0a10 	vmov	r0, s0
 800a330:	4619      	mov	r1, r3
 800a332:	f7f5 ffc1 	bl	80002b8 <__aeabi_dsub>
 800a336:	ec41 0b10 	vmov	d0, r0, r1
 800a33a:	b005      	add	sp, #20
 800a33c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a340:	4668      	mov	r0, sp
 800a342:	f000 ff71 	bl	800b228 <__ieee754_rem_pio2>
 800a346:	f000 0003 	and.w	r0, r0, #3
 800a34a:	2801      	cmp	r0, #1
 800a34c:	d00b      	beq.n	800a366 <cos+0x5e>
 800a34e:	2802      	cmp	r0, #2
 800a350:	d016      	beq.n	800a380 <cos+0x78>
 800a352:	b9e0      	cbnz	r0, 800a38e <cos+0x86>
 800a354:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a358:	ed9d 0b00 	vldr	d0, [sp]
 800a35c:	f001 fa24 	bl	800b7a8 <__kernel_cos>
 800a360:	ec51 0b10 	vmov	r0, r1, d0
 800a364:	e7e7      	b.n	800a336 <cos+0x2e>
 800a366:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a36a:	ed9d 0b00 	vldr	d0, [sp]
 800a36e:	f001 fe33 	bl	800bfd8 <__kernel_sin>
 800a372:	ec53 2b10 	vmov	r2, r3, d0
 800a376:	ee10 0a10 	vmov	r0, s0
 800a37a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a37e:	e7da      	b.n	800a336 <cos+0x2e>
 800a380:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a384:	ed9d 0b00 	vldr	d0, [sp]
 800a388:	f001 fa0e 	bl	800b7a8 <__kernel_cos>
 800a38c:	e7f1      	b.n	800a372 <cos+0x6a>
 800a38e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a392:	ed9d 0b00 	vldr	d0, [sp]
 800a396:	2001      	movs	r0, #1
 800a398:	f001 fe1e 	bl	800bfd8 <__kernel_sin>
 800a39c:	e7e0      	b.n	800a360 <cos+0x58>
 800a39e:	bf00      	nop
	...
 800a3a8:	3fe921fb 	.word	0x3fe921fb
 800a3ac:	7fefffff 	.word	0x7fefffff

0800a3b0 <round>:
 800a3b0:	ec51 0b10 	vmov	r0, r1, d0
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a3ba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a3be:	2c13      	cmp	r4, #19
 800a3c0:	ee10 2a10 	vmov	r2, s0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	dc19      	bgt.n	800a3fc <round+0x4c>
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	da09      	bge.n	800a3e0 <round+0x30>
 800a3cc:	3401      	adds	r4, #1
 800a3ce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a3d2:	d103      	bne.n	800a3dc <round+0x2c>
 800a3d4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a3d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e028      	b.n	800a432 <round+0x82>
 800a3e0:	4d15      	ldr	r5, [pc, #84]	; (800a438 <round+0x88>)
 800a3e2:	4125      	asrs	r5, r4
 800a3e4:	ea01 0605 	and.w	r6, r1, r5
 800a3e8:	4332      	orrs	r2, r6
 800a3ea:	d00e      	beq.n	800a40a <round+0x5a>
 800a3ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a3f0:	fa42 f404 	asr.w	r4, r2, r4
 800a3f4:	4423      	add	r3, r4
 800a3f6:	ea23 0305 	bic.w	r3, r3, r5
 800a3fa:	e7ef      	b.n	800a3dc <round+0x2c>
 800a3fc:	2c33      	cmp	r4, #51	; 0x33
 800a3fe:	dd07      	ble.n	800a410 <round+0x60>
 800a400:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a404:	d101      	bne.n	800a40a <round+0x5a>
 800a406:	f7f5 ff59 	bl	80002bc <__adddf3>
 800a40a:	ec41 0b10 	vmov	d0, r0, r1
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a414:	f04f 35ff 	mov.w	r5, #4294967295
 800a418:	40f5      	lsrs	r5, r6
 800a41a:	4228      	tst	r0, r5
 800a41c:	d0f5      	beq.n	800a40a <round+0x5a>
 800a41e:	2101      	movs	r1, #1
 800a420:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a424:	fa01 f404 	lsl.w	r4, r1, r4
 800a428:	1912      	adds	r2, r2, r4
 800a42a:	bf28      	it	cs
 800a42c:	185b      	addcs	r3, r3, r1
 800a42e:	ea22 0205 	bic.w	r2, r2, r5
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	e7e8      	b.n	800a40a <round+0x5a>
 800a438:	000fffff 	.word	0x000fffff
 800a43c:	00000000 	.word	0x00000000

0800a440 <sin>:
 800a440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a442:	ec53 2b10 	vmov	r2, r3, d0
 800a446:	4828      	ldr	r0, [pc, #160]	; (800a4e8 <sin+0xa8>)
 800a448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a44c:	4281      	cmp	r1, r0
 800a44e:	dc07      	bgt.n	800a460 <sin+0x20>
 800a450:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a4e0 <sin+0xa0>
 800a454:	2000      	movs	r0, #0
 800a456:	b005      	add	sp, #20
 800a458:	f85d eb04 	ldr.w	lr, [sp], #4
 800a45c:	f001 bdbc 	b.w	800bfd8 <__kernel_sin>
 800a460:	4822      	ldr	r0, [pc, #136]	; (800a4ec <sin+0xac>)
 800a462:	4281      	cmp	r1, r0
 800a464:	dd09      	ble.n	800a47a <sin+0x3a>
 800a466:	ee10 0a10 	vmov	r0, s0
 800a46a:	4619      	mov	r1, r3
 800a46c:	f7f5 ff24 	bl	80002b8 <__aeabi_dsub>
 800a470:	ec41 0b10 	vmov	d0, r0, r1
 800a474:	b005      	add	sp, #20
 800a476:	f85d fb04 	ldr.w	pc, [sp], #4
 800a47a:	4668      	mov	r0, sp
 800a47c:	f000 fed4 	bl	800b228 <__ieee754_rem_pio2>
 800a480:	f000 0003 	and.w	r0, r0, #3
 800a484:	2801      	cmp	r0, #1
 800a486:	d00c      	beq.n	800a4a2 <sin+0x62>
 800a488:	2802      	cmp	r0, #2
 800a48a:	d011      	beq.n	800a4b0 <sin+0x70>
 800a48c:	b9f0      	cbnz	r0, 800a4cc <sin+0x8c>
 800a48e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a492:	ed9d 0b00 	vldr	d0, [sp]
 800a496:	2001      	movs	r0, #1
 800a498:	f001 fd9e 	bl	800bfd8 <__kernel_sin>
 800a49c:	ec51 0b10 	vmov	r0, r1, d0
 800a4a0:	e7e6      	b.n	800a470 <sin+0x30>
 800a4a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4a6:	ed9d 0b00 	vldr	d0, [sp]
 800a4aa:	f001 f97d 	bl	800b7a8 <__kernel_cos>
 800a4ae:	e7f5      	b.n	800a49c <sin+0x5c>
 800a4b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4b4:	ed9d 0b00 	vldr	d0, [sp]
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f001 fd8d 	bl	800bfd8 <__kernel_sin>
 800a4be:	ec53 2b10 	vmov	r2, r3, d0
 800a4c2:	ee10 0a10 	vmov	r0, s0
 800a4c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a4ca:	e7d1      	b.n	800a470 <sin+0x30>
 800a4cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4d0:	ed9d 0b00 	vldr	d0, [sp]
 800a4d4:	f001 f968 	bl	800b7a8 <__kernel_cos>
 800a4d8:	e7f1      	b.n	800a4be <sin+0x7e>
 800a4da:	bf00      	nop
 800a4dc:	f3af 8000 	nop.w
	...
 800a4e8:	3fe921fb 	.word	0x3fe921fb
 800a4ec:	7fefffff 	.word	0x7fefffff

0800a4f0 <atan2>:
 800a4f0:	f000 b89e 	b.w	800a630 <__ieee754_atan2>

0800a4f4 <pow>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	ed2d 8b02 	vpush	{d8}
 800a4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800a4fe:	eef0 8a60 	vmov.f32	s17, s1
 800a502:	ec55 4b11 	vmov	r4, r5, d1
 800a506:	f000 f95f 	bl	800a7c8 <__ieee754_pow>
 800a50a:	4622      	mov	r2, r4
 800a50c:	462b      	mov	r3, r5
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	ec57 6b10 	vmov	r6, r7, d0
 800a516:	f7f6 fb21 	bl	8000b5c <__aeabi_dcmpun>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d13b      	bne.n	800a596 <pow+0xa2>
 800a51e:	ec51 0b18 	vmov	r0, r1, d8
 800a522:	2200      	movs	r2, #0
 800a524:	2300      	movs	r3, #0
 800a526:	f7f6 fae7 	bl	8000af8 <__aeabi_dcmpeq>
 800a52a:	b1b8      	cbz	r0, 800a55c <pow+0x68>
 800a52c:	2200      	movs	r2, #0
 800a52e:	2300      	movs	r3, #0
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f6 fae0 	bl	8000af8 <__aeabi_dcmpeq>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d146      	bne.n	800a5ca <pow+0xd6>
 800a53c:	ec45 4b10 	vmov	d0, r4, r5
 800a540:	f001 ffe3 	bl	800c50a <finite>
 800a544:	b338      	cbz	r0, 800a596 <pow+0xa2>
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 fadd 	bl	8000b0c <__aeabi_dcmplt>
 800a552:	b300      	cbz	r0, 800a596 <pow+0xa2>
 800a554:	f7fc fb08 	bl	8006b68 <__errno>
 800a558:	2322      	movs	r3, #34	; 0x22
 800a55a:	e01b      	b.n	800a594 <pow+0xa0>
 800a55c:	ec47 6b10 	vmov	d0, r6, r7
 800a560:	f001 ffd3 	bl	800c50a <finite>
 800a564:	b9e0      	cbnz	r0, 800a5a0 <pow+0xac>
 800a566:	eeb0 0a48 	vmov.f32	s0, s16
 800a56a:	eef0 0a68 	vmov.f32	s1, s17
 800a56e:	f001 ffcc 	bl	800c50a <finite>
 800a572:	b1a8      	cbz	r0, 800a5a0 <pow+0xac>
 800a574:	ec45 4b10 	vmov	d0, r4, r5
 800a578:	f001 ffc7 	bl	800c50a <finite>
 800a57c:	b180      	cbz	r0, 800a5a0 <pow+0xac>
 800a57e:	4632      	mov	r2, r6
 800a580:	463b      	mov	r3, r7
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f6 fae9 	bl	8000b5c <__aeabi_dcmpun>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0e2      	beq.n	800a554 <pow+0x60>
 800a58e:	f7fc faeb 	bl	8006b68 <__errno>
 800a592:	2321      	movs	r3, #33	; 0x21
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	ecbd 8b02 	vpop	{d8}
 800a59a:	ec47 6b10 	vmov	d0, r6, r7
 800a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f7f6 faa6 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0f2      	beq.n	800a596 <pow+0xa2>
 800a5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5b4:	eef0 0a68 	vmov.f32	s1, s17
 800a5b8:	f001 ffa7 	bl	800c50a <finite>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d0ea      	beq.n	800a596 <pow+0xa2>
 800a5c0:	ec45 4b10 	vmov	d0, r4, r5
 800a5c4:	f001 ffa1 	bl	800c50a <finite>
 800a5c8:	e7c3      	b.n	800a552 <pow+0x5e>
 800a5ca:	4f01      	ldr	r7, [pc, #4]	; (800a5d0 <pow+0xdc>)
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	e7e2      	b.n	800a596 <pow+0xa2>
 800a5d0:	3ff00000 	.word	0x3ff00000

0800a5d4 <sqrt>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	ed2d 8b02 	vpush	{d8}
 800a5da:	ec55 4b10 	vmov	r4, r5, d0
 800a5de:	f001 f82f 	bl	800b640 <__ieee754_sqrt>
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ee:	eef0 8a60 	vmov.f32	s17, s1
 800a5f2:	f7f6 fab3 	bl	8000b5c <__aeabi_dcmpun>
 800a5f6:	b990      	cbnz	r0, 800a61e <sqrt+0x4a>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	f7f6 fa84 	bl	8000b0c <__aeabi_dcmplt>
 800a604:	b158      	cbz	r0, 800a61e <sqrt+0x4a>
 800a606:	f7fc faaf 	bl	8006b68 <__errno>
 800a60a:	2321      	movs	r3, #33	; 0x21
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	2300      	movs	r3, #0
 800a612:	4610      	mov	r0, r2
 800a614:	4619      	mov	r1, r3
 800a616:	f7f6 f931 	bl	800087c <__aeabi_ddiv>
 800a61a:	ec41 0b18 	vmov	d8, r0, r1
 800a61e:	eeb0 0a48 	vmov.f32	s0, s16
 800a622:	eef0 0a68 	vmov.f32	s1, s17
 800a626:	ecbd 8b02 	vpop	{d8}
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	0000      	movs	r0, r0
	...

0800a630 <__ieee754_atan2>:
 800a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a634:	ec57 6b11 	vmov	r6, r7, d1
 800a638:	4273      	negs	r3, r6
 800a63a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a7c0 <__ieee754_atan2+0x190>
 800a63e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a642:	4333      	orrs	r3, r6
 800a644:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a648:	4573      	cmp	r3, lr
 800a64a:	ec51 0b10 	vmov	r0, r1, d0
 800a64e:	ee11 8a10 	vmov	r8, s2
 800a652:	d80a      	bhi.n	800a66a <__ieee754_atan2+0x3a>
 800a654:	4244      	negs	r4, r0
 800a656:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a65a:	4304      	orrs	r4, r0
 800a65c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a660:	4574      	cmp	r4, lr
 800a662:	ee10 9a10 	vmov	r9, s0
 800a666:	468c      	mov	ip, r1
 800a668:	d907      	bls.n	800a67a <__ieee754_atan2+0x4a>
 800a66a:	4632      	mov	r2, r6
 800a66c:	463b      	mov	r3, r7
 800a66e:	f7f5 fe25 	bl	80002bc <__adddf3>
 800a672:	ec41 0b10 	vmov	d0, r0, r1
 800a676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a67e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a682:	4334      	orrs	r4, r6
 800a684:	d103      	bne.n	800a68e <__ieee754_atan2+0x5e>
 800a686:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68a:	f001 bd95 	b.w	800c1b8 <atan>
 800a68e:	17bc      	asrs	r4, r7, #30
 800a690:	f004 0402 	and.w	r4, r4, #2
 800a694:	ea53 0909 	orrs.w	r9, r3, r9
 800a698:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a69c:	d107      	bne.n	800a6ae <__ieee754_atan2+0x7e>
 800a69e:	2c02      	cmp	r4, #2
 800a6a0:	d060      	beq.n	800a764 <__ieee754_atan2+0x134>
 800a6a2:	2c03      	cmp	r4, #3
 800a6a4:	d1e5      	bne.n	800a672 <__ieee754_atan2+0x42>
 800a6a6:	a142      	add	r1, pc, #264	; (adr r1, 800a7b0 <__ieee754_atan2+0x180>)
 800a6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ac:	e7e1      	b.n	800a672 <__ieee754_atan2+0x42>
 800a6ae:	ea52 0808 	orrs.w	r8, r2, r8
 800a6b2:	d106      	bne.n	800a6c2 <__ieee754_atan2+0x92>
 800a6b4:	f1bc 0f00 	cmp.w	ip, #0
 800a6b8:	da5f      	bge.n	800a77a <__ieee754_atan2+0x14a>
 800a6ba:	a13f      	add	r1, pc, #252	; (adr r1, 800a7b8 <__ieee754_atan2+0x188>)
 800a6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c0:	e7d7      	b.n	800a672 <__ieee754_atan2+0x42>
 800a6c2:	4572      	cmp	r2, lr
 800a6c4:	d10f      	bne.n	800a6e6 <__ieee754_atan2+0xb6>
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6cc:	d107      	bne.n	800a6de <__ieee754_atan2+0xae>
 800a6ce:	2c02      	cmp	r4, #2
 800a6d0:	d84c      	bhi.n	800a76c <__ieee754_atan2+0x13c>
 800a6d2:	4b35      	ldr	r3, [pc, #212]	; (800a7a8 <__ieee754_atan2+0x178>)
 800a6d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a6d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a6dc:	e7c9      	b.n	800a672 <__ieee754_atan2+0x42>
 800a6de:	2c02      	cmp	r4, #2
 800a6e0:	d848      	bhi.n	800a774 <__ieee754_atan2+0x144>
 800a6e2:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__ieee754_atan2+0x17c>)
 800a6e4:	e7f6      	b.n	800a6d4 <__ieee754_atan2+0xa4>
 800a6e6:	4573      	cmp	r3, lr
 800a6e8:	d0e4      	beq.n	800a6b4 <__ieee754_atan2+0x84>
 800a6ea:	1a9b      	subs	r3, r3, r2
 800a6ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a6f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6f4:	da1e      	bge.n	800a734 <__ieee754_atan2+0x104>
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	da01      	bge.n	800a6fe <__ieee754_atan2+0xce>
 800a6fa:	323c      	adds	r2, #60	; 0x3c
 800a6fc:	db1e      	blt.n	800a73c <__ieee754_atan2+0x10c>
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	f7f6 f8bb 	bl	800087c <__aeabi_ddiv>
 800a706:	ec41 0b10 	vmov	d0, r0, r1
 800a70a:	f001 fef5 	bl	800c4f8 <fabs>
 800a70e:	f001 fd53 	bl	800c1b8 <atan>
 800a712:	ec51 0b10 	vmov	r0, r1, d0
 800a716:	2c01      	cmp	r4, #1
 800a718:	d013      	beq.n	800a742 <__ieee754_atan2+0x112>
 800a71a:	2c02      	cmp	r4, #2
 800a71c:	d015      	beq.n	800a74a <__ieee754_atan2+0x11a>
 800a71e:	2c00      	cmp	r4, #0
 800a720:	d0a7      	beq.n	800a672 <__ieee754_atan2+0x42>
 800a722:	a319      	add	r3, pc, #100	; (adr r3, 800a788 <__ieee754_atan2+0x158>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fdc6 	bl	80002b8 <__aeabi_dsub>
 800a72c:	a318      	add	r3, pc, #96	; (adr r3, 800a790 <__ieee754_atan2+0x160>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	e014      	b.n	800a75e <__ieee754_atan2+0x12e>
 800a734:	a118      	add	r1, pc, #96	; (adr r1, 800a798 <__ieee754_atan2+0x168>)
 800a736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a73a:	e7ec      	b.n	800a716 <__ieee754_atan2+0xe6>
 800a73c:	2000      	movs	r0, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	e7e9      	b.n	800a716 <__ieee754_atan2+0xe6>
 800a742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a746:	4619      	mov	r1, r3
 800a748:	e793      	b.n	800a672 <__ieee754_atan2+0x42>
 800a74a:	a30f      	add	r3, pc, #60	; (adr r3, 800a788 <__ieee754_atan2+0x158>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fdb2 	bl	80002b8 <__aeabi_dsub>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	a10d      	add	r1, pc, #52	; (adr r1, 800a790 <__ieee754_atan2+0x160>)
 800a75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a75e:	f7f5 fdab 	bl	80002b8 <__aeabi_dsub>
 800a762:	e786      	b.n	800a672 <__ieee754_atan2+0x42>
 800a764:	a10a      	add	r1, pc, #40	; (adr r1, 800a790 <__ieee754_atan2+0x160>)
 800a766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76a:	e782      	b.n	800a672 <__ieee754_atan2+0x42>
 800a76c:	a10c      	add	r1, pc, #48	; (adr r1, 800a7a0 <__ieee754_atan2+0x170>)
 800a76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a772:	e77e      	b.n	800a672 <__ieee754_atan2+0x42>
 800a774:	2000      	movs	r0, #0
 800a776:	2100      	movs	r1, #0
 800a778:	e77b      	b.n	800a672 <__ieee754_atan2+0x42>
 800a77a:	a107      	add	r1, pc, #28	; (adr r1, 800a798 <__ieee754_atan2+0x168>)
 800a77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a780:	e777      	b.n	800a672 <__ieee754_atan2+0x42>
 800a782:	bf00      	nop
 800a784:	f3af 8000 	nop.w
 800a788:	33145c07 	.word	0x33145c07
 800a78c:	3ca1a626 	.word	0x3ca1a626
 800a790:	54442d18 	.word	0x54442d18
 800a794:	400921fb 	.word	0x400921fb
 800a798:	54442d18 	.word	0x54442d18
 800a79c:	3ff921fb 	.word	0x3ff921fb
 800a7a0:	54442d18 	.word	0x54442d18
 800a7a4:	3fe921fb 	.word	0x3fe921fb
 800a7a8:	0800cda0 	.word	0x0800cda0
 800a7ac:	0800cdb8 	.word	0x0800cdb8
 800a7b0:	54442d18 	.word	0x54442d18
 800a7b4:	c00921fb 	.word	0xc00921fb
 800a7b8:	54442d18 	.word	0x54442d18
 800a7bc:	bff921fb 	.word	0xbff921fb
 800a7c0:	7ff00000 	.word	0x7ff00000
 800a7c4:	00000000 	.word	0x00000000

0800a7c8 <__ieee754_pow>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	ed2d 8b06 	vpush	{d8-d10}
 800a7d0:	b089      	sub	sp, #36	; 0x24
 800a7d2:	ed8d 1b00 	vstr	d1, [sp]
 800a7d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a7da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a7de:	ea58 0102 	orrs.w	r1, r8, r2
 800a7e2:	ec57 6b10 	vmov	r6, r7, d0
 800a7e6:	d115      	bne.n	800a814 <__ieee754_pow+0x4c>
 800a7e8:	19b3      	adds	r3, r6, r6
 800a7ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a7ee:	4152      	adcs	r2, r2
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	4b89      	ldr	r3, [pc, #548]	; (800aa18 <__ieee754_pow+0x250>)
 800a7f4:	4193      	sbcs	r3, r2
 800a7f6:	f080 84d2 	bcs.w	800b19e <__ieee754_pow+0x9d6>
 800a7fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fd5b 	bl	80002bc <__adddf3>
 800a806:	ec41 0b10 	vmov	d0, r0, r1
 800a80a:	b009      	add	sp, #36	; 0x24
 800a80c:	ecbd 8b06 	vpop	{d8-d10}
 800a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a814:	4b81      	ldr	r3, [pc, #516]	; (800aa1c <__ieee754_pow+0x254>)
 800a816:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a81a:	429c      	cmp	r4, r3
 800a81c:	ee10 aa10 	vmov	sl, s0
 800a820:	463d      	mov	r5, r7
 800a822:	dc06      	bgt.n	800a832 <__ieee754_pow+0x6a>
 800a824:	d101      	bne.n	800a82a <__ieee754_pow+0x62>
 800a826:	2e00      	cmp	r6, #0
 800a828:	d1e7      	bne.n	800a7fa <__ieee754_pow+0x32>
 800a82a:	4598      	cmp	r8, r3
 800a82c:	dc01      	bgt.n	800a832 <__ieee754_pow+0x6a>
 800a82e:	d10f      	bne.n	800a850 <__ieee754_pow+0x88>
 800a830:	b172      	cbz	r2, 800a850 <__ieee754_pow+0x88>
 800a832:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a836:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a83a:	ea55 050a 	orrs.w	r5, r5, sl
 800a83e:	d1dc      	bne.n	800a7fa <__ieee754_pow+0x32>
 800a840:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a844:	18db      	adds	r3, r3, r3
 800a846:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a84a:	4152      	adcs	r2, r2
 800a84c:	429d      	cmp	r5, r3
 800a84e:	e7d0      	b.n	800a7f2 <__ieee754_pow+0x2a>
 800a850:	2d00      	cmp	r5, #0
 800a852:	da3b      	bge.n	800a8cc <__ieee754_pow+0x104>
 800a854:	4b72      	ldr	r3, [pc, #456]	; (800aa20 <__ieee754_pow+0x258>)
 800a856:	4598      	cmp	r8, r3
 800a858:	dc51      	bgt.n	800a8fe <__ieee754_pow+0x136>
 800a85a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a85e:	4598      	cmp	r8, r3
 800a860:	f340 84ac 	ble.w	800b1bc <__ieee754_pow+0x9f4>
 800a864:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a868:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a86c:	2b14      	cmp	r3, #20
 800a86e:	dd0f      	ble.n	800a890 <__ieee754_pow+0xc8>
 800a870:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a874:	fa22 f103 	lsr.w	r1, r2, r3
 800a878:	fa01 f303 	lsl.w	r3, r1, r3
 800a87c:	4293      	cmp	r3, r2
 800a87e:	f040 849d 	bne.w	800b1bc <__ieee754_pow+0x9f4>
 800a882:	f001 0101 	and.w	r1, r1, #1
 800a886:	f1c1 0302 	rsb	r3, r1, #2
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	b182      	cbz	r2, 800a8b0 <__ieee754_pow+0xe8>
 800a88e:	e05f      	b.n	800a950 <__ieee754_pow+0x188>
 800a890:	2a00      	cmp	r2, #0
 800a892:	d15b      	bne.n	800a94c <__ieee754_pow+0x184>
 800a894:	f1c3 0314 	rsb	r3, r3, #20
 800a898:	fa48 f103 	asr.w	r1, r8, r3
 800a89c:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	f040 8488 	bne.w	800b1b6 <__ieee754_pow+0x9ee>
 800a8a6:	f001 0101 	and.w	r1, r1, #1
 800a8aa:	f1c1 0302 	rsb	r3, r1, #2
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	4b5c      	ldr	r3, [pc, #368]	; (800aa24 <__ieee754_pow+0x25c>)
 800a8b2:	4598      	cmp	r8, r3
 800a8b4:	d132      	bne.n	800a91c <__ieee754_pow+0x154>
 800a8b6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ba:	f280 8478 	bge.w	800b1ae <__ieee754_pow+0x9e6>
 800a8be:	4959      	ldr	r1, [pc, #356]	; (800aa24 <__ieee754_pow+0x25c>)
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f7f5 ffd9 	bl	800087c <__aeabi_ddiv>
 800a8ca:	e79c      	b.n	800a806 <__ieee754_pow+0x3e>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9304      	str	r3, [sp, #16]
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d13d      	bne.n	800a950 <__ieee754_pow+0x188>
 800a8d4:	4b51      	ldr	r3, [pc, #324]	; (800aa1c <__ieee754_pow+0x254>)
 800a8d6:	4598      	cmp	r8, r3
 800a8d8:	d1ea      	bne.n	800a8b0 <__ieee754_pow+0xe8>
 800a8da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a8de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a8e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a8e6:	f000 845a 	beq.w	800b19e <__ieee754_pow+0x9d6>
 800a8ea:	4b4f      	ldr	r3, [pc, #316]	; (800aa28 <__ieee754_pow+0x260>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	dd08      	ble.n	800a902 <__ieee754_pow+0x13a>
 800a8f0:	f1b9 0f00 	cmp.w	r9, #0
 800a8f4:	f2c0 8457 	blt.w	800b1a6 <__ieee754_pow+0x9de>
 800a8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8fc:	e783      	b.n	800a806 <__ieee754_pow+0x3e>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e7e5      	b.n	800a8ce <__ieee754_pow+0x106>
 800a902:	f1b9 0f00 	cmp.w	r9, #0
 800a906:	f04f 0000 	mov.w	r0, #0
 800a90a:	f04f 0100 	mov.w	r1, #0
 800a90e:	f6bf af7a 	bge.w	800a806 <__ieee754_pow+0x3e>
 800a912:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a91a:	e774      	b.n	800a806 <__ieee754_pow+0x3e>
 800a91c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a920:	d106      	bne.n	800a930 <__ieee754_pow+0x168>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f5 fe7d 	bl	8000628 <__aeabi_dmul>
 800a92e:	e76a      	b.n	800a806 <__ieee754_pow+0x3e>
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <__ieee754_pow+0x264>)
 800a932:	4599      	cmp	r9, r3
 800a934:	d10c      	bne.n	800a950 <__ieee754_pow+0x188>
 800a936:	2d00      	cmp	r5, #0
 800a938:	db0a      	blt.n	800a950 <__ieee754_pow+0x188>
 800a93a:	ec47 6b10 	vmov	d0, r6, r7
 800a93e:	b009      	add	sp, #36	; 0x24
 800a940:	ecbd 8b06 	vpop	{d8-d10}
 800a944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	f000 be7a 	b.w	800b640 <__ieee754_sqrt>
 800a94c:	2300      	movs	r3, #0
 800a94e:	9304      	str	r3, [sp, #16]
 800a950:	ec47 6b10 	vmov	d0, r6, r7
 800a954:	f001 fdd0 	bl	800c4f8 <fabs>
 800a958:	ec51 0b10 	vmov	r0, r1, d0
 800a95c:	f1ba 0f00 	cmp.w	sl, #0
 800a960:	d129      	bne.n	800a9b6 <__ieee754_pow+0x1ee>
 800a962:	b124      	cbz	r4, 800a96e <__ieee754_pow+0x1a6>
 800a964:	4b2f      	ldr	r3, [pc, #188]	; (800aa24 <__ieee754_pow+0x25c>)
 800a966:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d123      	bne.n	800a9b6 <__ieee754_pow+0x1ee>
 800a96e:	f1b9 0f00 	cmp.w	r9, #0
 800a972:	da05      	bge.n	800a980 <__ieee754_pow+0x1b8>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	2000      	movs	r0, #0
 800a97a:	492a      	ldr	r1, [pc, #168]	; (800aa24 <__ieee754_pow+0x25c>)
 800a97c:	f7f5 ff7e 	bl	800087c <__aeabi_ddiv>
 800a980:	2d00      	cmp	r5, #0
 800a982:	f6bf af40 	bge.w	800a806 <__ieee754_pow+0x3e>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a98c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a990:	4323      	orrs	r3, r4
 800a992:	d108      	bne.n	800a9a6 <__ieee754_pow+0x1de>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4610      	mov	r0, r2
 800a99a:	4619      	mov	r1, r3
 800a99c:	f7f5 fc8c 	bl	80002b8 <__aeabi_dsub>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	e78f      	b.n	800a8c6 <__ieee754_pow+0xfe>
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	f47f af2c 	bne.w	800a806 <__ieee754_pow+0x3e>
 800a9ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	e727      	b.n	800a806 <__ieee754_pow+0x3e>
 800a9b6:	0feb      	lsrs	r3, r5, #31
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	9306      	str	r3, [sp, #24]
 800a9bc:	9a06      	ldr	r2, [sp, #24]
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d102      	bne.n	800a9ca <__ieee754_pow+0x202>
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	e7e6      	b.n	800a998 <__ieee754_pow+0x1d0>
 800a9ca:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <__ieee754_pow+0x268>)
 800a9cc:	4598      	cmp	r8, r3
 800a9ce:	f340 80fb 	ble.w	800abc8 <__ieee754_pow+0x400>
 800a9d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a9d6:	4598      	cmp	r8, r3
 800a9d8:	4b13      	ldr	r3, [pc, #76]	; (800aa28 <__ieee754_pow+0x260>)
 800a9da:	dd0c      	ble.n	800a9f6 <__ieee754_pow+0x22e>
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	dc0f      	bgt.n	800aa00 <__ieee754_pow+0x238>
 800a9e0:	f1b9 0f00 	cmp.w	r9, #0
 800a9e4:	da0f      	bge.n	800aa06 <__ieee754_pow+0x23e>
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	b009      	add	sp, #36	; 0x24
 800a9ea:	ecbd 8b06 	vpop	{d8-d10}
 800a9ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f2:	f001 bbd6 	b.w	800c1a2 <__math_oflow>
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	dbf2      	blt.n	800a9e0 <__ieee754_pow+0x218>
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <__ieee754_pow+0x25c>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	dd19      	ble.n	800aa34 <__ieee754_pow+0x26c>
 800aa00:	f1b9 0f00 	cmp.w	r9, #0
 800aa04:	dcef      	bgt.n	800a9e6 <__ieee754_pow+0x21e>
 800aa06:	2000      	movs	r0, #0
 800aa08:	b009      	add	sp, #36	; 0x24
 800aa0a:	ecbd 8b06 	vpop	{d8-d10}
 800aa0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa12:	f001 bbbd 	b.w	800c190 <__math_uflow>
 800aa16:	bf00      	nop
 800aa18:	fff00000 	.word	0xfff00000
 800aa1c:	7ff00000 	.word	0x7ff00000
 800aa20:	433fffff 	.word	0x433fffff
 800aa24:	3ff00000 	.word	0x3ff00000
 800aa28:	3fefffff 	.word	0x3fefffff
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	41e00000 	.word	0x41e00000
 800aa34:	4b60      	ldr	r3, [pc, #384]	; (800abb8 <__ieee754_pow+0x3f0>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	f7f5 fc3e 	bl	80002b8 <__aeabi_dsub>
 800aa3c:	a354      	add	r3, pc, #336	; (adr r3, 800ab90 <__ieee754_pow+0x3c8>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	4604      	mov	r4, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	f7f5 fdef 	bl	8000628 <__aeabi_dmul>
 800aa4a:	a353      	add	r3, pc, #332	; (adr r3, 800ab98 <__ieee754_pow+0x3d0>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	4606      	mov	r6, r0
 800aa52:	460f      	mov	r7, r1
 800aa54:	4620      	mov	r0, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	f7f5 fde6 	bl	8000628 <__aeabi_dmul>
 800aa5c:	4b57      	ldr	r3, [pc, #348]	; (800abbc <__ieee754_pow+0x3f4>)
 800aa5e:	4682      	mov	sl, r0
 800aa60:	468b      	mov	fp, r1
 800aa62:	2200      	movs	r2, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 fdde 	bl	8000628 <__aeabi_dmul>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	a14b      	add	r1, pc, #300	; (adr r1, 800aba0 <__ieee754_pow+0x3d8>)
 800aa72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa76:	f7f5 fc1f 	bl	80002b8 <__aeabi_dsub>
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	f7f5 fdd3 	bl	8000628 <__aeabi_dmul>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	2000      	movs	r0, #0
 800aa88:	494d      	ldr	r1, [pc, #308]	; (800abc0 <__ieee754_pow+0x3f8>)
 800aa8a:	f7f5 fc15 	bl	80002b8 <__aeabi_dsub>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	4680      	mov	r8, r0
 800aa92:	4689      	mov	r9, r1
 800aa94:	462b      	mov	r3, r5
 800aa96:	4620      	mov	r0, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	f7f5 fdc5 	bl	8000628 <__aeabi_dmul>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f5 fdbf 	bl	8000628 <__aeabi_dmul>
 800aaaa:	a33f      	add	r3, pc, #252	; (adr r3, 800aba8 <__ieee754_pow+0x3e0>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fdba 	bl	8000628 <__aeabi_dmul>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4650      	mov	r0, sl
 800aaba:	4659      	mov	r1, fp
 800aabc:	f7f5 fbfc 	bl	80002b8 <__aeabi_dsub>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4680      	mov	r8, r0
 800aac6:	4689      	mov	r9, r1
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f5 fbf6 	bl	80002bc <__adddf3>
 800aad0:	2000      	movs	r0, #0
 800aad2:	4632      	mov	r2, r6
 800aad4:	463b      	mov	r3, r7
 800aad6:	4604      	mov	r4, r0
 800aad8:	460d      	mov	r5, r1
 800aada:	f7f5 fbed 	bl	80002b8 <__aeabi_dsub>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fbe7 	bl	80002b8 <__aeabi_dsub>
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	9a06      	ldr	r2, [sp, #24]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	4682      	mov	sl, r0
 800aaf4:	468b      	mov	fp, r1
 800aaf6:	f040 81e7 	bne.w	800aec8 <__ieee754_pow+0x700>
 800aafa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800abb0 <__ieee754_pow+0x3e8>
 800aafe:	eeb0 8a47 	vmov.f32	s16, s14
 800ab02:	eef0 8a67 	vmov.f32	s17, s15
 800ab06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab0a:	2600      	movs	r6, #0
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	463b      	mov	r3, r7
 800ab10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab14:	f7f5 fbd0 	bl	80002b8 <__aeabi_dsub>
 800ab18:	4622      	mov	r2, r4
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	f7f5 fd84 	bl	8000628 <__aeabi_dmul>
 800ab20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	f7f5 fd7c 	bl	8000628 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4640      	mov	r0, r8
 800ab36:	4649      	mov	r1, r9
 800ab38:	f7f5 fbc0 	bl	80002bc <__adddf3>
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	463b      	mov	r3, r7
 800ab40:	4680      	mov	r8, r0
 800ab42:	4689      	mov	r9, r1
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fd6e 	bl	8000628 <__aeabi_dmul>
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	4602      	mov	r2, r0
 800ab54:	4649      	mov	r1, r9
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7f5 fbb0 	bl	80002bc <__adddf3>
 800ab5c:	4b19      	ldr	r3, [pc, #100]	; (800abc4 <__ieee754_pow+0x3fc>)
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	ec45 4b19 	vmov	d9, r4, r5
 800ab64:	4606      	mov	r6, r0
 800ab66:	460f      	mov	r7, r1
 800ab68:	468b      	mov	fp, r1
 800ab6a:	f340 82f1 	ble.w	800b150 <__ieee754_pow+0x988>
 800ab6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ab72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ab76:	4303      	orrs	r3, r0
 800ab78:	f000 81e4 	beq.w	800af44 <__ieee754_pow+0x77c>
 800ab7c:	ec51 0b18 	vmov	r0, r1, d8
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	f7f5 ffc2 	bl	8000b0c <__aeabi_dcmplt>
 800ab88:	3800      	subs	r0, #0
 800ab8a:	bf18      	it	ne
 800ab8c:	2001      	movne	r0, #1
 800ab8e:	e72b      	b.n	800a9e8 <__ieee754_pow+0x220>
 800ab90:	60000000 	.word	0x60000000
 800ab94:	3ff71547 	.word	0x3ff71547
 800ab98:	f85ddf44 	.word	0xf85ddf44
 800ab9c:	3e54ae0b 	.word	0x3e54ae0b
 800aba0:	55555555 	.word	0x55555555
 800aba4:	3fd55555 	.word	0x3fd55555
 800aba8:	652b82fe 	.word	0x652b82fe
 800abac:	3ff71547 	.word	0x3ff71547
 800abb0:	00000000 	.word	0x00000000
 800abb4:	bff00000 	.word	0xbff00000
 800abb8:	3ff00000 	.word	0x3ff00000
 800abbc:	3fd00000 	.word	0x3fd00000
 800abc0:	3fe00000 	.word	0x3fe00000
 800abc4:	408fffff 	.word	0x408fffff
 800abc8:	4bd5      	ldr	r3, [pc, #852]	; (800af20 <__ieee754_pow+0x758>)
 800abca:	402b      	ands	r3, r5
 800abcc:	2200      	movs	r2, #0
 800abce:	b92b      	cbnz	r3, 800abdc <__ieee754_pow+0x414>
 800abd0:	4bd4      	ldr	r3, [pc, #848]	; (800af24 <__ieee754_pow+0x75c>)
 800abd2:	f7f5 fd29 	bl	8000628 <__aeabi_dmul>
 800abd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800abda:	460c      	mov	r4, r1
 800abdc:	1523      	asrs	r3, r4, #20
 800abde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800abe2:	4413      	add	r3, r2
 800abe4:	9305      	str	r3, [sp, #20]
 800abe6:	4bd0      	ldr	r3, [pc, #832]	; (800af28 <__ieee754_pow+0x760>)
 800abe8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800abec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800abf0:	429c      	cmp	r4, r3
 800abf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800abf6:	dd08      	ble.n	800ac0a <__ieee754_pow+0x442>
 800abf8:	4bcc      	ldr	r3, [pc, #816]	; (800af2c <__ieee754_pow+0x764>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	f340 8162 	ble.w	800aec4 <__ieee754_pow+0x6fc>
 800ac00:	9b05      	ldr	r3, [sp, #20]
 800ac02:	3301      	adds	r3, #1
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ac0a:	2400      	movs	r4, #0
 800ac0c:	00e3      	lsls	r3, r4, #3
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	4bc7      	ldr	r3, [pc, #796]	; (800af30 <__ieee754_pow+0x768>)
 800ac12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac16:	ed93 7b00 	vldr	d7, [r3]
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	ec53 2b17 	vmov	r2, r3, d7
 800ac20:	eeb0 9a47 	vmov.f32	s18, s14
 800ac24:	eef0 9a67 	vmov.f32	s19, s15
 800ac28:	4682      	mov	sl, r0
 800ac2a:	f7f5 fb45 	bl	80002b8 <__aeabi_dsub>
 800ac2e:	4652      	mov	r2, sl
 800ac30:	4606      	mov	r6, r0
 800ac32:	460f      	mov	r7, r1
 800ac34:	462b      	mov	r3, r5
 800ac36:	ec51 0b19 	vmov	r0, r1, d9
 800ac3a:	f7f5 fb3f 	bl	80002bc <__adddf3>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	2000      	movs	r0, #0
 800ac44:	49bb      	ldr	r1, [pc, #748]	; (800af34 <__ieee754_pow+0x76c>)
 800ac46:	f7f5 fe19 	bl	800087c <__aeabi_ddiv>
 800ac4a:	ec41 0b1a 	vmov	d10, r0, r1
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 fce7 	bl	8000628 <__aeabi_dmul>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac66:	46ab      	mov	fp, r5
 800ac68:	106d      	asrs	r5, r5, #1
 800ac6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ac6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ac72:	ec41 0b18 	vmov	d8, r0, r1
 800ac76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	4649      	mov	r1, r9
 800ac80:	4614      	mov	r4, r2
 800ac82:	461d      	mov	r5, r3
 800ac84:	f7f5 fcd0 	bl	8000628 <__aeabi_dmul>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 fb12 	bl	80002b8 <__aeabi_dsub>
 800ac94:	ec53 2b19 	vmov	r2, r3, d9
 800ac98:	4606      	mov	r6, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7f5 fb0a 	bl	80002b8 <__aeabi_dsub>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4650      	mov	r0, sl
 800acaa:	4659      	mov	r1, fp
 800acac:	f7f5 fb04 	bl	80002b8 <__aeabi_dsub>
 800acb0:	4642      	mov	r2, r8
 800acb2:	464b      	mov	r3, r9
 800acb4:	f7f5 fcb8 	bl	8000628 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fafa 	bl	80002b8 <__aeabi_dsub>
 800acc4:	ec53 2b1a 	vmov	r2, r3, d10
 800acc8:	f7f5 fcae 	bl	8000628 <__aeabi_dmul>
 800accc:	ec53 2b18 	vmov	r2, r3, d8
 800acd0:	ec41 0b19 	vmov	d9, r0, r1
 800acd4:	ec51 0b18 	vmov	r0, r1, d8
 800acd8:	f7f5 fca6 	bl	8000628 <__aeabi_dmul>
 800acdc:	a37c      	add	r3, pc, #496	; (adr r3, 800aed0 <__ieee754_pow+0x708>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	4604      	mov	r4, r0
 800ace4:	460d      	mov	r5, r1
 800ace6:	f7f5 fc9f 	bl	8000628 <__aeabi_dmul>
 800acea:	a37b      	add	r3, pc, #492	; (adr r3, 800aed8 <__ieee754_pow+0x710>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	f7f5 fae4 	bl	80002bc <__adddf3>
 800acf4:	4622      	mov	r2, r4
 800acf6:	462b      	mov	r3, r5
 800acf8:	f7f5 fc96 	bl	8000628 <__aeabi_dmul>
 800acfc:	a378      	add	r3, pc, #480	; (adr r3, 800aee0 <__ieee754_pow+0x718>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fadb 	bl	80002bc <__adddf3>
 800ad06:	4622      	mov	r2, r4
 800ad08:	462b      	mov	r3, r5
 800ad0a:	f7f5 fc8d 	bl	8000628 <__aeabi_dmul>
 800ad0e:	a376      	add	r3, pc, #472	; (adr r3, 800aee8 <__ieee754_pow+0x720>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fad2 	bl	80002bc <__adddf3>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	462b      	mov	r3, r5
 800ad1c:	f7f5 fc84 	bl	8000628 <__aeabi_dmul>
 800ad20:	a373      	add	r3, pc, #460	; (adr r3, 800aef0 <__ieee754_pow+0x728>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 fac9 	bl	80002bc <__adddf3>
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	f7f5 fc7b 	bl	8000628 <__aeabi_dmul>
 800ad32:	a371      	add	r3, pc, #452	; (adr r3, 800aef8 <__ieee754_pow+0x730>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fac0 	bl	80002bc <__adddf3>
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	462b      	mov	r3, r5
 800ad44:	4620      	mov	r0, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	f7f5 fc6e 	bl	8000628 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fc68 	bl	8000628 <__aeabi_dmul>
 800ad58:	4642      	mov	r2, r8
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	464b      	mov	r3, r9
 800ad60:	ec51 0b18 	vmov	r0, r1, d8
 800ad64:	f7f5 faaa 	bl	80002bc <__adddf3>
 800ad68:	ec53 2b19 	vmov	r2, r3, d9
 800ad6c:	f7f5 fc5c 	bl	8000628 <__aeabi_dmul>
 800ad70:	4622      	mov	r2, r4
 800ad72:	462b      	mov	r3, r5
 800ad74:	f7f5 faa2 	bl	80002bc <__adddf3>
 800ad78:	4642      	mov	r2, r8
 800ad7a:	4682      	mov	sl, r0
 800ad7c:	468b      	mov	fp, r1
 800ad7e:	464b      	mov	r3, r9
 800ad80:	4640      	mov	r0, r8
 800ad82:	4649      	mov	r1, r9
 800ad84:	f7f5 fc50 	bl	8000628 <__aeabi_dmul>
 800ad88:	4b6b      	ldr	r3, [pc, #428]	; (800af38 <__ieee754_pow+0x770>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	f7f5 fa94 	bl	80002bc <__adddf3>
 800ad94:	4652      	mov	r2, sl
 800ad96:	465b      	mov	r3, fp
 800ad98:	f7f5 fa90 	bl	80002bc <__adddf3>
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	4604      	mov	r4, r0
 800ada0:	460d      	mov	r5, r1
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4640      	mov	r0, r8
 800ada8:	4649      	mov	r1, r9
 800adaa:	f7f5 fc3d 	bl	8000628 <__aeabi_dmul>
 800adae:	4b62      	ldr	r3, [pc, #392]	; (800af38 <__ieee754_pow+0x770>)
 800adb0:	4680      	mov	r8, r0
 800adb2:	4689      	mov	r9, r1
 800adb4:	2200      	movs	r2, #0
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fa7d 	bl	80002b8 <__aeabi_dsub>
 800adbe:	4632      	mov	r2, r6
 800adc0:	463b      	mov	r3, r7
 800adc2:	f7f5 fa79 	bl	80002b8 <__aeabi_dsub>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4650      	mov	r0, sl
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 fa73 	bl	80002b8 <__aeabi_dsub>
 800add2:	ec53 2b18 	vmov	r2, r3, d8
 800add6:	f7f5 fc27 	bl	8000628 <__aeabi_dmul>
 800adda:	4622      	mov	r2, r4
 800addc:	4606      	mov	r6, r0
 800adde:	460f      	mov	r7, r1
 800ade0:	462b      	mov	r3, r5
 800ade2:	ec51 0b19 	vmov	r0, r1, d9
 800ade6:	f7f5 fc1f 	bl	8000628 <__aeabi_dmul>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fa63 	bl	80002bc <__adddf3>
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fa5b 	bl	80002bc <__adddf3>
 800ae06:	a33e      	add	r3, pc, #248	; (adr r3, 800af00 <__ieee754_pow+0x738>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	460d      	mov	r5, r1
 800ae12:	f7f5 fc09 	bl	8000628 <__aeabi_dmul>
 800ae16:	4642      	mov	r2, r8
 800ae18:	ec41 0b18 	vmov	d8, r0, r1
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fa49 	bl	80002b8 <__aeabi_dsub>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	4639      	mov	r1, r7
 800ae2e:	f7f5 fa43 	bl	80002b8 <__aeabi_dsub>
 800ae32:	a335      	add	r3, pc, #212	; (adr r3, 800af08 <__ieee754_pow+0x740>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fbf6 	bl	8000628 <__aeabi_dmul>
 800ae3c:	a334      	add	r3, pc, #208	; (adr r3, 800af10 <__ieee754_pow+0x748>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fbed 	bl	8000628 <__aeabi_dmul>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fa31 	bl	80002bc <__adddf3>
 800ae5a:	9a07      	ldr	r2, [sp, #28]
 800ae5c:	4b37      	ldr	r3, [pc, #220]	; (800af3c <__ieee754_pow+0x774>)
 800ae5e:	4413      	add	r3, r2
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f7f5 fa2a 	bl	80002bc <__adddf3>
 800ae68:	4682      	mov	sl, r0
 800ae6a:	9805      	ldr	r0, [sp, #20]
 800ae6c:	468b      	mov	fp, r1
 800ae6e:	f7f5 fb71 	bl	8000554 <__aeabi_i2d>
 800ae72:	9a07      	ldr	r2, [sp, #28]
 800ae74:	4b32      	ldr	r3, [pc, #200]	; (800af40 <__ieee754_pow+0x778>)
 800ae76:	4413      	add	r3, r2
 800ae78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	4652      	mov	r2, sl
 800ae82:	465b      	mov	r3, fp
 800ae84:	ec51 0b18 	vmov	r0, r1, d8
 800ae88:	f7f5 fa18 	bl	80002bc <__adddf3>
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	464b      	mov	r3, r9
 800ae90:	f7f5 fa14 	bl	80002bc <__adddf3>
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	f7f5 fa10 	bl	80002bc <__adddf3>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	4632      	mov	r2, r6
 800aea0:	463b      	mov	r3, r7
 800aea2:	4604      	mov	r4, r0
 800aea4:	460d      	mov	r5, r1
 800aea6:	f7f5 fa07 	bl	80002b8 <__aeabi_dsub>
 800aeaa:	4642      	mov	r2, r8
 800aeac:	464b      	mov	r3, r9
 800aeae:	f7f5 fa03 	bl	80002b8 <__aeabi_dsub>
 800aeb2:	ec53 2b18 	vmov	r2, r3, d8
 800aeb6:	f7f5 f9ff 	bl	80002b8 <__aeabi_dsub>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4650      	mov	r0, sl
 800aec0:	4659      	mov	r1, fp
 800aec2:	e610      	b.n	800aae6 <__ieee754_pow+0x31e>
 800aec4:	2401      	movs	r4, #1
 800aec6:	e6a1      	b.n	800ac0c <__ieee754_pow+0x444>
 800aec8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800af18 <__ieee754_pow+0x750>
 800aecc:	e617      	b.n	800aafe <__ieee754_pow+0x336>
 800aece:	bf00      	nop
 800aed0:	4a454eef 	.word	0x4a454eef
 800aed4:	3fca7e28 	.word	0x3fca7e28
 800aed8:	93c9db65 	.word	0x93c9db65
 800aedc:	3fcd864a 	.word	0x3fcd864a
 800aee0:	a91d4101 	.word	0xa91d4101
 800aee4:	3fd17460 	.word	0x3fd17460
 800aee8:	518f264d 	.word	0x518f264d
 800aeec:	3fd55555 	.word	0x3fd55555
 800aef0:	db6fabff 	.word	0xdb6fabff
 800aef4:	3fdb6db6 	.word	0x3fdb6db6
 800aef8:	33333303 	.word	0x33333303
 800aefc:	3fe33333 	.word	0x3fe33333
 800af00:	e0000000 	.word	0xe0000000
 800af04:	3feec709 	.word	0x3feec709
 800af08:	dc3a03fd 	.word	0xdc3a03fd
 800af0c:	3feec709 	.word	0x3feec709
 800af10:	145b01f5 	.word	0x145b01f5
 800af14:	be3e2fe0 	.word	0xbe3e2fe0
 800af18:	00000000 	.word	0x00000000
 800af1c:	3ff00000 	.word	0x3ff00000
 800af20:	7ff00000 	.word	0x7ff00000
 800af24:	43400000 	.word	0x43400000
 800af28:	0003988e 	.word	0x0003988e
 800af2c:	000bb679 	.word	0x000bb679
 800af30:	0800cdd0 	.word	0x0800cdd0
 800af34:	3ff00000 	.word	0x3ff00000
 800af38:	40080000 	.word	0x40080000
 800af3c:	0800cdf0 	.word	0x0800cdf0
 800af40:	0800cde0 	.word	0x0800cde0
 800af44:	a3b5      	add	r3, pc, #724	; (adr r3, 800b21c <__ieee754_pow+0xa54>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	4640      	mov	r0, r8
 800af4c:	4649      	mov	r1, r9
 800af4e:	f7f5 f9b5 	bl	80002bc <__adddf3>
 800af52:	4622      	mov	r2, r4
 800af54:	ec41 0b1a 	vmov	d10, r0, r1
 800af58:	462b      	mov	r3, r5
 800af5a:	4630      	mov	r0, r6
 800af5c:	4639      	mov	r1, r7
 800af5e:	f7f5 f9ab 	bl	80002b8 <__aeabi_dsub>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	ec51 0b1a 	vmov	r0, r1, d10
 800af6a:	f7f5 fded 	bl	8000b48 <__aeabi_dcmpgt>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f47f ae04 	bne.w	800ab7c <__ieee754_pow+0x3b4>
 800af74:	4aa4      	ldr	r2, [pc, #656]	; (800b208 <__ieee754_pow+0xa40>)
 800af76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af7a:	4293      	cmp	r3, r2
 800af7c:	f340 8108 	ble.w	800b190 <__ieee754_pow+0x9c8>
 800af80:	151b      	asrs	r3, r3, #20
 800af82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800af86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800af8a:	fa4a f303 	asr.w	r3, sl, r3
 800af8e:	445b      	add	r3, fp
 800af90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800af94:	4e9d      	ldr	r6, [pc, #628]	; (800b20c <__ieee754_pow+0xa44>)
 800af96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800af9a:	4116      	asrs	r6, r2
 800af9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800afa0:	2000      	movs	r0, #0
 800afa2:	ea23 0106 	bic.w	r1, r3, r6
 800afa6:	f1c2 0214 	rsb	r2, r2, #20
 800afaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800afae:	fa4a fa02 	asr.w	sl, sl, r2
 800afb2:	f1bb 0f00 	cmp.w	fp, #0
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4620      	mov	r0, r4
 800afbc:	4629      	mov	r1, r5
 800afbe:	bfb8      	it	lt
 800afc0:	f1ca 0a00 	rsblt	sl, sl, #0
 800afc4:	f7f5 f978 	bl	80002b8 <__aeabi_dsub>
 800afc8:	ec41 0b19 	vmov	d9, r0, r1
 800afcc:	4642      	mov	r2, r8
 800afce:	464b      	mov	r3, r9
 800afd0:	ec51 0b19 	vmov	r0, r1, d9
 800afd4:	f7f5 f972 	bl	80002bc <__adddf3>
 800afd8:	a37b      	add	r3, pc, #492	; (adr r3, 800b1c8 <__ieee754_pow+0xa00>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	2000      	movs	r0, #0
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	f7f5 fb20 	bl	8000628 <__aeabi_dmul>
 800afe8:	ec53 2b19 	vmov	r2, r3, d9
 800afec:	4606      	mov	r6, r0
 800afee:	460f      	mov	r7, r1
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f7f5 f960 	bl	80002b8 <__aeabi_dsub>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 f95a 	bl	80002b8 <__aeabi_dsub>
 800b004:	a372      	add	r3, pc, #456	; (adr r3, 800b1d0 <__ieee754_pow+0xa08>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 fb0d 	bl	8000628 <__aeabi_dmul>
 800b00e:	a372      	add	r3, pc, #456	; (adr r3, 800b1d8 <__ieee754_pow+0xa10>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4680      	mov	r8, r0
 800b016:	4689      	mov	r9, r1
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 fb04 	bl	8000628 <__aeabi_dmul>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4640      	mov	r0, r8
 800b026:	4649      	mov	r1, r9
 800b028:	f7f5 f948 	bl	80002bc <__adddf3>
 800b02c:	4604      	mov	r4, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 f940 	bl	80002bc <__adddf3>
 800b03c:	4632      	mov	r2, r6
 800b03e:	463b      	mov	r3, r7
 800b040:	4680      	mov	r8, r0
 800b042:	4689      	mov	r9, r1
 800b044:	f7f5 f938 	bl	80002b8 <__aeabi_dsub>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 f932 	bl	80002b8 <__aeabi_dsub>
 800b054:	4642      	mov	r2, r8
 800b056:	4606      	mov	r6, r0
 800b058:	460f      	mov	r7, r1
 800b05a:	464b      	mov	r3, r9
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 fae2 	bl	8000628 <__aeabi_dmul>
 800b064:	a35e      	add	r3, pc, #376	; (adr r3, 800b1e0 <__ieee754_pow+0xa18>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	f7f5 fadb 	bl	8000628 <__aeabi_dmul>
 800b072:	a35d      	add	r3, pc, #372	; (adr r3, 800b1e8 <__ieee754_pow+0xa20>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 f91e 	bl	80002b8 <__aeabi_dsub>
 800b07c:	4622      	mov	r2, r4
 800b07e:	462b      	mov	r3, r5
 800b080:	f7f5 fad2 	bl	8000628 <__aeabi_dmul>
 800b084:	a35a      	add	r3, pc, #360	; (adr r3, 800b1f0 <__ieee754_pow+0xa28>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 f917 	bl	80002bc <__adddf3>
 800b08e:	4622      	mov	r2, r4
 800b090:	462b      	mov	r3, r5
 800b092:	f7f5 fac9 	bl	8000628 <__aeabi_dmul>
 800b096:	a358      	add	r3, pc, #352	; (adr r3, 800b1f8 <__ieee754_pow+0xa30>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f7f5 f90c 	bl	80002b8 <__aeabi_dsub>
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	f7f5 fac0 	bl	8000628 <__aeabi_dmul>
 800b0a8:	a355      	add	r3, pc, #340	; (adr r3, 800b200 <__ieee754_pow+0xa38>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f905 	bl	80002bc <__adddf3>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	f7f5 fab7 	bl	8000628 <__aeabi_dmul>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4640      	mov	r0, r8
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	f7f5 f8f9 	bl	80002b8 <__aeabi_dsub>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	f7f5 faa9 	bl	8000628 <__aeabi_dmul>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	ec41 0b19 	vmov	d9, r0, r1
 800b0dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f7f5 f8e8 	bl	80002b8 <__aeabi_dsub>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	ec51 0b19 	vmov	r0, r1, d9
 800b0f0:	f7f5 fbc4 	bl	800087c <__aeabi_ddiv>
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fa92 	bl	8000628 <__aeabi_dmul>
 800b104:	4632      	mov	r2, r6
 800b106:	463b      	mov	r3, r7
 800b108:	f7f5 f8d8 	bl	80002bc <__adddf3>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 f8d0 	bl	80002b8 <__aeabi_dsub>
 800b118:	4642      	mov	r2, r8
 800b11a:	464b      	mov	r3, r9
 800b11c:	f7f5 f8cc 	bl	80002b8 <__aeabi_dsub>
 800b120:	460b      	mov	r3, r1
 800b122:	4602      	mov	r2, r0
 800b124:	493a      	ldr	r1, [pc, #232]	; (800b210 <__ieee754_pow+0xa48>)
 800b126:	2000      	movs	r0, #0
 800b128:	f7f5 f8c6 	bl	80002b8 <__aeabi_dsub>
 800b12c:	ec41 0b10 	vmov	d0, r0, r1
 800b130:	ee10 3a90 	vmov	r3, s1
 800b134:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b13c:	da2b      	bge.n	800b196 <__ieee754_pow+0x9ce>
 800b13e:	4650      	mov	r0, sl
 800b140:	f001 fa6e 	bl	800c620 <scalbn>
 800b144:	ec51 0b10 	vmov	r0, r1, d0
 800b148:	ec53 2b18 	vmov	r2, r3, d8
 800b14c:	f7ff bbed 	b.w	800a92a <__ieee754_pow+0x162>
 800b150:	4b30      	ldr	r3, [pc, #192]	; (800b214 <__ieee754_pow+0xa4c>)
 800b152:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b156:	429e      	cmp	r6, r3
 800b158:	f77f af0c 	ble.w	800af74 <__ieee754_pow+0x7ac>
 800b15c:	4b2e      	ldr	r3, [pc, #184]	; (800b218 <__ieee754_pow+0xa50>)
 800b15e:	440b      	add	r3, r1
 800b160:	4303      	orrs	r3, r0
 800b162:	d009      	beq.n	800b178 <__ieee754_pow+0x9b0>
 800b164:	ec51 0b18 	vmov	r0, r1, d8
 800b168:	2200      	movs	r2, #0
 800b16a:	2300      	movs	r3, #0
 800b16c:	f7f5 fcce 	bl	8000b0c <__aeabi_dcmplt>
 800b170:	3800      	subs	r0, #0
 800b172:	bf18      	it	ne
 800b174:	2001      	movne	r0, #1
 800b176:	e447      	b.n	800aa08 <__ieee754_pow+0x240>
 800b178:	4622      	mov	r2, r4
 800b17a:	462b      	mov	r3, r5
 800b17c:	f7f5 f89c 	bl	80002b8 <__aeabi_dsub>
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	f7f5 fcd6 	bl	8000b34 <__aeabi_dcmpge>
 800b188:	2800      	cmp	r0, #0
 800b18a:	f43f aef3 	beq.w	800af74 <__ieee754_pow+0x7ac>
 800b18e:	e7e9      	b.n	800b164 <__ieee754_pow+0x99c>
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	e71a      	b.n	800afcc <__ieee754_pow+0x804>
 800b196:	ec51 0b10 	vmov	r0, r1, d0
 800b19a:	4619      	mov	r1, r3
 800b19c:	e7d4      	b.n	800b148 <__ieee754_pow+0x980>
 800b19e:	491c      	ldr	r1, [pc, #112]	; (800b210 <__ieee754_pow+0xa48>)
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f7ff bb30 	b.w	800a806 <__ieee754_pow+0x3e>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	f7ff bb2c 	b.w	800a806 <__ieee754_pow+0x3e>
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7ff bb28 	b.w	800a806 <__ieee754_pow+0x3e>
 800b1b6:	9204      	str	r2, [sp, #16]
 800b1b8:	f7ff bb7a 	b.w	800a8b0 <__ieee754_pow+0xe8>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f7ff bb64 	b.w	800a88a <__ieee754_pow+0xc2>
 800b1c2:	bf00      	nop
 800b1c4:	f3af 8000 	nop.w
 800b1c8:	00000000 	.word	0x00000000
 800b1cc:	3fe62e43 	.word	0x3fe62e43
 800b1d0:	fefa39ef 	.word	0xfefa39ef
 800b1d4:	3fe62e42 	.word	0x3fe62e42
 800b1d8:	0ca86c39 	.word	0x0ca86c39
 800b1dc:	be205c61 	.word	0xbe205c61
 800b1e0:	72bea4d0 	.word	0x72bea4d0
 800b1e4:	3e663769 	.word	0x3e663769
 800b1e8:	c5d26bf1 	.word	0xc5d26bf1
 800b1ec:	3ebbbd41 	.word	0x3ebbbd41
 800b1f0:	af25de2c 	.word	0xaf25de2c
 800b1f4:	3f11566a 	.word	0x3f11566a
 800b1f8:	16bebd93 	.word	0x16bebd93
 800b1fc:	3f66c16c 	.word	0x3f66c16c
 800b200:	5555553e 	.word	0x5555553e
 800b204:	3fc55555 	.word	0x3fc55555
 800b208:	3fe00000 	.word	0x3fe00000
 800b20c:	000fffff 	.word	0x000fffff
 800b210:	3ff00000 	.word	0x3ff00000
 800b214:	4090cbff 	.word	0x4090cbff
 800b218:	3f6f3400 	.word	0x3f6f3400
 800b21c:	652b82fe 	.word	0x652b82fe
 800b220:	3c971547 	.word	0x3c971547
 800b224:	00000000 	.word	0x00000000

0800b228 <__ieee754_rem_pio2>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	ed2d 8b02 	vpush	{d8}
 800b230:	ec55 4b10 	vmov	r4, r5, d0
 800b234:	4bca      	ldr	r3, [pc, #808]	; (800b560 <__ieee754_rem_pio2+0x338>)
 800b236:	b08b      	sub	sp, #44	; 0x2c
 800b238:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b23c:	4598      	cmp	r8, r3
 800b23e:	4682      	mov	sl, r0
 800b240:	9502      	str	r5, [sp, #8]
 800b242:	dc08      	bgt.n	800b256 <__ieee754_rem_pio2+0x2e>
 800b244:	2200      	movs	r2, #0
 800b246:	2300      	movs	r3, #0
 800b248:	ed80 0b00 	vstr	d0, [r0]
 800b24c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b250:	f04f 0b00 	mov.w	fp, #0
 800b254:	e028      	b.n	800b2a8 <__ieee754_rem_pio2+0x80>
 800b256:	4bc3      	ldr	r3, [pc, #780]	; (800b564 <__ieee754_rem_pio2+0x33c>)
 800b258:	4598      	cmp	r8, r3
 800b25a:	dc78      	bgt.n	800b34e <__ieee754_rem_pio2+0x126>
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	4ec2      	ldr	r6, [pc, #776]	; (800b568 <__ieee754_rem_pio2+0x340>)
 800b260:	2b00      	cmp	r3, #0
 800b262:	ee10 0a10 	vmov	r0, s0
 800b266:	a3b0      	add	r3, pc, #704	; (adr r3, 800b528 <__ieee754_rem_pio2+0x300>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	4629      	mov	r1, r5
 800b26e:	dd39      	ble.n	800b2e4 <__ieee754_rem_pio2+0xbc>
 800b270:	f7f5 f822 	bl	80002b8 <__aeabi_dsub>
 800b274:	45b0      	cmp	r8, r6
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	d01b      	beq.n	800b2b4 <__ieee754_rem_pio2+0x8c>
 800b27c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b530 <__ieee754_rem_pio2+0x308>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f7f5 f819 	bl	80002b8 <__aeabi_dsub>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	e9ca 2300 	strd	r2, r3, [sl]
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 f811 	bl	80002b8 <__aeabi_dsub>
 800b296:	a3a6      	add	r3, pc, #664	; (adr r3, 800b530 <__ieee754_rem_pio2+0x308>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f5 f80c 	bl	80002b8 <__aeabi_dsub>
 800b2a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2a4:	f04f 0b01 	mov.w	fp, #1
 800b2a8:	4658      	mov	r0, fp
 800b2aa:	b00b      	add	sp, #44	; 0x2c
 800b2ac:	ecbd 8b02 	vpop	{d8}
 800b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b538 <__ieee754_rem_pio2+0x310>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f4 fffd 	bl	80002b8 <__aeabi_dsub>
 800b2be:	a3a0      	add	r3, pc, #640	; (adr r3, 800b540 <__ieee754_rem_pio2+0x318>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	460d      	mov	r5, r1
 800b2c8:	f7f4 fff6 	bl	80002b8 <__aeabi_dsub>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	e9ca 2300 	strd	r2, r3, [sl]
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f4 ffee 	bl	80002b8 <__aeabi_dsub>
 800b2dc:	a398      	add	r3, pc, #608	; (adr r3, 800b540 <__ieee754_rem_pio2+0x318>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	e7db      	b.n	800b29c <__ieee754_rem_pio2+0x74>
 800b2e4:	f7f4 ffea 	bl	80002bc <__adddf3>
 800b2e8:	45b0      	cmp	r8, r6
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	d016      	beq.n	800b31e <__ieee754_rem_pio2+0xf6>
 800b2f0:	a38f      	add	r3, pc, #572	; (adr r3, 800b530 <__ieee754_rem_pio2+0x308>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f4 ffe1 	bl	80002bc <__adddf3>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	e9ca 2300 	strd	r2, r3, [sl]
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f4 ffd7 	bl	80002b8 <__aeabi_dsub>
 800b30a:	a389      	add	r3, pc, #548	; (adr r3, 800b530 <__ieee754_rem_pio2+0x308>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f4 ffd4 	bl	80002bc <__adddf3>
 800b314:	f04f 3bff 	mov.w	fp, #4294967295
 800b318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b31c:	e7c4      	b.n	800b2a8 <__ieee754_rem_pio2+0x80>
 800b31e:	a386      	add	r3, pc, #536	; (adr r3, 800b538 <__ieee754_rem_pio2+0x310>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ffca 	bl	80002bc <__adddf3>
 800b328:	a385      	add	r3, pc, #532	; (adr r3, 800b540 <__ieee754_rem_pio2+0x318>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	f7f4 ffc3 	bl	80002bc <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	e9ca 2300 	strd	r2, r3, [sl]
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f4 ffb9 	bl	80002b8 <__aeabi_dsub>
 800b346:	a37e      	add	r3, pc, #504	; (adr r3, 800b540 <__ieee754_rem_pio2+0x318>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	e7e0      	b.n	800b310 <__ieee754_rem_pio2+0xe8>
 800b34e:	4b87      	ldr	r3, [pc, #540]	; (800b56c <__ieee754_rem_pio2+0x344>)
 800b350:	4598      	cmp	r8, r3
 800b352:	f300 80d9 	bgt.w	800b508 <__ieee754_rem_pio2+0x2e0>
 800b356:	f001 f8cf 	bl	800c4f8 <fabs>
 800b35a:	ec55 4b10 	vmov	r4, r5, d0
 800b35e:	ee10 0a10 	vmov	r0, s0
 800b362:	a379      	add	r3, pc, #484	; (adr r3, 800b548 <__ieee754_rem_pio2+0x320>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 f95d 	bl	8000628 <__aeabi_dmul>
 800b36e:	4b80      	ldr	r3, [pc, #512]	; (800b570 <__ieee754_rem_pio2+0x348>)
 800b370:	2200      	movs	r2, #0
 800b372:	f7f4 ffa3 	bl	80002bc <__adddf3>
 800b376:	f7f5 fc07 	bl	8000b88 <__aeabi_d2iz>
 800b37a:	4683      	mov	fp, r0
 800b37c:	f7f5 f8ea 	bl	8000554 <__aeabi_i2d>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	ec43 2b18 	vmov	d8, r2, r3
 800b388:	a367      	add	r3, pc, #412	; (adr r3, 800b528 <__ieee754_rem_pio2+0x300>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f5 f94b 	bl	8000628 <__aeabi_dmul>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f4 ff8d 	bl	80002b8 <__aeabi_dsub>
 800b39e:	a364      	add	r3, pc, #400	; (adr r3, 800b530 <__ieee754_rem_pio2+0x308>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	ec51 0b18 	vmov	r0, r1, d8
 800b3ac:	f7f5 f93c 	bl	8000628 <__aeabi_dmul>
 800b3b0:	f1bb 0f1f 	cmp.w	fp, #31
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	dc0d      	bgt.n	800b3d6 <__ieee754_rem_pio2+0x1ae>
 800b3ba:	4b6e      	ldr	r3, [pc, #440]	; (800b574 <__ieee754_rem_pio2+0x34c>)
 800b3bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c4:	4543      	cmp	r3, r8
 800b3c6:	d006      	beq.n	800b3d6 <__ieee754_rem_pio2+0x1ae>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f4 ff72 	bl	80002b8 <__aeabi_dsub>
 800b3d4:	e00f      	b.n	800b3f6 <__ieee754_rem_pio2+0x1ce>
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	4622      	mov	r2, r4
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f4 ff6b 	bl	80002b8 <__aeabi_dsub>
 800b3e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b3e6:	9303      	str	r3, [sp, #12]
 800b3e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b3f0:	f1b8 0f10 	cmp.w	r8, #16
 800b3f4:	dc02      	bgt.n	800b3fc <__ieee754_rem_pio2+0x1d4>
 800b3f6:	e9ca 0100 	strd	r0, r1, [sl]
 800b3fa:	e039      	b.n	800b470 <__ieee754_rem_pio2+0x248>
 800b3fc:	a34e      	add	r3, pc, #312	; (adr r3, 800b538 <__ieee754_rem_pio2+0x310>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	ec51 0b18 	vmov	r0, r1, d8
 800b406:	f7f5 f90f 	bl	8000628 <__aeabi_dmul>
 800b40a:	4604      	mov	r4, r0
 800b40c:	460d      	mov	r5, r1
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f4 ff4f 	bl	80002b8 <__aeabi_dsub>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4680      	mov	r8, r0
 800b420:	4689      	mov	r9, r1
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f4 ff47 	bl	80002b8 <__aeabi_dsub>
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f4 ff43 	bl	80002b8 <__aeabi_dsub>
 800b432:	a343      	add	r3, pc, #268	; (adr r3, 800b540 <__ieee754_rem_pio2+0x318>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	ec51 0b18 	vmov	r0, r1, d8
 800b440:	f7f5 f8f2 	bl	8000628 <__aeabi_dmul>
 800b444:	4622      	mov	r2, r4
 800b446:	462b      	mov	r3, r5
 800b448:	f7f4 ff36 	bl	80002b8 <__aeabi_dsub>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4604      	mov	r4, r0
 800b452:	460d      	mov	r5, r1
 800b454:	4640      	mov	r0, r8
 800b456:	4649      	mov	r1, r9
 800b458:	f7f4 ff2e 	bl	80002b8 <__aeabi_dsub>
 800b45c:	9a03      	ldr	r2, [sp, #12]
 800b45e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2b31      	cmp	r3, #49	; 0x31
 800b466:	dc24      	bgt.n	800b4b2 <__ieee754_rem_pio2+0x28a>
 800b468:	e9ca 0100 	strd	r0, r1, [sl]
 800b46c:	4646      	mov	r6, r8
 800b46e:	464f      	mov	r7, r9
 800b470:	e9da 8900 	ldrd	r8, r9, [sl]
 800b474:	4630      	mov	r0, r6
 800b476:	4642      	mov	r2, r8
 800b478:	464b      	mov	r3, r9
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f4 ff1c 	bl	80002b8 <__aeabi_dsub>
 800b480:	462b      	mov	r3, r5
 800b482:	4622      	mov	r2, r4
 800b484:	f7f4 ff18 	bl	80002b8 <__aeabi_dsub>
 800b488:	9b02      	ldr	r3, [sp, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b490:	f6bf af0a 	bge.w	800b2a8 <__ieee754_rem_pio2+0x80>
 800b494:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b498:	f8ca 3004 	str.w	r3, [sl, #4]
 800b49c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4a0:	f8ca 8000 	str.w	r8, [sl]
 800b4a4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b4a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b4ac:	f1cb 0b00 	rsb	fp, fp, #0
 800b4b0:	e6fa      	b.n	800b2a8 <__ieee754_rem_pio2+0x80>
 800b4b2:	a327      	add	r3, pc, #156	; (adr r3, 800b550 <__ieee754_rem_pio2+0x328>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	ec51 0b18 	vmov	r0, r1, d8
 800b4bc:	f7f5 f8b4 	bl	8000628 <__aeabi_dmul>
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	f7f4 fef4 	bl	80002b8 <__aeabi_dsub>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7f4 feec 	bl	80002b8 <__aeabi_dsub>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	f7f4 fee8 	bl	80002b8 <__aeabi_dsub>
 800b4e8:	a31b      	add	r3, pc, #108	; (adr r3, 800b558 <__ieee754_rem_pio2+0x330>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	460d      	mov	r5, r1
 800b4f2:	ec51 0b18 	vmov	r0, r1, d8
 800b4f6:	f7f5 f897 	bl	8000628 <__aeabi_dmul>
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f4 fedb 	bl	80002b8 <__aeabi_dsub>
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	e75f      	b.n	800b3c8 <__ieee754_rem_pio2+0x1a0>
 800b508:	4b1b      	ldr	r3, [pc, #108]	; (800b578 <__ieee754_rem_pio2+0x350>)
 800b50a:	4598      	cmp	r8, r3
 800b50c:	dd36      	ble.n	800b57c <__ieee754_rem_pio2+0x354>
 800b50e:	ee10 2a10 	vmov	r2, s0
 800b512:	462b      	mov	r3, r5
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f4 fece 	bl	80002b8 <__aeabi_dsub>
 800b51c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b520:	e9ca 0100 	strd	r0, r1, [sl]
 800b524:	e694      	b.n	800b250 <__ieee754_rem_pio2+0x28>
 800b526:	bf00      	nop
 800b528:	54400000 	.word	0x54400000
 800b52c:	3ff921fb 	.word	0x3ff921fb
 800b530:	1a626331 	.word	0x1a626331
 800b534:	3dd0b461 	.word	0x3dd0b461
 800b538:	1a600000 	.word	0x1a600000
 800b53c:	3dd0b461 	.word	0x3dd0b461
 800b540:	2e037073 	.word	0x2e037073
 800b544:	3ba3198a 	.word	0x3ba3198a
 800b548:	6dc9c883 	.word	0x6dc9c883
 800b54c:	3fe45f30 	.word	0x3fe45f30
 800b550:	2e000000 	.word	0x2e000000
 800b554:	3ba3198a 	.word	0x3ba3198a
 800b558:	252049c1 	.word	0x252049c1
 800b55c:	397b839a 	.word	0x397b839a
 800b560:	3fe921fb 	.word	0x3fe921fb
 800b564:	4002d97b 	.word	0x4002d97b
 800b568:	3ff921fb 	.word	0x3ff921fb
 800b56c:	413921fb 	.word	0x413921fb
 800b570:	3fe00000 	.word	0x3fe00000
 800b574:	0800ce00 	.word	0x0800ce00
 800b578:	7fefffff 	.word	0x7fefffff
 800b57c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b580:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b584:	ee10 0a10 	vmov	r0, s0
 800b588:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b58c:	ee10 6a10 	vmov	r6, s0
 800b590:	460f      	mov	r7, r1
 800b592:	f7f5 faf9 	bl	8000b88 <__aeabi_d2iz>
 800b596:	f7f4 ffdd 	bl	8000554 <__aeabi_i2d>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5a6:	f7f4 fe87 	bl	80002b8 <__aeabi_dsub>
 800b5aa:	4b23      	ldr	r3, [pc, #140]	; (800b638 <__ieee754_rem_pio2+0x410>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f7f5 f83b 	bl	8000628 <__aeabi_dmul>
 800b5b2:	460f      	mov	r7, r1
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	f7f5 fae7 	bl	8000b88 <__aeabi_d2iz>
 800b5ba:	f7f4 ffcb 	bl	8000554 <__aeabi_i2d>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5ca:	f7f4 fe75 	bl	80002b8 <__aeabi_dsub>
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <__ieee754_rem_pio2+0x410>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7f5 f829 	bl	8000628 <__aeabi_dmul>
 800b5d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5da:	ad04      	add	r5, sp, #16
 800b5dc:	f04f 0803 	mov.w	r8, #3
 800b5e0:	46a9      	mov	r9, r5
 800b5e2:	2600      	movs	r6, #0
 800b5e4:	2700      	movs	r7, #0
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	463b      	mov	r3, r7
 800b5ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b5ee:	46c3      	mov	fp, r8
 800b5f0:	3d08      	subs	r5, #8
 800b5f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5f6:	f7f5 fa7f 	bl	8000af8 <__aeabi_dcmpeq>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d1f3      	bne.n	800b5e6 <__ieee754_rem_pio2+0x3be>
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <__ieee754_rem_pio2+0x414>)
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	2302      	movs	r3, #2
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	4622      	mov	r2, r4
 800b608:	465b      	mov	r3, fp
 800b60a:	4651      	mov	r1, sl
 800b60c:	4648      	mov	r0, r9
 800b60e:	f000 f993 	bl	800b938 <__kernel_rem_pio2>
 800b612:	9b02      	ldr	r3, [sp, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	4683      	mov	fp, r0
 800b618:	f6bf ae46 	bge.w	800b2a8 <__ieee754_rem_pio2+0x80>
 800b61c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b620:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b624:	e9ca 2300 	strd	r2, r3, [sl]
 800b628:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b62c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b630:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b634:	e73a      	b.n	800b4ac <__ieee754_rem_pio2+0x284>
 800b636:	bf00      	nop
 800b638:	41700000 	.word	0x41700000
 800b63c:	0800ce80 	.word	0x0800ce80

0800b640 <__ieee754_sqrt>:
 800b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b644:	ec55 4b10 	vmov	r4, r5, d0
 800b648:	4e55      	ldr	r6, [pc, #340]	; (800b7a0 <__ieee754_sqrt+0x160>)
 800b64a:	43ae      	bics	r6, r5
 800b64c:	ee10 0a10 	vmov	r0, s0
 800b650:	ee10 3a10 	vmov	r3, s0
 800b654:	462a      	mov	r2, r5
 800b656:	4629      	mov	r1, r5
 800b658:	d110      	bne.n	800b67c <__ieee754_sqrt+0x3c>
 800b65a:	ee10 2a10 	vmov	r2, s0
 800b65e:	462b      	mov	r3, r5
 800b660:	f7f4 ffe2 	bl	8000628 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 fe26 	bl	80002bc <__adddf3>
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	ec45 4b10 	vmov	d0, r4, r5
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	2d00      	cmp	r5, #0
 800b67e:	dc10      	bgt.n	800b6a2 <__ieee754_sqrt+0x62>
 800b680:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b684:	4330      	orrs	r0, r6
 800b686:	d0f5      	beq.n	800b674 <__ieee754_sqrt+0x34>
 800b688:	b15d      	cbz	r5, 800b6a2 <__ieee754_sqrt+0x62>
 800b68a:	ee10 2a10 	vmov	r2, s0
 800b68e:	462b      	mov	r3, r5
 800b690:	ee10 0a10 	vmov	r0, s0
 800b694:	f7f4 fe10 	bl	80002b8 <__aeabi_dsub>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	f7f5 f8ee 	bl	800087c <__aeabi_ddiv>
 800b6a0:	e7e6      	b.n	800b670 <__ieee754_sqrt+0x30>
 800b6a2:	1512      	asrs	r2, r2, #20
 800b6a4:	d074      	beq.n	800b790 <__ieee754_sqrt+0x150>
 800b6a6:	07d4      	lsls	r4, r2, #31
 800b6a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b6ac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b6b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b6b4:	bf5e      	ittt	pl
 800b6b6:	0fda      	lsrpl	r2, r3, #31
 800b6b8:	005b      	lslpl	r3, r3, #1
 800b6ba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b6be:	2400      	movs	r4, #0
 800b6c0:	0fda      	lsrs	r2, r3, #31
 800b6c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b6c6:	107f      	asrs	r7, r7, #1
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	2516      	movs	r5, #22
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b6d2:	1886      	adds	r6, r0, r2
 800b6d4:	428e      	cmp	r6, r1
 800b6d6:	bfde      	ittt	le
 800b6d8:	1b89      	suble	r1, r1, r6
 800b6da:	18b0      	addle	r0, r6, r2
 800b6dc:	18a4      	addle	r4, r4, r2
 800b6de:	0049      	lsls	r1, r1, #1
 800b6e0:	3d01      	subs	r5, #1
 800b6e2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b6e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b6ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6ee:	d1f0      	bne.n	800b6d2 <__ieee754_sqrt+0x92>
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	f04f 0e20 	mov.w	lr, #32
 800b6f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b6fa:	4281      	cmp	r1, r0
 800b6fc:	eb06 0c05 	add.w	ip, r6, r5
 800b700:	dc02      	bgt.n	800b708 <__ieee754_sqrt+0xc8>
 800b702:	d113      	bne.n	800b72c <__ieee754_sqrt+0xec>
 800b704:	459c      	cmp	ip, r3
 800b706:	d811      	bhi.n	800b72c <__ieee754_sqrt+0xec>
 800b708:	f1bc 0f00 	cmp.w	ip, #0
 800b70c:	eb0c 0506 	add.w	r5, ip, r6
 800b710:	da43      	bge.n	800b79a <__ieee754_sqrt+0x15a>
 800b712:	2d00      	cmp	r5, #0
 800b714:	db41      	blt.n	800b79a <__ieee754_sqrt+0x15a>
 800b716:	f100 0801 	add.w	r8, r0, #1
 800b71a:	1a09      	subs	r1, r1, r0
 800b71c:	459c      	cmp	ip, r3
 800b71e:	bf88      	it	hi
 800b720:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b724:	eba3 030c 	sub.w	r3, r3, ip
 800b728:	4432      	add	r2, r6
 800b72a:	4640      	mov	r0, r8
 800b72c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b730:	f1be 0e01 	subs.w	lr, lr, #1
 800b734:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b738:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b73c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b740:	d1db      	bne.n	800b6fa <__ieee754_sqrt+0xba>
 800b742:	430b      	orrs	r3, r1
 800b744:	d006      	beq.n	800b754 <__ieee754_sqrt+0x114>
 800b746:	1c50      	adds	r0, r2, #1
 800b748:	bf13      	iteet	ne
 800b74a:	3201      	addne	r2, #1
 800b74c:	3401      	addeq	r4, #1
 800b74e:	4672      	moveq	r2, lr
 800b750:	f022 0201 	bicne.w	r2, r2, #1
 800b754:	1063      	asrs	r3, r4, #1
 800b756:	0852      	lsrs	r2, r2, #1
 800b758:	07e1      	lsls	r1, r4, #31
 800b75a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b75e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b762:	bf48      	it	mi
 800b764:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b768:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b76c:	4614      	mov	r4, r2
 800b76e:	e781      	b.n	800b674 <__ieee754_sqrt+0x34>
 800b770:	0ad9      	lsrs	r1, r3, #11
 800b772:	3815      	subs	r0, #21
 800b774:	055b      	lsls	r3, r3, #21
 800b776:	2900      	cmp	r1, #0
 800b778:	d0fa      	beq.n	800b770 <__ieee754_sqrt+0x130>
 800b77a:	02cd      	lsls	r5, r1, #11
 800b77c:	d50a      	bpl.n	800b794 <__ieee754_sqrt+0x154>
 800b77e:	f1c2 0420 	rsb	r4, r2, #32
 800b782:	fa23 f404 	lsr.w	r4, r3, r4
 800b786:	1e55      	subs	r5, r2, #1
 800b788:	4093      	lsls	r3, r2
 800b78a:	4321      	orrs	r1, r4
 800b78c:	1b42      	subs	r2, r0, r5
 800b78e:	e78a      	b.n	800b6a6 <__ieee754_sqrt+0x66>
 800b790:	4610      	mov	r0, r2
 800b792:	e7f0      	b.n	800b776 <__ieee754_sqrt+0x136>
 800b794:	0049      	lsls	r1, r1, #1
 800b796:	3201      	adds	r2, #1
 800b798:	e7ef      	b.n	800b77a <__ieee754_sqrt+0x13a>
 800b79a:	4680      	mov	r8, r0
 800b79c:	e7bd      	b.n	800b71a <__ieee754_sqrt+0xda>
 800b79e:	bf00      	nop
 800b7a0:	7ff00000 	.word	0x7ff00000
 800b7a4:	00000000 	.word	0x00000000

0800b7a8 <__kernel_cos>:
 800b7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	ec57 6b10 	vmov	r6, r7, d0
 800b7b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b7b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b7b8:	ed8d 1b00 	vstr	d1, [sp]
 800b7bc:	da07      	bge.n	800b7ce <__kernel_cos+0x26>
 800b7be:	ee10 0a10 	vmov	r0, s0
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f5 f9e0 	bl	8000b88 <__aeabi_d2iz>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	f000 8088 	beq.w	800b8de <__kernel_cos+0x136>
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	463b      	mov	r3, r7
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f4 ff27 	bl	8000628 <__aeabi_dmul>
 800b7da:	4b51      	ldr	r3, [pc, #324]	; (800b920 <__kernel_cos+0x178>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	460d      	mov	r5, r1
 800b7e2:	f7f4 ff21 	bl	8000628 <__aeabi_dmul>
 800b7e6:	a340      	add	r3, pc, #256	; (adr r3, 800b8e8 <__kernel_cos+0x140>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	f7f4 ff18 	bl	8000628 <__aeabi_dmul>
 800b7f8:	a33d      	add	r3, pc, #244	; (adr r3, 800b8f0 <__kernel_cos+0x148>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	f7f4 fd5d 	bl	80002bc <__adddf3>
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	f7f4 ff0f 	bl	8000628 <__aeabi_dmul>
 800b80a:	a33b      	add	r3, pc, #236	; (adr r3, 800b8f8 <__kernel_cos+0x150>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fd52 	bl	80002b8 <__aeabi_dsub>
 800b814:	4622      	mov	r2, r4
 800b816:	462b      	mov	r3, r5
 800b818:	f7f4 ff06 	bl	8000628 <__aeabi_dmul>
 800b81c:	a338      	add	r3, pc, #224	; (adr r3, 800b900 <__kernel_cos+0x158>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f4 fd4b 	bl	80002bc <__adddf3>
 800b826:	4622      	mov	r2, r4
 800b828:	462b      	mov	r3, r5
 800b82a:	f7f4 fefd 	bl	8000628 <__aeabi_dmul>
 800b82e:	a336      	add	r3, pc, #216	; (adr r3, 800b908 <__kernel_cos+0x160>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f7f4 fd40 	bl	80002b8 <__aeabi_dsub>
 800b838:	4622      	mov	r2, r4
 800b83a:	462b      	mov	r3, r5
 800b83c:	f7f4 fef4 	bl	8000628 <__aeabi_dmul>
 800b840:	a333      	add	r3, pc, #204	; (adr r3, 800b910 <__kernel_cos+0x168>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fd39 	bl	80002bc <__adddf3>
 800b84a:	4622      	mov	r2, r4
 800b84c:	462b      	mov	r3, r5
 800b84e:	f7f4 feeb 	bl	8000628 <__aeabi_dmul>
 800b852:	4622      	mov	r2, r4
 800b854:	462b      	mov	r3, r5
 800b856:	f7f4 fee7 	bl	8000628 <__aeabi_dmul>
 800b85a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85e:	4604      	mov	r4, r0
 800b860:	460d      	mov	r5, r1
 800b862:	4630      	mov	r0, r6
 800b864:	4639      	mov	r1, r7
 800b866:	f7f4 fedf 	bl	8000628 <__aeabi_dmul>
 800b86a:	460b      	mov	r3, r1
 800b86c:	4602      	mov	r2, r0
 800b86e:	4629      	mov	r1, r5
 800b870:	4620      	mov	r0, r4
 800b872:	f7f4 fd21 	bl	80002b8 <__aeabi_dsub>
 800b876:	4b2b      	ldr	r3, [pc, #172]	; (800b924 <__kernel_cos+0x17c>)
 800b878:	4598      	cmp	r8, r3
 800b87a:	4606      	mov	r6, r0
 800b87c:	460f      	mov	r7, r1
 800b87e:	dc10      	bgt.n	800b8a2 <__kernel_cos+0xfa>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4650      	mov	r0, sl
 800b886:	4659      	mov	r1, fp
 800b888:	f7f4 fd16 	bl	80002b8 <__aeabi_dsub>
 800b88c:	460b      	mov	r3, r1
 800b88e:	4926      	ldr	r1, [pc, #152]	; (800b928 <__kernel_cos+0x180>)
 800b890:	4602      	mov	r2, r0
 800b892:	2000      	movs	r0, #0
 800b894:	f7f4 fd10 	bl	80002b8 <__aeabi_dsub>
 800b898:	ec41 0b10 	vmov	d0, r0, r1
 800b89c:	b003      	add	sp, #12
 800b89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <__kernel_cos+0x184>)
 800b8a4:	4920      	ldr	r1, [pc, #128]	; (800b928 <__kernel_cos+0x180>)
 800b8a6:	4598      	cmp	r8, r3
 800b8a8:	bfcc      	ite	gt
 800b8aa:	4d21      	ldrgt	r5, [pc, #132]	; (800b930 <__kernel_cos+0x188>)
 800b8ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b8b0:	2400      	movs	r4, #0
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7f4 fcfe 	bl	80002b8 <__aeabi_dsub>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4680      	mov	r8, r0
 800b8c0:	4689      	mov	r9, r1
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	4650      	mov	r0, sl
 800b8c6:	4659      	mov	r1, fp
 800b8c8:	f7f4 fcf6 	bl	80002b8 <__aeabi_dsub>
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	f7f4 fcf2 	bl	80002b8 <__aeabi_dsub>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	e7da      	b.n	800b894 <__kernel_cos+0xec>
 800b8de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b918 <__kernel_cos+0x170>
 800b8e2:	e7db      	b.n	800b89c <__kernel_cos+0xf4>
 800b8e4:	f3af 8000 	nop.w
 800b8e8:	be8838d4 	.word	0xbe8838d4
 800b8ec:	bda8fae9 	.word	0xbda8fae9
 800b8f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b8f4:	3e21ee9e 	.word	0x3e21ee9e
 800b8f8:	809c52ad 	.word	0x809c52ad
 800b8fc:	3e927e4f 	.word	0x3e927e4f
 800b900:	19cb1590 	.word	0x19cb1590
 800b904:	3efa01a0 	.word	0x3efa01a0
 800b908:	16c15177 	.word	0x16c15177
 800b90c:	3f56c16c 	.word	0x3f56c16c
 800b910:	5555554c 	.word	0x5555554c
 800b914:	3fa55555 	.word	0x3fa55555
 800b918:	00000000 	.word	0x00000000
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	3fd33332 	.word	0x3fd33332
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	3fe90000 	.word	0x3fe90000
 800b930:	3fd20000 	.word	0x3fd20000
 800b934:	00000000 	.word	0x00000000

0800b938 <__kernel_rem_pio2>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	ed2d 8b02 	vpush	{d8}
 800b940:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b944:	f112 0f14 	cmn.w	r2, #20
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9101      	str	r1, [sp, #4]
 800b94c:	4bc4      	ldr	r3, [pc, #784]	; (800bc60 <__kernel_rem_pio2+0x328>)
 800b94e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b950:	900b      	str	r0, [sp, #44]	; 0x2c
 800b952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b956:	9302      	str	r3, [sp, #8]
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b95e:	bfa8      	it	ge
 800b960:	1ed4      	subge	r4, r2, #3
 800b962:	9306      	str	r3, [sp, #24]
 800b964:	bfb2      	itee	lt
 800b966:	2400      	movlt	r4, #0
 800b968:	2318      	movge	r3, #24
 800b96a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b96e:	f06f 0317 	mvn.w	r3, #23
 800b972:	fb04 3303 	mla	r3, r4, r3, r3
 800b976:	eb03 0a02 	add.w	sl, r3, r2
 800b97a:	9b02      	ldr	r3, [sp, #8]
 800b97c:	9a06      	ldr	r2, [sp, #24]
 800b97e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bc50 <__kernel_rem_pio2+0x318>
 800b982:	eb03 0802 	add.w	r8, r3, r2
 800b986:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b988:	1aa7      	subs	r7, r4, r2
 800b98a:	ae22      	add	r6, sp, #136	; 0x88
 800b98c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b990:	2500      	movs	r5, #0
 800b992:	4545      	cmp	r5, r8
 800b994:	dd13      	ble.n	800b9be <__kernel_rem_pio2+0x86>
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bc50 <__kernel_rem_pio2+0x318>
 800b99c:	aa22      	add	r2, sp, #136	; 0x88
 800b99e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b9a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	4598      	cmp	r8, r3
 800b9ae:	dc2f      	bgt.n	800ba10 <__kernel_rem_pio2+0xd8>
 800b9b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b9b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b9b8:	462f      	mov	r7, r5
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	e01b      	b.n	800b9f6 <__kernel_rem_pio2+0xbe>
 800b9be:	42ef      	cmn	r7, r5
 800b9c0:	d407      	bmi.n	800b9d2 <__kernel_rem_pio2+0x9a>
 800b9c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9c6:	f7f4 fdc5 	bl	8000554 <__aeabi_i2d>
 800b9ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9ce:	3501      	adds	r5, #1
 800b9d0:	e7df      	b.n	800b992 <__kernel_rem_pio2+0x5a>
 800b9d2:	ec51 0b18 	vmov	r0, r1, d8
 800b9d6:	e7f8      	b.n	800b9ca <__kernel_rem_pio2+0x92>
 800b9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b9e0:	f7f4 fe22 	bl	8000628 <__aeabi_dmul>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ec:	f7f4 fc66 	bl	80002bc <__adddf3>
 800b9f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9f4:	3601      	adds	r6, #1
 800b9f6:	9b06      	ldr	r3, [sp, #24]
 800b9f8:	429e      	cmp	r6, r3
 800b9fa:	f1a7 0708 	sub.w	r7, r7, #8
 800b9fe:	ddeb      	ble.n	800b9d8 <__kernel_rem_pio2+0xa0>
 800ba00:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba04:	f108 0801 	add.w	r8, r8, #1
 800ba08:	ecab 7b02 	vstmia	fp!, {d7}
 800ba0c:	3508      	adds	r5, #8
 800ba0e:	e7cc      	b.n	800b9aa <__kernel_rem_pio2+0x72>
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	aa0e      	add	r2, sp, #56	; 0x38
 800ba14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba18:	930d      	str	r3, [sp, #52]	; 0x34
 800ba1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ba1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba20:	9c02      	ldr	r4, [sp, #8]
 800ba22:	930c      	str	r3, [sp, #48]	; 0x30
 800ba24:	00e3      	lsls	r3, r4, #3
 800ba26:	930a      	str	r3, [sp, #40]	; 0x28
 800ba28:	ab9a      	add	r3, sp, #616	; 0x268
 800ba2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ba32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ba36:	ab72      	add	r3, sp, #456	; 0x1c8
 800ba38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ba3c:	46c3      	mov	fp, r8
 800ba3e:	46a1      	mov	r9, r4
 800ba40:	f1b9 0f00 	cmp.w	r9, #0
 800ba44:	f1a5 0508 	sub.w	r5, r5, #8
 800ba48:	dc77      	bgt.n	800bb3a <__kernel_rem_pio2+0x202>
 800ba4a:	ec47 6b10 	vmov	d0, r6, r7
 800ba4e:	4650      	mov	r0, sl
 800ba50:	f000 fde6 	bl	800c620 <scalbn>
 800ba54:	ec57 6b10 	vmov	r6, r7, d0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba5e:	ee10 0a10 	vmov	r0, s0
 800ba62:	4639      	mov	r1, r7
 800ba64:	f7f4 fde0 	bl	8000628 <__aeabi_dmul>
 800ba68:	ec41 0b10 	vmov	d0, r0, r1
 800ba6c:	f000 fd58 	bl	800c520 <floor>
 800ba70:	4b7c      	ldr	r3, [pc, #496]	; (800bc64 <__kernel_rem_pio2+0x32c>)
 800ba72:	ec51 0b10 	vmov	r0, r1, d0
 800ba76:	2200      	movs	r2, #0
 800ba78:	f7f4 fdd6 	bl	8000628 <__aeabi_dmul>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f4 fc18 	bl	80002b8 <__aeabi_dsub>
 800ba88:	460f      	mov	r7, r1
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	f7f5 f87c 	bl	8000b88 <__aeabi_d2iz>
 800ba90:	9004      	str	r0, [sp, #16]
 800ba92:	f7f4 fd5f 	bl	8000554 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	f7f4 fc0b 	bl	80002b8 <__aeabi_dsub>
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	4606      	mov	r6, r0
 800baa8:	460f      	mov	r7, r1
 800baaa:	dd6d      	ble.n	800bb88 <__kernel_rem_pio2+0x250>
 800baac:	1e62      	subs	r2, r4, #1
 800baae:	ab0e      	add	r3, sp, #56	; 0x38
 800bab0:	9d04      	ldr	r5, [sp, #16]
 800bab2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bab6:	f1ca 0118 	rsb	r1, sl, #24
 800baba:	fa40 f301 	asr.w	r3, r0, r1
 800babe:	441d      	add	r5, r3
 800bac0:	408b      	lsls	r3, r1
 800bac2:	1ac0      	subs	r0, r0, r3
 800bac4:	ab0e      	add	r3, sp, #56	; 0x38
 800bac6:	9504      	str	r5, [sp, #16]
 800bac8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bacc:	f1ca 0317 	rsb	r3, sl, #23
 800bad0:	fa40 fb03 	asr.w	fp, r0, r3
 800bad4:	f1bb 0f00 	cmp.w	fp, #0
 800bad8:	dd65      	ble.n	800bba6 <__kernel_rem_pio2+0x26e>
 800bada:	9b04      	ldr	r3, [sp, #16]
 800badc:	2200      	movs	r2, #0
 800bade:	3301      	adds	r3, #1
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	4615      	mov	r5, r2
 800bae4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bae8:	4294      	cmp	r4, r2
 800baea:	f300 809c 	bgt.w	800bc26 <__kernel_rem_pio2+0x2ee>
 800baee:	f1ba 0f00 	cmp.w	sl, #0
 800baf2:	dd07      	ble.n	800bb04 <__kernel_rem_pio2+0x1cc>
 800baf4:	f1ba 0f01 	cmp.w	sl, #1
 800baf8:	f000 80c0 	beq.w	800bc7c <__kernel_rem_pio2+0x344>
 800bafc:	f1ba 0f02 	cmp.w	sl, #2
 800bb00:	f000 80c6 	beq.w	800bc90 <__kernel_rem_pio2+0x358>
 800bb04:	f1bb 0f02 	cmp.w	fp, #2
 800bb08:	d14d      	bne.n	800bba6 <__kernel_rem_pio2+0x26e>
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4956      	ldr	r1, [pc, #344]	; (800bc68 <__kernel_rem_pio2+0x330>)
 800bb10:	2000      	movs	r0, #0
 800bb12:	f7f4 fbd1 	bl	80002b8 <__aeabi_dsub>
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	2d00      	cmp	r5, #0
 800bb1c:	d043      	beq.n	800bba6 <__kernel_rem_pio2+0x26e>
 800bb1e:	4650      	mov	r0, sl
 800bb20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bc58 <__kernel_rem_pio2+0x320>
 800bb24:	f000 fd7c 	bl	800c620 <scalbn>
 800bb28:	4630      	mov	r0, r6
 800bb2a:	4639      	mov	r1, r7
 800bb2c:	ec53 2b10 	vmov	r2, r3, d0
 800bb30:	f7f4 fbc2 	bl	80002b8 <__aeabi_dsub>
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	e035      	b.n	800bba6 <__kernel_rem_pio2+0x26e>
 800bb3a:	4b4c      	ldr	r3, [pc, #304]	; (800bc6c <__kernel_rem_pio2+0x334>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4630      	mov	r0, r6
 800bb40:	4639      	mov	r1, r7
 800bb42:	f7f4 fd71 	bl	8000628 <__aeabi_dmul>
 800bb46:	f7f5 f81f 	bl	8000b88 <__aeabi_d2iz>
 800bb4a:	f7f4 fd03 	bl	8000554 <__aeabi_i2d>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	ec43 2b18 	vmov	d8, r2, r3
 800bb56:	4b46      	ldr	r3, [pc, #280]	; (800bc70 <__kernel_rem_pio2+0x338>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f7f4 fd65 	bl	8000628 <__aeabi_dmul>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4630      	mov	r0, r6
 800bb64:	4639      	mov	r1, r7
 800bb66:	f7f4 fba7 	bl	80002b8 <__aeabi_dsub>
 800bb6a:	f7f5 f80d 	bl	8000b88 <__aeabi_d2iz>
 800bb6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb72:	f84b 0b04 	str.w	r0, [fp], #4
 800bb76:	ec51 0b18 	vmov	r0, r1, d8
 800bb7a:	f7f4 fb9f 	bl	80002bc <__adddf3>
 800bb7e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	e75b      	b.n	800ba40 <__kernel_rem_pio2+0x108>
 800bb88:	d106      	bne.n	800bb98 <__kernel_rem_pio2+0x260>
 800bb8a:	1e63      	subs	r3, r4, #1
 800bb8c:	aa0e      	add	r2, sp, #56	; 0x38
 800bb8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bb92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bb96:	e79d      	b.n	800bad4 <__kernel_rem_pio2+0x19c>
 800bb98:	4b36      	ldr	r3, [pc, #216]	; (800bc74 <__kernel_rem_pio2+0x33c>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f7f4 ffca 	bl	8000b34 <__aeabi_dcmpge>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d13d      	bne.n	800bc20 <__kernel_rem_pio2+0x2e8>
 800bba4:	4683      	mov	fp, r0
 800bba6:	2200      	movs	r2, #0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f000 80c0 	beq.w	800bd38 <__kernel_rem_pio2+0x400>
 800bbb8:	1e65      	subs	r5, r4, #1
 800bbba:	462b      	mov	r3, r5
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	9902      	ldr	r1, [sp, #8]
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	da6c      	bge.n	800bc9e <__kernel_rem_pio2+0x366>
 800bbc4:	2a00      	cmp	r2, #0
 800bbc6:	f000 8089 	beq.w	800bcdc <__kernel_rem_pio2+0x3a4>
 800bbca:	ab0e      	add	r3, sp, #56	; 0x38
 800bbcc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bbd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 80ad 	beq.w	800bd34 <__kernel_rem_pio2+0x3fc>
 800bbda:	4650      	mov	r0, sl
 800bbdc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bc58 <__kernel_rem_pio2+0x320>
 800bbe0:	f000 fd1e 	bl	800c620 <scalbn>
 800bbe4:	ab9a      	add	r3, sp, #616	; 0x268
 800bbe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bbea:	ec57 6b10 	vmov	r6, r7, d0
 800bbee:	00ec      	lsls	r4, r5, #3
 800bbf0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bbf4:	46aa      	mov	sl, r5
 800bbf6:	f1ba 0f00 	cmp.w	sl, #0
 800bbfa:	f280 80d6 	bge.w	800bdaa <__kernel_rem_pio2+0x472>
 800bbfe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bc50 <__kernel_rem_pio2+0x318>
 800bc02:	462e      	mov	r6, r5
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	f2c0 8104 	blt.w	800be12 <__kernel_rem_pio2+0x4da>
 800bc0a:	ab72      	add	r3, sp, #456	; 0x1c8
 800bc0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bc10:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bc78 <__kernel_rem_pio2+0x340>
 800bc14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bc18:	f04f 0800 	mov.w	r8, #0
 800bc1c:	1baf      	subs	r7, r5, r6
 800bc1e:	e0ea      	b.n	800bdf6 <__kernel_rem_pio2+0x4be>
 800bc20:	f04f 0b02 	mov.w	fp, #2
 800bc24:	e759      	b.n	800bada <__kernel_rem_pio2+0x1a2>
 800bc26:	f8d8 3000 	ldr.w	r3, [r8]
 800bc2a:	b955      	cbnz	r5, 800bc42 <__kernel_rem_pio2+0x30a>
 800bc2c:	b123      	cbz	r3, 800bc38 <__kernel_rem_pio2+0x300>
 800bc2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc32:	f8c8 3000 	str.w	r3, [r8]
 800bc36:	2301      	movs	r3, #1
 800bc38:	3201      	adds	r2, #1
 800bc3a:	f108 0804 	add.w	r8, r8, #4
 800bc3e:	461d      	mov	r5, r3
 800bc40:	e752      	b.n	800bae8 <__kernel_rem_pio2+0x1b0>
 800bc42:	1acb      	subs	r3, r1, r3
 800bc44:	f8c8 3000 	str.w	r3, [r8]
 800bc48:	462b      	mov	r3, r5
 800bc4a:	e7f5      	b.n	800bc38 <__kernel_rem_pio2+0x300>
 800bc4c:	f3af 8000 	nop.w
	...
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	0800cfc8 	.word	0x0800cfc8
 800bc64:	40200000 	.word	0x40200000
 800bc68:	3ff00000 	.word	0x3ff00000
 800bc6c:	3e700000 	.word	0x3e700000
 800bc70:	41700000 	.word	0x41700000
 800bc74:	3fe00000 	.word	0x3fe00000
 800bc78:	0800cf88 	.word	0x0800cf88
 800bc7c:	1e62      	subs	r2, r4, #1
 800bc7e:	ab0e      	add	r3, sp, #56	; 0x38
 800bc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc88:	a90e      	add	r1, sp, #56	; 0x38
 800bc8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc8e:	e739      	b.n	800bb04 <__kernel_rem_pio2+0x1cc>
 800bc90:	1e62      	subs	r2, r4, #1
 800bc92:	ab0e      	add	r3, sp, #56	; 0x38
 800bc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc9c:	e7f4      	b.n	800bc88 <__kernel_rem_pio2+0x350>
 800bc9e:	a90e      	add	r1, sp, #56	; 0x38
 800bca0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	430a      	orrs	r2, r1
 800bca8:	e789      	b.n	800bbbe <__kernel_rem_pio2+0x286>
 800bcaa:	3301      	adds	r3, #1
 800bcac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	d0fa      	beq.n	800bcaa <__kernel_rem_pio2+0x372>
 800bcb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bcba:	446a      	add	r2, sp
 800bcbc:	3a98      	subs	r2, #152	; 0x98
 800bcbe:	920a      	str	r2, [sp, #40]	; 0x28
 800bcc0:	9a08      	ldr	r2, [sp, #32]
 800bcc2:	18e3      	adds	r3, r4, r3
 800bcc4:	18a5      	adds	r5, r4, r2
 800bcc6:	aa22      	add	r2, sp, #136	; 0x88
 800bcc8:	f104 0801 	add.w	r8, r4, #1
 800bccc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	4543      	cmp	r3, r8
 800bcd6:	da04      	bge.n	800bce2 <__kernel_rem_pio2+0x3aa>
 800bcd8:	461c      	mov	r4, r3
 800bcda:	e6a3      	b.n	800ba24 <__kernel_rem_pio2+0xec>
 800bcdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcde:	2301      	movs	r3, #1
 800bce0:	e7e4      	b.n	800bcac <__kernel_rem_pio2+0x374>
 800bce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bce8:	f7f4 fc34 	bl	8000554 <__aeabi_i2d>
 800bcec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf2:	46ab      	mov	fp, r5
 800bcf4:	461c      	mov	r4, r3
 800bcf6:	f04f 0900 	mov.w	r9, #0
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	2700      	movs	r7, #0
 800bcfe:	9b06      	ldr	r3, [sp, #24]
 800bd00:	4599      	cmp	r9, r3
 800bd02:	dd06      	ble.n	800bd12 <__kernel_rem_pio2+0x3da>
 800bd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd06:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bd0a:	f108 0801 	add.w	r8, r8, #1
 800bd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd10:	e7df      	b.n	800bcd2 <__kernel_rem_pio2+0x39a>
 800bd12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bd16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bd1a:	f7f4 fc85 	bl	8000628 <__aeabi_dmul>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 fac9 	bl	80002bc <__adddf3>
 800bd2a:	f109 0901 	add.w	r9, r9, #1
 800bd2e:	4606      	mov	r6, r0
 800bd30:	460f      	mov	r7, r1
 800bd32:	e7e4      	b.n	800bcfe <__kernel_rem_pio2+0x3c6>
 800bd34:	3d01      	subs	r5, #1
 800bd36:	e748      	b.n	800bbca <__kernel_rem_pio2+0x292>
 800bd38:	ec47 6b10 	vmov	d0, r6, r7
 800bd3c:	f1ca 0000 	rsb	r0, sl, #0
 800bd40:	f000 fc6e 	bl	800c620 <scalbn>
 800bd44:	ec57 6b10 	vmov	r6, r7, d0
 800bd48:	4ba0      	ldr	r3, [pc, #640]	; (800bfcc <__kernel_rem_pio2+0x694>)
 800bd4a:	ee10 0a10 	vmov	r0, s0
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 feef 	bl	8000b34 <__aeabi_dcmpge>
 800bd56:	b1f8      	cbz	r0, 800bd98 <__kernel_rem_pio2+0x460>
 800bd58:	4b9d      	ldr	r3, [pc, #628]	; (800bfd0 <__kernel_rem_pio2+0x698>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 fc62 	bl	8000628 <__aeabi_dmul>
 800bd64:	f7f4 ff10 	bl	8000b88 <__aeabi_d2iz>
 800bd68:	4680      	mov	r8, r0
 800bd6a:	f7f4 fbf3 	bl	8000554 <__aeabi_i2d>
 800bd6e:	4b97      	ldr	r3, [pc, #604]	; (800bfcc <__kernel_rem_pio2+0x694>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	f7f4 fc59 	bl	8000628 <__aeabi_dmul>
 800bd76:	460b      	mov	r3, r1
 800bd78:	4602      	mov	r2, r0
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f7f4 fa9b 	bl	80002b8 <__aeabi_dsub>
 800bd82:	f7f4 ff01 	bl	8000b88 <__aeabi_d2iz>
 800bd86:	1c65      	adds	r5, r4, #1
 800bd88:	ab0e      	add	r3, sp, #56	; 0x38
 800bd8a:	f10a 0a18 	add.w	sl, sl, #24
 800bd8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bd96:	e720      	b.n	800bbda <__kernel_rem_pio2+0x2a2>
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	f7f4 fef4 	bl	8000b88 <__aeabi_d2iz>
 800bda0:	ab0e      	add	r3, sp, #56	; 0x38
 800bda2:	4625      	mov	r5, r4
 800bda4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bda8:	e717      	b.n	800bbda <__kernel_rem_pio2+0x2a2>
 800bdaa:	ab0e      	add	r3, sp, #56	; 0x38
 800bdac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bdb0:	f7f4 fbd0 	bl	8000554 <__aeabi_i2d>
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	f7f4 fc36 	bl	8000628 <__aeabi_dmul>
 800bdbc:	4b84      	ldr	r3, [pc, #528]	; (800bfd0 <__kernel_rem_pio2+0x698>)
 800bdbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fc2e 	bl	8000628 <__aeabi_dmul>
 800bdcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	460f      	mov	r7, r1
 800bdd4:	e70f      	b.n	800bbf6 <__kernel_rem_pio2+0x2be>
 800bdd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bdda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bdde:	f7f4 fc23 	bl	8000628 <__aeabi_dmul>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdea:	f7f4 fa67 	bl	80002bc <__adddf3>
 800bdee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdf2:	f108 0801 	add.w	r8, r8, #1
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	4598      	cmp	r8, r3
 800bdfa:	dc01      	bgt.n	800be00 <__kernel_rem_pio2+0x4c8>
 800bdfc:	45b8      	cmp	r8, r7
 800bdfe:	ddea      	ble.n	800bdd6 <__kernel_rem_pio2+0x49e>
 800be00:	ed9d 7b06 	vldr	d7, [sp, #24]
 800be04:	ab4a      	add	r3, sp, #296	; 0x128
 800be06:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be0a:	ed87 7b00 	vstr	d7, [r7]
 800be0e:	3e01      	subs	r6, #1
 800be10:	e6f8      	b.n	800bc04 <__kernel_rem_pio2+0x2cc>
 800be12:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800be14:	2b02      	cmp	r3, #2
 800be16:	dc0b      	bgt.n	800be30 <__kernel_rem_pio2+0x4f8>
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dc35      	bgt.n	800be88 <__kernel_rem_pio2+0x550>
 800be1c:	d059      	beq.n	800bed2 <__kernel_rem_pio2+0x59a>
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	f003 0007 	and.w	r0, r3, #7
 800be24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800be28:	ecbd 8b02 	vpop	{d8}
 800be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800be32:	2b03      	cmp	r3, #3
 800be34:	d1f3      	bne.n	800be1e <__kernel_rem_pio2+0x4e6>
 800be36:	ab4a      	add	r3, sp, #296	; 0x128
 800be38:	4423      	add	r3, r4
 800be3a:	9306      	str	r3, [sp, #24]
 800be3c:	461c      	mov	r4, r3
 800be3e:	469a      	mov	sl, r3
 800be40:	9502      	str	r5, [sp, #8]
 800be42:	9b02      	ldr	r3, [sp, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f1aa 0a08 	sub.w	sl, sl, #8
 800be4a:	dc6b      	bgt.n	800bf24 <__kernel_rem_pio2+0x5ec>
 800be4c:	46aa      	mov	sl, r5
 800be4e:	f1ba 0f01 	cmp.w	sl, #1
 800be52:	f1a4 0408 	sub.w	r4, r4, #8
 800be56:	f300 8085 	bgt.w	800bf64 <__kernel_rem_pio2+0x62c>
 800be5a:	9c06      	ldr	r4, [sp, #24]
 800be5c:	2000      	movs	r0, #0
 800be5e:	3408      	adds	r4, #8
 800be60:	2100      	movs	r1, #0
 800be62:	2d01      	cmp	r5, #1
 800be64:	f300 809d 	bgt.w	800bfa2 <__kernel_rem_pio2+0x66a>
 800be68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800be6c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800be70:	f1bb 0f00 	cmp.w	fp, #0
 800be74:	f040 809b 	bne.w	800bfae <__kernel_rem_pio2+0x676>
 800be78:	9b01      	ldr	r3, [sp, #4]
 800be7a:	e9c3 5600 	strd	r5, r6, [r3]
 800be7e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800be82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be86:	e7ca      	b.n	800be1e <__kernel_rem_pio2+0x4e6>
 800be88:	3408      	adds	r4, #8
 800be8a:	ab4a      	add	r3, sp, #296	; 0x128
 800be8c:	441c      	add	r4, r3
 800be8e:	462e      	mov	r6, r5
 800be90:	2000      	movs	r0, #0
 800be92:	2100      	movs	r1, #0
 800be94:	2e00      	cmp	r6, #0
 800be96:	da36      	bge.n	800bf06 <__kernel_rem_pio2+0x5ce>
 800be98:	f1bb 0f00 	cmp.w	fp, #0
 800be9c:	d039      	beq.n	800bf12 <__kernel_rem_pio2+0x5da>
 800be9e:	4602      	mov	r2, r0
 800bea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bea4:	9c01      	ldr	r4, [sp, #4]
 800bea6:	e9c4 2300 	strd	r2, r3, [r4]
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800beb2:	f7f4 fa01 	bl	80002b8 <__aeabi_dsub>
 800beb6:	ae4c      	add	r6, sp, #304	; 0x130
 800beb8:	2401      	movs	r4, #1
 800beba:	42a5      	cmp	r5, r4
 800bebc:	da2c      	bge.n	800bf18 <__kernel_rem_pio2+0x5e0>
 800bebe:	f1bb 0f00 	cmp.w	fp, #0
 800bec2:	d002      	beq.n	800beca <__kernel_rem_pio2+0x592>
 800bec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bec8:	4619      	mov	r1, r3
 800beca:	9b01      	ldr	r3, [sp, #4]
 800becc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bed0:	e7a5      	b.n	800be1e <__kernel_rem_pio2+0x4e6>
 800bed2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800bed6:	eb0d 0403 	add.w	r4, sp, r3
 800beda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bede:	2000      	movs	r0, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	2d00      	cmp	r5, #0
 800bee4:	da09      	bge.n	800befa <__kernel_rem_pio2+0x5c2>
 800bee6:	f1bb 0f00 	cmp.w	fp, #0
 800beea:	d002      	beq.n	800bef2 <__kernel_rem_pio2+0x5ba>
 800beec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef0:	4619      	mov	r1, r3
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	e9c3 0100 	strd	r0, r1, [r3]
 800bef8:	e791      	b.n	800be1e <__kernel_rem_pio2+0x4e6>
 800befa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800befe:	f7f4 f9dd 	bl	80002bc <__adddf3>
 800bf02:	3d01      	subs	r5, #1
 800bf04:	e7ed      	b.n	800bee2 <__kernel_rem_pio2+0x5aa>
 800bf06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf0a:	f7f4 f9d7 	bl	80002bc <__adddf3>
 800bf0e:	3e01      	subs	r6, #1
 800bf10:	e7c0      	b.n	800be94 <__kernel_rem_pio2+0x55c>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	e7c5      	b.n	800bea4 <__kernel_rem_pio2+0x56c>
 800bf18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bf1c:	f7f4 f9ce 	bl	80002bc <__adddf3>
 800bf20:	3401      	adds	r4, #1
 800bf22:	e7ca      	b.n	800beba <__kernel_rem_pio2+0x582>
 800bf24:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bf2c:	9b02      	ldr	r3, [sp, #8]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	9302      	str	r3, [sp, #8]
 800bf32:	4632      	mov	r2, r6
 800bf34:	463b      	mov	r3, r7
 800bf36:	4640      	mov	r0, r8
 800bf38:	4649      	mov	r1, r9
 800bf3a:	f7f4 f9bf 	bl	80002bc <__adddf3>
 800bf3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4640      	mov	r0, r8
 800bf48:	4649      	mov	r1, r9
 800bf4a:	f7f4 f9b5 	bl	80002b8 <__aeabi_dsub>
 800bf4e:	4632      	mov	r2, r6
 800bf50:	463b      	mov	r3, r7
 800bf52:	f7f4 f9b3 	bl	80002bc <__adddf3>
 800bf56:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bf5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf5e:	ed8a 7b00 	vstr	d7, [sl]
 800bf62:	e76e      	b.n	800be42 <__kernel_rem_pio2+0x50a>
 800bf64:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	4632      	mov	r2, r6
 800bf70:	463b      	mov	r3, r7
 800bf72:	4649      	mov	r1, r9
 800bf74:	f7f4 f9a2 	bl	80002bc <__adddf3>
 800bf78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4640      	mov	r0, r8
 800bf82:	4649      	mov	r1, r9
 800bf84:	f7f4 f998 	bl	80002b8 <__aeabi_dsub>
 800bf88:	4632      	mov	r2, r6
 800bf8a:	463b      	mov	r3, r7
 800bf8c:	f7f4 f996 	bl	80002bc <__adddf3>
 800bf90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf98:	ed84 7b00 	vstr	d7, [r4]
 800bf9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfa0:	e755      	b.n	800be4e <__kernel_rem_pio2+0x516>
 800bfa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfa6:	f7f4 f989 	bl	80002bc <__adddf3>
 800bfaa:	3d01      	subs	r5, #1
 800bfac:	e759      	b.n	800be62 <__kernel_rem_pio2+0x52a>
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	9a01      	ldr	r2, [sp, #4]
 800bfb2:	601d      	str	r5, [r3, #0]
 800bfb4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bfb8:	605c      	str	r4, [r3, #4]
 800bfba:	609f      	str	r7, [r3, #8]
 800bfbc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bfc0:	60d3      	str	r3, [r2, #12]
 800bfc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfc6:	6110      	str	r0, [r2, #16]
 800bfc8:	6153      	str	r3, [r2, #20]
 800bfca:	e728      	b.n	800be1e <__kernel_rem_pio2+0x4e6>
 800bfcc:	41700000 	.word	0x41700000
 800bfd0:	3e700000 	.word	0x3e700000
 800bfd4:	00000000 	.word	0x00000000

0800bfd8 <__kernel_sin>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	ed2d 8b04 	vpush	{d8-d9}
 800bfe0:	eeb0 8a41 	vmov.f32	s16, s2
 800bfe4:	eef0 8a61 	vmov.f32	s17, s3
 800bfe8:	ec55 4b10 	vmov	r4, r5, d0
 800bfec:	b083      	sub	sp, #12
 800bfee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bff2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bff6:	9001      	str	r0, [sp, #4]
 800bff8:	da06      	bge.n	800c008 <__kernel_sin+0x30>
 800bffa:	ee10 0a10 	vmov	r0, s0
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 fdc2 	bl	8000b88 <__aeabi_d2iz>
 800c004:	2800      	cmp	r0, #0
 800c006:	d051      	beq.n	800c0ac <__kernel_sin+0xd4>
 800c008:	4622      	mov	r2, r4
 800c00a:	462b      	mov	r3, r5
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fb0a 	bl	8000628 <__aeabi_dmul>
 800c014:	4682      	mov	sl, r0
 800c016:	468b      	mov	fp, r1
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 fb02 	bl	8000628 <__aeabi_dmul>
 800c024:	a341      	add	r3, pc, #260	; (adr r3, 800c12c <__kernel_sin+0x154>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	4680      	mov	r8, r0
 800c02c:	4689      	mov	r9, r1
 800c02e:	4650      	mov	r0, sl
 800c030:	4659      	mov	r1, fp
 800c032:	f7f4 faf9 	bl	8000628 <__aeabi_dmul>
 800c036:	a33f      	add	r3, pc, #252	; (adr r3, 800c134 <__kernel_sin+0x15c>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 f93c 	bl	80002b8 <__aeabi_dsub>
 800c040:	4652      	mov	r2, sl
 800c042:	465b      	mov	r3, fp
 800c044:	f7f4 faf0 	bl	8000628 <__aeabi_dmul>
 800c048:	a33c      	add	r3, pc, #240	; (adr r3, 800c13c <__kernel_sin+0x164>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f935 	bl	80002bc <__adddf3>
 800c052:	4652      	mov	r2, sl
 800c054:	465b      	mov	r3, fp
 800c056:	f7f4 fae7 	bl	8000628 <__aeabi_dmul>
 800c05a:	a33a      	add	r3, pc, #232	; (adr r3, 800c144 <__kernel_sin+0x16c>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f92a 	bl	80002b8 <__aeabi_dsub>
 800c064:	4652      	mov	r2, sl
 800c066:	465b      	mov	r3, fp
 800c068:	f7f4 fade 	bl	8000628 <__aeabi_dmul>
 800c06c:	a337      	add	r3, pc, #220	; (adr r3, 800c14c <__kernel_sin+0x174>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f923 	bl	80002bc <__adddf3>
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	4606      	mov	r6, r0
 800c07a:	460f      	mov	r7, r1
 800c07c:	b9eb      	cbnz	r3, 800c0ba <__kernel_sin+0xe2>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	4650      	mov	r0, sl
 800c084:	4659      	mov	r1, fp
 800c086:	f7f4 facf 	bl	8000628 <__aeabi_dmul>
 800c08a:	a325      	add	r3, pc, #148	; (adr r3, 800c120 <__kernel_sin+0x148>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 f912 	bl	80002b8 <__aeabi_dsub>
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	f7f4 fac6 	bl	8000628 <__aeabi_dmul>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	f7f4 f90a 	bl	80002bc <__adddf3>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	ec45 4b10 	vmov	d0, r4, r5
 800c0b0:	b003      	add	sp, #12
 800c0b2:	ecbd 8b04 	vpop	{d8-d9}
 800c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ba:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <__kernel_sin+0x150>)
 800c0bc:	ec51 0b18 	vmov	r0, r1, d8
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f7f4 fab1 	bl	8000628 <__aeabi_dmul>
 800c0c6:	4632      	mov	r2, r6
 800c0c8:	ec41 0b19 	vmov	d9, r0, r1
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	f7f4 faa9 	bl	8000628 <__aeabi_dmul>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	ec51 0b19 	vmov	r0, r1, d9
 800c0de:	f7f4 f8eb 	bl	80002b8 <__aeabi_dsub>
 800c0e2:	4652      	mov	r2, sl
 800c0e4:	465b      	mov	r3, fp
 800c0e6:	f7f4 fa9f 	bl	8000628 <__aeabi_dmul>
 800c0ea:	ec53 2b18 	vmov	r2, r3, d8
 800c0ee:	f7f4 f8e3 	bl	80002b8 <__aeabi_dsub>
 800c0f2:	a30b      	add	r3, pc, #44	; (adr r3, 800c120 <__kernel_sin+0x148>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	4640      	mov	r0, r8
 800c0fe:	4649      	mov	r1, r9
 800c100:	f7f4 fa92 	bl	8000628 <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 f8d6 	bl	80002bc <__adddf3>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4620      	mov	r0, r4
 800c116:	4629      	mov	r1, r5
 800c118:	f7f4 f8ce 	bl	80002b8 <__aeabi_dsub>
 800c11c:	e7c4      	b.n	800c0a8 <__kernel_sin+0xd0>
 800c11e:	bf00      	nop
 800c120:	55555549 	.word	0x55555549
 800c124:	3fc55555 	.word	0x3fc55555
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	5acfd57c 	.word	0x5acfd57c
 800c130:	3de5d93a 	.word	0x3de5d93a
 800c134:	8a2b9ceb 	.word	0x8a2b9ceb
 800c138:	3e5ae5e6 	.word	0x3e5ae5e6
 800c13c:	57b1fe7d 	.word	0x57b1fe7d
 800c140:	3ec71de3 	.word	0x3ec71de3
 800c144:	19c161d5 	.word	0x19c161d5
 800c148:	3f2a01a0 	.word	0x3f2a01a0
 800c14c:	1110f8a6 	.word	0x1110f8a6
 800c150:	3f811111 	.word	0x3f811111

0800c154 <with_errno>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	4616      	mov	r6, r2
 800c15c:	f7fa fd04 	bl	8006b68 <__errno>
 800c160:	4629      	mov	r1, r5
 800c162:	6006      	str	r6, [r0, #0]
 800c164:	4620      	mov	r0, r4
 800c166:	bd70      	pop	{r4, r5, r6, pc}

0800c168 <xflow>:
 800c168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c16a:	4614      	mov	r4, r2
 800c16c:	461d      	mov	r5, r3
 800c16e:	b108      	cbz	r0, 800c174 <xflow+0xc>
 800c170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c174:	e9cd 2300 	strd	r2, r3, [sp]
 800c178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 fa52 	bl	8000628 <__aeabi_dmul>
 800c184:	2222      	movs	r2, #34	; 0x22
 800c186:	b003      	add	sp, #12
 800c188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c18c:	f7ff bfe2 	b.w	800c154 <with_errno>

0800c190 <__math_uflow>:
 800c190:	b508      	push	{r3, lr}
 800c192:	2200      	movs	r2, #0
 800c194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c198:	f7ff ffe6 	bl	800c168 <xflow>
 800c19c:	ec41 0b10 	vmov	d0, r0, r1
 800c1a0:	bd08      	pop	{r3, pc}

0800c1a2 <__math_oflow>:
 800c1a2:	b508      	push	{r3, lr}
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c1aa:	f7ff ffdd 	bl	800c168 <xflow>
 800c1ae:	ec41 0b10 	vmov	d0, r0, r1
 800c1b2:	bd08      	pop	{r3, pc}
 800c1b4:	0000      	movs	r0, r0
	...

0800c1b8 <atan>:
 800c1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	ec55 4b10 	vmov	r4, r5, d0
 800c1c0:	4bc3      	ldr	r3, [pc, #780]	; (800c4d0 <atan+0x318>)
 800c1c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1c6:	429e      	cmp	r6, r3
 800c1c8:	46ab      	mov	fp, r5
 800c1ca:	dd18      	ble.n	800c1fe <atan+0x46>
 800c1cc:	4bc1      	ldr	r3, [pc, #772]	; (800c4d4 <atan+0x31c>)
 800c1ce:	429e      	cmp	r6, r3
 800c1d0:	dc01      	bgt.n	800c1d6 <atan+0x1e>
 800c1d2:	d109      	bne.n	800c1e8 <atan+0x30>
 800c1d4:	b144      	cbz	r4, 800c1e8 <atan+0x30>
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	462b      	mov	r3, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4629      	mov	r1, r5
 800c1de:	f7f4 f86d 	bl	80002bc <__adddf3>
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	e006      	b.n	800c1f6 <atan+0x3e>
 800c1e8:	f1bb 0f00 	cmp.w	fp, #0
 800c1ec:	f300 8131 	bgt.w	800c452 <atan+0x29a>
 800c1f0:	a59b      	add	r5, pc, #620	; (adr r5, 800c460 <atan+0x2a8>)
 800c1f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1f6:	ec45 4b10 	vmov	d0, r4, r5
 800c1fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fe:	4bb6      	ldr	r3, [pc, #728]	; (800c4d8 <atan+0x320>)
 800c200:	429e      	cmp	r6, r3
 800c202:	dc14      	bgt.n	800c22e <atan+0x76>
 800c204:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c208:	429e      	cmp	r6, r3
 800c20a:	dc0d      	bgt.n	800c228 <atan+0x70>
 800c20c:	a396      	add	r3, pc, #600	; (adr r3, 800c468 <atan+0x2b0>)
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	ee10 0a10 	vmov	r0, s0
 800c216:	4629      	mov	r1, r5
 800c218:	f7f4 f850 	bl	80002bc <__adddf3>
 800c21c:	4baf      	ldr	r3, [pc, #700]	; (800c4dc <atan+0x324>)
 800c21e:	2200      	movs	r2, #0
 800c220:	f7f4 fc92 	bl	8000b48 <__aeabi_dcmpgt>
 800c224:	2800      	cmp	r0, #0
 800c226:	d1e6      	bne.n	800c1f6 <atan+0x3e>
 800c228:	f04f 3aff 	mov.w	sl, #4294967295
 800c22c:	e02b      	b.n	800c286 <atan+0xce>
 800c22e:	f000 f963 	bl	800c4f8 <fabs>
 800c232:	4bab      	ldr	r3, [pc, #684]	; (800c4e0 <atan+0x328>)
 800c234:	429e      	cmp	r6, r3
 800c236:	ec55 4b10 	vmov	r4, r5, d0
 800c23a:	f300 80bf 	bgt.w	800c3bc <atan+0x204>
 800c23e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c242:	429e      	cmp	r6, r3
 800c244:	f300 80a0 	bgt.w	800c388 <atan+0x1d0>
 800c248:	ee10 2a10 	vmov	r2, s0
 800c24c:	ee10 0a10 	vmov	r0, s0
 800c250:	462b      	mov	r3, r5
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f832 	bl	80002bc <__adddf3>
 800c258:	4ba0      	ldr	r3, [pc, #640]	; (800c4dc <atan+0x324>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	f7f4 f82c 	bl	80002b8 <__aeabi_dsub>
 800c260:	2200      	movs	r2, #0
 800c262:	4606      	mov	r6, r0
 800c264:	460f      	mov	r7, r1
 800c266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	f7f4 f825 	bl	80002bc <__adddf3>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 faff 	bl	800087c <__aeabi_ddiv>
 800c27e:	f04f 0a00 	mov.w	sl, #0
 800c282:	4604      	mov	r4, r0
 800c284:	460d      	mov	r5, r1
 800c286:	4622      	mov	r2, r4
 800c288:	462b      	mov	r3, r5
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	f7f4 f9cb 	bl	8000628 <__aeabi_dmul>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4680      	mov	r8, r0
 800c298:	4689      	mov	r9, r1
 800c29a:	f7f4 f9c5 	bl	8000628 <__aeabi_dmul>
 800c29e:	a374      	add	r3, pc, #464	; (adr r3, 800c470 <atan+0x2b8>)
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	460f      	mov	r7, r1
 800c2a8:	f7f4 f9be 	bl	8000628 <__aeabi_dmul>
 800c2ac:	a372      	add	r3, pc, #456	; (adr r3, 800c478 <atan+0x2c0>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f7f4 f803 	bl	80002bc <__adddf3>
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	f7f4 f9b5 	bl	8000628 <__aeabi_dmul>
 800c2be:	a370      	add	r3, pc, #448	; (adr r3, 800c480 <atan+0x2c8>)
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	f7f3 fffa 	bl	80002bc <__adddf3>
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	f7f4 f9ac 	bl	8000628 <__aeabi_dmul>
 800c2d0:	a36d      	add	r3, pc, #436	; (adr r3, 800c488 <atan+0x2d0>)
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	f7f3 fff1 	bl	80002bc <__adddf3>
 800c2da:	4632      	mov	r2, r6
 800c2dc:	463b      	mov	r3, r7
 800c2de:	f7f4 f9a3 	bl	8000628 <__aeabi_dmul>
 800c2e2:	a36b      	add	r3, pc, #428	; (adr r3, 800c490 <atan+0x2d8>)
 800c2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e8:	f7f3 ffe8 	bl	80002bc <__adddf3>
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	463b      	mov	r3, r7
 800c2f0:	f7f4 f99a 	bl	8000628 <__aeabi_dmul>
 800c2f4:	a368      	add	r3, pc, #416	; (adr r3, 800c498 <atan+0x2e0>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	f7f3 ffdf 	bl	80002bc <__adddf3>
 800c2fe:	4642      	mov	r2, r8
 800c300:	464b      	mov	r3, r9
 800c302:	f7f4 f991 	bl	8000628 <__aeabi_dmul>
 800c306:	a366      	add	r3, pc, #408	; (adr r3, 800c4a0 <atan+0x2e8>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	4680      	mov	r8, r0
 800c30e:	4689      	mov	r9, r1
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	f7f4 f988 	bl	8000628 <__aeabi_dmul>
 800c318:	a363      	add	r3, pc, #396	; (adr r3, 800c4a8 <atan+0x2f0>)
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	f7f3 ffcb 	bl	80002b8 <__aeabi_dsub>
 800c322:	4632      	mov	r2, r6
 800c324:	463b      	mov	r3, r7
 800c326:	f7f4 f97f 	bl	8000628 <__aeabi_dmul>
 800c32a:	a361      	add	r3, pc, #388	; (adr r3, 800c4b0 <atan+0x2f8>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	f7f3 ffc2 	bl	80002b8 <__aeabi_dsub>
 800c334:	4632      	mov	r2, r6
 800c336:	463b      	mov	r3, r7
 800c338:	f7f4 f976 	bl	8000628 <__aeabi_dmul>
 800c33c:	a35e      	add	r3, pc, #376	; (adr r3, 800c4b8 <atan+0x300>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ffb9 	bl	80002b8 <__aeabi_dsub>
 800c346:	4632      	mov	r2, r6
 800c348:	463b      	mov	r3, r7
 800c34a:	f7f4 f96d 	bl	8000628 <__aeabi_dmul>
 800c34e:	a35c      	add	r3, pc, #368	; (adr r3, 800c4c0 <atan+0x308>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f3 ffb0 	bl	80002b8 <__aeabi_dsub>
 800c358:	4632      	mov	r2, r6
 800c35a:	463b      	mov	r3, r7
 800c35c:	f7f4 f964 	bl	8000628 <__aeabi_dmul>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4640      	mov	r0, r8
 800c366:	4649      	mov	r1, r9
 800c368:	f7f3 ffa8 	bl	80002bc <__adddf3>
 800c36c:	4622      	mov	r2, r4
 800c36e:	462b      	mov	r3, r5
 800c370:	f7f4 f95a 	bl	8000628 <__aeabi_dmul>
 800c374:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	d14b      	bne.n	800c416 <atan+0x25e>
 800c37e:	4620      	mov	r0, r4
 800c380:	4629      	mov	r1, r5
 800c382:	f7f3 ff99 	bl	80002b8 <__aeabi_dsub>
 800c386:	e72c      	b.n	800c1e2 <atan+0x2a>
 800c388:	ee10 0a10 	vmov	r0, s0
 800c38c:	4b53      	ldr	r3, [pc, #332]	; (800c4dc <atan+0x324>)
 800c38e:	2200      	movs	r2, #0
 800c390:	4629      	mov	r1, r5
 800c392:	f7f3 ff91 	bl	80002b8 <__aeabi_dsub>
 800c396:	4b51      	ldr	r3, [pc, #324]	; (800c4dc <atan+0x324>)
 800c398:	4606      	mov	r6, r0
 800c39a:	460f      	mov	r7, r1
 800c39c:	2200      	movs	r2, #0
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	f7f3 ff8b 	bl	80002bc <__adddf3>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 fa65 	bl	800087c <__aeabi_ddiv>
 800c3b2:	f04f 0a01 	mov.w	sl, #1
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	460d      	mov	r5, r1
 800c3ba:	e764      	b.n	800c286 <atan+0xce>
 800c3bc:	4b49      	ldr	r3, [pc, #292]	; (800c4e4 <atan+0x32c>)
 800c3be:	429e      	cmp	r6, r3
 800c3c0:	da1d      	bge.n	800c3fe <atan+0x246>
 800c3c2:	ee10 0a10 	vmov	r0, s0
 800c3c6:	4b48      	ldr	r3, [pc, #288]	; (800c4e8 <atan+0x330>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7f3 ff74 	bl	80002b8 <__aeabi_dsub>
 800c3d0:	4b45      	ldr	r3, [pc, #276]	; (800c4e8 <atan+0x330>)
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4620      	mov	r0, r4
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f7f4 f924 	bl	8000628 <__aeabi_dmul>
 800c3e0:	4b3e      	ldr	r3, [pc, #248]	; (800c4dc <atan+0x324>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f7f3 ff6a 	bl	80002bc <__adddf3>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	f7f4 fa44 	bl	800087c <__aeabi_ddiv>
 800c3f4:	f04f 0a02 	mov.w	sl, #2
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	460d      	mov	r5, r1
 800c3fc:	e743      	b.n	800c286 <atan+0xce>
 800c3fe:	462b      	mov	r3, r5
 800c400:	ee10 2a10 	vmov	r2, s0
 800c404:	4939      	ldr	r1, [pc, #228]	; (800c4ec <atan+0x334>)
 800c406:	2000      	movs	r0, #0
 800c408:	f7f4 fa38 	bl	800087c <__aeabi_ddiv>
 800c40c:	f04f 0a03 	mov.w	sl, #3
 800c410:	4604      	mov	r4, r0
 800c412:	460d      	mov	r5, r1
 800c414:	e737      	b.n	800c286 <atan+0xce>
 800c416:	4b36      	ldr	r3, [pc, #216]	; (800c4f0 <atan+0x338>)
 800c418:	4e36      	ldr	r6, [pc, #216]	; (800c4f4 <atan+0x33c>)
 800c41a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c41e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c422:	e9da 2300 	ldrd	r2, r3, [sl]
 800c426:	f7f3 ff47 	bl	80002b8 <__aeabi_dsub>
 800c42a:	4622      	mov	r2, r4
 800c42c:	462b      	mov	r3, r5
 800c42e:	f7f3 ff43 	bl	80002b8 <__aeabi_dsub>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c43a:	f7f3 ff3d 	bl	80002b8 <__aeabi_dsub>
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	4604      	mov	r4, r0
 800c444:	460d      	mov	r5, r1
 800c446:	f6bf aed6 	bge.w	800c1f6 <atan+0x3e>
 800c44a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c44e:	461d      	mov	r5, r3
 800c450:	e6d1      	b.n	800c1f6 <atan+0x3e>
 800c452:	a51d      	add	r5, pc, #116	; (adr r5, 800c4c8 <atan+0x310>)
 800c454:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c458:	e6cd      	b.n	800c1f6 <atan+0x3e>
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w
 800c460:	54442d18 	.word	0x54442d18
 800c464:	bff921fb 	.word	0xbff921fb
 800c468:	8800759c 	.word	0x8800759c
 800c46c:	7e37e43c 	.word	0x7e37e43c
 800c470:	e322da11 	.word	0xe322da11
 800c474:	3f90ad3a 	.word	0x3f90ad3a
 800c478:	24760deb 	.word	0x24760deb
 800c47c:	3fa97b4b 	.word	0x3fa97b4b
 800c480:	a0d03d51 	.word	0xa0d03d51
 800c484:	3fb10d66 	.word	0x3fb10d66
 800c488:	c54c206e 	.word	0xc54c206e
 800c48c:	3fb745cd 	.word	0x3fb745cd
 800c490:	920083ff 	.word	0x920083ff
 800c494:	3fc24924 	.word	0x3fc24924
 800c498:	5555550d 	.word	0x5555550d
 800c49c:	3fd55555 	.word	0x3fd55555
 800c4a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c4a4:	bfa2b444 	.word	0xbfa2b444
 800c4a8:	52defd9a 	.word	0x52defd9a
 800c4ac:	3fadde2d 	.word	0x3fadde2d
 800c4b0:	af749a6d 	.word	0xaf749a6d
 800c4b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c4b8:	fe231671 	.word	0xfe231671
 800c4bc:	3fbc71c6 	.word	0x3fbc71c6
 800c4c0:	9998ebc4 	.word	0x9998ebc4
 800c4c4:	3fc99999 	.word	0x3fc99999
 800c4c8:	54442d18 	.word	0x54442d18
 800c4cc:	3ff921fb 	.word	0x3ff921fb
 800c4d0:	440fffff 	.word	0x440fffff
 800c4d4:	7ff00000 	.word	0x7ff00000
 800c4d8:	3fdbffff 	.word	0x3fdbffff
 800c4dc:	3ff00000 	.word	0x3ff00000
 800c4e0:	3ff2ffff 	.word	0x3ff2ffff
 800c4e4:	40038000 	.word	0x40038000
 800c4e8:	3ff80000 	.word	0x3ff80000
 800c4ec:	bff00000 	.word	0xbff00000
 800c4f0:	0800cff8 	.word	0x0800cff8
 800c4f4:	0800cfd8 	.word	0x0800cfd8

0800c4f8 <fabs>:
 800c4f8:	ec51 0b10 	vmov	r0, r1, d0
 800c4fc:	ee10 2a10 	vmov	r2, s0
 800c500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c504:	ec43 2b10 	vmov	d0, r2, r3
 800c508:	4770      	bx	lr

0800c50a <finite>:
 800c50a:	b082      	sub	sp, #8
 800c50c:	ed8d 0b00 	vstr	d0, [sp]
 800c510:	9801      	ldr	r0, [sp, #4]
 800c512:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c516:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c51a:	0fc0      	lsrs	r0, r0, #31
 800c51c:	b002      	add	sp, #8
 800c51e:	4770      	bx	lr

0800c520 <floor>:
 800c520:	ec51 0b10 	vmov	r0, r1, d0
 800c524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c528:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c52c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c530:	2e13      	cmp	r6, #19
 800c532:	ee10 5a10 	vmov	r5, s0
 800c536:	ee10 8a10 	vmov	r8, s0
 800c53a:	460c      	mov	r4, r1
 800c53c:	dc32      	bgt.n	800c5a4 <floor+0x84>
 800c53e:	2e00      	cmp	r6, #0
 800c540:	da14      	bge.n	800c56c <floor+0x4c>
 800c542:	a333      	add	r3, pc, #204	; (adr r3, 800c610 <floor+0xf0>)
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	f7f3 feb8 	bl	80002bc <__adddf3>
 800c54c:	2200      	movs	r2, #0
 800c54e:	2300      	movs	r3, #0
 800c550:	f7f4 fafa 	bl	8000b48 <__aeabi_dcmpgt>
 800c554:	b138      	cbz	r0, 800c566 <floor+0x46>
 800c556:	2c00      	cmp	r4, #0
 800c558:	da57      	bge.n	800c60a <floor+0xea>
 800c55a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c55e:	431d      	orrs	r5, r3
 800c560:	d001      	beq.n	800c566 <floor+0x46>
 800c562:	4c2d      	ldr	r4, [pc, #180]	; (800c618 <floor+0xf8>)
 800c564:	2500      	movs	r5, #0
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	e025      	b.n	800c5b8 <floor+0x98>
 800c56c:	4f2b      	ldr	r7, [pc, #172]	; (800c61c <floor+0xfc>)
 800c56e:	4137      	asrs	r7, r6
 800c570:	ea01 0307 	and.w	r3, r1, r7
 800c574:	4303      	orrs	r3, r0
 800c576:	d01f      	beq.n	800c5b8 <floor+0x98>
 800c578:	a325      	add	r3, pc, #148	; (adr r3, 800c610 <floor+0xf0>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f3 fe9d 	bl	80002bc <__adddf3>
 800c582:	2200      	movs	r2, #0
 800c584:	2300      	movs	r3, #0
 800c586:	f7f4 fadf 	bl	8000b48 <__aeabi_dcmpgt>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d0eb      	beq.n	800c566 <floor+0x46>
 800c58e:	2c00      	cmp	r4, #0
 800c590:	bfbe      	ittt	lt
 800c592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c596:	fa43 f606 	asrlt.w	r6, r3, r6
 800c59a:	19a4      	addlt	r4, r4, r6
 800c59c:	ea24 0407 	bic.w	r4, r4, r7
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	e7e0      	b.n	800c566 <floor+0x46>
 800c5a4:	2e33      	cmp	r6, #51	; 0x33
 800c5a6:	dd0b      	ble.n	800c5c0 <floor+0xa0>
 800c5a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5ac:	d104      	bne.n	800c5b8 <floor+0x98>
 800c5ae:	ee10 2a10 	vmov	r2, s0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	f7f3 fe82 	bl	80002bc <__adddf3>
 800c5b8:	ec41 0b10 	vmov	d0, r0, r1
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c8:	fa23 f707 	lsr.w	r7, r3, r7
 800c5cc:	4207      	tst	r7, r0
 800c5ce:	d0f3      	beq.n	800c5b8 <floor+0x98>
 800c5d0:	a30f      	add	r3, pc, #60	; (adr r3, 800c610 <floor+0xf0>)
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	f7f3 fe71 	bl	80002bc <__adddf3>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f7f4 fab3 	bl	8000b48 <__aeabi_dcmpgt>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0bf      	beq.n	800c566 <floor+0x46>
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	da02      	bge.n	800c5f0 <floor+0xd0>
 800c5ea:	2e14      	cmp	r6, #20
 800c5ec:	d103      	bne.n	800c5f6 <floor+0xd6>
 800c5ee:	3401      	adds	r4, #1
 800c5f0:	ea25 0507 	bic.w	r5, r5, r7
 800c5f4:	e7b7      	b.n	800c566 <floor+0x46>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5fc:	fa03 f606 	lsl.w	r6, r3, r6
 800c600:	4435      	add	r5, r6
 800c602:	4545      	cmp	r5, r8
 800c604:	bf38      	it	cc
 800c606:	18e4      	addcc	r4, r4, r3
 800c608:	e7f2      	b.n	800c5f0 <floor+0xd0>
 800c60a:	2500      	movs	r5, #0
 800c60c:	462c      	mov	r4, r5
 800c60e:	e7aa      	b.n	800c566 <floor+0x46>
 800c610:	8800759c 	.word	0x8800759c
 800c614:	7e37e43c 	.word	0x7e37e43c
 800c618:	bff00000 	.word	0xbff00000
 800c61c:	000fffff 	.word	0x000fffff

0800c620 <scalbn>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	ec55 4b10 	vmov	r4, r5, d0
 800c626:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c62a:	4606      	mov	r6, r0
 800c62c:	462b      	mov	r3, r5
 800c62e:	b99a      	cbnz	r2, 800c658 <scalbn+0x38>
 800c630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c634:	4323      	orrs	r3, r4
 800c636:	d036      	beq.n	800c6a6 <scalbn+0x86>
 800c638:	4b39      	ldr	r3, [pc, #228]	; (800c720 <scalbn+0x100>)
 800c63a:	4629      	mov	r1, r5
 800c63c:	ee10 0a10 	vmov	r0, s0
 800c640:	2200      	movs	r2, #0
 800c642:	f7f3 fff1 	bl	8000628 <__aeabi_dmul>
 800c646:	4b37      	ldr	r3, [pc, #220]	; (800c724 <scalbn+0x104>)
 800c648:	429e      	cmp	r6, r3
 800c64a:	4604      	mov	r4, r0
 800c64c:	460d      	mov	r5, r1
 800c64e:	da10      	bge.n	800c672 <scalbn+0x52>
 800c650:	a32b      	add	r3, pc, #172	; (adr r3, 800c700 <scalbn+0xe0>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	e03a      	b.n	800c6ce <scalbn+0xae>
 800c658:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c65c:	428a      	cmp	r2, r1
 800c65e:	d10c      	bne.n	800c67a <scalbn+0x5a>
 800c660:	ee10 2a10 	vmov	r2, s0
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f3 fe28 	bl	80002bc <__adddf3>
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	e019      	b.n	800c6a6 <scalbn+0x86>
 800c672:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c676:	460b      	mov	r3, r1
 800c678:	3a36      	subs	r2, #54	; 0x36
 800c67a:	4432      	add	r2, r6
 800c67c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c680:	428a      	cmp	r2, r1
 800c682:	dd08      	ble.n	800c696 <scalbn+0x76>
 800c684:	2d00      	cmp	r5, #0
 800c686:	a120      	add	r1, pc, #128	; (adr r1, 800c708 <scalbn+0xe8>)
 800c688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68c:	da1c      	bge.n	800c6c8 <scalbn+0xa8>
 800c68e:	a120      	add	r1, pc, #128	; (adr r1, 800c710 <scalbn+0xf0>)
 800c690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c694:	e018      	b.n	800c6c8 <scalbn+0xa8>
 800c696:	2a00      	cmp	r2, #0
 800c698:	dd08      	ble.n	800c6ac <scalbn+0x8c>
 800c69a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c69e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6a6:	ec45 4b10 	vmov	d0, r4, r5
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6b0:	da19      	bge.n	800c6e6 <scalbn+0xc6>
 800c6b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6b6:	429e      	cmp	r6, r3
 800c6b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6bc:	dd0a      	ble.n	800c6d4 <scalbn+0xb4>
 800c6be:	a112      	add	r1, pc, #72	; (adr r1, 800c708 <scalbn+0xe8>)
 800c6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1e2      	bne.n	800c68e <scalbn+0x6e>
 800c6c8:	a30f      	add	r3, pc, #60	; (adr r3, 800c708 <scalbn+0xe8>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 ffab 	bl	8000628 <__aeabi_dmul>
 800c6d2:	e7cb      	b.n	800c66c <scalbn+0x4c>
 800c6d4:	a10a      	add	r1, pc, #40	; (adr r1, 800c700 <scalbn+0xe0>)
 800c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d0b8      	beq.n	800c650 <scalbn+0x30>
 800c6de:	a10e      	add	r1, pc, #56	; (adr r1, 800c718 <scalbn+0xf8>)
 800c6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e4:	e7b4      	b.n	800c650 <scalbn+0x30>
 800c6e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6ea:	3236      	adds	r2, #54	; 0x36
 800c6ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <scalbn+0x108>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	e7e8      	b.n	800c6ce <scalbn+0xae>
 800c6fc:	f3af 8000 	nop.w
 800c700:	c2f8f359 	.word	0xc2f8f359
 800c704:	01a56e1f 	.word	0x01a56e1f
 800c708:	8800759c 	.word	0x8800759c
 800c70c:	7e37e43c 	.word	0x7e37e43c
 800c710:	8800759c 	.word	0x8800759c
 800c714:	fe37e43c 	.word	0xfe37e43c
 800c718:	c2f8f359 	.word	0xc2f8f359
 800c71c:	81a56e1f 	.word	0x81a56e1f
 800c720:	43500000 	.word	0x43500000
 800c724:	ffff3cb0 	.word	0xffff3cb0
 800c728:	3c900000 	.word	0x3c900000

0800c72c <_sbrk>:
 800c72c:	4a04      	ldr	r2, [pc, #16]	; (800c740 <_sbrk+0x14>)
 800c72e:	6811      	ldr	r1, [r2, #0]
 800c730:	4603      	mov	r3, r0
 800c732:	b909      	cbnz	r1, 800c738 <_sbrk+0xc>
 800c734:	4903      	ldr	r1, [pc, #12]	; (800c744 <_sbrk+0x18>)
 800c736:	6011      	str	r1, [r2, #0]
 800c738:	6810      	ldr	r0, [r2, #0]
 800c73a:	4403      	add	r3, r0
 800c73c:	6013      	str	r3, [r2, #0]
 800c73e:	4770      	bx	lr
 800c740:	20000644 	.word	0x20000644
 800c744:	20000648 	.word	0x20000648

0800c748 <_init>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr

0800c754 <_fini>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	bf00      	nop
 800c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75a:	bc08      	pop	{r3}
 800c75c:	469e      	mov	lr, r3
 800c75e:	4770      	bx	lr
