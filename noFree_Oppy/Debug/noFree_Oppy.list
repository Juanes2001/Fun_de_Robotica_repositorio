
noFree_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b898  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800ba38  0800ba38  0001ba38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c168  0800c168  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c168  0800c168  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c168  0800c168  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c168  0800c168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001e0  0800c350  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800c350  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075d2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ca  00000000  00000000  000277e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00028eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00029560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011164  00000000  00000000  00029b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000859a  00000000  00000000  0003acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fad  00000000  00000000  00043246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c1f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003110  00000000  00000000  0009c244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba20 	.word	0x0800ba20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ba20 	.word	0x0800ba20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af08      	add	r7, sp, #32

	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <main+0x14c>)
 8000ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca4:	4a4f      	ldr	r2, [pc, #316]	; (8000de4 <main+0x14c>)
 8000ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000caa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_enableMaxFrequencies(RCC_100MHz); // Velocidad maxima del MCU
 8000cae:	2008      	movs	r0, #8
 8000cb0:	f004 faa4 	bl	80051fc <RCC_enableMaxFrequencies>
	inSystem (); // Configuracion global de los perifericos
 8000cb4:	f000 f8c4 	bl	8000e40 <inSystem>

	//Calculamos el setpoint en la que queremos que el robot controle la velocidad de cada motor
	velSetPoint = (0.00169*fixed_dutty + 0.0619);
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <main+0x150>)
 8000cba:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <main+0x154>)
 8000cbc:	601a      	str	r2, [r3, #0]

	// calibramos el Giroscopio para que tengamos una medida de error controlable
	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z); // Calibramos el giroscopio que usaremos
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	484b      	ldr	r0, [pc, #300]	; (8000df0 <main+0x158>)
 8000cc2:	f000 fb5f 	bl	8001384 <calibracionGyros>
 8000cc6:	ee10 3a10 	vmov	r3, s0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc44 	bl	8000558 <__aeabi_f2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4947      	ldr	r1, [pc, #284]	; (8000df4 <main+0x15c>)
 8000cd6:	e9c1 2300 	strd	r2, r3, [r1]

    /* Loop forever */
	while(1){

		if (rxData != '\0'){
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <main+0x160>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d030      	beq.n	8000d44 <main+0xac>
//			writeChar(&handlerUSART, rxData);
			bufferReception[counterReception] = rxData;
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <main+0x164>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <main+0x160>)
 8000cea:	7819      	ldrb	r1, [r3, #0]
 8000cec:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <main+0x168>)
 8000cee:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000cf0:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <main+0x164>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <main+0x164>)
 8000cfa:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <main+0x160>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b40      	cmp	r3, #64	; 0x40
 8000d02:	d10c      	bne.n	8000d1e <main+0x86>
				doneTransaction = SET;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <main+0x16c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception-1] = '\0';
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <main+0x164>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a3b      	ldr	r2, [pc, #236]	; (8000e00 <main+0x168>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <main+0x164>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e012      	b.n	8000d44 <main+0xac>

			}else if (rxData == 'z'){
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <main+0x160>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b7a      	cmp	r3, #122	; 0x7a
 8000d24:	d10e      	bne.n	8000d44 <main+0xac>

				memset(bufferReception, 0, sizeof(bufferReception));
 8000d26:	2240      	movs	r2, #64	; 0x40
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <main+0x168>)
 8000d2c:	f005 fd76 	bl	800681c <memset>
				counterReception = 0;
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <main+0x164>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "Buffer Vaciado\n \r");
 8000d36:	4934      	ldr	r1, [pc, #208]	; (8000e08 <main+0x170>)
 8000d38:	4834      	ldr	r0, [pc, #208]	; (8000e0c <main+0x174>)
 8000d3a:	f005 f993 	bl	8006064 <writeMsg>
				rxData = '\0';
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <main+0x160>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

		}


		// En esta parte ya usamos las medidas halladas para mover el robot en linea recta dependiendo de la operacion y el comando deseado
		if (flag_Go_Straigh){
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <main+0x178>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <main+0xf6>

			// Si llegamos a este comando, lo que se quiere es ir en linea recta usando un control PID

			go(handler_Motor_Array,
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <main+0x15c>)
 8000d4e:	ed93 7b00 	vldr	d7, [r3]
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <main+0x17c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <main+0x180>)
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	4930      	ldr	r1, [pc, #192]	; (8000e1c <main+0x184>)
 8000d5c:	7809      	ldrb	r1, [r1, #0]
 8000d5e:	4830      	ldr	r0, [pc, #192]	; (8000e20 <main+0x188>)
 8000d60:	7800      	ldrb	r0, [r0, #0]
 8000d62:	4c30      	ldr	r4, [pc, #192]	; (8000e24 <main+0x18c>)
 8000d64:	8824      	ldrh	r4, [r4, #0]
 8000d66:	f8ad 4018 	strh.w	r4, [sp, #24]
 8000d6a:	4c2f      	ldr	r4, [pc, #188]	; (8000e28 <main+0x190>)
 8000d6c:	9405      	str	r4, [sp, #20]
 8000d6e:	9004      	str	r0, [sp, #16]
 8000d70:	9103      	str	r1, [sp, #12]
 8000d72:	9202      	str	r2, [sp, #8]
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <main+0x194>)
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d7e:	eef0 0a67 	vmov.f32	s1, s15
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <main+0x198>)
 8000d84:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <main+0x19c>)
 8000d86:	491a      	ldr	r1, [pc, #104]	; (8000df0 <main+0x158>)
 8000d88:	482b      	ldr	r0, [pc, #172]	; (8000e38 <main+0x1a0>)
 8000d8a:	f001 f953 	bl	8002034 <go>
			   flag_control,
			   userMsg,
			   Mode_dir);
		}

		if (flag_GoTo_Straigh){
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <main+0x1a4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0a1      	beq.n	8000cda <main+0x42>

			// SI llegamos a este comando, lo que se quiere es ir en linea recta a cierta distancia usando un control PID
			goTo(handler_Motor_Array,
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <main+0x15c>)
 8000d98:	ed93 7b00 	vldr	d7, [r3]
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <main+0x17c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <main+0x180>)
 8000da2:	7812      	ldrb	r2, [r2, #0]
 8000da4:	491d      	ldr	r1, [pc, #116]	; (8000e1c <main+0x184>)
 8000da6:	7809      	ldrb	r1, [r1, #0]
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <main+0x188>)
 8000daa:	7800      	ldrb	r0, [r0, #0]
				 Mode,
				 flag_angulo,
				 flag_measurements,
				 flag_control,
				 userMsg,
				 parameters_Path_Robot.line_Distance,
 8000dac:	4c20      	ldr	r4, [pc, #128]	; (8000e30 <main+0x198>)
 8000dae:	6c24      	ldr	r4, [r4, #64]	; 0x40
			goTo(handler_Motor_Array,
 8000db0:	4625      	mov	r5, r4
 8000db2:	4c1c      	ldr	r4, [pc, #112]	; (8000e24 <main+0x18c>)
 8000db4:	8824      	ldrh	r4, [r4, #0]
 8000db6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8000dba:	9506      	str	r5, [sp, #24]
 8000dbc:	4c1a      	ldr	r4, [pc, #104]	; (8000e28 <main+0x190>)
 8000dbe:	9405      	str	r4, [sp, #20]
 8000dc0:	9004      	str	r0, [sp, #16]
 8000dc2:	9103      	str	r1, [sp, #12]
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <main+0x194>)
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd0:	eef0 0a67 	vmov.f32	s1, s15
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <main+0x198>)
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <main+0x19c>)
 8000dd8:	4905      	ldr	r1, [pc, #20]	; (8000df0 <main+0x158>)
 8000dda:	4817      	ldr	r0, [pc, #92]	; (8000e38 <main+0x1a0>)
 8000ddc:	f000 ff26 	bl	8001c2c <goTo>
		if (rxData != '\0'){
 8000de0:	e77b      	b.n	8000cda <main+0x42>
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	200005b0 	.word	0x200005b0
 8000dec:	3ddfaebc 	.word	0x3ddfaebc
 8000df0:	200003b4 	.word	0x200003b4
 8000df4:	20000590 	.word	0x20000590
 8000df8:	20000466 	.word	0x20000466
 8000dfc:	20000464 	.word	0x20000464
 8000e00:	20000424 	.word	0x20000424
 8000e04:	20000465 	.word	0x20000465
 8000e08:	0800ba38 	.word	0x0800ba38
 8000e0c:	20000314 	.word	0x20000314
 8000e10:	200004ad 	.word	0x200004ad
 8000e14:	200004aa 	.word	0x200004aa
 8000e18:	200004ab 	.word	0x200004ab
 8000e1c:	200004ac 	.word	0x200004ac
 8000e20:	200004af 	.word	0x200004af
 8000e24:	200004a8 	.word	0x200004a8
 8000e28:	20000468 	.word	0x20000468
 8000e2c:	200004b8 	.word	0x200004b8
 8000e30:	200004d8 	.word	0x200004d8
 8000e34:	20000540 	.word	0x20000540
 8000e38:	200003c4 	.word	0x200003c4
 8000e3c:	200004ae 	.word	0x200004ae

08000e40 <inSystem>:
}




void inSystem (void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000e44:	4bb0      	ldr	r3, [pc, #704]	; (8001108 <inSystem+0x2c8>)
 8000e46:	4ab1      	ldr	r2, [pc, #708]	; (800110c <inSystem+0x2cc>)
 8000e48:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000e4a:	4baf      	ldr	r3, [pc, #700]	; (8001108 <inSystem+0x2c8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000e50:	4bad      	ldr	r3, [pc, #692]	; (8001108 <inSystem+0x2c8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000e56:	4bac      	ldr	r3, [pc, #688]	; (8001108 <inSystem+0x2c8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000e5c:	4baa      	ldr	r3, [pc, #680]	; (8001108 <inSystem+0x2c8>)
 8000e5e:	2205      	movs	r2, #5
 8000e60:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e62:	4ba9      	ldr	r3, [pc, #676]	; (8001108 <inSystem+0x2c8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000e68:	4ba7      	ldr	r3, [pc, #668]	; (8001108 <inSystem+0x2c8>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000e6e:	48a6      	ldr	r0, [pc, #664]	; (8001108 <inSystem+0x2c8>)
 8000e70:	f002 ff26 	bl	8003cc0 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000e74:	2101      	movs	r1, #1
 8000e76:	48a4      	ldr	r0, [pc, #656]	; (8001108 <inSystem+0x2c8>)
 8000e78:	f003 f84c 	bl	8003f14 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000e7c:	4ba4      	ldr	r3, [pc, #656]	; (8001110 <inSystem+0x2d0>)
 8000e7e:	4aa5      	ldr	r2, [pc, #660]	; (8001114 <inSystem+0x2d4>)
 8000e80:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000e82:	4ba3      	ldr	r3, [pc, #652]	; (8001110 <inSystem+0x2d0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000e88:	4ba1      	ldr	r3, [pc, #644]	; (8001110 <inSystem+0x2d0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000e8e:	4ba0      	ldr	r3, [pc, #640]	; (8001110 <inSystem+0x2d0>)
 8000e90:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e94:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 500;
 8000e96:	4b9e      	ldr	r3, [pc, #632]	; (8001110 <inSystem+0x2d0>)
 8000e98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e9c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000e9e:	489c      	ldr	r0, [pc, #624]	; (8001110 <inSystem+0x2d0>)
 8000ea0:	f001 faa2 	bl	80023e8 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000ea4:	489a      	ldr	r0, [pc, #616]	; (8001110 <inSystem+0x2d0>)
 8000ea6:	f001 fe9b 	bl	8002be0 <startTimer>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000eaa:	f001 fa81 	bl	80023b0 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameter_PID_distace);
 8000eae:	499a      	ldr	r1, [pc, #616]	; (8001118 <inSystem+0x2d8>)
 8000eb0:	489a      	ldr	r0, [pc, #616]	; (800111c <inSystem+0x2dc>)
 8000eb2:	f000 fdf1 	bl	8001a98 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000eb6:	4b9a      	ldr	r3, [pc, #616]	; (8001120 <inSystem+0x2e0>)
 8000eb8:	4a94      	ldr	r2, [pc, #592]	; (800110c <inSystem+0x2cc>)
 8000eba:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000ebc:	4b98      	ldr	r3, [pc, #608]	; (8001120 <inSystem+0x2e0>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000ec2:	4b97      	ldr	r3, [pc, #604]	; (8001120 <inSystem+0x2e0>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ec8:	4b95      	ldr	r3, [pc, #596]	; (8001120 <inSystem+0x2e0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000ece:	4b94      	ldr	r3, [pc, #592]	; (8001120 <inSystem+0x2e0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ed4:	4b92      	ldr	r3, [pc, #584]	; (8001120 <inSystem+0x2e0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000eda:	4b91      	ldr	r3, [pc, #580]	; (8001120 <inSystem+0x2e0>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000ee0:	488f      	ldr	r0, [pc, #572]	; (8001120 <inSystem+0x2e0>)
 8000ee2:	f002 feed 	bl	8003cc0 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000ee6:	4b8f      	ldr	r3, [pc, #572]	; (8001124 <inSystem+0x2e4>)
 8000ee8:	4a8f      	ldr	r2, [pc, #572]	; (8001128 <inSystem+0x2e8>)
 8000eea:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000eec:	4b8d      	ldr	r3, [pc, #564]	; (8001124 <inSystem+0x2e4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000ef2:	4b8c      	ldr	r3, [pc, #560]	; (8001124 <inSystem+0x2e4>)
 8000ef4:	4a8d      	ldr	r2, [pc, #564]	; (800112c <inSystem+0x2ec>)
 8000ef6:	611a      	str	r2, [r3, #16]
	counter = fixed_dutty;
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <inSystem+0x2f0>)
 8000efa:	221c      	movs	r2, #28
 8000efc:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000efe:	4b89      	ldr	r3, [pc, #548]	; (8001124 <inSystem+0x2e4>)
 8000f00:	2221      	movs	r2, #33	; 0x21
 8000f02:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000f04:	4b87      	ldr	r3, [pc, #540]	; (8001124 <inSystem+0x2e4>)
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000f0a:	4b86      	ldr	r3, [pc, #536]	; (8001124 <inSystem+0x2e4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000f10:	4b84      	ldr	r3, [pc, #528]	; (8001124 <inSystem+0x2e4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000f16:	4883      	ldr	r0, [pc, #524]	; (8001124 <inSystem+0x2e4>)
 8000f18:	f003 fcdc 	bl	80048d4 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8000f1c:	4881      	ldr	r0, [pc, #516]	; (8001124 <inSystem+0x2e4>)
 8000f1e:	f003 fdc3 	bl	8004aa8 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8000f22:	4b84      	ldr	r3, [pc, #528]	; (8001134 <inSystem+0x2f4>)
 8000f24:	4a79      	ldr	r2, [pc, #484]	; (800110c <inSystem+0x2cc>)
 8000f26:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f28:	4b82      	ldr	r3, [pc, #520]	; (8001134 <inSystem+0x2f4>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f2e:	4b81      	ldr	r3, [pc, #516]	; (8001134 <inSystem+0x2f4>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <inSystem+0x2f4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000f3a:	4b7e      	ldr	r3, [pc, #504]	; (8001134 <inSystem+0x2f4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f40:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <inSystem+0x2f4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <inSystem+0x2f4>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8000f4c:	4879      	ldr	r0, [pc, #484]	; (8001134 <inSystem+0x2f4>)
 8000f4e:	f002 feb7 	bl	8003cc0 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8000f52:	4b79      	ldr	r3, [pc, #484]	; (8001138 <inSystem+0x2f8>)
 8000f54:	4a74      	ldr	r2, [pc, #464]	; (8001128 <inSystem+0x2e8>)
 8000f56:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8000f58:	4b77      	ldr	r3, [pc, #476]	; (8001138 <inSystem+0x2f8>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <inSystem+0x2f8>)
 8000f60:	4a72      	ldr	r2, [pc, #456]	; (800112c <inSystem+0x2ec>)
 8000f62:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <inSystem+0x2f8>)
 8000f66:	2221      	movs	r2, #33	; 0x21
 8000f68:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <inSystem+0x2f8>)
 8000f6c:	2264      	movs	r2, #100	; 0x64
 8000f6e:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <inSystem+0x2f8>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000f76:	4b70      	ldr	r3, [pc, #448]	; (8001138 <inSystem+0x2f8>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8000f7c:	486e      	ldr	r0, [pc, #440]	; (8001138 <inSystem+0x2f8>)
 8000f7e:	f003 fca9 	bl	80048d4 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8000f82:	486d      	ldr	r0, [pc, #436]	; (8001138 <inSystem+0x2f8>)
 8000f84:	f003 fd90 	bl	8004aa8 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 8000f88:	4b6c      	ldr	r3, [pc, #432]	; (800113c <inSystem+0x2fc>)
 8000f8a:	4a6d      	ldr	r2, [pc, #436]	; (8001140 <inSystem+0x300>)
 8000f8c:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <inSystem+0x2fc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f94:	4b69      	ldr	r3, [pc, #420]	; (800113c <inSystem+0x2fc>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <inSystem+0x2fc>)
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fa0:	4b66      	ldr	r3, [pc, #408]	; (800113c <inSystem+0x2fc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <inSystem+0x2fc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fac:	4b63      	ldr	r3, [pc, #396]	; (800113c <inSystem+0x2fc>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8000fb2:	4862      	ldr	r0, [pc, #392]	; (800113c <inSystem+0x2fc>)
 8000fb4:	f002 fe84 	bl	8003cc0 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4860      	ldr	r0, [pc, #384]	; (800113c <inSystem+0x2fc>)
 8000fbc:	f002 ffd5 	bl	8003f6a <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <inSystem+0x304>)
 8000fc2:	4a5f      	ldr	r2, [pc, #380]	; (8001140 <inSystem+0x300>)
 8000fc4:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <inSystem+0x304>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <inSystem+0x304>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <inSystem+0x304>)
 8000fd4:	220b      	movs	r2, #11
 8000fd6:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fd8:	4b5a      	ldr	r3, [pc, #360]	; (8001144 <inSystem+0x304>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <inSystem+0x304>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <inSystem+0x304>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8000fea:	4856      	ldr	r0, [pc, #344]	; (8001144 <inSystem+0x304>)
 8000fec:	f002 fe68 	bl	8003cc0 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4854      	ldr	r0, [pc, #336]	; (8001144 <inSystem+0x304>)
 8000ff4:	f002 ffb9 	bl	8003f6a <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8000ff8:	4b53      	ldr	r3, [pc, #332]	; (8001148 <inSystem+0x308>)
 8000ffa:	4a51      	ldr	r2, [pc, #324]	; (8001140 <inSystem+0x300>)
 8000ffc:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000ffe:	4b52      	ldr	r3, [pc, #328]	; (8001148 <inSystem+0x308>)
 8001000:	2200      	movs	r2, #0
 8001002:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <inSystem+0x308>)
 8001006:	2201      	movs	r2, #1
 8001008:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <inSystem+0x308>)
 800100c:	220c      	movs	r2, #12
 800100e:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <inSystem+0x308>)
 8001012:	2200      	movs	r2, #0
 8001014:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <inSystem+0x308>)
 8001018:	2200      	movs	r2, #0
 800101a:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <inSystem+0x308>)
 800101e:	2202      	movs	r2, #2
 8001020:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001022:	4849      	ldr	r0, [pc, #292]	; (8001148 <inSystem+0x308>)
 8001024:	f002 fe4c 	bl	8003cc0 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8001028:	2100      	movs	r1, #0
 800102a:	4847      	ldr	r0, [pc, #284]	; (8001148 <inSystem+0x308>)
 800102c:	f002 ff9d 	bl	8003f6a <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <inSystem+0x30c>)
 8001032:	4a47      	ldr	r2, [pc, #284]	; (8001150 <inSystem+0x310>)
 8001034:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001036:	4b45      	ldr	r3, [pc, #276]	; (800114c <inSystem+0x30c>)
 8001038:	2200      	movs	r2, #0
 800103a:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <inSystem+0x30c>)
 800103e:	2201      	movs	r2, #1
 8001040:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <inSystem+0x30c>)
 8001044:	2202      	movs	r2, #2
 8001046:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <inSystem+0x30c>)
 800104a:	2200      	movs	r2, #0
 800104c:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <inSystem+0x30c>)
 8001050:	2200      	movs	r2, #0
 8001052:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001054:	4b3d      	ldr	r3, [pc, #244]	; (800114c <inSystem+0x30c>)
 8001056:	2202      	movs	r2, #2
 8001058:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 800105a:	483c      	ldr	r0, [pc, #240]	; (800114c <inSystem+0x30c>)
 800105c:	f002 fe30 	bl	8003cc0 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 8001060:	2100      	movs	r1, #0
 8001062:	483a      	ldr	r0, [pc, #232]	; (800114c <inSystem+0x30c>)
 8001064:	f002 ff81 	bl	8003f6a <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <inSystem+0x314>)
 800106a:	4a35      	ldr	r2, [pc, #212]	; (8001140 <inSystem+0x300>)
 800106c:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <inSystem+0x314>)
 8001070:	2200      	movs	r2, #0
 8001072:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <inSystem+0x314>)
 8001076:	2200      	movs	r2, #0
 8001078:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <inSystem+0x314>)
 800107c:	2201      	movs	r2, #1
 800107e:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <inSystem+0x314>)
 8001082:	2200      	movs	r2, #0
 8001084:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <inSystem+0x314>)
 8001088:	2200      	movs	r2, #0
 800108a:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <inSystem+0x314>)
 800108e:	2202      	movs	r2, #2
 8001090:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <inSystem+0x318>)
 8001094:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <inSystem+0x314>)
 8001096:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <inSystem+0x318>)
 800109a:	2202      	movs	r2, #2
 800109c:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800109e:	482e      	ldr	r0, [pc, #184]	; (8001158 <inSystem+0x318>)
 80010a0:	f001 fde0 	bl	8002c64 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <inSystem+0x31c>)
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <inSystem+0x300>)
 80010a8:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <inSystem+0x31c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <inSystem+0x31c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <inSystem+0x31c>)
 80010b8:	2203      	movs	r2, #3
 80010ba:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <inSystem+0x31c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <inSystem+0x31c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <inSystem+0x31c>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <inSystem+0x320>)
 80010d0:	4a22      	ldr	r2, [pc, #136]	; (800115c <inSystem+0x31c>)
 80010d2:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <inSystem+0x320>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <inSystem+0x320>)
 80010dc:	f001 fdc2 	bl	8002c64 <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <inSystem+0x324>)
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <inSystem+0x2cc>)
 80010e4:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <inSystem+0x324>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <inSystem+0x324>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <inSystem+0x324>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <inSystem+0x324>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <inSystem+0x324>)
 8001100:	2200      	movs	r2, #0
 8001102:	71da      	strb	r2, [r3, #7]
 8001104:	e030      	b.n	8001168 <inSystem+0x328>
 8001106:	bf00      	nop
 8001108:	200001fc 	.word	0x200001fc
 800110c:	40020000 	.word	0x40020000
 8001110:	200002a8 	.word	0x200002a8
 8001114:	40000400 	.word	0x40000400
 8001118:	200004b8 	.word	0x200004b8
 800111c:	200003c4 	.word	0x200003c4
 8001120:	20000208 	.word	0x20000208
 8001124:	200002e4 	.word	0x200002e4
 8001128:	40000c00 	.word	0x40000c00
 800112c:	41e00000 	.word	0x41e00000
 8001130:	200005b4 	.word	0x200005b4
 8001134:	20000214 	.word	0x20000214
 8001138:	200002fc 	.word	0x200002fc
 800113c:	20000244 	.word	0x20000244
 8001140:	40020800 	.word	0x40020800
 8001144:	20000238 	.word	0x20000238
 8001148:	2000025c 	.word	0x2000025c
 800114c:	20000250 	.word	0x20000250
 8001150:	40020c00 	.word	0x40020c00
 8001154:	20000268 	.word	0x20000268
 8001158:	20000298 	.word	0x20000298
 800115c:	20000274 	.word	0x20000274
 8001160:	200002a0 	.word	0x200002a0
 8001164:	2000022c 	.word	0x2000022c
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <inSystem+0x45c>)
 800116a:	2203      	movs	r2, #3
 800116c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 800116e:	484b      	ldr	r0, [pc, #300]	; (800129c <inSystem+0x45c>)
 8001170:	f002 fda6 	bl	8003cc0 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <inSystem+0x460>)
 8001176:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <inSystem+0x464>)
 8001178:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <inSystem+0x460>)
 800117c:	2207      	movs	r2, #7
 800117e:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <inSystem+0x460>)
 8001182:	2202      	movs	r2, #2
 8001184:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <inSystem+0x460>)
 8001188:	2200      	movs	r2, #0
 800118a:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <inSystem+0x460>)
 800118e:	2203      	movs	r2, #3
 8001190:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <inSystem+0x460>)
 8001194:	2200      	movs	r2, #0
 8001196:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <inSystem+0x460>)
 800119a:	2203      	movs	r2, #3
 800119c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 800119e:	4840      	ldr	r0, [pc, #256]	; (80012a0 <inSystem+0x460>)
 80011a0:	f002 fd8e 	bl	8003cc0 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <inSystem+0x468>)
 80011a6:	4a41      	ldr	r2, [pc, #260]	; (80012ac <inSystem+0x46c>)
 80011a8:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <inSystem+0x468>)
 80011ac:	4a40      	ldr	r2, [pc, #256]	; (80012b0 <inSystem+0x470>)
 80011ae:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <inSystem+0x468>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <inSystem+0x468>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <inSystem+0x468>)
 80011be:	2200      	movs	r2, #0
 80011c0:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <inSystem+0x468>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <inSystem+0x468>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <inSystem+0x468>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <inSystem+0x468>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80011da:	4833      	ldr	r0, [pc, #204]	; (80012a8 <inSystem+0x468>)
 80011dc:	f004 fb60 	bl	80058a0 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <inSystem+0x474>)
 80011e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e6:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <inSystem+0x474>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <inSystem+0x474>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <inSystem+0x474>)
 80011f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fa:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <inSystem+0x474>)
 80011fe:	2210      	movs	r2, #16
 8001200:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001202:	482c      	ldr	r0, [pc, #176]	; (80012b4 <inSystem+0x474>)
 8001204:	f001 f8f0 	bl	80023e8 <BasicTimer_Config>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <inSystem+0x478>)
 800120a:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <inSystem+0x47c>)
 800120c:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <inSystem+0x478>)
 8001210:	2204      	movs	r2, #4
 8001212:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <inSystem+0x478>)
 8001216:	2202      	movs	r2, #2
 8001218:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <inSystem+0x478>)
 800121c:	2208      	movs	r2, #8
 800121e:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <inSystem+0x478>)
 8001222:	2201      	movs	r2, #1
 8001224:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <inSystem+0x478>)
 8001228:	2200      	movs	r2, #0
 800122a:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <inSystem+0x478>)
 800122e:	2202      	movs	r2, #2
 8001230:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <inSystem+0x480>)
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <inSystem+0x47c>)
 8001236:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <inSystem+0x480>)
 800123a:	2204      	movs	r2, #4
 800123c:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <inSystem+0x480>)
 8001240:	2202      	movs	r2, #2
 8001242:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <inSystem+0x480>)
 8001246:	2209      	movs	r2, #9
 8001248:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <inSystem+0x480>)
 800124c:	2201      	movs	r2, #1
 800124e:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <inSystem+0x480>)
 8001252:	2200      	movs	r2, #0
 8001254:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <inSystem+0x480>)
 8001258:	2202      	movs	r2, #2
 800125a:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <inSystem+0x484>)
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <inSystem+0x488>)
 8001260:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <inSystem+0x484>)
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <inSystem+0x484>)
 800126a:	2268      	movs	r2, #104	; 0x68
 800126c:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <inSystem+0x484>)
 8001270:	2201      	movs	r2, #1
 8001272:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <inSystem+0x48c>)
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <inSystem+0x478>)
 8001278:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <inSystem+0x48c>)
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <inSystem+0x480>)
 800127e:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <inSystem+0x48c>)
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <inSystem+0x484>)
 8001284:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <inSystem+0x48c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <inSystem+0x48c>)
 800128e:	2200      	movs	r2, #0
 8001290:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <inSystem+0x48c>)
 8001294:	f002 fecc 	bl	8004030 <configMPUAccel>

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000022c 	.word	0x2000022c
 80012a0:	20000220 	.word	0x20000220
 80012a4:	40020000 	.word	0x40020000
 80012a8:	20000314 	.word	0x20000314
 80012ac:	40004400 	.word	0x40004400
 80012b0:	02faf080 	.word	0x02faf080
 80012b4:	200002bc 	.word	0x200002bc
 80012b8:	20000280 	.word	0x20000280
 80012bc:	40020400 	.word	0x40020400
 80012c0:	2000028c 	.word	0x2000028c
 80012c4:	200003a8 	.word	0x200003a8
 80012c8:	40005400 	.word	0x40005400
 80012cc:	200003b4 	.word	0x200003b4

080012d0 <usart2Rx_Callback>:




// Interrupcion usart 1
void usart2Rx_Callback(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

	rxData = getRxData();
 80012d4:	f004 feee 	bl	80060b4 <getRxData>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <usart2Rx_Callback+0x14>)
 80012de:	701a      	strb	r2, [r3, #0]

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000466 	.word	0x20000466

080012e8 <BasicTimer3_Callback>:


//Interrupción Timer 3
void BasicTimer3_Callback(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <BasicTimer3_Callback+0x10>)
 80012ee:	f002 fe88 	bl	8004002 <GPIOxTooglePin>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001fc 	.word	0x200001fc

080012fc <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0


	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <BasicTimer2_Callback+0x38>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <BasicTimer2_Callback+0x3c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <BasicTimer2_Callback+0x40>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d803      	bhi.n	800131c <BasicTimer2_Callback+0x20>
			flag_measurements = SET;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <BasicTimer2_Callback+0x44>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
	}else{ counting_action++; }

	// EN EL MAIN ESTAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 800131a:	e005      	b.n	8001328 <BasicTimer2_Callback+0x2c>
	}else{ counting_action++; }
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <BasicTimer2_Callback+0x40>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <BasicTimer2_Callback+0x40>)
 8001326:	801a      	strh	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200004ab 	.word	0x200004ab
 8001338:	20000000 	.word	0x20000000
 800133c:	200004b2 	.word	0x200004b2
 8001340:	200004ac 	.word	0x200004ac

08001344 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <callback_extInt1+0x1c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	791a      	ldrb	r2, [r3, #4]
 800134e:	3201      	adds	r2, #1
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	711a      	strb	r2, [r3, #4]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	200003c4 	.word	0x200003c4

08001364 <callback_extInt3>:

void callback_extInt3(void){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <callback_extInt3+0x1c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	791a      	ldrb	r2, [r3, #4]
 800136e:	3201      	adds	r2, #1
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	711a      	strb	r2, [r3, #4]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200003c4 	.word	0x200003c4

08001384 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001390:	23c8      	movs	r3, #200	; 0xc8
 8001392:	827b      	strh	r3, [r7, #18]
	float    medidas    = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
	float    suma       = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
	uint8_t  contador   = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	76fb      	strb	r3, [r7, #27]
	float    promedio   = 0;
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

	switch (axis) {
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d061      	beq.n	8001474 <calibracionGyros+0xf0>
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	dc70      	bgt.n	8001496 <calibracionGyros+0x112>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d015      	beq.n	80013e4 <calibracionGyros+0x60>
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d037      	beq.n	800142c <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 80013bc:	e06b      	b.n	8001496 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f002 ffc2 	bl	8004348 <readGyro_X>
 80013c4:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80013c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80013cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80013d8:	7efb      	ldrb	r3, [r7, #27]
 80013da:	3301      	adds	r3, #1
 80013dc:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80013de:	2001      	movs	r0, #1
 80013e0:	f001 f988 	bl	80026f4 <delay_ms>
			while (contador < numMedidas){
 80013e4:	7efb      	ldrb	r3, [r7, #27]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	8a7a      	ldrh	r2, [r7, #18]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d8e7      	bhi.n	80013be <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 80013ee:	8a7b      	ldrh	r3, [r7, #18]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001400:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001404:	e048      	b.n	8001498 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f003 f826 	bl	8004458 <readGyro_Y>
 800140c:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001410:	ed97 7a07 	vldr	s14, [r7, #28]
 8001414:	edd7 7a03 	vldr	s15, [r7, #12]
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001420:	7efb      	ldrb	r3, [r7, #27]
 8001422:	3301      	adds	r3, #1
 8001424:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001426:	2001      	movs	r0, #1
 8001428:	f001 f964 	bl	80026f4 <delay_ms>
			while (contador < numMedidas){
 800142c:	7efb      	ldrb	r3, [r7, #27]
 800142e:	b29b      	uxth	r3, r3
 8001430:	8a7a      	ldrh	r2, [r7, #18]
 8001432:	429a      	cmp	r2, r3
 8001434:	d8e7      	bhi.n	8001406 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001436:	8a7b      	ldrh	r3, [r7, #18]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001440:	edd7 6a07 	vldr	s13, [r7, #28]
 8001444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001448:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 800144c:	e024      	b.n	8001498 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f003 f88a 	bl	8004568 <readGyro_Z>
 8001454:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001458:	ed97 7a07 	vldr	s14, [r7, #28]
 800145c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001468:	7efb      	ldrb	r3, [r7, #27]
 800146a:	3301      	adds	r3, #1
 800146c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800146e:	2001      	movs	r0, #1
 8001470:	f001 f940 	bl	80026f4 <delay_ms>
			while (contador < numMedidas){
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	b29b      	uxth	r3, r3
 8001478:	8a7a      	ldrh	r2, [r7, #18]
 800147a:	429a      	cmp	r2, r3
 800147c:	d8e7      	bhi.n	800144e <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001494:	e000      	b.n	8001498 <calibracionGyros+0x114>
			break;
 8001496:	bf00      	nop
		}
	}


	return promedio;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	ee07 3a90 	vmov	s15, r3
}
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6178      	str	r0, [r7, #20]
 80014b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80014b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80014b8:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f003 f854 	bl	8004568 <readGyro_Z>
 80014c0:	ee10 3a10 	vmov	r3, s0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f847 	bl	8000558 <__aeabi_f2d>
 80014ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ce:	f7fe fee3 	bl	8000298 <__aeabi_dsub>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb8d 	bl	8000bf8 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80014e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80014ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ee:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001554 <getAngle+0xac>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001502:	69b8      	ldr	r0, [r7, #24]
 8001504:	f7ff f828 	bl	8000558 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <getAngle+0xb0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe febb 	bl	800029c <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb63 	bl	8000bf8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <getAngle+0xb0>)
 8001536:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <getAngle+0xb4>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <getAngle+0xb8>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <getAngle+0xb8>)
 8001548:	801a      	strh	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	447a0000 	.word	0x447a0000
 8001558:	20000598 	.word	0x20000598
 800155c:	200002bc 	.word	0x200002bc
 8001560:	200004b0 	.word	0x200004b0
 8001564:	00000000 	.word	0x00000000

08001568 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_t operation_mode){
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	ed2d 8b02 	vpush	{d8}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]

	//Verificamos el modo
	if(operation_mode == sLine){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 80d7 	bne.w	8001730 <get_measuremets_parameters+0x1c8>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001582:	4bbb      	ldr	r3, [pc, #748]	; (8001870 <get_measuremets_parameters+0x308>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4bba      	ldr	r3, [pc, #744]	; (8001874 <get_measuremets_parameters+0x30c>)
 800158a:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 800158c:	4bba      	ldr	r3, [pc, #744]	; (8001878 <get_measuremets_parameters+0x310>)
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	4bba      	ldr	r3, [pc, #744]	; (800187c <get_measuremets_parameters+0x314>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a2:	4bb7      	ldr	r3, [pc, #732]	; (8001880 <get_measuremets_parameters+0x318>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80015a8:	4bb5      	ldr	r3, [pc, #724]	; (8001880 <get_measuremets_parameters+0x318>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffd3 	bl	8000558 <__aeabi_f2d>
 80015b2:	a3ab      	add	r3, pc, #684	; (adr r3, 8001860 <get_measuremets_parameters+0x2f8>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f826 	bl	8000608 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4bae      	ldr	r3, [pc, #696]	; (8001884 <get_measuremets_parameters+0x31c>)
 80015ca:	f7ff f947 	bl	800085c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += sum_ang; // angulo acumulado global
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015de:	4ba6      	ldr	r3, [pc, #664]	; (8001878 <get_measuremets_parameters+0x310>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb8 	bl	8000558 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe54 	bl	800029c <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = (ptrParameter_position->grad_global * M_PI) / 180; //[rad]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001604:	a396      	add	r3, pc, #600	; (adr r3, 8001860 <get_measuremets_parameters+0x2f8>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe fffd 	bl	8000608 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b9a      	ldr	r3, [pc, #616]	; (8001884 <get_measuremets_parameters+0x31c>)
 800161c:	f7ff f91e 	bl	800085c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	e9c1 2304 	strd	r2, r3, [r1, #16]

			// Con la siguiente accion lo que hacemos es conseguir un angulo con mucha mas precision decimal debido a la funcion atan2
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),cos(ptrParameter_position->rad_relativo));
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001630:	eeb0 0a47 	vmov.f32	s0, s14
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	f008 f86e 	bl	8009718 <sin>
 800163c:	eeb0 8a40 	vmov.f32	s16, s0
 8001640:	eef0 8a60 	vmov.f32	s17, s1
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	ed93 7b02 	vldr	d7, [r3, #8]
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	f007 ffc5 	bl	80095e0 <cos>
 8001656:	eeb0 7a40 	vmov.f32	s14, s0
 800165a:	eef0 7a60 	vmov.f32	s15, s1
 800165e:	eeb0 1a47 	vmov.f32	s2, s14
 8001662:	eef0 1a67 	vmov.f32	s3, s15
 8001666:	eeb0 0a48 	vmov.f32	s0, s16
 800166a:	eef0 0a68 	vmov.f32	s1, s17
 800166e:	f008 f8ab 	bl	80097c8 <atan2>
 8001672:	eeb0 7a40 	vmov.f32	s14, s0
 8001676:	eef0 7a60 	vmov.f32	s15, s1
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	ed83 7b02 	vstr	d7, [r3, #8]

			//Calculamos la velocidad
			ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);      //[mm]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168e:	4b7e      	ldr	r3, [pc, #504]	; (8001888 <get_measuremets_parameters+0x320>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169c:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);      //[mm]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3304      	adds	r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	791b      	ldrb	r3, [r3, #4]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b0:	4b76      	ldr	r3, [pc, #472]	; (800188c <get_measuremets_parameters+0x324>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c0:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion;      //[m/s]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <get_measuremets_parameters+0x30c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion;      //[m/s]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80016ee:	4b61      	ldr	r3, [pc, #388]	; (8001874 <get_measuremets_parameters+0x30c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001704:	edc3 7a02 	vstr	s15, [r3, #8]

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <get_measuremets_parameters+0x310>)
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001722:	4b53      	ldr	r3, [pc, #332]	; (8001870 <get_measuremets_parameters+0x308>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001728:	4b54      	ldr	r3, [pc, #336]	; (800187c <get_measuremets_parameters+0x314>)
 800172a:	2200      	movs	r2, #0
 800172c:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 800172e:	e0ba      	b.n	80018a6 <get_measuremets_parameters+0x33e>
	else if(Mode == sRoll)
 8001730:	4b57      	ldr	r3, [pc, #348]	; (8001890 <get_measuremets_parameters+0x328>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 80b5 	bne.w	80018a4 <get_measuremets_parameters+0x33c>
			time_accion = time_accumulated;
 800173a:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <get_measuremets_parameters+0x308>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <get_measuremets_parameters+0x30c>)
 8001742:	601a      	str	r2, [r3, #0]
			ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <get_measuremets_parameters+0x320>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3304      	adds	r3, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001774:	4b45      	ldr	r3, [pc, #276]	; (800188c <get_measuremets_parameters+0x324>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	edc3 7a03 	vstr	s15, [r3, #12]
			ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <get_measuremets_parameters+0x30c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a4:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	edd3 6a03 	vldr	s13, [r3, #12]
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <get_measuremets_parameters+0x30c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	711a      	strb	r2, [r3, #4]
			ang_for_Displament += (((ptrMotorHandler[1]->parametersMotor.dis - ptrMotorHandler[0]->parametersMotor.dis) * 100)/ distanceBetweenWheels)*(180/M_PI); //[°]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80017f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001894 <get_measuremets_parameters+0x32c>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001898 <get_measuremets_parameters+0x330>
 8001800:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001804:	ee16 0a90 	vmov	r0, s13
 8001808:	f7fe fea6 	bl	8000558 <__aeabi_f2d>
 800180c:	a316      	add	r3, pc, #88	; (adr r3, 8001868 <get_measuremets_parameters+0x300>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fef9 	bl	8000608 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <get_measuremets_parameters+0x334>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fd3a 	bl	800029c <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	491b      	ldr	r1, [pc, #108]	; (800189c <get_measuremets_parameters+0x334>)
 800182e:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <get_measuremets_parameters+0x308>)
 8001834:	2200      	movs	r2, #0
 8001836:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <get_measuremets_parameters+0x314>)
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <get_measuremets_parameters+0x334>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fd27 	bl	800029c <__adddf3>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4913      	ldr	r1, [pc, #76]	; (80018a0 <get_measuremets_parameters+0x338>)
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001858:	e025      	b.n	80018a6 <get_measuremets_parameters+0x33e>
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	54442d18 	.word	0x54442d18
 8001864:	400921fb 	.word	0x400921fb
 8001868:	1a63c1f8 	.word	0x1a63c1f8
 800186c:	404ca5dc 	.word	0x404ca5dc
 8001870:	200004b0 	.word	0x200004b0
 8001874:	200004b4 	.word	0x200004b4
 8001878:	20000598 	.word	0x20000598
 800187c:	200004b2 	.word	0x200004b2
 8001880:	2000059c 	.word	0x2000059c
 8001884:	40668000 	.word	0x40668000
 8001888:	20000004 	.word	0x20000004
 800188c:	20000008 	.word	0x20000008
 8001890:	200004aa 	.word	0x200004aa
 8001894:	42c80000 	.word	0x42c80000
 8001898:	4625a000 	.word	0x4625a000
 800189c:	200005a0 	.word	0x200005a0
 80018a0:	200005a8 	.word	0x200005a8
	else{  __NOP(); }
 80018a4:	bf00      	nop
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	ecbd 8b02 	vpop	{d8}
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop

080018b4 <On_motor_Straigh_Roll>:

void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == sLine){
 80018be:	783b      	ldrb	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d120      	bne.n	8001906 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f844 	bl	8001954 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 f8fa 	bl	8004acc <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fb42 	bl	8003f6a <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f8ec 	bl	8004acc <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fb33 	bl	8003f6a <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8001904:	e022      	b.n	800194c <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == sRoll){
 8001906:	783b      	ldrb	r3, [r7, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11f      	bne.n	800194c <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f820 	bl	8001954 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f8d6 	bl	8004acc <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fb1e 	bl	8003f6a <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f8c8 	bl	8004acc <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fb0f 	bl	8003f6a <GPIO_WritePin_Afopt>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == sLine){
 800195e:	783b      	ldrb	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d143      	bne.n	80019ec <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	7f1a      	ldrb	r2, [r3, #28]
 800196a:	787b      	ldrb	r3, [r7, #1]
 800196c:	429a      	cmp	r2, r3
 800196e:	d018      	beq.n	80019a2 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	787a      	ldrb	r2, [r7, #1]
 8001976:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	7f1b      	ldrb	r3, [r3, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f002 faea 	bl	8003f6a <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fbed 	bl	800517c <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	7f1a      	ldrb	r2, [r3, #28]
 80019aa:	787b      	ldrb	r3, [r7, #1]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d06e      	beq.n	8001a8e <set_direction_straigh_roll+0x13a>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	787a      	ldrb	r2, [r7, #1]
 80019b8:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	7f1b      	ldrb	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f002 fac7 	bl	8003f6a <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fbc9 	bl	800517c <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80019ea:	e050      	b.n	8001a8e <set_direction_straigh_roll+0x13a>
	}else if (operation_mode_dir.Mode == sRoll){
 80019ec:	783b      	ldrb	r3, [r7, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d14d      	bne.n	8001a8e <set_direction_straigh_roll+0x13a>
			if ((ptrMotorhandler[0]->configMotor.dir != !operation_mode_dir.direction_s_r)){
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	7f1b      	ldrb	r3, [r3, #28]
 80019f8:	461a      	mov	r2, r3
 80019fa:	787b      	ldrb	r3, [r7, #1]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d01d      	beq.n	8001a46 <set_direction_straigh_roll+0xf2>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8001a0a:	787b      	ldrb	r3, [r7, #1]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir  ); // La direccion estaba en RESET, la cambiamos a SET
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	7f1b      	ldrb	r3, [r3, #28]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f002 fa98 	bl	8003f6a <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fb9b 	bl	800517c <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	7f1a      	ldrb	r2, [r3, #28]
 8001a4e:	787b      	ldrb	r3, [r7, #1]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d01c      	beq.n	8001a8e <set_direction_straigh_roll+0x13a>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3304      	adds	r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	787a      	ldrb	r2, [r7, #1]
 8001a5c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	7f1b      	ldrb	r3, [r3, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f002 fa75 	bl	8003f6a <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3304      	adds	r3, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fb77 	bl	800517c <PWMx_Toggle>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <int_Config_Motor>:


}


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2], PID_Parameters_t *ptrPIDHandler){
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <int_Config_Motor+0x160>)
 8001aa6:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <int_Config_Motor+0x164>)
 8001aae:	619a      	str	r2, [r3, #24]
	ptrMotorhandler[0]->configMotor.dir = SET; // Por defecto dejamos el bit de direccion en SET
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	771a      	strb	r2, [r3, #28]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <int_Config_Motor+0x168>)
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <int_Config_Motor+0x16c>)
 8001ac6:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <int_Config_Motor+0x170>)
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <int_Config_Motor+0x174>)
 8001b08:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <int_Config_Motor+0x178>)
 8001b1e:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3304      	adds	r3, #4
 8001b24:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <int_Config_Motor+0x17c>)
 8001b26:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <int_Config_Motor+0x164>)
 8001b30:	619a      	str	r2, [r3, #24]
	ptrMotorhandler[1]->configMotor.dir = SET; // Por defecto dejamos el bit de direccion en SET
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	771a      	strb	r2, [r3, #28]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a35      	ldr	r2, [pc, #212]	; (8001c18 <int_Config_Motor+0x180>)
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <int_Config_Motor+0x184>)
 8001b4e:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a32      	ldr	r2, [pc, #200]	; (8001c20 <int_Config_Motor+0x188>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <int_Config_Motor+0x174>)
 8001b9c:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <int_Config_Motor+0x178>)
 8001bb6:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bde:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <int_Config_Motor+0x18c>)
 8001be4:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <int_Config_Motor+0x190>)
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	200003cc 	.word	0x200003cc
 8001bfc:	41e00000 	.word	0x41e00000
 8001c00:	20000244 	.word	0x20000244
 8001c04:	2000025c 	.word	0x2000025c
 8001c08:	200002e4 	.word	0x200002e4
 8001c0c:	437a0000 	.word	0x437a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	200003f8 	.word	0x200003f8
 8001c18:	20000238 	.word	0x20000238
 8001c1c:	20000250 	.word	0x20000250
 8001c20:	200002fc 	.word	0x200002fc
 8001c24:	3dcccccd 	.word	0x3dcccccd
 8001c28:	3f4ccccd 	.word	0x3f4ccccd

08001c2c <goTo>:


int goTo(Motor_Handler_t *ptrMotorhandler[2],MPUAccel_Config *ptrMPUhandler,Parameters_Position_t *ptrPosHandler ,
		Parameters_Path_t *ptrPathHandler, PID_Parameters_t *ptrPIDHandler, double calib , state_t mode,uint8_t fAnglulo, uint8_t fMeasurements,
		uint8_t fcontrol, char buff[64], uint32_t distance_mm , state_dir_t operation_mode_dir){
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b090      	sub	sp, #64	; 0x40
 8001c30:	af08      	add	r7, sp, #32
 8001c32:	6178      	str	r0, [r7, #20]
 8001c34:	6139      	str	r1, [r7, #16]
 8001c36:	60fa      	str	r2, [r7, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	ed87 0b00 	vstr	d0, [r7]

	// esta funcion se encarga de enviar al robot en una linea recta hacia una distancia especifica
	// Para ello lo que se hara es simplemente encender el robot y al mismo tiempo calcular su distancia recorrida
	double distance_to_go = 0;
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// seteamos la posicion inicial como la posicion actual global del robot
	ptrPathHandler->start_position_x = ptrPosHandler->xg_position;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrPathHandler->start_position_y = ptrPosHandler->yg_position;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	// seteamos la posicion final usando parametros polares

	//Usando el angulo actual global con respecto al eje x se tiene que
	ptrPathHandler->goal_Position_x = distance_mm * cos(ptrPosHandler->rad_global) + ptrPathHandler->start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001c62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c64:	f7fe fc56 	bl	8000514 <__aeabi_ui2d>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	460d      	mov	r5, r1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001c72:	eeb0 0a47 	vmov.f32	s0, s14
 8001c76:	eef0 0a67 	vmov.f32	s1, s15
 8001c7a:	f007 fcb1 	bl	80095e0 <cos>
 8001c7e:	ec53 2b10 	vmov	r2, r3, d0
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c98:	f7fe fb00 	bl	800029c <__adddf3>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->goal_Position_y = distance_mm * sin(ptrPosHandler->rad_global) + ptrPathHandler->start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8001ca6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ca8:	f7fe fc34 	bl	8000514 <__aeabi_ui2d>
 8001cac:	4604      	mov	r4, r0
 8001cae:	460d      	mov	r5, r1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	ed93 7b04 	vldr	d7, [r3, #16]
 8001cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cba:	eef0 0a67 	vmov.f32	s1, s15
 8001cbe:	f007 fd2b 	bl	8009718 <sin>
 8001cc2:	ec53 2b10 	vmov	r2, r3, d0
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fc9d 	bl	8000608 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001cdc:	f7fe fade 	bl	800029c <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// definimos los parametros del camino en funcion de la situacion actual
	calculation_parameter_distance(ptrPathHandler);
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f002 fcc4 	bl	8004678 <calculation_parameter_distance>

	On_motor_Straigh_Roll(ptrMotorhandler, operation_mode_dir); // Encendemos el robot en la direccion deseada
 8001cf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff fdde 	bl	80018b4 <On_motor_Straigh_Roll>

	while(distance_to_go < distance_mm){
 8001cf8:	e02e      	b.n	8001d58 <goTo+0x12c>
		// calculamos la distancia con la libreria PosRobt.h

		distance_to_go = distance_traveled( ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001d06:	eeb0 1a46 	vmov.f32	s2, s12
 8001d0a:	eef0 1a66 	vmov.f32	s3, s13
 8001d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d12:	eef0 0a67 	vmov.f32	s1, s15
 8001d16:	68b8      	ldr	r0, [r7, #8]
 8001d18:	f002 fd9a 	bl	8004850 <distance_traveled>
 8001d1c:	ed87 0b06 	vstr	d0, [r7, #24]

		// Función de control del robot
		go(ptrMotorhandler,
 8001d20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d30:	9304      	str	r3, [sp, #16]
 8001d32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d36:	9303      	str	r3, [sp, #12]
 8001d38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	ed97 0b00 	vldr	d0, [r7]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f000 f96e 	bl	8002034 <go>
	while(distance_to_go < distance_mm){
 8001d58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d5a:	f7fe fbdb 	bl	8000514 <__aeabi_ui2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d66:	f7fe fec1 	bl	8000aec <__aeabi_dcmplt>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1c4      	bne.n	8001cfa <goTo+0xce>
		   buff,
		   operation_mode_dir); // Con esta funcion hacemos que el robot simplemente se mueva
	}


	return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d7c <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,Parameters_Path_t *ptrPathHandler,Parameters_Position_t *ptrPosHandler
		        ,PID_Parameters_t *ptrPIDHandler){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <PID_control+0x1cc>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a6f      	ldr	r2, [pc, #444]	; (8001f4c <PID_control+0x1d0>)
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d9e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001f50 <PID_control+0x1d4>
 8001da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da6:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001db6:	eeb0 1a46 	vmov.f32	s2, s12
 8001dba:	eef0 1a66 	vmov.f32	s3, s13
 8001dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc2:	eef0 0a67 	vmov.f32	s1, s15
 8001dc6:	68b8      	ldr	r0, [r7, #8]
 8001dc8:	f002 fcfe 	bl	80047c8 <distance_to_straight_line>
 8001dcc:	ec51 0b10 	vmov	r0, r1, d0
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <PID_control+0x1d8>)
 8001dd6:	f7fe fd41 	bl	800085c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff09 	bl	8000bf8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8001dea:	ed97 1a04 	vldr	s2, [r7, #16]
 8001dee:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001f58 <PID_control+0x1dc>
 8001df2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f000 f8bc 	bl	8001f74 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <PID_control+0x1e0>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0c:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <PID_control+0x1e4>)
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <PID_control+0x1e0>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <PID_control+0x1e8>)
 8001e24:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <PID_control+0x1e4>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e3c:	eeb0 1a47 	vmov.f32	s2, s14
 8001e40:	eef0 0a67 	vmov.f32	s1, s15
 8001e44:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f000 f893 	bl	8001f74 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3304      	adds	r3, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <PID_control+0x1e8>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e66:	eeb0 1a47 	vmov.f32	s2, s14
 8001e6a:	eef0 0a67 	vmov.f32	s1, s15
 8001e6e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 f87e 	bl	8001f74 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ec2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f68 <PID_control+0x1ec>
 8001ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	db04      	blt.n	8001eda <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <PID_control+0x1f0>)
 8001ed6:	615a      	str	r2, [r3, #20]
 8001ed8:	e00e      	b.n	8001ef8 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ee2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d803      	bhi.n	8001ef8 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <PID_control+0x1f4>)
 8001ef6:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3304      	adds	r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f02:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f68 <PID_control+0x1ec>
 8001f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	db05      	blt.n	8001f1c <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <PID_control+0x1f0>)
 8001f18:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8001f1a:	e011      	b.n	8001f40 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f26:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d900      	bls.n	8001f36 <PID_control+0x1ba>
}
 8001f34:	e004      	b.n	8001f40 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <PID_control+0x1f4>)
 8001f3e:	615a      	str	r2, [r3, #20]
}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200002bc 	.word	0x200002bc
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	447a0000 	.word	0x447a0000
 8001f54:	408f4000 	.word	0x408f4000
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	200005b0 	.word	0x200005b0
 8001f60:	200005b8 	.word	0x200005b8
 8001f64:	200005bc 	.word	0x200005bc
 8001f68:	42700000 	.word	0x42700000
 8001f6c:	42700000 	.word	0x42700000
 8001f70:	41b80000 	.word	0x41b80000

08001f74 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler, float time_of_sampling, float setpoint, float current_measure){
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f80:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f84:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8001f88:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ff2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ff6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ffa:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002002:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002006:	ed97 7a07 	vldr	s14, [r7, #28]
 800200a:	edd7 7a06 	vldr	s15, [r7, #24]
 800200e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002012:	edd7 7a05 	vldr	s15, [r7, #20]
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	3724      	adds	r7, #36	; 0x24
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <go>:
		state_t mode,
		uint8_t fAnglulo,
		uint8_t fMeasurements,
		uint8_t fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af02      	add	r7, sp, #8
 800203a:	6178      	str	r0, [r7, #20]
 800203c:	6139      	str	r1, [r7, #16]
 800203e:	60fa      	str	r2, [r7, #12]
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (fAnglulo){ // este se ejecutara cada periodo
 8002046:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	ed97 1b00 	vldr	d1, [r7]
 8002054:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80021a4 <go+0x170>
 8002058:	6938      	ldr	r0, [r7, #16]
 800205a:	f7ff fa25 	bl	80014a8 <getAngle>
		// bajamos la bandera
		fAnglulo = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002064:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <go+0x52>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, mode);
 800206c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002070:	461a      	mov	r2, r3
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff fa77 	bl	8001568 <get_measuremets_parameters>
		// bajamos la bandera
		fMeasurements = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		//Levandamos la bandera de control
		fcontrol = SET;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	}

	// Control
	if (fcontrol){
 8002086:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8086 	beq.w	800219c <go+0x168>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3304      	adds	r3, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	ed93 7a03 	vldr	s14, [r3, #12]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	edd3 7a03 	vldr	s15, [r3, #12]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80020aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ae:	ee16 0a90 	vmov	r0, s13
 80020b2:	f7fe fa51 	bl	8000558 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position += distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	ed93 7b04 	vldr	d7, [r3, #16]
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f007 fa85 	bl	80095e0 <cos>
 80020d6:	ec51 0b10 	vmov	r0, r1, d0
 80020da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020de:	f7fe fa93 	bl	8000608 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f8d7 	bl	800029c <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position += distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	ed93 7b04 	vldr	d7, [r3, #16]
 8002104:	eeb0 0a47 	vmov.f32	s0, s14
 8002108:	eef0 0a67 	vmov.f32	s1, s15
 800210c:	f007 fb04 	bl	8009718 <sin>
 8002110:	ec51 0b10 	vmov	r0, r1, d0
 8002114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002118:	f7fe fa76 	bl	8000608 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8ba 	bl	800029c <__adddf3>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800213e:	f7fe f8ad 	bl	800029c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002158:	f7fe f8a0 	bl	800029c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002172:	e9cd 2300 	strd	r2, r3, [sp]
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	490b      	ldr	r1, [pc, #44]	; (80021a8 <go+0x174>)
 800217c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800217e:	f005 f8af 	bl	80072e0 <siprintf>

		writeMsg(&handlerUSART, buff);
 8002182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002184:	4809      	ldr	r0, [pc, #36]	; (80021ac <go+0x178>)
 8002186:	f003 ff6d 	bl	8006064 <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f7ff fdf3 	bl	8001d7c <PID_control>

		fcontrol = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	}
}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bdb0      	pop	{r4, r5, r7, pc}
 80021a4:	00000000 	.word	0x00000000
 80021a8:	0800baf4 	.word	0x0800baf4
 80021ac:	20000314 	.word	0x20000314

080021b0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <ITM_SendChar+0x48>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <ITM_SendChar+0x48>)
 80021c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <ITM_SendChar+0x4c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <ITM_SendChar+0x4c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80021d2:	bf00      	nop
 80021d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f8      	beq.n	80021d4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80021e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000edfc 	.word	0xe000edfc
 80021fc:	e0000e00 	.word	0xe0000e00

08002200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
	return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_kill>:

int _kill(int pid, int sig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800221a:	f004 facd 	bl	80067b8 <__errno>
 800221e:	4603      	mov	r3, r0
 8002220:	2216      	movs	r2, #22
 8002222:	601a      	str	r2, [r3, #0]
	return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_exit>:

void _exit (int status)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffe7 	bl	8002210 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002242:	e7fe      	b.n	8002242 <_exit+0x12>

08002244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
	}

return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff89 	bl	80021b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
	}
	return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002324:	f003 ff64 	bl	80061f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002328:	480c      	ldr	r0, [pc, #48]	; (800235c <LoopForever+0x6>)
  ldr r1, =_edata
 800232a:	490d      	ldr	r1, [pc, #52]	; (8002360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <LoopForever+0xe>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002340:	4c0a      	ldr	r4, [pc, #40]	; (800236c <LoopForever+0x16>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800234e:	f004 fa39 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002352:	f7fe fca1 	bl	8000c98 <main>

08002356 <LoopForever>:

LoopForever:
    b LoopForever
 8002356:	e7fe      	b.n	8002356 <LoopForever>
  ldr   r0, =_estack
 8002358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002364:	0800c170 	.word	0x0800c170
  ldr r2, =_sbss
 8002368:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800236c:	200005f0 	.word	0x200005f0

08002370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC_IRQHandler>
	...

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <inTIM4+0x30>)
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <inTIM4+0x34>)
 80023b8:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <inTIM4+0x30>)
 80023bc:	2200      	movs	r2, #0
 80023be:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <inTIM4+0x30>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <inTIM4+0x30>)
 80023c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80023cc:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <inTIM4+0x30>)
 80023d0:	220a      	movs	r2, #10
 80023d2:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <inTIM4+0x30>)
 80023d6:	f000 f807 	bl	80023e8 <BasicTimer_Config>

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200002d0 	.word	0x200002d0
 80023e4:	40000800 	.word	0x40000800

080023e8 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a85      	ldr	r2, [pc, #532]	; (8002618 <BasicTimer_Config+0x230>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d106      	bne.n	8002414 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002406:	4b85      	ldr	r3, [pc, #532]	; (800261c <BasicTimer_Config+0x234>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a84      	ldr	r2, [pc, #528]	; (800261c <BasicTimer_Config+0x234>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	e030      	b.n	8002476 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d106      	bne.n	800242c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800241e:	4b7f      	ldr	r3, [pc, #508]	; (800261c <BasicTimer_Config+0x234>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a7e      	ldr	r2, [pc, #504]	; (800261c <BasicTimer_Config+0x234>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	e024      	b.n	8002476 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7b      	ldr	r2, [pc, #492]	; (8002620 <BasicTimer_Config+0x238>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d106      	bne.n	8002444 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002436:	4b79      	ldr	r3, [pc, #484]	; (800261c <BasicTimer_Config+0x234>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a78      	ldr	r2, [pc, #480]	; (800261c <BasicTimer_Config+0x234>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	e018      	b.n	8002476 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a76      	ldr	r2, [pc, #472]	; (8002624 <BasicTimer_Config+0x23c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d106      	bne.n	800245c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <BasicTimer_Config+0x234>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a72      	ldr	r2, [pc, #456]	; (800261c <BasicTimer_Config+0x234>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	e00c      	b.n	8002476 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a71      	ldr	r2, [pc, #452]	; (8002628 <BasicTimer_Config+0x240>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d106      	bne.n	8002474 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002466:	4b6d      	ldr	r3, [pc, #436]	; (800261c <BasicTimer_Config+0x234>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a6c      	ldr	r2, [pc, #432]	; (800261c <BasicTimer_Config+0x234>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	e000      	b.n	8002476 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8002474:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002484:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6892      	ldr	r2, [r2, #8]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	791b      	ldrb	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80d3 	bne.w	8002640 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2ba0      	cmp	r3, #160	; 0xa0
 80024b4:	d022      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2bc8      	cmp	r3, #200	; 0xc8
 80024ba:	d01f      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024c2:	d01b      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024ca:	d017      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024d2:	d013      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024da:	d00f      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80024e2:	d00b      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80024ea:	d007      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80024f2:	d003      	beq.n	80024fc <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024fa:	d10b      	bne.n	8002514 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2264      	movs	r2, #100	; 0x64
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	3a01      	subs	r2, #1
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
 8002512:	e07c      	b.n	800260e <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800251a:	d029      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002522:	d025      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800252a:	4293      	cmp	r3, r2
 800252c:	d020      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002534:	d01c      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d017      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f241 7270 	movw	r2, #6000	; 0x1770
 8002546:	4293      	cmp	r3, r2
 8002548:	d012      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002550:	4293      	cmp	r3, r2
 8002552:	d00d      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800255a:	d009      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f242 3228 	movw	r2, #9000	; 0x2328
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f242 7210 	movw	r2, #10000	; 0x2710
 800256c:	4293      	cmp	r3, r2
 800256e:	d10c      	bne.n	800258a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	3a01      	subs	r2, #1
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
 8002588:	e041      	b.n	800260e <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002590:	d028      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002598:	4293      	cmp	r3, r2
 800259a:	d023      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f247 5230 	movw	r2, #30000	; 0x7530
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01e      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d019      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d014      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00f      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4a19      	ldr	r2, [pc, #100]	; (800262c <BasicTimer_Config+0x244>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <BasicTimer_Config+0x248>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <BasicTimer_Config+0x24c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <BasicTimer_Config+0x250>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	3a01      	subs	r2, #1
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f4:	e00b      	b.n	800260e <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <BasicTimer_Config+0x254>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	3a01      	subs	r2, #1
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
 8002616:	e027      	b.n	8002668 <BasicTimer_Config+0x280>
 8002618:	40010000 	.word	0x40010000
 800261c:	40023800 	.word	0x40023800
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800
 8002628:	40000c00 	.word	0x40000c00
 800262c:	00011170 	.word	0x00011170
 8002630:	00013880 	.word	0x00013880
 8002634:	00015f90 	.word	0x00015f90
 8002638:	000186a0 	.word	0x000186a0
 800263c:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0210 	orr.w	r2, r2, #16
 800264e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3a01      	subs	r2, #1
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3a01      	subs	r2, #1
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7c1b      	ldrb	r3, [r3, #16]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d12d      	bne.n	80026cc <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d103      	bne.n	8002692 <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 800268a:	201c      	movs	r0, #28
 800268c:	f7ff fe72 	bl	8002374 <__NVIC_EnableIRQ>
 8002690:	e024      	b.n	80026dc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <BasicTimer_Config+0x300>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 800269c:	201d      	movs	r0, #29
 800269e:	f7ff fe69 	bl	8002374 <__NVIC_EnableIRQ>
 80026a2:	e01b      	b.n	80026dc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a10      	ldr	r2, [pc, #64]	; (80026ec <BasicTimer_Config+0x304>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d103      	bne.n	80026b6 <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 80026ae:	201e      	movs	r0, #30
 80026b0:	f7ff fe60 	bl	8002374 <__NVIC_EnableIRQ>
 80026b4:	e012      	b.n	80026dc <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <BasicTimer_Config+0x308>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 80026c0:	2032      	movs	r0, #50	; 0x32
 80026c2:	f7ff fe57 	bl	8002374 <__NVIC_EnableIRQ>
 80026c6:	e009      	b.n	80026dc <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 80026c8:	bf00      	nop
 80026ca:	e007      	b.n	80026dc <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80026dc:	b662      	cpsie	i
}
 80026de:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00

080026f4 <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80026fe:	4818      	ldr	r0, [pc, #96]	; (8002760 <delay_ms+0x6c>)
 8002700:	f000 fa6e 	bl	8002be0 <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	461a      	mov	r2, r3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8002718:	e016      	b.n	8002748 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <delay_ms+0x6c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00f      	beq.n	8002748 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <delay_ms+0x6c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	3301      	adds	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	4413      	add	r3, r2
 8002736:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <delay_ms+0x6c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <delay_ms+0x6c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8002748:	89fa      	ldrh	r2, [r7, #14]
 800274a:	89bb      	ldrh	r3, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3e4      	bcc.n	800271a <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <delay_ms+0x6c>)
 8002752:	f000 fa57 	bl	8002c04 <stopTimer>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002d0 	.word	0x200002d0

08002764 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002768:	bf00      	nop
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002778:	bf00      	nop
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002788:	bf00      	nop
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002798:	bf00      	nop
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027a8:	bf00      	nop
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027b8:	bf00      	nop
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027c8:	bf00      	nop
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027d8:	bf00      	nop
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027e8:	bf00      	nop
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027f8:	bf00      	nop
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002808:	bf00      	nop
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002818:	bf00      	nop
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002828:	bf00      	nop
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002838:	bf00      	nop
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002848:	bf00      	nop
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002858:	bf00      	nop
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002868:	bf00      	nop
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8002878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8002886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8002896:	f7fe fd31 	bl	80012fc <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800289a:	e066      	b.n	800296a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 800289c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80028aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028b4:	f023 0302 	bic.w	r3, r3, #2
 80028b8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80028ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80028ca:	f7ff ff5b 	bl	8002784 <Capture_TIM2_Ch1_Callback>
}
 80028ce:	e04c      	b.n	800296a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80028d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80028de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80028ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028fc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80028fe:	f7ff ff49 	bl	8002794 <Capture_TIM2_Ch2_Callback>
}
 8002902:	e032      	b.n	800296a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8002904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8002912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800291c:	f023 0308 	bic.w	r3, r3, #8
 8002920:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8002922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002930:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8002932:	f7ff ff37 	bl	80027a4 <Capture_TIM2_Ch3_Callback>
}
 8002936:	e018      	b.n	800296a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8002938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d011      	beq.n	800296a <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8002946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002950:	f023 0310 	bic.w	r3, r3, #16
 8002954:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8002956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002964:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8002966:	f7ff ff25 	bl	80027b4 <Capture_TIM2_Ch4_Callback>
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 800298c:	f7fe fcac 	bl	80012e8 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002990:	e052      	b.n	8002a38 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80029b6:	f7ff ff05 	bl	80027c4 <Capture_TIM3_Ch1_Callback>
}
 80029ba:	e03d      	b.n	8002a38 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029ce:	f023 0304 	bic.w	r3, r3, #4
 80029d2:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029de:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80029e0:	f7ff fef8 	bl	80027d4 <Capture_TIM3_Ch2_Callback>
}
 80029e4:	e028      	b.n	8002a38 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00e      	beq.n	8002a10 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 80029f8:	f023 0308 	bic.w	r3, r3, #8
 80029fc:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a08:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8002a0a:	f7ff feeb 	bl	80027e4 <Capture_TIM3_Ch3_Callback>
}
 8002a0e:	e013      	b.n	8002a38 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a22:	f023 0310 	bic.w	r3, r3, #16
 8002a26:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <TIM3_IRQHandler+0xcc>)
 8002a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a32:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8002a34:	f7ff fede 	bl	80027f4 <Capture_TIM3_Ch4_Callback>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40000400 	.word	0x40000400

08002a40 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8002a5c:	f7ff fe82 	bl	8002764 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8002a60:	e052      	b.n	8002b08 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a74:	f023 0302 	bic.w	r3, r3, #2
 8002a78:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8002a86:	f7ff febd 	bl	8002804 <Capture_TIM4_Ch1_Callback>
}
 8002a8a:	e03d      	b.n	8002b08 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aae:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002ab0:	f7ff fec8 	bl	8002844 <Capture_TIM5_Ch2_Callback>
}
 8002ab4:	e028      	b.n	8002b08 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00e      	beq.n	8002ae0 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ac8:	f023 0308 	bic.w	r3, r3, #8
 8002acc:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad8:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8002ada:	f7ff fe9b 	bl	8002814 <Capture_TIM4_Ch3_Callback>
}
 8002ade:	e013      	b.n	8002b08 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002af2:	f023 0310 	bic.w	r3, r3, #16
 8002af6:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <TIM4_IRQHandler+0xcc>)
 8002afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b02:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8002b04:	f7ff fe8e 	bl	8002824 <Capture_TIM4_Ch4_Callback>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40000800 	.word	0x40000800

08002b10 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8002b2c:	f7ff fe22 	bl	8002774 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8002b30:	e052      	b.n	8002bd8 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b44:	f023 0302 	bic.w	r3, r3, #2
 8002b48:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b54:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8002b56:	f7ff fe6d 	bl	8002834 <Capture_TIM5_Ch1_Callback>
}
 8002b5a:	e03d      	b.n	8002bd8 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002b80:	f7ff fe60 	bl	8002844 <Capture_TIM5_Ch2_Callback>
}
 8002b84:	e028      	b.n	8002bd8 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002b98:	f023 0308 	bic.w	r3, r3, #8
 8002b9c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8002baa:	f7ff fe53 	bl	8002854 <Capture_TIM5_Ch3_Callback>
}
 8002bae:	e013      	b.n	8002bd8 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002bc2:	f023 0310 	bic.w	r3, r3, #16
 8002bc6:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <TIM5_IRQHandler+0xcc>)
 8002bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd2:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8002bd4:	f7ff fe46 	bl	8002864 <Capture_TIM5_Ch4_Callback>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40000c00 	.word	0x40000c00

08002be0 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <__NVIC_EnableIRQ>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 f825 	bl	8003cc0 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8002c76:	4b96      	ldr	r3, [pc, #600]	; (8002ed0 <extInt_Config+0x26c>)
 8002c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	f200 85cd 	bhi.w	8003824 <extInt_Config+0xbc0>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <extInt_Config+0x2c>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cd1 	.word	0x08002cd1
 8002c94:	08002d87 	.word	0x08002d87
 8002c98:	08002e3d 	.word	0x08002e3d
 8002c9c:	08002f13 	.word	0x08002f13
 8002ca0:	08002fc9 	.word	0x08002fc9
 8002ca4:	08003077 	.word	0x08003077
 8002ca8:	0800313d 	.word	0x0800313d
 8002cac:	080031e5 	.word	0x080031e5
 8002cb0:	0800328d 	.word	0x0800328d
 8002cb4:	08003335 	.word	0x08003335
 8002cb8:	080033fb 	.word	0x080033fb
 8002cbc:	080034a3 	.word	0x080034a3
 8002cc0:	0800354b 	.word	0x0800354b
 8002cc4:	08003611 	.word	0x08003611
 8002cc8:	080036b7 	.word	0x080036b7
 8002ccc:	0800375f 	.word	0x0800375f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8002cd0:	4b80      	ldr	r3, [pc, #512]	; (8002ed4 <extInt_Config+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a7f      	ldr	r2, [pc, #508]	; (8002ed4 <extInt_Config+0x270>)
 8002cd6:	f023 030f 	bic.w	r3, r3, #15
 8002cda:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7d      	ldr	r2, [pc, #500]	; (8002ed8 <extInt_Config+0x274>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d105      	bne.n	8002cf4 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <extInt_Config+0x270>)
 8002cea:	4a7a      	ldr	r2, [pc, #488]	; (8002ed4 <extInt_Config+0x270>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002cf0:	f000 bd9a 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a78      	ldr	r2, [pc, #480]	; (8002edc <extInt_Config+0x278>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d107      	bne.n	8002d10 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002d00:	4b74      	ldr	r3, [pc, #464]	; (8002ed4 <extInt_Config+0x270>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a73      	ldr	r2, [pc, #460]	; (8002ed4 <extInt_Config+0x270>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6093      	str	r3, [r2, #8]
					break;
 8002d0c:	f000 bd8c 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a72      	ldr	r2, [pc, #456]	; (8002ee0 <extInt_Config+0x27c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d107      	bne.n	8002d2c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002d1c:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <extInt_Config+0x270>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a6c      	ldr	r2, [pc, #432]	; (8002ed4 <extInt_Config+0x270>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	6093      	str	r3, [r2, #8]
					break;
 8002d28:	f000 bd7e 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6c      	ldr	r2, [pc, #432]	; (8002ee4 <extInt_Config+0x280>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d107      	bne.n	8002d48 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <extInt_Config+0x270>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <extInt_Config+0x270>)
 8002d3e:	f043 0303 	orr.w	r3, r3, #3
 8002d42:	6093      	str	r3, [r2, #8]
					break;
 8002d44:	f000 bd70 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <extInt_Config+0x284>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d107      	bne.n	8002d64 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002d54:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <extInt_Config+0x270>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <extInt_Config+0x270>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6093      	str	r3, [r2, #8]
					break;
 8002d60:	f000 bd62 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a60      	ldr	r2, [pc, #384]	; (8002eec <extInt_Config+0x288>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d107      	bne.n	8002d80 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002d70:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <extInt_Config+0x270>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <extInt_Config+0x270>)
 8002d76:	f043 0307 	orr.w	r3, r3, #7
 8002d7a:	6093      	str	r3, [r2, #8]
					break;
 8002d7c:	f000 bd54 	b.w	8003828 <extInt_Config+0xbc4>
						__NOP();
 8002d80:	bf00      	nop
					break;
 8002d82:	f000 bd51 	b.w	8003828 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <extInt_Config+0x270>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <extInt_Config+0x270>)
 8002d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d90:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4f      	ldr	r2, [pc, #316]	; (8002ed8 <extInt_Config+0x274>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d105      	bne.n	8002daa <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002d9e:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <extInt_Config+0x270>)
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <extInt_Config+0x270>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002da6:	f000 bd3f 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <extInt_Config+0x278>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d107      	bne.n	8002dc6 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <extInt_Config+0x270>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4a46      	ldr	r2, [pc, #280]	; (8002ed4 <extInt_Config+0x270>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6093      	str	r3, [r2, #8]
					break;
 8002dc2:	f000 bd31 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a44      	ldr	r2, [pc, #272]	; (8002ee0 <extInt_Config+0x27c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d107      	bne.n	8002de2 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <extInt_Config+0x270>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4a3f      	ldr	r2, [pc, #252]	; (8002ed4 <extInt_Config+0x270>)
 8002dd8:	f043 0320 	orr.w	r3, r3, #32
 8002ddc:	6093      	str	r3, [r2, #8]
					break;
 8002dde:	f000 bd23 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <extInt_Config+0x280>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d107      	bne.n	8002dfe <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002dee:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <extInt_Config+0x270>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <extInt_Config+0x270>)
 8002df4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002df8:	6093      	str	r3, [r2, #8]
					break;
 8002dfa:	f000 bd15 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a38      	ldr	r2, [pc, #224]	; (8002ee8 <extInt_Config+0x284>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d107      	bne.n	8002e1a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <extInt_Config+0x270>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <extInt_Config+0x270>)
 8002e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e14:	6093      	str	r3, [r2, #8]
					break;
 8002e16:	f000 bd07 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a32      	ldr	r2, [pc, #200]	; (8002eec <extInt_Config+0x288>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d107      	bne.n	8002e36 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <extInt_Config+0x270>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <extInt_Config+0x270>)
 8002e2c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e30:	6093      	str	r3, [r2, #8]
					break;
 8002e32:	f000 bcf9 	b.w	8003828 <extInt_Config+0xbc4>
						__NOP();
 8002e36:	bf00      	nop
					break;
 8002e38:	f000 bcf6 	b.w	8003828 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <extInt_Config+0x270>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <extInt_Config+0x270>)
 8002e42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e46:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <extInt_Config+0x274>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d105      	bne.n	8002e60 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <extInt_Config+0x270>)
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <extInt_Config+0x270>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002e5c:	f000 bce4 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <extInt_Config+0x278>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d107      	bne.n	8002e7c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <extInt_Config+0x270>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <extInt_Config+0x270>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6093      	str	r3, [r2, #8]
					break;
 8002e78:	f000 bcd6 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <extInt_Config+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d107      	bne.n	8002e98 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <extInt_Config+0x270>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <extInt_Config+0x270>)
 8002e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e92:	6093      	str	r3, [r2, #8]
					break;
 8002e94:	f000 bcc8 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <extInt_Config+0x280>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d107      	bne.n	8002eb4 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <extInt_Config+0x270>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <extInt_Config+0x270>)
 8002eaa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002eae:	6093      	str	r3, [r2, #8]
					break;
 8002eb0:	f000 bcba 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <extInt_Config+0x284>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d117      	bne.n	8002ef0 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <extInt_Config+0x270>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <extInt_Config+0x270>)
 8002ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eca:	6093      	str	r3, [r2, #8]
					break;
 8002ecc:	f000 bcac 	b.w	8003828 <extInt_Config+0xbc4>
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a8a      	ldr	r2, [pc, #552]	; (8003120 <extInt_Config+0x4bc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d107      	bne.n	8002f0c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002efc:	4b89      	ldr	r3, [pc, #548]	; (8003124 <extInt_Config+0x4c0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a88      	ldr	r2, [pc, #544]	; (8003124 <extInt_Config+0x4c0>)
 8002f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f06:	6093      	str	r3, [r2, #8]
					break;
 8002f08:	f000 bc8e 	b.w	8003828 <extInt_Config+0xbc4>
						__NOP();
 8002f0c:	bf00      	nop
					break;
 8002f0e:	f000 bc8b 	b.w	8003828 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8002f12:	4b84      	ldr	r3, [pc, #528]	; (8003124 <extInt_Config+0x4c0>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4a83      	ldr	r2, [pc, #524]	; (8003124 <extInt_Config+0x4c0>)
 8002f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f1c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a80      	ldr	r2, [pc, #512]	; (8003128 <extInt_Config+0x4c4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d105      	bne.n	8002f36 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <extInt_Config+0x4c0>)
 8002f2c:	4a7d      	ldr	r2, [pc, #500]	; (8003124 <extInt_Config+0x4c0>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002f32:	f000 bc79 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7b      	ldr	r2, [pc, #492]	; (800312c <extInt_Config+0x4c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d107      	bne.n	8002f52 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <extInt_Config+0x4c0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4a77      	ldr	r2, [pc, #476]	; (8003124 <extInt_Config+0x4c0>)
 8002f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f4c:	6093      	str	r3, [r2, #8]
					break;
 8002f4e:	f000 bc6b 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a75      	ldr	r2, [pc, #468]	; (8003130 <extInt_Config+0x4cc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d107      	bne.n	8002f6e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002f5e:	4b71      	ldr	r3, [pc, #452]	; (8003124 <extInt_Config+0x4c0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4a70      	ldr	r2, [pc, #448]	; (8003124 <extInt_Config+0x4c0>)
 8002f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f68:	6093      	str	r3, [r2, #8]
					break;
 8002f6a:	f000 bc5d 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6f      	ldr	r2, [pc, #444]	; (8003134 <extInt_Config+0x4d0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d107      	bne.n	8002f8a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <extInt_Config+0x4c0>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4a69      	ldr	r2, [pc, #420]	; (8003124 <extInt_Config+0x4c0>)
 8002f80:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002f84:	6093      	str	r3, [r2, #8]
					break;
 8002f86:	f000 bc4f 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a69      	ldr	r2, [pc, #420]	; (8003138 <extInt_Config+0x4d4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d107      	bne.n	8002fa6 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <extInt_Config+0x4c0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4a62      	ldr	r2, [pc, #392]	; (8003124 <extInt_Config+0x4c0>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa0:	6093      	str	r3, [r2, #8]
					break;
 8002fa2:	f000 bc41 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <extInt_Config+0x4bc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d107      	bne.n	8002fc2 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <extInt_Config+0x4c0>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <extInt_Config+0x4c0>)
 8002fb8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002fbc:	6093      	str	r3, [r2, #8]
					break;
 8002fbe:	f000 bc33 	b.w	8003828 <extInt_Config+0xbc4>
						__NOP();
 8002fc2:	bf00      	nop
					break;
 8002fc4:	f000 bc30 	b.w	8003828 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8002fc8:	4b56      	ldr	r3, [pc, #344]	; (8003124 <extInt_Config+0x4c0>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a55      	ldr	r2, [pc, #340]	; (8003124 <extInt_Config+0x4c0>)
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a53      	ldr	r2, [pc, #332]	; (8003128 <extInt_Config+0x4c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d105      	bne.n	8002fec <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <extInt_Config+0x4c0>)
 8002fe2:	4a50      	ldr	r2, [pc, #320]	; (8003124 <extInt_Config+0x4c0>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002fe8:	f000 bc1e 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4e      	ldr	r2, [pc, #312]	; (800312c <extInt_Config+0x4c8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d107      	bne.n	8003008 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <extInt_Config+0x4c0>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a49      	ldr	r2, [pc, #292]	; (8003124 <extInt_Config+0x4c0>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	60d3      	str	r3, [r2, #12]
					break;
 8003004:	f000 bc10 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a48      	ldr	r2, [pc, #288]	; (8003130 <extInt_Config+0x4cc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d107      	bne.n	8003024 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003014:	4b43      	ldr	r3, [pc, #268]	; (8003124 <extInt_Config+0x4c0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a42      	ldr	r2, [pc, #264]	; (8003124 <extInt_Config+0x4c0>)
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	60d3      	str	r3, [r2, #12]
					break;
 8003020:	f000 bc02 	b.w	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a42      	ldr	r2, [pc, #264]	; (8003134 <extInt_Config+0x4d0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d106      	bne.n	800303e <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <extInt_Config+0x4c0>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <extInt_Config+0x4c0>)
 8003036:	f043 0303 	orr.w	r3, r3, #3
 800303a:	60d3      	str	r3, [r2, #12]
					break;
 800303c:	e3f4      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3c      	ldr	r2, [pc, #240]	; (8003138 <extInt_Config+0x4d4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d106      	bne.n	8003058 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <extInt_Config+0x4c0>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a35      	ldr	r2, [pc, #212]	; (8003124 <extInt_Config+0x4c0>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	60d3      	str	r3, [r2, #12]
					break;
 8003056:	e3e7      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a30      	ldr	r2, [pc, #192]	; (8003120 <extInt_Config+0x4bc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d106      	bne.n	8003072 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <extInt_Config+0x4c0>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a2e      	ldr	r2, [pc, #184]	; (8003124 <extInt_Config+0x4c0>)
 800306a:	f043 0307 	orr.w	r3, r3, #7
 800306e:	60d3      	str	r3, [r2, #12]
					break;
 8003070:	e3da      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 8003072:	bf00      	nop
					break;
 8003074:	e3d8      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <extInt_Config+0x4c0>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <extInt_Config+0x4c0>)
 800307c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003080:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <extInt_Config+0x4c4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d104      	bne.n	8003098 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <extInt_Config+0x4c0>)
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <extInt_Config+0x4c0>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003096:	e3c7      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <extInt_Config+0x4c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d106      	bne.n	80030b2 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80030a4:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <extInt_Config+0x4c0>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <extInt_Config+0x4c0>)
 80030aa:	f043 0310 	orr.w	r3, r3, #16
 80030ae:	60d3      	str	r3, [r2, #12]
					break;
 80030b0:	e3ba      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <extInt_Config+0x4cc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d106      	bne.n	80030cc <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <extInt_Config+0x4c0>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <extInt_Config+0x4c0>)
 80030c4:	f043 0320 	orr.w	r3, r3, #32
 80030c8:	60d3      	str	r3, [r2, #12]
					break;
 80030ca:	e3ad      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <extInt_Config+0x4d0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d106      	bne.n	80030e6 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <extInt_Config+0x4c0>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <extInt_Config+0x4c0>)
 80030de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80030e2:	60d3      	str	r3, [r2, #12]
					break;
 80030e4:	e3a0      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <extInt_Config+0x4d4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d106      	bne.n	8003100 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <extInt_Config+0x4c0>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <extInt_Config+0x4c0>)
 80030f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fc:	60d3      	str	r3, [r2, #12]
					break;
 80030fe:	e393      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a06      	ldr	r2, [pc, #24]	; (8003120 <extInt_Config+0x4bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d106      	bne.n	800311a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <extInt_Config+0x4c0>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <extInt_Config+0x4c0>)
 8003112:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003116:	60d3      	str	r3, [r2, #12]
					break;
 8003118:	e386      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 800311a:	bf00      	nop
					break;
 800311c:	e384      	b.n	8003828 <extInt_Config+0xbc4>
 800311e:	bf00      	nop
 8003120:	40021c00 	.word	0x40021c00
 8003124:	40013800 	.word	0x40013800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 800313c:	4b86      	ldr	r3, [pc, #536]	; (8003358 <extInt_Config+0x6f4>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a85      	ldr	r2, [pc, #532]	; (8003358 <extInt_Config+0x6f4>)
 8003142:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003146:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a83      	ldr	r2, [pc, #524]	; (800335c <extInt_Config+0x6f8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d104      	bne.n	800315e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003154:	4b80      	ldr	r3, [pc, #512]	; (8003358 <extInt_Config+0x6f4>)
 8003156:	4a80      	ldr	r2, [pc, #512]	; (8003358 <extInt_Config+0x6f4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800315c:	e364      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <extInt_Config+0x6fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d106      	bne.n	8003178 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800316a:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <extInt_Config+0x6f4>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a7a      	ldr	r2, [pc, #488]	; (8003358 <extInt_Config+0x6f4>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	60d3      	str	r3, [r2, #12]
					break;
 8003176:	e357      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <extInt_Config+0x700>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d106      	bne.n	8003192 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003184:	4b74      	ldr	r3, [pc, #464]	; (8003358 <extInt_Config+0x6f4>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a73      	ldr	r2, [pc, #460]	; (8003358 <extInt_Config+0x6f4>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318e:	60d3      	str	r3, [r2, #12]
					break;
 8003190:	e34a      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a73      	ldr	r2, [pc, #460]	; (8003368 <extInt_Config+0x704>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d106      	bne.n	80031ac <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <extInt_Config+0x6f4>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a6d      	ldr	r2, [pc, #436]	; (8003358 <extInt_Config+0x6f4>)
 80031a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031a8:	60d3      	str	r3, [r2, #12]
					break;
 80031aa:	e33d      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6e      	ldr	r2, [pc, #440]	; (800336c <extInt_Config+0x708>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d106      	bne.n	80031c6 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80031b8:	4b67      	ldr	r3, [pc, #412]	; (8003358 <extInt_Config+0x6f4>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a66      	ldr	r2, [pc, #408]	; (8003358 <extInt_Config+0x6f4>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c2:	60d3      	str	r3, [r2, #12]
					break;
 80031c4:	e330      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a68      	ldr	r2, [pc, #416]	; (8003370 <extInt_Config+0x70c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d106      	bne.n	80031e0 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <extInt_Config+0x6f4>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4a60      	ldr	r2, [pc, #384]	; (8003358 <extInt_Config+0x6f4>)
 80031d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031dc:	60d3      	str	r3, [r2, #12]
					break;
 80031de:	e323      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 80031e0:	bf00      	nop
					break;
 80031e2:	e321      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <extInt_Config+0x6f4>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a5b      	ldr	r2, [pc, #364]	; (8003358 <extInt_Config+0x6f4>)
 80031ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ee:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a59      	ldr	r2, [pc, #356]	; (800335c <extInt_Config+0x6f8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d104      	bne.n	8003206 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <extInt_Config+0x6f4>)
 80031fe:	4a56      	ldr	r2, [pc, #344]	; (8003358 <extInt_Config+0x6f4>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8003204:	e310      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <extInt_Config+0x6fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d106      	bne.n	8003220 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003212:	4b51      	ldr	r3, [pc, #324]	; (8003358 <extInt_Config+0x6f4>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4a50      	ldr	r2, [pc, #320]	; (8003358 <extInt_Config+0x6f4>)
 8003218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321c:	60d3      	str	r3, [r2, #12]
					break;
 800321e:	e303      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4f      	ldr	r2, [pc, #316]	; (8003364 <extInt_Config+0x700>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d106      	bne.n	800323a <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <extInt_Config+0x6f4>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <extInt_Config+0x6f4>)
 8003232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003236:	60d3      	str	r3, [r2, #12]
					break;
 8003238:	e2f6      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a49      	ldr	r2, [pc, #292]	; (8003368 <extInt_Config+0x704>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d106      	bne.n	8003254 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003246:	4b44      	ldr	r3, [pc, #272]	; (8003358 <extInt_Config+0x6f4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <extInt_Config+0x6f4>)
 800324c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003250:	60d3      	str	r3, [r2, #12]
					break;
 8003252:	e2e9      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a44      	ldr	r2, [pc, #272]	; (800336c <extInt_Config+0x708>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d106      	bne.n	800326e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <extInt_Config+0x6f4>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <extInt_Config+0x6f4>)
 8003266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326a:	60d3      	str	r3, [r2, #12]
					break;
 800326c:	e2dc      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3e      	ldr	r2, [pc, #248]	; (8003370 <extInt_Config+0x70c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d106      	bne.n	8003288 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <extInt_Config+0x6f4>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4a36      	ldr	r2, [pc, #216]	; (8003358 <extInt_Config+0x6f4>)
 8003280:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003284:	60d3      	str	r3, [r2, #12]
					break;
 8003286:	e2cf      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 8003288:	bf00      	nop
					break;
 800328a:	e2cd      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <extInt_Config+0x6f4>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <extInt_Config+0x6f4>)
 8003292:	f023 030f 	bic.w	r3, r3, #15
 8003296:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2f      	ldr	r2, [pc, #188]	; (800335c <extInt_Config+0x6f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d104      	bne.n	80032ae <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <extInt_Config+0x6f4>)
 80032a6:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <extInt_Config+0x6f4>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80032ac:	e2bc      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <extInt_Config+0x6fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d106      	bne.n	80032c8 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80032ba:	4b27      	ldr	r3, [pc, #156]	; (8003358 <extInt_Config+0x6f4>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <extInt_Config+0x6f4>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6113      	str	r3, [r2, #16]
					break;
 80032c6:	e2af      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <extInt_Config+0x700>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d106      	bne.n	80032e2 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <extInt_Config+0x6f4>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <extInt_Config+0x6f4>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	6113      	str	r3, [r2, #16]
					break;
 80032e0:	e2a2      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <extInt_Config+0x704>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d106      	bne.n	80032fc <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <extInt_Config+0x6f4>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <extInt_Config+0x6f4>)
 80032f4:	f043 0303 	orr.w	r3, r3, #3
 80032f8:	6113      	str	r3, [r2, #16]
					break;
 80032fa:	e295      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <extInt_Config+0x708>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d106      	bne.n	8003316 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <extInt_Config+0x6f4>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <extInt_Config+0x6f4>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6113      	str	r3, [r2, #16]
					break;
 8003314:	e288      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <extInt_Config+0x70c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d106      	bne.n	8003330 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <extInt_Config+0x6f4>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <extInt_Config+0x6f4>)
 8003328:	f043 0307 	orr.w	r3, r3, #7
 800332c:	6113      	str	r3, [r2, #16]
					break;
 800332e:	e27b      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 8003330:	bf00      	nop
					break;
 8003332:	e279      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <extInt_Config+0x6f4>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <extInt_Config+0x6f4>)
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <extInt_Config+0x6f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d113      	bne.n	8003374 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800334c:	4b02      	ldr	r3, [pc, #8]	; (8003358 <extInt_Config+0x6f4>)
 800334e:	4a02      	ldr	r2, [pc, #8]	; (8003358 <extInt_Config+0x6f4>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8003354:	e268      	b.n	8003828 <extInt_Config+0xbc4>
 8003356:	bf00      	nop
 8003358:	40013800 	.word	0x40013800
 800335c:	40020000 	.word	0x40020000
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021000 	.word	0x40021000
 8003370:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a83      	ldr	r2, [pc, #524]	; (8003588 <extInt_Config+0x924>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d106      	bne.n	800338e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003380:	4b82      	ldr	r3, [pc, #520]	; (800358c <extInt_Config+0x928>)
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	4a81      	ldr	r2, [pc, #516]	; (800358c <extInt_Config+0x928>)
 8003386:	f043 0310 	orr.w	r3, r3, #16
 800338a:	6113      	str	r3, [r2, #16]
					break;
 800338c:	e24c      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7e      	ldr	r2, [pc, #504]	; (8003590 <extInt_Config+0x92c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d106      	bne.n	80033a8 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800339a:	4b7c      	ldr	r3, [pc, #496]	; (800358c <extInt_Config+0x928>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4a7b      	ldr	r2, [pc, #492]	; (800358c <extInt_Config+0x928>)
 80033a0:	f043 0320 	orr.w	r3, r3, #32
 80033a4:	6113      	str	r3, [r2, #16]
					break;
 80033a6:	e23f      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a79      	ldr	r2, [pc, #484]	; (8003594 <extInt_Config+0x930>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d106      	bne.n	80033c2 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80033b4:	4b75      	ldr	r3, [pc, #468]	; (800358c <extInt_Config+0x928>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4a74      	ldr	r2, [pc, #464]	; (800358c <extInt_Config+0x928>)
 80033ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80033be:	6113      	str	r3, [r2, #16]
					break;
 80033c0:	e232      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a73      	ldr	r2, [pc, #460]	; (8003598 <extInt_Config+0x934>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d106      	bne.n	80033dc <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <extInt_Config+0x928>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <extInt_Config+0x928>)
 80033d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d8:	6113      	str	r3, [r2, #16]
					break;
 80033da:	e225      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	; (800359c <extInt_Config+0x938>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80033e8:	4b68      	ldr	r3, [pc, #416]	; (800358c <extInt_Config+0x928>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4a67      	ldr	r2, [pc, #412]	; (800358c <extInt_Config+0x928>)
 80033ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80033f2:	6113      	str	r3, [r2, #16]
					break;
 80033f4:	e218      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 80033f6:	bf00      	nop
					break;
 80033f8:	e216      	b.n	8003828 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80033fa:	4b64      	ldr	r3, [pc, #400]	; (800358c <extInt_Config+0x928>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	4a63      	ldr	r2, [pc, #396]	; (800358c <extInt_Config+0x928>)
 8003400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003404:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <extInt_Config+0x93c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d104      	bne.n	800341c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003412:	4b5e      	ldr	r3, [pc, #376]	; (800358c <extInt_Config+0x928>)
 8003414:	4a5d      	ldr	r2, [pc, #372]	; (800358c <extInt_Config+0x928>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800341a:	e205      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a59      	ldr	r2, [pc, #356]	; (8003588 <extInt_Config+0x924>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d106      	bne.n	8003436 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003428:	4b58      	ldr	r3, [pc, #352]	; (800358c <extInt_Config+0x928>)
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	4a57      	ldr	r2, [pc, #348]	; (800358c <extInt_Config+0x928>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6113      	str	r3, [r2, #16]
					break;
 8003434:	e1f8      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a54      	ldr	r2, [pc, #336]	; (8003590 <extInt_Config+0x92c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d106      	bne.n	8003450 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003442:	4b52      	ldr	r3, [pc, #328]	; (800358c <extInt_Config+0x928>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4a51      	ldr	r2, [pc, #324]	; (800358c <extInt_Config+0x928>)
 8003448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344c:	6113      	str	r3, [r2, #16]
					break;
 800344e:	e1eb      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4f      	ldr	r2, [pc, #316]	; (8003594 <extInt_Config+0x930>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d106      	bne.n	800346a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800345c:	4b4b      	ldr	r3, [pc, #300]	; (800358c <extInt_Config+0x928>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	4a4a      	ldr	r2, [pc, #296]	; (800358c <extInt_Config+0x928>)
 8003462:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003466:	6113      	str	r3, [r2, #16]
					break;
 8003468:	e1de      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a49      	ldr	r2, [pc, #292]	; (8003598 <extInt_Config+0x934>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d106      	bne.n	8003484 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003476:	4b45      	ldr	r3, [pc, #276]	; (800358c <extInt_Config+0x928>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4a44      	ldr	r2, [pc, #272]	; (800358c <extInt_Config+0x928>)
 800347c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003480:	6113      	str	r3, [r2, #16]
					break;
 8003482:	e1d1      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a44      	ldr	r2, [pc, #272]	; (800359c <extInt_Config+0x938>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d106      	bne.n	800349e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <extInt_Config+0x928>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	4a3d      	ldr	r2, [pc, #244]	; (800358c <extInt_Config+0x928>)
 8003496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800349a:	6113      	str	r3, [r2, #16]
					break;
 800349c:	e1c4      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 800349e:	bf00      	nop
					break;
 80034a0:	e1c2      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <extInt_Config+0x928>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4a39      	ldr	r2, [pc, #228]	; (800358c <extInt_Config+0x928>)
 80034a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ac:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3a      	ldr	r2, [pc, #232]	; (80035a0 <extInt_Config+0x93c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d104      	bne.n	80034c4 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <extInt_Config+0x928>)
 80034bc:	4a33      	ldr	r2, [pc, #204]	; (800358c <extInt_Config+0x928>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80034c2:	e1b1      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2f      	ldr	r2, [pc, #188]	; (8003588 <extInt_Config+0x924>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d106      	bne.n	80034de <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <extInt_Config+0x928>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4a2d      	ldr	r2, [pc, #180]	; (800358c <extInt_Config+0x928>)
 80034d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034da:	6113      	str	r3, [r2, #16]
					break;
 80034dc:	e1a4      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <extInt_Config+0x92c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d106      	bne.n	80034f8 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <extInt_Config+0x928>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <extInt_Config+0x928>)
 80034f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034f4:	6113      	str	r3, [r2, #16]
					break;
 80034f6:	e197      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a25      	ldr	r2, [pc, #148]	; (8003594 <extInt_Config+0x930>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d106      	bne.n	8003512 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <extInt_Config+0x928>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <extInt_Config+0x928>)
 800350a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800350e:	6113      	str	r3, [r2, #16]
					break;
 8003510:	e18a      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <extInt_Config+0x934>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d106      	bne.n	800352c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <extInt_Config+0x928>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <extInt_Config+0x928>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6113      	str	r3, [r2, #16]
					break;
 800352a:	e17d      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <extInt_Config+0x938>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d106      	bne.n	8003546 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <extInt_Config+0x928>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <extInt_Config+0x928>)
 800353e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003542:	6113      	str	r3, [r2, #16]
					break;
 8003544:	e170      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 8003546:	bf00      	nop
					break;
 8003548:	e16e      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <extInt_Config+0x928>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4a0f      	ldr	r2, [pc, #60]	; (800358c <extInt_Config+0x928>)
 8003550:	f023 030f 	bic.w	r3, r3, #15
 8003554:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <extInt_Config+0x93c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d104      	bne.n	800356c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <extInt_Config+0x928>)
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <extInt_Config+0x928>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800356a:	e15d      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <extInt_Config+0x924>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d115      	bne.n	80035a4 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <extInt_Config+0x928>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4a03      	ldr	r2, [pc, #12]	; (800358c <extInt_Config+0x928>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6153      	str	r3, [r2, #20]
					break;
 8003584:	e150      	b.n	8003828 <extInt_Config+0xbc4>
 8003586:	bf00      	nop
 8003588:	40020400 	.word	0x40020400
 800358c:	40013800 	.word	0x40013800
 8003590:	40020800 	.word	0x40020800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021000 	.word	0x40021000
 800359c:	40021c00 	.word	0x40021c00
 80035a0:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a89      	ldr	r2, [pc, #548]	; (80037d0 <extInt_Config+0xb6c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d106      	bne.n	80035be <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80035b0:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <extInt_Config+0xb70>)
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <extInt_Config+0xb70>)
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	6153      	str	r3, [r2, #20]
					break;
 80035bc:	e134      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a84      	ldr	r2, [pc, #528]	; (80037d8 <extInt_Config+0xb74>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d106      	bne.n	80035d8 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80035ca:	4b82      	ldr	r3, [pc, #520]	; (80037d4 <extInt_Config+0xb70>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4a81      	ldr	r2, [pc, #516]	; (80037d4 <extInt_Config+0xb70>)
 80035d0:	f043 0303 	orr.w	r3, r3, #3
 80035d4:	6153      	str	r3, [r2, #20]
					break;
 80035d6:	e127      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7f      	ldr	r2, [pc, #508]	; (80037dc <extInt_Config+0xb78>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d106      	bne.n	80035f2 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80035e4:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <extInt_Config+0xb70>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <extInt_Config+0xb70>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6153      	str	r3, [r2, #20]
					break;
 80035f0:	e11a      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a79      	ldr	r2, [pc, #484]	; (80037e0 <extInt_Config+0xb7c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d106      	bne.n	800360c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80035fe:	4b75      	ldr	r3, [pc, #468]	; (80037d4 <extInt_Config+0xb70>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4a74      	ldr	r2, [pc, #464]	; (80037d4 <extInt_Config+0xb70>)
 8003604:	f043 0307 	orr.w	r3, r3, #7
 8003608:	6153      	str	r3, [r2, #20]
					break;
 800360a:	e10d      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 800360c:	bf00      	nop
					break;
 800360e:	e10b      	b.n	8003828 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8003610:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <extInt_Config+0xb70>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4a6f      	ldr	r2, [pc, #444]	; (80037d4 <extInt_Config+0xb70>)
 8003616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <extInt_Config+0xb80>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d104      	bne.n	8003632 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003628:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <extInt_Config+0xb70>)
 800362a:	4a6a      	ldr	r2, [pc, #424]	; (80037d4 <extInt_Config+0xb70>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	6153      	str	r3, [r2, #20]
 8003630:	e041      	b.n	80036b6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6b      	ldr	r2, [pc, #428]	; (80037e8 <extInt_Config+0xb84>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d106      	bne.n	800364c <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <extInt_Config+0xb70>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4a64      	ldr	r2, [pc, #400]	; (80037d4 <extInt_Config+0xb70>)
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	6153      	str	r3, [r2, #20]
 800364a:	e034      	b.n	80036b6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5f      	ldr	r2, [pc, #380]	; (80037d0 <extInt_Config+0xb6c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d106      	bne.n	8003666 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <extInt_Config+0xb70>)
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <extInt_Config+0xb70>)
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	6153      	str	r3, [r2, #20]
 8003664:	e027      	b.n	80036b6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5a      	ldr	r2, [pc, #360]	; (80037d8 <extInt_Config+0xb74>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d106      	bne.n	8003680 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003672:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <extInt_Config+0xb70>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4a57      	ldr	r2, [pc, #348]	; (80037d4 <extInt_Config+0xb70>)
 8003678:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800367c:	6153      	str	r3, [r2, #20]
 800367e:	e01a      	b.n	80036b6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a55      	ldr	r2, [pc, #340]	; (80037dc <extInt_Config+0xb78>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d106      	bne.n	800369a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800368c:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <extInt_Config+0xb70>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	4a50      	ldr	r2, [pc, #320]	; (80037d4 <extInt_Config+0xb70>)
 8003692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003696:	6153      	str	r3, [r2, #20]
 8003698:	e00d      	b.n	80036b6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4f      	ldr	r2, [pc, #316]	; (80037e0 <extInt_Config+0xb7c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d106      	bne.n	80036b4 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <extInt_Config+0xb70>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <extInt_Config+0xb70>)
 80036ac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80036b0:	6153      	str	r3, [r2, #20]
 80036b2:	e000      	b.n	80036b6 <extInt_Config+0xa52>

					} else {
						__NOP();
 80036b4:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <extInt_Config+0xb70>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4a46      	ldr	r2, [pc, #280]	; (80037d4 <extInt_Config+0xb70>)
 80036bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c0:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a46      	ldr	r2, [pc, #280]	; (80037e4 <extInt_Config+0xb80>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d104      	bne.n	80036d8 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <extInt_Config+0xb70>)
 80036d0:	4a40      	ldr	r2, [pc, #256]	; (80037d4 <extInt_Config+0xb70>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80036d6:	e0a7      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a42      	ldr	r2, [pc, #264]	; (80037e8 <extInt_Config+0xb84>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d106      	bne.n	80036f2 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <extInt_Config+0xb70>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4a3a      	ldr	r2, [pc, #232]	; (80037d4 <extInt_Config+0xb70>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6153      	str	r3, [r2, #20]
					break;
 80036f0:	e09a      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <extInt_Config+0xb6c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d106      	bne.n	800370c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <extInt_Config+0xb70>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <extInt_Config+0xb70>)
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	6153      	str	r3, [r2, #20]
					break;
 800370a:	e08d      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a31      	ldr	r2, [pc, #196]	; (80037d8 <extInt_Config+0xb74>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d106      	bne.n	8003726 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <extInt_Config+0xb70>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <extInt_Config+0xb70>)
 800371e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003722:	6153      	str	r3, [r2, #20]
					break;
 8003724:	e080      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <extInt_Config+0xb78>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d106      	bne.n	8003740 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <extInt_Config+0xb70>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <extInt_Config+0xb70>)
 8003738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373c:	6153      	str	r3, [r2, #20]
					break;
 800373e:	e073      	b.n	8003828 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <extInt_Config+0xb7c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d106      	bne.n	800375a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <extInt_Config+0xb70>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <extInt_Config+0xb70>)
 8003752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003756:	6153      	str	r3, [r2, #20]
					break;
 8003758:	e066      	b.n	8003828 <extInt_Config+0xbc4>
						__NOP();
 800375a:	bf00      	nop
					break;
 800375c:	e064      	b.n	8003828 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <extInt_Config+0xb70>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <extInt_Config+0xb70>)
 8003764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003768:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <extInt_Config+0xb80>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d104      	bne.n	8003780 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <extInt_Config+0xb70>)
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <extInt_Config+0xb70>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800377e:	e053      	b.n	8003828 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <extInt_Config+0xb84>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d106      	bne.n	800379a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <extInt_Config+0xb70>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <extInt_Config+0xb70>)
 8003792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003796:	6153      	str	r3, [r2, #20]
						break;
 8003798:	e046      	b.n	8003828 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <extInt_Config+0xb6c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d106      	bne.n	80037b4 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <extInt_Config+0xb70>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <extInt_Config+0xb70>)
 80037ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b0:	6153      	str	r3, [r2, #20]
						break;
 80037b2:	e039      	b.n	8003828 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <extInt_Config+0xb74>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d115      	bne.n	80037ec <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <extInt_Config+0xb70>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <extInt_Config+0xb70>)
 80037c6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80037ca:	6153      	str	r3, [r2, #20]
						break;
 80037cc:	e02c      	b.n	8003828 <extInt_Config+0xbc4>
 80037ce:	bf00      	nop
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6c      	ldr	r2, [pc, #432]	; (80039a4 <extInt_Config+0xd40>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d106      	bne.n	8003806 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80037f8:	4b6b      	ldr	r3, [pc, #428]	; (80039a8 <extInt_Config+0xd44>)
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <extInt_Config+0xd44>)
 80037fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003802:	6153      	str	r3, [r2, #20]
						break;
 8003804:	e010      	b.n	8003828 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a67      	ldr	r2, [pc, #412]	; (80039ac <extInt_Config+0xd48>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d106      	bne.n	8003820 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <extInt_Config+0xd44>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <extInt_Config+0xd44>)
 8003818:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800381c:	6153      	str	r3, [r2, #20]
						break;
 800381e:	e003      	b.n	8003828 <extInt_Config+0xbc4>
							__NOP();
 8003820:	bf00      	nop
						break;
 8003822:	e001      	b.n	8003828 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8003824:	bf00      	nop
						break;
 8003826:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d020      	beq.n	8003872 <extInt_Config+0xc0e>
 8003830:	2b02      	cmp	r3, #2
 8003832:	dc37      	bgt.n	80038a4 <extInt_Config+0xc40>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <extInt_Config+0xbda>
 8003838:	2b01      	cmp	r3, #1
 800383a:	d00d      	beq.n	8003858 <extInt_Config+0xbf4>
 800383c:	e032      	b.n	80038a4 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <extInt_Config+0xd4c>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	7912      	ldrb	r2, [r2, #4]
 8003848:	4611      	mov	r1, r2
 800384a:	2201      	movs	r2, #1
 800384c:	408a      	lsls	r2, r1
 800384e:	4611      	mov	r1, r2
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <extInt_Config+0xd4c>)
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]

		break;
 8003856:	e027      	b.n	80038a8 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003858:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <extInt_Config+0xd4c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	7912      	ldrb	r2, [r2, #4]
 8003862:	4611      	mov	r1, r2
 8003864:	2201      	movs	r2, #1
 8003866:	408a      	lsls	r2, r1
 8003868:	4611      	mov	r1, r2
 800386a:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <extInt_Config+0xd4c>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]

		break;
 8003870:	e01a      	b.n	80038a8 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003872:	4b4f      	ldr	r3, [pc, #316]	; (80039b0 <extInt_Config+0xd4c>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	7912      	ldrb	r2, [r2, #4]
 800387c:	4611      	mov	r1, r2
 800387e:	2201      	movs	r2, #1
 8003880:	408a      	lsls	r2, r1
 8003882:	4611      	mov	r1, r2
 8003884:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <extInt_Config+0xd4c>)
 8003886:	430b      	orrs	r3, r1
 8003888:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800388a:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <extInt_Config+0xd4c>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	7912      	ldrb	r2, [r2, #4]
 8003894:	4611      	mov	r1, r2
 8003896:	2201      	movs	r2, #1
 8003898:	408a      	lsls	r2, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4a44      	ldr	r2, [pc, #272]	; (80039b0 <extInt_Config+0xd4c>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	6093      	str	r3, [r2, #8]

		break;
 80038a2:	e001      	b.n	80038a8 <extInt_Config+0xc44>

	}default :{

		__NOP();
 80038a4:	bf00      	nop
		break;
 80038a6:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <extInt_Config+0xd4c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	7912      	ldrb	r2, [r2, #4]
 80038b6:	4611      	mov	r1, r2
 80038b8:	2201      	movs	r2, #1
 80038ba:	408a      	lsls	r2, r1
 80038bc:	4611      	mov	r1, r2
 80038be:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <extInt_Config+0xd4c>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	791b      	ldrb	r3, [r3, #4]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d862      	bhi.n	8003994 <extInt_Config+0xd30>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <extInt_Config+0xc70>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	08003915 	.word	0x08003915
 80038d8:	0800391d 	.word	0x0800391d
 80038dc:	08003925 	.word	0x08003925
 80038e0:	0800392d 	.word	0x0800392d
 80038e4:	08003935 	.word	0x08003935
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	08003945 	.word	0x08003945
 80038f0:	0800394d 	.word	0x0800394d
 80038f4:	08003955 	.word	0x08003955
 80038f8:	0800395d 	.word	0x0800395d
 80038fc:	08003965 	.word	0x08003965
 8003900:	0800396d 	.word	0x0800396d
 8003904:	08003975 	.word	0x08003975
 8003908:	0800397d 	.word	0x0800397d
 800390c:	08003985 	.word	0x08003985
 8003910:	0800398d 	.word	0x0800398d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8003914:	2006      	movs	r0, #6
 8003916:	f7ff f987 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800391a:	e03d      	b.n	8003998 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800391c:	2007      	movs	r0, #7
 800391e:	f7ff f983 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003922:	e039      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8003924:	2008      	movs	r0, #8
 8003926:	f7ff f97f 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800392a:	e035      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800392c:	2009      	movs	r0, #9
 800392e:	f7ff f97b 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003932:	e031      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8003934:	200a      	movs	r0, #10
 8003936:	f7ff f977 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800393a:	e02d      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800393c:	2017      	movs	r0, #23
 800393e:	f7ff f973 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003942:	e029      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003944:	2017      	movs	r0, #23
 8003946:	f7ff f96f 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800394a:	e025      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800394c:	2017      	movs	r0, #23
 800394e:	f7ff f96b 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003952:	e021      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003954:	2017      	movs	r0, #23
 8003956:	f7ff f967 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800395a:	e01d      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800395c:	2017      	movs	r0, #23
 800395e:	f7ff f963 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003962:	e019      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003964:	2028      	movs	r0, #40	; 0x28
 8003966:	f7ff f95f 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800396a:	e015      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800396c:	2028      	movs	r0, #40	; 0x28
 800396e:	f7ff f95b 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003972:	e011      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003974:	2028      	movs	r0, #40	; 0x28
 8003976:	f7ff f957 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800397a:	e00d      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800397c:	2028      	movs	r0, #40	; 0x28
 800397e:	f7ff f953 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003982:	e009      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003984:	2028      	movs	r0, #40	; 0x28
 8003986:	f7ff f94f 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 800398a:	e005      	b.n	8003998 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800398c:	2028      	movs	r0, #40	; 0x28
 800398e:	f7ff f94b 	bl	8002c28 <__NVIC_EnableIRQ>
			break;
 8003992:	e001      	b.n	8003998 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8003994:	bf00      	nop
			break;
 8003996:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003998:	b662      	cpsie	i
}
 800399a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40021c00 	.word	0x40021c00
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	__NOP();
 80039b8:	bf00      	nop
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	__NOP();
 80039c8:	bf00      	nop
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	__NOP();
 80039d8:	bf00      	nop
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	__NOP();
 80039e8:	bf00      	nop
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
	__NOP();
 80039f8:	bf00      	nop
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
	__NOP();
 8003a08:	bf00      	nop
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	__NOP();
 8003a18:	bf00      	nop
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
	__NOP();
 8003a28:	bf00      	nop
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
	__NOP();
 8003a38:	bf00      	nop
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	__NOP();
 8003a48:	bf00      	nop
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	__NOP();
 8003a58:	bf00      	nop
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
	__NOP();
 8003a68:	bf00      	nop
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	__NOP();
 8003a78:	bf00      	nop
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
	__NOP();
 8003a88:	bf00      	nop
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <EXTI0_IRQHandler+0x24>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <EXTI0_IRQHandler+0x24>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <EXTI0_IRQHandler+0x24>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8003ab0:	f7ff ff80 	bl	80039b4 <callback_extInt0>
	}
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <EXTI1_IRQHandler+0x24>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <EXTI1_IRQHandler+0x24>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <EXTI1_IRQHandler+0x24>)
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8003ad8:	f7fd fc34 	bl	8001344 <callback_extInt1>
	}
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <EXTI2_IRQHandler+0x24>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <EXTI2_IRQHandler+0x24>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <EXTI2_IRQHandler+0x24>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8003b00:	f7ff ff60 	bl	80039c4 <callback_extInt2>
	}
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <EXTI3_IRQHandler+0x24>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <EXTI3_IRQHandler+0x24>)
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <EXTI3_IRQHandler+0x24>)
 8003b22:	f043 0308 	orr.w	r3, r3, #8
 8003b26:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8003b28:	f7fd fc1c 	bl	8001364 <callback_extInt3>
	}
}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <EXTI4_IRQHandler+0x24>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <EXTI4_IRQHandler+0x24>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4a03      	ldr	r2, [pc, #12]	; (8003b58 <EXTI4_IRQHandler+0x24>)
 8003b4a:	f043 0310 	orr.w	r3, r3, #16
 8003b4e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8003b50:	f7ff ff40 	bl	80039d4 <callback_extInt4>
	}
}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8003b60:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8003b78:	f7ff ff34 	bl	80039e4 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8003b7c:	e03c      	b.n	8003bf8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8003b96:	f7ff ff2d 	bl	80039f4 <callback_extInt6>
}
 8003b9a:	e02d      	b.n	8003bf8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb2:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8003bb4:	f7ff ff26 	bl	8003a04 <callback_extInt7>
}
 8003bb8:	e01e      	b.n	8003bf8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8003bd2:	f7ff ff1f 	bl	8003a14 <callback_extInt8>
}
 8003bd6:	e00f      	b.n	8003bf8 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <EXTI9_5_IRQHandler+0xa0>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bee:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8003bf0:	f7ff ff18 	bl	8003a24 <callback_extInt9>
}
 8003bf4:	e000      	b.n	8003bf8 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003bf6:	bf00      	nop
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c1a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8003c1c:	f7ff ff0a 	bl	8003a34 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8003c20:	e049      	b.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8003c2e:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c38:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8003c3a:	f7ff ff03 	bl	8003a44 <callback_extInt11>
}
 8003c3e:	e03a      	b.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c56:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8003c58:	f7ff fefc 	bl	8003a54 <callback_extInt12>
}
 8003c5c:	e02b      	b.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c74:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8003c76:	f7ff fef5 	bl	8003a64 <callback_extInt13>
}
 8003c7a:	e01c      	b.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c92:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003c94:	f7ff feee 	bl	8003a74 <callback_extInt14>
}
 8003c98:	e00d      	b.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <EXTI15_10_IRQHandler+0xbc>)
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb0:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8003cb2:	f7ff fee7 	bl	8003a84 <callback_extInt15>
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40013c00 	.word	0x40013c00

08003cc0 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a88      	ldr	r2, [pc, #544]	; (8003ef8 <GPIO_Config+0x238>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d106      	bne.n	8003ce8 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <GPIO_Config+0x23c>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a87      	ldr	r2, [pc, #540]	; (8003efc <GPIO_Config+0x23c>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	e03a      	b.n	8003d5e <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a84      	ldr	r2, [pc, #528]	; (8003f00 <GPIO_Config+0x240>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d106      	bne.n	8003d00 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8003cf2:	4b82      	ldr	r3, [pc, #520]	; (8003efc <GPIO_Config+0x23c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a81      	ldr	r2, [pc, #516]	; (8003efc <GPIO_Config+0x23c>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	e02e      	b.n	8003d5e <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a7f      	ldr	r2, [pc, #508]	; (8003f04 <GPIO_Config+0x244>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d106      	bne.n	8003d18 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <GPIO_Config+0x23c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a7b      	ldr	r2, [pc, #492]	; (8003efc <GPIO_Config+0x23c>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	e022      	b.n	8003d5e <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <GPIO_Config+0x248>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d106      	bne.n	8003d30 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <GPIO_Config+0x23c>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <GPIO_Config+0x23c>)
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	e016      	b.n	8003d5e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a75      	ldr	r2, [pc, #468]	; (8003f0c <GPIO_Config+0x24c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d106      	bne.n	8003d48 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8003d3a:	4b70      	ldr	r3, [pc, #448]	; (8003efc <GPIO_Config+0x23c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a6f      	ldr	r2, [pc, #444]	; (8003efc <GPIO_Config+0x23c>)
 8003d40:	f043 0310 	orr.w	r3, r3, #16
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	e00a      	b.n	8003d5e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <GPIO_Config+0x250>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d105      	bne.n	8003d5e <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003d52:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <GPIO_Config+0x23c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a69      	ldr	r2, [pc, #420]	; (8003efc <GPIO_Config+0x23c>)
 8003d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	795b      	ldrb	r3, [r3, #5]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d143      	bne.n	8003dee <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	791b      	ldrb	r3, [r3, #4]
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d81f      	bhi.n	8003dae <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	791b      	ldrb	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7a5b      	ldrb	r3, [r3, #9]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	4619      	mov	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	621a      	str	r2, [r3, #32]
 8003dac:	e01f      	b.n	8003dee <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	3b08      	subs	r3, #8
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dbe:	210f      	movs	r1, #15
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	400a      	ands	r2, r1
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7a5b      	ldrb	r3, [r3, #9]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	795b      	ldrb	r3, [r3, #5]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	791b      	ldrb	r3, [r3, #4]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2103      	movs	r1, #3
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7a1b      	ldrb	r3, [r3, #8]
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	791b      	ldrb	r3, [r3, #4]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	408b      	lsls	r3, r1
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	400a      	ands	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	799b      	ldrb	r3, [r3, #6]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	791b      	ldrb	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	791b      	ldrb	r3, [r3, #4]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2103      	movs	r1, #3
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	400a      	ands	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	79db      	ldrb	r3, [r3, #7]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2103      	movs	r1, #3
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68d9      	ldr	r1, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40020800 	.word	0x40020800
 8003f08:	40020c00 	.word	0x40020c00
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40021c00 	.word	0x40021c00

08003f14 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10d      	bne.n	8003f42 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	791b      	ldrb	r3, [r3, #4]
 8003f30:	4619      	mov	r1, r3
 8003f32:	2301      	movs	r3, #1
 8003f34:	408b      	lsls	r3, r1
 8003f36:	4619      	mov	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003f40:	e00d      	b.n	8003f5e <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	791b      	ldrb	r3, [r3, #4]
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	4619      	mov	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	619a      	str	r2, [r3, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	4619      	mov	r1, r3
 8003f88:	2301      	movs	r3, #1
 8003f8a:	408b      	lsls	r3, r1
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8003f96:	e00d      	b.n	8003fb4 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	791b      	ldrb	r3, [r3, #4]
 8003fa2:	3310      	adds	r3, #16
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	4619      	mov	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	619a      	str	r2, [r3, #24]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	791b      	ldrb	r3, [r3, #4]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8003fe0:	897b      	ldrh	r3, [r7, #10]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	791b      	ldrb	r3, [r3, #4]
 8003fec:	461a      	mov	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	40d3      	lsrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ffd8 	bl	8003fc0 <GPIO_ReadPin>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff76 	bl	8003f14 <GPIO_WritePin>
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fe3b 	bl	8003cc0 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fe36 	bl	8003cc0 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f002 f95b 	bl	8006314 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800405e:	e004      	b.n	800406a <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f94f 	bl	8004304 <WHOIAM>
 8004066:	4603      	mov	r3, r0
 8004068:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f7      	beq.n	8004060 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8004070:	216b      	movs	r1, #107	; 0x6b
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f1 	bl	800425a <readData>
 8004078:	4603      	mov	r3, r0
 800407a:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800407c:	2300      	movs	r3, #0
 800407e:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8004080:	7bbb      	ldrb	r3, [r7, #14]
 8004082:	461a      	mov	r2, r3
 8004084:	216b      	movs	r1, #107	; 0x6b
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f89c 	bl	80041c4 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800408c:	216b      	movs	r1, #107	; 0x6b
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8e3 	bl	800425a <readData>
 8004094:	4603      	mov	r3, r0
 8004096:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8004098:	211c      	movs	r1, #28
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8dd 	bl	800425a <readData>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	f023 0318 	bic.w	r3, r3, #24
 80040aa:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d833      	bhi.n	800411c <configMPUAccel+0xec>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <configMPUAccel+0x8c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040db 	.word	0x080040db
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	461a      	mov	r2, r3
 80040d0:	211c      	movs	r1, #28
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f876 	bl	80041c4 <writeData>


				break;
 80040d8:	e021      	b.n	800411e <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	f043 0308 	orr.w	r3, r3, #8
 80040e0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	461a      	mov	r2, r3
 80040e6:	211c      	movs	r1, #28
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f86b 	bl	80041c4 <writeData>


				break;
 80040ee:	e016      	b.n	800411e <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	f043 0310 	orr.w	r3, r3, #16
 80040f6:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	461a      	mov	r2, r3
 80040fc:	211c      	movs	r1, #28
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f860 	bl	80041c4 <writeData>


				break;
 8004104:	e00b      	b.n	800411e <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	f043 0318 	orr.w	r3, r3, #24
 800410c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	461a      	mov	r2, r3
 8004112:	211c      	movs	r1, #28
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f855 	bl	80041c4 <writeData>


				break;
 800411a:	e000      	b.n	800411e <configMPUAccel+0xee>
			}default:{
				break;
 800411c:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800411e:	211c      	movs	r1, #28
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f89a 	bl	800425a <readData>
 8004126:	4603      	mov	r3, r0
 8004128:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800412a:	211b      	movs	r1, #27
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f894 	bl	800425a <readData>
 8004132:	4603      	mov	r3, r0
 8004134:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	f023 0318 	bic.w	r3, r3, #24
 800413c:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d832      	bhi.n	80041ac <configMPUAccel+0x17c>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <configMPUAccel+0x11c>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416b 	.word	0x0800416b
 8004154:	08004181 	.word	0x08004181
 8004158:	08004197 	.word	0x08004197
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	461a      	mov	r2, r3
 8004160:	211b      	movs	r1, #27
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f82e 	bl	80041c4 <writeData>


				break;
 8004168:	e021      	b.n	80041ae <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8004172:	7bbb      	ldrb	r3, [r7, #14]
 8004174:	461a      	mov	r2, r3
 8004176:	211b      	movs	r1, #27
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f823 	bl	80041c4 <writeData>


				break;
 800417e:	e016      	b.n	80041ae <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	461a      	mov	r2, r3
 800418c:	211b      	movs	r1, #27
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f818 	bl	80041c4 <writeData>


				break;
 8004194:	e00b      	b.n	80041ae <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8004196:	7bbb      	ldrb	r3, [r7, #14]
 8004198:	f043 0318 	orr.w	r3, r3, #24
 800419c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	461a      	mov	r2, r3
 80041a2:	211b      	movs	r1, #27
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f80d 	bl	80041c4 <writeData>


				break;
 80041aa:	e000      	b.n	80041ae <configMPUAccel+0x17e>
			}default:{
				break;
 80041ac:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80041ae:	211b      	movs	r1, #27
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f852 	bl	800425a <readData>
 80041b6:	4603      	mov	r3, r0
 80041b8:	73bb      	strb	r3, [r7, #14]


}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
 80041d0:	4613      	mov	r3, r2
 80041d2:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 fa01 	bl	80065f4 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68d8      	ldr	r0, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	791b      	ldrb	r3, [r3, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	4619      	mov	r1, r3
 8004200:	f002 fa63 	bl	80066ca <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f002 fa84 	bl	800671a <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004212:	e000      	b.n	8004216 <writeData+0x52>
		__NOP();
 8004214:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f6      	bne.n	8004214 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	78ba      	ldrb	r2, [r7, #2]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f002 fa8d 	bl	800674e <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004234:	e000      	b.n	8004238 <writeData+0x74>
		__NOP();
 8004236:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f6      	bne.n	8004236 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4618      	mov	r0, r3
 800424e:	f002 f9bf 	bl	80065d0 <i2c_stopTransaction>



}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4618      	mov	r0, r3
 8004284:	f002 f9b6 	bl	80065f4 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68d8      	ldr	r0, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	791b      	ldrb	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	4619      	mov	r1, r3
 8004296:	f002 fa18 	bl	80066ca <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 fa39 	bl	800671a <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80042a8:	e000      	b.n	80042ac <readData+0x52>
		__NOP();
 80042aa:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f6      	bne.n	80042aa <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f002 f9c8 	bl	8006656 <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68d8      	ldr	r0, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	791b      	ldrb	r3, [r3, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	4619      	mov	r1, r3
 80042d4:	f002 f9f9 	bl	80066ca <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4618      	mov	r0, r3
 80042de:	f002 f9e2 	bl	80066a6 <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 f972 	bl	80065d0 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fa46 	bl	8006782 <i2c_readDataByte>
 80042f6:	4603      	mov	r3, r0
 80042f8:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8004314:	2175      	movs	r1, #117	; 0x75
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff9f 	bl	800425a <readData>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004326:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf14      	ite	ne
 8004332:	2301      	movne	r3, #1
 8004334:	2300      	moveq	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800433a:	7bbb      	ldrb	r3, [r7, #14]

}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0000      	movs	r0, r0
	...

08004348 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8004368:	2143      	movs	r1, #67	; 0x43
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff75 	bl	800425a <readData>
 8004370:	4603      	mov	r3, r0
 8004372:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8004374:	2144      	movs	r1, #68	; 0x44
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ff6f 	bl	800425a <readData>
 800437c:	4603      	mov	r3, r0
 800437e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8004380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	b21a      	sxth	r2, r3
 8004388:	89bb      	ldrh	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d846      	bhi.n	8004424 <readGyro_X+0xdc>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <readGyro_X+0x54>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	08004407 	.word	0x08004407
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 80043ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f8bf 	bl	8000534 <__aeabi_i2d>
 80043b6:	a325      	add	r3, pc, #148	; (adr r3, 800444c <readGyro_X+0x104>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc fa4e 	bl	800085c <__aeabi_ddiv>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80043c8:	e02d      	b.n	8004426 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 80043ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f8b0 	bl	8000534 <__aeabi_i2d>
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <readGyro_X+0xf8>)
 80043da:	f7fc fa3f 	bl	800085c <__aeabi_ddiv>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80043e6:	e01e      	b.n	8004426 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 80043e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fc f8a1 	bl	8000534 <__aeabi_i2d>
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <readGyro_X+0xfc>)
 80043f8:	f7fc fa30 	bl	800085c <__aeabi_ddiv>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004404:	e00f      	b.n	8004426 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8004406:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f892 	bl	8000534 <__aeabi_i2d>
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <readGyro_X+0x100>)
 8004416:	f7fc fa21 	bl	800085c <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004422:	e000      	b.n	8004426 <readGyro_X+0xde>
		}default:{
			break;
 8004424:	bf00      	nop
		}

	}

	return GYROX_R;
 8004426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800442a:	f7fc fbe5 	bl	8000bf8 <__aeabi_d2f>
 800442e:	4603      	mov	r3, r0
 8004430:	ee07 3a90 	vmov	s15, r3

}
 8004434:	eeb0 0a67 	vmov.f32	s0, s15
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40508000 	.word	0x40508000
 8004444:	40408000 	.word	0x40408000
 8004448:	40300000 	.word	0x40300000
 800444c:	00000000 	.word	0x00000000
 8004450:	40606000 	.word	0x40606000
 8004454:	00000000 	.word	0x00000000

08004458 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8004478:	2145      	movs	r1, #69	; 0x45
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff feed 	bl	800425a <readData>
 8004480:	4603      	mov	r3, r0
 8004482:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8004484:	2146      	movs	r1, #70	; 0x46
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fee7 	bl	800425a <readData>
 800448c:	4603      	mov	r3, r0
 800448e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8004490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b21a      	sxth	r2, r3
 8004498:	89bb      	ldrh	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d846      	bhi.n	8004534 <readGyro_Y+0xdc>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <readGyro_Y+0x54>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044f9 	.word	0x080044f9
 80044b8:	08004517 	.word	0x08004517
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 80044bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fc f837 	bl	8000534 <__aeabi_i2d>
 80044c6:	a325      	add	r3, pc, #148	; (adr r3, 800455c <readGyro_Y+0x104>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fc f9c6 	bl	800085c <__aeabi_ddiv>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80044d8:	e02d      	b.n	8004536 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 80044da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc f828 	bl	8000534 <__aeabi_i2d>
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <readGyro_Y+0xf8>)
 80044ea:	f7fc f9b7 	bl	800085c <__aeabi_ddiv>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80044f6:	e01e      	b.n	8004536 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80044f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc f819 	bl	8000534 <__aeabi_i2d>
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <readGyro_Y+0xfc>)
 8004508:	f7fc f9a8 	bl	800085c <__aeabi_ddiv>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004514:	e00f      	b.n	8004536 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8004516:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc f80a 	bl	8000534 <__aeabi_i2d>
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <readGyro_Y+0x100>)
 8004526:	f7fc f999 	bl	800085c <__aeabi_ddiv>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004532:	e000      	b.n	8004536 <readGyro_Y+0xde>
		}default:{
			break;
 8004534:	bf00      	nop
		}

	}

	return GYROY_R;
 8004536:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800453a:	f7fc fb5d 	bl	8000bf8 <__aeabi_d2f>
 800453e:	4603      	mov	r3, r0
 8004540:	ee07 3a90 	vmov	s15, r3

}
 8004544:	eeb0 0a67 	vmov.f32	s0, s15
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40508000 	.word	0x40508000
 8004554:	40408000 	.word	0x40408000
 8004558:	40300000 	.word	0x40300000
 800455c:	00000000 	.word	0x00000000
 8004560:	40606000 	.word	0x40606000
 8004564:	00000000 	.word	0x00000000

08004568 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8004588:	2147      	movs	r1, #71	; 0x47
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fe65 	bl	800425a <readData>
 8004590:	4603      	mov	r3, r0
 8004592:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8004594:	2148      	movs	r1, #72	; 0x48
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fe5f 	bl	800425a <readData>
 800459c:	4603      	mov	r3, r0
 800459e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 80045a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	89bb      	ldrh	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d846      	bhi.n	8004644 <readGyro_Z+0xdc>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <readGyro_Z+0x54>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004627 	.word	0x08004627
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 80045cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ffaf 	bl	8000534 <__aeabi_i2d>
 80045d6:	a325      	add	r3, pc, #148	; (adr r3, 800466c <readGyro_Z+0x104>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fc f93e 	bl	800085c <__aeabi_ddiv>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80045e8:	e02d      	b.n	8004646 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 80045ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ffa0 	bl	8000534 <__aeabi_i2d>
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <readGyro_Z+0xf8>)
 80045fa:	f7fc f92f 	bl	800085c <__aeabi_ddiv>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004606:	e01e      	b.n	8004646 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8004608:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fb ff91 	bl	8000534 <__aeabi_i2d>
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <readGyro_Z+0xfc>)
 8004618:	f7fc f920 	bl	800085c <__aeabi_ddiv>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004624:	e00f      	b.n	8004646 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8004626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fb ff82 	bl	8000534 <__aeabi_i2d>
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <readGyro_Z+0x100>)
 8004636:	f7fc f911 	bl	800085c <__aeabi_ddiv>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8004642:	e000      	b.n	8004646 <readGyro_Z+0xde>
		}default:{
			break;
 8004644:	bf00      	nop
		}

	}

	return GYROZ_R;
 8004646:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800464a:	f7fc fad5 	bl	8000bf8 <__aeabi_d2f>
 800464e:	4603      	mov	r3, r0
 8004650:	ee07 3a90 	vmov	s15, r3

}
 8004654:	eeb0 0a67 	vmov.f32	s0, s15
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40508000 	.word	0x40508000
 8004664:	40408000 	.word	0x40408000
 8004668:	40300000 	.word	0x40300000
 800466c:	00000000 	.word	0x00000000
 8004670:	40606000 	.word	0x40606000
 8004674:	00000000 	.word	0x00000000

08004678 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8004678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800467c:	b08a      	sub	sp, #40	; 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800468e:	f7fb fe03 	bl	8000298 <__aeabi_dsub>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80046a6:	f7fb fdf7 	bl	8000298 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 80046b2:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80047c0 <calculation_parameter_distance+0x148>
 80046b6:	ed97 0b08 	vldr	d0, [r7, #32]
 80046ba:	f005 f887 	bl	80097cc <pow>
 80046be:	ec59 8b10 	vmov	r8, r9, d0
 80046c2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80047c0 <calculation_parameter_distance+0x148>
 80046c6:	ed97 0b06 	vldr	d0, [r7, #24]
 80046ca:	f005 f87f 	bl	80097cc <pow>
 80046ce:	ec53 2b10 	vmov	r2, r3, d0
 80046d2:	4640      	mov	r0, r8
 80046d4:	4649      	mov	r1, r9
 80046d6:	f7fb fde1 	bl	800029c <__adddf3>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	ec43 2b17 	vmov	d7, r2, r3
 80046e2:	eeb0 0a47 	vmov.f32	s0, s14
 80046e6:	eef0 0a67 	vmov.f32	s1, s15
 80046ea:	f005 f8df 	bl	80098ac <sqrt>
 80046ee:	eeb0 7a40 	vmov.f32	s14, s0
 80046f2:	eef0 7a60 	vmov.f32	s15, s1
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004702:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004726:	f7fb ff6f 	bl	8000608 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4690      	mov	r8, r2
 8004730:	4699      	mov	r9, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473c:	f7fb ff64 	bl	8000608 <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fb fda6 	bl	8000298 <__aeabi_dsub>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800475c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8004760:	6a3c      	ldr	r4, [r7, #32]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004784:	f7fb ff40 	bl	8000608 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	f7fb ff35 	bl	8000608 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb fd79 	bl	800029c <__adddf3>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047be:	bf00      	nop
 80047c0:	00000000 	.word	0x00000000
 80047c4:	40000000 	.word	0x40000000

080047c8 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80047c8:	b5b0      	push	{r4, r5, r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6178      	str	r0, [r7, #20]
 80047d0:	ed87 0b02 	vstr	d0, [r7, #8]
 80047d4:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80047de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e2:	f7fb ff11 	bl	8000608 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4614      	mov	r4, r2
 80047ec:	461d      	mov	r5, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80047f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f8:	f7fb ff06 	bl	8000608 <__aeabi_dmul>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fb fd4a 	bl	800029c <__adddf3>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004816:	f7fb fd41 	bl	800029c <__adddf3>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fc f818 	bl	800085c <__aeabi_ddiv>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8004830:	4611      	mov	r1, r2
 8004832:	61b9      	str	r1, [r7, #24]
 8004834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004838:	61fb      	str	r3, [r7, #28]

	return distance;
 800483a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004842:	eeb0 0a47 	vmov.f32	s0, s14
 8004846:	eef0 0a67 	vmov.f32	s1, s15
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bdb0      	pop	{r4, r5, r7, pc}

08004850 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6178      	str	r0, [r7, #20]
 8004858:	ed87 0b02 	vstr	d0, [r7, #8]
 800485c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800486a:	f7fb fecd 	bl	8000608 <__aeabi_dmul>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4614      	mov	r4, r2
 8004874:	461d      	mov	r5, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800487c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004880:	f7fb fec2 	bl	8000608 <__aeabi_dmul>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4620      	mov	r0, r4
 800488a:	4629      	mov	r1, r5
 800488c:	f7fb fd06 	bl	800029c <__adddf3>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800489e:	f7fb fcfd 	bl	800029c <__adddf3>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80048b0:	f7fb ffd4 	bl	800085c <__aeabi_ddiv>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80048bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80048c4:	eeb0 0a47 	vmov.f32	s0, s14
 80048c8:	eef0 0a67 	vmov.f32	s1, s15
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080048d4 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6c      	ldr	r2, [pc, #432]	; (8004a94 <pwm_Config+0x1c0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d106      	bne.n	80048f4 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80048e6:	4b6c      	ldr	r3, [pc, #432]	; (8004a98 <pwm_Config+0x1c4>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a6b      	ldr	r2, [pc, #428]	; (8004a98 <pwm_Config+0x1c4>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	e030      	b.n	8004956 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d106      	bne.n	800490c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80048fe:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <pwm_Config+0x1c4>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a65      	ldr	r2, [pc, #404]	; (8004a98 <pwm_Config+0x1c4>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	e024      	b.n	8004956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a62      	ldr	r2, [pc, #392]	; (8004a9c <pwm_Config+0x1c8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d106      	bne.n	8004924 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004916:	4b60      	ldr	r3, [pc, #384]	; (8004a98 <pwm_Config+0x1c4>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a5f      	ldr	r2, [pc, #380]	; (8004a98 <pwm_Config+0x1c4>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	e018      	b.n	8004956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5d      	ldr	r2, [pc, #372]	; (8004aa0 <pwm_Config+0x1cc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d106      	bne.n	800493c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800492e:	4b5a      	ldr	r3, [pc, #360]	; (8004a98 <pwm_Config+0x1c4>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	4a59      	ldr	r2, [pc, #356]	; (8004a98 <pwm_Config+0x1c4>)
 8004934:	f043 0304 	orr.w	r3, r3, #4
 8004938:	6413      	str	r3, [r2, #64]	; 0x40
 800493a:	e00c      	b.n	8004956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a58      	ldr	r2, [pc, #352]	; (8004aa4 <pwm_Config+0x1d0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d106      	bne.n	8004954 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004946:	4b54      	ldr	r3, [pc, #336]	; (8004a98 <pwm_Config+0x1c4>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	4a53      	ldr	r2, [pc, #332]	; (8004a98 <pwm_Config+0x1c4>)
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	6413      	str	r3, [r2, #64]	; 0x40
 8004952:	e000      	b.n	8004956 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8004954:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004964:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7d5b      	ldrb	r3, [r3, #21]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f930 	bl	8004bd4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa3f 	bl	8004df8 <setDuttyCycle>
 800497a:	e005      	b.n	8004988 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f929 	bl	8004bd4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb10 	bl	8004fa8 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0210 	bic.w	r2, r2, #16
 8004996:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d86f      	bhi.n	8004a88 <pwm_Config+0x1b4>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <pwm_Config+0xdc>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	08004a25 	.word	0x08004a25
 80049bc:	08004a57 	.word	0x08004a57
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0203 	bic.w	r2, r2, #3
 80049ce:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80049de:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]


		break;
 80049f0:	e04b      	b.n	8004a8a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a00:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004a10:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a20:	619a      	str	r2, [r3, #24]

		break;
 8004a22:	e032      	b.n	8004a8a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0203 	bic.w	r2, r2, #3
 8004a32:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004a42:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	61da      	str	r2, [r3, #28]

		break;
 8004a54:	e019      	b.n	8004a8a <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a64:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004a74:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a84:	61da      	str	r2, [r3, #28]

		break;
 8004a86:	e000      	b.n	8004a8a <pwm_Config+0x1b6>
	}

	default:{
		break;
 8004a88:	bf00      	nop
	}// fin del switch-case




}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00

08004aa8 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a3d      	ldr	r2, [pc, #244]	; (8004bd0 <enableOutput+0x104>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d13a      	bne.n	8004b54 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	791b      	ldrb	r3, [r3, #4]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d862      	bhi.n	8004bbc <enableOutput+0xf0>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <enableOutput+0x30>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b1f 	.word	0x08004b1f
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b43 	.word	0x08004b43
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	621a      	str	r2, [r3, #32]

				break;
 8004b1c:	e051      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0210 	orr.w	r2, r2, #16
 8004b2c:	621a      	str	r2, [r3, #32]

				break;
 8004b2e:	e048      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3e:	621a      	str	r2, [r3, #32]

				break;
 8004b40:	e03f      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b50:	621a      	str	r2, [r3, #32]

				break;
 8004b52:	e036      	b.n	8004bc2 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	791b      	ldrb	r3, [r3, #4]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d831      	bhi.n	8004bc0 <enableOutput+0xf4>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <enableOutput+0x98>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b87 	.word	0x08004b87
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004bab 	.word	0x08004bab
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	621a      	str	r2, [r3, #32]

				break;
 8004b84:	e01d      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0210 	orr.w	r2, r2, #16
 8004b94:	621a      	str	r2, [r3, #32]

				break;
 8004b96:	e014      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a1a      	ldr	r2, [r3, #32]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba6:	621a      	str	r2, [r3, #32]

				break;
 8004ba8:	e00b      	b.n	8004bc2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bb8:	621a      	str	r2, [r3, #32]

				break;
 8004bba:	e002      	b.n	8004bc2 <enableOutput+0xf6>
				break;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <enableOutput+0xf6>
			}

			default: {
				break;
 8004bc0:	bf00      	nop
			}

		}
	}
	return SET;
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40010000 	.word	0x40010000

08004bd4 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6892      	ldr	r2, [r2, #8]
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d01a      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b14      	cmp	r3, #20
 8004bfa:	d017      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b1e      	cmp	r3, #30
 8004c00:	d014      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b28      	cmp	r3, #40	; 0x28
 8004c06:	d011      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b32      	cmp	r3, #50	; 0x32
 8004c0c:	d00e      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b3c      	cmp	r3, #60	; 0x3c
 8004c12:	d00b      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b46      	cmp	r3, #70	; 0x46
 8004c18:	d008      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d005      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b5a      	cmp	r3, #90	; 0x5a
 8004c24:	d002      	beq.n	8004c2c <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d111      	bne.n	8004c50 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	899b      	ldrh	r3, [r3, #12]
 8004c30:	461a      	mov	r2, r3
 8004c32:	0152      	lsls	r2, r2, #5
 8004c34:	1ad2      	subs	r2, r2, r3
 8004c36:	0092      	lsls	r2, r2, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <setFrequency+0x20c>)
 8004c40:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004c42:	4b67      	ldr	r3, [pc, #412]	; (8004de0 <setFrequency+0x20c>)
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	1e5a      	subs	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c4e:	e0c0      	b.n	8004dd2 <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2ba0      	cmp	r3, #160	; 0xa0
 8004c54:	d022      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2bc8      	cmp	r3, #200	; 0xc8
 8004c5a:	d01f      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004c62:	d01b      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c6a:	d017      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c72:	d013      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004c7a:	d00f      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004c82:	d00b      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004c8a:	d007      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c92:	d003      	beq.n	8004c9c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c9a:	d114      	bne.n	8004cc6 <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	899b      	ldrh	r3, [r3, #12]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	0091      	lsls	r1, r2, #2
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <setFrequency+0x20c>)
 8004cb6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004cb8:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <setFrequency+0x20c>)
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	1e5a      	subs	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cc4:	e085      	b.n	8004dd2 <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ccc:	d029      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004cd4:	d025      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d020      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004ce6:	d01c      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d017      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d012      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00d      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004d0c:	d009      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f242 3228 	movw	r2, #9000	; 0x2328
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10f      	bne.n	8004d42 <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	899b      	ldrh	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	0092      	lsls	r2, r2, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	4b2b      	ldr	r3, [pc, #172]	; (8004de0 <setFrequency+0x20c>)
 8004d32:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004d34:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <setFrequency+0x20c>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d40:	e047      	b.n	8004dd2 <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004d48:	d028      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d023      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f247 5230 	movw	r2, #30000	; 0x7530
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01e      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d019      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d014      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <setFrequency+0x210>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <setFrequency+0x214>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <setFrequency+0x218>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <setFrequency+0x21c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10a      	bne.n	8004db2 <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	899a      	ldrh	r2, [r3, #12]
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <setFrequency+0x20c>)
 8004da2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <setFrequency+0x20c>)
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8004db0:	e00f      	b.n	8004dd2 <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	899b      	ldrh	r3, [r3, #12]
 8004db6:	4a0f      	ldr	r2, [pc, #60]	; (8004df4 <setFrequency+0x220>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <setFrequency+0x20c>)
 8004dc2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <setFrequency+0x20c>)
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	200005c0 	.word	0x200005c0
 8004de4:	00011170 	.word	0x00011170
 8004de8:	00013880 	.word	0x00013880
 8004dec:	00015f90 	.word	0x00015f90
 8004df0:	000186a0 	.word	0x000186a0
 8004df4:	cccccccd 	.word	0xcccccccd

08004df8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	791b      	ldrb	r3, [r3, #4]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	f200 80c3 	bhi.w	8004f90 <setDuttyCycle+0x198>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <setDuttyCycle+0x18>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004ed9 	.word	0x08004ed9
 8004e1c:	08004f35 	.word	0x08004f35
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e26:	4b5d      	ldr	r3, [pc, #372]	; (8004f9c <setDuttyCycle+0x1a4>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	ee17 0a90 	vmov	r0, s15
 8004e3a:	f7fb fb8d 	bl	8000558 <__aeabi_f2d>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <setDuttyCycle+0x1a8>)
 8004e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e50:	f7fb fd04 	bl	800085c <__aeabi_ddiv>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <setDuttyCycle+0x1ac>)
 8004e62:	f7fb fa19 	bl	8000298 <__aeabi_dsub>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681c      	ldr	r4, [r3, #0]
 8004e72:	f7fb fea1 	bl	8000bb8 <__aeabi_d2uiz>
 8004e76:	4603      	mov	r3, r0
 8004e78:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8004e7a:	e08a      	b.n	8004f92 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e82:	4b46      	ldr	r3, [pc, #280]	; (8004f9c <setDuttyCycle+0x1a4>)
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	ee17 0a90 	vmov	r0, s15
 8004e96:	f7fb fb5f 	bl	8000558 <__aeabi_f2d>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <setDuttyCycle+0x1a8>)
 8004ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eac:	f7fb fcd6 	bl	800085c <__aeabi_ddiv>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <setDuttyCycle+0x1ac>)
 8004ebe:	f7fb f9eb 	bl	8000298 <__aeabi_dsub>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681c      	ldr	r4, [r3, #0]
 8004ece:	f7fb fe73 	bl	8000bb8 <__aeabi_d2uiz>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8004ed6:	e05c      	b.n	8004f92 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	ed93 7a04 	vldr	s14, [r3, #16]
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <setDuttyCycle+0x1a4>)
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	ee17 0a90 	vmov	r0, s15
 8004ef2:	f7fb fb31 	bl	8000558 <__aeabi_f2d>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <setDuttyCycle+0x1a8>)
 8004f04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f08:	f7fb fca8 	bl	800085c <__aeabi_ddiv>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <setDuttyCycle+0x1ac>)
 8004f1a:	f7fb f9bd 	bl	8000298 <__aeabi_dsub>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681c      	ldr	r4, [r3, #0]
 8004f2a:	f7fb fe45 	bl	8000bb8 <__aeabi_d2uiz>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004f32:	e02e      	b.n	8004f92 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <setDuttyCycle+0x1a4>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	ee17 0a90 	vmov	r0, s15
 8004f4e:	f7fb fb03 	bl	8000558 <__aeabi_f2d>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <setDuttyCycle+0x1a8>)
 8004f60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f64:	f7fb fc7a 	bl	800085c <__aeabi_ddiv>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <setDuttyCycle+0x1ac>)
 8004f76:	f7fb f98f 	bl	8000298 <__aeabi_dsub>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681c      	ldr	r4, [r3, #0]
 8004f86:	f7fb fe17 	bl	8000bb8 <__aeabi_d2uiz>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8004f8e:	e000      	b.n	8004f92 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8004f90:	bf00      	nop
	}

	}// fin del switch-case

}
 8004f92:	bf00      	nop
 8004f94:	372c      	adds	r7, #44	; 0x2c
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200005c0 	.word	0x200005c0
 8004fa0:	40590000 	.word	0x40590000
 8004fa4:	3ff00000 	.word	0x3ff00000

08004fa8 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b08b      	sub	sp, #44	; 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	f200 80d3 	bhi.w	8005160 <setDuttyCycleAfOpt+0x1b8>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <setDuttyCycleAfOpt+0x18>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08005035 	.word	0x08005035
 8004fc8:	08005099 	.word	0x08005099
 8004fcc:	080050fd 	.word	0x080050fd
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fd6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800516c <setDuttyCycleAfOpt+0x1c4>
 8004fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fde:	4b64      	ldr	r3, [pc, #400]	; (8005170 <setDuttyCycleAfOpt+0x1c8>)
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	ee17 0a90 	vmov	r0, s15
 8004ff2:	f7fb fab1 	bl	8000558 <__aeabi_f2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <setDuttyCycleAfOpt+0x1cc>)
 8005004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005008:	f7fb fc28 	bl	800085c <__aeabi_ddiv>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	4b57      	ldr	r3, [pc, #348]	; (8005178 <setDuttyCycleAfOpt+0x1d0>)
 800501a:	f7fb f93d 	bl	8000298 <__aeabi_dsub>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681c      	ldr	r4, [r3, #0]
 800502a:	f7fb fdc5 	bl	8000bb8 <__aeabi_d2uiz>
 800502e:	4603      	mov	r3, r0
 8005030:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8005032:	e096      	b.n	8005162 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	edd3 7a04 	vldr	s15, [r3, #16]
 800503a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800516c <setDuttyCycleAfOpt+0x1c4>
 800503e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005042:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <setDuttyCycleAfOpt+0x1c8>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	ee17 0a90 	vmov	r0, s15
 8005056:	f7fb fa7f 	bl	8000558 <__aeabi_f2d>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b43      	ldr	r3, [pc, #268]	; (8005174 <setDuttyCycleAfOpt+0x1cc>)
 8005068:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800506c:	f7fb fbf6 	bl	800085c <__aeabi_ddiv>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <setDuttyCycleAfOpt+0x1d0>)
 800507e:	f7fb f90b 	bl	8000298 <__aeabi_dsub>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681c      	ldr	r4, [r3, #0]
 800508e:	f7fb fd93 	bl	8000bb8 <__aeabi_d2uiz>
 8005092:	4603      	mov	r3, r0
 8005094:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8005096:	e064      	b.n	8005162 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	edd3 7a04 	vldr	s15, [r3, #16]
 800509e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800516c <setDuttyCycleAfOpt+0x1c4>
 80050a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050a6:	4b32      	ldr	r3, [pc, #200]	; (8005170 <setDuttyCycleAfOpt+0x1c8>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	ee17 0a90 	vmov	r0, s15
 80050ba:	f7fb fa4d 	bl	8000558 <__aeabi_f2d>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <setDuttyCycleAfOpt+0x1cc>)
 80050cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050d0:	f7fb fbc4 	bl	800085c <__aeabi_ddiv>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <setDuttyCycleAfOpt+0x1d0>)
 80050e2:	f7fb f8d9 	bl	8000298 <__aeabi_dsub>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681c      	ldr	r4, [r3, #0]
 80050f2:	f7fb fd61 	bl	8000bb8 <__aeabi_d2uiz>
 80050f6:	4603      	mov	r3, r0
 80050f8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80050fa:	e032      	b.n	8005162 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8005102:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800516c <setDuttyCycleAfOpt+0x1c4>
 8005106:	ee37 7a67 	vsub.f32	s14, s14, s15
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <setDuttyCycleAfOpt+0x1c8>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	ee17 0a90 	vmov	r0, s15
 800511e:	f7fb fa1b 	bl	8000558 <__aeabi_f2d>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <setDuttyCycleAfOpt+0x1cc>)
 8005130:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005134:	f7fb fb92 	bl	800085c <__aeabi_ddiv>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <setDuttyCycleAfOpt+0x1d0>)
 8005146:	f7fb f8a7 	bl	8000298 <__aeabi_dsub>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	f7fb fd2f 	bl	8000bb8 <__aeabi_d2uiz>
 800515a:	4603      	mov	r3, r0
 800515c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800515e:	e000      	b.n	8005162 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8005160:	bf00      	nop
	}

	}// fin del switch-case


}
 8005162:	bf00      	nop
 8005164:	372c      	adds	r7, #44	; 0x2c
 8005166:	46bd      	mov	sp, r7
 8005168:	bd90      	pop	{r4, r7, pc}
 800516a:	bf00      	nop
 800516c:	42c80000 	.word	0x42c80000
 8005170:	200005c0 	.word	0x200005c0
 8005174:	40590000 	.word	0x40590000
 8005178:	3ff00000 	.word	0x3ff00000

0800517c <PWMx_Toggle>:
		}

	return RESET;
}

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	791b      	ldrb	r3, [r3, #4]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d82f      	bhi.n	80051ec <PWMx_Toggle+0x70>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <PWMx_Toggle+0x18>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051b7 	.word	0x080051b7
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051db 	.word	0x080051db
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f082 0202 	eor.w	r2, r2, #2
 80051b2:	621a      	str	r2, [r3, #32]

				break;
 80051b4:	e01b      	b.n	80051ee <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f082 0220 	eor.w	r2, r2, #32
 80051c4:	621a      	str	r2, [r3, #32]

				break;
 80051c6:	e012      	b.n	80051ee <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80051d6:	621a      	str	r2, [r3, #32]

				break;
 80051d8:	e009      	b.n	80051ee <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80051e8:	621a      	str	r2, [r3, #32]

				break;
 80051ea:	e000      	b.n	80051ee <PWMx_Toggle+0x72>
			}

			default: {
				break;
 80051ec:	bf00      	nop
			}
			}


}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8005206:	4b92      	ldr	r3, [pc, #584]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a91      	ldr	r2, [pc, #580]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800520c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005210:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005212:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800521a:	4b8e      	ldr	r3, [pc, #568]	; (8005454 <RCC_enableMaxFrequencies+0x258>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a8d      	ldr	r2, [pc, #564]	; (8005454 <RCC_enableMaxFrequencies+0x258>)
 8005220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005224:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8005226:	4b8a      	ldr	r3, [pc, #552]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4a89      	ldr	r2, [pc, #548]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800522c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005230:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b08      	cmp	r3, #8
 8005236:	f200 82fc 	bhi.w	8005832 <RCC_enableMaxFrequencies+0x636>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <RCC_enableMaxFrequencies+0x44>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005265 	.word	0x08005265
 8005244:	08005307 	.word	0x08005307
 8005248:	080053a9 	.word	0x080053a9
 800524c:	0800545d 	.word	0x0800545d
 8005250:	080054ff 	.word	0x080054ff
 8005254:	080055a1 	.word	0x080055a1
 8005258:	0800564d 	.word	0x0800564d
 800525c:	080056ef 	.word	0x080056ef
 8005260:	08005791 	.word	0x08005791
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005264:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a79      	ldr	r2, [pc, #484]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800526a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800526e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005270:	4b77      	ldr	r3, [pc, #476]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a76      	ldr	r2, [pc, #472]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005276:	f043 0310 	orr.w	r3, r3, #16
 800527a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800527c:	4b74      	ldr	r3, [pc, #464]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a73      	ldr	r2, [pc, #460]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005282:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800528c:	4b70      	ldr	r3, [pc, #448]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a6f      	ldr	r2, [pc, #444]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005292:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005296:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005298:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4a6c      	ldr	r2, [pc, #432]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800529e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80052a2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80052a4:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a69      	ldr	r2, [pc, #420]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ae:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80052b0:	4b67      	ldr	r3, [pc, #412]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4a66      	ldr	r2, [pc, #408]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80052bc:	4b64      	ldr	r3, [pc, #400]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a63      	ldr	r2, [pc, #396]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80052c8:	4b61      	ldr	r3, [pc, #388]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a60      	ldr	r2, [pc, #384]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80052d4:	4b5e      	ldr	r3, [pc, #376]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5d      	ldr	r2, [pc, #372]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80052e0:	e000      	b.n	80052e4 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80052e2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80052e4:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f8      	beq.n	80052e2 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80052f0:	4b59      	ldr	r3, [pc, #356]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a58      	ldr	r2, [pc, #352]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 80052f6:	f023 030f 	bic.w	r3, r3, #15
 80052fa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80052fc:	4b56      	ldr	r3, [pc, #344]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 80052fe:	4a56      	ldr	r2, [pc, #344]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6013      	str	r3, [r2, #0]

			break;
 8005304:	e296      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005306:	4b52      	ldr	r3, [pc, #328]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a51      	ldr	r2, [pc, #324]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800530c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005310:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005312:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4a4e      	ldr	r2, [pc, #312]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005324:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800532e:	4b48      	ldr	r3, [pc, #288]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4a47      	ldr	r2, [pc, #284]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005334:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005338:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800533a:	4b45      	ldr	r3, [pc, #276]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4a44      	ldr	r2, [pc, #272]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005340:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005344:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8005346:	4b42      	ldr	r3, [pc, #264]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a41      	ldr	r2, [pc, #260]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005352:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	4a3e      	ldr	r2, [pc, #248]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800535e:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	4a3b      	ldr	r2, [pc, #236]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005368:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800536a:	4b39      	ldr	r3, [pc, #228]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4a38      	ldr	r2, [pc, #224]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005374:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005376:	4b36      	ldr	r3, [pc, #216]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a35      	ldr	r2, [pc, #212]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800537c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005380:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005382:	e000      	b.n	8005386 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8005384:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005386:	4b32      	ldr	r3, [pc, #200]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f8      	beq.n	8005384 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a30      	ldr	r2, [pc, #192]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005398:	f023 030f 	bic.w	r3, r3, #15
 800539c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 80053a0:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6013      	str	r3, [r2, #0]

			break;
 80053a6:	e245      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a28      	ldr	r2, [pc, #160]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a25      	ldr	r2, [pc, #148]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053ba:	f043 0310 	orr.w	r3, r3, #16
 80053be:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80053c0:	4b23      	ldr	r3, [pc, #140]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80053d0:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053d6:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80053da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80053e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80053e8:	4b19      	ldr	r3, [pc, #100]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a18      	ldr	r2, [pc, #96]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a15      	ldr	r2, [pc, #84]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 80053fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4a12      	ldr	r2, [pc, #72]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005406:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800540a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 8005412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005416:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005422:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005424:	e000      	b.n	8005428 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8005426:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <RCC_enableMaxFrequencies+0x254>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f8      	beq.n	8005426 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a07      	ldr	r2, [pc, #28]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 800543a:	f023 030f 	bic.w	r3, r3, #15
 800543e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <RCC_enableMaxFrequencies+0x25c>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6013      	str	r3, [r2, #0]


			break;
 800544c:	e1f2      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	40007000 	.word	0x40007000
 8005458:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800545c:	4b79      	ldr	r3, [pc, #484]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a78      	ldr	r2, [pc, #480]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005466:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005468:	4b76      	ldr	r3, [pc, #472]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4a75      	ldr	r2, [pc, #468]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800546e:	f043 0310 	orr.w	r3, r3, #16
 8005472:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005474:	4b73      	ldr	r3, [pc, #460]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a72      	ldr	r2, [pc, #456]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800547a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005484:	4b6f      	ldr	r3, [pc, #444]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a6e      	ldr	r2, [pc, #440]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800548a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800548e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005490:	4b6c      	ldr	r3, [pc, #432]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a6b      	ldr	r2, [pc, #428]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005496:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800549a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800549c:	4b69      	ldr	r3, [pc, #420]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800549e:	4a69      	ldr	r2, [pc, #420]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80054a4:	4b67      	ldr	r3, [pc, #412]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a66      	ldr	r2, [pc, #408]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80054b0:	4b64      	ldr	r3, [pc, #400]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4a63      	ldr	r2, [pc, #396]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80054bc:	4b61      	ldr	r3, [pc, #388]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a60      	ldr	r2, [pc, #384]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80054c8:	4b5e      	ldr	r3, [pc, #376]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5d      	ldr	r2, [pc, #372]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80054d4:	e000      	b.n	80054d8 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80054d6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80054d8:	4b5a      	ldr	r3, [pc, #360]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f8      	beq.n	80054d6 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80054e4:	4b58      	ldr	r3, [pc, #352]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a57      	ldr	r2, [pc, #348]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 80054ea:	f023 030f 	bic.w	r3, r3, #15
 80054ee:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80054f0:	4b55      	ldr	r3, [pc, #340]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a54      	ldr	r2, [pc, #336]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6013      	str	r3, [r2, #0]

			break;
 80054fc:	e19a      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80054fe:	4b51      	ldr	r3, [pc, #324]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4a50      	ldr	r2, [pc, #320]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005504:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005508:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a4d      	ldr	r2, [pc, #308]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005510:	f043 0310 	orr.w	r3, r3, #16
 8005514:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005516:	4b4b      	ldr	r3, [pc, #300]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4a4a      	ldr	r2, [pc, #296]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800551c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4a46      	ldr	r2, [pc, #280]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800552c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005530:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005532:	4b44      	ldr	r3, [pc, #272]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4a43      	ldr	r2, [pc, #268]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005538:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800553c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800553e:	4b41      	ldr	r3, [pc, #260]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005540:	4a40      	ldr	r2, [pc, #256]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a3e      	ldr	r2, [pc, #248]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800554c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005550:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005552:	4b3c      	ldr	r3, [pc, #240]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4a3b      	ldr	r2, [pc, #236]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800555e:	4b39      	ldr	r3, [pc, #228]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4a38      	ldr	r2, [pc, #224]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005568:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800556a:	4b36      	ldr	r3, [pc, #216]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a35      	ldr	r2, [pc, #212]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005574:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005576:	e000      	b.n	800557a <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8005578:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800557a:	4b32      	ldr	r3, [pc, #200]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f8      	beq.n	8005578 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 800558c:	f023 030f 	bic.w	r3, r3, #15
 8005590:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005592:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6013      	str	r3, [r2, #0]

			break;
 800559e:	e149      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055b2:	f043 0310 	orr.w	r3, r3, #16
 80055b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80055b8:	4b22      	ldr	r3, [pc, #136]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ce:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80055d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80055e0:	4b18      	ldr	r3, [pc, #96]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80055e8:	4b16      	ldr	r3, [pc, #88]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a15      	ldr	r2, [pc, #84]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4a12      	ldr	r2, [pc, #72]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 80055fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800560a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005618:	e000      	b.n	800561c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800561a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <RCC_enableMaxFrequencies+0x448>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f8      	beq.n	800561a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a06      	ldr	r2, [pc, #24]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 800562e:	f023 030f 	bic.w	r3, r3, #15
 8005632:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a03      	ldr	r2, [pc, #12]	; (8005648 <RCC_enableMaxFrequencies+0x44c>)
 800563a:	f043 0302 	orr.w	r3, r3, #2
 800563e:	6013      	str	r3, [r2, #0]

			break;
 8005640:	e0f8      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
 8005648:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800564c:	4b83      	ldr	r3, [pc, #524]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a82      	ldr	r2, [pc, #520]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005656:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005658:	4b80      	ldr	r3, [pc, #512]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a7f      	ldr	r2, [pc, #508]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800565e:	f043 0310 	orr.w	r3, r3, #16
 8005662:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005664:	4b7d      	ldr	r3, [pc, #500]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a7c      	ldr	r2, [pc, #496]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800566a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800566e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005672:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8005674:	4b79      	ldr	r3, [pc, #484]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a78      	ldr	r2, [pc, #480]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800567a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800567e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005680:	4b76      	ldr	r3, [pc, #472]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a75      	ldr	r2, [pc, #468]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005686:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800568a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800568c:	4b73      	ldr	r3, [pc, #460]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800568e:	4a73      	ldr	r2, [pc, #460]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005694:	4b71      	ldr	r3, [pc, #452]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4a70      	ldr	r2, [pc, #448]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800569a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80056a0:	4b6e      	ldr	r3, [pc, #440]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4a6d      	ldr	r2, [pc, #436]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056aa:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80056ac:	4b6b      	ldr	r3, [pc, #428]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a6a      	ldr	r2, [pc, #424]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056b6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80056b8:	4b68      	ldr	r3, [pc, #416]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a67      	ldr	r2, [pc, #412]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80056c4:	e000      	b.n	80056c8 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80056c6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f8      	beq.n	80056c6 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80056d4:	4b62      	ldr	r3, [pc, #392]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a61      	ldr	r2, [pc, #388]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 80056da:	f023 030f 	bic.w	r3, r3, #15
 80056de:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80056e0:	4b5f      	ldr	r3, [pc, #380]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5e      	ldr	r2, [pc, #376]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 80056e6:	f043 0302 	orr.w	r3, r3, #2
 80056ea:	6013      	str	r3, [r2, #0]

			break;
 80056ec:	e0a2      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80056ee:	4b5b      	ldr	r3, [pc, #364]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4a5a      	ldr	r2, [pc, #360]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80056fa:	4b58      	ldr	r3, [pc, #352]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4a57      	ldr	r2, [pc, #348]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005700:	f043 0310 	orr.w	r3, r3, #16
 8005704:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005706:	4b55      	ldr	r3, [pc, #340]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4a54      	ldr	r2, [pc, #336]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800570c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4a50      	ldr	r2, [pc, #320]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800571c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8005720:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005722:	4b4e      	ldr	r3, [pc, #312]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a4d      	ldr	r2, [pc, #308]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005728:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800572c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800572e:	4b4b      	ldr	r3, [pc, #300]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005730:	4a4a      	ldr	r2, [pc, #296]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005736:	4b49      	ldr	r3, [pc, #292]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4a48      	ldr	r2, [pc, #288]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800573c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005740:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005742:	4b46      	ldr	r3, [pc, #280]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4a45      	ldr	r2, [pc, #276]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005748:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800574e:	4b43      	ldr	r3, [pc, #268]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4a42      	ldr	r2, [pc, #264]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005758:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a3f      	ldr	r2, [pc, #252]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005764:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005766:	e000      	b.n	800576a <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8005768:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800576a:	4b3c      	ldr	r3, [pc, #240]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f8      	beq.n	8005768 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005776:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a39      	ldr	r2, [pc, #228]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 800577c:	f023 030f 	bic.w	r3, r3, #15
 8005780:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005782:	4b37      	ldr	r3, [pc, #220]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a36      	ldr	r2, [pc, #216]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	6013      	str	r3, [r2, #0]

			break;
 800578e:	e051      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005790:	4b32      	ldr	r3, [pc, #200]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4a31      	ldr	r2, [pc, #196]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800579a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800579c:	4b2f      	ldr	r3, [pc, #188]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a2e      	ldr	r2, [pc, #184]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a2b      	ldr	r2, [pc, #172]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80057b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4a27      	ldr	r2, [pc, #156]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057be:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80057c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a24      	ldr	r2, [pc, #144]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80057ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80057d0:	4b22      	ldr	r3, [pc, #136]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057d2:	4a22      	ldr	r2, [pc, #136]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80057d8:	4b20      	ldr	r3, [pc, #128]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a1c      	ldr	r2, [pc, #112]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057ee:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4a19      	ldr	r2, [pc, #100]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057fa:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a16      	ldr	r2, [pc, #88]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005806:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005808:	e000      	b.n	800580c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800580a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f8      	beq.n	800580a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a10      	ldr	r2, [pc, #64]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 800581e:	f023 030f 	bic.w	r3, r3, #15
 8005822:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <RCC_enableMaxFrequencies+0x664>)
 800582a:	f043 0303 	orr.w	r3, r3, #3
 800582e:	6013      	str	r3, [r2, #0]

			break;
 8005830:	e000      	b.n	8005834 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8005832:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 800583a:	f043 0302 	orr.w	r3, r3, #2
 800583e:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005840:	e000      	b.n	8005844 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8005842:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <RCC_enableMaxFrequencies+0x660>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f8      	beq.n	8005842 <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8005850:	f000 fce0 	bl	8006214 <SystemCoreClockUpdate>

}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40023800 	.word	0x40023800
 8005860:	40023c00 	.word	0x40023c00

08005864 <__NVIC_EnableIRQ>:
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	db0b      	blt.n	800588e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	4907      	ldr	r1, [pc, #28]	; (800589c <__NVIC_EnableIRQ+0x38>)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2001      	movs	r0, #1
 8005886:	fa00 f202 	lsl.w	r2, r0, r2
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000e100 	.word	0xe000e100

080058a0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80058a8:	b672      	cpsid	i
}
 80058aa:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a8f      	ldr	r2, [pc, #572]	; (8005af0 <USART_Config+0x250>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d106      	bne.n	80058c4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80058b6:	4b8f      	ldr	r3, [pc, #572]	; (8005af4 <USART_Config+0x254>)
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4a8e      	ldr	r2, [pc, #568]	; (8005af4 <USART_Config+0x254>)
 80058bc:	f043 0310 	orr.w	r3, r3, #16
 80058c0:	6453      	str	r3, [r2, #68]	; 0x44
 80058c2:	e018      	b.n	80058f6 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a8b      	ldr	r2, [pc, #556]	; (8005af8 <USART_Config+0x258>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d106      	bne.n	80058dc <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80058ce:	4b89      	ldr	r3, [pc, #548]	; (8005af4 <USART_Config+0x254>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4a88      	ldr	r2, [pc, #544]	; (8005af4 <USART_Config+0x254>)
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
 80058da:	e00c      	b.n	80058f6 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a86      	ldr	r2, [pc, #536]	; (8005afc <USART_Config+0x25c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d106      	bne.n	80058f4 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80058e6:	4b83      	ldr	r3, [pc, #524]	; (8005af4 <USART_Config+0x254>)
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	4a82      	ldr	r2, [pc, #520]	; (8005af4 <USART_Config+0x254>)
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6453      	str	r3, [r2, #68]	; 0x44
 80058f2:	e000      	b.n	80058f6 <USART_Config+0x56>
	}
	else{
		__NOP();
 80058f4:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7a5b      	ldrb	r3, [r3, #9]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d025      	beq.n	800595a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7a5b      	ldrb	r3, [r3, #9]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d110      	bne.n	8005938 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005924:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e018      	b.n	800596a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005946:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e007      	b.n	800596a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7a1b      	ldrb	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e007      	b.n	8005994 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005992:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7a9b      	ldrb	r3, [r3, #10]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d82f      	bhi.n	80059fc <USART_Config+0x15c>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <USART_Config+0x104>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059c7 	.word	0x080059c7
 80059ac:	080059d9 	.word	0x080059d9
 80059b0:	080059eb 	.word	0x080059eb
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059c2:	611a      	str	r2, [r3, #16]
			break;
 80059c4:	e023      	b.n	8005a0e <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d4:	611a      	str	r2, [r3, #16]
			break;
 80059d6:	e01a      	b.n	8005a0e <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e6:	611a      	str	r2, [r3, #16]
			break;
 80059e8:	e011      	b.n	8005a0e <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80059f8:	611a      	str	r2, [r3, #16]
			break;
 80059fa:	e008      	b.n	8005a0e <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005a0a:	611a      	str	r2, [r3, #16]
			break;
 8005a0c:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	4611      	mov	r1, r2
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8cd 	bl	8005bb8 <brrCalculus>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	799b      	ldrb	r3, [r3, #6]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d82e      	bhi.n	8005a88 <USART_Config+0x1e8>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <USART_Config+0x190>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a53 	.word	0x08005a53
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005a77 	.word	0x08005a77
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	60da      	str	r2, [r3, #12]
			break;
 8005a50:	e023      	b.n	8005a9a <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0204 	orr.w	r2, r2, #4
 8005a60:	60da      	str	r2, [r3, #12]
			break;
 8005a62:	e01a      	b.n	8005a9a <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 020c 	orr.w	r2, r2, #12
 8005a72:	60da      	str	r2, [r3, #12]
			break;
 8005a74:	e011      	b.n	8005a9a <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 020c 	bic.w	r2, r2, #12
 8005a84:	60da      	str	r2, [r3, #12]
			break;
 8005a86:	e008      	b.n	8005a9a <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 020c 	bic.w	r2, r2, #12
 8005a96:	60da      	str	r2, [r3, #12]
			break;
 8005a98:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	799b      	ldrb	r3, [r3, #6]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d008      	beq.n	8005ab4 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e007      	b.n	8005ac4 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac2:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	795b      	ldrb	r3, [r3, #5]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d12d      	bne.n	8005b28 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0220 	orr.w	r2, r2, #32
 8005ada:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a03      	ldr	r2, [pc, #12]	; (8005af0 <USART_Config+0x250>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10c      	bne.n	8005b00 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8005ae6:	2025      	movs	r0, #37	; 0x25
 8005ae8:	f7ff febc 	bl	8005864 <__NVIC_EnableIRQ>
 8005aec:	e024      	b.n	8005b38 <USART_Config+0x298>
 8005aee:	bf00      	nop
 8005af0:	40011000 	.word	0x40011000
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40004400 	.word	0x40004400
 8005afc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <USART_Config+0x308>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d103      	bne.n	8005b12 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8005b0a:	2026      	movs	r0, #38	; 0x26
 8005b0c:	f7ff feaa 	bl	8005864 <__NVIC_EnableIRQ>
 8005b10:	e012      	b.n	8005b38 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a25      	ldr	r2, [pc, #148]	; (8005bac <USART_Config+0x30c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8005b1c:	2047      	movs	r0, #71	; 0x47
 8005b1e:	f7ff fea1 	bl	8005864 <__NVIC_EnableIRQ>
 8005b22:	e009      	b.n	8005b38 <USART_Config+0x298>
		}
		else{
				__NOP();
 8005b24:	bf00      	nop
 8005b26:	e007      	b.n	8005b38 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0220 	bic.w	r2, r2, #32
 8005b36:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	791b      	ldrb	r3, [r3, #4]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d124      	bne.n	8005b8a <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b4e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <USART_Config+0x310>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d103      	bne.n	8005b62 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8005b5a:	2025      	movs	r0, #37	; 0x25
 8005b5c:	f7ff fe82 	bl	8005864 <__NVIC_EnableIRQ>
 8005b60:	e01b      	b.n	8005b9a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <USART_Config+0x308>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d103      	bne.n	8005b74 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8005b6c:	2026      	movs	r0, #38	; 0x26
 8005b6e:	f7ff fe79 	bl	8005864 <__NVIC_EnableIRQ>
 8005b72:	e012      	b.n	8005b9a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <USART_Config+0x30c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d103      	bne.n	8005b86 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8005b7e:	2047      	movs	r0, #71	; 0x47
 8005b80:	f7ff fe70 	bl	8005864 <__NVIC_EnableIRQ>
 8005b84:	e009      	b.n	8005b9a <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8005b86:	bf00      	nop
 8005b88:	e007      	b.n	8005b9a <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b98:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b9a:	b662      	cpsie	i
}
 8005b9c:	bf00      	nop
	}

	__enable_irq();
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40004400 	.word	0x40004400
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	40011000 	.word	0x40011000
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8005bb8:	b5b0      	push	{r4, r5, r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	79db      	ldrb	r3, [r3, #7]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	f200 8217 	bhi.w	8005ffa <brrCalculus+0x442>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <brrCalculus+0x1c>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005cdf 	.word	0x08005cdf
 8005bdc:	08005df9 	.word	0x08005df9
 8005be0:	08005f01 	.word	0x08005f01

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8005be4:	4980      	ldr	r1, [pc, #512]	; (8005de8 <brrCalculus+0x230>)
 8005be6:	a37c      	add	r3, pc, #496	; (adr r3, 8005dd8 <brrCalculus+0x220>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	ee17 0a90 	vmov	r0, s15
 8005bfe:	f7fa fcab 	bl	8000558 <__aeabi_f2d>
 8005c02:	4b79      	ldr	r3, [pc, #484]	; (8005de8 <brrCalculus+0x230>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fcfe 	bl	8000608 <__aeabi_dmul>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4975      	ldr	r1, [pc, #468]	; (8005de8 <brrCalculus+0x230>)
 8005c12:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005c16:	4b74      	ldr	r3, [pc, #464]	; (8005de8 <brrCalculus+0x230>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f7fa ffa2 	bl	8000b68 <__aeabi_d2iz>
 8005c24:	4603      	mov	r3, r0
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	4b70      	ldr	r3, [pc, #448]	; (8005dec <brrCalculus+0x234>)
 8005c2a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005c2c:	4b6e      	ldr	r3, [pc, #440]	; (8005de8 <brrCalculus+0x230>)
 8005c2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c32:	4b6d      	ldr	r3, [pc, #436]	; (8005de8 <brrCalculus+0x230>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f7fa ff94 	bl	8000b68 <__aeabi_d2iz>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fa fc76 	bl	8000534 <__aeabi_i2d>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f7fa fb22 	bl	8000298 <__aeabi_dsub>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f7fa ffcc 	bl	8000bf8 <__aeabi_d2f>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4a63      	ldr	r2, [pc, #396]	; (8005df0 <brrCalculus+0x238>)
 8005c64:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005c66:	4b62      	ldr	r3, [pc, #392]	; (8005df0 <brrCalculus+0x238>)
 8005c68:	edd3 7a00 	vldr	s15, [r3]
 8005c6c:	2004      	movs	r0, #4
 8005c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c72:	f000 fa6d 	bl	8006150 <roundToNDecimals>
 8005c76:	eef0 7a40 	vmov.f32	s15, s0
 8005c7a:	4b5d      	ldr	r3, [pc, #372]	; (8005df0 <brrCalculus+0x238>)
 8005c7c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005c80:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <brrCalculus+0x238>)
 8005c82:	edd3 7a00 	vldr	s15, [r3]
 8005c86:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c8e:	4b58      	ldr	r3, [pc, #352]	; (8005df0 <brrCalculus+0x238>)
 8005c90:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005c94:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <brrCalculus+0x238>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fc5d 	bl	8000558 <__aeabi_f2d>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	ec43 2b10 	vmov	d0, r2, r3
 8005ca6:	f003 fcef 	bl	8009688 <round>
 8005caa:	ec53 2b10 	vmov	r2, r3, d0
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f7fa ffa1 	bl	8000bf8 <__aeabi_d2f>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4a4d      	ldr	r2, [pc, #308]	; (8005df0 <brrCalculus+0x238>)
 8005cba:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005cbc:	4b4b      	ldr	r3, [pc, #300]	; (8005dec <brrCalculus+0x234>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	4b4a      	ldr	r3, [pc, #296]	; (8005df0 <brrCalculus+0x238>)
 8005cc6:	edd3 7a00 	vldr	s15, [r3]
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 3a90 	vmov	r3, s15
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	4b46      	ldr	r3, [pc, #280]	; (8005df4 <brrCalculus+0x23c>)
 8005cda:	801a      	strh	r2, [r3, #0]


		break;
 8005cdc:	e18f      	b.n	8005ffe <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8005cde:	4942      	ldr	r1, [pc, #264]	; (8005de8 <brrCalculus+0x230>)
 8005ce0:	a33f      	add	r3, pc, #252	; (adr r3, 8005de0 <brrCalculus+0x228>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf4:	ee17 0a90 	vmov	r0, s15
 8005cf8:	f7fa fc2e 	bl	8000558 <__aeabi_f2d>
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	; (8005de8 <brrCalculus+0x230>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fc81 	bl	8000608 <__aeabi_dmul>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4937      	ldr	r1, [pc, #220]	; (8005de8 <brrCalculus+0x230>)
 8005d0c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005d10:	4b35      	ldr	r3, [pc, #212]	; (8005de8 <brrCalculus+0x230>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f7fa ff25 	bl	8000b68 <__aeabi_d2iz>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	4b32      	ldr	r3, [pc, #200]	; (8005dec <brrCalculus+0x234>)
 8005d24:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005d26:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <brrCalculus+0x230>)
 8005d28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d2c:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <brrCalculus+0x230>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fa ff17 	bl	8000b68 <__aeabi_d2iz>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fa fbf9 	bl	8000534 <__aeabi_i2d>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa faa5 	bl	8000298 <__aeabi_dsub>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa ff4f 	bl	8000bf8 <__aeabi_d2f>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <brrCalculus+0x238>)
 8005d5e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005d60:	4b23      	ldr	r3, [pc, #140]	; (8005df0 <brrCalculus+0x238>)
 8005d62:	edd3 7a00 	vldr	s15, [r3]
 8005d66:	2004      	movs	r0, #4
 8005d68:	eeb0 0a67 	vmov.f32	s0, s15
 8005d6c:	f000 f9f0 	bl	8006150 <roundToNDecimals>
 8005d70:	eef0 7a40 	vmov.f32	s15, s0
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <brrCalculus+0x238>)
 8005d76:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <brrCalculus+0x238>)
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <brrCalculus+0x238>)
 8005d8a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <brrCalculus+0x238>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fbe0 	bl	8000558 <__aeabi_f2d>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	ec43 2b10 	vmov	d0, r2, r3
 8005da0:	f003 fc72 	bl	8009688 <round>
 8005da4:	ec53 2b10 	vmov	r2, r3, d0
 8005da8:	4610      	mov	r0, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	f7fa ff24 	bl	8000bf8 <__aeabi_d2f>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <brrCalculus+0x238>)
 8005db4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <brrCalculus+0x234>)
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <brrCalculus+0x238>)
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc8:	ee17 3a90 	vmov	r3, s15
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <brrCalculus+0x23c>)
 8005dd4:	801a      	strh	r2, [r3, #0]


		break;
 8005dd6:	e112      	b.n	8005ffe <brrCalculus+0x446>
 8005dd8:	b4e81b4f 	.word	0xb4e81b4f
 8005ddc:	3edb4e81 	.word	0x3edb4e81
 8005de0:	b4e81b4f 	.word	0xb4e81b4f
 8005de4:	3ecb4e81 	.word	0x3ecb4e81
 8005de8:	200005d0 	.word	0x200005d0
 8005dec:	200005c4 	.word	0x200005c4
 8005df0:	200005c8 	.word	0x200005c8
 8005df4:	200005c2 	.word	0x200005c2
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8005df8:	4989      	ldr	r1, [pc, #548]	; (8006020 <brrCalculus+0x468>)
 8005dfa:	a385      	add	r3, pc, #532	; (adr r3, 8006010 <brrCalculus+0x458>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	ee17 0a90 	vmov	r0, s15
 8005e12:	f7fa fba1 	bl	8000558 <__aeabi_f2d>
 8005e16:	4b82      	ldr	r3, [pc, #520]	; (8006020 <brrCalculus+0x468>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fbf4 	bl	8000608 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	497e      	ldr	r1, [pc, #504]	; (8006020 <brrCalculus+0x468>)
 8005e26:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005e2a:	4b7d      	ldr	r3, [pc, #500]	; (8006020 <brrCalculus+0x468>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	f7fa fe98 	bl	8000b68 <__aeabi_d2iz>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	4b79      	ldr	r3, [pc, #484]	; (8006024 <brrCalculus+0x46c>)
 8005e3e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005e40:	4b77      	ldr	r3, [pc, #476]	; (8006020 <brrCalculus+0x468>)
 8005e42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e46:	4b76      	ldr	r3, [pc, #472]	; (8006020 <brrCalculus+0x468>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f7fa fe8a 	bl	8000b68 <__aeabi_d2iz>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fb6c 	bl	8000534 <__aeabi_i2d>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fa18 	bl	8000298 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f7fa fec2 	bl	8000bf8 <__aeabi_d2f>
 8005e74:	4603      	mov	r3, r0
 8005e76:	4a6c      	ldr	r2, [pc, #432]	; (8006028 <brrCalculus+0x470>)
 8005e78:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005e7a:	4b6b      	ldr	r3, [pc, #428]	; (8006028 <brrCalculus+0x470>)
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	2004      	movs	r0, #4
 8005e82:	eeb0 0a67 	vmov.f32	s0, s15
 8005e86:	f000 f963 	bl	8006150 <roundToNDecimals>
 8005e8a:	eef0 7a40 	vmov.f32	s15, s0
 8005e8e:	4b66      	ldr	r3, [pc, #408]	; (8006028 <brrCalculus+0x470>)
 8005e90:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005e94:	4b64      	ldr	r3, [pc, #400]	; (8006028 <brrCalculus+0x470>)
 8005e96:	edd3 7a00 	vldr	s15, [r3]
 8005e9a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <brrCalculus+0x470>)
 8005ea4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8005ea8:	4b5f      	ldr	r3, [pc, #380]	; (8006028 <brrCalculus+0x470>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fb53 	bl	8000558 <__aeabi_f2d>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	ec43 2b10 	vmov	d0, r2, r3
 8005eba:	f003 fbe5 	bl	8009688 <round>
 8005ebe:	ec51 0b10 	vmov	r0, r1, d0
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	4b59      	ldr	r3, [pc, #356]	; (800602c <brrCalculus+0x474>)
 8005ec8:	f7fa f9e8 	bl	800029c <__adddf3>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7fa fe90 	bl	8000bf8 <__aeabi_d2f>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4a53      	ldr	r2, [pc, #332]	; (8006028 <brrCalculus+0x470>)
 8005edc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005ede:	4b51      	ldr	r3, [pc, #324]	; (8006024 <brrCalculus+0x46c>)
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	4b50      	ldr	r3, [pc, #320]	; (8006028 <brrCalculus+0x470>)
 8005ee8:	edd3 7a00 	vldr	s15, [r3]
 8005eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef0:	ee17 3a90 	vmov	r3, s15
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	4b4d      	ldr	r3, [pc, #308]	; (8006030 <brrCalculus+0x478>)
 8005efc:	801a      	strh	r2, [r3, #0]


		break;
 8005efe:	e07e      	b.n	8005ffe <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8005f00:	4947      	ldr	r1, [pc, #284]	; (8006020 <brrCalculus+0x468>)
 8005f02:	a345      	add	r3, pc, #276	; (adr r3, 8006018 <brrCalculus+0x460>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	ee17 0a90 	vmov	r0, s15
 8005f1a:	f7fa fb1d 	bl	8000558 <__aeabi_f2d>
 8005f1e:	4b40      	ldr	r3, [pc, #256]	; (8006020 <brrCalculus+0x468>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa fb70 	bl	8000608 <__aeabi_dmul>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	493c      	ldr	r1, [pc, #240]	; (8006020 <brrCalculus+0x468>)
 8005f2e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005f32:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <brrCalculus+0x468>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f7fa fe14 	bl	8000b68 <__aeabi_d2iz>
 8005f40:	4603      	mov	r3, r0
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	4b37      	ldr	r3, [pc, #220]	; (8006024 <brrCalculus+0x46c>)
 8005f46:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005f48:	4b35      	ldr	r3, [pc, #212]	; (8006020 <brrCalculus+0x468>)
 8005f4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f4e:	4b34      	ldr	r3, [pc, #208]	; (8006020 <brrCalculus+0x468>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	4610      	mov	r0, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	f7fa fe06 	bl	8000b68 <__aeabi_d2iz>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fa fae8 	bl	8000534 <__aeabi_i2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa f994 	bl	8000298 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4610      	mov	r0, r2
 8005f76:	4619      	mov	r1, r3
 8005f78:	f7fa fe3e 	bl	8000bf8 <__aeabi_d2f>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	4a2a      	ldr	r2, [pc, #168]	; (8006028 <brrCalculus+0x470>)
 8005f80:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <brrCalculus+0x470>)
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	2004      	movs	r0, #4
 8005f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f8e:	f000 f8df 	bl	8006150 <roundToNDecimals>
 8005f92:	eef0 7a40 	vmov.f32	s15, s0
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <brrCalculus+0x470>)
 8005f98:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <brrCalculus+0x470>)
 8005f9e:	edd3 7a00 	vldr	s15, [r3]
 8005fa2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <brrCalculus+0x470>)
 8005fac:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <brrCalculus+0x470>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fa facf 	bl	8000558 <__aeabi_f2d>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	ec43 2b10 	vmov	d0, r2, r3
 8005fc2:	f003 fb61 	bl	8009688 <round>
 8005fc6:	ec53 2b10 	vmov	r2, r3, d0
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f7fa fe13 	bl	8000bf8 <__aeabi_d2f>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <brrCalculus+0x470>)
 8005fd6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <brrCalculus+0x46c>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <brrCalculus+0x470>)
 8005fe2:	edd3 7a00 	vldr	s15, [r3]
 8005fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fea:	ee17 3a90 	vmov	r3, s15
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <brrCalculus+0x478>)
 8005ff6:	801a      	strh	r2, [r3, #0]


		break;
 8005ff8:	e001      	b.n	8005ffe <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8005ffa:	bf00      	nop
		break;
 8005ffc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <brrCalculus+0x478>)
 8006000:	881b      	ldrh	r3, [r3, #0]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bdb0      	pop	{r4, r5, r7, pc}
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
 8006010:	789abcdf 	.word	0x789abcdf
 8006014:	3ec23456 	.word	0x3ec23456
 8006018:	789abcdf 	.word	0x789abcdf
 800601c:	3ea23456 	.word	0x3ea23456
 8006020:	200005d0 	.word	0x200005d0
 8006024:	200005c4 	.word	0x200005c4
 8006028:	200005c8 	.word	0x200005c8
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	200005c2 	.word	0x200005c2

08006034 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800603e:	e000      	b.n	8006042 <writeChar+0xe>
		__NOP();
 8006040:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f7      	beq.n	8006040 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	605a      	str	r2, [r3, #4]

}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800606e:	e008      	b.n	8006082 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ffdc 	bl	8006034 <writeChar>
		msgToSend ++ ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f2      	bne.n	8006070 <writeMsg+0xc>
	}
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	__NOP();
 8006098:	bf00      	nop
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
	__NOP();
 80060a8:	bf00      	nop
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
	return auxRxData;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <getRxData+0x14>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	200005d8 	.word	0x200005d8

080060cc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <USART2_IRQHandler+0x24>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <USART2_IRQHandler+0x24>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <USART2_IRQHandler+0x28>)
 80060e4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80060e6:	f7fb f8f3 	bl	80012d0 <usart2Rx_Callback>
	}

}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40004400 	.word	0x40004400
 80060f4:	200005d8 	.word	0x200005d8

080060f8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <USART1_IRQHandler+0x24>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <USART1_IRQHandler+0x24>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <USART1_IRQHandler+0x28>)
 8006110:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8006112:	f7ff ffbf 	bl	8006094 <usart1Rx_Callback>
	}
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40011000 	.word	0x40011000
 8006120:	200005d8 	.word	0x200005d8

08006124 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <USART6_IRQHandler+0x24>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <USART6_IRQHandler+0x24>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4b04      	ldr	r3, [pc, #16]	; (800614c <USART6_IRQHandler+0x28>)
 800613c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800613e:	f7ff ffb1 	bl	80060a4 <usart6Rx_Callback>
	}

}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40011400 	.word	0x40011400
 800614c:	200005d8 	.word	0x200005d8

08006150 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	ed87 0a01 	vstr	s0, [r7, #4]
 800615a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7fa f9e9 	bl	8000534 <__aeabi_i2d>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	ec43 2b11 	vmov	d1, r2, r3
 800616a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80061e8 <roundToNDecimals+0x98>
 800616e:	f003 fb2d 	bl	80097cc <pow>
 8006172:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fa f9ee 	bl	8000558 <__aeabi_f2d>
 800617c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006180:	f7fa fa42 	bl	8000608 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	f7fa fd34 	bl	8000bf8 <__aeabi_d2f>
 8006190:	4603      	mov	r3, r0
 8006192:	607b      	str	r3, [r7, #4]

    number = round(number);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fa f9df 	bl	8000558 <__aeabi_f2d>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	ec43 2b10 	vmov	d0, r2, r3
 80061a2:	f003 fa71 	bl	8009688 <round>
 80061a6:	ec53 2b10 	vmov	r2, r3, d0
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fa fd23 	bl	8000bf8 <__aeabi_d2f>
 80061b2:	4603      	mov	r3, r0
 80061b4:	607b      	str	r3, [r7, #4]

    number /= factor;
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fa f9ce 	bl	8000558 <__aeabi_f2d>
 80061bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c0:	f7fa fb4c 	bl	800085c <__aeabi_ddiv>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	f7fa fd14 	bl	8000bf8 <__aeabi_d2f>
 80061d0:	4603      	mov	r3, r0
 80061d2:	607b      	str	r3, [r7, #4]

    return number;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	ee07 3a90 	vmov	s15, r3
}
 80061da:	eeb0 0a67 	vmov.f32	s0, s15
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	f3af 8000 	nop.w
 80061e8:	00000000 	.word	0x00000000
 80061ec:	40240000 	.word	0x40240000

080061f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <SystemInit+0x20>)
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <SystemInit+0x20>)
 80061fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000ed00 	.word	0xe000ed00

08006214 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	2302      	movs	r3, #2
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	2302      	movs	r3, #2
 800622c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800622e:	4b34      	ldr	r3, [pc, #208]	; (8006300 <SystemCoreClockUpdate+0xec>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b08      	cmp	r3, #8
 800623c:	d011      	beq.n	8006262 <SystemCoreClockUpdate+0x4e>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d844      	bhi.n	80062ce <SystemCoreClockUpdate+0xba>
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <SystemCoreClockUpdate+0x3e>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d004      	beq.n	800625a <SystemCoreClockUpdate+0x46>
 8006250:	e03d      	b.n	80062ce <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006252:	4b2c      	ldr	r3, [pc, #176]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 8006254:	4a2c      	ldr	r2, [pc, #176]	; (8006308 <SystemCoreClockUpdate+0xf4>)
 8006256:	601a      	str	r2, [r3, #0]
      break;
 8006258:	e03d      	b.n	80062d6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800625a:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 800625c:	4a2b      	ldr	r2, [pc, #172]	; (800630c <SystemCoreClockUpdate+0xf8>)
 800625e:	601a      	str	r2, [r3, #0]
      break;
 8006260:	e039      	b.n	80062d6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <SystemCoreClockUpdate+0xec>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	0d9b      	lsrs	r3, r3, #22
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <SystemCoreClockUpdate+0xec>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006276:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00c      	beq.n	8006298 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800627e:	4a23      	ldr	r2, [pc, #140]	; (800630c <SystemCoreClockUpdate+0xf8>)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	fbb2 f3f3 	udiv	r3, r2, r3
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <SystemCoreClockUpdate+0xec>)
 8006288:	6852      	ldr	r2, [r2, #4]
 800628a:	0992      	lsrs	r2, r2, #6
 800628c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e00b      	b.n	80062b0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <SystemCoreClockUpdate+0xf4>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	4a17      	ldr	r2, [pc, #92]	; (8006300 <SystemCoreClockUpdate+0xec>)
 80062a2:	6852      	ldr	r2, [r2, #4]
 80062a4:	0992      	lsrs	r2, r2, #6
 80062a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <SystemCoreClockUpdate+0xec>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	0c1b      	lsrs	r3, r3, #16
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	3301      	adds	r3, #1
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 80062ca:	6013      	str	r3, [r2, #0]
      break;
 80062cc:	e003      	b.n	80062d6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <SystemCoreClockUpdate+0xf4>)
 80062d2:	601a      	str	r2, [r3, #0]
      break;
 80062d4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <SystemCoreClockUpdate+0xec>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	091b      	lsrs	r3, r3, #4
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <SystemCoreClockUpdate+0xfc>)
 80062e2:	5cd3      	ldrb	r3, [r2, r3]
 80062e4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80062e6:	4b07      	ldr	r3, [pc, #28]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	4a04      	ldr	r2, [pc, #16]	; (8006304 <SystemCoreClockUpdate+0xf0>)
 80062f2:	6013      	str	r3, [r2, #0]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	40023800 	.word	0x40023800
 8006304:	2000000c 	.word	0x2000000c
 8006308:	00f42400 	.word	0x00f42400
 800630c:	017d7840 	.word	0x017d7840
 8006310:	0800bb04 	.word	0x0800bb04

08006314 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a89      	ldr	r2, [pc, #548]	; (8006548 <i2c_config+0x234>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d106      	bne.n	8006334 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8006326:	4b89      	ldr	r3, [pc, #548]	; (800654c <i2c_config+0x238>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	4a88      	ldr	r2, [pc, #544]	; (800654c <i2c_config+0x238>)
 800632c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006330:	6413      	str	r3, [r2, #64]	; 0x40
 8006332:	e016      	b.n	8006362 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a85      	ldr	r2, [pc, #532]	; (8006550 <i2c_config+0x23c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d106      	bne.n	800634c <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800633e:	4b83      	ldr	r3, [pc, #524]	; (800654c <i2c_config+0x238>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	4a82      	ldr	r2, [pc, #520]	; (800654c <i2c_config+0x238>)
 8006344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006348:	6413      	str	r3, [r2, #64]	; 0x40
 800634a:	e00a      	b.n	8006362 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a80      	ldr	r2, [pc, #512]	; (8006554 <i2c_config+0x240>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d105      	bne.n	8006362 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8006356:	4b7d      	ldr	r3, [pc, #500]	; (800654c <i2c_config+0x238>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	4a7c      	ldr	r2, [pc, #496]	; (800654c <i2c_config+0x238>)
 800635c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006360:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006372:	e000      	b.n	8006376 <i2c_config+0x62>
		__NOP();
 8006374:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f7      	bne.n	8006374 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006392:	601a      	str	r2, [r3, #0]

	__NOP();
 8006394:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a4:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80063b4:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	79db      	ldrb	r3, [r3, #7]
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d108      	bne.n	80063d0 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0210 	orr.w	r2, r2, #16
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e018      	b.n	8006402 <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	79db      	ldrb	r3, [r3, #7]
 80063d4:	2b19      	cmp	r3, #25
 80063d6:	d108      	bne.n	80063ea <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0219 	orr.w	r2, r2, #25
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	e00b      	b.n	8006402 <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	79db      	ldrb	r3, [r3, #7]
 80063ee:	2b32      	cmp	r3, #50	; 0x32
 80063f0:	d107      	bne.n	8006402 <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8006400:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	795b      	ldrb	r3, [r3, #5]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d15c      	bne.n	80064d4 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006428:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	79db      	ldrb	r3, [r3, #7]
 800642e:	2b32      	cmp	r3, #50	; 0x32
 8006430:	d03f      	beq.n	80064b2 <i2c_config+0x19e>
 8006432:	2b32      	cmp	r3, #50	; 0x32
 8006434:	f300 80b2 	bgt.w	800659c <i2c_config+0x288>
 8006438:	2b19      	cmp	r3, #25
 800643a:	d029      	beq.n	8006490 <i2c_config+0x17c>
 800643c:	2b19      	cmp	r3, #25
 800643e:	f300 80ad 	bgt.w	800659c <i2c_config+0x288>
 8006442:	2b04      	cmp	r3, #4
 8006444:	d002      	beq.n	800644c <i2c_config+0x138>
 8006446:	2b10      	cmp	r3, #16
 8006448:	d011      	beq.n	800646e <i2c_config+0x15a>


				break;
			}default:{

				break;
 800644a:	e0a7      	b.n	800659c <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69da      	ldr	r2, [r3, #28]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0214 	orr.w	r2, r2, #20
 800645a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0205 	orr.w	r2, r2, #5
 800646a:	621a      	str	r2, [r3, #32]
				break;
 800646c:	e099      	b.n	80065a2 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800647c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0211 	orr.w	r2, r2, #17
 800648c:	621a      	str	r2, [r3, #32]
				break;
 800648e:	e088      	b.n	80065a2 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800649e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a1a      	ldr	r2, [r3, #32]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0215 	orr.w	r2, r2, #21
 80064ae:	621a      	str	r2, [r3, #32]
				break;
 80064b0:	e077      	b.n	80065a2 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 80064c0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 80064d0:	621a      	str	r2, [r3, #32]
				break;
 80064d2:	e066      	b.n	80065a2 <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064e2:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	79db      	ldrb	r3, [r3, #7]
 80064e8:	2b32      	cmp	r3, #50	; 0x32
 80064ea:	d046      	beq.n	800657a <i2c_config+0x266>
 80064ec:	2b32      	cmp	r3, #50	; 0x32
 80064ee:	dc57      	bgt.n	80065a0 <i2c_config+0x28c>
 80064f0:	2b19      	cmp	r3, #25
 80064f2:	d031      	beq.n	8006558 <i2c_config+0x244>
 80064f4:	2b19      	cmp	r3, #25
 80064f6:	dc53      	bgt.n	80065a0 <i2c_config+0x28c>
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d002      	beq.n	8006502 <i2c_config+0x1ee>
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d011      	beq.n	8006524 <i2c_config+0x210>


				break;
			}default:{

				break;
 8006500:	e04e      	b.n	80065a0 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0203 	orr.w	r2, r2, #3
 8006510:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0202 	orr.w	r2, r2, #2
 8006520:	621a      	str	r2, [r3, #32]
				break;
 8006522:	e03e      	b.n	80065a2 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 020d 	orr.w	r2, r2, #13
 8006532:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0206 	orr.w	r2, r2, #6
 8006542:	621a      	str	r2, [r3, #32]
				break;
 8006544:	e02d      	b.n	80065a2 <i2c_config+0x28e>
 8006546:	bf00      	nop
 8006548:	40005400 	.word	0x40005400
 800654c:	40023800 	.word	0x40023800
 8006550:	40005800 	.word	0x40005800
 8006554:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0215 	orr.w	r2, r2, #21
 8006566:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0208 	orr.w	r2, r2, #8
 8006576:	621a      	str	r2, [r3, #32]
				break;
 8006578:	e013      	b.n	80065a2 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8006588:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0210 	orr.w	r2, r2, #16
 8006598:	621a      	str	r2, [r3, #32]
				break;
 800659a:	e002      	b.n	80065a2 <i2c_config+0x28e>
				break;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <i2c_config+0x292>
				break;
 80065a0:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80065a2:	e000      	b.n	80065a6 <i2c_config+0x292>
		__NOP();
 80065a4:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f7      	bne.n	80065a4 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]


}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e6:	601a      	str	r2, [r3, #0]
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7a1b      	ldrb	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006612:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006614:	e000      	b.n	8006618 <i2c_startTransaction+0x24>
		__NOP();
 8006616:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f7      	bne.n	8006616 <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006634:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006636:	e000      	b.n	800663a <i2c_startTransaction+0x46>
		__NOP();
 8006638:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f7      	beq.n	8006638 <i2c_startTransaction+0x44>
	}
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7a1b      	ldrb	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006674:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006684:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8006686:	e000      	b.n	800668a <i2c_reStartTransaction+0x34>
		__NOP();
 8006688:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f7      	beq.n	8006688 <i2c_reStartTransaction+0x32>
	}
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
 80066d6:	4613      	mov	r3, r2
 80066d8:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	005a      	lsls	r2, r3, #1
 80066e2:	78bb      	ldrb	r3, [r7, #2]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80066ec:	e000      	b.n	80066f0 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 80066ee:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f7      	beq.n	80066ee <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	73fb      	strb	r3, [r7, #15]

}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800672e:	e000      	b.n	8006732 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8006730:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f7      	beq.n	8006730 <i2c_sendMemoryAddress+0x16>
	}
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8006762:	e000      	b.n	8006766 <i2c_sendDataByte+0x18>
		__NOP();
 8006764:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f7      	beq.n	8006764 <i2c_sendDataByte+0x16>
	}
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800678a:	e000      	b.n	800678e <i2c_readDataByte+0xc>
		__NOP();
 800678c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f7      	beq.n	800678c <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	799b      	ldrb	r3, [r3, #6]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000010 	.word	0x20000010

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	; (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	; (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	; (8006808 <__libc_init_array+0x44>)
 80067d8:	f005 f922 	bl	800ba20 <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	0800c168 	.word	0x0800c168
 8006800:	0800c168 	.word	0x0800c168
 8006804:	0800c168 	.word	0x0800c168
 8006808:	0800c16c 	.word	0x0800c16c

0800680c <malloc>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <malloc+0xc>)
 800680e:	4601      	mov	r1, r0
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f000 b877 	b.w	8006904 <_malloc_r>
 8006816:	bf00      	nop
 8006818:	20000010 	.word	0x20000010

0800681c <memset>:
 800681c:	4402      	add	r2, r0
 800681e:	4603      	mov	r3, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <_free_r>:
 800682c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682e:	2900      	cmp	r1, #0
 8006830:	d044      	beq.n	80068bc <_free_r+0x90>
 8006832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006836:	9001      	str	r0, [sp, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f1a1 0404 	sub.w	r4, r1, #4
 800683e:	bfb8      	it	lt
 8006840:	18e4      	addlt	r4, r4, r3
 8006842:	f001 fc73 	bl	800812c <__malloc_lock>
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <_free_r+0x94>)
 8006848:	9801      	ldr	r0, [sp, #4]
 800684a:	6813      	ldr	r3, [r2, #0]
 800684c:	b933      	cbnz	r3, 800685c <_free_r+0x30>
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	6014      	str	r4, [r2, #0]
 8006852:	b003      	add	sp, #12
 8006854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006858:	f001 bc6e 	b.w	8008138 <__malloc_unlock>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d908      	bls.n	8006872 <_free_r+0x46>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf01      	itttt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	1949      	addeq	r1, r1, r5
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	e7ed      	b.n	800684e <_free_r+0x22>
 8006872:	461a      	mov	r2, r3
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b10b      	cbz	r3, 800687c <_free_r+0x50>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d9fa      	bls.n	8006872 <_free_r+0x46>
 800687c:	6811      	ldr	r1, [r2, #0]
 800687e:	1855      	adds	r5, r2, r1
 8006880:	42a5      	cmp	r5, r4
 8006882:	d10b      	bne.n	800689c <_free_r+0x70>
 8006884:	6824      	ldr	r4, [r4, #0]
 8006886:	4421      	add	r1, r4
 8006888:	1854      	adds	r4, r2, r1
 800688a:	42a3      	cmp	r3, r4
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	d1e0      	bne.n	8006852 <_free_r+0x26>
 8006890:	681c      	ldr	r4, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	6053      	str	r3, [r2, #4]
 8006896:	4421      	add	r1, r4
 8006898:	6011      	str	r1, [r2, #0]
 800689a:	e7da      	b.n	8006852 <_free_r+0x26>
 800689c:	d902      	bls.n	80068a4 <_free_r+0x78>
 800689e:	230c      	movs	r3, #12
 80068a0:	6003      	str	r3, [r0, #0]
 80068a2:	e7d6      	b.n	8006852 <_free_r+0x26>
 80068a4:	6825      	ldr	r5, [r4, #0]
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf04      	itt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	6063      	str	r3, [r4, #4]
 80068b2:	bf04      	itt	eq
 80068b4:	1949      	addeq	r1, r1, r5
 80068b6:	6021      	streq	r1, [r4, #0]
 80068b8:	6054      	str	r4, [r2, #4]
 80068ba:	e7ca      	b.n	8006852 <_free_r+0x26>
 80068bc:	b003      	add	sp, #12
 80068be:	bd30      	pop	{r4, r5, pc}
 80068c0:	200005dc 	.word	0x200005dc

080068c4 <sbrk_aligned>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	4e0e      	ldr	r6, [pc, #56]	; (8006900 <sbrk_aligned+0x3c>)
 80068c8:	460c      	mov	r4, r1
 80068ca:	6831      	ldr	r1, [r6, #0]
 80068cc:	4605      	mov	r5, r0
 80068ce:	b911      	cbnz	r1, 80068d6 <sbrk_aligned+0x12>
 80068d0:	f000 fcf6 	bl	80072c0 <_sbrk_r>
 80068d4:	6030      	str	r0, [r6, #0]
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 fcf1 	bl	80072c0 <_sbrk_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d00a      	beq.n	80068f8 <sbrk_aligned+0x34>
 80068e2:	1cc4      	adds	r4, r0, #3
 80068e4:	f024 0403 	bic.w	r4, r4, #3
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d007      	beq.n	80068fc <sbrk_aligned+0x38>
 80068ec:	1a21      	subs	r1, r4, r0
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fce6 	bl	80072c0 <_sbrk_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d101      	bne.n	80068fc <sbrk_aligned+0x38>
 80068f8:	f04f 34ff 	mov.w	r4, #4294967295
 80068fc:	4620      	mov	r0, r4
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	200005e0 	.word	0x200005e0

08006904 <_malloc_r>:
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	1ccd      	adds	r5, r1, #3
 800690a:	f025 0503 	bic.w	r5, r5, #3
 800690e:	3508      	adds	r5, #8
 8006910:	2d0c      	cmp	r5, #12
 8006912:	bf38      	it	cc
 8006914:	250c      	movcc	r5, #12
 8006916:	2d00      	cmp	r5, #0
 8006918:	4607      	mov	r7, r0
 800691a:	db01      	blt.n	8006920 <_malloc_r+0x1c>
 800691c:	42a9      	cmp	r1, r5
 800691e:	d905      	bls.n	800692c <_malloc_r+0x28>
 8006920:	230c      	movs	r3, #12
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	2600      	movs	r6, #0
 8006926:	4630      	mov	r0, r6
 8006928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800692c:	4e2e      	ldr	r6, [pc, #184]	; (80069e8 <_malloc_r+0xe4>)
 800692e:	f001 fbfd 	bl	800812c <__malloc_lock>
 8006932:	6833      	ldr	r3, [r6, #0]
 8006934:	461c      	mov	r4, r3
 8006936:	bb34      	cbnz	r4, 8006986 <_malloc_r+0x82>
 8006938:	4629      	mov	r1, r5
 800693a:	4638      	mov	r0, r7
 800693c:	f7ff ffc2 	bl	80068c4 <sbrk_aligned>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	4604      	mov	r4, r0
 8006944:	d14d      	bne.n	80069e2 <_malloc_r+0xde>
 8006946:	6834      	ldr	r4, [r6, #0]
 8006948:	4626      	mov	r6, r4
 800694a:	2e00      	cmp	r6, #0
 800694c:	d140      	bne.n	80069d0 <_malloc_r+0xcc>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	4631      	mov	r1, r6
 8006952:	4638      	mov	r0, r7
 8006954:	eb04 0803 	add.w	r8, r4, r3
 8006958:	f000 fcb2 	bl	80072c0 <_sbrk_r>
 800695c:	4580      	cmp	r8, r0
 800695e:	d13a      	bne.n	80069d6 <_malloc_r+0xd2>
 8006960:	6821      	ldr	r1, [r4, #0]
 8006962:	3503      	adds	r5, #3
 8006964:	1a6d      	subs	r5, r5, r1
 8006966:	f025 0503 	bic.w	r5, r5, #3
 800696a:	3508      	adds	r5, #8
 800696c:	2d0c      	cmp	r5, #12
 800696e:	bf38      	it	cc
 8006970:	250c      	movcc	r5, #12
 8006972:	4629      	mov	r1, r5
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ffa5 	bl	80068c4 <sbrk_aligned>
 800697a:	3001      	adds	r0, #1
 800697c:	d02b      	beq.n	80069d6 <_malloc_r+0xd2>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	442b      	add	r3, r5
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	e00e      	b.n	80069a4 <_malloc_r+0xa0>
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	1b52      	subs	r2, r2, r5
 800698a:	d41e      	bmi.n	80069ca <_malloc_r+0xc6>
 800698c:	2a0b      	cmp	r2, #11
 800698e:	d916      	bls.n	80069be <_malloc_r+0xba>
 8006990:	1961      	adds	r1, r4, r5
 8006992:	42a3      	cmp	r3, r4
 8006994:	6025      	str	r5, [r4, #0]
 8006996:	bf18      	it	ne
 8006998:	6059      	strne	r1, [r3, #4]
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	bf08      	it	eq
 800699e:	6031      	streq	r1, [r6, #0]
 80069a0:	5162      	str	r2, [r4, r5]
 80069a2:	604b      	str	r3, [r1, #4]
 80069a4:	4638      	mov	r0, r7
 80069a6:	f104 060b 	add.w	r6, r4, #11
 80069aa:	f001 fbc5 	bl	8008138 <__malloc_unlock>
 80069ae:	f026 0607 	bic.w	r6, r6, #7
 80069b2:	1d23      	adds	r3, r4, #4
 80069b4:	1af2      	subs	r2, r6, r3
 80069b6:	d0b6      	beq.n	8006926 <_malloc_r+0x22>
 80069b8:	1b9b      	subs	r3, r3, r6
 80069ba:	50a3      	str	r3, [r4, r2]
 80069bc:	e7b3      	b.n	8006926 <_malloc_r+0x22>
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	bf0c      	ite	eq
 80069c4:	6032      	streq	r2, [r6, #0]
 80069c6:	605a      	strne	r2, [r3, #4]
 80069c8:	e7ec      	b.n	80069a4 <_malloc_r+0xa0>
 80069ca:	4623      	mov	r3, r4
 80069cc:	6864      	ldr	r4, [r4, #4]
 80069ce:	e7b2      	b.n	8006936 <_malloc_r+0x32>
 80069d0:	4634      	mov	r4, r6
 80069d2:	6876      	ldr	r6, [r6, #4]
 80069d4:	e7b9      	b.n	800694a <_malloc_r+0x46>
 80069d6:	230c      	movs	r3, #12
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4638      	mov	r0, r7
 80069dc:	f001 fbac 	bl	8008138 <__malloc_unlock>
 80069e0:	e7a1      	b.n	8006926 <_malloc_r+0x22>
 80069e2:	6025      	str	r5, [r4, #0]
 80069e4:	e7de      	b.n	80069a4 <_malloc_r+0xa0>
 80069e6:	bf00      	nop
 80069e8:	200005dc 	.word	0x200005dc

080069ec <__cvt>:
 80069ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	ec55 4b10 	vmov	r4, r5, d0
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	460e      	mov	r6, r1
 80069f8:	4619      	mov	r1, r3
 80069fa:	462b      	mov	r3, r5
 80069fc:	bfbb      	ittet	lt
 80069fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a02:	461d      	movlt	r5, r3
 8006a04:	2300      	movge	r3, #0
 8006a06:	232d      	movlt	r3, #45	; 0x2d
 8006a08:	700b      	strb	r3, [r1, #0]
 8006a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a10:	4691      	mov	r9, r2
 8006a12:	f023 0820 	bic.w	r8, r3, #32
 8006a16:	bfbc      	itt	lt
 8006a18:	4622      	movlt	r2, r4
 8006a1a:	4614      	movlt	r4, r2
 8006a1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a20:	d005      	beq.n	8006a2e <__cvt+0x42>
 8006a22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a26:	d100      	bne.n	8006a2a <__cvt+0x3e>
 8006a28:	3601      	adds	r6, #1
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	e000      	b.n	8006a30 <__cvt+0x44>
 8006a2e:	2103      	movs	r1, #3
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	ab02      	add	r3, sp, #8
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	ec45 4b10 	vmov	d0, r4, r5
 8006a3c:	4653      	mov	r3, sl
 8006a3e:	4632      	mov	r2, r6
 8006a40:	f000 fd62 	bl	8007508 <_dtoa_r>
 8006a44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a48:	4607      	mov	r7, r0
 8006a4a:	d102      	bne.n	8006a52 <__cvt+0x66>
 8006a4c:	f019 0f01 	tst.w	r9, #1
 8006a50:	d022      	beq.n	8006a98 <__cvt+0xac>
 8006a52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a56:	eb07 0906 	add.w	r9, r7, r6
 8006a5a:	d110      	bne.n	8006a7e <__cvt+0x92>
 8006a5c:	783b      	ldrb	r3, [r7, #0]
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	d10a      	bne.n	8006a78 <__cvt+0x8c>
 8006a62:	2200      	movs	r2, #0
 8006a64:	2300      	movs	r3, #0
 8006a66:	4620      	mov	r0, r4
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7fa f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a6e:	b918      	cbnz	r0, 8006a78 <__cvt+0x8c>
 8006a70:	f1c6 0601 	rsb	r6, r6, #1
 8006a74:	f8ca 6000 	str.w	r6, [sl]
 8006a78:	f8da 3000 	ldr.w	r3, [sl]
 8006a7c:	4499      	add	r9, r3
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7fa f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a8a:	b108      	cbz	r0, 8006a90 <__cvt+0xa4>
 8006a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a90:	2230      	movs	r2, #48	; 0x30
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	454b      	cmp	r3, r9
 8006a96:	d307      	bcc.n	8006aa8 <__cvt+0xbc>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a9c:	1bdb      	subs	r3, r3, r7
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	b004      	add	sp, #16
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	9103      	str	r1, [sp, #12]
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e7f0      	b.n	8006a92 <__cvt+0xa6>

08006ab0 <__exponent>:
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	bfb8      	it	lt
 8006ab8:	4249      	neglt	r1, r1
 8006aba:	f803 2b02 	strb.w	r2, [r3], #2
 8006abe:	bfb4      	ite	lt
 8006ac0:	222d      	movlt	r2, #45	; 0x2d
 8006ac2:	222b      	movge	r2, #43	; 0x2b
 8006ac4:	2909      	cmp	r1, #9
 8006ac6:	7042      	strb	r2, [r0, #1]
 8006ac8:	dd2a      	ble.n	8006b20 <__exponent+0x70>
 8006aca:	f10d 0407 	add.w	r4, sp, #7
 8006ace:	46a4      	mov	ip, r4
 8006ad0:	270a      	movs	r7, #10
 8006ad2:	46a6      	mov	lr, r4
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ada:	fb07 1516 	mls	r5, r7, r6, r1
 8006ade:	3530      	adds	r5, #48	; 0x30
 8006ae0:	2a63      	cmp	r2, #99	; 0x63
 8006ae2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ae6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aea:	4631      	mov	r1, r6
 8006aec:	dcf1      	bgt.n	8006ad2 <__exponent+0x22>
 8006aee:	3130      	adds	r1, #48	; 0x30
 8006af0:	f1ae 0502 	sub.w	r5, lr, #2
 8006af4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006af8:	1c44      	adds	r4, r0, #1
 8006afa:	4629      	mov	r1, r5
 8006afc:	4561      	cmp	r1, ip
 8006afe:	d30a      	bcc.n	8006b16 <__exponent+0x66>
 8006b00:	f10d 0209 	add.w	r2, sp, #9
 8006b04:	eba2 020e 	sub.w	r2, r2, lr
 8006b08:	4565      	cmp	r5, ip
 8006b0a:	bf88      	it	hi
 8006b0c:	2200      	movhi	r2, #0
 8006b0e:	4413      	add	r3, r2
 8006b10:	1a18      	subs	r0, r3, r0
 8006b12:	b003      	add	sp, #12
 8006b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b1e:	e7ed      	b.n	8006afc <__exponent+0x4c>
 8006b20:	2330      	movs	r3, #48	; 0x30
 8006b22:	3130      	adds	r1, #48	; 0x30
 8006b24:	7083      	strb	r3, [r0, #2]
 8006b26:	70c1      	strb	r1, [r0, #3]
 8006b28:	1d03      	adds	r3, r0, #4
 8006b2a:	e7f1      	b.n	8006b10 <__exponent+0x60>

08006b2c <_printf_float>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	ed2d 8b02 	vpush	{d8}
 8006b34:	b08d      	sub	sp, #52	; 0x34
 8006b36:	460c      	mov	r4, r1
 8006b38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	461f      	mov	r7, r3
 8006b40:	4605      	mov	r5, r0
 8006b42:	f001 facf 	bl	80080e4 <_localeconv_r>
 8006b46:	f8d0 a000 	ldr.w	sl, [r0]
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f7f9 fb48 	bl	80001e0 <strlen>
 8006b50:	2300      	movs	r3, #0
 8006b52:	930a      	str	r3, [sp, #40]	; 0x28
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b60:	3307      	adds	r3, #7
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	f103 0208 	add.w	r2, r3, #8
 8006b6a:	f8c8 2000 	str.w	r2, [r8]
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b84:	ee08 0a10 	vmov	s16, r0
 8006b88:	4b9f      	ldr	r3, [pc, #636]	; (8006e08 <_printf_float+0x2dc>)
 8006b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	f7f9 ffd3 	bl	8000b3c <__aeabi_dcmpun>
 8006b96:	bb88      	cbnz	r0, 8006bfc <_printf_float+0xd0>
 8006b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b9c:	4b9a      	ldr	r3, [pc, #616]	; (8006e08 <_printf_float+0x2dc>)
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba2:	f7f9 ffad 	bl	8000b00 <__aeabi_dcmple>
 8006ba6:	bb48      	cbnz	r0, 8006bfc <_printf_float+0xd0>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	b110      	cbz	r0, 8006bbc <_printf_float+0x90>
 8006bb6:	232d      	movs	r3, #45	; 0x2d
 8006bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bbc:	4b93      	ldr	r3, [pc, #588]	; (8006e0c <_printf_float+0x2e0>)
 8006bbe:	4894      	ldr	r0, [pc, #592]	; (8006e10 <_printf_float+0x2e4>)
 8006bc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bc4:	bf94      	ite	ls
 8006bc6:	4698      	movls	r8, r3
 8006bc8:	4680      	movhi	r8, r0
 8006bca:	2303      	movs	r3, #3
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	9b05      	ldr	r3, [sp, #20]
 8006bd0:	f023 0204 	bic.w	r2, r3, #4
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	f04f 0900 	mov.w	r9, #0
 8006bda:	9700      	str	r7, [sp, #0]
 8006bdc:	4633      	mov	r3, r6
 8006bde:	aa0b      	add	r2, sp, #44	; 0x2c
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f9d8 	bl	8006f98 <_printf_common>
 8006be8:	3001      	adds	r0, #1
 8006bea:	f040 8090 	bne.w	8006d0e <_printf_float+0x1e2>
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf2:	b00d      	add	sp, #52	; 0x34
 8006bf4:	ecbd 8b02 	vpop	{d8}
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7f9 ff9a 	bl	8000b3c <__aeabi_dcmpun>
 8006c08:	b140      	cbz	r0, 8006c1c <_printf_float+0xf0>
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbc      	itt	lt
 8006c10:	232d      	movlt	r3, #45	; 0x2d
 8006c12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c16:	487f      	ldr	r0, [pc, #508]	; (8006e14 <_printf_float+0x2e8>)
 8006c18:	4b7f      	ldr	r3, [pc, #508]	; (8006e18 <_printf_float+0x2ec>)
 8006c1a:	e7d1      	b.n	8006bc0 <_printf_float+0x94>
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c22:	9206      	str	r2, [sp, #24]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	d13f      	bne.n	8006ca8 <_printf_float+0x17c>
 8006c28:	2306      	movs	r3, #6
 8006c2a:	6063      	str	r3, [r4, #4]
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	6861      	ldr	r1, [r4, #4]
 8006c30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c34:	2300      	movs	r3, #0
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	ab0a      	add	r3, sp, #40	; 0x28
 8006c3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c3e:	ab09      	add	r3, sp, #36	; 0x24
 8006c40:	ec49 8b10 	vmov	d0, r8, r9
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff fecd 	bl	80069ec <__cvt>
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c56:	2b47      	cmp	r3, #71	; 0x47
 8006c58:	4680      	mov	r8, r0
 8006c5a:	d108      	bne.n	8006c6e <_printf_float+0x142>
 8006c5c:	1cc8      	adds	r0, r1, #3
 8006c5e:	db02      	blt.n	8006c66 <_printf_float+0x13a>
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	4299      	cmp	r1, r3
 8006c64:	dd41      	ble.n	8006cea <_printf_float+0x1be>
 8006c66:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c6a:	fa5f fb8b 	uxtb.w	fp, fp
 8006c6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c72:	d820      	bhi.n	8006cb6 <_printf_float+0x18a>
 8006c74:	3901      	subs	r1, #1
 8006c76:	465a      	mov	r2, fp
 8006c78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c7c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c7e:	f7ff ff17 	bl	8006ab0 <__exponent>
 8006c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c84:	1813      	adds	r3, r2, r0
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	4681      	mov	r9, r0
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	dc02      	bgt.n	8006c94 <_printf_float+0x168>
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	07d2      	lsls	r2, r2, #31
 8006c92:	d501      	bpl.n	8006c98 <_printf_float+0x16c>
 8006c94:	3301      	adds	r3, #1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d09c      	beq.n	8006bda <_printf_float+0xae>
 8006ca0:	232d      	movs	r3, #45	; 0x2d
 8006ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca6:	e798      	b.n	8006bda <_printf_float+0xae>
 8006ca8:	9a06      	ldr	r2, [sp, #24]
 8006caa:	2a47      	cmp	r2, #71	; 0x47
 8006cac:	d1be      	bne.n	8006c2c <_printf_float+0x100>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1bc      	bne.n	8006c2c <_printf_float+0x100>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7b9      	b.n	8006c2a <_printf_float+0xfe>
 8006cb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cba:	d118      	bne.n	8006cee <_printf_float+0x1c2>
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	dd0b      	ble.n	8006cda <_printf_float+0x1ae>
 8006cc2:	6121      	str	r1, [r4, #16]
 8006cc4:	b913      	cbnz	r3, 8006ccc <_printf_float+0x1a0>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	07d0      	lsls	r0, r2, #31
 8006cca:	d502      	bpl.n	8006cd2 <_printf_float+0x1a6>
 8006ccc:	3301      	adds	r3, #1
 8006cce:	440b      	add	r3, r1
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cd4:	f04f 0900 	mov.w	r9, #0
 8006cd8:	e7de      	b.n	8006c98 <_printf_float+0x16c>
 8006cda:	b913      	cbnz	r3, 8006ce2 <_printf_float+0x1b6>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	07d2      	lsls	r2, r2, #31
 8006ce0:	d501      	bpl.n	8006ce6 <_printf_float+0x1ba>
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	e7f4      	b.n	8006cd0 <_printf_float+0x1a4>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7f2      	b.n	8006cd0 <_printf_float+0x1a4>
 8006cea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	db05      	blt.n	8006d00 <_printf_float+0x1d4>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	6121      	str	r1, [r4, #16]
 8006cf8:	07d8      	lsls	r0, r3, #31
 8006cfa:	d5ea      	bpl.n	8006cd2 <_printf_float+0x1a6>
 8006cfc:	1c4b      	adds	r3, r1, #1
 8006cfe:	e7e7      	b.n	8006cd0 <_printf_float+0x1a4>
 8006d00:	2900      	cmp	r1, #0
 8006d02:	bfd4      	ite	le
 8006d04:	f1c1 0202 	rsble	r2, r1, #2
 8006d08:	2201      	movgt	r2, #1
 8006d0a:	4413      	add	r3, r2
 8006d0c:	e7e0      	b.n	8006cd0 <_printf_float+0x1a4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	055a      	lsls	r2, r3, #21
 8006d12:	d407      	bmi.n	8006d24 <_printf_float+0x1f8>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	4642      	mov	r2, r8
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d12c      	bne.n	8006d7c <_printf_float+0x250>
 8006d22:	e764      	b.n	8006bee <_printf_float+0xc2>
 8006d24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d28:	f240 80e0 	bls.w	8006eec <_printf_float+0x3c0>
 8006d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f7f9 fed0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d034      	beq.n	8006da6 <_printf_float+0x27a>
 8006d3c:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <_printf_float+0x2f0>)
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	f43f af51 	beq.w	8006bee <_printf_float+0xc2>
 8006d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d50:	429a      	cmp	r2, r3
 8006d52:	db02      	blt.n	8006d5a <_printf_float+0x22e>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	07d8      	lsls	r0, r3, #31
 8006d58:	d510      	bpl.n	8006d7c <_printf_float+0x250>
 8006d5a:	ee18 3a10 	vmov	r3, s16
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af41 	beq.w	8006bee <_printf_float+0xc2>
 8006d6c:	f04f 0800 	mov.w	r8, #0
 8006d70:	f104 091a 	add.w	r9, r4, #26
 8006d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d76:	3b01      	subs	r3, #1
 8006d78:	4543      	cmp	r3, r8
 8006d7a:	dc09      	bgt.n	8006d90 <_printf_float+0x264>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	f100 8105 	bmi.w	8006f8e <_printf_float+0x462>
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d88:	4298      	cmp	r0, r3
 8006d8a:	bfb8      	it	lt
 8006d8c:	4618      	movlt	r0, r3
 8006d8e:	e730      	b.n	8006bf2 <_printf_float+0xc6>
 8006d90:	2301      	movs	r3, #1
 8006d92:	464a      	mov	r2, r9
 8006d94:	4631      	mov	r1, r6
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b8      	blx	r7
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f43f af27 	beq.w	8006bee <_printf_float+0xc2>
 8006da0:	f108 0801 	add.w	r8, r8, #1
 8006da4:	e7e6      	b.n	8006d74 <_printf_float+0x248>
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc39      	bgt.n	8006e20 <_printf_float+0x2f4>
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <_printf_float+0x2f0>)
 8006dae:	2301      	movs	r3, #1
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f af19 	beq.w	8006bee <_printf_float+0xc2>
 8006dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d102      	bne.n	8006dca <_printf_float+0x29e>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d5d8      	bpl.n	8006d7c <_printf_float+0x250>
 8006dca:	ee18 3a10 	vmov	r3, s16
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af09 	beq.w	8006bee <_printf_float+0xc2>
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	f104 0a1a 	add.w	sl, r4, #26
 8006de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de6:	425b      	negs	r3, r3
 8006de8:	454b      	cmp	r3, r9
 8006dea:	dc01      	bgt.n	8006df0 <_printf_float+0x2c4>
 8006dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dee:	e792      	b.n	8006d16 <_printf_float+0x1ea>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4652      	mov	r2, sl
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f aef7 	beq.w	8006bee <_printf_float+0xc2>
 8006e00:	f109 0901 	add.w	r9, r9, #1
 8006e04:	e7ee      	b.n	8006de4 <_printf_float+0x2b8>
 8006e06:	bf00      	nop
 8006e08:	7fefffff 	.word	0x7fefffff
 8006e0c:	0800bb18 	.word	0x0800bb18
 8006e10:	0800bb1c 	.word	0x0800bb1c
 8006e14:	0800bb24 	.word	0x0800bb24
 8006e18:	0800bb20 	.word	0x0800bb20
 8006e1c:	0800bb28 	.word	0x0800bb28
 8006e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e24:	429a      	cmp	r2, r3
 8006e26:	bfa8      	it	ge
 8006e28:	461a      	movge	r2, r3
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	4691      	mov	r9, r2
 8006e2e:	dc37      	bgt.n	8006ea0 <_printf_float+0x374>
 8006e30:	f04f 0b00 	mov.w	fp, #0
 8006e34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e38:	f104 021a 	add.w	r2, r4, #26
 8006e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	eba3 0309 	sub.w	r3, r3, r9
 8006e44:	455b      	cmp	r3, fp
 8006e46:	dc33      	bgt.n	8006eb0 <_printf_float+0x384>
 8006e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	db3b      	blt.n	8006ec8 <_printf_float+0x39c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	07da      	lsls	r2, r3, #31
 8006e54:	d438      	bmi.n	8006ec8 <_printf_float+0x39c>
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	9a05      	ldr	r2, [sp, #20]
 8006e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5c:	1a9a      	subs	r2, r3, r2
 8006e5e:	eba3 0901 	sub.w	r9, r3, r1
 8006e62:	4591      	cmp	r9, r2
 8006e64:	bfa8      	it	ge
 8006e66:	4691      	movge	r9, r2
 8006e68:	f1b9 0f00 	cmp.w	r9, #0
 8006e6c:	dc35      	bgt.n	8006eda <_printf_float+0x3ae>
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e76:	f104 0a1a 	add.w	sl, r4, #26
 8006e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	eba3 0309 	sub.w	r3, r3, r9
 8006e84:	4543      	cmp	r3, r8
 8006e86:	f77f af79 	ble.w	8006d7c <_printf_float+0x250>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f aeaa 	beq.w	8006bee <_printf_float+0xc2>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	e7ec      	b.n	8006e7a <_printf_float+0x34e>
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d1c0      	bne.n	8006e30 <_printf_float+0x304>
 8006eae:	e69e      	b.n	8006bee <_printf_float+0xc2>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	9205      	str	r2, [sp, #20]
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f ae97 	beq.w	8006bee <_printf_float+0xc2>
 8006ec0:	9a05      	ldr	r2, [sp, #20]
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	e7b9      	b.n	8006e3c <_printf_float+0x310>
 8006ec8:	ee18 3a10 	vmov	r3, s16
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d1be      	bne.n	8006e56 <_printf_float+0x32a>
 8006ed8:	e689      	b.n	8006bee <_printf_float+0xc2>
 8006eda:	9a05      	ldr	r2, [sp, #20]
 8006edc:	464b      	mov	r3, r9
 8006ede:	4442      	add	r2, r8
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1c1      	bne.n	8006e6e <_printf_float+0x342>
 8006eea:	e680      	b.n	8006bee <_printf_float+0xc2>
 8006eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eee:	2a01      	cmp	r2, #1
 8006ef0:	dc01      	bgt.n	8006ef6 <_printf_float+0x3ca>
 8006ef2:	07db      	lsls	r3, r3, #31
 8006ef4:	d538      	bpl.n	8006f68 <_printf_float+0x43c>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4642      	mov	r2, r8
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f ae74 	beq.w	8006bee <_printf_float+0xc2>
 8006f06:	ee18 3a10 	vmov	r3, s16
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f ae6b 	beq.w	8006bee <_printf_float+0xc2>
 8006f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f7f9 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_printf_float+0x432>
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	f108 0201 	add.w	r2, r8, #1
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d10e      	bne.n	8006f56 <_printf_float+0x42a>
 8006f38:	e659      	b.n	8006bee <_printf_float+0xc2>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f ae52 	beq.w	8006bee <_printf_float+0xc2>
 8006f4a:	f108 0801 	add.w	r8, r8, #1
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4543      	cmp	r3, r8
 8006f54:	dcf1      	bgt.n	8006f3a <_printf_float+0x40e>
 8006f56:	464b      	mov	r3, r9
 8006f58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f5c:	e6dc      	b.n	8006d18 <_printf_float+0x1ec>
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	f104 0a1a 	add.w	sl, r4, #26
 8006f66:	e7f2      	b.n	8006f4e <_printf_float+0x422>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	e7df      	b.n	8006f2e <_printf_float+0x402>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	464a      	mov	r2, r9
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae38 	beq.w	8006bee <_printf_float+0xc2>
 8006f7e:	f108 0801 	add.w	r8, r8, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f86:	1a5b      	subs	r3, r3, r1
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	dcf0      	bgt.n	8006f6e <_printf_float+0x442>
 8006f8c:	e6fa      	b.n	8006d84 <_printf_float+0x258>
 8006f8e:	f04f 0800 	mov.w	r8, #0
 8006f92:	f104 0919 	add.w	r9, r4, #25
 8006f96:	e7f4      	b.n	8006f82 <_printf_float+0x456>

08006f98 <_printf_common>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	688a      	ldr	r2, [r1, #8]
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfb8      	it	lt
 8006fac:	4613      	movlt	r3, r2
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b10a      	cbz	r2, 8006fbe <_printf_common+0x26>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	0699      	lsls	r1, r3, #26
 8006fc2:	bf42      	ittt	mi
 8006fc4:	6833      	ldrmi	r3, [r6, #0]
 8006fc6:	3302      	addmi	r3, #2
 8006fc8:	6033      	strmi	r3, [r6, #0]
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	f015 0506 	ands.w	r5, r5, #6
 8006fd0:	d106      	bne.n	8006fe0 <_printf_common+0x48>
 8006fd2:	f104 0a19 	add.w	sl, r4, #25
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	6832      	ldr	r2, [r6, #0]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dc26      	bgt.n	800702e <_printf_common+0x96>
 8006fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe4:	1e13      	subs	r3, r2, #0
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d42b      	bmi.n	8007048 <_printf_common+0xb0>
 8006ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c0      	blx	r8
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d01e      	beq.n	800703c <_printf_common+0xa4>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	68e5      	ldr	r5, [r4, #12]
 8007002:	6832      	ldr	r2, [r6, #0]
 8007004:	f003 0306 	and.w	r3, r3, #6
 8007008:	2b04      	cmp	r3, #4
 800700a:	bf08      	it	eq
 800700c:	1aad      	subeq	r5, r5, r2
 800700e:	68a3      	ldr	r3, [r4, #8]
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	bf0c      	ite	eq
 8007014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007018:	2500      	movne	r5, #0
 800701a:	4293      	cmp	r3, r2
 800701c:	bfc4      	itt	gt
 800701e:	1a9b      	subgt	r3, r3, r2
 8007020:	18ed      	addgt	r5, r5, r3
 8007022:	2600      	movs	r6, #0
 8007024:	341a      	adds	r4, #26
 8007026:	42b5      	cmp	r5, r6
 8007028:	d11a      	bne.n	8007060 <_printf_common+0xc8>
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <_printf_common+0xa8>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4649      	mov	r1, r9
 8007034:	4638      	mov	r0, r7
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d103      	bne.n	8007044 <_printf_common+0xac>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	e7c6      	b.n	8006fd6 <_printf_common+0x3e>
 8007048:	18e1      	adds	r1, r4, r3
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	2030      	movs	r0, #48	; 0x30
 800704e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007052:	4422      	add	r2, r4
 8007054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800705c:	3302      	adds	r3, #2
 800705e:	e7c7      	b.n	8006ff0 <_printf_common+0x58>
 8007060:	2301      	movs	r3, #1
 8007062:	4622      	mov	r2, r4
 8007064:	4649      	mov	r1, r9
 8007066:	4638      	mov	r0, r7
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d0e6      	beq.n	800703c <_printf_common+0xa4>
 800706e:	3601      	adds	r6, #1
 8007070:	e7d9      	b.n	8007026 <_printf_common+0x8e>
	...

08007074 <_printf_i>:
 8007074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	7e0f      	ldrb	r7, [r1, #24]
 800707a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800707c:	2f78      	cmp	r7, #120	; 0x78
 800707e:	4691      	mov	r9, r2
 8007080:	4680      	mov	r8, r0
 8007082:	460c      	mov	r4, r1
 8007084:	469a      	mov	sl, r3
 8007086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800708a:	d807      	bhi.n	800709c <_printf_i+0x28>
 800708c:	2f62      	cmp	r7, #98	; 0x62
 800708e:	d80a      	bhi.n	80070a6 <_printf_i+0x32>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f000 80d8 	beq.w	8007246 <_printf_i+0x1d2>
 8007096:	2f58      	cmp	r7, #88	; 0x58
 8007098:	f000 80a3 	beq.w	80071e2 <_printf_i+0x16e>
 800709c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070a4:	e03a      	b.n	800711c <_printf_i+0xa8>
 80070a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070aa:	2b15      	cmp	r3, #21
 80070ac:	d8f6      	bhi.n	800709c <_printf_i+0x28>
 80070ae:	a101      	add	r1, pc, #4	; (adr r1, 80070b4 <_printf_i+0x40>)
 80070b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	08007121 	.word	0x08007121
 80070bc:	0800709d 	.word	0x0800709d
 80070c0:	0800709d 	.word	0x0800709d
 80070c4:	0800709d 	.word	0x0800709d
 80070c8:	0800709d 	.word	0x0800709d
 80070cc:	08007121 	.word	0x08007121
 80070d0:	0800709d 	.word	0x0800709d
 80070d4:	0800709d 	.word	0x0800709d
 80070d8:	0800709d 	.word	0x0800709d
 80070dc:	0800709d 	.word	0x0800709d
 80070e0:	0800722d 	.word	0x0800722d
 80070e4:	08007151 	.word	0x08007151
 80070e8:	0800720f 	.word	0x0800720f
 80070ec:	0800709d 	.word	0x0800709d
 80070f0:	0800709d 	.word	0x0800709d
 80070f4:	0800724f 	.word	0x0800724f
 80070f8:	0800709d 	.word	0x0800709d
 80070fc:	08007151 	.word	0x08007151
 8007100:	0800709d 	.word	0x0800709d
 8007104:	0800709d 	.word	0x0800709d
 8007108:	08007217 	.word	0x08007217
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	602a      	str	r2, [r5, #0]
 8007114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800711c:	2301      	movs	r3, #1
 800711e:	e0a3      	b.n	8007268 <_printf_i+0x1f4>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	6829      	ldr	r1, [r5, #0]
 8007124:	0606      	lsls	r6, r0, #24
 8007126:	f101 0304 	add.w	r3, r1, #4
 800712a:	d50a      	bpl.n	8007142 <_printf_i+0xce>
 800712c:	680e      	ldr	r6, [r1, #0]
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	2e00      	cmp	r6, #0
 8007132:	da03      	bge.n	800713c <_printf_i+0xc8>
 8007134:	232d      	movs	r3, #45	; 0x2d
 8007136:	4276      	negs	r6, r6
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713c:	485e      	ldr	r0, [pc, #376]	; (80072b8 <_printf_i+0x244>)
 800713e:	230a      	movs	r3, #10
 8007140:	e019      	b.n	8007176 <_printf_i+0x102>
 8007142:	680e      	ldr	r6, [r1, #0]
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800714a:	bf18      	it	ne
 800714c:	b236      	sxthne	r6, r6
 800714e:	e7ef      	b.n	8007130 <_printf_i+0xbc>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	6029      	str	r1, [r5, #0]
 8007158:	0601      	lsls	r1, r0, #24
 800715a:	d501      	bpl.n	8007160 <_printf_i+0xec>
 800715c:	681e      	ldr	r6, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0xf2>
 8007160:	0646      	lsls	r6, r0, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0xe8>
 8007164:	881e      	ldrh	r6, [r3, #0]
 8007166:	4854      	ldr	r0, [pc, #336]	; (80072b8 <_printf_i+0x244>)
 8007168:	2f6f      	cmp	r7, #111	; 0x6f
 800716a:	bf0c      	ite	eq
 800716c:	2308      	moveq	r3, #8
 800716e:	230a      	movne	r3, #10
 8007170:	2100      	movs	r1, #0
 8007172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007176:	6865      	ldr	r5, [r4, #4]
 8007178:	60a5      	str	r5, [r4, #8]
 800717a:	2d00      	cmp	r5, #0
 800717c:	bfa2      	ittt	ge
 800717e:	6821      	ldrge	r1, [r4, #0]
 8007180:	f021 0104 	bicge.w	r1, r1, #4
 8007184:	6021      	strge	r1, [r4, #0]
 8007186:	b90e      	cbnz	r6, 800718c <_printf_i+0x118>
 8007188:	2d00      	cmp	r5, #0
 800718a:	d04d      	beq.n	8007228 <_printf_i+0x1b4>
 800718c:	4615      	mov	r5, r2
 800718e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007192:	fb03 6711 	mls	r7, r3, r1, r6
 8007196:	5dc7      	ldrb	r7, [r0, r7]
 8007198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800719c:	4637      	mov	r7, r6
 800719e:	42bb      	cmp	r3, r7
 80071a0:	460e      	mov	r6, r1
 80071a2:	d9f4      	bls.n	800718e <_printf_i+0x11a>
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d10b      	bne.n	80071c0 <_printf_i+0x14c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	07de      	lsls	r6, r3, #31
 80071ac:	d508      	bpl.n	80071c0 <_printf_i+0x14c>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4299      	cmp	r1, r3
 80071b4:	bfde      	ittt	le
 80071b6:	2330      	movle	r3, #48	; 0x30
 80071b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c0:	1b52      	subs	r2, r2, r5
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	f8cd a000 	str.w	sl, [sp]
 80071c8:	464b      	mov	r3, r9
 80071ca:	aa03      	add	r2, sp, #12
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff fee2 	bl	8006f98 <_printf_common>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d14c      	bne.n	8007272 <_printf_i+0x1fe>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b004      	add	sp, #16
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	4835      	ldr	r0, [pc, #212]	; (80072b8 <_printf_i+0x244>)
 80071e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071e8:	6829      	ldr	r1, [r5, #0]
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80071f0:	6029      	str	r1, [r5, #0]
 80071f2:	061d      	lsls	r5, r3, #24
 80071f4:	d514      	bpl.n	8007220 <_printf_i+0x1ac>
 80071f6:	07df      	lsls	r7, r3, #31
 80071f8:	bf44      	itt	mi
 80071fa:	f043 0320 	orrmi.w	r3, r3, #32
 80071fe:	6023      	strmi	r3, [r4, #0]
 8007200:	b91e      	cbnz	r6, 800720a <_printf_i+0x196>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f023 0320 	bic.w	r3, r3, #32
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	2310      	movs	r3, #16
 800720c:	e7b0      	b.n	8007170 <_printf_i+0xfc>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	2378      	movs	r3, #120	; 0x78
 8007218:	4828      	ldr	r0, [pc, #160]	; (80072bc <_printf_i+0x248>)
 800721a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800721e:	e7e3      	b.n	80071e8 <_printf_i+0x174>
 8007220:	0659      	lsls	r1, r3, #25
 8007222:	bf48      	it	mi
 8007224:	b2b6      	uxthmi	r6, r6
 8007226:	e7e6      	b.n	80071f6 <_printf_i+0x182>
 8007228:	4615      	mov	r5, r2
 800722a:	e7bb      	b.n	80071a4 <_printf_i+0x130>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	6826      	ldr	r6, [r4, #0]
 8007230:	6961      	ldr	r1, [r4, #20]
 8007232:	1d18      	adds	r0, r3, #4
 8007234:	6028      	str	r0, [r5, #0]
 8007236:	0635      	lsls	r5, r6, #24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	d501      	bpl.n	8007240 <_printf_i+0x1cc>
 800723c:	6019      	str	r1, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0x1d2>
 8007240:	0670      	lsls	r0, r6, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0x1c8>
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	4615      	mov	r5, r2
 800724c:	e7ba      	b.n	80071c4 <_printf_i+0x150>
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	602a      	str	r2, [r5, #0]
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	6862      	ldr	r2, [r4, #4]
 8007258:	2100      	movs	r1, #0
 800725a:	4628      	mov	r0, r5
 800725c:	f7f8 ffc8 	bl	80001f0 <memchr>
 8007260:	b108      	cbz	r0, 8007266 <_printf_i+0x1f2>
 8007262:	1b40      	subs	r0, r0, r5
 8007264:	6060      	str	r0, [r4, #4]
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	2300      	movs	r3, #0
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007270:	e7a8      	b.n	80071c4 <_printf_i+0x150>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	462a      	mov	r2, r5
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d0ab      	beq.n	80071d8 <_printf_i+0x164>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	079b      	lsls	r3, r3, #30
 8007284:	d413      	bmi.n	80072ae <_printf_i+0x23a>
 8007286:	68e0      	ldr	r0, [r4, #12]
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	4298      	cmp	r0, r3
 800728c:	bfb8      	it	lt
 800728e:	4618      	movlt	r0, r3
 8007290:	e7a4      	b.n	80071dc <_printf_i+0x168>
 8007292:	2301      	movs	r3, #1
 8007294:	4632      	mov	r2, r6
 8007296:	4649      	mov	r1, r9
 8007298:	4640      	mov	r0, r8
 800729a:	47d0      	blx	sl
 800729c:	3001      	adds	r0, #1
 800729e:	d09b      	beq.n	80071d8 <_printf_i+0x164>
 80072a0:	3501      	adds	r5, #1
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	9903      	ldr	r1, [sp, #12]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dcf2      	bgt.n	8007292 <_printf_i+0x21e>
 80072ac:	e7eb      	b.n	8007286 <_printf_i+0x212>
 80072ae:	2500      	movs	r5, #0
 80072b0:	f104 0619 	add.w	r6, r4, #25
 80072b4:	e7f5      	b.n	80072a2 <_printf_i+0x22e>
 80072b6:	bf00      	nop
 80072b8:	0800bb2a 	.word	0x0800bb2a
 80072bc:	0800bb3b 	.word	0x0800bb3b

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	; (80072dc <_sbrk_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f004 fb9a 	bl	800ba04 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200005e4 	.word	0x200005e4

080072e0 <siprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b500      	push	{lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	ab1d      	add	r3, sp, #116	; 0x74
 80072e8:	9002      	str	r0, [sp, #8]
 80072ea:	9006      	str	r0, [sp, #24]
 80072ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <siprintf+0x38>)
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	9104      	str	r1, [sp, #16]
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <siprintf+0x3c>)
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	a902      	add	r1, sp, #8
 8007304:	f001 fb14 	bl	8008930 <_svfiprintf_r>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	b01c      	add	sp, #112	; 0x70
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	20000010 	.word	0x20000010
 800731c:	ffff0208 	.word	0xffff0208

08007320 <__sread>:
 8007320:	b510      	push	{r4, lr}
 8007322:	460c      	mov	r4, r1
 8007324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007328:	f001 fc02 	bl	8008b30 <_read_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	bfab      	itete	ge
 8007330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007332:	89a3      	ldrhlt	r3, [r4, #12]
 8007334:	181b      	addge	r3, r3, r0
 8007336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800733a:	bfac      	ite	ge
 800733c:	6563      	strge	r3, [r4, #84]	; 0x54
 800733e:	81a3      	strhlt	r3, [r4, #12]
 8007340:	bd10      	pop	{r4, pc}

08007342 <__swrite>:
 8007342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007346:	461f      	mov	r7, r3
 8007348:	898b      	ldrh	r3, [r1, #12]
 800734a:	05db      	lsls	r3, r3, #23
 800734c:	4605      	mov	r5, r0
 800734e:	460c      	mov	r4, r1
 8007350:	4616      	mov	r6, r2
 8007352:	d505      	bpl.n	8007360 <__swrite+0x1e>
 8007354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007358:	2302      	movs	r3, #2
 800735a:	2200      	movs	r2, #0
 800735c:	f000 fec6 	bl	80080ec <_lseek_r>
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	4628      	mov	r0, r5
 8007372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007376:	f000 b817 	b.w	80073a8 <_write_r>

0800737a <__sseek>:
 800737a:	b510      	push	{r4, lr}
 800737c:	460c      	mov	r4, r1
 800737e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007382:	f000 feb3 	bl	80080ec <_lseek_r>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	bf15      	itete	ne
 800738c:	6560      	strne	r0, [r4, #84]	; 0x54
 800738e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007396:	81a3      	strheq	r3, [r4, #12]
 8007398:	bf18      	it	ne
 800739a:	81a3      	strhne	r3, [r4, #12]
 800739c:	bd10      	pop	{r4, pc}

0800739e <__sclose>:
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 b813 	b.w	80073cc <_close_r>
	...

080073a8 <_write_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d07      	ldr	r5, [pc, #28]	; (80073c8 <_write_r+0x20>)
 80073ac:	4604      	mov	r4, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	2200      	movs	r2, #0
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7fa ff61 	bl	800227e <_write>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_write_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_write_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	200005e4 	.word	0x200005e4

080073cc <_close_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d06      	ldr	r5, [pc, #24]	; (80073e8 <_close_r+0x1c>)
 80073d0:	2300      	movs	r3, #0
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	602b      	str	r3, [r5, #0]
 80073d8:	f7fa ff6d 	bl	80022b6 <_close>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_close_r+0x1a>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_close_r+0x1a>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	200005e4 	.word	0x200005e4

080073ec <quorem>:
 80073ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	6903      	ldr	r3, [r0, #16]
 80073f2:	690c      	ldr	r4, [r1, #16]
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	4607      	mov	r7, r0
 80073f8:	f2c0 8081 	blt.w	80074fe <quorem+0x112>
 80073fc:	3c01      	subs	r4, #1
 80073fe:	f101 0814 	add.w	r8, r1, #20
 8007402:	f100 0514 	add.w	r5, r0, #20
 8007406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007414:	3301      	adds	r3, #1
 8007416:	429a      	cmp	r2, r3
 8007418:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800741c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007420:	fbb2 f6f3 	udiv	r6, r2, r3
 8007424:	d331      	bcc.n	800748a <quorem+0x9e>
 8007426:	f04f 0e00 	mov.w	lr, #0
 800742a:	4640      	mov	r0, r8
 800742c:	46ac      	mov	ip, r5
 800742e:	46f2      	mov	sl, lr
 8007430:	f850 2b04 	ldr.w	r2, [r0], #4
 8007434:	b293      	uxth	r3, r2
 8007436:	fb06 e303 	mla	r3, r6, r3, lr
 800743a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800743e:	b29b      	uxth	r3, r3
 8007440:	ebaa 0303 	sub.w	r3, sl, r3
 8007444:	f8dc a000 	ldr.w	sl, [ip]
 8007448:	0c12      	lsrs	r2, r2, #16
 800744a:	fa13 f38a 	uxtah	r3, r3, sl
 800744e:	fb06 e202 	mla	r2, r6, r2, lr
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800745a:	b292      	uxth	r2, r2
 800745c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	f8bd 3000 	ldrh.w	r3, [sp]
 8007468:	4581      	cmp	r9, r0
 800746a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746e:	f84c 3b04 	str.w	r3, [ip], #4
 8007472:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007476:	d2db      	bcs.n	8007430 <quorem+0x44>
 8007478:	f855 300b 	ldr.w	r3, [r5, fp]
 800747c:	b92b      	cbnz	r3, 800748a <quorem+0x9e>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	3b04      	subs	r3, #4
 8007482:	429d      	cmp	r5, r3
 8007484:	461a      	mov	r2, r3
 8007486:	d32e      	bcc.n	80074e6 <quorem+0xfa>
 8007488:	613c      	str	r4, [r7, #16]
 800748a:	4638      	mov	r0, r7
 800748c:	f001 f8dc 	bl	8008648 <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	db24      	blt.n	80074de <quorem+0xf2>
 8007494:	3601      	adds	r6, #1
 8007496:	4628      	mov	r0, r5
 8007498:	f04f 0c00 	mov.w	ip, #0
 800749c:	f858 2b04 	ldr.w	r2, [r8], #4
 80074a0:	f8d0 e000 	ldr.w	lr, [r0]
 80074a4:	b293      	uxth	r3, r2
 80074a6:	ebac 0303 	sub.w	r3, ip, r3
 80074aa:	0c12      	lsrs	r2, r2, #16
 80074ac:	fa13 f38e 	uxtah	r3, r3, lr
 80074b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074be:	45c1      	cmp	r9, r8
 80074c0:	f840 3b04 	str.w	r3, [r0], #4
 80074c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074c8:	d2e8      	bcs.n	800749c <quorem+0xb0>
 80074ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074d2:	b922      	cbnz	r2, 80074de <quorem+0xf2>
 80074d4:	3b04      	subs	r3, #4
 80074d6:	429d      	cmp	r5, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	d30a      	bcc.n	80074f2 <quorem+0x106>
 80074dc:	613c      	str	r4, [r7, #16]
 80074de:	4630      	mov	r0, r6
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d1cc      	bne.n	8007488 <quorem+0x9c>
 80074ee:	3c01      	subs	r4, #1
 80074f0:	e7c7      	b.n	8007482 <quorem+0x96>
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d1f0      	bne.n	80074dc <quorem+0xf0>
 80074fa:	3c01      	subs	r4, #1
 80074fc:	e7eb      	b.n	80074d6 <quorem+0xea>
 80074fe:	2000      	movs	r0, #0
 8007500:	e7ee      	b.n	80074e0 <quorem+0xf4>
 8007502:	0000      	movs	r0, r0
 8007504:	0000      	movs	r0, r0
	...

08007508 <_dtoa_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ed2d 8b04 	vpush	{d8-d9}
 8007510:	ec57 6b10 	vmov	r6, r7, d0
 8007514:	b093      	sub	sp, #76	; 0x4c
 8007516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800751c:	9106      	str	r1, [sp, #24]
 800751e:	ee10 aa10 	vmov	sl, s0
 8007522:	4604      	mov	r4, r0
 8007524:	9209      	str	r2, [sp, #36]	; 0x24
 8007526:	930c      	str	r3, [sp, #48]	; 0x30
 8007528:	46bb      	mov	fp, r7
 800752a:	b975      	cbnz	r5, 800754a <_dtoa_r+0x42>
 800752c:	2010      	movs	r0, #16
 800752e:	f7ff f96d 	bl	800680c <malloc>
 8007532:	4602      	mov	r2, r0
 8007534:	6260      	str	r0, [r4, #36]	; 0x24
 8007536:	b920      	cbnz	r0, 8007542 <_dtoa_r+0x3a>
 8007538:	4ba7      	ldr	r3, [pc, #668]	; (80077d8 <_dtoa_r+0x2d0>)
 800753a:	21ea      	movs	r1, #234	; 0xea
 800753c:	48a7      	ldr	r0, [pc, #668]	; (80077dc <_dtoa_r+0x2d4>)
 800753e:	f001 fb09 	bl	8008b54 <__assert_func>
 8007542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007546:	6005      	str	r5, [r0, #0]
 8007548:	60c5      	str	r5, [r0, #12]
 800754a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800754c:	6819      	ldr	r1, [r3, #0]
 800754e:	b151      	cbz	r1, 8007566 <_dtoa_r+0x5e>
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	604a      	str	r2, [r1, #4]
 8007554:	2301      	movs	r3, #1
 8007556:	4093      	lsls	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fe32 	bl	80081c4 <_Bfree>
 8007560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	1e3b      	subs	r3, r7, #0
 8007568:	bfaa      	itet	ge
 800756a:	2300      	movge	r3, #0
 800756c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007570:	f8c8 3000 	strge.w	r3, [r8]
 8007574:	4b9a      	ldr	r3, [pc, #616]	; (80077e0 <_dtoa_r+0x2d8>)
 8007576:	bfbc      	itt	lt
 8007578:	2201      	movlt	r2, #1
 800757a:	f8c8 2000 	strlt.w	r2, [r8]
 800757e:	ea33 030b 	bics.w	r3, r3, fp
 8007582:	d11b      	bne.n	80075bc <_dtoa_r+0xb4>
 8007584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007586:	f242 730f 	movw	r3, #9999	; 0x270f
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007590:	4333      	orrs	r3, r6
 8007592:	f000 8592 	beq.w	80080ba <_dtoa_r+0xbb2>
 8007596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007598:	b963      	cbnz	r3, 80075b4 <_dtoa_r+0xac>
 800759a:	4b92      	ldr	r3, [pc, #584]	; (80077e4 <_dtoa_r+0x2dc>)
 800759c:	e022      	b.n	80075e4 <_dtoa_r+0xdc>
 800759e:	4b92      	ldr	r3, [pc, #584]	; (80077e8 <_dtoa_r+0x2e0>)
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	3308      	adds	r3, #8
 80075a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	9801      	ldr	r0, [sp, #4]
 80075aa:	b013      	add	sp, #76	; 0x4c
 80075ac:	ecbd 8b04 	vpop	{d8-d9}
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	4b8b      	ldr	r3, [pc, #556]	; (80077e4 <_dtoa_r+0x2dc>)
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	3303      	adds	r3, #3
 80075ba:	e7f3      	b.n	80075a4 <_dtoa_r+0x9c>
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	f7f9 fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80075c8:	ec4b ab19 	vmov	d9, sl, fp
 80075cc:	4680      	mov	r8, r0
 80075ce:	b158      	cbz	r0, 80075e8 <_dtoa_r+0xe0>
 80075d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d2:	2301      	movs	r3, #1
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 856b 	beq.w	80080b4 <_dtoa_r+0xbac>
 80075de:	4883      	ldr	r0, [pc, #524]	; (80077ec <_dtoa_r+0x2e4>)
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	1e43      	subs	r3, r0, #1
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	e7df      	b.n	80075a8 <_dtoa_r+0xa0>
 80075e8:	ec4b ab10 	vmov	d0, sl, fp
 80075ec:	aa10      	add	r2, sp, #64	; 0x40
 80075ee:	a911      	add	r1, sp, #68	; 0x44
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 f8cf 	bl	8008794 <__d2b>
 80075f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075fa:	ee08 0a10 	vmov	s16, r0
 80075fe:	2d00      	cmp	r5, #0
 8007600:	f000 8084 	beq.w	800770c <_dtoa_r+0x204>
 8007604:	ee19 3a90 	vmov	r3, s19
 8007608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007610:	4656      	mov	r6, sl
 8007612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800761a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800761e:	4b74      	ldr	r3, [pc, #464]	; (80077f0 <_dtoa_r+0x2e8>)
 8007620:	2200      	movs	r2, #0
 8007622:	4630      	mov	r0, r6
 8007624:	4639      	mov	r1, r7
 8007626:	f7f8 fe37 	bl	8000298 <__aeabi_dsub>
 800762a:	a365      	add	r3, pc, #404	; (adr r3, 80077c0 <_dtoa_r+0x2b8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 ffea 	bl	8000608 <__aeabi_dmul>
 8007634:	a364      	add	r3, pc, #400	; (adr r3, 80077c8 <_dtoa_r+0x2c0>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe2f 	bl	800029c <__adddf3>
 800763e:	4606      	mov	r6, r0
 8007640:	4628      	mov	r0, r5
 8007642:	460f      	mov	r7, r1
 8007644:	f7f8 ff76 	bl	8000534 <__aeabi_i2d>
 8007648:	a361      	add	r3, pc, #388	; (adr r3, 80077d0 <_dtoa_r+0x2c8>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 ffdb 	bl	8000608 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f8 fe1f 	bl	800029c <__adddf3>
 800765e:	4606      	mov	r6, r0
 8007660:	460f      	mov	r7, r1
 8007662:	f7f9 fa81 	bl	8000b68 <__aeabi_d2iz>
 8007666:	2200      	movs	r2, #0
 8007668:	9000      	str	r0, [sp, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f9 fa3c 	bl	8000aec <__aeabi_dcmplt>
 8007674:	b150      	cbz	r0, 800768c <_dtoa_r+0x184>
 8007676:	9800      	ldr	r0, [sp, #0]
 8007678:	f7f8 ff5c 	bl	8000534 <__aeabi_i2d>
 800767c:	4632      	mov	r2, r6
 800767e:	463b      	mov	r3, r7
 8007680:	f7f9 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007684:	b910      	cbnz	r0, 800768c <_dtoa_r+0x184>
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	2b16      	cmp	r3, #22
 8007690:	d85a      	bhi.n	8007748 <_dtoa_r+0x240>
 8007692:	9a00      	ldr	r2, [sp, #0]
 8007694:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <_dtoa_r+0x2ec>)
 8007696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	ec51 0b19 	vmov	r0, r1, d9
 80076a2:	f7f9 fa23 	bl	8000aec <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d050      	beq.n	800774c <_dtoa_r+0x244>
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2300      	movs	r3, #0
 80076b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076b6:	1b5d      	subs	r5, r3, r5
 80076b8:	1e6b      	subs	r3, r5, #1
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	bf45      	ittet	mi
 80076be:	f1c5 0301 	rsbmi	r3, r5, #1
 80076c2:	9304      	strmi	r3, [sp, #16]
 80076c4:	2300      	movpl	r3, #0
 80076c6:	2300      	movmi	r3, #0
 80076c8:	bf4c      	ite	mi
 80076ca:	9305      	strmi	r3, [sp, #20]
 80076cc:	9304      	strpl	r3, [sp, #16]
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db3d      	blt.n	8007750 <_dtoa_r+0x248>
 80076d4:	9b05      	ldr	r3, [sp, #20]
 80076d6:	9a00      	ldr	r2, [sp, #0]
 80076d8:	920a      	str	r2, [sp, #40]	; 0x28
 80076da:	4413      	add	r3, r2
 80076dc:	9305      	str	r3, [sp, #20]
 80076de:	2300      	movs	r3, #0
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	f200 8089 	bhi.w	80077fc <_dtoa_r+0x2f4>
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	bfc4      	itt	gt
 80076ee:	3b04      	subgt	r3, #4
 80076f0:	9306      	strgt	r3, [sp, #24]
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	f1a3 0302 	sub.w	r3, r3, #2
 80076f8:	bfcc      	ite	gt
 80076fa:	2500      	movgt	r5, #0
 80076fc:	2501      	movle	r5, #1
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f200 8087 	bhi.w	8007812 <_dtoa_r+0x30a>
 8007704:	e8df f003 	tbb	[pc, r3]
 8007708:	59383a2d 	.word	0x59383a2d
 800770c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007710:	441d      	add	r5, r3
 8007712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007716:	2b20      	cmp	r3, #32
 8007718:	bfc1      	itttt	gt
 800771a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800771e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007722:	fa0b f303 	lslgt.w	r3, fp, r3
 8007726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800772a:	bfda      	itte	le
 800772c:	f1c3 0320 	rsble	r3, r3, #32
 8007730:	fa06 f003 	lslle.w	r0, r6, r3
 8007734:	4318      	orrgt	r0, r3
 8007736:	f7f8 feed 	bl	8000514 <__aeabi_ui2d>
 800773a:	2301      	movs	r3, #1
 800773c:	4606      	mov	r6, r0
 800773e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007742:	3d01      	subs	r5, #1
 8007744:	930e      	str	r3, [sp, #56]	; 0x38
 8007746:	e76a      	b.n	800761e <_dtoa_r+0x116>
 8007748:	2301      	movs	r3, #1
 800774a:	e7b2      	b.n	80076b2 <_dtoa_r+0x1aa>
 800774c:	900b      	str	r0, [sp, #44]	; 0x2c
 800774e:	e7b1      	b.n	80076b4 <_dtoa_r+0x1ac>
 8007750:	9b04      	ldr	r3, [sp, #16]
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	4253      	negs	r3, r2
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	2300      	movs	r3, #0
 800775e:	930a      	str	r3, [sp, #40]	; 0x28
 8007760:	e7bf      	b.n	80076e2 <_dtoa_r+0x1da>
 8007762:	2300      	movs	r3, #0
 8007764:	9308      	str	r3, [sp, #32]
 8007766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	dc55      	bgt.n	8007818 <_dtoa_r+0x310>
 800776c:	2301      	movs	r3, #1
 800776e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007772:	461a      	mov	r2, r3
 8007774:	9209      	str	r2, [sp, #36]	; 0x24
 8007776:	e00c      	b.n	8007792 <_dtoa_r+0x28a>
 8007778:	2301      	movs	r3, #1
 800777a:	e7f3      	b.n	8007764 <_dtoa_r+0x25c>
 800777c:	2300      	movs	r3, #0
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	9308      	str	r3, [sp, #32]
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	4413      	add	r3, r2
 8007786:	9302      	str	r3, [sp, #8]
 8007788:	3301      	adds	r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	9303      	str	r3, [sp, #12]
 800778e:	bfb8      	it	lt
 8007790:	2301      	movlt	r3, #1
 8007792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007794:	2200      	movs	r2, #0
 8007796:	6042      	str	r2, [r0, #4]
 8007798:	2204      	movs	r2, #4
 800779a:	f102 0614 	add.w	r6, r2, #20
 800779e:	429e      	cmp	r6, r3
 80077a0:	6841      	ldr	r1, [r0, #4]
 80077a2:	d93d      	bls.n	8007820 <_dtoa_r+0x318>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fccd 	bl	8008144 <_Balloc>
 80077aa:	9001      	str	r0, [sp, #4]
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d13b      	bne.n	8007828 <_dtoa_r+0x320>
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <_dtoa_r+0x2f0>)
 80077b2:	4602      	mov	r2, r0
 80077b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077b8:	e6c0      	b.n	800753c <_dtoa_r+0x34>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e7df      	b.n	800777e <_dtoa_r+0x276>
 80077be:	bf00      	nop
 80077c0:	636f4361 	.word	0x636f4361
 80077c4:	3fd287a7 	.word	0x3fd287a7
 80077c8:	8b60c8b3 	.word	0x8b60c8b3
 80077cc:	3fc68a28 	.word	0x3fc68a28
 80077d0:	509f79fb 	.word	0x509f79fb
 80077d4:	3fd34413 	.word	0x3fd34413
 80077d8:	0800bb59 	.word	0x0800bb59
 80077dc:	0800bb70 	.word	0x0800bb70
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	0800bb55 	.word	0x0800bb55
 80077e8:	0800bb4c 	.word	0x0800bb4c
 80077ec:	0800bb29 	.word	0x0800bb29
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	0800bc60 	.word	0x0800bc60
 80077f8:	0800bbcb 	.word	0x0800bbcb
 80077fc:	2501      	movs	r5, #1
 80077fe:	2300      	movs	r3, #0
 8007800:	9306      	str	r3, [sp, #24]
 8007802:	9508      	str	r5, [sp, #32]
 8007804:	f04f 33ff 	mov.w	r3, #4294967295
 8007808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	2312      	movs	r3, #18
 8007810:	e7b0      	b.n	8007774 <_dtoa_r+0x26c>
 8007812:	2301      	movs	r3, #1
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	e7f5      	b.n	8007804 <_dtoa_r+0x2fc>
 8007818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800781e:	e7b8      	b.n	8007792 <_dtoa_r+0x28a>
 8007820:	3101      	adds	r1, #1
 8007822:	6041      	str	r1, [r0, #4]
 8007824:	0052      	lsls	r2, r2, #1
 8007826:	e7b8      	b.n	800779a <_dtoa_r+0x292>
 8007828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782a:	9a01      	ldr	r2, [sp, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	2b0e      	cmp	r3, #14
 8007832:	f200 809d 	bhi.w	8007970 <_dtoa_r+0x468>
 8007836:	2d00      	cmp	r5, #0
 8007838:	f000 809a 	beq.w	8007970 <_dtoa_r+0x468>
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd32      	ble.n	80078a8 <_dtoa_r+0x3a0>
 8007842:	4ab7      	ldr	r2, [pc, #732]	; (8007b20 <_dtoa_r+0x618>)
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800784c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007850:	9b00      	ldr	r3, [sp, #0]
 8007852:	05d8      	lsls	r0, r3, #23
 8007854:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007858:	d516      	bpl.n	8007888 <_dtoa_r+0x380>
 800785a:	4bb2      	ldr	r3, [pc, #712]	; (8007b24 <_dtoa_r+0x61c>)
 800785c:	ec51 0b19 	vmov	r0, r1, d9
 8007860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007864:	f7f8 fffa 	bl	800085c <__aeabi_ddiv>
 8007868:	f007 070f 	and.w	r7, r7, #15
 800786c:	4682      	mov	sl, r0
 800786e:	468b      	mov	fp, r1
 8007870:	2503      	movs	r5, #3
 8007872:	4eac      	ldr	r6, [pc, #688]	; (8007b24 <_dtoa_r+0x61c>)
 8007874:	b957      	cbnz	r7, 800788c <_dtoa_r+0x384>
 8007876:	4642      	mov	r2, r8
 8007878:	464b      	mov	r3, r9
 800787a:	4650      	mov	r0, sl
 800787c:	4659      	mov	r1, fp
 800787e:	f7f8 ffed 	bl	800085c <__aeabi_ddiv>
 8007882:	4682      	mov	sl, r0
 8007884:	468b      	mov	fp, r1
 8007886:	e028      	b.n	80078da <_dtoa_r+0x3d2>
 8007888:	2502      	movs	r5, #2
 800788a:	e7f2      	b.n	8007872 <_dtoa_r+0x36a>
 800788c:	07f9      	lsls	r1, r7, #31
 800788e:	d508      	bpl.n	80078a2 <_dtoa_r+0x39a>
 8007890:	4640      	mov	r0, r8
 8007892:	4649      	mov	r1, r9
 8007894:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007898:	f7f8 feb6 	bl	8000608 <__aeabi_dmul>
 800789c:	3501      	adds	r5, #1
 800789e:	4680      	mov	r8, r0
 80078a0:	4689      	mov	r9, r1
 80078a2:	107f      	asrs	r7, r7, #1
 80078a4:	3608      	adds	r6, #8
 80078a6:	e7e5      	b.n	8007874 <_dtoa_r+0x36c>
 80078a8:	f000 809b 	beq.w	80079e2 <_dtoa_r+0x4da>
 80078ac:	9b00      	ldr	r3, [sp, #0]
 80078ae:	4f9d      	ldr	r7, [pc, #628]	; (8007b24 <_dtoa_r+0x61c>)
 80078b0:	425e      	negs	r6, r3
 80078b2:	4b9b      	ldr	r3, [pc, #620]	; (8007b20 <_dtoa_r+0x618>)
 80078b4:	f006 020f 	and.w	r2, r6, #15
 80078b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	ec51 0b19 	vmov	r0, r1, d9
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	1136      	asrs	r6, r6, #4
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	2300      	movs	r3, #0
 80078d0:	2502      	movs	r5, #2
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d17a      	bne.n	80079cc <_dtoa_r+0x4c4>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1d3      	bne.n	8007882 <_dtoa_r+0x37a>
 80078da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8082 	beq.w	80079e6 <_dtoa_r+0x4de>
 80078e2:	4b91      	ldr	r3, [pc, #580]	; (8007b28 <_dtoa_r+0x620>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	f7f9 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d079      	beq.n	80079e6 <_dtoa_r+0x4de>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d076      	beq.n	80079e6 <_dtoa_r+0x4de>
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dd36      	ble.n	800796c <_dtoa_r+0x464>
 80078fe:	9b00      	ldr	r3, [sp, #0]
 8007900:	4650      	mov	r0, sl
 8007902:	4659      	mov	r1, fp
 8007904:	1e5f      	subs	r7, r3, #1
 8007906:	2200      	movs	r2, #0
 8007908:	4b88      	ldr	r3, [pc, #544]	; (8007b2c <_dtoa_r+0x624>)
 800790a:	f7f8 fe7d 	bl	8000608 <__aeabi_dmul>
 800790e:	9e02      	ldr	r6, [sp, #8]
 8007910:	4682      	mov	sl, r0
 8007912:	468b      	mov	fp, r1
 8007914:	3501      	adds	r5, #1
 8007916:	4628      	mov	r0, r5
 8007918:	f7f8 fe0c 	bl	8000534 <__aeabi_i2d>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	f7f8 fe72 	bl	8000608 <__aeabi_dmul>
 8007924:	4b82      	ldr	r3, [pc, #520]	; (8007b30 <_dtoa_r+0x628>)
 8007926:	2200      	movs	r2, #0
 8007928:	f7f8 fcb8 	bl	800029c <__adddf3>
 800792c:	46d0      	mov	r8, sl
 800792e:	46d9      	mov	r9, fp
 8007930:	4682      	mov	sl, r0
 8007932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007936:	2e00      	cmp	r6, #0
 8007938:	d158      	bne.n	80079ec <_dtoa_r+0x4e4>
 800793a:	4b7e      	ldr	r3, [pc, #504]	; (8007b34 <_dtoa_r+0x62c>)
 800793c:	2200      	movs	r2, #0
 800793e:	4640      	mov	r0, r8
 8007940:	4649      	mov	r1, r9
 8007942:	f7f8 fca9 	bl	8000298 <__aeabi_dsub>
 8007946:	4652      	mov	r2, sl
 8007948:	465b      	mov	r3, fp
 800794a:	4680      	mov	r8, r0
 800794c:	4689      	mov	r9, r1
 800794e:	f7f9 f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 8007952:	2800      	cmp	r0, #0
 8007954:	f040 8295 	bne.w	8007e82 <_dtoa_r+0x97a>
 8007958:	4652      	mov	r2, sl
 800795a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f9 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8289 	bne.w	8007e7e <_dtoa_r+0x976>
 800796c:	ec5b ab19 	vmov	sl, fp, d9
 8007970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007972:	2b00      	cmp	r3, #0
 8007974:	f2c0 8148 	blt.w	8007c08 <_dtoa_r+0x700>
 8007978:	9a00      	ldr	r2, [sp, #0]
 800797a:	2a0e      	cmp	r2, #14
 800797c:	f300 8144 	bgt.w	8007c08 <_dtoa_r+0x700>
 8007980:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <_dtoa_r+0x618>)
 8007982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	f280 80d5 	bge.w	8007b3c <_dtoa_r+0x634>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f300 80d1 	bgt.w	8007b3c <_dtoa_r+0x634>
 800799a:	f040 826f 	bne.w	8007e7c <_dtoa_r+0x974>
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <_dtoa_r+0x62c>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fe2f 	bl	8000608 <__aeabi_dmul>
 80079aa:	4652      	mov	r2, sl
 80079ac:	465b      	mov	r3, fp
 80079ae:	f7f9 f8b1 	bl	8000b14 <__aeabi_dcmpge>
 80079b2:	9e03      	ldr	r6, [sp, #12]
 80079b4:	4637      	mov	r7, r6
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f040 8245 	bne.w	8007e46 <_dtoa_r+0x93e>
 80079bc:	9d01      	ldr	r5, [sp, #4]
 80079be:	2331      	movs	r3, #49	; 0x31
 80079c0:	f805 3b01 	strb.w	r3, [r5], #1
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	e240      	b.n	8007e4e <_dtoa_r+0x946>
 80079cc:	07f2      	lsls	r2, r6, #31
 80079ce:	d505      	bpl.n	80079dc <_dtoa_r+0x4d4>
 80079d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	3501      	adds	r5, #1
 80079da:	2301      	movs	r3, #1
 80079dc:	1076      	asrs	r6, r6, #1
 80079de:	3708      	adds	r7, #8
 80079e0:	e777      	b.n	80078d2 <_dtoa_r+0x3ca>
 80079e2:	2502      	movs	r5, #2
 80079e4:	e779      	b.n	80078da <_dtoa_r+0x3d2>
 80079e6:	9f00      	ldr	r7, [sp, #0]
 80079e8:	9e03      	ldr	r6, [sp, #12]
 80079ea:	e794      	b.n	8007916 <_dtoa_r+0x40e>
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	4b4c      	ldr	r3, [pc, #304]	; (8007b20 <_dtoa_r+0x618>)
 80079f0:	4431      	add	r1, r6
 80079f2:	910d      	str	r1, [sp, #52]	; 0x34
 80079f4:	9908      	ldr	r1, [sp, #32]
 80079f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079fe:	2900      	cmp	r1, #0
 8007a00:	d043      	beq.n	8007a8a <_dtoa_r+0x582>
 8007a02:	494d      	ldr	r1, [pc, #308]	; (8007b38 <_dtoa_r+0x630>)
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7f8 ff29 	bl	800085c <__aeabi_ddiv>
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	f7f8 fc43 	bl	8000298 <__aeabi_dsub>
 8007a12:	9d01      	ldr	r5, [sp, #4]
 8007a14:	4682      	mov	sl, r0
 8007a16:	468b      	mov	fp, r1
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7f9 f8a4 	bl	8000b68 <__aeabi_d2iz>
 8007a20:	4606      	mov	r6, r0
 8007a22:	f7f8 fd87 	bl	8000534 <__aeabi_i2d>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fc33 	bl	8000298 <__aeabi_dsub>
 8007a32:	3630      	adds	r6, #48	; 0x30
 8007a34:	f805 6b01 	strb.w	r6, [r5], #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	4689      	mov	r9, r1
 8007a40:	f7f9 f854 	bl	8000aec <__aeabi_dcmplt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d163      	bne.n	8007b10 <_dtoa_r+0x608>
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	4936      	ldr	r1, [pc, #216]	; (8007b28 <_dtoa_r+0x620>)
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f7f8 fc22 	bl	8000298 <__aeabi_dsub>
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	f7f9 f848 	bl	8000aec <__aeabi_dcmplt>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f040 80b5 	bne.w	8007bcc <_dtoa_r+0x6c4>
 8007a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a64:	429d      	cmp	r5, r3
 8007a66:	d081      	beq.n	800796c <_dtoa_r+0x464>
 8007a68:	4b30      	ldr	r3, [pc, #192]	; (8007b2c <_dtoa_r+0x624>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	4659      	mov	r1, fp
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <_dtoa_r+0x624>)
 8007a76:	4682      	mov	sl, r0
 8007a78:	468b      	mov	fp, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f7f8 fdc2 	bl	8000608 <__aeabi_dmul>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	e7c6      	b.n	8007a18 <_dtoa_r+0x510>
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7f8 fdbb 	bl	8000608 <__aeabi_dmul>
 8007a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a94:	9d01      	ldr	r5, [sp, #4]
 8007a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a98:	4682      	mov	sl, r0
 8007a9a:	468b      	mov	fp, r1
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f7f9 f862 	bl	8000b68 <__aeabi_d2iz>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	f7f8 fd45 	bl	8000534 <__aeabi_i2d>
 8007aaa:	3630      	adds	r6, #48	; 0x30
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f8 fbf0 	bl	8000298 <__aeabi_dsub>
 8007ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8007abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	d124      	bne.n	8007b14 <_dtoa_r+0x60c>
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <_dtoa_r+0x630>)
 8007acc:	4650      	mov	r0, sl
 8007ace:	4659      	mov	r1, fp
 8007ad0:	f7f8 fbe4 	bl	800029c <__adddf3>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f9 f824 	bl	8000b28 <__aeabi_dcmpgt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d173      	bne.n	8007bcc <_dtoa_r+0x6c4>
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	4913      	ldr	r1, [pc, #76]	; (8007b38 <_dtoa_r+0x630>)
 8007aea:	2000      	movs	r0, #0
 8007aec:	f7f8 fbd4 	bl	8000298 <__aeabi_dsub>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fff8 	bl	8000aec <__aeabi_dcmplt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f43f af35 	beq.w	800796c <_dtoa_r+0x464>
 8007b02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b04:	1e6b      	subs	r3, r5, #1
 8007b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b0c:	2b30      	cmp	r3, #48	; 0x30
 8007b0e:	d0f8      	beq.n	8007b02 <_dtoa_r+0x5fa>
 8007b10:	9700      	str	r7, [sp, #0]
 8007b12:	e049      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007b14:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <_dtoa_r+0x624>)
 8007b16:	f7f8 fd77 	bl	8000608 <__aeabi_dmul>
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	e7bd      	b.n	8007a9c <_dtoa_r+0x594>
 8007b20:	0800bc60 	.word	0x0800bc60
 8007b24:	0800bc38 	.word	0x0800bc38
 8007b28:	3ff00000 	.word	0x3ff00000
 8007b2c:	40240000 	.word	0x40240000
 8007b30:	401c0000 	.word	0x401c0000
 8007b34:	40140000 	.word	0x40140000
 8007b38:	3fe00000 	.word	0x3fe00000
 8007b3c:	9d01      	ldr	r5, [sp, #4]
 8007b3e:	4656      	mov	r6, sl
 8007b40:	465f      	mov	r7, fp
 8007b42:	4642      	mov	r2, r8
 8007b44:	464b      	mov	r3, r9
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fe87 	bl	800085c <__aeabi_ddiv>
 8007b4e:	f7f9 f80b 	bl	8000b68 <__aeabi_d2iz>
 8007b52:	4682      	mov	sl, r0
 8007b54:	f7f8 fcee 	bl	8000534 <__aeabi_i2d>
 8007b58:	4642      	mov	r2, r8
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	f7f8 fd54 	bl	8000608 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4630      	mov	r0, r6
 8007b66:	4639      	mov	r1, r7
 8007b68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b6c:	f7f8 fb94 	bl	8000298 <__aeabi_dsub>
 8007b70:	f805 6b01 	strb.w	r6, [r5], #1
 8007b74:	9e01      	ldr	r6, [sp, #4]
 8007b76:	9f03      	ldr	r7, [sp, #12]
 8007b78:	1bae      	subs	r6, r5, r6
 8007b7a:	42b7      	cmp	r7, r6
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	d135      	bne.n	8007bee <_dtoa_r+0x6e6>
 8007b82:	f7f8 fb8b 	bl	800029c <__adddf3>
 8007b86:	4642      	mov	r2, r8
 8007b88:	464b      	mov	r3, r9
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	f7f8 ffcb 	bl	8000b28 <__aeabi_dcmpgt>
 8007b92:	b9d0      	cbnz	r0, 8007bca <_dtoa_r+0x6c2>
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	4630      	mov	r0, r6
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	f7f8 ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ba0:	b110      	cbz	r0, 8007ba8 <_dtoa_r+0x6a0>
 8007ba2:	f01a 0f01 	tst.w	sl, #1
 8007ba6:	d110      	bne.n	8007bca <_dtoa_r+0x6c2>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	ee18 1a10 	vmov	r1, s16
 8007bae:	f000 fb09 	bl	80081c4 <_Bfree>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9800      	ldr	r0, [sp, #0]
 8007bb6:	702b      	strb	r3, [r5, #0]
 8007bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bba:	3001      	adds	r0, #1
 8007bbc:	6018      	str	r0, [r3, #0]
 8007bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f43f acf1 	beq.w	80075a8 <_dtoa_r+0xa0>
 8007bc6:	601d      	str	r5, [r3, #0]
 8007bc8:	e4ee      	b.n	80075a8 <_dtoa_r+0xa0>
 8007bca:	9f00      	ldr	r7, [sp, #0]
 8007bcc:	462b      	mov	r3, r5
 8007bce:	461d      	mov	r5, r3
 8007bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bd4:	2a39      	cmp	r2, #57	; 0x39
 8007bd6:	d106      	bne.n	8007be6 <_dtoa_r+0x6de>
 8007bd8:	9a01      	ldr	r2, [sp, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d1f7      	bne.n	8007bce <_dtoa_r+0x6c6>
 8007bde:	9901      	ldr	r1, [sp, #4]
 8007be0:	2230      	movs	r2, #48	; 0x30
 8007be2:	3701      	adds	r7, #1
 8007be4:	700a      	strb	r2, [r1, #0]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	3201      	adds	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e790      	b.n	8007b10 <_dtoa_r+0x608>
 8007bee:	4ba6      	ldr	r3, [pc, #664]	; (8007e88 <_dtoa_r+0x980>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f7f8 fd09 	bl	8000608 <__aeabi_dmul>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	f7f8 ff6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d09d      	beq.n	8007b42 <_dtoa_r+0x63a>
 8007c06:	e7cf      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007c08:	9a08      	ldr	r2, [sp, #32]
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	f000 80d7 	beq.w	8007dbe <_dtoa_r+0x8b6>
 8007c10:	9a06      	ldr	r2, [sp, #24]
 8007c12:	2a01      	cmp	r2, #1
 8007c14:	f300 80ba 	bgt.w	8007d8c <_dtoa_r+0x884>
 8007c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	f000 80b2 	beq.w	8007d84 <_dtoa_r+0x87c>
 8007c20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c24:	9e07      	ldr	r6, [sp, #28]
 8007c26:	9d04      	ldr	r5, [sp, #16]
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	441a      	add	r2, r3
 8007c2c:	9204      	str	r2, [sp, #16]
 8007c2e:	9a05      	ldr	r2, [sp, #20]
 8007c30:	2101      	movs	r1, #1
 8007c32:	441a      	add	r2, r3
 8007c34:	4620      	mov	r0, r4
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	f000 fb7c 	bl	8008334 <__i2b>
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	dd0c      	ble.n	8007c5c <_dtoa_r+0x754>
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dd09      	ble.n	8007c5c <_dtoa_r+0x754>
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	9a04      	ldr	r2, [sp, #16]
 8007c4c:	bfa8      	it	ge
 8007c4e:	462b      	movge	r3, r5
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	9204      	str	r2, [sp, #16]
 8007c54:	9a05      	ldr	r2, [sp, #20]
 8007c56:	1aed      	subs	r5, r5, r3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	9305      	str	r3, [sp, #20]
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	b31b      	cbz	r3, 8007ca8 <_dtoa_r+0x7a0>
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80af 	beq.w	8007dc6 <_dtoa_r+0x8be>
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	dd13      	ble.n	8007c94 <_dtoa_r+0x78c>
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fc1f 	bl	80084b4 <__pow5mult>
 8007c76:	ee18 2a10 	vmov	r2, s16
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fb6e 	bl	8008360 <__multiply>
 8007c84:	ee18 1a10 	vmov	r1, s16
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fa9a 	bl	80081c4 <_Bfree>
 8007c90:	ee08 8a10 	vmov	s16, r8
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	1b9a      	subs	r2, r3, r6
 8007c98:	d006      	beq.n	8007ca8 <_dtoa_r+0x7a0>
 8007c9a:	ee18 1a10 	vmov	r1, s16
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 fc08 	bl	80084b4 <__pow5mult>
 8007ca4:	ee08 0a10 	vmov	s16, r0
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fb42 	bl	8008334 <__i2b>
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	f340 8088 	ble.w	8007dca <_dtoa_r+0x8c2>
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fbf8 	bl	80084b4 <__pow5mult>
 8007cc4:	9b06      	ldr	r3, [sp, #24]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	4606      	mov	r6, r0
 8007cca:	f340 8081 	ble.w	8007dd0 <_dtoa_r+0x8c8>
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	6933      	ldr	r3, [r6, #16]
 8007cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cd8:	6918      	ldr	r0, [r3, #16]
 8007cda:	f000 fadb 	bl	8008294 <__hi0bits>
 8007cde:	f1c0 0020 	rsb	r0, r0, #32
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	4418      	add	r0, r3
 8007ce6:	f010 001f 	ands.w	r0, r0, #31
 8007cea:	f000 8092 	beq.w	8007e12 <_dtoa_r+0x90a>
 8007cee:	f1c0 0320 	rsb	r3, r0, #32
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	f340 808a 	ble.w	8007e0c <_dtoa_r+0x904>
 8007cf8:	f1c0 001c 	rsb	r0, r0, #28
 8007cfc:	9b04      	ldr	r3, [sp, #16]
 8007cfe:	4403      	add	r3, r0
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	4403      	add	r3, r0
 8007d06:	4405      	add	r5, r0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd07      	ble.n	8007d20 <_dtoa_r+0x818>
 8007d10:	ee18 1a10 	vmov	r1, s16
 8007d14:	461a      	mov	r2, r3
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fc26 	bl	8008568 <__lshift>
 8007d1c:	ee08 0a10 	vmov	s16, r0
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd05      	ble.n	8007d32 <_dtoa_r+0x82a>
 8007d26:	4631      	mov	r1, r6
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fc1c 	bl	8008568 <__lshift>
 8007d30:	4606      	mov	r6, r0
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d06e      	beq.n	8007e16 <_dtoa_r+0x90e>
 8007d38:	ee18 0a10 	vmov	r0, s16
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	f000 fc83 	bl	8008648 <__mcmp>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	da67      	bge.n	8007e16 <_dtoa_r+0x90e>
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	220a      	movs	r2, #10
 8007d52:	2300      	movs	r3, #0
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fa57 	bl	8008208 <__multadd>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	ee08 0a10 	vmov	s16, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 81b1 	beq.w	80080c8 <_dtoa_r+0xbc0>
 8007d66:	2300      	movs	r3, #0
 8007d68:	4639      	mov	r1, r7
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fa4b 	bl	8008208 <__multadd>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	4607      	mov	r7, r0
 8007d78:	f300 808e 	bgt.w	8007e98 <_dtoa_r+0x990>
 8007d7c:	9b06      	ldr	r3, [sp, #24]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	dc51      	bgt.n	8007e26 <_dtoa_r+0x91e>
 8007d82:	e089      	b.n	8007e98 <_dtoa_r+0x990>
 8007d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d8a:	e74b      	b.n	8007c24 <_dtoa_r+0x71c>
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	1e5e      	subs	r6, r3, #1
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	42b3      	cmp	r3, r6
 8007d94:	bfbf      	itttt	lt
 8007d96:	9b07      	ldrlt	r3, [sp, #28]
 8007d98:	9607      	strlt	r6, [sp, #28]
 8007d9a:	1af2      	sublt	r2, r6, r3
 8007d9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d9e:	bfb6      	itet	lt
 8007da0:	189b      	addlt	r3, r3, r2
 8007da2:	1b9e      	subge	r6, r3, r6
 8007da4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	bfb8      	it	lt
 8007daa:	2600      	movlt	r6, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfb7      	itett	lt
 8007db0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007db4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007db8:	1a9d      	sublt	r5, r3, r2
 8007dba:	2300      	movlt	r3, #0
 8007dbc:	e734      	b.n	8007c28 <_dtoa_r+0x720>
 8007dbe:	9e07      	ldr	r6, [sp, #28]
 8007dc0:	9d04      	ldr	r5, [sp, #16]
 8007dc2:	9f08      	ldr	r7, [sp, #32]
 8007dc4:	e73b      	b.n	8007c3e <_dtoa_r+0x736>
 8007dc6:	9a07      	ldr	r2, [sp, #28]
 8007dc8:	e767      	b.n	8007c9a <_dtoa_r+0x792>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	dc18      	bgt.n	8007e02 <_dtoa_r+0x8fa>
 8007dd0:	f1ba 0f00 	cmp.w	sl, #0
 8007dd4:	d115      	bne.n	8007e02 <_dtoa_r+0x8fa>
 8007dd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dda:	b993      	cbnz	r3, 8007e02 <_dtoa_r+0x8fa>
 8007ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007de0:	0d1b      	lsrs	r3, r3, #20
 8007de2:	051b      	lsls	r3, r3, #20
 8007de4:	b183      	cbz	r3, 8007e08 <_dtoa_r+0x900>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	3301      	adds	r3, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	9b05      	ldr	r3, [sp, #20]
 8007dee:	3301      	adds	r3, #1
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	f04f 0801 	mov.w	r8, #1
 8007df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f47f af6a 	bne.w	8007cd2 <_dtoa_r+0x7ca>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	e76f      	b.n	8007ce2 <_dtoa_r+0x7da>
 8007e02:	f04f 0800 	mov.w	r8, #0
 8007e06:	e7f6      	b.n	8007df6 <_dtoa_r+0x8ee>
 8007e08:	4698      	mov	r8, r3
 8007e0a:	e7f4      	b.n	8007df6 <_dtoa_r+0x8ee>
 8007e0c:	f43f af7d 	beq.w	8007d0a <_dtoa_r+0x802>
 8007e10:	4618      	mov	r0, r3
 8007e12:	301c      	adds	r0, #28
 8007e14:	e772      	b.n	8007cfc <_dtoa_r+0x7f4>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc37      	bgt.n	8007e8c <_dtoa_r+0x984>
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dd34      	ble.n	8007e8c <_dtoa_r+0x984>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	b96b      	cbnz	r3, 8007e46 <_dtoa_r+0x93e>
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f9ea 	bl	8008208 <__multadd>
 8007e34:	4601      	mov	r1, r0
 8007e36:	4606      	mov	r6, r0
 8007e38:	ee18 0a10 	vmov	r0, s16
 8007e3c:	f000 fc04 	bl	8008648 <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f73f adbb 	bgt.w	80079bc <_dtoa_r+0x4b4>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	9d01      	ldr	r5, [sp, #4]
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	4631      	mov	r1, r6
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f9b5 	bl	80081c4 <_Bfree>
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	f43f aea4 	beq.w	8007ba8 <_dtoa_r+0x6a0>
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d005      	beq.n	8007e72 <_dtoa_r+0x96a>
 8007e66:	45b8      	cmp	r8, r7
 8007e68:	d003      	beq.n	8007e72 <_dtoa_r+0x96a>
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 f9a9 	bl	80081c4 <_Bfree>
 8007e72:	4639      	mov	r1, r7
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 f9a5 	bl	80081c4 <_Bfree>
 8007e7a:	e695      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4637      	mov	r7, r6
 8007e80:	e7e1      	b.n	8007e46 <_dtoa_r+0x93e>
 8007e82:	9700      	str	r7, [sp, #0]
 8007e84:	4637      	mov	r7, r6
 8007e86:	e599      	b.n	80079bc <_dtoa_r+0x4b4>
 8007e88:	40240000 	.word	0x40240000
 8007e8c:	9b08      	ldr	r3, [sp, #32]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80ca 	beq.w	8008028 <_dtoa_r+0xb20>
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	dd05      	ble.n	8007ea8 <_dtoa_r+0x9a0>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fb61 	bl	8008568 <__lshift>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	d05b      	beq.n	8007f66 <_dtoa_r+0xa5e>
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 f947 	bl	8008144 <_Balloc>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <_dtoa_r+0x9be>
 8007eba:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <_dtoa_r+0xbd0>)
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ec2:	f7ff bb3b 	b.w	800753c <_dtoa_r+0x34>
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	3202      	adds	r2, #2
 8007eca:	0092      	lsls	r2, r2, #2
 8007ecc:	f107 010c 	add.w	r1, r7, #12
 8007ed0:	300c      	adds	r0, #12
 8007ed2:	f000 f91d 	bl	8008110 <memcpy>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fb44 	bl	8008568 <__lshift>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	f103 0901 	add.w	r9, r3, #1
 8007ee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eea:	4413      	add	r3, r2
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f00a 0301 	and.w	r3, sl, #1
 8007ef2:	46b8      	mov	r8, r7
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	4631      	mov	r1, r6
 8007efa:	ee18 0a10 	vmov	r0, s16
 8007efe:	f7ff fa75 	bl	80073ec <quorem>
 8007f02:	4641      	mov	r1, r8
 8007f04:	9002      	str	r0, [sp, #8]
 8007f06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f0a:	ee18 0a10 	vmov	r0, s16
 8007f0e:	f000 fb9b 	bl	8008648 <__mcmp>
 8007f12:	463a      	mov	r2, r7
 8007f14:	9003      	str	r0, [sp, #12]
 8007f16:	4631      	mov	r1, r6
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fbb1 	bl	8008680 <__mdiff>
 8007f1e:	68c2      	ldr	r2, [r0, #12]
 8007f20:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f24:	4605      	mov	r5, r0
 8007f26:	bb02      	cbnz	r2, 8007f6a <_dtoa_r+0xa62>
 8007f28:	4601      	mov	r1, r0
 8007f2a:	ee18 0a10 	vmov	r0, s16
 8007f2e:	f000 fb8b 	bl	8008648 <__mcmp>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4629      	mov	r1, r5
 8007f36:	4620      	mov	r0, r4
 8007f38:	9207      	str	r2, [sp, #28]
 8007f3a:	f000 f943 	bl	80081c4 <_Bfree>
 8007f3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f42:	ea43 0102 	orr.w	r1, r3, r2
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	464d      	mov	r5, r9
 8007f4c:	d10f      	bne.n	8007f6e <_dtoa_r+0xa66>
 8007f4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f52:	d02a      	beq.n	8007faa <_dtoa_r+0xaa2>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd02      	ble.n	8007f60 <_dtoa_r+0xa58>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f60:	f88b a000 	strb.w	sl, [fp]
 8007f64:	e775      	b.n	8007e52 <_dtoa_r+0x94a>
 8007f66:	4638      	mov	r0, r7
 8007f68:	e7ba      	b.n	8007ee0 <_dtoa_r+0x9d8>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e7e2      	b.n	8007f34 <_dtoa_r+0xa2c>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db04      	blt.n	8007f7e <_dtoa_r+0xa76>
 8007f74:	9906      	ldr	r1, [sp, #24]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	9904      	ldr	r1, [sp, #16]
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	d122      	bne.n	8007fc4 <_dtoa_r+0xabc>
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	ddee      	ble.n	8007f60 <_dtoa_r+0xa58>
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	2201      	movs	r2, #1
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 faed 	bl	8008568 <__lshift>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	ee08 0a10 	vmov	s16, r0
 8007f94:	f000 fb58 	bl	8008648 <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	dc03      	bgt.n	8007fa4 <_dtoa_r+0xa9c>
 8007f9c:	d1e0      	bne.n	8007f60 <_dtoa_r+0xa58>
 8007f9e:	f01a 0f01 	tst.w	sl, #1
 8007fa2:	d0dd      	beq.n	8007f60 <_dtoa_r+0xa58>
 8007fa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fa8:	d1d7      	bne.n	8007f5a <_dtoa_r+0xa52>
 8007faa:	2339      	movs	r3, #57	; 0x39
 8007fac:	f88b 3000 	strb.w	r3, [fp]
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fba:	2a39      	cmp	r2, #57	; 0x39
 8007fbc:	d071      	beq.n	80080a2 <_dtoa_r+0xb9a>
 8007fbe:	3201      	adds	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e746      	b.n	8007e52 <_dtoa_r+0x94a>
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	dd07      	ble.n	8007fd8 <_dtoa_r+0xad0>
 8007fc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fcc:	d0ed      	beq.n	8007faa <_dtoa_r+0xaa2>
 8007fce:	f10a 0301 	add.w	r3, sl, #1
 8007fd2:	f88b 3000 	strb.w	r3, [fp]
 8007fd6:	e73c      	b.n	8007e52 <_dtoa_r+0x94a>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007fde:	4599      	cmp	r9, r3
 8007fe0:	d047      	beq.n	8008072 <_dtoa_r+0xb6a>
 8007fe2:	ee18 1a10 	vmov	r1, s16
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f90c 	bl	8008208 <__multadd>
 8007ff0:	45b8      	cmp	r8, r7
 8007ff2:	ee08 0a10 	vmov	s16, r0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f04f 020a 	mov.w	r2, #10
 8007ffe:	4641      	mov	r1, r8
 8008000:	4620      	mov	r0, r4
 8008002:	d106      	bne.n	8008012 <_dtoa_r+0xb0a>
 8008004:	f000 f900 	bl	8008208 <__multadd>
 8008008:	4680      	mov	r8, r0
 800800a:	4607      	mov	r7, r0
 800800c:	f109 0901 	add.w	r9, r9, #1
 8008010:	e772      	b.n	8007ef8 <_dtoa_r+0x9f0>
 8008012:	f000 f8f9 	bl	8008208 <__multadd>
 8008016:	4639      	mov	r1, r7
 8008018:	4680      	mov	r8, r0
 800801a:	2300      	movs	r3, #0
 800801c:	220a      	movs	r2, #10
 800801e:	4620      	mov	r0, r4
 8008020:	f000 f8f2 	bl	8008208 <__multadd>
 8008024:	4607      	mov	r7, r0
 8008026:	e7f1      	b.n	800800c <_dtoa_r+0xb04>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	9d01      	ldr	r5, [sp, #4]
 800802e:	ee18 0a10 	vmov	r0, s16
 8008032:	4631      	mov	r1, r6
 8008034:	f7ff f9da 	bl	80073ec <quorem>
 8008038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	f805 ab01 	strb.w	sl, [r5], #1
 8008042:	1aea      	subs	r2, r5, r3
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	4293      	cmp	r3, r2
 8008048:	dd09      	ble.n	800805e <_dtoa_r+0xb56>
 800804a:	ee18 1a10 	vmov	r1, s16
 800804e:	2300      	movs	r3, #0
 8008050:	220a      	movs	r2, #10
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f8d8 	bl	8008208 <__multadd>
 8008058:	ee08 0a10 	vmov	s16, r0
 800805c:	e7e7      	b.n	800802e <_dtoa_r+0xb26>
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfc8      	it	gt
 8008064:	461d      	movgt	r5, r3
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	bfd8      	it	le
 800806a:	2501      	movle	r5, #1
 800806c:	441d      	add	r5, r3
 800806e:	f04f 0800 	mov.w	r8, #0
 8008072:	ee18 1a10 	vmov	r1, s16
 8008076:	2201      	movs	r2, #1
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fa75 	bl	8008568 <__lshift>
 800807e:	4631      	mov	r1, r6
 8008080:	ee08 0a10 	vmov	s16, r0
 8008084:	f000 fae0 	bl	8008648 <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	dc91      	bgt.n	8007fb0 <_dtoa_r+0xaa8>
 800808c:	d102      	bne.n	8008094 <_dtoa_r+0xb8c>
 800808e:	f01a 0f01 	tst.w	sl, #1
 8008092:	d18d      	bne.n	8007fb0 <_dtoa_r+0xaa8>
 8008094:	462b      	mov	r3, r5
 8008096:	461d      	mov	r5, r3
 8008098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809c:	2a30      	cmp	r2, #48	; 0x30
 800809e:	d0fa      	beq.n	8008096 <_dtoa_r+0xb8e>
 80080a0:	e6d7      	b.n	8007e52 <_dtoa_r+0x94a>
 80080a2:	9a01      	ldr	r2, [sp, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d184      	bne.n	8007fb2 <_dtoa_r+0xaaa>
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2331      	movs	r3, #49	; 0x31
 80080b0:	7013      	strb	r3, [r2, #0]
 80080b2:	e6ce      	b.n	8007e52 <_dtoa_r+0x94a>
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <_dtoa_r+0xbd4>)
 80080b6:	f7ff ba95 	b.w	80075e4 <_dtoa_r+0xdc>
 80080ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f47f aa6e 	bne.w	800759e <_dtoa_r+0x96>
 80080c2:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <_dtoa_r+0xbd8>)
 80080c4:	f7ff ba8e 	b.w	80075e4 <_dtoa_r+0xdc>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dcae      	bgt.n	800802c <_dtoa_r+0xb24>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	f73f aea8 	bgt.w	8007e26 <_dtoa_r+0x91e>
 80080d6:	e7a9      	b.n	800802c <_dtoa_r+0xb24>
 80080d8:	0800bbcb 	.word	0x0800bbcb
 80080dc:	0800bb28 	.word	0x0800bb28
 80080e0:	0800bb4c 	.word	0x0800bb4c

080080e4 <_localeconv_r>:
 80080e4:	4800      	ldr	r0, [pc, #0]	; (80080e8 <_localeconv_r+0x4>)
 80080e6:	4770      	bx	lr
 80080e8:	20000164 	.word	0x20000164

080080ec <_lseek_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	; (800810c <_lseek_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7fa f902 	bl	8002304 <_lseek>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_lseek_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_lseek_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200005e4 	.word	0x200005e4

08008110 <memcpy>:
 8008110:	440a      	add	r2, r1
 8008112:	4291      	cmp	r1, r2
 8008114:	f100 33ff 	add.w	r3, r0, #4294967295
 8008118:	d100      	bne.n	800811c <memcpy+0xc>
 800811a:	4770      	bx	lr
 800811c:	b510      	push	{r4, lr}
 800811e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008126:	4291      	cmp	r1, r2
 8008128:	d1f9      	bne.n	800811e <memcpy+0xe>
 800812a:	bd10      	pop	{r4, pc}

0800812c <__malloc_lock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_lock+0x8>)
 800812e:	f000 bef9 	b.w	8008f24 <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	200005e8 	.word	0x200005e8

08008138 <__malloc_unlock>:
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__malloc_unlock+0x8>)
 800813a:	f000 bef4 	b.w	8008f26 <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	200005e8 	.word	0x200005e8

08008144 <_Balloc>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	b976      	cbnz	r6, 800816c <_Balloc+0x28>
 800814e:	2010      	movs	r0, #16
 8008150:	f7fe fb5c 	bl	800680c <malloc>
 8008154:	4602      	mov	r2, r0
 8008156:	6260      	str	r0, [r4, #36]	; 0x24
 8008158:	b920      	cbnz	r0, 8008164 <_Balloc+0x20>
 800815a:	4b18      	ldr	r3, [pc, #96]	; (80081bc <_Balloc+0x78>)
 800815c:	4818      	ldr	r0, [pc, #96]	; (80081c0 <_Balloc+0x7c>)
 800815e:	2166      	movs	r1, #102	; 0x66
 8008160:	f000 fcf8 	bl	8008b54 <__assert_func>
 8008164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008168:	6006      	str	r6, [r0, #0]
 800816a:	60c6      	str	r6, [r0, #12]
 800816c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800816e:	68f3      	ldr	r3, [r6, #12]
 8008170:	b183      	cbz	r3, 8008194 <_Balloc+0x50>
 8008172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800817a:	b9b8      	cbnz	r0, 80081ac <_Balloc+0x68>
 800817c:	2101      	movs	r1, #1
 800817e:	fa01 f605 	lsl.w	r6, r1, r5
 8008182:	1d72      	adds	r2, r6, #5
 8008184:	0092      	lsls	r2, r2, #2
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fb60 	bl	800884c <_calloc_r>
 800818c:	b160      	cbz	r0, 80081a8 <_Balloc+0x64>
 800818e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008192:	e00e      	b.n	80081b2 <_Balloc+0x6e>
 8008194:	2221      	movs	r2, #33	; 0x21
 8008196:	2104      	movs	r1, #4
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fb57 	bl	800884c <_calloc_r>
 800819e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a0:	60f0      	str	r0, [r6, #12]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e4      	bne.n	8008172 <_Balloc+0x2e>
 80081a8:	2000      	movs	r0, #0
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	6802      	ldr	r2, [r0, #0]
 80081ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081b2:	2300      	movs	r3, #0
 80081b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081b8:	e7f7      	b.n	80081aa <_Balloc+0x66>
 80081ba:	bf00      	nop
 80081bc:	0800bb59 	.word	0x0800bb59
 80081c0:	0800bbdc 	.word	0x0800bbdc

080081c4 <_Bfree>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c8:	4605      	mov	r5, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	b976      	cbnz	r6, 80081ec <_Bfree+0x28>
 80081ce:	2010      	movs	r0, #16
 80081d0:	f7fe fb1c 	bl	800680c <malloc>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6268      	str	r0, [r5, #36]	; 0x24
 80081d8:	b920      	cbnz	r0, 80081e4 <_Bfree+0x20>
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <_Bfree+0x3c>)
 80081dc:	4809      	ldr	r0, [pc, #36]	; (8008204 <_Bfree+0x40>)
 80081de:	218a      	movs	r1, #138	; 0x8a
 80081e0:	f000 fcb8 	bl	8008b54 <__assert_func>
 80081e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e8:	6006      	str	r6, [r0, #0]
 80081ea:	60c6      	str	r6, [r0, #12]
 80081ec:	b13c      	cbz	r4, 80081fe <_Bfree+0x3a>
 80081ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081f0:	6862      	ldr	r2, [r4, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f8:	6021      	str	r1, [r4, #0]
 80081fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	0800bb59 	.word	0x0800bb59
 8008204:	0800bbdc 	.word	0x0800bbdc

08008208 <__multadd>:
 8008208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820c:	690d      	ldr	r5, [r1, #16]
 800820e:	4607      	mov	r7, r0
 8008210:	460c      	mov	r4, r1
 8008212:	461e      	mov	r6, r3
 8008214:	f101 0c14 	add.w	ip, r1, #20
 8008218:	2000      	movs	r0, #0
 800821a:	f8dc 3000 	ldr.w	r3, [ip]
 800821e:	b299      	uxth	r1, r3
 8008220:	fb02 6101 	mla	r1, r2, r1, r6
 8008224:	0c1e      	lsrs	r6, r3, #16
 8008226:	0c0b      	lsrs	r3, r1, #16
 8008228:	fb02 3306 	mla	r3, r2, r6, r3
 800822c:	b289      	uxth	r1, r1
 800822e:	3001      	adds	r0, #1
 8008230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008234:	4285      	cmp	r5, r0
 8008236:	f84c 1b04 	str.w	r1, [ip], #4
 800823a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823e:	dcec      	bgt.n	800821a <__multadd+0x12>
 8008240:	b30e      	cbz	r6, 8008286 <__multadd+0x7e>
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	42ab      	cmp	r3, r5
 8008246:	dc19      	bgt.n	800827c <__multadd+0x74>
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	4638      	mov	r0, r7
 800824c:	3101      	adds	r1, #1
 800824e:	f7ff ff79 	bl	8008144 <_Balloc>
 8008252:	4680      	mov	r8, r0
 8008254:	b928      	cbnz	r0, 8008262 <__multadd+0x5a>
 8008256:	4602      	mov	r2, r0
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <__multadd+0x84>)
 800825a:	480d      	ldr	r0, [pc, #52]	; (8008290 <__multadd+0x88>)
 800825c:	21b5      	movs	r1, #181	; 0xb5
 800825e:	f000 fc79 	bl	8008b54 <__assert_func>
 8008262:	6922      	ldr	r2, [r4, #16]
 8008264:	3202      	adds	r2, #2
 8008266:	f104 010c 	add.w	r1, r4, #12
 800826a:	0092      	lsls	r2, r2, #2
 800826c:	300c      	adds	r0, #12
 800826e:	f7ff ff4f 	bl	8008110 <memcpy>
 8008272:	4621      	mov	r1, r4
 8008274:	4638      	mov	r0, r7
 8008276:	f7ff ffa5 	bl	80081c4 <_Bfree>
 800827a:	4644      	mov	r4, r8
 800827c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008280:	3501      	adds	r5, #1
 8008282:	615e      	str	r6, [r3, #20]
 8008284:	6125      	str	r5, [r4, #16]
 8008286:	4620      	mov	r0, r4
 8008288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828c:	0800bbcb 	.word	0x0800bbcb
 8008290:	0800bbdc 	.word	0x0800bbdc

08008294 <__hi0bits>:
 8008294:	0c03      	lsrs	r3, r0, #16
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	b9d3      	cbnz	r3, 80082d0 <__hi0bits+0x3c>
 800829a:	0400      	lsls	r0, r0, #16
 800829c:	2310      	movs	r3, #16
 800829e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082a2:	bf04      	itt	eq
 80082a4:	0200      	lsleq	r0, r0, #8
 80082a6:	3308      	addeq	r3, #8
 80082a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082ac:	bf04      	itt	eq
 80082ae:	0100      	lsleq	r0, r0, #4
 80082b0:	3304      	addeq	r3, #4
 80082b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082b6:	bf04      	itt	eq
 80082b8:	0080      	lsleq	r0, r0, #2
 80082ba:	3302      	addeq	r3, #2
 80082bc:	2800      	cmp	r0, #0
 80082be:	db05      	blt.n	80082cc <__hi0bits+0x38>
 80082c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082c4:	f103 0301 	add.w	r3, r3, #1
 80082c8:	bf08      	it	eq
 80082ca:	2320      	moveq	r3, #32
 80082cc:	4618      	mov	r0, r3
 80082ce:	4770      	bx	lr
 80082d0:	2300      	movs	r3, #0
 80082d2:	e7e4      	b.n	800829e <__hi0bits+0xa>

080082d4 <__lo0bits>:
 80082d4:	6803      	ldr	r3, [r0, #0]
 80082d6:	f013 0207 	ands.w	r2, r3, #7
 80082da:	4601      	mov	r1, r0
 80082dc:	d00b      	beq.n	80082f6 <__lo0bits+0x22>
 80082de:	07da      	lsls	r2, r3, #31
 80082e0:	d423      	bmi.n	800832a <__lo0bits+0x56>
 80082e2:	0798      	lsls	r0, r3, #30
 80082e4:	bf49      	itett	mi
 80082e6:	085b      	lsrmi	r3, r3, #1
 80082e8:	089b      	lsrpl	r3, r3, #2
 80082ea:	2001      	movmi	r0, #1
 80082ec:	600b      	strmi	r3, [r1, #0]
 80082ee:	bf5c      	itt	pl
 80082f0:	600b      	strpl	r3, [r1, #0]
 80082f2:	2002      	movpl	r0, #2
 80082f4:	4770      	bx	lr
 80082f6:	b298      	uxth	r0, r3
 80082f8:	b9a8      	cbnz	r0, 8008326 <__lo0bits+0x52>
 80082fa:	0c1b      	lsrs	r3, r3, #16
 80082fc:	2010      	movs	r0, #16
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	b90a      	cbnz	r2, 8008306 <__lo0bits+0x32>
 8008302:	3008      	adds	r0, #8
 8008304:	0a1b      	lsrs	r3, r3, #8
 8008306:	071a      	lsls	r2, r3, #28
 8008308:	bf04      	itt	eq
 800830a:	091b      	lsreq	r3, r3, #4
 800830c:	3004      	addeq	r0, #4
 800830e:	079a      	lsls	r2, r3, #30
 8008310:	bf04      	itt	eq
 8008312:	089b      	lsreq	r3, r3, #2
 8008314:	3002      	addeq	r0, #2
 8008316:	07da      	lsls	r2, r3, #31
 8008318:	d403      	bmi.n	8008322 <__lo0bits+0x4e>
 800831a:	085b      	lsrs	r3, r3, #1
 800831c:	f100 0001 	add.w	r0, r0, #1
 8008320:	d005      	beq.n	800832e <__lo0bits+0x5a>
 8008322:	600b      	str	r3, [r1, #0]
 8008324:	4770      	bx	lr
 8008326:	4610      	mov	r0, r2
 8008328:	e7e9      	b.n	80082fe <__lo0bits+0x2a>
 800832a:	2000      	movs	r0, #0
 800832c:	4770      	bx	lr
 800832e:	2020      	movs	r0, #32
 8008330:	4770      	bx	lr
	...

08008334 <__i2b>:
 8008334:	b510      	push	{r4, lr}
 8008336:	460c      	mov	r4, r1
 8008338:	2101      	movs	r1, #1
 800833a:	f7ff ff03 	bl	8008144 <_Balloc>
 800833e:	4602      	mov	r2, r0
 8008340:	b928      	cbnz	r0, 800834e <__i2b+0x1a>
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <__i2b+0x24>)
 8008344:	4805      	ldr	r0, [pc, #20]	; (800835c <__i2b+0x28>)
 8008346:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800834a:	f000 fc03 	bl	8008b54 <__assert_func>
 800834e:	2301      	movs	r3, #1
 8008350:	6144      	str	r4, [r0, #20]
 8008352:	6103      	str	r3, [r0, #16]
 8008354:	bd10      	pop	{r4, pc}
 8008356:	bf00      	nop
 8008358:	0800bbcb 	.word	0x0800bbcb
 800835c:	0800bbdc 	.word	0x0800bbdc

08008360 <__multiply>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4691      	mov	r9, r2
 8008366:	690a      	ldr	r2, [r1, #16]
 8008368:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	bfb8      	it	lt
 8008370:	460b      	movlt	r3, r1
 8008372:	460c      	mov	r4, r1
 8008374:	bfbc      	itt	lt
 8008376:	464c      	movlt	r4, r9
 8008378:	4699      	movlt	r9, r3
 800837a:	6927      	ldr	r7, [r4, #16]
 800837c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	6861      	ldr	r1, [r4, #4]
 8008384:	eb07 060a 	add.w	r6, r7, sl
 8008388:	42b3      	cmp	r3, r6
 800838a:	b085      	sub	sp, #20
 800838c:	bfb8      	it	lt
 800838e:	3101      	addlt	r1, #1
 8008390:	f7ff fed8 	bl	8008144 <_Balloc>
 8008394:	b930      	cbnz	r0, 80083a4 <__multiply+0x44>
 8008396:	4602      	mov	r2, r0
 8008398:	4b44      	ldr	r3, [pc, #272]	; (80084ac <__multiply+0x14c>)
 800839a:	4845      	ldr	r0, [pc, #276]	; (80084b0 <__multiply+0x150>)
 800839c:	f240 115d 	movw	r1, #349	; 0x15d
 80083a0:	f000 fbd8 	bl	8008b54 <__assert_func>
 80083a4:	f100 0514 	add.w	r5, r0, #20
 80083a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083ac:	462b      	mov	r3, r5
 80083ae:	2200      	movs	r2, #0
 80083b0:	4543      	cmp	r3, r8
 80083b2:	d321      	bcc.n	80083f8 <__multiply+0x98>
 80083b4:	f104 0314 	add.w	r3, r4, #20
 80083b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083bc:	f109 0314 	add.w	r3, r9, #20
 80083c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083c4:	9202      	str	r2, [sp, #8]
 80083c6:	1b3a      	subs	r2, r7, r4
 80083c8:	3a15      	subs	r2, #21
 80083ca:	f022 0203 	bic.w	r2, r2, #3
 80083ce:	3204      	adds	r2, #4
 80083d0:	f104 0115 	add.w	r1, r4, #21
 80083d4:	428f      	cmp	r7, r1
 80083d6:	bf38      	it	cc
 80083d8:	2204      	movcc	r2, #4
 80083da:	9201      	str	r2, [sp, #4]
 80083dc:	9a02      	ldr	r2, [sp, #8]
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d80c      	bhi.n	80083fe <__multiply+0x9e>
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	dd03      	ble.n	80083f0 <__multiply+0x90>
 80083e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05a      	beq.n	80084a6 <__multiply+0x146>
 80083f0:	6106      	str	r6, [r0, #16]
 80083f2:	b005      	add	sp, #20
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	f843 2b04 	str.w	r2, [r3], #4
 80083fc:	e7d8      	b.n	80083b0 <__multiply+0x50>
 80083fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8008402:	f1ba 0f00 	cmp.w	sl, #0
 8008406:	d024      	beq.n	8008452 <__multiply+0xf2>
 8008408:	f104 0e14 	add.w	lr, r4, #20
 800840c:	46a9      	mov	r9, r5
 800840e:	f04f 0c00 	mov.w	ip, #0
 8008412:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008416:	f8d9 1000 	ldr.w	r1, [r9]
 800841a:	fa1f fb82 	uxth.w	fp, r2
 800841e:	b289      	uxth	r1, r1
 8008420:	fb0a 110b 	mla	r1, sl, fp, r1
 8008424:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008428:	f8d9 2000 	ldr.w	r2, [r9]
 800842c:	4461      	add	r1, ip
 800842e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008432:	fb0a c20b 	mla	r2, sl, fp, ip
 8008436:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800843a:	b289      	uxth	r1, r1
 800843c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008440:	4577      	cmp	r7, lr
 8008442:	f849 1b04 	str.w	r1, [r9], #4
 8008446:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800844a:	d8e2      	bhi.n	8008412 <__multiply+0xb2>
 800844c:	9a01      	ldr	r2, [sp, #4]
 800844e:	f845 c002 	str.w	ip, [r5, r2]
 8008452:	9a03      	ldr	r2, [sp, #12]
 8008454:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008458:	3304      	adds	r3, #4
 800845a:	f1b9 0f00 	cmp.w	r9, #0
 800845e:	d020      	beq.n	80084a2 <__multiply+0x142>
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	f104 0c14 	add.w	ip, r4, #20
 8008466:	46ae      	mov	lr, r5
 8008468:	f04f 0a00 	mov.w	sl, #0
 800846c:	f8bc b000 	ldrh.w	fp, [ip]
 8008470:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008474:	fb09 220b 	mla	r2, r9, fp, r2
 8008478:	4492      	add	sl, r2
 800847a:	b289      	uxth	r1, r1
 800847c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008480:	f84e 1b04 	str.w	r1, [lr], #4
 8008484:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008488:	f8be 1000 	ldrh.w	r1, [lr]
 800848c:	0c12      	lsrs	r2, r2, #16
 800848e:	fb09 1102 	mla	r1, r9, r2, r1
 8008492:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008496:	4567      	cmp	r7, ip
 8008498:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800849c:	d8e6      	bhi.n	800846c <__multiply+0x10c>
 800849e:	9a01      	ldr	r2, [sp, #4]
 80084a0:	50a9      	str	r1, [r5, r2]
 80084a2:	3504      	adds	r5, #4
 80084a4:	e79a      	b.n	80083dc <__multiply+0x7c>
 80084a6:	3e01      	subs	r6, #1
 80084a8:	e79c      	b.n	80083e4 <__multiply+0x84>
 80084aa:	bf00      	nop
 80084ac:	0800bbcb 	.word	0x0800bbcb
 80084b0:	0800bbdc 	.word	0x0800bbdc

080084b4 <__pow5mult>:
 80084b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b8:	4615      	mov	r5, r2
 80084ba:	f012 0203 	ands.w	r2, r2, #3
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	d007      	beq.n	80084d4 <__pow5mult+0x20>
 80084c4:	4c25      	ldr	r4, [pc, #148]	; (800855c <__pow5mult+0xa8>)
 80084c6:	3a01      	subs	r2, #1
 80084c8:	2300      	movs	r3, #0
 80084ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ce:	f7ff fe9b 	bl	8008208 <__multadd>
 80084d2:	4607      	mov	r7, r0
 80084d4:	10ad      	asrs	r5, r5, #2
 80084d6:	d03d      	beq.n	8008554 <__pow5mult+0xa0>
 80084d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084da:	b97c      	cbnz	r4, 80084fc <__pow5mult+0x48>
 80084dc:	2010      	movs	r0, #16
 80084de:	f7fe f995 	bl	800680c <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6270      	str	r0, [r6, #36]	; 0x24
 80084e6:	b928      	cbnz	r0, 80084f4 <__pow5mult+0x40>
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <__pow5mult+0xac>)
 80084ea:	481e      	ldr	r0, [pc, #120]	; (8008564 <__pow5mult+0xb0>)
 80084ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084f0:	f000 fb30 	bl	8008b54 <__assert_func>
 80084f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f8:	6004      	str	r4, [r0, #0]
 80084fa:	60c4      	str	r4, [r0, #12]
 80084fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008504:	b94c      	cbnz	r4, 800851a <__pow5mult+0x66>
 8008506:	f240 2171 	movw	r1, #625	; 0x271
 800850a:	4630      	mov	r0, r6
 800850c:	f7ff ff12 	bl	8008334 <__i2b>
 8008510:	2300      	movs	r3, #0
 8008512:	f8c8 0008 	str.w	r0, [r8, #8]
 8008516:	4604      	mov	r4, r0
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	f04f 0900 	mov.w	r9, #0
 800851e:	07eb      	lsls	r3, r5, #31
 8008520:	d50a      	bpl.n	8008538 <__pow5mult+0x84>
 8008522:	4639      	mov	r1, r7
 8008524:	4622      	mov	r2, r4
 8008526:	4630      	mov	r0, r6
 8008528:	f7ff ff1a 	bl	8008360 <__multiply>
 800852c:	4639      	mov	r1, r7
 800852e:	4680      	mov	r8, r0
 8008530:	4630      	mov	r0, r6
 8008532:	f7ff fe47 	bl	80081c4 <_Bfree>
 8008536:	4647      	mov	r7, r8
 8008538:	106d      	asrs	r5, r5, #1
 800853a:	d00b      	beq.n	8008554 <__pow5mult+0xa0>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	b938      	cbnz	r0, 8008550 <__pow5mult+0x9c>
 8008540:	4622      	mov	r2, r4
 8008542:	4621      	mov	r1, r4
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff ff0b 	bl	8008360 <__multiply>
 800854a:	6020      	str	r0, [r4, #0]
 800854c:	f8c0 9000 	str.w	r9, [r0]
 8008550:	4604      	mov	r4, r0
 8008552:	e7e4      	b.n	800851e <__pow5mult+0x6a>
 8008554:	4638      	mov	r0, r7
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	bf00      	nop
 800855c:	0800bd28 	.word	0x0800bd28
 8008560:	0800bb59 	.word	0x0800bb59
 8008564:	0800bbdc 	.word	0x0800bbdc

08008568 <__lshift>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	460c      	mov	r4, r1
 800856e:	6849      	ldr	r1, [r1, #4]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008576:	68a3      	ldr	r3, [r4, #8]
 8008578:	4607      	mov	r7, r0
 800857a:	4691      	mov	r9, r2
 800857c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008580:	f108 0601 	add.w	r6, r8, #1
 8008584:	42b3      	cmp	r3, r6
 8008586:	db0b      	blt.n	80085a0 <__lshift+0x38>
 8008588:	4638      	mov	r0, r7
 800858a:	f7ff fddb 	bl	8008144 <_Balloc>
 800858e:	4605      	mov	r5, r0
 8008590:	b948      	cbnz	r0, 80085a6 <__lshift+0x3e>
 8008592:	4602      	mov	r2, r0
 8008594:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <__lshift+0xd8>)
 8008596:	482b      	ldr	r0, [pc, #172]	; (8008644 <__lshift+0xdc>)
 8008598:	f240 11d9 	movw	r1, #473	; 0x1d9
 800859c:	f000 fada 	bl	8008b54 <__assert_func>
 80085a0:	3101      	adds	r1, #1
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	e7ee      	b.n	8008584 <__lshift+0x1c>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f100 0114 	add.w	r1, r0, #20
 80085ac:	f100 0210 	add.w	r2, r0, #16
 80085b0:	4618      	mov	r0, r3
 80085b2:	4553      	cmp	r3, sl
 80085b4:	db37      	blt.n	8008626 <__lshift+0xbe>
 80085b6:	6920      	ldr	r0, [r4, #16]
 80085b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085bc:	f104 0314 	add.w	r3, r4, #20
 80085c0:	f019 091f 	ands.w	r9, r9, #31
 80085c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085cc:	d02f      	beq.n	800862e <__lshift+0xc6>
 80085ce:	f1c9 0e20 	rsb	lr, r9, #32
 80085d2:	468a      	mov	sl, r1
 80085d4:	f04f 0c00 	mov.w	ip, #0
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	fa02 f209 	lsl.w	r2, r2, r9
 80085de:	ea42 020c 	orr.w	r2, r2, ip
 80085e2:	f84a 2b04 	str.w	r2, [sl], #4
 80085e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ea:	4298      	cmp	r0, r3
 80085ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085f0:	d8f2      	bhi.n	80085d8 <__lshift+0x70>
 80085f2:	1b03      	subs	r3, r0, r4
 80085f4:	3b15      	subs	r3, #21
 80085f6:	f023 0303 	bic.w	r3, r3, #3
 80085fa:	3304      	adds	r3, #4
 80085fc:	f104 0215 	add.w	r2, r4, #21
 8008600:	4290      	cmp	r0, r2
 8008602:	bf38      	it	cc
 8008604:	2304      	movcc	r3, #4
 8008606:	f841 c003 	str.w	ip, [r1, r3]
 800860a:	f1bc 0f00 	cmp.w	ip, #0
 800860e:	d001      	beq.n	8008614 <__lshift+0xac>
 8008610:	f108 0602 	add.w	r6, r8, #2
 8008614:	3e01      	subs	r6, #1
 8008616:	4638      	mov	r0, r7
 8008618:	612e      	str	r6, [r5, #16]
 800861a:	4621      	mov	r1, r4
 800861c:	f7ff fdd2 	bl	80081c4 <_Bfree>
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008626:	f842 0f04 	str.w	r0, [r2, #4]!
 800862a:	3301      	adds	r3, #1
 800862c:	e7c1      	b.n	80085b2 <__lshift+0x4a>
 800862e:	3904      	subs	r1, #4
 8008630:	f853 2b04 	ldr.w	r2, [r3], #4
 8008634:	f841 2f04 	str.w	r2, [r1, #4]!
 8008638:	4298      	cmp	r0, r3
 800863a:	d8f9      	bhi.n	8008630 <__lshift+0xc8>
 800863c:	e7ea      	b.n	8008614 <__lshift+0xac>
 800863e:	bf00      	nop
 8008640:	0800bbcb 	.word	0x0800bbcb
 8008644:	0800bbdc 	.word	0x0800bbdc

08008648 <__mcmp>:
 8008648:	b530      	push	{r4, r5, lr}
 800864a:	6902      	ldr	r2, [r0, #16]
 800864c:	690c      	ldr	r4, [r1, #16]
 800864e:	1b12      	subs	r2, r2, r4
 8008650:	d10e      	bne.n	8008670 <__mcmp+0x28>
 8008652:	f100 0314 	add.w	r3, r0, #20
 8008656:	3114      	adds	r1, #20
 8008658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800865c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008668:	42a5      	cmp	r5, r4
 800866a:	d003      	beq.n	8008674 <__mcmp+0x2c>
 800866c:	d305      	bcc.n	800867a <__mcmp+0x32>
 800866e:	2201      	movs	r2, #1
 8008670:	4610      	mov	r0, r2
 8008672:	bd30      	pop	{r4, r5, pc}
 8008674:	4283      	cmp	r3, r0
 8008676:	d3f3      	bcc.n	8008660 <__mcmp+0x18>
 8008678:	e7fa      	b.n	8008670 <__mcmp+0x28>
 800867a:	f04f 32ff 	mov.w	r2, #4294967295
 800867e:	e7f7      	b.n	8008670 <__mcmp+0x28>

08008680 <__mdiff>:
 8008680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	460c      	mov	r4, r1
 8008686:	4606      	mov	r6, r0
 8008688:	4611      	mov	r1, r2
 800868a:	4620      	mov	r0, r4
 800868c:	4690      	mov	r8, r2
 800868e:	f7ff ffdb 	bl	8008648 <__mcmp>
 8008692:	1e05      	subs	r5, r0, #0
 8008694:	d110      	bne.n	80086b8 <__mdiff+0x38>
 8008696:	4629      	mov	r1, r5
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fd53 	bl	8008144 <_Balloc>
 800869e:	b930      	cbnz	r0, 80086ae <__mdiff+0x2e>
 80086a0:	4b3a      	ldr	r3, [pc, #232]	; (800878c <__mdiff+0x10c>)
 80086a2:	4602      	mov	r2, r0
 80086a4:	f240 2132 	movw	r1, #562	; 0x232
 80086a8:	4839      	ldr	r0, [pc, #228]	; (8008790 <__mdiff+0x110>)
 80086aa:	f000 fa53 	bl	8008b54 <__assert_func>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	bfa4      	itt	ge
 80086ba:	4643      	movge	r3, r8
 80086bc:	46a0      	movge	r8, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c4:	bfa6      	itte	ge
 80086c6:	461c      	movge	r4, r3
 80086c8:	2500      	movge	r5, #0
 80086ca:	2501      	movlt	r5, #1
 80086cc:	f7ff fd3a 	bl	8008144 <_Balloc>
 80086d0:	b920      	cbnz	r0, 80086dc <__mdiff+0x5c>
 80086d2:	4b2e      	ldr	r3, [pc, #184]	; (800878c <__mdiff+0x10c>)
 80086d4:	4602      	mov	r2, r0
 80086d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086da:	e7e5      	b.n	80086a8 <__mdiff+0x28>
 80086dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086e0:	6926      	ldr	r6, [r4, #16]
 80086e2:	60c5      	str	r5, [r0, #12]
 80086e4:	f104 0914 	add.w	r9, r4, #20
 80086e8:	f108 0514 	add.w	r5, r8, #20
 80086ec:	f100 0e14 	add.w	lr, r0, #20
 80086f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086f8:	f108 0210 	add.w	r2, r8, #16
 80086fc:	46f2      	mov	sl, lr
 80086fe:	2100      	movs	r1, #0
 8008700:	f859 3b04 	ldr.w	r3, [r9], #4
 8008704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008708:	fa1f f883 	uxth.w	r8, r3
 800870c:	fa11 f18b 	uxtah	r1, r1, fp
 8008710:	0c1b      	lsrs	r3, r3, #16
 8008712:	eba1 0808 	sub.w	r8, r1, r8
 8008716:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800871a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800871e:	fa1f f888 	uxth.w	r8, r8
 8008722:	1419      	asrs	r1, r3, #16
 8008724:	454e      	cmp	r6, r9
 8008726:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800872a:	f84a 3b04 	str.w	r3, [sl], #4
 800872e:	d8e7      	bhi.n	8008700 <__mdiff+0x80>
 8008730:	1b33      	subs	r3, r6, r4
 8008732:	3b15      	subs	r3, #21
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	3304      	adds	r3, #4
 800873a:	3415      	adds	r4, #21
 800873c:	42a6      	cmp	r6, r4
 800873e:	bf38      	it	cc
 8008740:	2304      	movcc	r3, #4
 8008742:	441d      	add	r5, r3
 8008744:	4473      	add	r3, lr
 8008746:	469e      	mov	lr, r3
 8008748:	462e      	mov	r6, r5
 800874a:	4566      	cmp	r6, ip
 800874c:	d30e      	bcc.n	800876c <__mdiff+0xec>
 800874e:	f10c 0203 	add.w	r2, ip, #3
 8008752:	1b52      	subs	r2, r2, r5
 8008754:	f022 0203 	bic.w	r2, r2, #3
 8008758:	3d03      	subs	r5, #3
 800875a:	45ac      	cmp	ip, r5
 800875c:	bf38      	it	cc
 800875e:	2200      	movcc	r2, #0
 8008760:	441a      	add	r2, r3
 8008762:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008766:	b17b      	cbz	r3, 8008788 <__mdiff+0x108>
 8008768:	6107      	str	r7, [r0, #16]
 800876a:	e7a3      	b.n	80086b4 <__mdiff+0x34>
 800876c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008770:	fa11 f288 	uxtah	r2, r1, r8
 8008774:	1414      	asrs	r4, r2, #16
 8008776:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800877a:	b292      	uxth	r2, r2
 800877c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008780:	f84e 2b04 	str.w	r2, [lr], #4
 8008784:	1421      	asrs	r1, r4, #16
 8008786:	e7e0      	b.n	800874a <__mdiff+0xca>
 8008788:	3f01      	subs	r7, #1
 800878a:	e7ea      	b.n	8008762 <__mdiff+0xe2>
 800878c:	0800bbcb 	.word	0x0800bbcb
 8008790:	0800bbdc 	.word	0x0800bbdc

08008794 <__d2b>:
 8008794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008798:	4689      	mov	r9, r1
 800879a:	2101      	movs	r1, #1
 800879c:	ec57 6b10 	vmov	r6, r7, d0
 80087a0:	4690      	mov	r8, r2
 80087a2:	f7ff fccf 	bl	8008144 <_Balloc>
 80087a6:	4604      	mov	r4, r0
 80087a8:	b930      	cbnz	r0, 80087b8 <__d2b+0x24>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b25      	ldr	r3, [pc, #148]	; (8008844 <__d2b+0xb0>)
 80087ae:	4826      	ldr	r0, [pc, #152]	; (8008848 <__d2b+0xb4>)
 80087b0:	f240 310a 	movw	r1, #778	; 0x30a
 80087b4:	f000 f9ce 	bl	8008b54 <__assert_func>
 80087b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087c0:	bb35      	cbnz	r5, 8008810 <__d2b+0x7c>
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	d028      	beq.n	800881a <__d2b+0x86>
 80087c8:	4668      	mov	r0, sp
 80087ca:	9600      	str	r6, [sp, #0]
 80087cc:	f7ff fd82 	bl	80082d4 <__lo0bits>
 80087d0:	9900      	ldr	r1, [sp, #0]
 80087d2:	b300      	cbz	r0, 8008816 <__d2b+0x82>
 80087d4:	9a01      	ldr	r2, [sp, #4]
 80087d6:	f1c0 0320 	rsb	r3, r0, #32
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	430b      	orrs	r3, r1
 80087e0:	40c2      	lsrs	r2, r0
 80087e2:	6163      	str	r3, [r4, #20]
 80087e4:	9201      	str	r2, [sp, #4]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	61a3      	str	r3, [r4, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bf14      	ite	ne
 80087ee:	2202      	movne	r2, #2
 80087f0:	2201      	moveq	r2, #1
 80087f2:	6122      	str	r2, [r4, #16]
 80087f4:	b1d5      	cbz	r5, 800882c <__d2b+0x98>
 80087f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087fa:	4405      	add	r5, r0
 80087fc:	f8c9 5000 	str.w	r5, [r9]
 8008800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008804:	f8c8 0000 	str.w	r0, [r8]
 8008808:	4620      	mov	r0, r4
 800880a:	b003      	add	sp, #12
 800880c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008814:	e7d5      	b.n	80087c2 <__d2b+0x2e>
 8008816:	6161      	str	r1, [r4, #20]
 8008818:	e7e5      	b.n	80087e6 <__d2b+0x52>
 800881a:	a801      	add	r0, sp, #4
 800881c:	f7ff fd5a 	bl	80082d4 <__lo0bits>
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	6163      	str	r3, [r4, #20]
 8008824:	2201      	movs	r2, #1
 8008826:	6122      	str	r2, [r4, #16]
 8008828:	3020      	adds	r0, #32
 800882a:	e7e3      	b.n	80087f4 <__d2b+0x60>
 800882c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008834:	f8c9 0000 	str.w	r0, [r9]
 8008838:	6918      	ldr	r0, [r3, #16]
 800883a:	f7ff fd2b 	bl	8008294 <__hi0bits>
 800883e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008842:	e7df      	b.n	8008804 <__d2b+0x70>
 8008844:	0800bbcb 	.word	0x0800bbcb
 8008848:	0800bbdc 	.word	0x0800bbdc

0800884c <_calloc_r>:
 800884c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884e:	fba1 2402 	umull	r2, r4, r1, r2
 8008852:	b94c      	cbnz	r4, 8008868 <_calloc_r+0x1c>
 8008854:	4611      	mov	r1, r2
 8008856:	9201      	str	r2, [sp, #4]
 8008858:	f7fe f854 	bl	8006904 <_malloc_r>
 800885c:	9a01      	ldr	r2, [sp, #4]
 800885e:	4605      	mov	r5, r0
 8008860:	b930      	cbnz	r0, 8008870 <_calloc_r+0x24>
 8008862:	4628      	mov	r0, r5
 8008864:	b003      	add	sp, #12
 8008866:	bd30      	pop	{r4, r5, pc}
 8008868:	220c      	movs	r2, #12
 800886a:	6002      	str	r2, [r0, #0]
 800886c:	2500      	movs	r5, #0
 800886e:	e7f8      	b.n	8008862 <_calloc_r+0x16>
 8008870:	4621      	mov	r1, r4
 8008872:	f7fd ffd3 	bl	800681c <memset>
 8008876:	e7f4      	b.n	8008862 <_calloc_r+0x16>

08008878 <__ssputs_r>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	688e      	ldr	r6, [r1, #8]
 800887e:	429e      	cmp	r6, r3
 8008880:	4682      	mov	sl, r0
 8008882:	460c      	mov	r4, r1
 8008884:	4690      	mov	r8, r2
 8008886:	461f      	mov	r7, r3
 8008888:	d838      	bhi.n	80088fc <__ssputs_r+0x84>
 800888a:	898a      	ldrh	r2, [r1, #12]
 800888c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008890:	d032      	beq.n	80088f8 <__ssputs_r+0x80>
 8008892:	6825      	ldr	r5, [r4, #0]
 8008894:	6909      	ldr	r1, [r1, #16]
 8008896:	eba5 0901 	sub.w	r9, r5, r1
 800889a:	6965      	ldr	r5, [r4, #20]
 800889c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088a4:	3301      	adds	r3, #1
 80088a6:	444b      	add	r3, r9
 80088a8:	106d      	asrs	r5, r5, #1
 80088aa:	429d      	cmp	r5, r3
 80088ac:	bf38      	it	cc
 80088ae:	461d      	movcc	r5, r3
 80088b0:	0553      	lsls	r3, r2, #21
 80088b2:	d531      	bpl.n	8008918 <__ssputs_r+0xa0>
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7fe f825 	bl	8006904 <_malloc_r>
 80088ba:	4606      	mov	r6, r0
 80088bc:	b950      	cbnz	r0, 80088d4 <__ssputs_r+0x5c>
 80088be:	230c      	movs	r3, #12
 80088c0:	f8ca 3000 	str.w	r3, [sl]
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d4:	6921      	ldr	r1, [r4, #16]
 80088d6:	464a      	mov	r2, r9
 80088d8:	f7ff fc1a 	bl	8008110 <memcpy>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	6126      	str	r6, [r4, #16]
 80088ea:	6165      	str	r5, [r4, #20]
 80088ec:	444e      	add	r6, r9
 80088ee:	eba5 0509 	sub.w	r5, r5, r9
 80088f2:	6026      	str	r6, [r4, #0]
 80088f4:	60a5      	str	r5, [r4, #8]
 80088f6:	463e      	mov	r6, r7
 80088f8:	42be      	cmp	r6, r7
 80088fa:	d900      	bls.n	80088fe <__ssputs_r+0x86>
 80088fc:	463e      	mov	r6, r7
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	4632      	mov	r2, r6
 8008902:	4641      	mov	r1, r8
 8008904:	f000 fb22 	bl	8008f4c <memmove>
 8008908:	68a3      	ldr	r3, [r4, #8]
 800890a:	1b9b      	subs	r3, r3, r6
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	4433      	add	r3, r6
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	2000      	movs	r0, #0
 8008916:	e7db      	b.n	80088d0 <__ssputs_r+0x58>
 8008918:	462a      	mov	r2, r5
 800891a:	f000 fb31 	bl	8008f80 <_realloc_r>
 800891e:	4606      	mov	r6, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	d1e1      	bne.n	80088e8 <__ssputs_r+0x70>
 8008924:	6921      	ldr	r1, [r4, #16]
 8008926:	4650      	mov	r0, sl
 8008928:	f7fd ff80 	bl	800682c <_free_r>
 800892c:	e7c7      	b.n	80088be <__ssputs_r+0x46>
	...

08008930 <_svfiprintf_r>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	4698      	mov	r8, r3
 8008936:	898b      	ldrh	r3, [r1, #12]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	b09d      	sub	sp, #116	; 0x74
 800893c:	4607      	mov	r7, r0
 800893e:	460d      	mov	r5, r1
 8008940:	4614      	mov	r4, r2
 8008942:	d50e      	bpl.n	8008962 <_svfiprintf_r+0x32>
 8008944:	690b      	ldr	r3, [r1, #16]
 8008946:	b963      	cbnz	r3, 8008962 <_svfiprintf_r+0x32>
 8008948:	2140      	movs	r1, #64	; 0x40
 800894a:	f7fd ffdb 	bl	8006904 <_malloc_r>
 800894e:	6028      	str	r0, [r5, #0]
 8008950:	6128      	str	r0, [r5, #16]
 8008952:	b920      	cbnz	r0, 800895e <_svfiprintf_r+0x2e>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e0d1      	b.n	8008b02 <_svfiprintf_r+0x1d2>
 800895e:	2340      	movs	r3, #64	; 0x40
 8008960:	616b      	str	r3, [r5, #20]
 8008962:	2300      	movs	r3, #0
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	2320      	movs	r3, #32
 8008968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800896c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008970:	2330      	movs	r3, #48	; 0x30
 8008972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b1c <_svfiprintf_r+0x1ec>
 8008976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800897a:	f04f 0901 	mov.w	r9, #1
 800897e:	4623      	mov	r3, r4
 8008980:	469a      	mov	sl, r3
 8008982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008986:	b10a      	cbz	r2, 800898c <_svfiprintf_r+0x5c>
 8008988:	2a25      	cmp	r2, #37	; 0x25
 800898a:	d1f9      	bne.n	8008980 <_svfiprintf_r+0x50>
 800898c:	ebba 0b04 	subs.w	fp, sl, r4
 8008990:	d00b      	beq.n	80089aa <_svfiprintf_r+0x7a>
 8008992:	465b      	mov	r3, fp
 8008994:	4622      	mov	r2, r4
 8008996:	4629      	mov	r1, r5
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff ff6d 	bl	8008878 <__ssputs_r>
 800899e:	3001      	adds	r0, #1
 80089a0:	f000 80aa 	beq.w	8008af8 <_svfiprintf_r+0x1c8>
 80089a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a6:	445a      	add	r2, fp
 80089a8:	9209      	str	r2, [sp, #36]	; 0x24
 80089aa:	f89a 3000 	ldrb.w	r3, [sl]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80a2 	beq.w	8008af8 <_svfiprintf_r+0x1c8>
 80089b4:	2300      	movs	r3, #0
 80089b6:	f04f 32ff 	mov.w	r2, #4294967295
 80089ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089be:	f10a 0a01 	add.w	sl, sl, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	9307      	str	r3, [sp, #28]
 80089c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ca:	931a      	str	r3, [sp, #104]	; 0x68
 80089cc:	4654      	mov	r4, sl
 80089ce:	2205      	movs	r2, #5
 80089d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d4:	4851      	ldr	r0, [pc, #324]	; (8008b1c <_svfiprintf_r+0x1ec>)
 80089d6:	f7f7 fc0b 	bl	80001f0 <memchr>
 80089da:	9a04      	ldr	r2, [sp, #16]
 80089dc:	b9d8      	cbnz	r0, 8008a16 <_svfiprintf_r+0xe6>
 80089de:	06d0      	lsls	r0, r2, #27
 80089e0:	bf44      	itt	mi
 80089e2:	2320      	movmi	r3, #32
 80089e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e8:	0711      	lsls	r1, r2, #28
 80089ea:	bf44      	itt	mi
 80089ec:	232b      	movmi	r3, #43	; 0x2b
 80089ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f2:	f89a 3000 	ldrb.w	r3, [sl]
 80089f6:	2b2a      	cmp	r3, #42	; 0x2a
 80089f8:	d015      	beq.n	8008a26 <_svfiprintf_r+0xf6>
 80089fa:	9a07      	ldr	r2, [sp, #28]
 80089fc:	4654      	mov	r4, sl
 80089fe:	2000      	movs	r0, #0
 8008a00:	f04f 0c0a 	mov.w	ip, #10
 8008a04:	4621      	mov	r1, r4
 8008a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0a:	3b30      	subs	r3, #48	; 0x30
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	d94e      	bls.n	8008aae <_svfiprintf_r+0x17e>
 8008a10:	b1b0      	cbz	r0, 8008a40 <_svfiprintf_r+0x110>
 8008a12:	9207      	str	r2, [sp, #28]
 8008a14:	e014      	b.n	8008a40 <_svfiprintf_r+0x110>
 8008a16:	eba0 0308 	sub.w	r3, r0, r8
 8008a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	9304      	str	r3, [sp, #16]
 8008a22:	46a2      	mov	sl, r4
 8008a24:	e7d2      	b.n	80089cc <_svfiprintf_r+0x9c>
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	1d19      	adds	r1, r3, #4
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	9103      	str	r1, [sp, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bfbb      	ittet	lt
 8008a32:	425b      	neglt	r3, r3
 8008a34:	f042 0202 	orrlt.w	r2, r2, #2
 8008a38:	9307      	strge	r3, [sp, #28]
 8008a3a:	9307      	strlt	r3, [sp, #28]
 8008a3c:	bfb8      	it	lt
 8008a3e:	9204      	strlt	r2, [sp, #16]
 8008a40:	7823      	ldrb	r3, [r4, #0]
 8008a42:	2b2e      	cmp	r3, #46	; 0x2e
 8008a44:	d10c      	bne.n	8008a60 <_svfiprintf_r+0x130>
 8008a46:	7863      	ldrb	r3, [r4, #1]
 8008a48:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4a:	d135      	bne.n	8008ab8 <_svfiprintf_r+0x188>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	1d1a      	adds	r2, r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	9203      	str	r2, [sp, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	bfb8      	it	lt
 8008a58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a5c:	3402      	adds	r4, #2
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b2c <_svfiprintf_r+0x1fc>
 8008a64:	7821      	ldrb	r1, [r4, #0]
 8008a66:	2203      	movs	r2, #3
 8008a68:	4650      	mov	r0, sl
 8008a6a:	f7f7 fbc1 	bl	80001f0 <memchr>
 8008a6e:	b140      	cbz	r0, 8008a82 <_svfiprintf_r+0x152>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	eba0 000a 	sub.w	r0, r0, sl
 8008a76:	fa03 f000 	lsl.w	r0, r3, r0
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	4303      	orrs	r3, r0
 8008a7e:	3401      	adds	r4, #1
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a86:	4826      	ldr	r0, [pc, #152]	; (8008b20 <_svfiprintf_r+0x1f0>)
 8008a88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a8c:	2206      	movs	r2, #6
 8008a8e:	f7f7 fbaf 	bl	80001f0 <memchr>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d038      	beq.n	8008b08 <_svfiprintf_r+0x1d8>
 8008a96:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <_svfiprintf_r+0x1f4>)
 8008a98:	bb1b      	cbnz	r3, 8008ae2 <_svfiprintf_r+0x1b2>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	3307      	adds	r3, #7
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	9303      	str	r3, [sp, #12]
 8008aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa8:	4433      	add	r3, r6
 8008aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8008aac:	e767      	b.n	800897e <_svfiprintf_r+0x4e>
 8008aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	e7a5      	b.n	8008a04 <_svfiprintf_r+0xd4>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	3401      	adds	r4, #1
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f04f 0c0a 	mov.w	ip, #10
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aca:	3a30      	subs	r2, #48	; 0x30
 8008acc:	2a09      	cmp	r2, #9
 8008ace:	d903      	bls.n	8008ad8 <_svfiprintf_r+0x1a8>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0c5      	beq.n	8008a60 <_svfiprintf_r+0x130>
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	e7c3      	b.n	8008a60 <_svfiprintf_r+0x130>
 8008ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008adc:	4604      	mov	r4, r0
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e7f0      	b.n	8008ac4 <_svfiprintf_r+0x194>
 8008ae2:	ab03      	add	r3, sp, #12
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	462a      	mov	r2, r5
 8008ae8:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <_svfiprintf_r+0x1f8>)
 8008aea:	a904      	add	r1, sp, #16
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7fe f81d 	bl	8006b2c <_printf_float>
 8008af2:	1c42      	adds	r2, r0, #1
 8008af4:	4606      	mov	r6, r0
 8008af6:	d1d6      	bne.n	8008aa6 <_svfiprintf_r+0x176>
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	065b      	lsls	r3, r3, #25
 8008afc:	f53f af2c 	bmi.w	8008958 <_svfiprintf_r+0x28>
 8008b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b02:	b01d      	add	sp, #116	; 0x74
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <_svfiprintf_r+0x1f8>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	4638      	mov	r0, r7
 8008b14:	f7fe faae 	bl	8007074 <_printf_i>
 8008b18:	e7eb      	b.n	8008af2 <_svfiprintf_r+0x1c2>
 8008b1a:	bf00      	nop
 8008b1c:	0800bd34 	.word	0x0800bd34
 8008b20:	0800bd3e 	.word	0x0800bd3e
 8008b24:	08006b2d 	.word	0x08006b2d
 8008b28:	08008879 	.word	0x08008879
 8008b2c:	0800bd3a 	.word	0x0800bd3a

08008b30 <_read_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d07      	ldr	r5, [pc, #28]	; (8008b50 <_read_r+0x20>)
 8008b34:	4604      	mov	r4, r0
 8008b36:	4608      	mov	r0, r1
 8008b38:	4611      	mov	r1, r2
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	602a      	str	r2, [r5, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f7f9 fb80 	bl	8002244 <_read>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_read_r+0x1e>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_read_r+0x1e>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	200005e4 	.word	0x200005e4

08008b54 <__assert_func>:
 8008b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b56:	4614      	mov	r4, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <__assert_func+0x2c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4605      	mov	r5, r0
 8008b60:	68d8      	ldr	r0, [r3, #12]
 8008b62:	b14c      	cbz	r4, 8008b78 <__assert_func+0x24>
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <__assert_func+0x30>)
 8008b66:	9100      	str	r1, [sp, #0]
 8008b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b6c:	4906      	ldr	r1, [pc, #24]	; (8008b88 <__assert_func+0x34>)
 8008b6e:	462b      	mov	r3, r5
 8008b70:	f000 f9a6 	bl	8008ec0 <fiprintf>
 8008b74:	f000 fc5a 	bl	800942c <abort>
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <__assert_func+0x38>)
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	e7f3      	b.n	8008b66 <__assert_func+0x12>
 8008b7e:	bf00      	nop
 8008b80:	20000010 	.word	0x20000010
 8008b84:	0800bd45 	.word	0x0800bd45
 8008b88:	0800bd52 	.word	0x0800bd52
 8008b8c:	0800bd80 	.word	0x0800bd80

08008b90 <__sflush_r>:
 8008b90:	898a      	ldrh	r2, [r1, #12]
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	4605      	mov	r5, r0
 8008b98:	0710      	lsls	r0, r2, #28
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	d458      	bmi.n	8008c50 <__sflush_r+0xc0>
 8008b9e:	684b      	ldr	r3, [r1, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc05      	bgt.n	8008bb0 <__sflush_r+0x20>
 8008ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dc02      	bgt.n	8008bb0 <__sflush_r+0x20>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d0f9      	beq.n	8008baa <__sflush_r+0x1a>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bbc:	682f      	ldr	r7, [r5, #0]
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	d032      	beq.n	8008c28 <__sflush_r+0x98>
 8008bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	075a      	lsls	r2, r3, #29
 8008bc8:	d505      	bpl.n	8008bd6 <__sflush_r+0x46>
 8008bca:	6863      	ldr	r3, [r4, #4]
 8008bcc:	1ac0      	subs	r0, r0, r3
 8008bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bd0:	b10b      	cbz	r3, 8008bd6 <__sflush_r+0x46>
 8008bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bd4:	1ac0      	subs	r0, r0, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b0      	blx	r6
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	d106      	bne.n	8008bf6 <__sflush_r+0x66>
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	291d      	cmp	r1, #29
 8008bec:	d82c      	bhi.n	8008c48 <__sflush_r+0xb8>
 8008bee:	4a2a      	ldr	r2, [pc, #168]	; (8008c98 <__sflush_r+0x108>)
 8008bf0:	40ca      	lsrs	r2, r1
 8008bf2:	07d6      	lsls	r6, r2, #31
 8008bf4:	d528      	bpl.n	8008c48 <__sflush_r+0xb8>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6062      	str	r2, [r4, #4]
 8008bfa:	04d9      	lsls	r1, r3, #19
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	d504      	bpl.n	8008c0c <__sflush_r+0x7c>
 8008c02:	1c42      	adds	r2, r0, #1
 8008c04:	d101      	bne.n	8008c0a <__sflush_r+0x7a>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b903      	cbnz	r3, 8008c0c <__sflush_r+0x7c>
 8008c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d0ca      	beq.n	8008baa <__sflush_r+0x1a>
 8008c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__sflush_r+0x92>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7fd fe05 	bl	800682c <_free_r>
 8008c22:	2000      	movs	r0, #0
 8008c24:	6360      	str	r0, [r4, #52]	; 0x34
 8008c26:	e7c1      	b.n	8008bac <__sflush_r+0x1c>
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c41      	adds	r1, r0, #1
 8008c32:	d1c7      	bne.n	8008bc4 <__sflush_r+0x34>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0c4      	beq.n	8008bc4 <__sflush_r+0x34>
 8008c3a:	2b1d      	cmp	r3, #29
 8008c3c:	d001      	beq.n	8008c42 <__sflush_r+0xb2>
 8008c3e:	2b16      	cmp	r3, #22
 8008c40:	d101      	bne.n	8008c46 <__sflush_r+0xb6>
 8008c42:	602f      	str	r7, [r5, #0]
 8008c44:	e7b1      	b.n	8008baa <__sflush_r+0x1a>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	e7ad      	b.n	8008bac <__sflush_r+0x1c>
 8008c50:	690f      	ldr	r7, [r1, #16]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	d0a9      	beq.n	8008baa <__sflush_r+0x1a>
 8008c56:	0793      	lsls	r3, r2, #30
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	bf08      	it	eq
 8008c5c:	694b      	ldreq	r3, [r1, #20]
 8008c5e:	600f      	str	r7, [r1, #0]
 8008c60:	bf18      	it	ne
 8008c62:	2300      	movne	r3, #0
 8008c64:	eba6 0807 	sub.w	r8, r6, r7
 8008c68:	608b      	str	r3, [r1, #8]
 8008c6a:	f1b8 0f00 	cmp.w	r8, #0
 8008c6e:	dd9c      	ble.n	8008baa <__sflush_r+0x1a>
 8008c70:	6a21      	ldr	r1, [r4, #32]
 8008c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c74:	4643      	mov	r3, r8
 8008c76:	463a      	mov	r2, r7
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dc06      	bgt.n	8008c8e <__sflush_r+0xfe>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e78e      	b.n	8008bac <__sflush_r+0x1c>
 8008c8e:	4407      	add	r7, r0
 8008c90:	eba8 0800 	sub.w	r8, r8, r0
 8008c94:	e7e9      	b.n	8008c6a <__sflush_r+0xda>
 8008c96:	bf00      	nop
 8008c98:	20400001 	.word	0x20400001

08008c9c <_fflush_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	690b      	ldr	r3, [r1, #16]
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	b913      	cbnz	r3, 8008cac <_fflush_r+0x10>
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	4628      	mov	r0, r5
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	b118      	cbz	r0, 8008cb6 <_fflush_r+0x1a>
 8008cae:	6983      	ldr	r3, [r0, #24]
 8008cb0:	b90b      	cbnz	r3, 8008cb6 <_fflush_r+0x1a>
 8008cb2:	f000 f887 	bl	8008dc4 <__sinit>
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <_fflush_r+0x6c>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d11b      	bne.n	8008cf4 <_fflush_r+0x58>
 8008cbc:	686c      	ldr	r4, [r5, #4]
 8008cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0ef      	beq.n	8008ca6 <_fflush_r+0xa>
 8008cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cc8:	07d0      	lsls	r0, r2, #31
 8008cca:	d404      	bmi.n	8008cd6 <_fflush_r+0x3a>
 8008ccc:	0599      	lsls	r1, r3, #22
 8008cce:	d402      	bmi.n	8008cd6 <_fflush_r+0x3a>
 8008cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd2:	f000 f927 	bl	8008f24 <__retarget_lock_acquire_recursive>
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f7ff ff59 	bl	8008b90 <__sflush_r>
 8008cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce0:	07da      	lsls	r2, r3, #31
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	d4e0      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	059b      	lsls	r3, r3, #22
 8008cea:	d4dd      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cee:	f000 f91a 	bl	8008f26 <__retarget_lock_release_recursive>
 8008cf2:	e7d9      	b.n	8008ca8 <_fflush_r+0xc>
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <_fflush_r+0x70>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d101      	bne.n	8008cfe <_fflush_r+0x62>
 8008cfa:	68ac      	ldr	r4, [r5, #8]
 8008cfc:	e7df      	b.n	8008cbe <_fflush_r+0x22>
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <_fflush_r+0x74>)
 8008d00:	429c      	cmp	r4, r3
 8008d02:	bf08      	it	eq
 8008d04:	68ec      	ldreq	r4, [r5, #12]
 8008d06:	e7da      	b.n	8008cbe <_fflush_r+0x22>
 8008d08:	0800bea4 	.word	0x0800bea4
 8008d0c:	0800bec4 	.word	0x0800bec4
 8008d10:	0800be84 	.word	0x0800be84

08008d14 <std>:
 8008d14:	2300      	movs	r3, #0
 8008d16:	b510      	push	{r4, lr}
 8008d18:	4604      	mov	r4, r0
 8008d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d22:	6083      	str	r3, [r0, #8]
 8008d24:	8181      	strh	r1, [r0, #12]
 8008d26:	6643      	str	r3, [r0, #100]	; 0x64
 8008d28:	81c2      	strh	r2, [r0, #14]
 8008d2a:	6183      	str	r3, [r0, #24]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	2208      	movs	r2, #8
 8008d30:	305c      	adds	r0, #92	; 0x5c
 8008d32:	f7fd fd73 	bl	800681c <memset>
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <std+0x38>)
 8008d38:	6263      	str	r3, [r4, #36]	; 0x24
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <std+0x3c>)
 8008d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x40>)
 8008d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <std+0x44>)
 8008d44:	6224      	str	r4, [r4, #32]
 8008d46:	6323      	str	r3, [r4, #48]	; 0x30
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08007321 	.word	0x08007321
 8008d50:	08007343 	.word	0x08007343
 8008d54:	0800737b 	.word	0x0800737b
 8008d58:	0800739f 	.word	0x0800739f

08008d5c <_cleanup_r>:
 8008d5c:	4901      	ldr	r1, [pc, #4]	; (8008d64 <_cleanup_r+0x8>)
 8008d5e:	f000 b8c1 	b.w	8008ee4 <_fwalk_reent>
 8008d62:	bf00      	nop
 8008d64:	08008c9d 	.word	0x08008c9d

08008d68 <__sfmoreglue>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	2268      	movs	r2, #104	; 0x68
 8008d6c:	1e4d      	subs	r5, r1, #1
 8008d6e:	4355      	muls	r5, r2
 8008d70:	460e      	mov	r6, r1
 8008d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d76:	f7fd fdc5 	bl	8006904 <_malloc_r>
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	b140      	cbz	r0, 8008d90 <__sfmoreglue+0x28>
 8008d7e:	2100      	movs	r1, #0
 8008d80:	e9c0 1600 	strd	r1, r6, [r0]
 8008d84:	300c      	adds	r0, #12
 8008d86:	60a0      	str	r0, [r4, #8]
 8008d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d8c:	f7fd fd46 	bl	800681c <memset>
 8008d90:	4620      	mov	r0, r4
 8008d92:	bd70      	pop	{r4, r5, r6, pc}

08008d94 <__sfp_lock_acquire>:
 8008d94:	4801      	ldr	r0, [pc, #4]	; (8008d9c <__sfp_lock_acquire+0x8>)
 8008d96:	f000 b8c5 	b.w	8008f24 <__retarget_lock_acquire_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	200005e9 	.word	0x200005e9

08008da0 <__sfp_lock_release>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__sfp_lock_release+0x8>)
 8008da2:	f000 b8c0 	b.w	8008f26 <__retarget_lock_release_recursive>
 8008da6:	bf00      	nop
 8008da8:	200005e9 	.word	0x200005e9

08008dac <__sinit_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sinit_lock_acquire+0x8>)
 8008dae:	f000 b8b9 	b.w	8008f24 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	200005ea 	.word	0x200005ea

08008db8 <__sinit_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sinit_lock_release+0x8>)
 8008dba:	f000 b8b4 	b.w	8008f26 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	200005ea 	.word	0x200005ea

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sinit_lock_acquire>
 8008dcc:	69a3      	ldr	r3, [r4, #24]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sinit_lock_release>
 8008dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <__sinit+0x68>)
 8008de0:	4a13      	ldr	r2, [pc, #76]	; (8008e30 <__sinit+0x6c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	bf04      	itt	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	61a3      	streq	r3, [r4, #24]
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 f820 	bl	8008e34 <__sfp>
 8008df4:	6060      	str	r0, [r4, #4]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f81c 	bl	8008e34 <__sfp>
 8008dfc:	60a0      	str	r0, [r4, #8]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 f818 	bl	8008e34 <__sfp>
 8008e04:	2200      	movs	r2, #0
 8008e06:	60e0      	str	r0, [r4, #12]
 8008e08:	2104      	movs	r1, #4
 8008e0a:	6860      	ldr	r0, [r4, #4]
 8008e0c:	f7ff ff82 	bl	8008d14 <std>
 8008e10:	68a0      	ldr	r0, [r4, #8]
 8008e12:	2201      	movs	r2, #1
 8008e14:	2109      	movs	r1, #9
 8008e16:	f7ff ff7d 	bl	8008d14 <std>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	2112      	movs	r1, #18
 8008e20:	f7ff ff78 	bl	8008d14 <std>
 8008e24:	2301      	movs	r3, #1
 8008e26:	61a3      	str	r3, [r4, #24]
 8008e28:	e7d2      	b.n	8008dd0 <__sinit+0xc>
 8008e2a:	bf00      	nop
 8008e2c:	0800bb14 	.word	0x0800bb14
 8008e30:	08008d5d 	.word	0x08008d5d

08008e34 <__sfp>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	4607      	mov	r7, r0
 8008e38:	f7ff ffac 	bl	8008d94 <__sfp_lock_acquire>
 8008e3c:	4b1e      	ldr	r3, [pc, #120]	; (8008eb8 <__sfp+0x84>)
 8008e3e:	681e      	ldr	r6, [r3, #0]
 8008e40:	69b3      	ldr	r3, [r6, #24]
 8008e42:	b913      	cbnz	r3, 8008e4a <__sfp+0x16>
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7ff ffbd 	bl	8008dc4 <__sinit>
 8008e4a:	3648      	adds	r6, #72	; 0x48
 8008e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	d503      	bpl.n	8008e5c <__sfp+0x28>
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	b30b      	cbz	r3, 8008e9c <__sfp+0x68>
 8008e58:	6836      	ldr	r6, [r6, #0]
 8008e5a:	e7f7      	b.n	8008e4c <__sfp+0x18>
 8008e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e60:	b9d5      	cbnz	r5, 8008e98 <__sfp+0x64>
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <__sfp+0x88>)
 8008e64:	60e3      	str	r3, [r4, #12]
 8008e66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e6c:	f000 f859 	bl	8008f22 <__retarget_lock_init_recursive>
 8008e70:	f7ff ff96 	bl	8008da0 <__sfp_lock_release>
 8008e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e7c:	6025      	str	r5, [r4, #0]
 8008e7e:	61a5      	str	r5, [r4, #24]
 8008e80:	2208      	movs	r2, #8
 8008e82:	4629      	mov	r1, r5
 8008e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e88:	f7fd fcc8 	bl	800681c <memset>
 8008e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e94:	4620      	mov	r0, r4
 8008e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e98:	3468      	adds	r4, #104	; 0x68
 8008e9a:	e7d9      	b.n	8008e50 <__sfp+0x1c>
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7ff ff62 	bl	8008d68 <__sfmoreglue>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	6030      	str	r0, [r6, #0]
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d1d5      	bne.n	8008e58 <__sfp+0x24>
 8008eac:	f7ff ff78 	bl	8008da0 <__sfp_lock_release>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	e7ee      	b.n	8008e94 <__sfp+0x60>
 8008eb6:	bf00      	nop
 8008eb8:	0800bb14 	.word	0x0800bb14
 8008ebc:	ffff0001 	.word	0xffff0001

08008ec0 <fiprintf>:
 8008ec0:	b40e      	push	{r1, r2, r3}
 8008ec2:	b503      	push	{r0, r1, lr}
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <fiprintf+0x20>)
 8008eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ece:	6800      	ldr	r0, [r0, #0]
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	f000 f8ad 	bl	8009030 <_vfiprintf_r>
 8008ed6:	b002      	add	sp, #8
 8008ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008edc:	b003      	add	sp, #12
 8008ede:	4770      	bx	lr
 8008ee0:	20000010 	.word	0x20000010

08008ee4 <_fwalk_reent>:
 8008ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	4606      	mov	r6, r0
 8008eea:	4688      	mov	r8, r1
 8008eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ef0:	2700      	movs	r7, #0
 8008ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8008efa:	d505      	bpl.n	8008f08 <_fwalk_reent+0x24>
 8008efc:	6824      	ldr	r4, [r4, #0]
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d1f7      	bne.n	8008ef2 <_fwalk_reent+0xe>
 8008f02:	4638      	mov	r0, r7
 8008f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f08:	89ab      	ldrh	r3, [r5, #12]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d907      	bls.n	8008f1e <_fwalk_reent+0x3a>
 8008f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f12:	3301      	adds	r3, #1
 8008f14:	d003      	beq.n	8008f1e <_fwalk_reent+0x3a>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4630      	mov	r0, r6
 8008f1a:	47c0      	blx	r8
 8008f1c:	4307      	orrs	r7, r0
 8008f1e:	3568      	adds	r5, #104	; 0x68
 8008f20:	e7e9      	b.n	8008ef6 <_fwalk_reent+0x12>

08008f22 <__retarget_lock_init_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__retarget_lock_acquire_recursive>:
 8008f24:	4770      	bx	lr

08008f26 <__retarget_lock_release_recursive>:
 8008f26:	4770      	bx	lr

08008f28 <__ascii_mbtowc>:
 8008f28:	b082      	sub	sp, #8
 8008f2a:	b901      	cbnz	r1, 8008f2e <__ascii_mbtowc+0x6>
 8008f2c:	a901      	add	r1, sp, #4
 8008f2e:	b142      	cbz	r2, 8008f42 <__ascii_mbtowc+0x1a>
 8008f30:	b14b      	cbz	r3, 8008f46 <__ascii_mbtowc+0x1e>
 8008f32:	7813      	ldrb	r3, [r2, #0]
 8008f34:	600b      	str	r3, [r1, #0]
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	1e10      	subs	r0, r2, #0
 8008f3a:	bf18      	it	ne
 8008f3c:	2001      	movne	r0, #1
 8008f3e:	b002      	add	sp, #8
 8008f40:	4770      	bx	lr
 8008f42:	4610      	mov	r0, r2
 8008f44:	e7fb      	b.n	8008f3e <__ascii_mbtowc+0x16>
 8008f46:	f06f 0001 	mvn.w	r0, #1
 8008f4a:	e7f8      	b.n	8008f3e <__ascii_mbtowc+0x16>

08008f4c <memmove>:
 8008f4c:	4288      	cmp	r0, r1
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	eb01 0402 	add.w	r4, r1, r2
 8008f54:	d902      	bls.n	8008f5c <memmove+0x10>
 8008f56:	4284      	cmp	r4, r0
 8008f58:	4623      	mov	r3, r4
 8008f5a:	d807      	bhi.n	8008f6c <memmove+0x20>
 8008f5c:	1e43      	subs	r3, r0, #1
 8008f5e:	42a1      	cmp	r1, r4
 8008f60:	d008      	beq.n	8008f74 <memmove+0x28>
 8008f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f6a:	e7f8      	b.n	8008f5e <memmove+0x12>
 8008f6c:	4402      	add	r2, r0
 8008f6e:	4601      	mov	r1, r0
 8008f70:	428a      	cmp	r2, r1
 8008f72:	d100      	bne.n	8008f76 <memmove+0x2a>
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f7e:	e7f7      	b.n	8008f70 <memmove+0x24>

08008f80 <_realloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4680      	mov	r8, r0
 8008f86:	4614      	mov	r4, r2
 8008f88:	460e      	mov	r6, r1
 8008f8a:	b921      	cbnz	r1, 8008f96 <_realloc_r+0x16>
 8008f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4611      	mov	r1, r2
 8008f92:	f7fd bcb7 	b.w	8006904 <_malloc_r>
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_realloc_r+0x24>
 8008f98:	f7fd fc48 	bl	800682c <_free_r>
 8008f9c:	4625      	mov	r5, r4
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	f000 faae 	bl	8009504 <_malloc_usable_size_r>
 8008fa8:	4284      	cmp	r4, r0
 8008faa:	4607      	mov	r7, r0
 8008fac:	d802      	bhi.n	8008fb4 <_realloc_r+0x34>
 8008fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fb2:	d812      	bhi.n	8008fda <_realloc_r+0x5a>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7fd fca4 	bl	8006904 <_malloc_r>
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0ed      	beq.n	8008f9e <_realloc_r+0x1e>
 8008fc2:	42bc      	cmp	r4, r7
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	bf28      	it	cs
 8008fca:	463a      	movcs	r2, r7
 8008fcc:	f7ff f8a0 	bl	8008110 <memcpy>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7fd fc2a 	bl	800682c <_free_r>
 8008fd8:	e7e1      	b.n	8008f9e <_realloc_r+0x1e>
 8008fda:	4635      	mov	r5, r6
 8008fdc:	e7df      	b.n	8008f9e <_realloc_r+0x1e>

08008fde <__sfputc_r>:
 8008fde:	6893      	ldr	r3, [r2, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	b410      	push	{r4}
 8008fe6:	6093      	str	r3, [r2, #8]
 8008fe8:	da08      	bge.n	8008ffc <__sfputc_r+0x1e>
 8008fea:	6994      	ldr	r4, [r2, #24]
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	db01      	blt.n	8008ff4 <__sfputc_r+0x16>
 8008ff0:	290a      	cmp	r1, #10
 8008ff2:	d103      	bne.n	8008ffc <__sfputc_r+0x1e>
 8008ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff8:	f000 b94a 	b.w	8009290 <__swbuf_r>
 8008ffc:	6813      	ldr	r3, [r2, #0]
 8008ffe:	1c58      	adds	r0, r3, #1
 8009000:	6010      	str	r0, [r2, #0]
 8009002:	7019      	strb	r1, [r3, #0]
 8009004:	4608      	mov	r0, r1
 8009006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800900a:	4770      	bx	lr

0800900c <__sfputs_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	4614      	mov	r4, r2
 8009014:	18d5      	adds	r5, r2, r3
 8009016:	42ac      	cmp	r4, r5
 8009018:	d101      	bne.n	800901e <__sfputs_r+0x12>
 800901a:	2000      	movs	r0, #0
 800901c:	e007      	b.n	800902e <__sfputs_r+0x22>
 800901e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009022:	463a      	mov	r2, r7
 8009024:	4630      	mov	r0, r6
 8009026:	f7ff ffda 	bl	8008fde <__sfputc_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d1f3      	bne.n	8009016 <__sfputs_r+0xa>
 800902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009030 <_vfiprintf_r>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	460d      	mov	r5, r1
 8009036:	b09d      	sub	sp, #116	; 0x74
 8009038:	4614      	mov	r4, r2
 800903a:	4698      	mov	r8, r3
 800903c:	4606      	mov	r6, r0
 800903e:	b118      	cbz	r0, 8009048 <_vfiprintf_r+0x18>
 8009040:	6983      	ldr	r3, [r0, #24]
 8009042:	b90b      	cbnz	r3, 8009048 <_vfiprintf_r+0x18>
 8009044:	f7ff febe 	bl	8008dc4 <__sinit>
 8009048:	4b89      	ldr	r3, [pc, #548]	; (8009270 <_vfiprintf_r+0x240>)
 800904a:	429d      	cmp	r5, r3
 800904c:	d11b      	bne.n	8009086 <_vfiprintf_r+0x56>
 800904e:	6875      	ldr	r5, [r6, #4]
 8009050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009052:	07d9      	lsls	r1, r3, #31
 8009054:	d405      	bmi.n	8009062 <_vfiprintf_r+0x32>
 8009056:	89ab      	ldrh	r3, [r5, #12]
 8009058:	059a      	lsls	r2, r3, #22
 800905a:	d402      	bmi.n	8009062 <_vfiprintf_r+0x32>
 800905c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800905e:	f7ff ff61 	bl	8008f24 <__retarget_lock_acquire_recursive>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	071b      	lsls	r3, r3, #28
 8009066:	d501      	bpl.n	800906c <_vfiprintf_r+0x3c>
 8009068:	692b      	ldr	r3, [r5, #16]
 800906a:	b9eb      	cbnz	r3, 80090a8 <_vfiprintf_r+0x78>
 800906c:	4629      	mov	r1, r5
 800906e:	4630      	mov	r0, r6
 8009070:	f000 f96e 	bl	8009350 <__swsetup_r>
 8009074:	b1c0      	cbz	r0, 80090a8 <_vfiprintf_r+0x78>
 8009076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009078:	07dc      	lsls	r4, r3, #31
 800907a:	d50e      	bpl.n	800909a <_vfiprintf_r+0x6a>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b01d      	add	sp, #116	; 0x74
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	4b7b      	ldr	r3, [pc, #492]	; (8009274 <_vfiprintf_r+0x244>)
 8009088:	429d      	cmp	r5, r3
 800908a:	d101      	bne.n	8009090 <_vfiprintf_r+0x60>
 800908c:	68b5      	ldr	r5, [r6, #8]
 800908e:	e7df      	b.n	8009050 <_vfiprintf_r+0x20>
 8009090:	4b79      	ldr	r3, [pc, #484]	; (8009278 <_vfiprintf_r+0x248>)
 8009092:	429d      	cmp	r5, r3
 8009094:	bf08      	it	eq
 8009096:	68f5      	ldreq	r5, [r6, #12]
 8009098:	e7da      	b.n	8009050 <_vfiprintf_r+0x20>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	0598      	lsls	r0, r3, #22
 800909e:	d4ed      	bmi.n	800907c <_vfiprintf_r+0x4c>
 80090a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a2:	f7ff ff40 	bl	8008f26 <__retarget_lock_release_recursive>
 80090a6:	e7e9      	b.n	800907c <_vfiprintf_r+0x4c>
 80090a8:	2300      	movs	r3, #0
 80090aa:	9309      	str	r3, [sp, #36]	; 0x24
 80090ac:	2320      	movs	r3, #32
 80090ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b6:	2330      	movs	r3, #48	; 0x30
 80090b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800927c <_vfiprintf_r+0x24c>
 80090bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c0:	f04f 0901 	mov.w	r9, #1
 80090c4:	4623      	mov	r3, r4
 80090c6:	469a      	mov	sl, r3
 80090c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090cc:	b10a      	cbz	r2, 80090d2 <_vfiprintf_r+0xa2>
 80090ce:	2a25      	cmp	r2, #37	; 0x25
 80090d0:	d1f9      	bne.n	80090c6 <_vfiprintf_r+0x96>
 80090d2:	ebba 0b04 	subs.w	fp, sl, r4
 80090d6:	d00b      	beq.n	80090f0 <_vfiprintf_r+0xc0>
 80090d8:	465b      	mov	r3, fp
 80090da:	4622      	mov	r2, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	4630      	mov	r0, r6
 80090e0:	f7ff ff94 	bl	800900c <__sfputs_r>
 80090e4:	3001      	adds	r0, #1
 80090e6:	f000 80aa 	beq.w	800923e <_vfiprintf_r+0x20e>
 80090ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ec:	445a      	add	r2, fp
 80090ee:	9209      	str	r2, [sp, #36]	; 0x24
 80090f0:	f89a 3000 	ldrb.w	r3, [sl]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80a2 	beq.w	800923e <_vfiprintf_r+0x20e>
 80090fa:	2300      	movs	r3, #0
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009104:	f10a 0a01 	add.w	sl, sl, #1
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	9307      	str	r3, [sp, #28]
 800910c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009110:	931a      	str	r3, [sp, #104]	; 0x68
 8009112:	4654      	mov	r4, sl
 8009114:	2205      	movs	r2, #5
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	4858      	ldr	r0, [pc, #352]	; (800927c <_vfiprintf_r+0x24c>)
 800911c:	f7f7 f868 	bl	80001f0 <memchr>
 8009120:	9a04      	ldr	r2, [sp, #16]
 8009122:	b9d8      	cbnz	r0, 800915c <_vfiprintf_r+0x12c>
 8009124:	06d1      	lsls	r1, r2, #27
 8009126:	bf44      	itt	mi
 8009128:	2320      	movmi	r3, #32
 800912a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912e:	0713      	lsls	r3, r2, #28
 8009130:	bf44      	itt	mi
 8009132:	232b      	movmi	r3, #43	; 0x2b
 8009134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009138:	f89a 3000 	ldrb.w	r3, [sl]
 800913c:	2b2a      	cmp	r3, #42	; 0x2a
 800913e:	d015      	beq.n	800916c <_vfiprintf_r+0x13c>
 8009140:	9a07      	ldr	r2, [sp, #28]
 8009142:	4654      	mov	r4, sl
 8009144:	2000      	movs	r0, #0
 8009146:	f04f 0c0a 	mov.w	ip, #10
 800914a:	4621      	mov	r1, r4
 800914c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009150:	3b30      	subs	r3, #48	; 0x30
 8009152:	2b09      	cmp	r3, #9
 8009154:	d94e      	bls.n	80091f4 <_vfiprintf_r+0x1c4>
 8009156:	b1b0      	cbz	r0, 8009186 <_vfiprintf_r+0x156>
 8009158:	9207      	str	r2, [sp, #28]
 800915a:	e014      	b.n	8009186 <_vfiprintf_r+0x156>
 800915c:	eba0 0308 	sub.w	r3, r0, r8
 8009160:	fa09 f303 	lsl.w	r3, r9, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	46a2      	mov	sl, r4
 800916a:	e7d2      	b.n	8009112 <_vfiprintf_r+0xe2>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	1d19      	adds	r1, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	9103      	str	r1, [sp, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfbb      	ittet	lt
 8009178:	425b      	neglt	r3, r3
 800917a:	f042 0202 	orrlt.w	r2, r2, #2
 800917e:	9307      	strge	r3, [sp, #28]
 8009180:	9307      	strlt	r3, [sp, #28]
 8009182:	bfb8      	it	lt
 8009184:	9204      	strlt	r2, [sp, #16]
 8009186:	7823      	ldrb	r3, [r4, #0]
 8009188:	2b2e      	cmp	r3, #46	; 0x2e
 800918a:	d10c      	bne.n	80091a6 <_vfiprintf_r+0x176>
 800918c:	7863      	ldrb	r3, [r4, #1]
 800918e:	2b2a      	cmp	r3, #42	; 0x2a
 8009190:	d135      	bne.n	80091fe <_vfiprintf_r+0x1ce>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	1d1a      	adds	r2, r3, #4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	9203      	str	r2, [sp, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfb8      	it	lt
 800919e:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a2:	3402      	adds	r4, #2
 80091a4:	9305      	str	r3, [sp, #20]
 80091a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800928c <_vfiprintf_r+0x25c>
 80091aa:	7821      	ldrb	r1, [r4, #0]
 80091ac:	2203      	movs	r2, #3
 80091ae:	4650      	mov	r0, sl
 80091b0:	f7f7 f81e 	bl	80001f0 <memchr>
 80091b4:	b140      	cbz	r0, 80091c8 <_vfiprintf_r+0x198>
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	eba0 000a 	sub.w	r0, r0, sl
 80091bc:	fa03 f000 	lsl.w	r0, r3, r0
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	4303      	orrs	r3, r0
 80091c4:	3401      	adds	r4, #1
 80091c6:	9304      	str	r3, [sp, #16]
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	482c      	ldr	r0, [pc, #176]	; (8009280 <_vfiprintf_r+0x250>)
 80091ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d2:	2206      	movs	r2, #6
 80091d4:	f7f7 f80c 	bl	80001f0 <memchr>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d03f      	beq.n	800925c <_vfiprintf_r+0x22c>
 80091dc:	4b29      	ldr	r3, [pc, #164]	; (8009284 <_vfiprintf_r+0x254>)
 80091de:	bb1b      	cbnz	r3, 8009228 <_vfiprintf_r+0x1f8>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	3307      	adds	r3, #7
 80091e4:	f023 0307 	bic.w	r3, r3, #7
 80091e8:	3308      	adds	r3, #8
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ee:	443b      	add	r3, r7
 80091f0:	9309      	str	r3, [sp, #36]	; 0x24
 80091f2:	e767      	b.n	80090c4 <_vfiprintf_r+0x94>
 80091f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091f8:	460c      	mov	r4, r1
 80091fa:	2001      	movs	r0, #1
 80091fc:	e7a5      	b.n	800914a <_vfiprintf_r+0x11a>
 80091fe:	2300      	movs	r3, #0
 8009200:	3401      	adds	r4, #1
 8009202:	9305      	str	r3, [sp, #20]
 8009204:	4619      	mov	r1, r3
 8009206:	f04f 0c0a 	mov.w	ip, #10
 800920a:	4620      	mov	r0, r4
 800920c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009210:	3a30      	subs	r2, #48	; 0x30
 8009212:	2a09      	cmp	r2, #9
 8009214:	d903      	bls.n	800921e <_vfiprintf_r+0x1ee>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0c5      	beq.n	80091a6 <_vfiprintf_r+0x176>
 800921a:	9105      	str	r1, [sp, #20]
 800921c:	e7c3      	b.n	80091a6 <_vfiprintf_r+0x176>
 800921e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009222:	4604      	mov	r4, r0
 8009224:	2301      	movs	r3, #1
 8009226:	e7f0      	b.n	800920a <_vfiprintf_r+0x1da>
 8009228:	ab03      	add	r3, sp, #12
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	462a      	mov	r2, r5
 800922e:	4b16      	ldr	r3, [pc, #88]	; (8009288 <_vfiprintf_r+0x258>)
 8009230:	a904      	add	r1, sp, #16
 8009232:	4630      	mov	r0, r6
 8009234:	f7fd fc7a 	bl	8006b2c <_printf_float>
 8009238:	4607      	mov	r7, r0
 800923a:	1c78      	adds	r0, r7, #1
 800923c:	d1d6      	bne.n	80091ec <_vfiprintf_r+0x1bc>
 800923e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009240:	07d9      	lsls	r1, r3, #31
 8009242:	d405      	bmi.n	8009250 <_vfiprintf_r+0x220>
 8009244:	89ab      	ldrh	r3, [r5, #12]
 8009246:	059a      	lsls	r2, r3, #22
 8009248:	d402      	bmi.n	8009250 <_vfiprintf_r+0x220>
 800924a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924c:	f7ff fe6b 	bl	8008f26 <__retarget_lock_release_recursive>
 8009250:	89ab      	ldrh	r3, [r5, #12]
 8009252:	065b      	lsls	r3, r3, #25
 8009254:	f53f af12 	bmi.w	800907c <_vfiprintf_r+0x4c>
 8009258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800925a:	e711      	b.n	8009080 <_vfiprintf_r+0x50>
 800925c:	ab03      	add	r3, sp, #12
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	462a      	mov	r2, r5
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <_vfiprintf_r+0x258>)
 8009264:	a904      	add	r1, sp, #16
 8009266:	4630      	mov	r0, r6
 8009268:	f7fd ff04 	bl	8007074 <_printf_i>
 800926c:	e7e4      	b.n	8009238 <_vfiprintf_r+0x208>
 800926e:	bf00      	nop
 8009270:	0800bea4 	.word	0x0800bea4
 8009274:	0800bec4 	.word	0x0800bec4
 8009278:	0800be84 	.word	0x0800be84
 800927c:	0800bd34 	.word	0x0800bd34
 8009280:	0800bd3e 	.word	0x0800bd3e
 8009284:	08006b2d 	.word	0x08006b2d
 8009288:	0800900d 	.word	0x0800900d
 800928c:	0800bd3a 	.word	0x0800bd3a

08009290 <__swbuf_r>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	4614      	mov	r4, r2
 8009296:	4605      	mov	r5, r0
 8009298:	b118      	cbz	r0, 80092a2 <__swbuf_r+0x12>
 800929a:	6983      	ldr	r3, [r0, #24]
 800929c:	b90b      	cbnz	r3, 80092a2 <__swbuf_r+0x12>
 800929e:	f7ff fd91 	bl	8008dc4 <__sinit>
 80092a2:	4b21      	ldr	r3, [pc, #132]	; (8009328 <__swbuf_r+0x98>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	d12b      	bne.n	8009300 <__swbuf_r+0x70>
 80092a8:	686c      	ldr	r4, [r5, #4]
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	071a      	lsls	r2, r3, #28
 80092b2:	d52f      	bpl.n	8009314 <__swbuf_r+0x84>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b36b      	cbz	r3, 8009314 <__swbuf_r+0x84>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	6820      	ldr	r0, [r4, #0]
 80092bc:	1ac0      	subs	r0, r0, r3
 80092be:	6963      	ldr	r3, [r4, #20]
 80092c0:	b2f6      	uxtb	r6, r6
 80092c2:	4283      	cmp	r3, r0
 80092c4:	4637      	mov	r7, r6
 80092c6:	dc04      	bgt.n	80092d2 <__swbuf_r+0x42>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7ff fce6 	bl	8008c9c <_fflush_r>
 80092d0:	bb30      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	60a3      	str	r3, [r4, #8]
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	6022      	str	r2, [r4, #0]
 80092de:	701e      	strb	r6, [r3, #0]
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	3001      	adds	r0, #1
 80092e4:	4283      	cmp	r3, r0
 80092e6:	d004      	beq.n	80092f2 <__swbuf_r+0x62>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	07db      	lsls	r3, r3, #31
 80092ec:	d506      	bpl.n	80092fc <__swbuf_r+0x6c>
 80092ee:	2e0a      	cmp	r6, #10
 80092f0:	d104      	bne.n	80092fc <__swbuf_r+0x6c>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff fcd1 	bl	8008c9c <_fflush_r>
 80092fa:	b988      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092fc:	4638      	mov	r0, r7
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <__swbuf_r+0x9c>)
 8009302:	429c      	cmp	r4, r3
 8009304:	d101      	bne.n	800930a <__swbuf_r+0x7a>
 8009306:	68ac      	ldr	r4, [r5, #8]
 8009308:	e7cf      	b.n	80092aa <__swbuf_r+0x1a>
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <__swbuf_r+0xa0>)
 800930c:	429c      	cmp	r4, r3
 800930e:	bf08      	it	eq
 8009310:	68ec      	ldreq	r4, [r5, #12]
 8009312:	e7ca      	b.n	80092aa <__swbuf_r+0x1a>
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f81a 	bl	8009350 <__swsetup_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	d0cb      	beq.n	80092b8 <__swbuf_r+0x28>
 8009320:	f04f 37ff 	mov.w	r7, #4294967295
 8009324:	e7ea      	b.n	80092fc <__swbuf_r+0x6c>
 8009326:	bf00      	nop
 8009328:	0800bea4 	.word	0x0800bea4
 800932c:	0800bec4 	.word	0x0800bec4
 8009330:	0800be84 	.word	0x0800be84

08009334 <__ascii_wctomb>:
 8009334:	b149      	cbz	r1, 800934a <__ascii_wctomb+0x16>
 8009336:	2aff      	cmp	r2, #255	; 0xff
 8009338:	bf85      	ittet	hi
 800933a:	238a      	movhi	r3, #138	; 0x8a
 800933c:	6003      	strhi	r3, [r0, #0]
 800933e:	700a      	strbls	r2, [r1, #0]
 8009340:	f04f 30ff 	movhi.w	r0, #4294967295
 8009344:	bf98      	it	ls
 8009346:	2001      	movls	r0, #1
 8009348:	4770      	bx	lr
 800934a:	4608      	mov	r0, r1
 800934c:	4770      	bx	lr
	...

08009350 <__swsetup_r>:
 8009350:	4b32      	ldr	r3, [pc, #200]	; (800941c <__swsetup_r+0xcc>)
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	681d      	ldr	r5, [r3, #0]
 8009356:	4606      	mov	r6, r0
 8009358:	460c      	mov	r4, r1
 800935a:	b125      	cbz	r5, 8009366 <__swsetup_r+0x16>
 800935c:	69ab      	ldr	r3, [r5, #24]
 800935e:	b913      	cbnz	r3, 8009366 <__swsetup_r+0x16>
 8009360:	4628      	mov	r0, r5
 8009362:	f7ff fd2f 	bl	8008dc4 <__sinit>
 8009366:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <__swsetup_r+0xd0>)
 8009368:	429c      	cmp	r4, r3
 800936a:	d10f      	bne.n	800938c <__swsetup_r+0x3c>
 800936c:	686c      	ldr	r4, [r5, #4]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009374:	0719      	lsls	r1, r3, #28
 8009376:	d42c      	bmi.n	80093d2 <__swsetup_r+0x82>
 8009378:	06dd      	lsls	r5, r3, #27
 800937a:	d411      	bmi.n	80093a0 <__swsetup_r+0x50>
 800937c:	2309      	movs	r3, #9
 800937e:	6033      	str	r3, [r6, #0]
 8009380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	f04f 30ff 	mov.w	r0, #4294967295
 800938a:	e03e      	b.n	800940a <__swsetup_r+0xba>
 800938c:	4b25      	ldr	r3, [pc, #148]	; (8009424 <__swsetup_r+0xd4>)
 800938e:	429c      	cmp	r4, r3
 8009390:	d101      	bne.n	8009396 <__swsetup_r+0x46>
 8009392:	68ac      	ldr	r4, [r5, #8]
 8009394:	e7eb      	b.n	800936e <__swsetup_r+0x1e>
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <__swsetup_r+0xd8>)
 8009398:	429c      	cmp	r4, r3
 800939a:	bf08      	it	eq
 800939c:	68ec      	ldreq	r4, [r5, #12]
 800939e:	e7e6      	b.n	800936e <__swsetup_r+0x1e>
 80093a0:	0758      	lsls	r0, r3, #29
 80093a2:	d512      	bpl.n	80093ca <__swsetup_r+0x7a>
 80093a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a6:	b141      	cbz	r1, 80093ba <__swsetup_r+0x6a>
 80093a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ac:	4299      	cmp	r1, r3
 80093ae:	d002      	beq.n	80093b6 <__swsetup_r+0x66>
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7fd fa3b 	bl	800682c <_free_r>
 80093b6:	2300      	movs	r3, #0
 80093b8:	6363      	str	r3, [r4, #52]	; 0x34
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	2300      	movs	r3, #0
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	f043 0308 	orr.w	r3, r3, #8
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	b94b      	cbnz	r3, 80093ea <__swsetup_r+0x9a>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e0:	d003      	beq.n	80093ea <__swsetup_r+0x9a>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4630      	mov	r0, r6
 80093e6:	f000 f84d 	bl	8009484 <__smakebuf_r>
 80093ea:	89a0      	ldrh	r0, [r4, #12]
 80093ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f0:	f010 0301 	ands.w	r3, r0, #1
 80093f4:	d00a      	beq.n	800940c <__swsetup_r+0xbc>
 80093f6:	2300      	movs	r3, #0
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	6963      	ldr	r3, [r4, #20]
 80093fc:	425b      	negs	r3, r3
 80093fe:	61a3      	str	r3, [r4, #24]
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	b943      	cbnz	r3, 8009416 <__swsetup_r+0xc6>
 8009404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009408:	d1ba      	bne.n	8009380 <__swsetup_r+0x30>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	0781      	lsls	r1, r0, #30
 800940e:	bf58      	it	pl
 8009410:	6963      	ldrpl	r3, [r4, #20]
 8009412:	60a3      	str	r3, [r4, #8]
 8009414:	e7f4      	b.n	8009400 <__swsetup_r+0xb0>
 8009416:	2000      	movs	r0, #0
 8009418:	e7f7      	b.n	800940a <__swsetup_r+0xba>
 800941a:	bf00      	nop
 800941c:	20000010 	.word	0x20000010
 8009420:	0800bea4 	.word	0x0800bea4
 8009424:	0800bec4 	.word	0x0800bec4
 8009428:	0800be84 	.word	0x0800be84

0800942c <abort>:
 800942c:	b508      	push	{r3, lr}
 800942e:	2006      	movs	r0, #6
 8009430:	f000 f898 	bl	8009564 <raise>
 8009434:	2001      	movs	r0, #1
 8009436:	f7f8 fefb 	bl	8002230 <_exit>

0800943a <__swhatbuf_r>:
 800943a:	b570      	push	{r4, r5, r6, lr}
 800943c:	460e      	mov	r6, r1
 800943e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009442:	2900      	cmp	r1, #0
 8009444:	b096      	sub	sp, #88	; 0x58
 8009446:	4614      	mov	r4, r2
 8009448:	461d      	mov	r5, r3
 800944a:	da08      	bge.n	800945e <__swhatbuf_r+0x24>
 800944c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	602a      	str	r2, [r5, #0]
 8009454:	061a      	lsls	r2, r3, #24
 8009456:	d410      	bmi.n	800947a <__swhatbuf_r+0x40>
 8009458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945c:	e00e      	b.n	800947c <__swhatbuf_r+0x42>
 800945e:	466a      	mov	r2, sp
 8009460:	f000 f89c 	bl	800959c <_fstat_r>
 8009464:	2800      	cmp	r0, #0
 8009466:	dbf1      	blt.n	800944c <__swhatbuf_r+0x12>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800946e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009472:	425a      	negs	r2, r3
 8009474:	415a      	adcs	r2, r3
 8009476:	602a      	str	r2, [r5, #0]
 8009478:	e7ee      	b.n	8009458 <__swhatbuf_r+0x1e>
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	2000      	movs	r0, #0
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	b016      	add	sp, #88	; 0x58
 8009482:	bd70      	pop	{r4, r5, r6, pc}

08009484 <__smakebuf_r>:
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009488:	079d      	lsls	r5, r3, #30
 800948a:	4606      	mov	r6, r0
 800948c:	460c      	mov	r4, r1
 800948e:	d507      	bpl.n	80094a0 <__smakebuf_r+0x1c>
 8009490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	2301      	movs	r3, #1
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	b002      	add	sp, #8
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	466a      	mov	r2, sp
 80094a4:	f7ff ffc9 	bl	800943a <__swhatbuf_r>
 80094a8:	9900      	ldr	r1, [sp, #0]
 80094aa:	4605      	mov	r5, r0
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7fd fa29 	bl	8006904 <_malloc_r>
 80094b2:	b948      	cbnz	r0, 80094c8 <__smakebuf_r+0x44>
 80094b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d4ef      	bmi.n	800949c <__smakebuf_r+0x18>
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7e3      	b.n	8009490 <__smakebuf_r+0xc>
 80094c8:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <__smakebuf_r+0x7c>)
 80094ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	6020      	str	r0, [r4, #0]
 80094d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	9b00      	ldr	r3, [sp, #0]
 80094d8:	6163      	str	r3, [r4, #20]
 80094da:	9b01      	ldr	r3, [sp, #4]
 80094dc:	6120      	str	r0, [r4, #16]
 80094de:	b15b      	cbz	r3, 80094f8 <__smakebuf_r+0x74>
 80094e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e4:	4630      	mov	r0, r6
 80094e6:	f000 f86b 	bl	80095c0 <_isatty_r>
 80094ea:	b128      	cbz	r0, 80094f8 <__smakebuf_r+0x74>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	89a0      	ldrh	r0, [r4, #12]
 80094fa:	4305      	orrs	r5, r0
 80094fc:	81a5      	strh	r5, [r4, #12]
 80094fe:	e7cd      	b.n	800949c <__smakebuf_r+0x18>
 8009500:	08008d5d 	.word	0x08008d5d

08009504 <_malloc_usable_size_r>:
 8009504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009508:	1f18      	subs	r0, r3, #4
 800950a:	2b00      	cmp	r3, #0
 800950c:	bfbc      	itt	lt
 800950e:	580b      	ldrlt	r3, [r1, r0]
 8009510:	18c0      	addlt	r0, r0, r3
 8009512:	4770      	bx	lr

08009514 <_raise_r>:
 8009514:	291f      	cmp	r1, #31
 8009516:	b538      	push	{r3, r4, r5, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	d904      	bls.n	8009528 <_raise_r+0x14>
 800951e:	2316      	movs	r3, #22
 8009520:	6003      	str	r3, [r0, #0]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800952a:	b112      	cbz	r2, 8009532 <_raise_r+0x1e>
 800952c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009530:	b94b      	cbnz	r3, 8009546 <_raise_r+0x32>
 8009532:	4620      	mov	r0, r4
 8009534:	f000 f830 	bl	8009598 <_getpid_r>
 8009538:	462a      	mov	r2, r5
 800953a:	4601      	mov	r1, r0
 800953c:	4620      	mov	r0, r4
 800953e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009542:	f000 b817 	b.w	8009574 <_kill_r>
 8009546:	2b01      	cmp	r3, #1
 8009548:	d00a      	beq.n	8009560 <_raise_r+0x4c>
 800954a:	1c59      	adds	r1, r3, #1
 800954c:	d103      	bne.n	8009556 <_raise_r+0x42>
 800954e:	2316      	movs	r3, #22
 8009550:	6003      	str	r3, [r0, #0]
 8009552:	2001      	movs	r0, #1
 8009554:	e7e7      	b.n	8009526 <_raise_r+0x12>
 8009556:	2400      	movs	r4, #0
 8009558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800955c:	4628      	mov	r0, r5
 800955e:	4798      	blx	r3
 8009560:	2000      	movs	r0, #0
 8009562:	e7e0      	b.n	8009526 <_raise_r+0x12>

08009564 <raise>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <raise+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f7ff bfd3 	b.w	8009514 <_raise_r>
 800956e:	bf00      	nop
 8009570:	20000010 	.word	0x20000010

08009574 <_kill_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	; (8009594 <_kill_r+0x20>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	f7f8 fe45 	bl	8002210 <_kill>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d102      	bne.n	8009590 <_kill_r+0x1c>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b103      	cbz	r3, 8009590 <_kill_r+0x1c>
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	bf00      	nop
 8009594:	200005e4 	.word	0x200005e4

08009598 <_getpid_r>:
 8009598:	f7f8 be32 	b.w	8002200 <_getpid>

0800959c <_fstat_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_fstat_r+0x20>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f7f8 fe90 	bl	80022ce <_fstat>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_fstat_r+0x1c>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_fstat_r+0x1c>
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	200005e4 	.word	0x200005e4

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fe8f 	bl	80022ee <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200005e4 	.word	0x200005e4

080095e0 <cos>:
 80095e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095e2:	ec53 2b10 	vmov	r2, r3, d0
 80095e6:	4826      	ldr	r0, [pc, #152]	; (8009680 <cos+0xa0>)
 80095e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80095ec:	4281      	cmp	r1, r0
 80095ee:	dc06      	bgt.n	80095fe <cos+0x1e>
 80095f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009678 <cos+0x98>
 80095f4:	b005      	add	sp, #20
 80095f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80095fa:	f001 ba41 	b.w	800aa80 <__kernel_cos>
 80095fe:	4821      	ldr	r0, [pc, #132]	; (8009684 <cos+0xa4>)
 8009600:	4281      	cmp	r1, r0
 8009602:	dd09      	ble.n	8009618 <cos+0x38>
 8009604:	ee10 0a10 	vmov	r0, s0
 8009608:	4619      	mov	r1, r3
 800960a:	f7f6 fe45 	bl	8000298 <__aeabi_dsub>
 800960e:	ec41 0b10 	vmov	d0, r0, r1
 8009612:	b005      	add	sp, #20
 8009614:	f85d fb04 	ldr.w	pc, [sp], #4
 8009618:	4668      	mov	r0, sp
 800961a:	f000 ff71 	bl	800a500 <__ieee754_rem_pio2>
 800961e:	f000 0003 	and.w	r0, r0, #3
 8009622:	2801      	cmp	r0, #1
 8009624:	d00b      	beq.n	800963e <cos+0x5e>
 8009626:	2802      	cmp	r0, #2
 8009628:	d016      	beq.n	8009658 <cos+0x78>
 800962a:	b9e0      	cbnz	r0, 8009666 <cos+0x86>
 800962c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009630:	ed9d 0b00 	vldr	d0, [sp]
 8009634:	f001 fa24 	bl	800aa80 <__kernel_cos>
 8009638:	ec51 0b10 	vmov	r0, r1, d0
 800963c:	e7e7      	b.n	800960e <cos+0x2e>
 800963e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009642:	ed9d 0b00 	vldr	d0, [sp]
 8009646:	f001 fe33 	bl	800b2b0 <__kernel_sin>
 800964a:	ec53 2b10 	vmov	r2, r3, d0
 800964e:	ee10 0a10 	vmov	r0, s0
 8009652:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009656:	e7da      	b.n	800960e <cos+0x2e>
 8009658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800965c:	ed9d 0b00 	vldr	d0, [sp]
 8009660:	f001 fa0e 	bl	800aa80 <__kernel_cos>
 8009664:	e7f1      	b.n	800964a <cos+0x6a>
 8009666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800966a:	ed9d 0b00 	vldr	d0, [sp]
 800966e:	2001      	movs	r0, #1
 8009670:	f001 fe1e 	bl	800b2b0 <__kernel_sin>
 8009674:	e7e0      	b.n	8009638 <cos+0x58>
 8009676:	bf00      	nop
	...
 8009680:	3fe921fb 	.word	0x3fe921fb
 8009684:	7fefffff 	.word	0x7fefffff

08009688 <round>:
 8009688:	ec51 0b10 	vmov	r0, r1, d0
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009692:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009696:	2c13      	cmp	r4, #19
 8009698:	ee10 2a10 	vmov	r2, s0
 800969c:	460b      	mov	r3, r1
 800969e:	dc19      	bgt.n	80096d4 <round+0x4c>
 80096a0:	2c00      	cmp	r4, #0
 80096a2:	da09      	bge.n	80096b8 <round+0x30>
 80096a4:	3401      	adds	r4, #1
 80096a6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80096aa:	d103      	bne.n	80096b4 <round+0x2c>
 80096ac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80096b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096b4:	2200      	movs	r2, #0
 80096b6:	e028      	b.n	800970a <round+0x82>
 80096b8:	4d15      	ldr	r5, [pc, #84]	; (8009710 <round+0x88>)
 80096ba:	4125      	asrs	r5, r4
 80096bc:	ea01 0605 	and.w	r6, r1, r5
 80096c0:	4332      	orrs	r2, r6
 80096c2:	d00e      	beq.n	80096e2 <round+0x5a>
 80096c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096c8:	fa42 f404 	asr.w	r4, r2, r4
 80096cc:	4423      	add	r3, r4
 80096ce:	ea23 0305 	bic.w	r3, r3, r5
 80096d2:	e7ef      	b.n	80096b4 <round+0x2c>
 80096d4:	2c33      	cmp	r4, #51	; 0x33
 80096d6:	dd07      	ble.n	80096e8 <round+0x60>
 80096d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80096dc:	d101      	bne.n	80096e2 <round+0x5a>
 80096de:	f7f6 fddd 	bl	800029c <__adddf3>
 80096e2:	ec41 0b10 	vmov	d0, r0, r1
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80096ec:	f04f 35ff 	mov.w	r5, #4294967295
 80096f0:	40f5      	lsrs	r5, r6
 80096f2:	4228      	tst	r0, r5
 80096f4:	d0f5      	beq.n	80096e2 <round+0x5a>
 80096f6:	2101      	movs	r1, #1
 80096f8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80096fc:	fa01 f404 	lsl.w	r4, r1, r4
 8009700:	1912      	adds	r2, r2, r4
 8009702:	bf28      	it	cs
 8009704:	185b      	addcs	r3, r3, r1
 8009706:	ea22 0205 	bic.w	r2, r2, r5
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	e7e8      	b.n	80096e2 <round+0x5a>
 8009710:	000fffff 	.word	0x000fffff
 8009714:	00000000 	.word	0x00000000

08009718 <sin>:
 8009718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800971a:	ec53 2b10 	vmov	r2, r3, d0
 800971e:	4828      	ldr	r0, [pc, #160]	; (80097c0 <sin+0xa8>)
 8009720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009724:	4281      	cmp	r1, r0
 8009726:	dc07      	bgt.n	8009738 <sin+0x20>
 8009728:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80097b8 <sin+0xa0>
 800972c:	2000      	movs	r0, #0
 800972e:	b005      	add	sp, #20
 8009730:	f85d eb04 	ldr.w	lr, [sp], #4
 8009734:	f001 bdbc 	b.w	800b2b0 <__kernel_sin>
 8009738:	4822      	ldr	r0, [pc, #136]	; (80097c4 <sin+0xac>)
 800973a:	4281      	cmp	r1, r0
 800973c:	dd09      	ble.n	8009752 <sin+0x3a>
 800973e:	ee10 0a10 	vmov	r0, s0
 8009742:	4619      	mov	r1, r3
 8009744:	f7f6 fda8 	bl	8000298 <__aeabi_dsub>
 8009748:	ec41 0b10 	vmov	d0, r0, r1
 800974c:	b005      	add	sp, #20
 800974e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009752:	4668      	mov	r0, sp
 8009754:	f000 fed4 	bl	800a500 <__ieee754_rem_pio2>
 8009758:	f000 0003 	and.w	r0, r0, #3
 800975c:	2801      	cmp	r0, #1
 800975e:	d00c      	beq.n	800977a <sin+0x62>
 8009760:	2802      	cmp	r0, #2
 8009762:	d011      	beq.n	8009788 <sin+0x70>
 8009764:	b9f0      	cbnz	r0, 80097a4 <sin+0x8c>
 8009766:	ed9d 1b02 	vldr	d1, [sp, #8]
 800976a:	ed9d 0b00 	vldr	d0, [sp]
 800976e:	2001      	movs	r0, #1
 8009770:	f001 fd9e 	bl	800b2b0 <__kernel_sin>
 8009774:	ec51 0b10 	vmov	r0, r1, d0
 8009778:	e7e6      	b.n	8009748 <sin+0x30>
 800977a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800977e:	ed9d 0b00 	vldr	d0, [sp]
 8009782:	f001 f97d 	bl	800aa80 <__kernel_cos>
 8009786:	e7f5      	b.n	8009774 <sin+0x5c>
 8009788:	ed9d 1b02 	vldr	d1, [sp, #8]
 800978c:	ed9d 0b00 	vldr	d0, [sp]
 8009790:	2001      	movs	r0, #1
 8009792:	f001 fd8d 	bl	800b2b0 <__kernel_sin>
 8009796:	ec53 2b10 	vmov	r2, r3, d0
 800979a:	ee10 0a10 	vmov	r0, s0
 800979e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80097a2:	e7d1      	b.n	8009748 <sin+0x30>
 80097a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097a8:	ed9d 0b00 	vldr	d0, [sp]
 80097ac:	f001 f968 	bl	800aa80 <__kernel_cos>
 80097b0:	e7f1      	b.n	8009796 <sin+0x7e>
 80097b2:	bf00      	nop
 80097b4:	f3af 8000 	nop.w
	...
 80097c0:	3fe921fb 	.word	0x3fe921fb
 80097c4:	7fefffff 	.word	0x7fefffff

080097c8 <atan2>:
 80097c8:	f000 b89e 	b.w	8009908 <__ieee754_atan2>

080097cc <pow>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	ed2d 8b02 	vpush	{d8}
 80097d2:	eeb0 8a40 	vmov.f32	s16, s0
 80097d6:	eef0 8a60 	vmov.f32	s17, s1
 80097da:	ec55 4b11 	vmov	r4, r5, d1
 80097de:	f000 f95f 	bl	8009aa0 <__ieee754_pow>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	ec57 6b10 	vmov	r6, r7, d0
 80097ee:	f7f7 f9a5 	bl	8000b3c <__aeabi_dcmpun>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d13b      	bne.n	800986e <pow+0xa2>
 80097f6:	ec51 0b18 	vmov	r0, r1, d8
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	f7f7 f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009802:	b1b8      	cbz	r0, 8009834 <pow+0x68>
 8009804:	2200      	movs	r2, #0
 8009806:	2300      	movs	r3, #0
 8009808:	4620      	mov	r0, r4
 800980a:	4629      	mov	r1, r5
 800980c:	f7f7 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d146      	bne.n	80098a2 <pow+0xd6>
 8009814:	ec45 4b10 	vmov	d0, r4, r5
 8009818:	f001 ffe3 	bl	800b7e2 <finite>
 800981c:	b338      	cbz	r0, 800986e <pow+0xa2>
 800981e:	2200      	movs	r2, #0
 8009820:	2300      	movs	r3, #0
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f7 f961 	bl	8000aec <__aeabi_dcmplt>
 800982a:	b300      	cbz	r0, 800986e <pow+0xa2>
 800982c:	f7fc ffc4 	bl	80067b8 <__errno>
 8009830:	2322      	movs	r3, #34	; 0x22
 8009832:	e01b      	b.n	800986c <pow+0xa0>
 8009834:	ec47 6b10 	vmov	d0, r6, r7
 8009838:	f001 ffd3 	bl	800b7e2 <finite>
 800983c:	b9e0      	cbnz	r0, 8009878 <pow+0xac>
 800983e:	eeb0 0a48 	vmov.f32	s0, s16
 8009842:	eef0 0a68 	vmov.f32	s1, s17
 8009846:	f001 ffcc 	bl	800b7e2 <finite>
 800984a:	b1a8      	cbz	r0, 8009878 <pow+0xac>
 800984c:	ec45 4b10 	vmov	d0, r4, r5
 8009850:	f001 ffc7 	bl	800b7e2 <finite>
 8009854:	b180      	cbz	r0, 8009878 <pow+0xac>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f7 f96d 	bl	8000b3c <__aeabi_dcmpun>
 8009862:	2800      	cmp	r0, #0
 8009864:	d0e2      	beq.n	800982c <pow+0x60>
 8009866:	f7fc ffa7 	bl	80067b8 <__errno>
 800986a:	2321      	movs	r3, #33	; 0x21
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	ecbd 8b02 	vpop	{d8}
 8009872:	ec47 6b10 	vmov	d0, r6, r7
 8009876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f7 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009884:	2800      	cmp	r0, #0
 8009886:	d0f2      	beq.n	800986e <pow+0xa2>
 8009888:	eeb0 0a48 	vmov.f32	s0, s16
 800988c:	eef0 0a68 	vmov.f32	s1, s17
 8009890:	f001 ffa7 	bl	800b7e2 <finite>
 8009894:	2800      	cmp	r0, #0
 8009896:	d0ea      	beq.n	800986e <pow+0xa2>
 8009898:	ec45 4b10 	vmov	d0, r4, r5
 800989c:	f001 ffa1 	bl	800b7e2 <finite>
 80098a0:	e7c3      	b.n	800982a <pow+0x5e>
 80098a2:	4f01      	ldr	r7, [pc, #4]	; (80098a8 <pow+0xdc>)
 80098a4:	2600      	movs	r6, #0
 80098a6:	e7e2      	b.n	800986e <pow+0xa2>
 80098a8:	3ff00000 	.word	0x3ff00000

080098ac <sqrt>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	ed2d 8b02 	vpush	{d8}
 80098b2:	ec55 4b10 	vmov	r4, r5, d0
 80098b6:	f001 f82f 	bl	800a918 <__ieee754_sqrt>
 80098ba:	4622      	mov	r2, r4
 80098bc:	462b      	mov	r3, r5
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	eeb0 8a40 	vmov.f32	s16, s0
 80098c6:	eef0 8a60 	vmov.f32	s17, s1
 80098ca:	f7f7 f937 	bl	8000b3c <__aeabi_dcmpun>
 80098ce:	b990      	cbnz	r0, 80098f6 <sqrt+0x4a>
 80098d0:	2200      	movs	r2, #0
 80098d2:	2300      	movs	r3, #0
 80098d4:	4620      	mov	r0, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f7 f908 	bl	8000aec <__aeabi_dcmplt>
 80098dc:	b158      	cbz	r0, 80098f6 <sqrt+0x4a>
 80098de:	f7fc ff6b 	bl	80067b8 <__errno>
 80098e2:	2321      	movs	r3, #33	; 0x21
 80098e4:	6003      	str	r3, [r0, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	2300      	movs	r3, #0
 80098ea:	4610      	mov	r0, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	f7f6 ffb5 	bl	800085c <__aeabi_ddiv>
 80098f2:	ec41 0b18 	vmov	d8, r0, r1
 80098f6:	eeb0 0a48 	vmov.f32	s0, s16
 80098fa:	eef0 0a68 	vmov.f32	s1, s17
 80098fe:	ecbd 8b02 	vpop	{d8}
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	0000      	movs	r0, r0
	...

08009908 <__ieee754_atan2>:
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800990c:	ec57 6b11 	vmov	r6, r7, d1
 8009910:	4273      	negs	r3, r6
 8009912:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009a98 <__ieee754_atan2+0x190>
 8009916:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800991a:	4333      	orrs	r3, r6
 800991c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009920:	4573      	cmp	r3, lr
 8009922:	ec51 0b10 	vmov	r0, r1, d0
 8009926:	ee11 8a10 	vmov	r8, s2
 800992a:	d80a      	bhi.n	8009942 <__ieee754_atan2+0x3a>
 800992c:	4244      	negs	r4, r0
 800992e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009932:	4304      	orrs	r4, r0
 8009934:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009938:	4574      	cmp	r4, lr
 800993a:	ee10 9a10 	vmov	r9, s0
 800993e:	468c      	mov	ip, r1
 8009940:	d907      	bls.n	8009952 <__ieee754_atan2+0x4a>
 8009942:	4632      	mov	r2, r6
 8009944:	463b      	mov	r3, r7
 8009946:	f7f6 fca9 	bl	800029c <__adddf3>
 800994a:	ec41 0b10 	vmov	d0, r0, r1
 800994e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009952:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009956:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800995a:	4334      	orrs	r4, r6
 800995c:	d103      	bne.n	8009966 <__ieee754_atan2+0x5e>
 800995e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009962:	f001 bd95 	b.w	800b490 <atan>
 8009966:	17bc      	asrs	r4, r7, #30
 8009968:	f004 0402 	and.w	r4, r4, #2
 800996c:	ea53 0909 	orrs.w	r9, r3, r9
 8009970:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009974:	d107      	bne.n	8009986 <__ieee754_atan2+0x7e>
 8009976:	2c02      	cmp	r4, #2
 8009978:	d060      	beq.n	8009a3c <__ieee754_atan2+0x134>
 800997a:	2c03      	cmp	r4, #3
 800997c:	d1e5      	bne.n	800994a <__ieee754_atan2+0x42>
 800997e:	a142      	add	r1, pc, #264	; (adr r1, 8009a88 <__ieee754_atan2+0x180>)
 8009980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009984:	e7e1      	b.n	800994a <__ieee754_atan2+0x42>
 8009986:	ea52 0808 	orrs.w	r8, r2, r8
 800998a:	d106      	bne.n	800999a <__ieee754_atan2+0x92>
 800998c:	f1bc 0f00 	cmp.w	ip, #0
 8009990:	da5f      	bge.n	8009a52 <__ieee754_atan2+0x14a>
 8009992:	a13f      	add	r1, pc, #252	; (adr r1, 8009a90 <__ieee754_atan2+0x188>)
 8009994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009998:	e7d7      	b.n	800994a <__ieee754_atan2+0x42>
 800999a:	4572      	cmp	r2, lr
 800999c:	d10f      	bne.n	80099be <__ieee754_atan2+0xb6>
 800999e:	4293      	cmp	r3, r2
 80099a0:	f104 34ff 	add.w	r4, r4, #4294967295
 80099a4:	d107      	bne.n	80099b6 <__ieee754_atan2+0xae>
 80099a6:	2c02      	cmp	r4, #2
 80099a8:	d84c      	bhi.n	8009a44 <__ieee754_atan2+0x13c>
 80099aa:	4b35      	ldr	r3, [pc, #212]	; (8009a80 <__ieee754_atan2+0x178>)
 80099ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80099b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80099b4:	e7c9      	b.n	800994a <__ieee754_atan2+0x42>
 80099b6:	2c02      	cmp	r4, #2
 80099b8:	d848      	bhi.n	8009a4c <__ieee754_atan2+0x144>
 80099ba:	4b32      	ldr	r3, [pc, #200]	; (8009a84 <__ieee754_atan2+0x17c>)
 80099bc:	e7f6      	b.n	80099ac <__ieee754_atan2+0xa4>
 80099be:	4573      	cmp	r3, lr
 80099c0:	d0e4      	beq.n	800998c <__ieee754_atan2+0x84>
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80099c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099cc:	da1e      	bge.n	8009a0c <__ieee754_atan2+0x104>
 80099ce:	2f00      	cmp	r7, #0
 80099d0:	da01      	bge.n	80099d6 <__ieee754_atan2+0xce>
 80099d2:	323c      	adds	r2, #60	; 0x3c
 80099d4:	db1e      	blt.n	8009a14 <__ieee754_atan2+0x10c>
 80099d6:	4632      	mov	r2, r6
 80099d8:	463b      	mov	r3, r7
 80099da:	f7f6 ff3f 	bl	800085c <__aeabi_ddiv>
 80099de:	ec41 0b10 	vmov	d0, r0, r1
 80099e2:	f001 fef5 	bl	800b7d0 <fabs>
 80099e6:	f001 fd53 	bl	800b490 <atan>
 80099ea:	ec51 0b10 	vmov	r0, r1, d0
 80099ee:	2c01      	cmp	r4, #1
 80099f0:	d013      	beq.n	8009a1a <__ieee754_atan2+0x112>
 80099f2:	2c02      	cmp	r4, #2
 80099f4:	d015      	beq.n	8009a22 <__ieee754_atan2+0x11a>
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	d0a7      	beq.n	800994a <__ieee754_atan2+0x42>
 80099fa:	a319      	add	r3, pc, #100	; (adr r3, 8009a60 <__ieee754_atan2+0x158>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 fc4a 	bl	8000298 <__aeabi_dsub>
 8009a04:	a318      	add	r3, pc, #96	; (adr r3, 8009a68 <__ieee754_atan2+0x160>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	e014      	b.n	8009a36 <__ieee754_atan2+0x12e>
 8009a0c:	a118      	add	r1, pc, #96	; (adr r1, 8009a70 <__ieee754_atan2+0x168>)
 8009a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a12:	e7ec      	b.n	80099ee <__ieee754_atan2+0xe6>
 8009a14:	2000      	movs	r0, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	e7e9      	b.n	80099ee <__ieee754_atan2+0xe6>
 8009a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a1e:	4619      	mov	r1, r3
 8009a20:	e793      	b.n	800994a <__ieee754_atan2+0x42>
 8009a22:	a30f      	add	r3, pc, #60	; (adr r3, 8009a60 <__ieee754_atan2+0x158>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fc36 	bl	8000298 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	a10d      	add	r1, pc, #52	; (adr r1, 8009a68 <__ieee754_atan2+0x160>)
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	f7f6 fc2f 	bl	8000298 <__aeabi_dsub>
 8009a3a:	e786      	b.n	800994a <__ieee754_atan2+0x42>
 8009a3c:	a10a      	add	r1, pc, #40	; (adr r1, 8009a68 <__ieee754_atan2+0x160>)
 8009a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a42:	e782      	b.n	800994a <__ieee754_atan2+0x42>
 8009a44:	a10c      	add	r1, pc, #48	; (adr r1, 8009a78 <__ieee754_atan2+0x170>)
 8009a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4a:	e77e      	b.n	800994a <__ieee754_atan2+0x42>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	e77b      	b.n	800994a <__ieee754_atan2+0x42>
 8009a52:	a107      	add	r1, pc, #28	; (adr r1, 8009a70 <__ieee754_atan2+0x168>)
 8009a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a58:	e777      	b.n	800994a <__ieee754_atan2+0x42>
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w
 8009a60:	33145c07 	.word	0x33145c07
 8009a64:	3ca1a626 	.word	0x3ca1a626
 8009a68:	54442d18 	.word	0x54442d18
 8009a6c:	400921fb 	.word	0x400921fb
 8009a70:	54442d18 	.word	0x54442d18
 8009a74:	3ff921fb 	.word	0x3ff921fb
 8009a78:	54442d18 	.word	0x54442d18
 8009a7c:	3fe921fb 	.word	0x3fe921fb
 8009a80:	0800bef0 	.word	0x0800bef0
 8009a84:	0800bf08 	.word	0x0800bf08
 8009a88:	54442d18 	.word	0x54442d18
 8009a8c:	c00921fb 	.word	0xc00921fb
 8009a90:	54442d18 	.word	0x54442d18
 8009a94:	bff921fb 	.word	0xbff921fb
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <__ieee754_pow>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	ed2d 8b06 	vpush	{d8-d10}
 8009aa8:	b089      	sub	sp, #36	; 0x24
 8009aaa:	ed8d 1b00 	vstr	d1, [sp]
 8009aae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009ab2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009ab6:	ea58 0102 	orrs.w	r1, r8, r2
 8009aba:	ec57 6b10 	vmov	r6, r7, d0
 8009abe:	d115      	bne.n	8009aec <__ieee754_pow+0x4c>
 8009ac0:	19b3      	adds	r3, r6, r6
 8009ac2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009ac6:	4152      	adcs	r2, r2
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	4b89      	ldr	r3, [pc, #548]	; (8009cf0 <__ieee754_pow+0x250>)
 8009acc:	4193      	sbcs	r3, r2
 8009ace:	f080 84d2 	bcs.w	800a476 <__ieee754_pow+0x9d6>
 8009ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fbdf 	bl	800029c <__adddf3>
 8009ade:	ec41 0b10 	vmov	d0, r0, r1
 8009ae2:	b009      	add	sp, #36	; 0x24
 8009ae4:	ecbd 8b06 	vpop	{d8-d10}
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	4b81      	ldr	r3, [pc, #516]	; (8009cf4 <__ieee754_pow+0x254>)
 8009aee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009af2:	429c      	cmp	r4, r3
 8009af4:	ee10 aa10 	vmov	sl, s0
 8009af8:	463d      	mov	r5, r7
 8009afa:	dc06      	bgt.n	8009b0a <__ieee754_pow+0x6a>
 8009afc:	d101      	bne.n	8009b02 <__ieee754_pow+0x62>
 8009afe:	2e00      	cmp	r6, #0
 8009b00:	d1e7      	bne.n	8009ad2 <__ieee754_pow+0x32>
 8009b02:	4598      	cmp	r8, r3
 8009b04:	dc01      	bgt.n	8009b0a <__ieee754_pow+0x6a>
 8009b06:	d10f      	bne.n	8009b28 <__ieee754_pow+0x88>
 8009b08:	b172      	cbz	r2, 8009b28 <__ieee754_pow+0x88>
 8009b0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009b0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009b12:	ea55 050a 	orrs.w	r5, r5, sl
 8009b16:	d1dc      	bne.n	8009ad2 <__ieee754_pow+0x32>
 8009b18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b1c:	18db      	adds	r3, r3, r3
 8009b1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009b22:	4152      	adcs	r2, r2
 8009b24:	429d      	cmp	r5, r3
 8009b26:	e7d0      	b.n	8009aca <__ieee754_pow+0x2a>
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	da3b      	bge.n	8009ba4 <__ieee754_pow+0x104>
 8009b2c:	4b72      	ldr	r3, [pc, #456]	; (8009cf8 <__ieee754_pow+0x258>)
 8009b2e:	4598      	cmp	r8, r3
 8009b30:	dc51      	bgt.n	8009bd6 <__ieee754_pow+0x136>
 8009b32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b36:	4598      	cmp	r8, r3
 8009b38:	f340 84ac 	ble.w	800a494 <__ieee754_pow+0x9f4>
 8009b3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b44:	2b14      	cmp	r3, #20
 8009b46:	dd0f      	ble.n	8009b68 <__ieee754_pow+0xc8>
 8009b48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b4c:	fa22 f103 	lsr.w	r1, r2, r3
 8009b50:	fa01 f303 	lsl.w	r3, r1, r3
 8009b54:	4293      	cmp	r3, r2
 8009b56:	f040 849d 	bne.w	800a494 <__ieee754_pow+0x9f4>
 8009b5a:	f001 0101 	and.w	r1, r1, #1
 8009b5e:	f1c1 0302 	rsb	r3, r1, #2
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	b182      	cbz	r2, 8009b88 <__ieee754_pow+0xe8>
 8009b66:	e05f      	b.n	8009c28 <__ieee754_pow+0x188>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d15b      	bne.n	8009c24 <__ieee754_pow+0x184>
 8009b6c:	f1c3 0314 	rsb	r3, r3, #20
 8009b70:	fa48 f103 	asr.w	r1, r8, r3
 8009b74:	fa01 f303 	lsl.w	r3, r1, r3
 8009b78:	4543      	cmp	r3, r8
 8009b7a:	f040 8488 	bne.w	800a48e <__ieee754_pow+0x9ee>
 8009b7e:	f001 0101 	and.w	r1, r1, #1
 8009b82:	f1c1 0302 	rsb	r3, r1, #2
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	4b5c      	ldr	r3, [pc, #368]	; (8009cfc <__ieee754_pow+0x25c>)
 8009b8a:	4598      	cmp	r8, r3
 8009b8c:	d132      	bne.n	8009bf4 <__ieee754_pow+0x154>
 8009b8e:	f1b9 0f00 	cmp.w	r9, #0
 8009b92:	f280 8478 	bge.w	800a486 <__ieee754_pow+0x9e6>
 8009b96:	4959      	ldr	r1, [pc, #356]	; (8009cfc <__ieee754_pow+0x25c>)
 8009b98:	4632      	mov	r2, r6
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	f7f6 fe5d 	bl	800085c <__aeabi_ddiv>
 8009ba2:	e79c      	b.n	8009ade <__ieee754_pow+0x3e>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	d13d      	bne.n	8009c28 <__ieee754_pow+0x188>
 8009bac:	4b51      	ldr	r3, [pc, #324]	; (8009cf4 <__ieee754_pow+0x254>)
 8009bae:	4598      	cmp	r8, r3
 8009bb0:	d1ea      	bne.n	8009b88 <__ieee754_pow+0xe8>
 8009bb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009bb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009bba:	ea53 030a 	orrs.w	r3, r3, sl
 8009bbe:	f000 845a 	beq.w	800a476 <__ieee754_pow+0x9d6>
 8009bc2:	4b4f      	ldr	r3, [pc, #316]	; (8009d00 <__ieee754_pow+0x260>)
 8009bc4:	429c      	cmp	r4, r3
 8009bc6:	dd08      	ble.n	8009bda <__ieee754_pow+0x13a>
 8009bc8:	f1b9 0f00 	cmp.w	r9, #0
 8009bcc:	f2c0 8457 	blt.w	800a47e <__ieee754_pow+0x9de>
 8009bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd4:	e783      	b.n	8009ade <__ieee754_pow+0x3e>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e7e5      	b.n	8009ba6 <__ieee754_pow+0x106>
 8009bda:	f1b9 0f00 	cmp.w	r9, #0
 8009bde:	f04f 0000 	mov.w	r0, #0
 8009be2:	f04f 0100 	mov.w	r1, #0
 8009be6:	f6bf af7a 	bge.w	8009ade <__ieee754_pow+0x3e>
 8009bea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009bee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bf2:	e774      	b.n	8009ade <__ieee754_pow+0x3e>
 8009bf4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009bf8:	d106      	bne.n	8009c08 <__ieee754_pow+0x168>
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 fd01 	bl	8000608 <__aeabi_dmul>
 8009c06:	e76a      	b.n	8009ade <__ieee754_pow+0x3e>
 8009c08:	4b3e      	ldr	r3, [pc, #248]	; (8009d04 <__ieee754_pow+0x264>)
 8009c0a:	4599      	cmp	r9, r3
 8009c0c:	d10c      	bne.n	8009c28 <__ieee754_pow+0x188>
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	db0a      	blt.n	8009c28 <__ieee754_pow+0x188>
 8009c12:	ec47 6b10 	vmov	d0, r6, r7
 8009c16:	b009      	add	sp, #36	; 0x24
 8009c18:	ecbd 8b06 	vpop	{d8-d10}
 8009c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	f000 be7a 	b.w	800a918 <__ieee754_sqrt>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	ec47 6b10 	vmov	d0, r6, r7
 8009c2c:	f001 fdd0 	bl	800b7d0 <fabs>
 8009c30:	ec51 0b10 	vmov	r0, r1, d0
 8009c34:	f1ba 0f00 	cmp.w	sl, #0
 8009c38:	d129      	bne.n	8009c8e <__ieee754_pow+0x1ee>
 8009c3a:	b124      	cbz	r4, 8009c46 <__ieee754_pow+0x1a6>
 8009c3c:	4b2f      	ldr	r3, [pc, #188]	; (8009cfc <__ieee754_pow+0x25c>)
 8009c3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d123      	bne.n	8009c8e <__ieee754_pow+0x1ee>
 8009c46:	f1b9 0f00 	cmp.w	r9, #0
 8009c4a:	da05      	bge.n	8009c58 <__ieee754_pow+0x1b8>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	2000      	movs	r0, #0
 8009c52:	492a      	ldr	r1, [pc, #168]	; (8009cfc <__ieee754_pow+0x25c>)
 8009c54:	f7f6 fe02 	bl	800085c <__aeabi_ddiv>
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	f6bf af40 	bge.w	8009ade <__ieee754_pow+0x3e>
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c68:	4323      	orrs	r3, r4
 8009c6a:	d108      	bne.n	8009c7e <__ieee754_pow+0x1de>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4610      	mov	r0, r2
 8009c72:	4619      	mov	r1, r3
 8009c74:	f7f6 fb10 	bl	8000298 <__aeabi_dsub>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e78f      	b.n	8009b9e <__ieee754_pow+0xfe>
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	f47f af2c 	bne.w	8009ade <__ieee754_pow+0x3e>
 8009c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	e727      	b.n	8009ade <__ieee754_pow+0x3e>
 8009c8e:	0feb      	lsrs	r3, r5, #31
 8009c90:	3b01      	subs	r3, #1
 8009c92:	9306      	str	r3, [sp, #24]
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	9b04      	ldr	r3, [sp, #16]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	d102      	bne.n	8009ca2 <__ieee754_pow+0x202>
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	e7e6      	b.n	8009c70 <__ieee754_pow+0x1d0>
 8009ca2:	4b19      	ldr	r3, [pc, #100]	; (8009d08 <__ieee754_pow+0x268>)
 8009ca4:	4598      	cmp	r8, r3
 8009ca6:	f340 80fb 	ble.w	8009ea0 <__ieee754_pow+0x400>
 8009caa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009cae:	4598      	cmp	r8, r3
 8009cb0:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <__ieee754_pow+0x260>)
 8009cb2:	dd0c      	ble.n	8009cce <__ieee754_pow+0x22e>
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	dc0f      	bgt.n	8009cd8 <__ieee754_pow+0x238>
 8009cb8:	f1b9 0f00 	cmp.w	r9, #0
 8009cbc:	da0f      	bge.n	8009cde <__ieee754_pow+0x23e>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	b009      	add	sp, #36	; 0x24
 8009cc2:	ecbd 8b06 	vpop	{d8-d10}
 8009cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f001 bbd6 	b.w	800b47a <__math_oflow>
 8009cce:	429c      	cmp	r4, r3
 8009cd0:	dbf2      	blt.n	8009cb8 <__ieee754_pow+0x218>
 8009cd2:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <__ieee754_pow+0x25c>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	dd19      	ble.n	8009d0c <__ieee754_pow+0x26c>
 8009cd8:	f1b9 0f00 	cmp.w	r9, #0
 8009cdc:	dcef      	bgt.n	8009cbe <__ieee754_pow+0x21e>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	b009      	add	sp, #36	; 0x24
 8009ce2:	ecbd 8b06 	vpop	{d8-d10}
 8009ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f001 bbbd 	b.w	800b468 <__math_uflow>
 8009cee:	bf00      	nop
 8009cf0:	fff00000 	.word	0xfff00000
 8009cf4:	7ff00000 	.word	0x7ff00000
 8009cf8:	433fffff 	.word	0x433fffff
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	3fefffff 	.word	0x3fefffff
 8009d04:	3fe00000 	.word	0x3fe00000
 8009d08:	41e00000 	.word	0x41e00000
 8009d0c:	4b60      	ldr	r3, [pc, #384]	; (8009e90 <__ieee754_pow+0x3f0>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f7f6 fac2 	bl	8000298 <__aeabi_dsub>
 8009d14:	a354      	add	r3, pc, #336	; (adr r3, 8009e68 <__ieee754_pow+0x3c8>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	f7f6 fc73 	bl	8000608 <__aeabi_dmul>
 8009d22:	a353      	add	r3, pc, #332	; (adr r3, 8009e70 <__ieee754_pow+0x3d0>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	4606      	mov	r6, r0
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 fc6a 	bl	8000608 <__aeabi_dmul>
 8009d34:	4b57      	ldr	r3, [pc, #348]	; (8009e94 <__ieee754_pow+0x3f4>)
 8009d36:	4682      	mov	sl, r0
 8009d38:	468b      	mov	fp, r1
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fc62 	bl	8000608 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	a14b      	add	r1, pc, #300	; (adr r1, 8009e78 <__ieee754_pow+0x3d8>)
 8009d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d4e:	f7f6 faa3 	bl	8000298 <__aeabi_dsub>
 8009d52:	4622      	mov	r2, r4
 8009d54:	462b      	mov	r3, r5
 8009d56:	f7f6 fc57 	bl	8000608 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	2000      	movs	r0, #0
 8009d60:	494d      	ldr	r1, [pc, #308]	; (8009e98 <__ieee754_pow+0x3f8>)
 8009d62:	f7f6 fa99 	bl	8000298 <__aeabi_dsub>
 8009d66:	4622      	mov	r2, r4
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4689      	mov	r9, r1
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 fc49 	bl	8000608 <__aeabi_dmul>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fc43 	bl	8000608 <__aeabi_dmul>
 8009d82:	a33f      	add	r3, pc, #252	; (adr r3, 8009e80 <__ieee754_pow+0x3e0>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f7f6 fc3e 	bl	8000608 <__aeabi_dmul>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4650      	mov	r0, sl
 8009d92:	4659      	mov	r1, fp
 8009d94:	f7f6 fa80 	bl	8000298 <__aeabi_dsub>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	4630      	mov	r0, r6
 8009da2:	4639      	mov	r1, r7
 8009da4:	f7f6 fa7a 	bl	800029c <__adddf3>
 8009da8:	2000      	movs	r0, #0
 8009daa:	4632      	mov	r2, r6
 8009dac:	463b      	mov	r3, r7
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	f7f6 fa71 	bl	8000298 <__aeabi_dsub>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4640      	mov	r0, r8
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	f7f6 fa6b 	bl	8000298 <__aeabi_dsub>
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	4682      	mov	sl, r0
 8009dcc:	468b      	mov	fp, r1
 8009dce:	f040 81e7 	bne.w	800a1a0 <__ieee754_pow+0x700>
 8009dd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009e88 <__ieee754_pow+0x3e8>
 8009dd6:	eeb0 8a47 	vmov.f32	s16, s14
 8009dda:	eef0 8a67 	vmov.f32	s17, s15
 8009dde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009de2:	2600      	movs	r6, #0
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dec:	f7f6 fa54 	bl	8000298 <__aeabi_dsub>
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	f7f6 fc08 	bl	8000608 <__aeabi_dmul>
 8009df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	4689      	mov	r9, r1
 8009e00:	4650      	mov	r0, sl
 8009e02:	4659      	mov	r1, fp
 8009e04:	f7f6 fc00 	bl	8000608 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	f7f6 fa44 	bl	800029c <__adddf3>
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4689      	mov	r9, r1
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 fbf2 	bl	8000608 <__aeabi_dmul>
 8009e24:	460b      	mov	r3, r1
 8009e26:	4604      	mov	r4, r0
 8009e28:	460d      	mov	r5, r1
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4640      	mov	r0, r8
 8009e30:	f7f6 fa34 	bl	800029c <__adddf3>
 8009e34:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <__ieee754_pow+0x3fc>)
 8009e36:	4299      	cmp	r1, r3
 8009e38:	ec45 4b19 	vmov	d9, r4, r5
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	460f      	mov	r7, r1
 8009e40:	468b      	mov	fp, r1
 8009e42:	f340 82f1 	ble.w	800a428 <__ieee754_pow+0x988>
 8009e46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009e4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009e4e:	4303      	orrs	r3, r0
 8009e50:	f000 81e4 	beq.w	800a21c <__ieee754_pow+0x77c>
 8009e54:	ec51 0b18 	vmov	r0, r1, d8
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f7f6 fe46 	bl	8000aec <__aeabi_dcmplt>
 8009e60:	3800      	subs	r0, #0
 8009e62:	bf18      	it	ne
 8009e64:	2001      	movne	r0, #1
 8009e66:	e72b      	b.n	8009cc0 <__ieee754_pow+0x220>
 8009e68:	60000000 	.word	0x60000000
 8009e6c:	3ff71547 	.word	0x3ff71547
 8009e70:	f85ddf44 	.word	0xf85ddf44
 8009e74:	3e54ae0b 	.word	0x3e54ae0b
 8009e78:	55555555 	.word	0x55555555
 8009e7c:	3fd55555 	.word	0x3fd55555
 8009e80:	652b82fe 	.word	0x652b82fe
 8009e84:	3ff71547 	.word	0x3ff71547
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	bff00000 	.word	0xbff00000
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	3fd00000 	.word	0x3fd00000
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	408fffff 	.word	0x408fffff
 8009ea0:	4bd5      	ldr	r3, [pc, #852]	; (800a1f8 <__ieee754_pow+0x758>)
 8009ea2:	402b      	ands	r3, r5
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	b92b      	cbnz	r3, 8009eb4 <__ieee754_pow+0x414>
 8009ea8:	4bd4      	ldr	r3, [pc, #848]	; (800a1fc <__ieee754_pow+0x75c>)
 8009eaa:	f7f6 fbad 	bl	8000608 <__aeabi_dmul>
 8009eae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	1523      	asrs	r3, r4, #20
 8009eb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009eba:	4413      	add	r3, r2
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4bd0      	ldr	r3, [pc, #832]	; (800a200 <__ieee754_pow+0x760>)
 8009ec0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ec4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ece:	dd08      	ble.n	8009ee2 <__ieee754_pow+0x442>
 8009ed0:	4bcc      	ldr	r3, [pc, #816]	; (800a204 <__ieee754_pow+0x764>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	f340 8162 	ble.w	800a19c <__ieee754_pow+0x6fc>
 8009ed8:	9b05      	ldr	r3, [sp, #20]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9305      	str	r3, [sp, #20]
 8009ede:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	00e3      	lsls	r3, r4, #3
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	4bc7      	ldr	r3, [pc, #796]	; (800a208 <__ieee754_pow+0x768>)
 8009eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eee:	ed93 7b00 	vldr	d7, [r3]
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	ec53 2b17 	vmov	r2, r3, d7
 8009ef8:	eeb0 9a47 	vmov.f32	s18, s14
 8009efc:	eef0 9a67 	vmov.f32	s19, s15
 8009f00:	4682      	mov	sl, r0
 8009f02:	f7f6 f9c9 	bl	8000298 <__aeabi_dsub>
 8009f06:	4652      	mov	r2, sl
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	ec51 0b19 	vmov	r0, r1, d9
 8009f12:	f7f6 f9c3 	bl	800029c <__adddf3>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	49bb      	ldr	r1, [pc, #748]	; (800a20c <__ieee754_pow+0x76c>)
 8009f1e:	f7f6 fc9d 	bl	800085c <__aeabi_ddiv>
 8009f22:	ec41 0b1a 	vmov	d10, r0, r1
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	2300      	movs	r3, #0
 8009f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f3e:	46ab      	mov	fp, r5
 8009f40:	106d      	asrs	r5, r5, #1
 8009f42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009f46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009f4a:	ec41 0b18 	vmov	d8, r0, r1
 8009f4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009f52:	2200      	movs	r2, #0
 8009f54:	4640      	mov	r0, r8
 8009f56:	4649      	mov	r1, r9
 8009f58:	4614      	mov	r4, r2
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	f7f6 fb54 	bl	8000608 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4630      	mov	r0, r6
 8009f66:	4639      	mov	r1, r7
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	ec53 2b19 	vmov	r2, r3, d9
 8009f70:	4606      	mov	r6, r0
 8009f72:	460f      	mov	r7, r1
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 f98e 	bl	8000298 <__aeabi_dsub>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4650      	mov	r0, sl
 8009f82:	4659      	mov	r1, fp
 8009f84:	f7f6 f988 	bl	8000298 <__aeabi_dsub>
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 f97e 	bl	8000298 <__aeabi_dsub>
 8009f9c:	ec53 2b1a 	vmov	r2, r3, d10
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	ec53 2b18 	vmov	r2, r3, d8
 8009fa8:	ec41 0b19 	vmov	d9, r0, r1
 8009fac:	ec51 0b18 	vmov	r0, r1, d8
 8009fb0:	f7f6 fb2a 	bl	8000608 <__aeabi_dmul>
 8009fb4:	a37c      	add	r3, pc, #496	; (adr r3, 800a1a8 <__ieee754_pow+0x708>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	4604      	mov	r4, r0
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	f7f6 fb23 	bl	8000608 <__aeabi_dmul>
 8009fc2:	a37b      	add	r3, pc, #492	; (adr r3, 800a1b0 <__ieee754_pow+0x710>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f968 	bl	800029c <__adddf3>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	a378      	add	r3, pc, #480	; (adr r3, 800a1b8 <__ieee754_pow+0x718>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f95f 	bl	800029c <__adddf3>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	f7f6 fb11 	bl	8000608 <__aeabi_dmul>
 8009fe6:	a376      	add	r3, pc, #472	; (adr r3, 800a1c0 <__ieee754_pow+0x720>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 f956 	bl	800029c <__adddf3>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	f7f6 fb08 	bl	8000608 <__aeabi_dmul>
 8009ff8:	a373      	add	r3, pc, #460	; (adr r3, 800a1c8 <__ieee754_pow+0x728>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 f94d 	bl	800029c <__adddf3>
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f7f6 faff 	bl	8000608 <__aeabi_dmul>
 800a00a:	a371      	add	r3, pc, #452	; (adr r3, 800a1d0 <__ieee754_pow+0x730>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 f944 	bl	800029c <__adddf3>
 800a014:	4622      	mov	r2, r4
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	462b      	mov	r3, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 faf2 	bl	8000608 <__aeabi_dmul>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	f7f6 faec 	bl	8000608 <__aeabi_dmul>
 800a030:	4642      	mov	r2, r8
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	464b      	mov	r3, r9
 800a038:	ec51 0b18 	vmov	r0, r1, d8
 800a03c:	f7f6 f92e 	bl	800029c <__adddf3>
 800a040:	ec53 2b19 	vmov	r2, r3, d9
 800a044:	f7f6 fae0 	bl	8000608 <__aeabi_dmul>
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	f7f6 f926 	bl	800029c <__adddf3>
 800a050:	4642      	mov	r2, r8
 800a052:	4682      	mov	sl, r0
 800a054:	468b      	mov	fp, r1
 800a056:	464b      	mov	r3, r9
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 fad4 	bl	8000608 <__aeabi_dmul>
 800a060:	4b6b      	ldr	r3, [pc, #428]	; (800a210 <__ieee754_pow+0x770>)
 800a062:	2200      	movs	r2, #0
 800a064:	4606      	mov	r6, r0
 800a066:	460f      	mov	r7, r1
 800a068:	f7f6 f918 	bl	800029c <__adddf3>
 800a06c:	4652      	mov	r2, sl
 800a06e:	465b      	mov	r3, fp
 800a070:	f7f6 f914 	bl	800029c <__adddf3>
 800a074:	2000      	movs	r0, #0
 800a076:	4604      	mov	r4, r0
 800a078:	460d      	mov	r5, r1
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4640      	mov	r0, r8
 800a080:	4649      	mov	r1, r9
 800a082:	f7f6 fac1 	bl	8000608 <__aeabi_dmul>
 800a086:	4b62      	ldr	r3, [pc, #392]	; (800a210 <__ieee754_pow+0x770>)
 800a088:	4680      	mov	r8, r0
 800a08a:	4689      	mov	r9, r1
 800a08c:	2200      	movs	r2, #0
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 f901 	bl	8000298 <__aeabi_dsub>
 800a096:	4632      	mov	r2, r6
 800a098:	463b      	mov	r3, r7
 800a09a:	f7f6 f8fd 	bl	8000298 <__aeabi_dsub>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	f7f6 f8f7 	bl	8000298 <__aeabi_dsub>
 800a0aa:	ec53 2b18 	vmov	r2, r3, d8
 800a0ae:	f7f6 faab 	bl	8000608 <__aeabi_dmul>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	462b      	mov	r3, r5
 800a0ba:	ec51 0b19 	vmov	r0, r1, d9
 800a0be:	f7f6 faa3 	bl	8000608 <__aeabi_dmul>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 f8e7 	bl	800029c <__adddf3>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	4649      	mov	r1, r9
 800a0da:	f7f6 f8df 	bl	800029c <__adddf3>
 800a0de:	a33e      	add	r3, pc, #248	; (adr r3, 800a1d8 <__ieee754_pow+0x738>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	f7f6 fa8d 	bl	8000608 <__aeabi_dmul>
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	ec41 0b18 	vmov	d8, r0, r1
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f7f6 f8cd 	bl	8000298 <__aeabi_dsub>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f8c7 	bl	8000298 <__aeabi_dsub>
 800a10a:	a335      	add	r3, pc, #212	; (adr r3, 800a1e0 <__ieee754_pow+0x740>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 fa7a 	bl	8000608 <__aeabi_dmul>
 800a114:	a334      	add	r3, pc, #208	; (adr r3, 800a1e8 <__ieee754_pow+0x748>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 fa71 	bl	8000608 <__aeabi_dmul>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4630      	mov	r0, r6
 800a12c:	4639      	mov	r1, r7
 800a12e:	f7f6 f8b5 	bl	800029c <__adddf3>
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	4b37      	ldr	r3, [pc, #220]	; (800a214 <__ieee754_pow+0x774>)
 800a136:	4413      	add	r3, r2
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f8ae 	bl	800029c <__adddf3>
 800a140:	4682      	mov	sl, r0
 800a142:	9805      	ldr	r0, [sp, #20]
 800a144:	468b      	mov	fp, r1
 800a146:	f7f6 f9f5 	bl	8000534 <__aeabi_i2d>
 800a14a:	9a07      	ldr	r2, [sp, #28]
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <__ieee754_pow+0x778>)
 800a14e:	4413      	add	r3, r2
 800a150:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	4652      	mov	r2, sl
 800a15a:	465b      	mov	r3, fp
 800a15c:	ec51 0b18 	vmov	r0, r1, d8
 800a160:	f7f6 f89c 	bl	800029c <__adddf3>
 800a164:	4642      	mov	r2, r8
 800a166:	464b      	mov	r3, r9
 800a168:	f7f6 f898 	bl	800029c <__adddf3>
 800a16c:	4632      	mov	r2, r6
 800a16e:	463b      	mov	r3, r7
 800a170:	f7f6 f894 	bl	800029c <__adddf3>
 800a174:	2000      	movs	r0, #0
 800a176:	4632      	mov	r2, r6
 800a178:	463b      	mov	r3, r7
 800a17a:	4604      	mov	r4, r0
 800a17c:	460d      	mov	r5, r1
 800a17e:	f7f6 f88b 	bl	8000298 <__aeabi_dsub>
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	f7f6 f887 	bl	8000298 <__aeabi_dsub>
 800a18a:	ec53 2b18 	vmov	r2, r3, d8
 800a18e:	f7f6 f883 	bl	8000298 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4650      	mov	r0, sl
 800a198:	4659      	mov	r1, fp
 800a19a:	e610      	b.n	8009dbe <__ieee754_pow+0x31e>
 800a19c:	2401      	movs	r4, #1
 800a19e:	e6a1      	b.n	8009ee4 <__ieee754_pow+0x444>
 800a1a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a1f0 <__ieee754_pow+0x750>
 800a1a4:	e617      	b.n	8009dd6 <__ieee754_pow+0x336>
 800a1a6:	bf00      	nop
 800a1a8:	4a454eef 	.word	0x4a454eef
 800a1ac:	3fca7e28 	.word	0x3fca7e28
 800a1b0:	93c9db65 	.word	0x93c9db65
 800a1b4:	3fcd864a 	.word	0x3fcd864a
 800a1b8:	a91d4101 	.word	0xa91d4101
 800a1bc:	3fd17460 	.word	0x3fd17460
 800a1c0:	518f264d 	.word	0x518f264d
 800a1c4:	3fd55555 	.word	0x3fd55555
 800a1c8:	db6fabff 	.word	0xdb6fabff
 800a1cc:	3fdb6db6 	.word	0x3fdb6db6
 800a1d0:	33333303 	.word	0x33333303
 800a1d4:	3fe33333 	.word	0x3fe33333
 800a1d8:	e0000000 	.word	0xe0000000
 800a1dc:	3feec709 	.word	0x3feec709
 800a1e0:	dc3a03fd 	.word	0xdc3a03fd
 800a1e4:	3feec709 	.word	0x3feec709
 800a1e8:	145b01f5 	.word	0x145b01f5
 800a1ec:	be3e2fe0 	.word	0xbe3e2fe0
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	3ff00000 	.word	0x3ff00000
 800a1f8:	7ff00000 	.word	0x7ff00000
 800a1fc:	43400000 	.word	0x43400000
 800a200:	0003988e 	.word	0x0003988e
 800a204:	000bb679 	.word	0x000bb679
 800a208:	0800bf20 	.word	0x0800bf20
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	40080000 	.word	0x40080000
 800a214:	0800bf40 	.word	0x0800bf40
 800a218:	0800bf30 	.word	0x0800bf30
 800a21c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a4f4 <__ieee754_pow+0xa54>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4640      	mov	r0, r8
 800a224:	4649      	mov	r1, r9
 800a226:	f7f6 f839 	bl	800029c <__adddf3>
 800a22a:	4622      	mov	r2, r4
 800a22c:	ec41 0b1a 	vmov	d10, r0, r1
 800a230:	462b      	mov	r3, r5
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f82f 	bl	8000298 <__aeabi_dsub>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	ec51 0b1a 	vmov	r0, r1, d10
 800a242:	f7f6 fc71 	bl	8000b28 <__aeabi_dcmpgt>
 800a246:	2800      	cmp	r0, #0
 800a248:	f47f ae04 	bne.w	8009e54 <__ieee754_pow+0x3b4>
 800a24c:	4aa4      	ldr	r2, [pc, #656]	; (800a4e0 <__ieee754_pow+0xa40>)
 800a24e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a252:	4293      	cmp	r3, r2
 800a254:	f340 8108 	ble.w	800a468 <__ieee754_pow+0x9c8>
 800a258:	151b      	asrs	r3, r3, #20
 800a25a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a25e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a262:	fa4a f303 	asr.w	r3, sl, r3
 800a266:	445b      	add	r3, fp
 800a268:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a26c:	4e9d      	ldr	r6, [pc, #628]	; (800a4e4 <__ieee754_pow+0xa44>)
 800a26e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a272:	4116      	asrs	r6, r2
 800a274:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a278:	2000      	movs	r0, #0
 800a27a:	ea23 0106 	bic.w	r1, r3, r6
 800a27e:	f1c2 0214 	rsb	r2, r2, #20
 800a282:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a286:	fa4a fa02 	asr.w	sl, sl, r2
 800a28a:	f1bb 0f00 	cmp.w	fp, #0
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	bfb8      	it	lt
 800a298:	f1ca 0a00 	rsblt	sl, sl, #0
 800a29c:	f7f5 fffc 	bl	8000298 <__aeabi_dsub>
 800a2a0:	ec41 0b19 	vmov	d9, r0, r1
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	ec51 0b19 	vmov	r0, r1, d9
 800a2ac:	f7f5 fff6 	bl	800029c <__adddf3>
 800a2b0:	a37b      	add	r3, pc, #492	; (adr r3, 800a4a0 <__ieee754_pow+0xa00>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	f7f6 f9a4 	bl	8000608 <__aeabi_dmul>
 800a2c0:	ec53 2b19 	vmov	r2, r3, d9
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7f5 ffe4 	bl	8000298 <__aeabi_dsub>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f5 ffde 	bl	8000298 <__aeabi_dsub>
 800a2dc:	a372      	add	r3, pc, #456	; (adr r3, 800a4a8 <__ieee754_pow+0xa08>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f6 f991 	bl	8000608 <__aeabi_dmul>
 800a2e6:	a372      	add	r3, pc, #456	; (adr r3, 800a4b0 <__ieee754_pow+0xa10>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	4689      	mov	r9, r1
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 f988 	bl	8000608 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f5 ffcc 	bl	800029c <__adddf3>
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4630      	mov	r0, r6
 800a30e:	4639      	mov	r1, r7
 800a310:	f7f5 ffc4 	bl	800029c <__adddf3>
 800a314:	4632      	mov	r2, r6
 800a316:	463b      	mov	r3, r7
 800a318:	4680      	mov	r8, r0
 800a31a:	4689      	mov	r9, r1
 800a31c:	f7f5 ffbc 	bl	8000298 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f5 ffb6 	bl	8000298 <__aeabi_dsub>
 800a32c:	4642      	mov	r2, r8
 800a32e:	4606      	mov	r6, r0
 800a330:	460f      	mov	r7, r1
 800a332:	464b      	mov	r3, r9
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f6 f966 	bl	8000608 <__aeabi_dmul>
 800a33c:	a35e      	add	r3, pc, #376	; (adr r3, 800a4b8 <__ieee754_pow+0xa18>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	a35d      	add	r3, pc, #372	; (adr r3, 800a4c0 <__ieee754_pow+0xa20>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffa2 	bl	8000298 <__aeabi_dsub>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	a35a      	add	r3, pc, #360	; (adr r3, 800a4c8 <__ieee754_pow+0xa28>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff9b 	bl	800029c <__adddf3>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	a358      	add	r3, pc, #352	; (adr r3, 800a4d0 <__ieee754_pow+0xa30>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	a355      	add	r3, pc, #340	; (adr r3, 800a4d8 <__ieee754_pow+0xa38>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4640      	mov	r0, r8
 800a398:	4649      	mov	r1, r9
 800a39a:	f7f5 ff7d 	bl	8000298 <__aeabi_dsub>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	ec41 0b19 	vmov	d9, r0, r1
 800a3b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 ff6c 	bl	8000298 <__aeabi_dsub>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	ec51 0b19 	vmov	r0, r1, d9
 800a3c8:	f7f6 fa48 	bl	800085c <__aeabi_ddiv>
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	f7f6 f916 	bl	8000608 <__aeabi_dmul>
 800a3dc:	4632      	mov	r2, r6
 800a3de:	463b      	mov	r3, r7
 800a3e0:	f7f5 ff5c 	bl	800029c <__adddf3>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f5 ff54 	bl	8000298 <__aeabi_dsub>
 800a3f0:	4642      	mov	r2, r8
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	f7f5 ff50 	bl	8000298 <__aeabi_dsub>
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	493a      	ldr	r1, [pc, #232]	; (800a4e8 <__ieee754_pow+0xa48>)
 800a3fe:	2000      	movs	r0, #0
 800a400:	f7f5 ff4a 	bl	8000298 <__aeabi_dsub>
 800a404:	ec41 0b10 	vmov	d0, r0, r1
 800a408:	ee10 3a90 	vmov	r3, s1
 800a40c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a414:	da2b      	bge.n	800a46e <__ieee754_pow+0x9ce>
 800a416:	4650      	mov	r0, sl
 800a418:	f001 fa6e 	bl	800b8f8 <scalbn>
 800a41c:	ec51 0b10 	vmov	r0, r1, d0
 800a420:	ec53 2b18 	vmov	r2, r3, d8
 800a424:	f7ff bbed 	b.w	8009c02 <__ieee754_pow+0x162>
 800a428:	4b30      	ldr	r3, [pc, #192]	; (800a4ec <__ieee754_pow+0xa4c>)
 800a42a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a42e:	429e      	cmp	r6, r3
 800a430:	f77f af0c 	ble.w	800a24c <__ieee754_pow+0x7ac>
 800a434:	4b2e      	ldr	r3, [pc, #184]	; (800a4f0 <__ieee754_pow+0xa50>)
 800a436:	440b      	add	r3, r1
 800a438:	4303      	orrs	r3, r0
 800a43a:	d009      	beq.n	800a450 <__ieee754_pow+0x9b0>
 800a43c:	ec51 0b18 	vmov	r0, r1, d8
 800a440:	2200      	movs	r2, #0
 800a442:	2300      	movs	r3, #0
 800a444:	f7f6 fb52 	bl	8000aec <__aeabi_dcmplt>
 800a448:	3800      	subs	r0, #0
 800a44a:	bf18      	it	ne
 800a44c:	2001      	movne	r0, #1
 800a44e:	e447      	b.n	8009ce0 <__ieee754_pow+0x240>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	f7f5 ff20 	bl	8000298 <__aeabi_dsub>
 800a458:	4642      	mov	r2, r8
 800a45a:	464b      	mov	r3, r9
 800a45c:	f7f6 fb5a 	bl	8000b14 <__aeabi_dcmpge>
 800a460:	2800      	cmp	r0, #0
 800a462:	f43f aef3 	beq.w	800a24c <__ieee754_pow+0x7ac>
 800a466:	e7e9      	b.n	800a43c <__ieee754_pow+0x99c>
 800a468:	f04f 0a00 	mov.w	sl, #0
 800a46c:	e71a      	b.n	800a2a4 <__ieee754_pow+0x804>
 800a46e:	ec51 0b10 	vmov	r0, r1, d0
 800a472:	4619      	mov	r1, r3
 800a474:	e7d4      	b.n	800a420 <__ieee754_pow+0x980>
 800a476:	491c      	ldr	r1, [pc, #112]	; (800a4e8 <__ieee754_pow+0xa48>)
 800a478:	2000      	movs	r0, #0
 800a47a:	f7ff bb30 	b.w	8009ade <__ieee754_pow+0x3e>
 800a47e:	2000      	movs	r0, #0
 800a480:	2100      	movs	r1, #0
 800a482:	f7ff bb2c 	b.w	8009ade <__ieee754_pow+0x3e>
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7ff bb28 	b.w	8009ade <__ieee754_pow+0x3e>
 800a48e:	9204      	str	r2, [sp, #16]
 800a490:	f7ff bb7a 	b.w	8009b88 <__ieee754_pow+0xe8>
 800a494:	2300      	movs	r3, #0
 800a496:	f7ff bb64 	b.w	8009b62 <__ieee754_pow+0xc2>
 800a49a:	bf00      	nop
 800a49c:	f3af 8000 	nop.w
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	3fe62e43 	.word	0x3fe62e43
 800a4a8:	fefa39ef 	.word	0xfefa39ef
 800a4ac:	3fe62e42 	.word	0x3fe62e42
 800a4b0:	0ca86c39 	.word	0x0ca86c39
 800a4b4:	be205c61 	.word	0xbe205c61
 800a4b8:	72bea4d0 	.word	0x72bea4d0
 800a4bc:	3e663769 	.word	0x3e663769
 800a4c0:	c5d26bf1 	.word	0xc5d26bf1
 800a4c4:	3ebbbd41 	.word	0x3ebbbd41
 800a4c8:	af25de2c 	.word	0xaf25de2c
 800a4cc:	3f11566a 	.word	0x3f11566a
 800a4d0:	16bebd93 	.word	0x16bebd93
 800a4d4:	3f66c16c 	.word	0x3f66c16c
 800a4d8:	5555553e 	.word	0x5555553e
 800a4dc:	3fc55555 	.word	0x3fc55555
 800a4e0:	3fe00000 	.word	0x3fe00000
 800a4e4:	000fffff 	.word	0x000fffff
 800a4e8:	3ff00000 	.word	0x3ff00000
 800a4ec:	4090cbff 	.word	0x4090cbff
 800a4f0:	3f6f3400 	.word	0x3f6f3400
 800a4f4:	652b82fe 	.word	0x652b82fe
 800a4f8:	3c971547 	.word	0x3c971547
 800a4fc:	00000000 	.word	0x00000000

0800a500 <__ieee754_rem_pio2>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	ed2d 8b02 	vpush	{d8}
 800a508:	ec55 4b10 	vmov	r4, r5, d0
 800a50c:	4bca      	ldr	r3, [pc, #808]	; (800a838 <__ieee754_rem_pio2+0x338>)
 800a50e:	b08b      	sub	sp, #44	; 0x2c
 800a510:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a514:	4598      	cmp	r8, r3
 800a516:	4682      	mov	sl, r0
 800a518:	9502      	str	r5, [sp, #8]
 800a51a:	dc08      	bgt.n	800a52e <__ieee754_rem_pio2+0x2e>
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	ed80 0b00 	vstr	d0, [r0]
 800a524:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a528:	f04f 0b00 	mov.w	fp, #0
 800a52c:	e028      	b.n	800a580 <__ieee754_rem_pio2+0x80>
 800a52e:	4bc3      	ldr	r3, [pc, #780]	; (800a83c <__ieee754_rem_pio2+0x33c>)
 800a530:	4598      	cmp	r8, r3
 800a532:	dc78      	bgt.n	800a626 <__ieee754_rem_pio2+0x126>
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	4ec2      	ldr	r6, [pc, #776]	; (800a840 <__ieee754_rem_pio2+0x340>)
 800a538:	2b00      	cmp	r3, #0
 800a53a:	ee10 0a10 	vmov	r0, s0
 800a53e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a800 <__ieee754_rem_pio2+0x300>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	4629      	mov	r1, r5
 800a546:	dd39      	ble.n	800a5bc <__ieee754_rem_pio2+0xbc>
 800a548:	f7f5 fea6 	bl	8000298 <__aeabi_dsub>
 800a54c:	45b0      	cmp	r8, r6
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	d01b      	beq.n	800a58c <__ieee754_rem_pio2+0x8c>
 800a554:	a3ac      	add	r3, pc, #688	; (adr r3, 800a808 <__ieee754_rem_pio2+0x308>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f5 fe9d 	bl	8000298 <__aeabi_dsub>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	e9ca 2300 	strd	r2, r3, [sl]
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe95 	bl	8000298 <__aeabi_dsub>
 800a56e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a808 <__ieee754_rem_pio2+0x308>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f5 fe90 	bl	8000298 <__aeabi_dsub>
 800a578:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a57c:	f04f 0b01 	mov.w	fp, #1
 800a580:	4658      	mov	r0, fp
 800a582:	b00b      	add	sp, #44	; 0x2c
 800a584:	ecbd 8b02 	vpop	{d8}
 800a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a810 <__ieee754_rem_pio2+0x310>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7f5 fe81 	bl	8000298 <__aeabi_dsub>
 800a596:	a3a0      	add	r3, pc, #640	; (adr r3, 800a818 <__ieee754_rem_pio2+0x318>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	4604      	mov	r4, r0
 800a59e:	460d      	mov	r5, r1
 800a5a0:	f7f5 fe7a 	bl	8000298 <__aeabi_dsub>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	e9ca 2300 	strd	r2, r3, [sl]
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f7f5 fe72 	bl	8000298 <__aeabi_dsub>
 800a5b4:	a398      	add	r3, pc, #608	; (adr r3, 800a818 <__ieee754_rem_pio2+0x318>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	e7db      	b.n	800a574 <__ieee754_rem_pio2+0x74>
 800a5bc:	f7f5 fe6e 	bl	800029c <__adddf3>
 800a5c0:	45b0      	cmp	r8, r6
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	460d      	mov	r5, r1
 800a5c6:	d016      	beq.n	800a5f6 <__ieee754_rem_pio2+0xf6>
 800a5c8:	a38f      	add	r3, pc, #572	; (adr r3, 800a808 <__ieee754_rem_pio2+0x308>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 fe65 	bl	800029c <__adddf3>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	e9ca 2300 	strd	r2, r3, [sl]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7f5 fe5b 	bl	8000298 <__aeabi_dsub>
 800a5e2:	a389      	add	r3, pc, #548	; (adr r3, 800a808 <__ieee754_rem_pio2+0x308>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 fe58 	bl	800029c <__adddf3>
 800a5ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a5f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5f4:	e7c4      	b.n	800a580 <__ieee754_rem_pio2+0x80>
 800a5f6:	a386      	add	r3, pc, #536	; (adr r3, 800a810 <__ieee754_rem_pio2+0x310>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f7f5 fe4e 	bl	800029c <__adddf3>
 800a600:	a385      	add	r3, pc, #532	; (adr r3, 800a818 <__ieee754_rem_pio2+0x318>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	4604      	mov	r4, r0
 800a608:	460d      	mov	r5, r1
 800a60a:	f7f5 fe47 	bl	800029c <__adddf3>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	e9ca 2300 	strd	r2, r3, [sl]
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f5 fe3d 	bl	8000298 <__aeabi_dsub>
 800a61e:	a37e      	add	r3, pc, #504	; (adr r3, 800a818 <__ieee754_rem_pio2+0x318>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	e7e0      	b.n	800a5e8 <__ieee754_rem_pio2+0xe8>
 800a626:	4b87      	ldr	r3, [pc, #540]	; (800a844 <__ieee754_rem_pio2+0x344>)
 800a628:	4598      	cmp	r8, r3
 800a62a:	f300 80d9 	bgt.w	800a7e0 <__ieee754_rem_pio2+0x2e0>
 800a62e:	f001 f8cf 	bl	800b7d0 <fabs>
 800a632:	ec55 4b10 	vmov	r4, r5, d0
 800a636:	ee10 0a10 	vmov	r0, s0
 800a63a:	a379      	add	r3, pc, #484	; (adr r3, 800a820 <__ieee754_rem_pio2+0x320>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	4629      	mov	r1, r5
 800a642:	f7f5 ffe1 	bl	8000608 <__aeabi_dmul>
 800a646:	4b80      	ldr	r3, [pc, #512]	; (800a848 <__ieee754_rem_pio2+0x348>)
 800a648:	2200      	movs	r2, #0
 800a64a:	f7f5 fe27 	bl	800029c <__adddf3>
 800a64e:	f7f6 fa8b 	bl	8000b68 <__aeabi_d2iz>
 800a652:	4683      	mov	fp, r0
 800a654:	f7f5 ff6e 	bl	8000534 <__aeabi_i2d>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	ec43 2b18 	vmov	d8, r2, r3
 800a660:	a367      	add	r3, pc, #412	; (adr r3, 800a800 <__ieee754_rem_pio2+0x300>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 ffcf 	bl	8000608 <__aeabi_dmul>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	f7f5 fe11 	bl	8000298 <__aeabi_dsub>
 800a676:	a364      	add	r3, pc, #400	; (adr r3, 800a808 <__ieee754_rem_pio2+0x308>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	ec51 0b18 	vmov	r0, r1, d8
 800a684:	f7f5 ffc0 	bl	8000608 <__aeabi_dmul>
 800a688:	f1bb 0f1f 	cmp.w	fp, #31
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	dc0d      	bgt.n	800a6ae <__ieee754_rem_pio2+0x1ae>
 800a692:	4b6e      	ldr	r3, [pc, #440]	; (800a84c <__ieee754_rem_pio2+0x34c>)
 800a694:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	4543      	cmp	r3, r8
 800a69e:	d006      	beq.n	800a6ae <__ieee754_rem_pio2+0x1ae>
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 fdf6 	bl	8000298 <__aeabi_dsub>
 800a6ac:	e00f      	b.n	800a6ce <__ieee754_rem_pio2+0x1ce>
 800a6ae:	462b      	mov	r3, r5
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fdef 	bl	8000298 <__aeabi_dsub>
 800a6ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a6c8:	f1b8 0f10 	cmp.w	r8, #16
 800a6cc:	dc02      	bgt.n	800a6d4 <__ieee754_rem_pio2+0x1d4>
 800a6ce:	e9ca 0100 	strd	r0, r1, [sl]
 800a6d2:	e039      	b.n	800a748 <__ieee754_rem_pio2+0x248>
 800a6d4:	a34e      	add	r3, pc, #312	; (adr r3, 800a810 <__ieee754_rem_pio2+0x310>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	ec51 0b18 	vmov	r0, r1, d8
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7f5 fdd3 	bl	8000298 <__aeabi_dsub>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	f7f5 fdcb 	bl	8000298 <__aeabi_dsub>
 800a702:	4622      	mov	r2, r4
 800a704:	462b      	mov	r3, r5
 800a706:	f7f5 fdc7 	bl	8000298 <__aeabi_dsub>
 800a70a:	a343      	add	r3, pc, #268	; (adr r3, 800a818 <__ieee754_rem_pio2+0x318>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	4604      	mov	r4, r0
 800a712:	460d      	mov	r5, r1
 800a714:	ec51 0b18 	vmov	r0, r1, d8
 800a718:	f7f5 ff76 	bl	8000608 <__aeabi_dmul>
 800a71c:	4622      	mov	r2, r4
 800a71e:	462b      	mov	r3, r5
 800a720:	f7f5 fdba 	bl	8000298 <__aeabi_dsub>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4604      	mov	r4, r0
 800a72a:	460d      	mov	r5, r1
 800a72c:	4640      	mov	r0, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	f7f5 fdb2 	bl	8000298 <__aeabi_dsub>
 800a734:	9a03      	ldr	r2, [sp, #12]
 800a736:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b31      	cmp	r3, #49	; 0x31
 800a73e:	dc24      	bgt.n	800a78a <__ieee754_rem_pio2+0x28a>
 800a740:	e9ca 0100 	strd	r0, r1, [sl]
 800a744:	4646      	mov	r6, r8
 800a746:	464f      	mov	r7, r9
 800a748:	e9da 8900 	ldrd	r8, r9, [sl]
 800a74c:	4630      	mov	r0, r6
 800a74e:	4642      	mov	r2, r8
 800a750:	464b      	mov	r3, r9
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 fda0 	bl	8000298 <__aeabi_dsub>
 800a758:	462b      	mov	r3, r5
 800a75a:	4622      	mov	r2, r4
 800a75c:	f7f5 fd9c 	bl	8000298 <__aeabi_dsub>
 800a760:	9b02      	ldr	r3, [sp, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a768:	f6bf af0a 	bge.w	800a580 <__ieee754_rem_pio2+0x80>
 800a76c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a770:	f8ca 3004 	str.w	r3, [sl, #4]
 800a774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a778:	f8ca 8000 	str.w	r8, [sl]
 800a77c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a780:	f8ca 300c 	str.w	r3, [sl, #12]
 800a784:	f1cb 0b00 	rsb	fp, fp, #0
 800a788:	e6fa      	b.n	800a580 <__ieee754_rem_pio2+0x80>
 800a78a:	a327      	add	r3, pc, #156	; (adr r3, 800a828 <__ieee754_rem_pio2+0x328>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	ec51 0b18 	vmov	r0, r1, d8
 800a794:	f7f5 ff38 	bl	8000608 <__aeabi_dmul>
 800a798:	4604      	mov	r4, r0
 800a79a:	460d      	mov	r5, r1
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 fd78 	bl	8000298 <__aeabi_dsub>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f7f5 fd70 	bl	8000298 <__aeabi_dsub>
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	f7f5 fd6c 	bl	8000298 <__aeabi_dsub>
 800a7c0:	a31b      	add	r3, pc, #108	; (adr r3, 800a830 <__ieee754_rem_pio2+0x330>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	ec51 0b18 	vmov	r0, r1, d8
 800a7ce:	f7f5 ff1b 	bl	8000608 <__aeabi_dmul>
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	f7f5 fd5f 	bl	8000298 <__aeabi_dsub>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	460d      	mov	r5, r1
 800a7de:	e75f      	b.n	800a6a0 <__ieee754_rem_pio2+0x1a0>
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <__ieee754_rem_pio2+0x350>)
 800a7e2:	4598      	cmp	r8, r3
 800a7e4:	dd36      	ble.n	800a854 <__ieee754_rem_pio2+0x354>
 800a7e6:	ee10 2a10 	vmov	r2, s0
 800a7ea:	462b      	mov	r3, r5
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 fd52 	bl	8000298 <__aeabi_dsub>
 800a7f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7f8:	e9ca 0100 	strd	r0, r1, [sl]
 800a7fc:	e694      	b.n	800a528 <__ieee754_rem_pio2+0x28>
 800a7fe:	bf00      	nop
 800a800:	54400000 	.word	0x54400000
 800a804:	3ff921fb 	.word	0x3ff921fb
 800a808:	1a626331 	.word	0x1a626331
 800a80c:	3dd0b461 	.word	0x3dd0b461
 800a810:	1a600000 	.word	0x1a600000
 800a814:	3dd0b461 	.word	0x3dd0b461
 800a818:	2e037073 	.word	0x2e037073
 800a81c:	3ba3198a 	.word	0x3ba3198a
 800a820:	6dc9c883 	.word	0x6dc9c883
 800a824:	3fe45f30 	.word	0x3fe45f30
 800a828:	2e000000 	.word	0x2e000000
 800a82c:	3ba3198a 	.word	0x3ba3198a
 800a830:	252049c1 	.word	0x252049c1
 800a834:	397b839a 	.word	0x397b839a
 800a838:	3fe921fb 	.word	0x3fe921fb
 800a83c:	4002d97b 	.word	0x4002d97b
 800a840:	3ff921fb 	.word	0x3ff921fb
 800a844:	413921fb 	.word	0x413921fb
 800a848:	3fe00000 	.word	0x3fe00000
 800a84c:	0800bf50 	.word	0x0800bf50
 800a850:	7fefffff 	.word	0x7fefffff
 800a854:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a858:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a85c:	ee10 0a10 	vmov	r0, s0
 800a860:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a864:	ee10 6a10 	vmov	r6, s0
 800a868:	460f      	mov	r7, r1
 800a86a:	f7f6 f97d 	bl	8000b68 <__aeabi_d2iz>
 800a86e:	f7f5 fe61 	bl	8000534 <__aeabi_i2d>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4630      	mov	r0, r6
 800a878:	4639      	mov	r1, r7
 800a87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a87e:	f7f5 fd0b 	bl	8000298 <__aeabi_dsub>
 800a882:	4b23      	ldr	r3, [pc, #140]	; (800a910 <__ieee754_rem_pio2+0x410>)
 800a884:	2200      	movs	r2, #0
 800a886:	f7f5 febf 	bl	8000608 <__aeabi_dmul>
 800a88a:	460f      	mov	r7, r1
 800a88c:	4606      	mov	r6, r0
 800a88e:	f7f6 f96b 	bl	8000b68 <__aeabi_d2iz>
 800a892:	f7f5 fe4f 	bl	8000534 <__aeabi_i2d>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8a2:	f7f5 fcf9 	bl	8000298 <__aeabi_dsub>
 800a8a6:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <__ieee754_rem_pio2+0x410>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f7f5 fead 	bl	8000608 <__aeabi_dmul>
 800a8ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a8b2:	ad04      	add	r5, sp, #16
 800a8b4:	f04f 0803 	mov.w	r8, #3
 800a8b8:	46a9      	mov	r9, r5
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	2700      	movs	r7, #0
 800a8be:	4632      	mov	r2, r6
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a8c6:	46c3      	mov	fp, r8
 800a8c8:	3d08      	subs	r5, #8
 800a8ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8ce:	f7f6 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1f3      	bne.n	800a8be <__ieee754_rem_pio2+0x3be>
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <__ieee754_rem_pio2+0x414>)
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	2302      	movs	r3, #2
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4622      	mov	r2, r4
 800a8e0:	465b      	mov	r3, fp
 800a8e2:	4651      	mov	r1, sl
 800a8e4:	4648      	mov	r0, r9
 800a8e6:	f000 f993 	bl	800ac10 <__kernel_rem_pio2>
 800a8ea:	9b02      	ldr	r3, [sp, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	4683      	mov	fp, r0
 800a8f0:	f6bf ae46 	bge.w	800a580 <__ieee754_rem_pio2+0x80>
 800a8f4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a8f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8fc:	e9ca 2300 	strd	r2, r3, [sl]
 800a900:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a908:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a90c:	e73a      	b.n	800a784 <__ieee754_rem_pio2+0x284>
 800a90e:	bf00      	nop
 800a910:	41700000 	.word	0x41700000
 800a914:	0800bfd0 	.word	0x0800bfd0

0800a918 <__ieee754_sqrt>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	ec55 4b10 	vmov	r4, r5, d0
 800a920:	4e55      	ldr	r6, [pc, #340]	; (800aa78 <__ieee754_sqrt+0x160>)
 800a922:	43ae      	bics	r6, r5
 800a924:	ee10 0a10 	vmov	r0, s0
 800a928:	ee10 3a10 	vmov	r3, s0
 800a92c:	462a      	mov	r2, r5
 800a92e:	4629      	mov	r1, r5
 800a930:	d110      	bne.n	800a954 <__ieee754_sqrt+0x3c>
 800a932:	ee10 2a10 	vmov	r2, s0
 800a936:	462b      	mov	r3, r5
 800a938:	f7f5 fe66 	bl	8000608 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fcaa 	bl	800029c <__adddf3>
 800a948:	4604      	mov	r4, r0
 800a94a:	460d      	mov	r5, r1
 800a94c:	ec45 4b10 	vmov	d0, r4, r5
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	2d00      	cmp	r5, #0
 800a956:	dc10      	bgt.n	800a97a <__ieee754_sqrt+0x62>
 800a958:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a95c:	4330      	orrs	r0, r6
 800a95e:	d0f5      	beq.n	800a94c <__ieee754_sqrt+0x34>
 800a960:	b15d      	cbz	r5, 800a97a <__ieee754_sqrt+0x62>
 800a962:	ee10 2a10 	vmov	r2, s0
 800a966:	462b      	mov	r3, r5
 800a968:	ee10 0a10 	vmov	r0, s0
 800a96c:	f7f5 fc94 	bl	8000298 <__aeabi_dsub>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	f7f5 ff72 	bl	800085c <__aeabi_ddiv>
 800a978:	e7e6      	b.n	800a948 <__ieee754_sqrt+0x30>
 800a97a:	1512      	asrs	r2, r2, #20
 800a97c:	d074      	beq.n	800aa68 <__ieee754_sqrt+0x150>
 800a97e:	07d4      	lsls	r4, r2, #31
 800a980:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a984:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a98c:	bf5e      	ittt	pl
 800a98e:	0fda      	lsrpl	r2, r3, #31
 800a990:	005b      	lslpl	r3, r3, #1
 800a992:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a996:	2400      	movs	r4, #0
 800a998:	0fda      	lsrs	r2, r3, #31
 800a99a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a99e:	107f      	asrs	r7, r7, #1
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	2516      	movs	r5, #22
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a9aa:	1886      	adds	r6, r0, r2
 800a9ac:	428e      	cmp	r6, r1
 800a9ae:	bfde      	ittt	le
 800a9b0:	1b89      	suble	r1, r1, r6
 800a9b2:	18b0      	addle	r0, r6, r2
 800a9b4:	18a4      	addle	r4, r4, r2
 800a9b6:	0049      	lsls	r1, r1, #1
 800a9b8:	3d01      	subs	r5, #1
 800a9ba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a9be:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a9c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9c6:	d1f0      	bne.n	800a9aa <__ieee754_sqrt+0x92>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	f04f 0e20 	mov.w	lr, #32
 800a9ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a9d2:	4281      	cmp	r1, r0
 800a9d4:	eb06 0c05 	add.w	ip, r6, r5
 800a9d8:	dc02      	bgt.n	800a9e0 <__ieee754_sqrt+0xc8>
 800a9da:	d113      	bne.n	800aa04 <__ieee754_sqrt+0xec>
 800a9dc:	459c      	cmp	ip, r3
 800a9de:	d811      	bhi.n	800aa04 <__ieee754_sqrt+0xec>
 800a9e0:	f1bc 0f00 	cmp.w	ip, #0
 800a9e4:	eb0c 0506 	add.w	r5, ip, r6
 800a9e8:	da43      	bge.n	800aa72 <__ieee754_sqrt+0x15a>
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	db41      	blt.n	800aa72 <__ieee754_sqrt+0x15a>
 800a9ee:	f100 0801 	add.w	r8, r0, #1
 800a9f2:	1a09      	subs	r1, r1, r0
 800a9f4:	459c      	cmp	ip, r3
 800a9f6:	bf88      	it	hi
 800a9f8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a9fc:	eba3 030c 	sub.w	r3, r3, ip
 800aa00:	4432      	add	r2, r6
 800aa02:	4640      	mov	r0, r8
 800aa04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aa08:	f1be 0e01 	subs.w	lr, lr, #1
 800aa0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aa10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa18:	d1db      	bne.n	800a9d2 <__ieee754_sqrt+0xba>
 800aa1a:	430b      	orrs	r3, r1
 800aa1c:	d006      	beq.n	800aa2c <__ieee754_sqrt+0x114>
 800aa1e:	1c50      	adds	r0, r2, #1
 800aa20:	bf13      	iteet	ne
 800aa22:	3201      	addne	r2, #1
 800aa24:	3401      	addeq	r4, #1
 800aa26:	4672      	moveq	r2, lr
 800aa28:	f022 0201 	bicne.w	r2, r2, #1
 800aa2c:	1063      	asrs	r3, r4, #1
 800aa2e:	0852      	lsrs	r2, r2, #1
 800aa30:	07e1      	lsls	r1, r4, #31
 800aa32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa3a:	bf48      	it	mi
 800aa3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aa40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aa44:	4614      	mov	r4, r2
 800aa46:	e781      	b.n	800a94c <__ieee754_sqrt+0x34>
 800aa48:	0ad9      	lsrs	r1, r3, #11
 800aa4a:	3815      	subs	r0, #21
 800aa4c:	055b      	lsls	r3, r3, #21
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	d0fa      	beq.n	800aa48 <__ieee754_sqrt+0x130>
 800aa52:	02cd      	lsls	r5, r1, #11
 800aa54:	d50a      	bpl.n	800aa6c <__ieee754_sqrt+0x154>
 800aa56:	f1c2 0420 	rsb	r4, r2, #32
 800aa5a:	fa23 f404 	lsr.w	r4, r3, r4
 800aa5e:	1e55      	subs	r5, r2, #1
 800aa60:	4093      	lsls	r3, r2
 800aa62:	4321      	orrs	r1, r4
 800aa64:	1b42      	subs	r2, r0, r5
 800aa66:	e78a      	b.n	800a97e <__ieee754_sqrt+0x66>
 800aa68:	4610      	mov	r0, r2
 800aa6a:	e7f0      	b.n	800aa4e <__ieee754_sqrt+0x136>
 800aa6c:	0049      	lsls	r1, r1, #1
 800aa6e:	3201      	adds	r2, #1
 800aa70:	e7ef      	b.n	800aa52 <__ieee754_sqrt+0x13a>
 800aa72:	4680      	mov	r8, r0
 800aa74:	e7bd      	b.n	800a9f2 <__ieee754_sqrt+0xda>
 800aa76:	bf00      	nop
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	00000000 	.word	0x00000000

0800aa80 <__kernel_cos>:
 800aa80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	ec57 6b10 	vmov	r6, r7, d0
 800aa88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aa8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aa90:	ed8d 1b00 	vstr	d1, [sp]
 800aa94:	da07      	bge.n	800aaa6 <__kernel_cos+0x26>
 800aa96:	ee10 0a10 	vmov	r0, s0
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f6 f864 	bl	8000b68 <__aeabi_d2iz>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f000 8088 	beq.w	800abb6 <__kernel_cos+0x136>
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	4630      	mov	r0, r6
 800aaac:	4639      	mov	r1, r7
 800aaae:	f7f5 fdab 	bl	8000608 <__aeabi_dmul>
 800aab2:	4b51      	ldr	r3, [pc, #324]	; (800abf8 <__kernel_cos+0x178>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	f7f5 fda5 	bl	8000608 <__aeabi_dmul>
 800aabe:	a340      	add	r3, pc, #256	; (adr r3, 800abc0 <__kernel_cos+0x140>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	4682      	mov	sl, r0
 800aac6:	468b      	mov	fp, r1
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fd9c 	bl	8000608 <__aeabi_dmul>
 800aad0:	a33d      	add	r3, pc, #244	; (adr r3, 800abc8 <__kernel_cos+0x148>)
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fbe1 	bl	800029c <__adddf3>
 800aada:	4622      	mov	r2, r4
 800aadc:	462b      	mov	r3, r5
 800aade:	f7f5 fd93 	bl	8000608 <__aeabi_dmul>
 800aae2:	a33b      	add	r3, pc, #236	; (adr r3, 800abd0 <__kernel_cos+0x150>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fbd6 	bl	8000298 <__aeabi_dsub>
 800aaec:	4622      	mov	r2, r4
 800aaee:	462b      	mov	r3, r5
 800aaf0:	f7f5 fd8a 	bl	8000608 <__aeabi_dmul>
 800aaf4:	a338      	add	r3, pc, #224	; (adr r3, 800abd8 <__kernel_cos+0x158>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fbcf 	bl	800029c <__adddf3>
 800aafe:	4622      	mov	r2, r4
 800ab00:	462b      	mov	r3, r5
 800ab02:	f7f5 fd81 	bl	8000608 <__aeabi_dmul>
 800ab06:	a336      	add	r3, pc, #216	; (adr r3, 800abe0 <__kernel_cos+0x160>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fbc4 	bl	8000298 <__aeabi_dsub>
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	f7f5 fd78 	bl	8000608 <__aeabi_dmul>
 800ab18:	a333      	add	r3, pc, #204	; (adr r3, 800abe8 <__kernel_cos+0x168>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f7f5 fbbd 	bl	800029c <__adddf3>
 800ab22:	4622      	mov	r2, r4
 800ab24:	462b      	mov	r3, r5
 800ab26:	f7f5 fd6f 	bl	8000608 <__aeabi_dmul>
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	f7f5 fd6b 	bl	8000608 <__aeabi_dmul>
 800ab32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	460b      	mov	r3, r1
 800ab44:	4602      	mov	r2, r0
 800ab46:	4629      	mov	r1, r5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7f5 fba5 	bl	8000298 <__aeabi_dsub>
 800ab4e:	4b2b      	ldr	r3, [pc, #172]	; (800abfc <__kernel_cos+0x17c>)
 800ab50:	4598      	cmp	r8, r3
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	dc10      	bgt.n	800ab7a <__kernel_cos+0xfa>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fb9a 	bl	8000298 <__aeabi_dsub>
 800ab64:	460b      	mov	r3, r1
 800ab66:	4926      	ldr	r1, [pc, #152]	; (800ac00 <__kernel_cos+0x180>)
 800ab68:	4602      	mov	r2, r0
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	f7f5 fb94 	bl	8000298 <__aeabi_dsub>
 800ab70:	ec41 0b10 	vmov	d0, r0, r1
 800ab74:	b003      	add	sp, #12
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <__kernel_cos+0x184>)
 800ab7c:	4920      	ldr	r1, [pc, #128]	; (800ac00 <__kernel_cos+0x180>)
 800ab7e:	4598      	cmp	r8, r3
 800ab80:	bfcc      	ite	gt
 800ab82:	4d21      	ldrgt	r5, [pc, #132]	; (800ac08 <__kernel_cos+0x188>)
 800ab84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ab88:	2400      	movs	r4, #0
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7f5 fb82 	bl	8000298 <__aeabi_dsub>
 800ab94:	4622      	mov	r2, r4
 800ab96:	4680      	mov	r8, r0
 800ab98:	4689      	mov	r9, r1
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	4650      	mov	r0, sl
 800ab9e:	4659      	mov	r1, fp
 800aba0:	f7f5 fb7a 	bl	8000298 <__aeabi_dsub>
 800aba4:	4632      	mov	r2, r6
 800aba6:	463b      	mov	r3, r7
 800aba8:	f7f5 fb76 	bl	8000298 <__aeabi_dsub>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	4640      	mov	r0, r8
 800abb2:	4649      	mov	r1, r9
 800abb4:	e7da      	b.n	800ab6c <__kernel_cos+0xec>
 800abb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800abf0 <__kernel_cos+0x170>
 800abba:	e7db      	b.n	800ab74 <__kernel_cos+0xf4>
 800abbc:	f3af 8000 	nop.w
 800abc0:	be8838d4 	.word	0xbe8838d4
 800abc4:	bda8fae9 	.word	0xbda8fae9
 800abc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800abcc:	3e21ee9e 	.word	0x3e21ee9e
 800abd0:	809c52ad 	.word	0x809c52ad
 800abd4:	3e927e4f 	.word	0x3e927e4f
 800abd8:	19cb1590 	.word	0x19cb1590
 800abdc:	3efa01a0 	.word	0x3efa01a0
 800abe0:	16c15177 	.word	0x16c15177
 800abe4:	3f56c16c 	.word	0x3f56c16c
 800abe8:	5555554c 	.word	0x5555554c
 800abec:	3fa55555 	.word	0x3fa55555
 800abf0:	00000000 	.word	0x00000000
 800abf4:	3ff00000 	.word	0x3ff00000
 800abf8:	3fe00000 	.word	0x3fe00000
 800abfc:	3fd33332 	.word	0x3fd33332
 800ac00:	3ff00000 	.word	0x3ff00000
 800ac04:	3fe90000 	.word	0x3fe90000
 800ac08:	3fd20000 	.word	0x3fd20000
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <__kernel_rem_pio2>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ed2d 8b02 	vpush	{d8}
 800ac18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ac1c:	f112 0f14 	cmn.w	r2, #20
 800ac20:	9308      	str	r3, [sp, #32]
 800ac22:	9101      	str	r1, [sp, #4]
 800ac24:	4bc4      	ldr	r3, [pc, #784]	; (800af38 <__kernel_rem_pio2+0x328>)
 800ac26:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ac28:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac2e:	9302      	str	r3, [sp, #8]
 800ac30:	9b08      	ldr	r3, [sp, #32]
 800ac32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac36:	bfa8      	it	ge
 800ac38:	1ed4      	subge	r4, r2, #3
 800ac3a:	9306      	str	r3, [sp, #24]
 800ac3c:	bfb2      	itee	lt
 800ac3e:	2400      	movlt	r4, #0
 800ac40:	2318      	movge	r3, #24
 800ac42:	fb94 f4f3 	sdivge	r4, r4, r3
 800ac46:	f06f 0317 	mvn.w	r3, #23
 800ac4a:	fb04 3303 	mla	r3, r4, r3, r3
 800ac4e:	eb03 0a02 	add.w	sl, r3, r2
 800ac52:	9b02      	ldr	r3, [sp, #8]
 800ac54:	9a06      	ldr	r2, [sp, #24]
 800ac56:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800af28 <__kernel_rem_pio2+0x318>
 800ac5a:	eb03 0802 	add.w	r8, r3, r2
 800ac5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac60:	1aa7      	subs	r7, r4, r2
 800ac62:	ae22      	add	r6, sp, #136	; 0x88
 800ac64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac68:	2500      	movs	r5, #0
 800ac6a:	4545      	cmp	r5, r8
 800ac6c:	dd13      	ble.n	800ac96 <__kernel_rem_pio2+0x86>
 800ac6e:	9b08      	ldr	r3, [sp, #32]
 800ac70:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800af28 <__kernel_rem_pio2+0x318>
 800ac74:	aa22      	add	r2, sp, #136	; 0x88
 800ac76:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ac7e:	f04f 0800 	mov.w	r8, #0
 800ac82:	9b02      	ldr	r3, [sp, #8]
 800ac84:	4598      	cmp	r8, r3
 800ac86:	dc2f      	bgt.n	800ace8 <__kernel_rem_pio2+0xd8>
 800ac88:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ac8c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ac90:	462f      	mov	r7, r5
 800ac92:	2600      	movs	r6, #0
 800ac94:	e01b      	b.n	800acce <__kernel_rem_pio2+0xbe>
 800ac96:	42ef      	cmn	r7, r5
 800ac98:	d407      	bmi.n	800acaa <__kernel_rem_pio2+0x9a>
 800ac9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac9e:	f7f5 fc49 	bl	8000534 <__aeabi_i2d>
 800aca2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aca6:	3501      	adds	r5, #1
 800aca8:	e7df      	b.n	800ac6a <__kernel_rem_pio2+0x5a>
 800acaa:	ec51 0b18 	vmov	r0, r1, d8
 800acae:	e7f8      	b.n	800aca2 <__kernel_rem_pio2+0x92>
 800acb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acb8:	f7f5 fca6 	bl	8000608 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acc4:	f7f5 faea 	bl	800029c <__adddf3>
 800acc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800accc:	3601      	adds	r6, #1
 800acce:	9b06      	ldr	r3, [sp, #24]
 800acd0:	429e      	cmp	r6, r3
 800acd2:	f1a7 0708 	sub.w	r7, r7, #8
 800acd6:	ddeb      	ble.n	800acb0 <__kernel_rem_pio2+0xa0>
 800acd8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800acdc:	f108 0801 	add.w	r8, r8, #1
 800ace0:	ecab 7b02 	vstmia	fp!, {d7}
 800ace4:	3508      	adds	r5, #8
 800ace6:	e7cc      	b.n	800ac82 <__kernel_rem_pio2+0x72>
 800ace8:	9b02      	ldr	r3, [sp, #8]
 800acea:	aa0e      	add	r2, sp, #56	; 0x38
 800acec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acf0:	930d      	str	r3, [sp, #52]	; 0x34
 800acf2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800acf4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800acf8:	9c02      	ldr	r4, [sp, #8]
 800acfa:	930c      	str	r3, [sp, #48]	; 0x30
 800acfc:	00e3      	lsls	r3, r4, #3
 800acfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ad00:	ab9a      	add	r3, sp, #616	; 0x268
 800ad02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ad0e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ad10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ad14:	46c3      	mov	fp, r8
 800ad16:	46a1      	mov	r9, r4
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	f1a5 0508 	sub.w	r5, r5, #8
 800ad20:	dc77      	bgt.n	800ae12 <__kernel_rem_pio2+0x202>
 800ad22:	ec47 6b10 	vmov	d0, r6, r7
 800ad26:	4650      	mov	r0, sl
 800ad28:	f000 fde6 	bl	800b8f8 <scalbn>
 800ad2c:	ec57 6b10 	vmov	r6, r7, d0
 800ad30:	2200      	movs	r2, #0
 800ad32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ad36:	ee10 0a10 	vmov	r0, s0
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	f7f5 fc64 	bl	8000608 <__aeabi_dmul>
 800ad40:	ec41 0b10 	vmov	d0, r0, r1
 800ad44:	f000 fd58 	bl	800b7f8 <floor>
 800ad48:	4b7c      	ldr	r3, [pc, #496]	; (800af3c <__kernel_rem_pio2+0x32c>)
 800ad4a:	ec51 0b10 	vmov	r0, r1, d0
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f7f5 fc5a 	bl	8000608 <__aeabi_dmul>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fa9c 	bl	8000298 <__aeabi_dsub>
 800ad60:	460f      	mov	r7, r1
 800ad62:	4606      	mov	r6, r0
 800ad64:	f7f5 ff00 	bl	8000b68 <__aeabi_d2iz>
 800ad68:	9004      	str	r0, [sp, #16]
 800ad6a:	f7f5 fbe3 	bl	8000534 <__aeabi_i2d>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	f7f5 fa8f 	bl	8000298 <__aeabi_dsub>
 800ad7a:	f1ba 0f00 	cmp.w	sl, #0
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	dd6d      	ble.n	800ae60 <__kernel_rem_pio2+0x250>
 800ad84:	1e62      	subs	r2, r4, #1
 800ad86:	ab0e      	add	r3, sp, #56	; 0x38
 800ad88:	9d04      	ldr	r5, [sp, #16]
 800ad8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad8e:	f1ca 0118 	rsb	r1, sl, #24
 800ad92:	fa40 f301 	asr.w	r3, r0, r1
 800ad96:	441d      	add	r5, r3
 800ad98:	408b      	lsls	r3, r1
 800ad9a:	1ac0      	subs	r0, r0, r3
 800ad9c:	ab0e      	add	r3, sp, #56	; 0x38
 800ad9e:	9504      	str	r5, [sp, #16]
 800ada0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ada4:	f1ca 0317 	rsb	r3, sl, #23
 800ada8:	fa40 fb03 	asr.w	fp, r0, r3
 800adac:	f1bb 0f00 	cmp.w	fp, #0
 800adb0:	dd65      	ble.n	800ae7e <__kernel_rem_pio2+0x26e>
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	2200      	movs	r2, #0
 800adb6:	3301      	adds	r3, #1
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	4615      	mov	r5, r2
 800adbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800adc0:	4294      	cmp	r4, r2
 800adc2:	f300 809c 	bgt.w	800aefe <__kernel_rem_pio2+0x2ee>
 800adc6:	f1ba 0f00 	cmp.w	sl, #0
 800adca:	dd07      	ble.n	800addc <__kernel_rem_pio2+0x1cc>
 800adcc:	f1ba 0f01 	cmp.w	sl, #1
 800add0:	f000 80c0 	beq.w	800af54 <__kernel_rem_pio2+0x344>
 800add4:	f1ba 0f02 	cmp.w	sl, #2
 800add8:	f000 80c6 	beq.w	800af68 <__kernel_rem_pio2+0x358>
 800addc:	f1bb 0f02 	cmp.w	fp, #2
 800ade0:	d14d      	bne.n	800ae7e <__kernel_rem_pio2+0x26e>
 800ade2:	4632      	mov	r2, r6
 800ade4:	463b      	mov	r3, r7
 800ade6:	4956      	ldr	r1, [pc, #344]	; (800af40 <__kernel_rem_pio2+0x330>)
 800ade8:	2000      	movs	r0, #0
 800adea:	f7f5 fa55 	bl	8000298 <__aeabi_dsub>
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	2d00      	cmp	r5, #0
 800adf4:	d043      	beq.n	800ae7e <__kernel_rem_pio2+0x26e>
 800adf6:	4650      	mov	r0, sl
 800adf8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800af30 <__kernel_rem_pio2+0x320>
 800adfc:	f000 fd7c 	bl	800b8f8 <scalbn>
 800ae00:	4630      	mov	r0, r6
 800ae02:	4639      	mov	r1, r7
 800ae04:	ec53 2b10 	vmov	r2, r3, d0
 800ae08:	f7f5 fa46 	bl	8000298 <__aeabi_dsub>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	e035      	b.n	800ae7e <__kernel_rem_pio2+0x26e>
 800ae12:	4b4c      	ldr	r3, [pc, #304]	; (800af44 <__kernel_rem_pio2+0x334>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	4630      	mov	r0, r6
 800ae18:	4639      	mov	r1, r7
 800ae1a:	f7f5 fbf5 	bl	8000608 <__aeabi_dmul>
 800ae1e:	f7f5 fea3 	bl	8000b68 <__aeabi_d2iz>
 800ae22:	f7f5 fb87 	bl	8000534 <__aeabi_i2d>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	ec43 2b18 	vmov	d8, r2, r3
 800ae2e:	4b46      	ldr	r3, [pc, #280]	; (800af48 <__kernel_rem_pio2+0x338>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	f7f5 fbe9 	bl	8000608 <__aeabi_dmul>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	f7f5 fa2b 	bl	8000298 <__aeabi_dsub>
 800ae42:	f7f5 fe91 	bl	8000b68 <__aeabi_d2iz>
 800ae46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae4a:	f84b 0b04 	str.w	r0, [fp], #4
 800ae4e:	ec51 0b18 	vmov	r0, r1, d8
 800ae52:	f7f5 fa23 	bl	800029c <__adddf3>
 800ae56:	f109 39ff 	add.w	r9, r9, #4294967295
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	e75b      	b.n	800ad18 <__kernel_rem_pio2+0x108>
 800ae60:	d106      	bne.n	800ae70 <__kernel_rem_pio2+0x260>
 800ae62:	1e63      	subs	r3, r4, #1
 800ae64:	aa0e      	add	r2, sp, #56	; 0x38
 800ae66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae6a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ae6e:	e79d      	b.n	800adac <__kernel_rem_pio2+0x19c>
 800ae70:	4b36      	ldr	r3, [pc, #216]	; (800af4c <__kernel_rem_pio2+0x33c>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7f5 fe4e 	bl	8000b14 <__aeabi_dcmpge>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d13d      	bne.n	800aef8 <__kernel_rem_pio2+0x2e8>
 800ae7c:	4683      	mov	fp, r0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2300      	movs	r3, #0
 800ae82:	4630      	mov	r0, r6
 800ae84:	4639      	mov	r1, r7
 800ae86:	f7f5 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f000 80c0 	beq.w	800b010 <__kernel_rem_pio2+0x400>
 800ae90:	1e65      	subs	r5, r4, #1
 800ae92:	462b      	mov	r3, r5
 800ae94:	2200      	movs	r2, #0
 800ae96:	9902      	ldr	r1, [sp, #8]
 800ae98:	428b      	cmp	r3, r1
 800ae9a:	da6c      	bge.n	800af76 <__kernel_rem_pio2+0x366>
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	f000 8089 	beq.w	800afb4 <__kernel_rem_pio2+0x3a4>
 800aea2:	ab0e      	add	r3, sp, #56	; 0x38
 800aea4:	f1aa 0a18 	sub.w	sl, sl, #24
 800aea8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80ad 	beq.w	800b00c <__kernel_rem_pio2+0x3fc>
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800af30 <__kernel_rem_pio2+0x320>
 800aeb8:	f000 fd1e 	bl	800b8f8 <scalbn>
 800aebc:	ab9a      	add	r3, sp, #616	; 0x268
 800aebe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aec2:	ec57 6b10 	vmov	r6, r7, d0
 800aec6:	00ec      	lsls	r4, r5, #3
 800aec8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aecc:	46aa      	mov	sl, r5
 800aece:	f1ba 0f00 	cmp.w	sl, #0
 800aed2:	f280 80d6 	bge.w	800b082 <__kernel_rem_pio2+0x472>
 800aed6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800af28 <__kernel_rem_pio2+0x318>
 800aeda:	462e      	mov	r6, r5
 800aedc:	2e00      	cmp	r6, #0
 800aede:	f2c0 8104 	blt.w	800b0ea <__kernel_rem_pio2+0x4da>
 800aee2:	ab72      	add	r3, sp, #456	; 0x1c8
 800aee4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aee8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800af50 <__kernel_rem_pio2+0x340>
 800aeec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aef0:	f04f 0800 	mov.w	r8, #0
 800aef4:	1baf      	subs	r7, r5, r6
 800aef6:	e0ea      	b.n	800b0ce <__kernel_rem_pio2+0x4be>
 800aef8:	f04f 0b02 	mov.w	fp, #2
 800aefc:	e759      	b.n	800adb2 <__kernel_rem_pio2+0x1a2>
 800aefe:	f8d8 3000 	ldr.w	r3, [r8]
 800af02:	b955      	cbnz	r5, 800af1a <__kernel_rem_pio2+0x30a>
 800af04:	b123      	cbz	r3, 800af10 <__kernel_rem_pio2+0x300>
 800af06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af0a:	f8c8 3000 	str.w	r3, [r8]
 800af0e:	2301      	movs	r3, #1
 800af10:	3201      	adds	r2, #1
 800af12:	f108 0804 	add.w	r8, r8, #4
 800af16:	461d      	mov	r5, r3
 800af18:	e752      	b.n	800adc0 <__kernel_rem_pio2+0x1b0>
 800af1a:	1acb      	subs	r3, r1, r3
 800af1c:	f8c8 3000 	str.w	r3, [r8]
 800af20:	462b      	mov	r3, r5
 800af22:	e7f5      	b.n	800af10 <__kernel_rem_pio2+0x300>
 800af24:	f3af 8000 	nop.w
	...
 800af34:	3ff00000 	.word	0x3ff00000
 800af38:	0800c118 	.word	0x0800c118
 800af3c:	40200000 	.word	0x40200000
 800af40:	3ff00000 	.word	0x3ff00000
 800af44:	3e700000 	.word	0x3e700000
 800af48:	41700000 	.word	0x41700000
 800af4c:	3fe00000 	.word	0x3fe00000
 800af50:	0800c0d8 	.word	0x0800c0d8
 800af54:	1e62      	subs	r2, r4, #1
 800af56:	ab0e      	add	r3, sp, #56	; 0x38
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800af60:	a90e      	add	r1, sp, #56	; 0x38
 800af62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af66:	e739      	b.n	800addc <__kernel_rem_pio2+0x1cc>
 800af68:	1e62      	subs	r2, r4, #1
 800af6a:	ab0e      	add	r3, sp, #56	; 0x38
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af74:	e7f4      	b.n	800af60 <__kernel_rem_pio2+0x350>
 800af76:	a90e      	add	r1, sp, #56	; 0x38
 800af78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	430a      	orrs	r2, r1
 800af80:	e789      	b.n	800ae96 <__kernel_rem_pio2+0x286>
 800af82:	3301      	adds	r3, #1
 800af84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af88:	2900      	cmp	r1, #0
 800af8a:	d0fa      	beq.n	800af82 <__kernel_rem_pio2+0x372>
 800af8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af8e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800af92:	446a      	add	r2, sp
 800af94:	3a98      	subs	r2, #152	; 0x98
 800af96:	920a      	str	r2, [sp, #40]	; 0x28
 800af98:	9a08      	ldr	r2, [sp, #32]
 800af9a:	18e3      	adds	r3, r4, r3
 800af9c:	18a5      	adds	r5, r4, r2
 800af9e:	aa22      	add	r2, sp, #136	; 0x88
 800afa0:	f104 0801 	add.w	r8, r4, #1
 800afa4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	4543      	cmp	r3, r8
 800afae:	da04      	bge.n	800afba <__kernel_rem_pio2+0x3aa>
 800afb0:	461c      	mov	r4, r3
 800afb2:	e6a3      	b.n	800acfc <__kernel_rem_pio2+0xec>
 800afb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afb6:	2301      	movs	r3, #1
 800afb8:	e7e4      	b.n	800af84 <__kernel_rem_pio2+0x374>
 800afba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afbc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800afc0:	f7f5 fab8 	bl	8000534 <__aeabi_i2d>
 800afc4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800afc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afca:	46ab      	mov	fp, r5
 800afcc:	461c      	mov	r4, r3
 800afce:	f04f 0900 	mov.w	r9, #0
 800afd2:	2600      	movs	r6, #0
 800afd4:	2700      	movs	r7, #0
 800afd6:	9b06      	ldr	r3, [sp, #24]
 800afd8:	4599      	cmp	r9, r3
 800afda:	dd06      	ble.n	800afea <__kernel_rem_pio2+0x3da>
 800afdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afde:	e8e3 6702 	strd	r6, r7, [r3], #8
 800afe2:	f108 0801 	add.w	r8, r8, #1
 800afe6:	930a      	str	r3, [sp, #40]	; 0x28
 800afe8:	e7df      	b.n	800afaa <__kernel_rem_pio2+0x39a>
 800afea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800afee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aff2:	f7f5 fb09 	bl	8000608 <__aeabi_dmul>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 f94d 	bl	800029c <__adddf3>
 800b002:	f109 0901 	add.w	r9, r9, #1
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	e7e4      	b.n	800afd6 <__kernel_rem_pio2+0x3c6>
 800b00c:	3d01      	subs	r5, #1
 800b00e:	e748      	b.n	800aea2 <__kernel_rem_pio2+0x292>
 800b010:	ec47 6b10 	vmov	d0, r6, r7
 800b014:	f1ca 0000 	rsb	r0, sl, #0
 800b018:	f000 fc6e 	bl	800b8f8 <scalbn>
 800b01c:	ec57 6b10 	vmov	r6, r7, d0
 800b020:	4ba0      	ldr	r3, [pc, #640]	; (800b2a4 <__kernel_rem_pio2+0x694>)
 800b022:	ee10 0a10 	vmov	r0, s0
 800b026:	2200      	movs	r2, #0
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fd73 	bl	8000b14 <__aeabi_dcmpge>
 800b02e:	b1f8      	cbz	r0, 800b070 <__kernel_rem_pio2+0x460>
 800b030:	4b9d      	ldr	r3, [pc, #628]	; (800b2a8 <__kernel_rem_pio2+0x698>)
 800b032:	2200      	movs	r2, #0
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fae6 	bl	8000608 <__aeabi_dmul>
 800b03c:	f7f5 fd94 	bl	8000b68 <__aeabi_d2iz>
 800b040:	4680      	mov	r8, r0
 800b042:	f7f5 fa77 	bl	8000534 <__aeabi_i2d>
 800b046:	4b97      	ldr	r3, [pc, #604]	; (800b2a4 <__kernel_rem_pio2+0x694>)
 800b048:	2200      	movs	r2, #0
 800b04a:	f7f5 fadd 	bl	8000608 <__aeabi_dmul>
 800b04e:	460b      	mov	r3, r1
 800b050:	4602      	mov	r2, r0
 800b052:	4639      	mov	r1, r7
 800b054:	4630      	mov	r0, r6
 800b056:	f7f5 f91f 	bl	8000298 <__aeabi_dsub>
 800b05a:	f7f5 fd85 	bl	8000b68 <__aeabi_d2iz>
 800b05e:	1c65      	adds	r5, r4, #1
 800b060:	ab0e      	add	r3, sp, #56	; 0x38
 800b062:	f10a 0a18 	add.w	sl, sl, #24
 800b066:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b06a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b06e:	e720      	b.n	800aeb2 <__kernel_rem_pio2+0x2a2>
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fd78 	bl	8000b68 <__aeabi_d2iz>
 800b078:	ab0e      	add	r3, sp, #56	; 0x38
 800b07a:	4625      	mov	r5, r4
 800b07c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b080:	e717      	b.n	800aeb2 <__kernel_rem_pio2+0x2a2>
 800b082:	ab0e      	add	r3, sp, #56	; 0x38
 800b084:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b088:	f7f5 fa54 	bl	8000534 <__aeabi_i2d>
 800b08c:	4632      	mov	r2, r6
 800b08e:	463b      	mov	r3, r7
 800b090:	f7f5 faba 	bl	8000608 <__aeabi_dmul>
 800b094:	4b84      	ldr	r3, [pc, #528]	; (800b2a8 <__kernel_rem_pio2+0x698>)
 800b096:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b09a:	2200      	movs	r2, #0
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	f7f5 fab2 	bl	8000608 <__aeabi_dmul>
 800b0a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	460f      	mov	r7, r1
 800b0ac:	e70f      	b.n	800aece <__kernel_rem_pio2+0x2be>
 800b0ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b0b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b0b6:	f7f5 faa7 	bl	8000608 <__aeabi_dmul>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0c2:	f7f5 f8eb 	bl	800029c <__adddf3>
 800b0c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0ca:	f108 0801 	add.w	r8, r8, #1
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	4598      	cmp	r8, r3
 800b0d2:	dc01      	bgt.n	800b0d8 <__kernel_rem_pio2+0x4c8>
 800b0d4:	45b8      	cmp	r8, r7
 800b0d6:	ddea      	ble.n	800b0ae <__kernel_rem_pio2+0x49e>
 800b0d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b0dc:	ab4a      	add	r3, sp, #296	; 0x128
 800b0de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0e2:	ed87 7b00 	vstr	d7, [r7]
 800b0e6:	3e01      	subs	r6, #1
 800b0e8:	e6f8      	b.n	800aedc <__kernel_rem_pio2+0x2cc>
 800b0ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	dc0b      	bgt.n	800b108 <__kernel_rem_pio2+0x4f8>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dc35      	bgt.n	800b160 <__kernel_rem_pio2+0x550>
 800b0f4:	d059      	beq.n	800b1aa <__kernel_rem_pio2+0x59a>
 800b0f6:	9b04      	ldr	r3, [sp, #16]
 800b0f8:	f003 0007 	and.w	r0, r3, #7
 800b0fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b100:	ecbd 8b02 	vpop	{d8}
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d1f3      	bne.n	800b0f6 <__kernel_rem_pio2+0x4e6>
 800b10e:	ab4a      	add	r3, sp, #296	; 0x128
 800b110:	4423      	add	r3, r4
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	461c      	mov	r4, r3
 800b116:	469a      	mov	sl, r3
 800b118:	9502      	str	r5, [sp, #8]
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b122:	dc6b      	bgt.n	800b1fc <__kernel_rem_pio2+0x5ec>
 800b124:	46aa      	mov	sl, r5
 800b126:	f1ba 0f01 	cmp.w	sl, #1
 800b12a:	f1a4 0408 	sub.w	r4, r4, #8
 800b12e:	f300 8085 	bgt.w	800b23c <__kernel_rem_pio2+0x62c>
 800b132:	9c06      	ldr	r4, [sp, #24]
 800b134:	2000      	movs	r0, #0
 800b136:	3408      	adds	r4, #8
 800b138:	2100      	movs	r1, #0
 800b13a:	2d01      	cmp	r5, #1
 800b13c:	f300 809d 	bgt.w	800b27a <__kernel_rem_pio2+0x66a>
 800b140:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b144:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b148:	f1bb 0f00 	cmp.w	fp, #0
 800b14c:	f040 809b 	bne.w	800b286 <__kernel_rem_pio2+0x676>
 800b150:	9b01      	ldr	r3, [sp, #4]
 800b152:	e9c3 5600 	strd	r5, r6, [r3]
 800b156:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b15a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b15e:	e7ca      	b.n	800b0f6 <__kernel_rem_pio2+0x4e6>
 800b160:	3408      	adds	r4, #8
 800b162:	ab4a      	add	r3, sp, #296	; 0x128
 800b164:	441c      	add	r4, r3
 800b166:	462e      	mov	r6, r5
 800b168:	2000      	movs	r0, #0
 800b16a:	2100      	movs	r1, #0
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	da36      	bge.n	800b1de <__kernel_rem_pio2+0x5ce>
 800b170:	f1bb 0f00 	cmp.w	fp, #0
 800b174:	d039      	beq.n	800b1ea <__kernel_rem_pio2+0x5da>
 800b176:	4602      	mov	r2, r0
 800b178:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b17c:	9c01      	ldr	r4, [sp, #4]
 800b17e:	e9c4 2300 	strd	r2, r3, [r4]
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b18a:	f7f5 f885 	bl	8000298 <__aeabi_dsub>
 800b18e:	ae4c      	add	r6, sp, #304	; 0x130
 800b190:	2401      	movs	r4, #1
 800b192:	42a5      	cmp	r5, r4
 800b194:	da2c      	bge.n	800b1f0 <__kernel_rem_pio2+0x5e0>
 800b196:	f1bb 0f00 	cmp.w	fp, #0
 800b19a:	d002      	beq.n	800b1a2 <__kernel_rem_pio2+0x592>
 800b19c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	9b01      	ldr	r3, [sp, #4]
 800b1a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1a8:	e7a5      	b.n	800b0f6 <__kernel_rem_pio2+0x4e6>
 800b1aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b1ae:	eb0d 0403 	add.w	r4, sp, r3
 800b1b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	2d00      	cmp	r5, #0
 800b1bc:	da09      	bge.n	800b1d2 <__kernel_rem_pio2+0x5c2>
 800b1be:	f1bb 0f00 	cmp.w	fp, #0
 800b1c2:	d002      	beq.n	800b1ca <__kernel_rem_pio2+0x5ba>
 800b1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	e9c3 0100 	strd	r0, r1, [r3]
 800b1d0:	e791      	b.n	800b0f6 <__kernel_rem_pio2+0x4e6>
 800b1d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1d6:	f7f5 f861 	bl	800029c <__adddf3>
 800b1da:	3d01      	subs	r5, #1
 800b1dc:	e7ed      	b.n	800b1ba <__kernel_rem_pio2+0x5aa>
 800b1de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1e2:	f7f5 f85b 	bl	800029c <__adddf3>
 800b1e6:	3e01      	subs	r6, #1
 800b1e8:	e7c0      	b.n	800b16c <__kernel_rem_pio2+0x55c>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	e7c5      	b.n	800b17c <__kernel_rem_pio2+0x56c>
 800b1f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b1f4:	f7f5 f852 	bl	800029c <__adddf3>
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	e7ca      	b.n	800b192 <__kernel_rem_pio2+0x582>
 800b1fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b200:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	3b01      	subs	r3, #1
 800b208:	9302      	str	r3, [sp, #8]
 800b20a:	4632      	mov	r2, r6
 800b20c:	463b      	mov	r3, r7
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 f843 	bl	800029c <__adddf3>
 800b216:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 f839 	bl	8000298 <__aeabi_dsub>
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	f7f5 f837 	bl	800029c <__adddf3>
 800b22e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b232:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b236:	ed8a 7b00 	vstr	d7, [sl]
 800b23a:	e76e      	b.n	800b11a <__kernel_rem_pio2+0x50a>
 800b23c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b240:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b244:	4640      	mov	r0, r8
 800b246:	4632      	mov	r2, r6
 800b248:	463b      	mov	r3, r7
 800b24a:	4649      	mov	r1, r9
 800b24c:	f7f5 f826 	bl	800029c <__adddf3>
 800b250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f5 f81c 	bl	8000298 <__aeabi_dsub>
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	f7f5 f81a 	bl	800029c <__adddf3>
 800b268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b26c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b270:	ed84 7b00 	vstr	d7, [r4]
 800b274:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b278:	e755      	b.n	800b126 <__kernel_rem_pio2+0x516>
 800b27a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b27e:	f7f5 f80d 	bl	800029c <__adddf3>
 800b282:	3d01      	subs	r5, #1
 800b284:	e759      	b.n	800b13a <__kernel_rem_pio2+0x52a>
 800b286:	9b01      	ldr	r3, [sp, #4]
 800b288:	9a01      	ldr	r2, [sp, #4]
 800b28a:	601d      	str	r5, [r3, #0]
 800b28c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b290:	605c      	str	r4, [r3, #4]
 800b292:	609f      	str	r7, [r3, #8]
 800b294:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b298:	60d3      	str	r3, [r2, #12]
 800b29a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b29e:	6110      	str	r0, [r2, #16]
 800b2a0:	6153      	str	r3, [r2, #20]
 800b2a2:	e728      	b.n	800b0f6 <__kernel_rem_pio2+0x4e6>
 800b2a4:	41700000 	.word	0x41700000
 800b2a8:	3e700000 	.word	0x3e700000
 800b2ac:	00000000 	.word	0x00000000

0800b2b0 <__kernel_sin>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	ed2d 8b04 	vpush	{d8-d9}
 800b2b8:	eeb0 8a41 	vmov.f32	s16, s2
 800b2bc:	eef0 8a61 	vmov.f32	s17, s3
 800b2c0:	ec55 4b10 	vmov	r4, r5, d0
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b2ce:	9001      	str	r0, [sp, #4]
 800b2d0:	da06      	bge.n	800b2e0 <__kernel_sin+0x30>
 800b2d2:	ee10 0a10 	vmov	r0, s0
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f5 fc46 	bl	8000b68 <__aeabi_d2iz>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d051      	beq.n	800b384 <__kernel_sin+0xd4>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 f98e 	bl	8000608 <__aeabi_dmul>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 f986 	bl	8000608 <__aeabi_dmul>
 800b2fc:	a341      	add	r3, pc, #260	; (adr r3, 800b404 <__kernel_sin+0x154>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	4650      	mov	r0, sl
 800b308:	4659      	mov	r1, fp
 800b30a:	f7f5 f97d 	bl	8000608 <__aeabi_dmul>
 800b30e:	a33f      	add	r3, pc, #252	; (adr r3, 800b40c <__kernel_sin+0x15c>)
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f7f4 ffc0 	bl	8000298 <__aeabi_dsub>
 800b318:	4652      	mov	r2, sl
 800b31a:	465b      	mov	r3, fp
 800b31c:	f7f5 f974 	bl	8000608 <__aeabi_dmul>
 800b320:	a33c      	add	r3, pc, #240	; (adr r3, 800b414 <__kernel_sin+0x164>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f7f4 ffb9 	bl	800029c <__adddf3>
 800b32a:	4652      	mov	r2, sl
 800b32c:	465b      	mov	r3, fp
 800b32e:	f7f5 f96b 	bl	8000608 <__aeabi_dmul>
 800b332:	a33a      	add	r3, pc, #232	; (adr r3, 800b41c <__kernel_sin+0x16c>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ffae 	bl	8000298 <__aeabi_dsub>
 800b33c:	4652      	mov	r2, sl
 800b33e:	465b      	mov	r3, fp
 800b340:	f7f5 f962 	bl	8000608 <__aeabi_dmul>
 800b344:	a337      	add	r3, pc, #220	; (adr r3, 800b424 <__kernel_sin+0x174>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ffa7 	bl	800029c <__adddf3>
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	b9eb      	cbnz	r3, 800b392 <__kernel_sin+0xe2>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f5 f953 	bl	8000608 <__aeabi_dmul>
 800b362:	a325      	add	r3, pc, #148	; (adr r3, 800b3f8 <__kernel_sin+0x148>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f4 ff96 	bl	8000298 <__aeabi_dsub>
 800b36c:	4642      	mov	r2, r8
 800b36e:	464b      	mov	r3, r9
 800b370:	f7f5 f94a 	bl	8000608 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f4 ff8e 	bl	800029c <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	ec45 4b10 	vmov	d0, r4, r5
 800b388:	b003      	add	sp, #12
 800b38a:	ecbd 8b04 	vpop	{d8-d9}
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <__kernel_sin+0x150>)
 800b394:	ec51 0b18 	vmov	r0, r1, d8
 800b398:	2200      	movs	r2, #0
 800b39a:	f7f5 f935 	bl	8000608 <__aeabi_dmul>
 800b39e:	4632      	mov	r2, r6
 800b3a0:	ec41 0b19 	vmov	d9, r0, r1
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f7f5 f92d 	bl	8000608 <__aeabi_dmul>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	ec51 0b19 	vmov	r0, r1, d9
 800b3b6:	f7f4 ff6f 	bl	8000298 <__aeabi_dsub>
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	465b      	mov	r3, fp
 800b3be:	f7f5 f923 	bl	8000608 <__aeabi_dmul>
 800b3c2:	ec53 2b18 	vmov	r2, r3, d8
 800b3c6:	f7f4 ff67 	bl	8000298 <__aeabi_dsub>
 800b3ca:	a30b      	add	r3, pc, #44	; (adr r3, 800b3f8 <__kernel_sin+0x148>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	f7f5 f916 	bl	8000608 <__aeabi_dmul>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f4 ff5a 	bl	800029c <__adddf3>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f4 ff52 	bl	8000298 <__aeabi_dsub>
 800b3f4:	e7c4      	b.n	800b380 <__kernel_sin+0xd0>
 800b3f6:	bf00      	nop
 800b3f8:	55555549 	.word	0x55555549
 800b3fc:	3fc55555 	.word	0x3fc55555
 800b400:	3fe00000 	.word	0x3fe00000
 800b404:	5acfd57c 	.word	0x5acfd57c
 800b408:	3de5d93a 	.word	0x3de5d93a
 800b40c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b410:	3e5ae5e6 	.word	0x3e5ae5e6
 800b414:	57b1fe7d 	.word	0x57b1fe7d
 800b418:	3ec71de3 	.word	0x3ec71de3
 800b41c:	19c161d5 	.word	0x19c161d5
 800b420:	3f2a01a0 	.word	0x3f2a01a0
 800b424:	1110f8a6 	.word	0x1110f8a6
 800b428:	3f811111 	.word	0x3f811111

0800b42c <with_errno>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	4616      	mov	r6, r2
 800b434:	f7fb f9c0 	bl	80067b8 <__errno>
 800b438:	4629      	mov	r1, r5
 800b43a:	6006      	str	r6, [r0, #0]
 800b43c:	4620      	mov	r0, r4
 800b43e:	bd70      	pop	{r4, r5, r6, pc}

0800b440 <xflow>:
 800b440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b442:	4614      	mov	r4, r2
 800b444:	461d      	mov	r5, r3
 800b446:	b108      	cbz	r0, 800b44c <xflow+0xc>
 800b448:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b44c:	e9cd 2300 	strd	r2, r3, [sp]
 800b450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f5 f8d6 	bl	8000608 <__aeabi_dmul>
 800b45c:	2222      	movs	r2, #34	; 0x22
 800b45e:	b003      	add	sp, #12
 800b460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b464:	f7ff bfe2 	b.w	800b42c <with_errno>

0800b468 <__math_uflow>:
 800b468:	b508      	push	{r3, lr}
 800b46a:	2200      	movs	r2, #0
 800b46c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b470:	f7ff ffe6 	bl	800b440 <xflow>
 800b474:	ec41 0b10 	vmov	d0, r0, r1
 800b478:	bd08      	pop	{r3, pc}

0800b47a <__math_oflow>:
 800b47a:	b508      	push	{r3, lr}
 800b47c:	2200      	movs	r2, #0
 800b47e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b482:	f7ff ffdd 	bl	800b440 <xflow>
 800b486:	ec41 0b10 	vmov	d0, r0, r1
 800b48a:	bd08      	pop	{r3, pc}
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <atan>:
 800b490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	ec55 4b10 	vmov	r4, r5, d0
 800b498:	4bc3      	ldr	r3, [pc, #780]	; (800b7a8 <atan+0x318>)
 800b49a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b49e:	429e      	cmp	r6, r3
 800b4a0:	46ab      	mov	fp, r5
 800b4a2:	dd18      	ble.n	800b4d6 <atan+0x46>
 800b4a4:	4bc1      	ldr	r3, [pc, #772]	; (800b7ac <atan+0x31c>)
 800b4a6:	429e      	cmp	r6, r3
 800b4a8:	dc01      	bgt.n	800b4ae <atan+0x1e>
 800b4aa:	d109      	bne.n	800b4c0 <atan+0x30>
 800b4ac:	b144      	cbz	r4, 800b4c0 <atan+0x30>
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	f7f4 fef1 	bl	800029c <__adddf3>
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	460d      	mov	r5, r1
 800b4be:	e006      	b.n	800b4ce <atan+0x3e>
 800b4c0:	f1bb 0f00 	cmp.w	fp, #0
 800b4c4:	f300 8131 	bgt.w	800b72a <atan+0x29a>
 800b4c8:	a59b      	add	r5, pc, #620	; (adr r5, 800b738 <atan+0x2a8>)
 800b4ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4ce:	ec45 4b10 	vmov	d0, r4, r5
 800b4d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d6:	4bb6      	ldr	r3, [pc, #728]	; (800b7b0 <atan+0x320>)
 800b4d8:	429e      	cmp	r6, r3
 800b4da:	dc14      	bgt.n	800b506 <atan+0x76>
 800b4dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b4e0:	429e      	cmp	r6, r3
 800b4e2:	dc0d      	bgt.n	800b500 <atan+0x70>
 800b4e4:	a396      	add	r3, pc, #600	; (adr r3, 800b740 <atan+0x2b0>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	ee10 0a10 	vmov	r0, s0
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f4 fed4 	bl	800029c <__adddf3>
 800b4f4:	4baf      	ldr	r3, [pc, #700]	; (800b7b4 <atan+0x324>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f7f5 fb16 	bl	8000b28 <__aeabi_dcmpgt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d1e6      	bne.n	800b4ce <atan+0x3e>
 800b500:	f04f 3aff 	mov.w	sl, #4294967295
 800b504:	e02b      	b.n	800b55e <atan+0xce>
 800b506:	f000 f963 	bl	800b7d0 <fabs>
 800b50a:	4bab      	ldr	r3, [pc, #684]	; (800b7b8 <atan+0x328>)
 800b50c:	429e      	cmp	r6, r3
 800b50e:	ec55 4b10 	vmov	r4, r5, d0
 800b512:	f300 80bf 	bgt.w	800b694 <atan+0x204>
 800b516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b51a:	429e      	cmp	r6, r3
 800b51c:	f300 80a0 	bgt.w	800b660 <atan+0x1d0>
 800b520:	ee10 2a10 	vmov	r2, s0
 800b524:	ee10 0a10 	vmov	r0, s0
 800b528:	462b      	mov	r3, r5
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	4ba0      	ldr	r3, [pc, #640]	; (800b7b4 <atan+0x324>)
 800b532:	2200      	movs	r2, #0
 800b534:	f7f4 feb0 	bl	8000298 <__aeabi_dsub>
 800b538:	2200      	movs	r2, #0
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f4 fea9 	bl	800029c <__adddf3>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4630      	mov	r0, r6
 800b550:	4639      	mov	r1, r7
 800b552:	f7f5 f983 	bl	800085c <__aeabi_ddiv>
 800b556:	f04f 0a00 	mov.w	sl, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	4622      	mov	r2, r4
 800b560:	462b      	mov	r3, r5
 800b562:	4620      	mov	r0, r4
 800b564:	4629      	mov	r1, r5
 800b566:	f7f5 f84f 	bl	8000608 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4680      	mov	r8, r0
 800b570:	4689      	mov	r9, r1
 800b572:	f7f5 f849 	bl	8000608 <__aeabi_dmul>
 800b576:	a374      	add	r3, pc, #464	; (adr r3, 800b748 <atan+0x2b8>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	f7f5 f842 	bl	8000608 <__aeabi_dmul>
 800b584:	a372      	add	r3, pc, #456	; (adr r3, 800b750 <atan+0x2c0>)
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f7f4 fe87 	bl	800029c <__adddf3>
 800b58e:	4632      	mov	r2, r6
 800b590:	463b      	mov	r3, r7
 800b592:	f7f5 f839 	bl	8000608 <__aeabi_dmul>
 800b596:	a370      	add	r3, pc, #448	; (adr r3, 800b758 <atan+0x2c8>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f7f4 fe7e 	bl	800029c <__adddf3>
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	f7f5 f830 	bl	8000608 <__aeabi_dmul>
 800b5a8:	a36d      	add	r3, pc, #436	; (adr r3, 800b760 <atan+0x2d0>)
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	f7f4 fe75 	bl	800029c <__adddf3>
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	f7f5 f827 	bl	8000608 <__aeabi_dmul>
 800b5ba:	a36b      	add	r3, pc, #428	; (adr r3, 800b768 <atan+0x2d8>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f4 fe6c 	bl	800029c <__adddf3>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	f7f5 f81e 	bl	8000608 <__aeabi_dmul>
 800b5cc:	a368      	add	r3, pc, #416	; (adr r3, 800b770 <atan+0x2e0>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f4 fe63 	bl	800029c <__adddf3>
 800b5d6:	4642      	mov	r2, r8
 800b5d8:	464b      	mov	r3, r9
 800b5da:	f7f5 f815 	bl	8000608 <__aeabi_dmul>
 800b5de:	a366      	add	r3, pc, #408	; (adr r3, 800b778 <atan+0x2e8>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	f7f5 f80c 	bl	8000608 <__aeabi_dmul>
 800b5f0:	a363      	add	r3, pc, #396	; (adr r3, 800b780 <atan+0x2f0>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 fe4f 	bl	8000298 <__aeabi_dsub>
 800b5fa:	4632      	mov	r2, r6
 800b5fc:	463b      	mov	r3, r7
 800b5fe:	f7f5 f803 	bl	8000608 <__aeabi_dmul>
 800b602:	a361      	add	r3, pc, #388	; (adr r3, 800b788 <atan+0x2f8>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe46 	bl	8000298 <__aeabi_dsub>
 800b60c:	4632      	mov	r2, r6
 800b60e:	463b      	mov	r3, r7
 800b610:	f7f4 fffa 	bl	8000608 <__aeabi_dmul>
 800b614:	a35e      	add	r3, pc, #376	; (adr r3, 800b790 <atan+0x300>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f4 fe3d 	bl	8000298 <__aeabi_dsub>
 800b61e:	4632      	mov	r2, r6
 800b620:	463b      	mov	r3, r7
 800b622:	f7f4 fff1 	bl	8000608 <__aeabi_dmul>
 800b626:	a35c      	add	r3, pc, #368	; (adr r3, 800b798 <atan+0x308>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fe34 	bl	8000298 <__aeabi_dsub>
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	f7f4 ffe8 	bl	8000608 <__aeabi_dmul>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	f7f4 fe2c 	bl	800029c <__adddf3>
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	f7f4 ffde 	bl	8000608 <__aeabi_dmul>
 800b64c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	d14b      	bne.n	800b6ee <atan+0x25e>
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 fe1d 	bl	8000298 <__aeabi_dsub>
 800b65e:	e72c      	b.n	800b4ba <atan+0x2a>
 800b660:	ee10 0a10 	vmov	r0, s0
 800b664:	4b53      	ldr	r3, [pc, #332]	; (800b7b4 <atan+0x324>)
 800b666:	2200      	movs	r2, #0
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f4 fe15 	bl	8000298 <__aeabi_dsub>
 800b66e:	4b51      	ldr	r3, [pc, #324]	; (800b7b4 <atan+0x324>)
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	2200      	movs	r2, #0
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f4 fe0f 	bl	800029c <__adddf3>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 f8e9 	bl	800085c <__aeabi_ddiv>
 800b68a:	f04f 0a01 	mov.w	sl, #1
 800b68e:	4604      	mov	r4, r0
 800b690:	460d      	mov	r5, r1
 800b692:	e764      	b.n	800b55e <atan+0xce>
 800b694:	4b49      	ldr	r3, [pc, #292]	; (800b7bc <atan+0x32c>)
 800b696:	429e      	cmp	r6, r3
 800b698:	da1d      	bge.n	800b6d6 <atan+0x246>
 800b69a:	ee10 0a10 	vmov	r0, s0
 800b69e:	4b48      	ldr	r3, [pc, #288]	; (800b7c0 <atan+0x330>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f4 fdf8 	bl	8000298 <__aeabi_dsub>
 800b6a8:	4b45      	ldr	r3, [pc, #276]	; (800b7c0 <atan+0x330>)
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	4b3e      	ldr	r3, [pc, #248]	; (800b7b4 <atan+0x324>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fdee 	bl	800029c <__adddf3>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f5 f8c8 	bl	800085c <__aeabi_ddiv>
 800b6cc:	f04f 0a02 	mov.w	sl, #2
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	e743      	b.n	800b55e <atan+0xce>
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	ee10 2a10 	vmov	r2, s0
 800b6dc:	4939      	ldr	r1, [pc, #228]	; (800b7c4 <atan+0x334>)
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f7f5 f8bc 	bl	800085c <__aeabi_ddiv>
 800b6e4:	f04f 0a03 	mov.w	sl, #3
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	e737      	b.n	800b55e <atan+0xce>
 800b6ee:	4b36      	ldr	r3, [pc, #216]	; (800b7c8 <atan+0x338>)
 800b6f0:	4e36      	ldr	r6, [pc, #216]	; (800b7cc <atan+0x33c>)
 800b6f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b6f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b6fa:	e9da 2300 	ldrd	r2, r3, [sl]
 800b6fe:	f7f4 fdcb 	bl	8000298 <__aeabi_dsub>
 800b702:	4622      	mov	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f7f4 fdc7 	bl	8000298 <__aeabi_dsub>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b712:	f7f4 fdc1 	bl	8000298 <__aeabi_dsub>
 800b716:	f1bb 0f00 	cmp.w	fp, #0
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	f6bf aed6 	bge.w	800b4ce <atan+0x3e>
 800b722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b726:	461d      	mov	r5, r3
 800b728:	e6d1      	b.n	800b4ce <atan+0x3e>
 800b72a:	a51d      	add	r5, pc, #116	; (adr r5, 800b7a0 <atan+0x310>)
 800b72c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b730:	e6cd      	b.n	800b4ce <atan+0x3e>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	54442d18 	.word	0x54442d18
 800b73c:	bff921fb 	.word	0xbff921fb
 800b740:	8800759c 	.word	0x8800759c
 800b744:	7e37e43c 	.word	0x7e37e43c
 800b748:	e322da11 	.word	0xe322da11
 800b74c:	3f90ad3a 	.word	0x3f90ad3a
 800b750:	24760deb 	.word	0x24760deb
 800b754:	3fa97b4b 	.word	0x3fa97b4b
 800b758:	a0d03d51 	.word	0xa0d03d51
 800b75c:	3fb10d66 	.word	0x3fb10d66
 800b760:	c54c206e 	.word	0xc54c206e
 800b764:	3fb745cd 	.word	0x3fb745cd
 800b768:	920083ff 	.word	0x920083ff
 800b76c:	3fc24924 	.word	0x3fc24924
 800b770:	5555550d 	.word	0x5555550d
 800b774:	3fd55555 	.word	0x3fd55555
 800b778:	2c6a6c2f 	.word	0x2c6a6c2f
 800b77c:	bfa2b444 	.word	0xbfa2b444
 800b780:	52defd9a 	.word	0x52defd9a
 800b784:	3fadde2d 	.word	0x3fadde2d
 800b788:	af749a6d 	.word	0xaf749a6d
 800b78c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b790:	fe231671 	.word	0xfe231671
 800b794:	3fbc71c6 	.word	0x3fbc71c6
 800b798:	9998ebc4 	.word	0x9998ebc4
 800b79c:	3fc99999 	.word	0x3fc99999
 800b7a0:	54442d18 	.word	0x54442d18
 800b7a4:	3ff921fb 	.word	0x3ff921fb
 800b7a8:	440fffff 	.word	0x440fffff
 800b7ac:	7ff00000 	.word	0x7ff00000
 800b7b0:	3fdbffff 	.word	0x3fdbffff
 800b7b4:	3ff00000 	.word	0x3ff00000
 800b7b8:	3ff2ffff 	.word	0x3ff2ffff
 800b7bc:	40038000 	.word	0x40038000
 800b7c0:	3ff80000 	.word	0x3ff80000
 800b7c4:	bff00000 	.word	0xbff00000
 800b7c8:	0800c148 	.word	0x0800c148
 800b7cc:	0800c128 	.word	0x0800c128

0800b7d0 <fabs>:
 800b7d0:	ec51 0b10 	vmov	r0, r1, d0
 800b7d4:	ee10 2a10 	vmov	r2, s0
 800b7d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7dc:	ec43 2b10 	vmov	d0, r2, r3
 800b7e0:	4770      	bx	lr

0800b7e2 <finite>:
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	ed8d 0b00 	vstr	d0, [sp]
 800b7e8:	9801      	ldr	r0, [sp, #4]
 800b7ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b7ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b7f2:	0fc0      	lsrs	r0, r0, #31
 800b7f4:	b002      	add	sp, #8
 800b7f6:	4770      	bx	lr

0800b7f8 <floor>:
 800b7f8:	ec51 0b10 	vmov	r0, r1, d0
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b804:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b808:	2e13      	cmp	r6, #19
 800b80a:	ee10 5a10 	vmov	r5, s0
 800b80e:	ee10 8a10 	vmov	r8, s0
 800b812:	460c      	mov	r4, r1
 800b814:	dc32      	bgt.n	800b87c <floor+0x84>
 800b816:	2e00      	cmp	r6, #0
 800b818:	da14      	bge.n	800b844 <floor+0x4c>
 800b81a:	a333      	add	r3, pc, #204	; (adr r3, 800b8e8 <floor+0xf0>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 fd3c 	bl	800029c <__adddf3>
 800b824:	2200      	movs	r2, #0
 800b826:	2300      	movs	r3, #0
 800b828:	f7f5 f97e 	bl	8000b28 <__aeabi_dcmpgt>
 800b82c:	b138      	cbz	r0, 800b83e <floor+0x46>
 800b82e:	2c00      	cmp	r4, #0
 800b830:	da57      	bge.n	800b8e2 <floor+0xea>
 800b832:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b836:	431d      	orrs	r5, r3
 800b838:	d001      	beq.n	800b83e <floor+0x46>
 800b83a:	4c2d      	ldr	r4, [pc, #180]	; (800b8f0 <floor+0xf8>)
 800b83c:	2500      	movs	r5, #0
 800b83e:	4621      	mov	r1, r4
 800b840:	4628      	mov	r0, r5
 800b842:	e025      	b.n	800b890 <floor+0x98>
 800b844:	4f2b      	ldr	r7, [pc, #172]	; (800b8f4 <floor+0xfc>)
 800b846:	4137      	asrs	r7, r6
 800b848:	ea01 0307 	and.w	r3, r1, r7
 800b84c:	4303      	orrs	r3, r0
 800b84e:	d01f      	beq.n	800b890 <floor+0x98>
 800b850:	a325      	add	r3, pc, #148	; (adr r3, 800b8e8 <floor+0xf0>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fd21 	bl	800029c <__adddf3>
 800b85a:	2200      	movs	r2, #0
 800b85c:	2300      	movs	r3, #0
 800b85e:	f7f5 f963 	bl	8000b28 <__aeabi_dcmpgt>
 800b862:	2800      	cmp	r0, #0
 800b864:	d0eb      	beq.n	800b83e <floor+0x46>
 800b866:	2c00      	cmp	r4, #0
 800b868:	bfbe      	ittt	lt
 800b86a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b86e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b872:	19a4      	addlt	r4, r4, r6
 800b874:	ea24 0407 	bic.w	r4, r4, r7
 800b878:	2500      	movs	r5, #0
 800b87a:	e7e0      	b.n	800b83e <floor+0x46>
 800b87c:	2e33      	cmp	r6, #51	; 0x33
 800b87e:	dd0b      	ble.n	800b898 <floor+0xa0>
 800b880:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b884:	d104      	bne.n	800b890 <floor+0x98>
 800b886:	ee10 2a10 	vmov	r2, s0
 800b88a:	460b      	mov	r3, r1
 800b88c:	f7f4 fd06 	bl	800029c <__adddf3>
 800b890:	ec41 0b10 	vmov	d0, r0, r1
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b89c:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a0:	fa23 f707 	lsr.w	r7, r3, r7
 800b8a4:	4207      	tst	r7, r0
 800b8a6:	d0f3      	beq.n	800b890 <floor+0x98>
 800b8a8:	a30f      	add	r3, pc, #60	; (adr r3, 800b8e8 <floor+0xf0>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fcf5 	bl	800029c <__adddf3>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f7f5 f937 	bl	8000b28 <__aeabi_dcmpgt>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d0bf      	beq.n	800b83e <floor+0x46>
 800b8be:	2c00      	cmp	r4, #0
 800b8c0:	da02      	bge.n	800b8c8 <floor+0xd0>
 800b8c2:	2e14      	cmp	r6, #20
 800b8c4:	d103      	bne.n	800b8ce <floor+0xd6>
 800b8c6:	3401      	adds	r4, #1
 800b8c8:	ea25 0507 	bic.w	r5, r5, r7
 800b8cc:	e7b7      	b.n	800b83e <floor+0x46>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b8d4:	fa03 f606 	lsl.w	r6, r3, r6
 800b8d8:	4435      	add	r5, r6
 800b8da:	4545      	cmp	r5, r8
 800b8dc:	bf38      	it	cc
 800b8de:	18e4      	addcc	r4, r4, r3
 800b8e0:	e7f2      	b.n	800b8c8 <floor+0xd0>
 800b8e2:	2500      	movs	r5, #0
 800b8e4:	462c      	mov	r4, r5
 800b8e6:	e7aa      	b.n	800b83e <floor+0x46>
 800b8e8:	8800759c 	.word	0x8800759c
 800b8ec:	7e37e43c 	.word	0x7e37e43c
 800b8f0:	bff00000 	.word	0xbff00000
 800b8f4:	000fffff 	.word	0x000fffff

0800b8f8 <scalbn>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	ec55 4b10 	vmov	r4, r5, d0
 800b8fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b902:	4606      	mov	r6, r0
 800b904:	462b      	mov	r3, r5
 800b906:	b99a      	cbnz	r2, 800b930 <scalbn+0x38>
 800b908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b90c:	4323      	orrs	r3, r4
 800b90e:	d036      	beq.n	800b97e <scalbn+0x86>
 800b910:	4b39      	ldr	r3, [pc, #228]	; (800b9f8 <scalbn+0x100>)
 800b912:	4629      	mov	r1, r5
 800b914:	ee10 0a10 	vmov	r0, s0
 800b918:	2200      	movs	r2, #0
 800b91a:	f7f4 fe75 	bl	8000608 <__aeabi_dmul>
 800b91e:	4b37      	ldr	r3, [pc, #220]	; (800b9fc <scalbn+0x104>)
 800b920:	429e      	cmp	r6, r3
 800b922:	4604      	mov	r4, r0
 800b924:	460d      	mov	r5, r1
 800b926:	da10      	bge.n	800b94a <scalbn+0x52>
 800b928:	a32b      	add	r3, pc, #172	; (adr r3, 800b9d8 <scalbn+0xe0>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	e03a      	b.n	800b9a6 <scalbn+0xae>
 800b930:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b934:	428a      	cmp	r2, r1
 800b936:	d10c      	bne.n	800b952 <scalbn+0x5a>
 800b938:	ee10 2a10 	vmov	r2, s0
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f4 fcac 	bl	800029c <__adddf3>
 800b944:	4604      	mov	r4, r0
 800b946:	460d      	mov	r5, r1
 800b948:	e019      	b.n	800b97e <scalbn+0x86>
 800b94a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b94e:	460b      	mov	r3, r1
 800b950:	3a36      	subs	r2, #54	; 0x36
 800b952:	4432      	add	r2, r6
 800b954:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b958:	428a      	cmp	r2, r1
 800b95a:	dd08      	ble.n	800b96e <scalbn+0x76>
 800b95c:	2d00      	cmp	r5, #0
 800b95e:	a120      	add	r1, pc, #128	; (adr r1, 800b9e0 <scalbn+0xe8>)
 800b960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b964:	da1c      	bge.n	800b9a0 <scalbn+0xa8>
 800b966:	a120      	add	r1, pc, #128	; (adr r1, 800b9e8 <scalbn+0xf0>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	e018      	b.n	800b9a0 <scalbn+0xa8>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	dd08      	ble.n	800b984 <scalbn+0x8c>
 800b972:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b976:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b97a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b97e:	ec45 4b10 	vmov	d0, r4, r5
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b988:	da19      	bge.n	800b9be <scalbn+0xc6>
 800b98a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b98e:	429e      	cmp	r6, r3
 800b990:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b994:	dd0a      	ble.n	800b9ac <scalbn+0xb4>
 800b996:	a112      	add	r1, pc, #72	; (adr r1, 800b9e0 <scalbn+0xe8>)
 800b998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e2      	bne.n	800b966 <scalbn+0x6e>
 800b9a0:	a30f      	add	r3, pc, #60	; (adr r3, 800b9e0 <scalbn+0xe8>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fe2f 	bl	8000608 <__aeabi_dmul>
 800b9aa:	e7cb      	b.n	800b944 <scalbn+0x4c>
 800b9ac:	a10a      	add	r1, pc, #40	; (adr r1, 800b9d8 <scalbn+0xe0>)
 800b9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0b8      	beq.n	800b928 <scalbn+0x30>
 800b9b6:	a10e      	add	r1, pc, #56	; (adr r1, 800b9f0 <scalbn+0xf8>)
 800b9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9bc:	e7b4      	b.n	800b928 <scalbn+0x30>
 800b9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9c2:	3236      	adds	r2, #54	; 0x36
 800b9c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <scalbn+0x108>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	e7e8      	b.n	800b9a6 <scalbn+0xae>
 800b9d4:	f3af 8000 	nop.w
 800b9d8:	c2f8f359 	.word	0xc2f8f359
 800b9dc:	01a56e1f 	.word	0x01a56e1f
 800b9e0:	8800759c 	.word	0x8800759c
 800b9e4:	7e37e43c 	.word	0x7e37e43c
 800b9e8:	8800759c 	.word	0x8800759c
 800b9ec:	fe37e43c 	.word	0xfe37e43c
 800b9f0:	c2f8f359 	.word	0xc2f8f359
 800b9f4:	81a56e1f 	.word	0x81a56e1f
 800b9f8:	43500000 	.word	0x43500000
 800b9fc:	ffff3cb0 	.word	0xffff3cb0
 800ba00:	3c900000 	.word	0x3c900000

0800ba04 <_sbrk>:
 800ba04:	4a04      	ldr	r2, [pc, #16]	; (800ba18 <_sbrk+0x14>)
 800ba06:	6811      	ldr	r1, [r2, #0]
 800ba08:	4603      	mov	r3, r0
 800ba0a:	b909      	cbnz	r1, 800ba10 <_sbrk+0xc>
 800ba0c:	4903      	ldr	r1, [pc, #12]	; (800ba1c <_sbrk+0x18>)
 800ba0e:	6011      	str	r1, [r2, #0]
 800ba10:	6810      	ldr	r0, [r2, #0]
 800ba12:	4403      	add	r3, r0
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	4770      	bx	lr
 800ba18:	200005ec 	.word	0x200005ec
 800ba1c:	200005f0 	.word	0x200005f0

0800ba20 <_init>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	bf00      	nop
 800ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba26:	bc08      	pop	{r3}
 800ba28:	469e      	mov	lr, r3
 800ba2a:	4770      	bx	lr

0800ba2c <_fini>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	bf00      	nop
 800ba30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba32:	bc08      	pop	{r3}
 800ba34:	469e      	mov	lr, r3
 800ba36:	4770      	bx	lr
