
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000527c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005540  08005540  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005540  08005540  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005540  08005540  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001345c  20000070  080055b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134cc  080055b8  000234cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d31b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe5  00000000  00000000  0002d3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ab4  00000000  00000000  00030908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cac5  00000000  00000000  000433bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065b8b  00000000  00000000  0004fe81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  000b5a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005404 	.word	0x08005404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005404 	.word	0x08005404

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012eec 	.word	0x20012eec

08000274 <main>:
unsigned int secondParameter;
unsigned int thirdParameter;
char userMsg[64];

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <main+0x7c>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <main+0x7c>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <main+0x80>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <main+0x80>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


	inSystem ();
 8000296:	f000 f839 	bl	800030c <inSystem>

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
	TaskHandle_t xHandleTask2 = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]

	xReturned = xTaskCreate(
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	2302      	movs	r3, #2
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	22c8      	movs	r2, #200	; 0xc8
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <main+0x84>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <main+0x88>)
 80002b2:	f000 fef1 	bl	8001098 <xTaskCreate>
 80002b6:	60f8      	str	r0, [r7, #12]
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1 );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d00a      	beq.n	80002d4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c2:	f383 8811 	msr	BASEPRI, r3
 80002c6:	f3bf 8f6f 	isb	sy
 80002ca:	f3bf 8f4f 	dsb	sy
 80002ce:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002d0:	bf00      	nop
 80002d2:	e7fe      	b.n	80002d2 <main+0x5e>

	 xReturned = xTaskCreate(
 80002d4:	463b      	mov	r3, r7
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2302      	movs	r3, #2
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <main+0x8c>)
 80002de:	22c8      	movs	r2, #200	; 0xc8
 80002e0:	4908      	ldr	r1, [pc, #32]	; (8000304 <main+0x90>)
 80002e2:	4809      	ldr	r0, [pc, #36]	; (8000308 <main+0x94>)
 80002e4:	f000 fed8 	bl	8001098 <xTaskCreate>
 80002e8:	60f8      	str	r0, [r7, #12]
	 	                    2,/* Priority at which the task is created. */
	 	                    &xHandleTask2 );      /* Used to pass out the created task's handle. */


	 /* Start the created tasks running. */
	 vTaskStartScheduler();
 80002ea:	f001 f871 	bl	80013d0 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 80002ee:	e7fe      	b.n	80002ee <main+0x7a>
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e0001000 	.word	0xe0001000
 80002f8:	0800541c 	.word	0x0800541c
 80002fc:	08000355 	.word	0x08000355
 8000300:	08005424 	.word	0x08005424
 8000304:	08005430 	.word	0x08005430
 8000308:	08000371 	.word	0x08000371

0800030c <inSystem>:

	}
}


void inSystem (void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	//Descripcion de la configuracion

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <inSystem+0x40>)
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <inSystem+0x44>)
 8000314:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <inSystem+0x40>)
 8000318:	2200      	movs	r2, #0
 800031a:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <inSystem+0x40>)
 800031e:	2201      	movs	r2, #1
 8000320:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <inSystem+0x40>)
 8000324:	2200      	movs	r2, #0
 8000326:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <inSystem+0x40>)
 800032a:	2205      	movs	r2, #5
 800032c:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <inSystem+0x40>)
 8000330:	2200      	movs	r2, #0
 8000332:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <inSystem+0x40>)
 8000336:	2202      	movs	r2, #2
 8000338:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 800033a:	4804      	ldr	r0, [pc, #16]	; (800034c <inSystem+0x40>)
 800033c:	f004 f98e 	bl	800465c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000340:	2101      	movs	r1, #1
 8000342:	4802      	ldr	r0, [pc, #8]	; (800034c <inSystem+0x40>)
 8000344:	f004 fab4 	bl	80048b0 <GPIO_WritePin>





}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000008c 	.word	0x2000008c
 8000350:	40020000 	.word	0x40020000

08000354 <vTaskOne>:



void vTaskOne( void * pvParameters )
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

   while(1){
	   //printf("%s\n",((char*) pvParameters));
	   GPIOxTooglePin(&handlerPinA5);
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <vTaskOne+0x18>)
 800035e:	f004 faf3 	bl	8004948 <GPIOxTooglePin>
   	   vTaskDelay((pdMS_TO_TICKS(250)));
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fffc 	bl	8001360 <vTaskDelay>
	   GPIOxTooglePin(&handlerPinA5);
 8000368:	e7f8      	b.n	800035c <vTaskOne+0x8>
 800036a:	bf00      	nop
 800036c:	2000008c 	.word	0x2000008c

08000370 <vTaskTwo>:
	   //taskYIELD();
   }
}

void vTaskTwo( void * pvParameters )
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

   while(1){
	   printf("%s\n",((char*) pvParameters));
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f004 fbb7 	bl	8004aec <puts>
	   vTaskDelay((pdMS_TO_TICKS(10)));
 800037e:	2000      	movs	r0, #0
 8000380:	f000 ffee 	bl	8001360 <vTaskDelay>
	   printf("%s\n",((char*) pvParameters));
 8000384:	e7f8      	b.n	8000378 <vTaskTwo+0x8>

08000386 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	e00a      	b.n	80003ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000398:	f3af 8000 	nop.w
 800039c:	4601      	mov	r1, r0
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	1c5a      	adds	r2, r3, #1
 80003a2:	60ba      	str	r2, [r7, #8]
 80003a4:	b2ca      	uxtb	r2, r1
 80003a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	3301      	adds	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	dbf0      	blt.n	8000398 <_read+0x12>
	}

return len;
 80003b6:	687b      	ldr	r3, [r7, #4]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	return -1;
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e8:	605a      	str	r2, [r3, #4]
	return 0;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <_isatty>:

int _isatty(int file)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	return 1;
 8000400:	2301      	movs	r3, #1
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
	return 0;
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800042c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490d      	ldr	r1, [pc, #52]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000456:	f004 fa91 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f7ff ff0b 	bl	8000274 <main>

0800045e <LoopForever>:

LoopForever:
    b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   r0, =_estack
 8000460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800046c:	08005548 	.word	0x08005548
  ldr r2, =_sbss
 8000470:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000474:	200134cc 	.word	0x200134cc

08000478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>

0800047a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f103 0208 	add.w	r2, r3, #8
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000492:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f103 0208 	add.w	r2, r3, #8
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f103 0208 	add.w	r2, r3, #8
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	689a      	ldr	r2, [r3, #8]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000532:	d103      	bne.n	800053c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00c      	b.n	8000556 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3308      	adds	r3, #8
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e002      	b.n	800054a <vListInsert+0x2e>
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	429a      	cmp	r2, r3
 8000554:	d2f6      	bcs.n	8000544 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	6892      	ldr	r2, [r2, #8]
 80005a4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6852      	ldr	r2, [r2, #4]
 80005ae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d103      	bne.n	80005c2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <xQueueGenericReset+0x2a>
        __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60bb      	str	r3, [r7, #8]
    }
 800060a:	bf00      	nop
 800060c:	e7fe      	b.n	800060c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800060e:	f002 f863 	bl	80026d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800061a:	68f9      	ldr	r1, [r7, #12]
 800061c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800061e:	fb01 f303 	mul.w	r3, r1, r3
 8000622:	441a      	add	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063e:	3b01      	subs	r3, #1
 8000640:	68f9      	ldr	r1, [r7, #12]
 8000642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000644:	fb01 f303 	mul.w	r3, r1, r3
 8000648:	441a      	add	r2, r3
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d114      	bne.n	800068e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01a      	beq.n	80006a2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3310      	adds	r3, #16
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f937 	bl	80018e4 <xTaskRemoveFromEventList>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d012      	beq.n	80006a2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <xQueueGenericReset+0xcc>)
 800067e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	e009      	b.n	80006a2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3310      	adds	r3, #16
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fef1 	bl	800047a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3324      	adds	r3, #36	; 0x24
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff feec 	bl	800047a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80006a2:	f002 f849 	bl	8002738 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	e000ed04 	.word	0xe000ed04

080006b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	4613      	mov	r3, r2
 80006c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10a      	bne.n	80006de <xQueueGenericCreate+0x2a>
        __asm volatile
 80006c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006cc:	f383 8811 	msr	BASEPRI, r3
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	f3bf 8f4f 	dsb	sy
 80006d8:	61bb      	str	r3, [r7, #24]
    }
 80006da:	bf00      	nop
 80006dc:	e7fe      	b.n	80006dc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <xQueueGenericCreate+0x48>
 80006ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d101      	bne.n	8000700 <xQueueGenericCreate+0x4c>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <xQueueGenericCreate+0x4e>
 8000700:	2300      	movs	r3, #0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10a      	bne.n	800071c <xQueueGenericCreate+0x68>
        __asm volatile
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	617b      	str	r3, [r7, #20]
    }
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000722:	d90a      	bls.n	800073a <xQueueGenericCreate+0x86>
        __asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
    }
 8000736:	bf00      	nop
 8000738:	e7fe      	b.n	8000738 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	3350      	adds	r3, #80	; 0x50
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f8ee 	bl	8002920 <pvPortMalloc>
 8000744:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00d      	beq.n	8000768 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 f805 	bl	8000772 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000768:	6a3b      	ldr	r3, [r7, #32]
    }
 800076a:	4618      	mov	r0, r3
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	60f8      	str	r0, [r7, #12]
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d103      	bne.n	800078e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e002      	b.n	8000794 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007a0:	2101      	movs	r1, #1
 80007a2:	69b8      	ldr	r0, [r7, #24]
 80007a4:	f7ff ff1e 	bl	80005e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	78fa      	ldrb	r2, [r7, #3]
 80007ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	2073      	movs	r0, #115	; 0x73
 80007b8:	f003 f88c 	bl	80038d4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10a      	bne.n	80007f6 <xQueueGenericSend+0x32>
        __asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <xQueueGenericSend+0x40>
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <xQueueGenericSend+0x44>
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <xQueueGenericSend+0x46>
 8000808:	2300      	movs	r3, #0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <xQueueGenericSend+0x60>
        __asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000820:	bf00      	nop
 8000822:	e7fe      	b.n	8000822 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d103      	bne.n	8000832 <xQueueGenericSend+0x6e>
 800082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800082e:	2b01      	cmp	r3, #1
 8000830:	d101      	bne.n	8000836 <xQueueGenericSend+0x72>
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <xQueueGenericSend+0x74>
 8000836:	2300      	movs	r3, #0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10a      	bne.n	8000852 <xQueueGenericSend+0x8e>
        __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	623b      	str	r3, [r7, #32]
    }
 800084e:	bf00      	nop
 8000850:	e7fe      	b.n	8000850 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000852:	f001 f9e7 	bl	8001c24 <xTaskGetSchedulerState>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <xQueueGenericSend+0x9e>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <xQueueGenericSend+0xa2>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <xQueueGenericSend+0xa4>
 8000866:	2300      	movs	r3, #0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10a      	bne.n	8000882 <xQueueGenericSend+0xbe>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61fb      	str	r3, [r7, #28]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000882:	f001 ff29 	bl	80026d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088e:	429a      	cmp	r2, r3
 8000890:	d302      	bcc.n	8000898 <xQueueGenericSend+0xd4>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d136      	bne.n	8000906 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fd84 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	460b      	mov	r3, r1
 80008aa:	4601      	mov	r1, r0
 80008ac:	205a      	movs	r0, #90	; 0x5a
 80008ae:	f003 f887 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008b8:	f000 fa78 	bl	8000dac <prvCopyDataToQueue>
 80008bc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d010      	beq.n	80008e8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	3324      	adds	r3, #36	; 0x24
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f80a 	bl	80018e4 <xTaskRemoveFromEventList>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d013      	beq.n	80008fe <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80008d6:	4b4d      	ldr	r3, [pc, #308]	; (8000a0c <xQueueGenericSend+0x248>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	e00a      	b.n	80008fe <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <xQueueGenericSend+0x248>)
 80008f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80008fe:	f001 ff1b 	bl	8002738 <vPortExitCritical>
                return pdPASS;
 8000902:	2301      	movs	r3, #1
 8000904:	e07d      	b.n	8000a02 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d110      	bne.n	800092e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800090c:	f001 ff14 	bl	8002738 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fd48 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	460b      	mov	r3, r1
 8000922:	4601      	mov	r1, r0
 8000924:	205a      	movs	r0, #90	; 0x5a
 8000926:	f003 f84b 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800092a:	2300      	movs	r3, #0
 800092c:	e069      	b.n	8000a02 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f839 	bl	80019b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800093e:	2301      	movs	r3, #1
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000942:	f001 fef9 	bl	8002738 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000946:	f000 fda5 	bl	8001494 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800094a:	f001 fec5 	bl	80026d8 <vPortEnterCritical>
 800094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000954:	b25b      	sxtb	r3, r3
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800095a:	d103      	bne.n	8000964 <xQueueGenericSend+0x1a0>
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800096a:	b25b      	sxtb	r3, r3
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000970:	d103      	bne.n	800097a <xQueueGenericSend+0x1b6>
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800097a:	f001 fedd 	bl	8002738 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800097e:	1d3a      	adds	r2, r7, #4
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f828 	bl	80019dc <xTaskCheckForTimeOut>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d124      	bne.n	80009dc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000994:	f000 fb02 	bl	8000f9c <prvIsQueueFull>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d018      	beq.n	80009d0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	3310      	adds	r3, #16
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 ff4a 	bl	8001840 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80009ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009ae:	f000 fa8d 	bl	8000ecc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009b2:	f000 fd7d 	bl	80014b0 <xTaskResumeAll>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f47f af62 	bne.w	8000882 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <xQueueGenericSend+0x248>)
 80009c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	f3bf 8f4f 	dsb	sy
 80009ca:	f3bf 8f6f 	isb	sy
 80009ce:	e758      	b.n	8000882 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80009d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009d2:	f000 fa7b 	bl	8000ecc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009d6:	f000 fd6b 	bl	80014b0 <xTaskResumeAll>
 80009da:	e752      	b.n	8000882 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009de:	f000 fa75 	bl	8000ecc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009e2:	f000 fd65 	bl	80014b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80009e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fcdd 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	460b      	mov	r3, r1
 80009f8:	4601      	mov	r1, r0
 80009fa:	205a      	movs	r0, #90	; 0x5a
 80009fc:	f002 ffe0 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a00:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000ed04 	.word	0xe000ed04

08000a10 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10a      	bne.n	8000a3e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a2c:	f383 8811 	msr	BASEPRI, r3
 8000a30:	f3bf 8f6f 	isb	sy
 8000a34:	f3bf 8f4f 	dsb	sy
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000a3a:	bf00      	nop
 8000a3c:	e7fe      	b.n	8000a3c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d103      	bne.n	8000a4c <xQueueGenericSendFromISR+0x3c>
 8000a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <xQueueGenericSendFromISR+0x40>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <xQueueGenericSendFromISR+0x42>
 8000a50:	2300      	movs	r3, #0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10a      	bne.n	8000a6c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5a:	f383 8811 	msr	BASEPRI, r3
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a68:	bf00      	nop
 8000a6a:	e7fe      	b.n	8000a6a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d103      	bne.n	8000a7a <xQueueGenericSendFromISR+0x6a>
 8000a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d101      	bne.n	8000a7e <xQueueGenericSendFromISR+0x6e>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <xQueueGenericSendFromISR+0x70>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10a      	bne.n	8000a9a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a88:	f383 8811 	msr	BASEPRI, r3
 8000a8c:	f3bf 8f6f 	isb	sy
 8000a90:	f3bf 8f4f 	dsb	sy
 8000a94:	623b      	str	r3, [r7, #32]
    }
 8000a96:	bf00      	nop
 8000a98:	e7fe      	b.n	8000a98 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a9a:	f001 ff01 	bl	80028a0 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8000aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa6:	f383 8811 	msr	BASEPRI, r3
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	61fa      	str	r2, [r7, #28]
 8000ab4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d302      	bcc.n	8000acc <xQueueGenericSendFromISR+0xbc>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d148      	bne.n	8000b5e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fc62 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2060      	movs	r0, #96	; 0x60
 8000aec:	f002 fe98 	bl	8003820 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000af6:	f000 f959 	bl	8000dac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000afa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b02:	d112      	bne.n	8000b2a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d025      	beq.n	8000b58 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	3324      	adds	r3, #36	; 0x24
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fee7 	bl	80018e4 <xTaskRemoveFromEventList>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01d      	beq.n	8000b58 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01a      	beq.n	8000b58 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e016      	b.n	8000b58 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	d10a      	bne.n	8000b48 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	617b      	str	r3, [r7, #20]
    }
 8000b44:	bf00      	nop
 8000b46:	e7fe      	b.n	8000b46 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000b5c:	e00b      	b.n	8000b76 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fc21 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000b66:	4601      	mov	r1, r0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2060      	movs	r0, #96	; 0x60
 8000b6e:	f002 fe57 	bl	8003820 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000b80:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3740      	adds	r7, #64	; 0x40
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08f      	sub	sp, #60	; 0x3c
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10a      	bne.n	8000bbc <xQueueReceive+0x30>
        __asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	623b      	str	r3, [r7, #32]
    }
 8000bb8:	bf00      	nop
 8000bba:	e7fe      	b.n	8000bba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <xQueueReceive+0x3e>
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <xQueueReceive+0x42>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <xQueueReceive+0x44>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10a      	bne.n	8000bea <xQueueReceive+0x5e>
        __asm volatile
 8000bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd8:	f383 8811 	msr	BASEPRI, r3
 8000bdc:	f3bf 8f6f 	isb	sy
 8000be0:	f3bf 8f4f 	dsb	sy
 8000be4:	61fb      	str	r3, [r7, #28]
    }
 8000be6:	bf00      	nop
 8000be8:	e7fe      	b.n	8000be8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000bea:	f001 f81b 	bl	8001c24 <xTaskGetSchedulerState>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <xQueueReceive+0x6e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <xQueueReceive+0x72>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <xQueueReceive+0x74>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10a      	bne.n	8000c1a <xQueueReceive+0x8e>
        __asm volatile
 8000c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c08:	f383 8811 	msr	BASEPRI, r3
 8000c0c:	f3bf 8f6f 	isb	sy
 8000c10:	f3bf 8f4f 	dsb	sy
 8000c14:	61bb      	str	r3, [r7, #24]
    }
 8000c16:	bf00      	nop
 8000c18:	e7fe      	b.n	8000c18 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c1a:	f001 fd5d 	bl	80026d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d02f      	beq.n	8000c8a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c2e:	f000 f927 	bl	8000e80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fbb7 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f003 fbb3 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000c42:	4602      	mov	r2, r0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2101      	movs	r1, #1
 8000c48:	9100      	str	r1, [sp, #0]
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	205c      	movs	r0, #92	; 0x5c
 8000c4e:	f002 feb7 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00f      	beq.n	8000c82 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	3310      	adds	r3, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fe3c 	bl	80018e4 <xTaskRemoveFromEventList>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <xQueueReceive+0x21c>)
 8000c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	f3bf 8f4f 	dsb	sy
 8000c7e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c82:	f001 fd59 	bl	8002738 <vPortExitCritical>
                return pdPASS;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e08a      	b.n	8000da0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d113      	bne.n	8000cb8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c90:	f001 fd52 	bl	8002738 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fb86 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f003 fb82 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	9100      	str	r1, [sp, #0]
 8000cac:	4621      	mov	r1, r4
 8000cae:	205c      	movs	r0, #92	; 0x5c
 8000cb0:	f002 fe86 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e073      	b.n	8000da0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d106      	bne.n	8000ccc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fe74 	bl	80019b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ccc:	f001 fd34 	bl	8002738 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cd0:	f000 fbe0 	bl	8001494 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cd4:	f001 fd00 	bl	80026d8 <vPortEnterCritical>
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce4:	d103      	bne.n	8000cee <xQueueReceive+0x162>
 8000ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfa:	d103      	bne.n	8000d04 <xQueueReceive+0x178>
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d04:	f001 fd18 	bl	8002738 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d08:	1d3a      	adds	r2, r7, #4
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fe63 	bl	80019dc <xTaskCheckForTimeOut>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d124      	bne.n	8000d66 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d1e:	f000 f927 	bl	8000f70 <prvIsQueueEmpty>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d018      	beq.n	8000d5a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	3324      	adds	r3, #36	; 0x24
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd85 	bl	8001840 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d38:	f000 f8c8 	bl	8000ecc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d3c:	f000 fbb8 	bl	80014b0 <xTaskResumeAll>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f af69 	bne.w	8000c1a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <xQueueReceive+0x21c>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
 8000d58:	e75f      	b.n	8000c1a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d5c:	f000 f8b6 	bl	8000ecc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d60:	f000 fba6 	bl	80014b0 <xTaskResumeAll>
 8000d64:	e759      	b.n	8000c1a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d68:	f000 f8b0 	bl	8000ecc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d6c:	f000 fba0 	bl	80014b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d72:	f000 f8fd 	bl	8000f70 <prvIsQueueEmpty>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f43f af4e 	beq.w	8000c1a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fb11 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000d86:	4604      	mov	r4, r0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f003 fb0d 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2101      	movs	r1, #1
 8000d94:	9100      	str	r1, [sp, #0]
 8000d96:	4621      	mov	r1, r4
 8000d98:	205c      	movs	r0, #92	; 0x5c
 8000d9a:	f002 fe11 	bl	80039c0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000d9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3734      	adds	r7, #52	; 0x34
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	e000ed04 	.word	0xe000ed04

08000dac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10d      	bne.n	8000de6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 ff42 	bl	8001c60 <xTaskPriorityDisinherit>
 8000ddc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	e043      	b.n	8000e6e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d119      	bne.n	8000e20 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6858      	ldr	r0, [r3, #4]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	461a      	mov	r2, r3
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	f003 fdf4 	bl	80049e4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	441a      	add	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d32b      	bcc.n	8000e6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	e026      	b.n	8000e6e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68d8      	ldr	r0, [r3, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	f003 fdda 	bl	80049e4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	425b      	negs	r3, r3
 8000e3a:	441a      	add	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	425b      	negs	r3, r3
 8000e56:	441a      	add	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d105      	bne.n	8000e6e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e76:	697b      	ldr	r3, [r7, #20]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d018      	beq.n	8000ec4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	441a      	add	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d303      	bcc.n	8000eb4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68d9      	ldr	r1, [r3, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f003 fd90 	bl	80049e4 <memcpy>
    }
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ed4:	f001 fc00 	bl	80026d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ede:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ee0:	e011      	b.n	8000f06 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d012      	beq.n	8000f10 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3324      	adds	r3, #36	; 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fcf8 	bl	80018e4 <xTaskRemoveFromEventList>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000efa:	f000 fdd5 	bl	8001aa8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	dce9      	bgt.n	8000ee2 <prvUnlockQueue+0x16>
 8000f0e:	e000      	b.n	8000f12 <prvUnlockQueue+0x46>
                        break;
 8000f10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f1a:	f001 fc0d 	bl	8002738 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f1e:	f001 fbdb 	bl	80026d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f2a:	e011      	b.n	8000f50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d012      	beq.n	8000f5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3310      	adds	r3, #16
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fcd3 	bl	80018e4 <xTaskRemoveFromEventList>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f44:	f000 fdb0 	bl	8001aa8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dce9      	bgt.n	8000f2c <prvUnlockQueue+0x60>
 8000f58:	e000      	b.n	8000f5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f64:	f001 fbe8 	bl	8002738 <vPortExitCritical>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f78:	f001 fbae 	bl	80026d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e001      	b.n	8000f8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f8e:	f001 fbd3 	bl	8002738 <vPortExitCritical>

    return xReturn;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fa4:	f001 fb98 	bl	80026d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d102      	bne.n	8000fba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e001      	b.n	8000fbe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fbe:	f001 fbbb 	bl	8002738 <vPortExitCritical>

    return xReturn;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e01e      	b.n	800101a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <vQueueAddToRegistry+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d115      	bne.n	8001014 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000fe8:	4910      	ldr	r1, [pc, #64]	; (800102c <vQueueAddToRegistry+0x60>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <vQueueAddToRegistry+0x60>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f003 f9d1 	bl	80043a8 <SEGGER_SYSVIEW_ShrinkId>
 8001006:	4601      	mov	r1, r0
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	2071      	movs	r0, #113	; 0x71
 800100e:	f002 fc07 	bl	8003820 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001012:	e006      	b.n	8001022 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b07      	cmp	r3, #7
 800101e:	d9dd      	bls.n	8000fdc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000098 	.word	0x20000098

08001030 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001040:	f001 fb4a 	bl	80026d8 <vPortEnterCritical>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001050:	d103      	bne.n	800105a <vQueueWaitForMessageRestricted+0x2a>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001066:	d103      	bne.n	8001070 <vQueueWaitForMessageRestricted+0x40>
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001070:	f001 fb62 	bl	8002738 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3324      	adds	r3, #36	; 0x24
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fbff 	bl	8001888 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff1e 	bl	8000ecc <prvUnlockQueue>
    }
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af04      	add	r7, sp, #16
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fc37 	bl	8002920 <pvPortMalloc>
 80010b2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00e      	beq.n	80010d8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010ba:	2058      	movs	r0, #88	; 0x58
 80010bc:	f001 fc30 	bl	8002920 <pvPortMalloc>
 80010c0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
 80010ce:	e005      	b.n	80010dc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80010d0:	6978      	ldr	r0, [r7, #20]
 80010d2:	f001 fd05 	bl	8002ae0 <vPortFree>
 80010d6:	e001      	b.n	80010dc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d013      	beq.n	800110a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f80e 	bl	800111a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80010fe:	69f8      	ldr	r0, [r7, #28]
 8001100:	f000 f8a2 	bl	8001248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	e002      	b.n	8001110 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001110:	69bb      	ldr	r3, [r7, #24]
    }
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b088      	sub	sp, #32
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	461a      	mov	r2, r3
 8001132:	21a5      	movs	r1, #165	; 0xa5
 8001134:	f003 fc64 	bl	8004a00 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001142:	3b01      	subs	r3, #1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <prvInitialiseNewTask+0x58>
        __asm volatile
 800115c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001160:	f383 8811 	msr	BASEPRI, r3
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	617b      	str	r3, [r7, #20]
    }
 800116e:	bf00      	nop
 8001170:	e7fe      	b.n	8001170 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01f      	beq.n	80011b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e012      	b.n	80011a4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	7819      	ldrb	r1, [r3, #0]
 8001186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	3334      	adds	r3, #52	; 0x34
 800118e:	460a      	mov	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b09      	cmp	r3, #9
 80011a8:	d9e9      	bls.n	800117e <prvInitialiseNewTask+0x64>
 80011aa:	e000      	b.n	80011ae <prvInitialiseNewTask+0x94>
            {
                break;
 80011ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80011b6:	e003      	b.n	80011c0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d901      	bls.n	80011ca <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011c6:	2304      	movs	r3, #4
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80011dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011de:	3304      	adds	r3, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f96a 	bl	80004ba <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	3318      	adds	r3, #24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f965 	bl	80004ba <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	f1c3 0205 	rsb	r2, r3, #5
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	3350      	adds	r3, #80	; 0x50
 800120a:	2204      	movs	r2, #4
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fbf6 	bl	8004a00 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	3354      	adds	r3, #84	; 0x54
 8001218:	2201      	movs	r2, #1
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fbef 	bl	8004a00 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	69b8      	ldr	r0, [r7, #24]
 8001228:	f001 f924 	bl	8002474 <pxPortInitialiseStack>
 800122c:	4602      	mov	r2, r0
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800123c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001250:	f001 fa42 	bl	80026d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <prvAddNewTaskToReadyList+0xfc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <prvAddNewTaskToReadyList+0xfc>)
 800125c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <prvAddNewTaskToReadyList+0x100>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001266:	4a38      	ldr	r2, [pc, #224]	; (8001348 <prvAddNewTaskToReadyList+0x100>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <prvAddNewTaskToReadyList+0xfc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d110      	bne.n	8001296 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001274:	f000 fc3c 	bl	8001af0 <prvInitialiseTaskLists>
 8001278:	e00d      	b.n	8001296 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800127a:	4b34      	ldr	r3, [pc, #208]	; (800134c <prvAddNewTaskToReadyList+0x104>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <prvAddNewTaskToReadyList+0x100>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	429a      	cmp	r2, r3
 800128e:	d802      	bhi.n	8001296 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <prvAddNewTaskToReadyList+0x100>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <prvAddNewTaskToReadyList+0x108>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <prvAddNewTaskToReadyList+0x108>)
 800129e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <prvAddNewTaskToReadyList+0x108>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d016      	beq.n	80012dc <prvAddNewTaskToReadyList+0x94>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ff53 	bl	800415c <SEGGER_SYSVIEW_OnTaskCreate>
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	461d      	mov	r5, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	461c      	mov	r4, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	1ae3      	subs	r3, r4, r3
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	462b      	mov	r3, r5
 80012d8:	f001 fd20 	bl	8002d1c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ffc0 	bl	8004264 <SEGGER_SYSVIEW_OnTaskStartReady>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	2201      	movs	r2, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <prvAddNewTaskToReadyList+0x10c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <prvAddNewTaskToReadyList+0x10c>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <prvAddNewTaskToReadyList+0x110>)
 8001304:	441a      	add	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f7ff f8e1 	bl	80004d4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001312:	f001 fa11 	bl	8002738 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <prvAddNewTaskToReadyList+0x104>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00e      	beq.n	800133c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <prvAddNewTaskToReadyList+0x100>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <prvAddNewTaskToReadyList+0x114>)
 800132e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	f3bf 8f4f 	dsb	sy
 8001338:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bdb0      	pop	{r4, r5, r7, pc}
 8001344:	200001b0 	.word	0x200001b0
 8001348:	200000d8 	.word	0x200000d8
 800134c:	200001bc 	.word	0x200001bc
 8001350:	200001cc 	.word	0x200001cc
 8001354:	200001b8 	.word	0x200001b8
 8001358:	200000dc 	.word	0x200000dc
 800135c:	e000ed04 	.word	0xe000ed04

08001360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01b      	beq.n	80013aa <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <vTaskDelay+0x68>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <vTaskDelay+0x30>
        __asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	60bb      	str	r3, [r7, #8]
    }
 800138c:	bf00      	nop
 800138e:	e7fe      	b.n	800138e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001390:	f000 f880 	bl	8001494 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	2023      	movs	r0, #35	; 0x23
 8001398:	f002 fa06 	bl	80037a8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800139c:	2100      	movs	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fcde 	bl	8001d60 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013a4:	f000 f884 	bl	80014b0 <xTaskResumeAll>
 80013a8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <vTaskDelay+0x6c>)
 80013b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001d8 	.word	0x200001d8
 80013cc:	e000ed04 	.word	0xe000ed04

080013d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <vTaskStartScheduler+0xa4>)
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	2282      	movs	r2, #130	; 0x82
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <vTaskStartScheduler+0xa8>)
 80013e4:	4825      	ldr	r0, [pc, #148]	; (800147c <vTaskStartScheduler+0xac>)
 80013e6:	f7ff fe57 	bl	8001098 <xTaskCreate>
 80013ea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80013f2:	f000 fd2d 	bl	8001e50 <xTimerCreateTimerTask>
 80013f6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d124      	bne.n	8001448 <vTaskStartScheduler+0x78>
        __asm volatile
 80013fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	60bb      	str	r3, [r7, #8]
    }
 8001410:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <vTaskStartScheduler+0xb0>)
 8001414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001418:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <vTaskStartScheduler+0xb4>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <vTaskStartScheduler+0xb8>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <vTaskStartScheduler+0xbc>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <vTaskStartScheduler+0xa4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d102      	bne.n	8001438 <vTaskStartScheduler+0x68>
 8001432:	f002 fe77 	bl	8004124 <SEGGER_SYSVIEW_OnIdle>
 8001436:	e004      	b.n	8001442 <vTaskStartScheduler+0x72>
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <vTaskStartScheduler+0xbc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fecf 	bl	80041e0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001442:	f001 f8a7 	bl	8002594 <xPortStartScheduler>
 8001446:	e00e      	b.n	8001466 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800144e:	d10a      	bne.n	8001466 <vTaskStartScheduler+0x96>
        __asm volatile
 8001450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	f3bf 8f6f 	isb	sy
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	607b      	str	r3, [r7, #4]
    }
 8001462:	bf00      	nop
 8001464:	e7fe      	b.n	8001464 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <vTaskStartScheduler+0xc0>)
 8001468:	681b      	ldr	r3, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001d4 	.word	0x200001d4
 8001478:	08005448 	.word	0x08005448
 800147c:	08001ac1 	.word	0x08001ac1
 8001480:	200001d0 	.word	0x200001d0
 8001484:	200001bc 	.word	0x200001bc
 8001488:	200001b4 	.word	0x200001b4
 800148c:	200000d8 	.word	0x200000d8
 8001490:	20000004 	.word	0x20000004

08001494 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <vTaskSuspendAll+0x18>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a03      	ldr	r2, [pc, #12]	; (80014ac <vTaskSuspendAll+0x18>)
 80014a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	200001d8 	.word	0x200001d8

080014b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <xTaskResumeAll+0x11c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <xTaskResumeAll+0x2c>
        __asm volatile
 80014c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	603b      	str	r3, [r7, #0]
    }
 80014d8:	bf00      	nop
 80014da:	e7fe      	b.n	80014da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80014dc:	f001 f8fc 	bl	80026d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <xTaskResumeAll+0x11c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4a39      	ldr	r2, [pc, #228]	; (80015cc <xTaskResumeAll+0x11c>)
 80014e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <xTaskResumeAll+0x11c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d165      	bne.n	80015be <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <xTaskResumeAll+0x120>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d061      	beq.n	80015be <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014fa:	e032      	b.n	8001562 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <xTaskResumeAll+0x124>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3318      	adds	r3, #24
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f840 	bl	800058e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3304      	adds	r3, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f83b 	bl	800058e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fea2 	bl	8004264 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <xTaskResumeAll+0x128>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4313      	orrs	r3, r2
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <xTaskResumeAll+0x128>)
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4a27      	ldr	r2, [pc, #156]	; (80015dc <xTaskResumeAll+0x12c>)
 8001540:	441a      	add	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3304      	adds	r3, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f7fe ffc3 	bl	80004d4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <xTaskResumeAll+0x130>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	429a      	cmp	r2, r3
 800155a:	d302      	bcc.n	8001562 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <xTaskResumeAll+0x134>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <xTaskResumeAll+0x124>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1c8      	bne.n	80014fc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001570:	f000 fb3c 	bl	8001bec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <xTaskResumeAll+0x138>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001580:	f000 f846 	bl	8001610 <xTaskIncrementTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <xTaskResumeAll+0x134>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f1      	bne.n	8001580 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <xTaskResumeAll+0x138>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <xTaskResumeAll+0x134>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <xTaskResumeAll+0x13c>)
 80015b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80015be:	f001 f8bb 	bl	8002738 <vPortExitCritical>

    return xAlreadyYielded;
 80015c2:	68bb      	ldr	r3, [r7, #8]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001d8 	.word	0x200001d8
 80015d0:	200001b0 	.word	0x200001b0
 80015d4:	20000170 	.word	0x20000170
 80015d8:	200001b8 	.word	0x200001b8
 80015dc:	200000dc 	.word	0x200000dc
 80015e0:	200000d8 	.word	0x200000d8
 80015e4:	200001c4 	.word	0x200001c4
 80015e8:	200001c0 	.word	0x200001c0
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <xTaskGetTickCount+0x1c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200001b4 	.word	0x200001b4

08001610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <xTaskIncrementTick+0x130>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8084 	bne.w	800172c <xTaskIncrementTick+0x11c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <xTaskIncrementTick+0x134>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <xTaskIncrementTick+0x134>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d120      	bne.n	800167a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <xTaskIncrementTick+0x138>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <xTaskIncrementTick+0x48>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	603b      	str	r3, [r7, #0]
    }
 8001654:	bf00      	nop
 8001656:	e7fe      	b.n	8001656 <xTaskIncrementTick+0x46>
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <xTaskIncrementTick+0x138>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <xTaskIncrementTick+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a39      	ldr	r2, [pc, #228]	; (8001748 <xTaskIncrementTick+0x138>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4a39      	ldr	r2, [pc, #228]	; (800174c <xTaskIncrementTick+0x13c>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <xTaskIncrementTick+0x140>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <xTaskIncrementTick+0x140>)
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	f000 fab9 	bl	8001bec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <xTaskIncrementTick+0x144>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d34c      	bcc.n	800171e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <xTaskIncrementTick+0x138>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <xTaskIncrementTick+0x144>)
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	601a      	str	r2, [r3, #0]
                    break;
 8001696:	e042      	b.n	800171e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <xTaskIncrementTick+0x138>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d203      	bcs.n	80016b8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <xTaskIncrementTick+0x144>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80016b6:	e032      	b.n	800171e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3304      	adds	r3, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff66 	bl	800058e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3318      	adds	r3, #24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff5d 	bl	800058e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fdc4 	bl	8004264 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <xTaskIncrementTick+0x148>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <xTaskIncrementTick+0x148>)
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <xTaskIncrementTick+0x14c>)
 80016fc:	441a      	add	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3304      	adds	r3, #4
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7fe fee5 	bl	80004d4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <xTaskIncrementTick+0x150>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	429a      	cmp	r2, r3
 8001716:	d3b5      	bcc.n	8001684 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800171c:	e7b2      	b.n	8001684 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <xTaskIncrementTick+0x154>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <xTaskIncrementTick+0x126>
                {
                    xSwitchRequired = pdTRUE;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e004      	b.n	8001736 <xTaskIncrementTick+0x126>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <xTaskIncrementTick+0x158>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <xTaskIncrementTick+0x158>)
 8001734:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001736:	697b      	ldr	r3, [r7, #20]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200001d8 	.word	0x200001d8
 8001744:	200001b4 	.word	0x200001b4
 8001748:	20000168 	.word	0x20000168
 800174c:	2000016c 	.word	0x2000016c
 8001750:	200001c8 	.word	0x200001c8
 8001754:	200001d0 	.word	0x200001d0
 8001758:	200001b8 	.word	0x200001b8
 800175c:	200000dc 	.word	0x200000dc
 8001760:	200000d8 	.word	0x200000d8
 8001764:	200001c4 	.word	0x200001c4
 8001768:	200001c0 	.word	0x200001c0

0800176c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <vTaskSwitchContext+0xbc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <vTaskSwitchContext+0xc0>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001780:	e04d      	b.n	800181e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <vTaskSwitchContext+0xc0>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <vTaskSwitchContext+0xc4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	f1c3 031f 	rsb	r3, r3, #31
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <vTaskSwitchContext+0xc8>)
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	607b      	str	r3, [r7, #4]
    }
 80017c4:	bf00      	nop
 80017c6:	e7fe      	b.n	80017c6 <vTaskSwitchContext+0x5a>
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <vTaskSwitchContext+0xc8>)
 80017d4:	4413      	add	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	3308      	adds	r3, #8
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d104      	bne.n	80017f8 <vTaskSwitchContext+0x8c>
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <vTaskSwitchContext+0xcc>)
 8001800:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <vTaskSwitchContext+0xcc>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <vTaskSwitchContext+0xd0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d102      	bne.n	8001814 <vTaskSwitchContext+0xa8>
 800180e:	f002 fc89 	bl	8004124 <SEGGER_SYSVIEW_OnIdle>
}
 8001812:	e004      	b.n	800181e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <vTaskSwitchContext+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fce1 	bl	80041e0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001d8 	.word	0x200001d8
 800182c:	200001c4 	.word	0x200001c4
 8001830:	200001b8 	.word	0x200001b8
 8001834:	200000dc 	.word	0x200000dc
 8001838:	200000d8 	.word	0x200000d8
 800183c:	200001d4 	.word	0x200001d4

08001840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001854:	f383 8811 	msr	BASEPRI, r3
 8001858:	f3bf 8f6f 	isb	sy
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	60fb      	str	r3, [r7, #12]
    }
 8001862:	bf00      	nop
 8001864:	e7fe      	b.n	8001864 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <vTaskPlaceOnEventList+0x44>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3318      	adds	r3, #24
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fe54 	bl	800051c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001874:	2101      	movs	r1, #1
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f000 fa72 	bl	8001d60 <prvAddCurrentTaskToDelayedList>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000d8 	.word	0x200000d8

08001888 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10a      	bne.n	80018b0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	617b      	str	r3, [r7, #20]
    }
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3318      	adds	r3, #24
 80018b6:	4619      	mov	r1, r3
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7fe fe0b 	bl	80004d4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80018ca:	2024      	movs	r0, #36	; 0x24
 80018cc:	f001 ff4e 	bl	800376c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	68b8      	ldr	r0, [r7, #8]
 80018d4:	f000 fa44 	bl	8001d60 <prvAddCurrentTaskToDelayedList>
    }
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000d8 	.word	0x200000d8

080018e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80018fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fe:	f383 8811 	msr	BASEPRI, r3
 8001902:	f3bf 8f6f 	isb	sy
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	60fb      	str	r3, [r7, #12]
    }
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3318      	adds	r3, #24
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe3a 	bl	800058e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <xTaskRemoveFromEventList+0xb4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d120      	bne.n	8001964 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	3304      	adds	r3, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe31 	bl	800058e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fc98 	bl	8004264 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2201      	movs	r2, #1
 800193a:	409a      	lsls	r2, r3
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <xTaskRemoveFromEventList+0xb8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <xTaskRemoveFromEventList+0xb8>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <xTaskRemoveFromEventList+0xbc>)
 8001954:	441a      	add	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3304      	adds	r3, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f7fe fdb9 	bl	80004d4 <vListInsertEnd>
 8001962:	e005      	b.n	8001970 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	3318      	adds	r3, #24
 8001968:	4619      	mov	r1, r3
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <xTaskRemoveFromEventList+0xc0>)
 800196c:	f7fe fdb2 	bl	80004d4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <xTaskRemoveFromEventList+0xc4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	429a      	cmp	r2, r3
 800197c:	d905      	bls.n	800198a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <xTaskRemoveFromEventList+0xc8>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e001      	b.n	800198e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800198e:	697b      	ldr	r3, [r7, #20]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200001d8 	.word	0x200001d8
 800199c:	200001b8 	.word	0x200001b8
 80019a0:	200000dc 	.word	0x200000dc
 80019a4:	20000170 	.word	0x20000170
 80019a8:	200000d8 	.word	0x200000d8
 80019ac:	200001c4 	.word	0x200001c4

080019b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <vTaskInternalSetTimeOutState+0x24>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <vTaskInternalSetTimeOutState+0x28>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	200001c8 	.word	0x200001c8
 80019d8:	200001b4 	.word	0x200001b4

080019dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80019ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f0:	f383 8811 	msr	BASEPRI, r3
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	613b      	str	r3, [r7, #16]
    }
 80019fe:	bf00      	nop
 8001a00:	e7fe      	b.n	8001a00 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10a      	bne.n	8001a1e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0c:	f383 8811 	msr	BASEPRI, r3
 8001a10:	f3bf 8f6f 	isb	sy
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	60fb      	str	r3, [r7, #12]
    }
 8001a1a:	bf00      	nop
 8001a1c:	e7fe      	b.n	8001a1c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001a1e:	f000 fe5b 	bl	80026d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <xTaskCheckForTimeOut+0xc4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a3a:	d102      	bne.n	8001a42 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e026      	b.n	8001a90 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <xTaskCheckForTimeOut+0xc8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d00a      	beq.n	8001a64 <xTaskCheckForTimeOut+0x88>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d305      	bcc.n	8001a64 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e015      	b.n	8001a90 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d20b      	bcs.n	8001a86 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	1ad2      	subs	r2, r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff98 	bl	80019b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e004      	b.n	8001a90 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a90:	f000 fe52 	bl	8002738 <vPortExitCritical>

    return xReturn;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001b4 	.word	0x200001b4
 8001aa4:	200001c8 	.word	0x200001c8

08001aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <vTaskMissedYield+0x14>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200001c4 	.word	0x200001c4

08001ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001ac8:	f000 f852 	bl	8001b70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <prvIdleTask+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d9f9      	bls.n	8001ac8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <prvIdleTask+0x2c>)
 8001ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ae4:	e7f0      	b.n	8001ac8 <prvIdleTask+0x8>
 8001ae6:	bf00      	nop
 8001ae8:	200000dc 	.word	0x200000dc
 8001aec:	e000ed04 	.word	0xe000ed04

08001af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	e00c      	b.n	8001b16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <prvInitialiseTaskLists+0x60>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcb5 	bl	800047a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d9ef      	bls.n	8001afc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <prvInitialiseTaskLists+0x64>)
 8001b1e:	f7fe fcac 	bl	800047a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <prvInitialiseTaskLists+0x68>)
 8001b24:	f7fe fca9 	bl	800047a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <prvInitialiseTaskLists+0x6c>)
 8001b2a:	f7fe fca6 	bl	800047a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <prvInitialiseTaskLists+0x70>)
 8001b30:	f7fe fca3 	bl	800047a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <prvInitialiseTaskLists+0x74>)
 8001b36:	f7fe fca0 	bl	800047a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <prvInitialiseTaskLists+0x78>)
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <prvInitialiseTaskLists+0x64>)
 8001b3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <prvInitialiseTaskLists+0x7c>)
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <prvInitialiseTaskLists+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000dc 	.word	0x200000dc
 8001b54:	20000140 	.word	0x20000140
 8001b58:	20000154 	.word	0x20000154
 8001b5c:	20000170 	.word	0x20000170
 8001b60:	20000184 	.word	0x20000184
 8001b64:	2000019c 	.word	0x2000019c
 8001b68:	20000168 	.word	0x20000168
 8001b6c:	2000016c 	.word	0x2000016c

08001b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b76:	e019      	b.n	8001bac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b78:	f000 fdae 	bl	80026d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <prvCheckTasksWaitingTermination+0x50>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fd00 	bl	800058e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <prvCheckTasksWaitingTermination+0x54>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <prvCheckTasksWaitingTermination+0x54>)
 8001b96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001ba0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001ba2:	f000 fdc9 	bl	8002738 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f810 	bl	8001bcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e1      	bne.n	8001b78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000184 	.word	0x20000184
 8001bc4:	200001b0 	.word	0x200001b0
 8001bc8:	20000198 	.word	0x20000198

08001bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 ff81 	bl	8002ae0 <vPortFree>
                vPortFree( pxTCB );
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 ff7e 	bl	8002ae0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <prvResetNextTaskUnblockTime+0x30>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <prvResetNextTaskUnblockTime+0x34>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c02:	e005      	b.n	8001c10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <prvResetNextTaskUnblockTime+0x30>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <prvResetNextTaskUnblockTime+0x34>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000168 	.word	0x20000168
 8001c20:	200001d0 	.word	0x200001d0

08001c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <xTaskGetSchedulerState+0x34>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c32:	2301      	movs	r3, #1
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e008      	b.n	8001c4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <xTaskGetSchedulerState+0x38>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e001      	b.n	8001c4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c4a:	687b      	ldr	r3, [r7, #4]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	200001bc 	.word	0x200001bc
 8001c5c:	200001d8 	.word	0x200001d8

08001c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d068      	beq.n	8001d48 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <xTaskPriorityDisinherit+0xf4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d00a      	beq.n	8001c96 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	60fb      	str	r3, [r7, #12]
    }
 8001c92:	bf00      	nop
 8001c94:	e7fe      	b.n	8001c94 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca2:	f383 8811 	msr	BASEPRI, r3
 8001ca6:	f3bf 8f6f 	isb	sy
 8001caa:	f3bf 8f4f 	dsb	sy
 8001cae:	60bb      	str	r3, [r7, #8]
    }
 8001cb0:	bf00      	nop
 8001cb2:	e7fe      	b.n	8001cb2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d03e      	beq.n	8001d48 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d13a      	bne.n	8001d48 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc59 	bl	800058e <uxListRemove>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43da      	mvns	r2, r3
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <xTaskPriorityDisinherit+0xf8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <xTaskPriorityDisinherit+0xf8>)
 8001cf6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	204a      	movs	r0, #74	; 0x4a
 8001cfe:	f001 fd53 	bl	80037a8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f1c3 0205 	rsb	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <xTaskPriorityDisinherit+0xf8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <xTaskPriorityDisinherit+0xf8>)
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <xTaskPriorityDisinherit+0xfc>)
 8001d36:	441a      	add	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f7fe fbc8 	bl	80004d4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d48:	697b      	ldr	r3, [r7, #20]
    }
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000d8 	.word	0x200000d8
 8001d58:	200001b8 	.word	0x200001b8
 8001d5c:	200000dc 	.word	0x200000dc

08001d60 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc09 	bl	800058e <uxListRemove>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4013      	ands	r3, r2
 8001d96:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d98:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da0:	d110      	bne.n	8001dc4 <prvAddCurrentTaskToDelayedList+0x64>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	211b      	movs	r1, #27
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fa9a 	bl	80042e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3304      	adds	r3, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4820      	ldr	r0, [pc, #128]	; (8001e40 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001dbe:	f7fe fb89 	bl	80004d4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001dc2:	e032      	b.n	8001e2a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d20f      	bcs.n	8001dfc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2104      	movs	r1, #4
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fa80 	bl	80042e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3304      	adds	r3, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f7fe fb91 	bl	800051c <vListInsert>
}
 8001dfa:	e016      	b.n	8001e2a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fa70 	bl	80042e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3304      	adds	r3, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7fe fb81 	bl	800051c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <prvAddCurrentTaskToDelayedList+0xec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d202      	bcs.n	8001e2a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <prvAddCurrentTaskToDelayedList+0xec>)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001b4 	.word	0x200001b4
 8001e38:	200000d8 	.word	0x200000d8
 8001e3c:	200001b8 	.word	0x200001b8
 8001e40:	2000019c 	.word	0x2000019c
 8001e44:	2000016c 	.word	0x2000016c
 8001e48:	20000168 	.word	0x20000168
 8001e4c:	200001d0 	.word	0x200001d0

08001e50 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001e5a:	f000 fad5 	bl	8002408 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <xTimerCreateTimerTask+0x54>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <xTimerCreateTimerTask+0x58>)
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e74:	490d      	ldr	r1, [pc, #52]	; (8001eac <xTimerCreateTimerTask+0x5c>)
 8001e76:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <xTimerCreateTimerTask+0x60>)
 8001e78:	f7ff f90e 	bl	8001098 <xTaskCreate>
 8001e7c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	603b      	str	r3, [r7, #0]
    }
 8001e96:	bf00      	nop
 8001e98:	e7fe      	b.n	8001e98 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001e9a:	687b      	ldr	r3, [r7, #4]
    }
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000020c 	.word	0x2000020c
 8001ea8:	20000210 	.word	0x20000210
 8001eac:	08005450 	.word	0x08005450
 8001eb0:	08001fe9 	.word	0x08001fe9

08001eb4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	623b      	str	r3, [r7, #32]
    }
 8001ede:	bf00      	nop
 8001ee0:	e7fe      	b.n	8001ee0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <xTimerGenericCommand+0x98>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02a      	beq.n	8001f40 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	dc18      	bgt.n	8001f2e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001efc:	f7ff fe92 	bl	8001c24 <xTaskGetSchedulerState>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d109      	bne.n	8001f1a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <xTimerGenericCommand+0x98>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	f107 0114 	add.w	r1, r7, #20
 8001f0e:	2300      	movs	r3, #0
 8001f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f12:	f7fe fc57 	bl	80007c4 <xQueueGenericSend>
 8001f16:	6278      	str	r0, [r7, #36]	; 0x24
 8001f18:	e012      	b.n	8001f40 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <xTimerGenericCommand+0x98>)
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	f107 0114 	add.w	r1, r7, #20
 8001f22:	2300      	movs	r3, #0
 8001f24:	2200      	movs	r2, #0
 8001f26:	f7fe fc4d 	bl	80007c4 <xQueueGenericSend>
 8001f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8001f2c:	e008      	b.n	8001f40 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <xTimerGenericCommand+0x98>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0114 	add.w	r1, r7, #20
 8001f36:	2300      	movs	r3, #0
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	f7fe fd69 	bl	8000a10 <xQueueGenericSendFromISR>
 8001f3e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000020c 	.word	0x2000020c

08001f50 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <prvProcessExpiredTimer+0x94>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb10 	bl	800058e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d022      	beq.n	8001fc2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	18d1      	adds	r1, r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f000 f8d1 	bl	8002130 <prvInsertTimerInActiveList>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01f      	beq.n	8001fd4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff88 	bl	8001eb4 <xTimerGenericCommand>
 8001fa4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d113      	bne.n	8001fd4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	60fb      	str	r3, [r7, #12]
    }
 8001fbe:	bf00      	nop
 8001fc0:	e7fe      	b.n	8001fc0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	4798      	blx	r3
    }
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000204 	.word	0x20000204

08001fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f857 	bl	80020a8 <prvGetNextExpireTime>
 8001ffa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4619      	mov	r1, r3
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f803 	bl	800200c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002006:	f000 f8d5 	bl	80021b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800200a:	e7f1      	b.n	8001ff0 <prvTimerTask+0x8>

0800200c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002016:	f7ff fa3d 	bl	8001494 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f866 	bl	80020f0 <prvSampleTimeNow>
 8002024:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d130      	bne.n	800208e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <prvProcessTimerOrBlockTask+0x3c>
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	429a      	cmp	r2, r3
 8002038:	d806      	bhi.n	8002048 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800203a:	f7ff fa39 	bl	80014b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff85 	bl	8001f50 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002046:	e024      	b.n	8002092 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <prvProcessTimerOrBlockTask+0x90>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <prvProcessTimerOrBlockTask+0x50>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <prvProcessTimerOrBlockTask+0x52>
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <prvProcessTimerOrBlockTask+0x94>)
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f7fe ffdf 	bl	8001030 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002072:	f7ff fa1d 	bl	80014b0 <xTaskResumeAll>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <prvProcessTimerOrBlockTask+0x98>)
 800207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	f3bf 8f6f 	isb	sy
    }
 800208c:	e001      	b.n	8002092 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800208e:	f7ff fa0f 	bl	80014b0 <xTaskResumeAll>
    }
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000208 	.word	0x20000208
 80020a0:	2000020c 	.word	0x2000020c
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <prvGetNextExpireTime+0x44>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <prvGetNextExpireTime+0x16>
 80020ba:	2201      	movs	r2, #1
 80020bc:	e000      	b.n	80020c0 <prvGetNextExpireTime+0x18>
 80020be:	2200      	movs	r2, #0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <prvGetNextExpireTime+0x44>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e001      	b.n	80020dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80020dc:	68fb      	ldr	r3, [r7, #12]
    }
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000204 	.word	0x20000204

080020f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80020f8:	f7ff fa7a 	bl	80015f0 <xTaskGetTickCount>
 80020fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <prvSampleTimeNow+0x3c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d205      	bcs.n	8002114 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002108:	f000 f91a 	bl	8002340 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e002      	b.n	800211a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <prvSampleTimeNow+0x3c>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002120:	68fb      	ldr	r3, [r7, #12]
    }
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000214 	.word	0x20000214

08002130 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d812      	bhi.n	800217c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	429a      	cmp	r2, r3
 8002162:	d302      	bcc.n	800216a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e01b      	b.n	80021a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <prvInsertTimerInActiveList+0x7c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3304      	adds	r3, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe f9d1 	bl	800051c <vListInsert>
 800217a:	e012      	b.n	80021a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d206      	bcs.n	8002192 <prvInsertTimerInActiveList+0x62>
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e007      	b.n	80021a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <prvInsertTimerInActiveList+0x80>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7fe f9bd 	bl	800051c <vListInsert>
            }
        }

        return xProcessTimerNow;
 80021a2:	697b      	ldr	r3, [r7, #20]
    }
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000208 	.word	0x20000208
 80021b0:	20000204 	.word	0x20000204

080021b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80021ba:	e0ae      	b.n	800231a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f2c0 80aa 	blt.w	8002318 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3304      	adds	r3, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9da 	bl	800058e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff87 	bl	80020f0 <prvSampleTimeNow>
 80021e2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b09      	cmp	r3, #9
 80021e8:	f200 8097 	bhi.w	800231a <prvProcessReceivedCommands+0x166>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <prvProcessReceivedCommands+0x40>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	0800221d 	.word	0x0800221d
 80021f8:	0800221d 	.word	0x0800221d
 80021fc:	0800221d 	.word	0x0800221d
 8002200:	08002291 	.word	0x08002291
 8002204:	080022a5 	.word	0x080022a5
 8002208:	080022ef 	.word	0x080022ef
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800221d 	.word	0x0800221d
 8002214:	08002291 	.word	0x08002291
 8002218:	080022a5 	.word	0x080022a5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	18d1      	adds	r1, r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223c:	f7ff ff78 	bl	8002130 <prvInsertTimerInActiveList>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d069      	beq.n	800231a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800224c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05e      	beq.n	800231a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	441a      	add	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	2100      	movs	r1, #0
 800226c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226e:	f7ff fe21 	bl	8001eb4 <xTimerGenericCommand>
 8002272:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d14f      	bne.n	800231a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	61bb      	str	r3, [r7, #24]
    }
 800228c:	bf00      	nop
 800228e:	e7fe      	b.n	800228e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80022a2:	e03a      	b.n	800231a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <prvProcessReceivedCommands+0x126>
        __asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	617b      	str	r3, [r7, #20]
    }
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	18d1      	adds	r1, r2, r3
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022e8:	f7ff ff22 	bl	8002130 <prvInsertTimerInActiveList>
                        break;
 80022ec:	e015      	b.n	800231a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80022fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022fe:	f000 fbef 	bl	8002ae0 <vPortFree>
 8002302:	e00a      	b.n	800231a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002316:	e000      	b.n	800231a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002318:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <prvProcessReceivedCommands+0x188>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f107 0108 	add.w	r1, r7, #8
 8002322:	2200      	movs	r2, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fc31 	bl	8000b8c <xQueueReceive>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f af45 	bne.w	80021bc <prvProcessReceivedCommands+0x8>
        }
    }
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000020c 	.word	0x2000020c

08002340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002346:	e048      	b.n	80023da <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <prvSwitchTimerLists+0xc0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002352:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <prvSwitchTimerLists+0xc0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3304      	adds	r3, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f914 	bl	800058e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02e      	beq.n	80023da <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	429a      	cmp	r2, r3
 800238c:	d90e      	bls.n	80023ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <prvSwitchTimerLists+0xc0>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7fe f8b9 	bl	800051c <vListInsert>
 80023aa:	e016      	b.n	80023da <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80023ac:	2300      	movs	r3, #0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2300      	movs	r3, #0
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	2100      	movs	r1, #0
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff fd7c 	bl	8001eb4 <xTimerGenericCommand>
 80023bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <prvSwitchTimerLists+0x9a>
        __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	603b      	str	r3, [r7, #0]
    }
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <prvSwitchTimerLists+0xc0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1b1      	bne.n	8002348 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <prvSwitchTimerLists+0xc0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <prvSwitchTimerLists+0xc4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <prvSwitchTimerLists+0xc0>)
 80023f0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <prvSwitchTimerLists+0xc4>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	6013      	str	r3, [r2, #0]
    }
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000204 	.word	0x20000204
 8002404:	20000208 	.word	0x20000208

08002408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800240c:	f000 f964 	bl	80026d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <prvCheckForValidListAndQueue+0x54>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11d      	bne.n	8002454 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002418:	4811      	ldr	r0, [pc, #68]	; (8002460 <prvCheckForValidListAndQueue+0x58>)
 800241a:	f7fe f82e 	bl	800047a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800241e:	4811      	ldr	r0, [pc, #68]	; (8002464 <prvCheckForValidListAndQueue+0x5c>)
 8002420:	f7fe f82b 	bl	800047a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <prvCheckForValidListAndQueue+0x60>)
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <prvCheckForValidListAndQueue+0x58>)
 8002428:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <prvCheckForValidListAndQueue+0x64>)
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <prvCheckForValidListAndQueue+0x5c>)
 800242e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002430:	2200      	movs	r2, #0
 8002432:	210c      	movs	r1, #12
 8002434:	200a      	movs	r0, #10
 8002436:	f7fe f93d 	bl	80006b4 <xQueueGenericCreate>
 800243a:	4603      	mov	r3, r0
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <prvCheckForValidListAndQueue+0x54>)
 800243e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <prvCheckForValidListAndQueue+0x54>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <prvCheckForValidListAndQueue+0x54>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4908      	ldr	r1, [pc, #32]	; (8002470 <prvCheckForValidListAndQueue+0x68>)
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fdbc 	bl	8000fcc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002454:	f000 f970 	bl	8002738 <vPortExitCritical>
    }
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000020c 	.word	0x2000020c
 8002460:	200001dc 	.word	0x200001dc
 8002464:	200001f0 	.word	0x200001f0
 8002468:	20000204 	.word	0x20000204
 800246c:	20000208 	.word	0x20000208
 8002470:	08005458 	.word	0x08005458

08002474 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3b04      	subs	r3, #4
 8002484:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800248c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b04      	subs	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b04      	subs	r3, #4
 80024a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <pxPortInitialiseStack+0x64>)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b14      	subs	r3, #20
 80024ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b04      	subs	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f06f 0202 	mvn.w	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3b20      	subs	r3, #32
 80024c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	080024dd 	.word	0x080024dd

080024dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <prvTaskExitError+0x54>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ee:	d00a      	beq.n	8002506 <prvTaskExitError+0x2a>
        __asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	60fb      	str	r3, [r7, #12]
    }
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <prvTaskExitError+0x28>
        __asm volatile
 8002506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250a:	f383 8811 	msr	BASEPRI, r3
 800250e:	f3bf 8f6f 	isb	sy
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	60bb      	str	r3, [r7, #8]
    }
 8002518:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800251a:	bf00      	nop
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0fc      	beq.n	800251c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000008 	.word	0x20000008
	...

08002540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <pxCurrentTCBConst2>)
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	6808      	ldr	r0, [r1, #0]
 8002546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800254a:	f380 8809 	msr	PSP, r0
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f380 8811 	msr	BASEPRI, r0
 800255a:	4770      	bx	lr
 800255c:	f3af 8000 	nop.w

08002560 <pxCurrentTCBConst2>:
 8002560:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop

08002568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002568:	4808      	ldr	r0, [pc, #32]	; (800258c <prvPortStartFirstTask+0x24>)
 800256a:	6800      	ldr	r0, [r0, #0]
 800256c:	6800      	ldr	r0, [r0, #0]
 800256e:	f380 8808 	msr	MSP, r0
 8002572:	f04f 0000 	mov.w	r0, #0
 8002576:	f380 8814 	msr	CONTROL, r0
 800257a:	b662      	cpsie	i
 800257c:	b661      	cpsie	f
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	df00      	svc	0
 8002588:	bf00      	nop
 800258a:	0000      	.short	0x0000
 800258c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop

08002594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <xPortStartScheduler+0x120>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <xPortStartScheduler+0x124>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10a      	bne.n	80025ba <xPortStartScheduler+0x26>
        __asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	613b      	str	r3, [r7, #16]
    }
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <xPortStartScheduler+0x120>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <xPortStartScheduler+0x128>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10a      	bne.n	80025da <xPortStartScheduler+0x46>
        __asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	60fb      	str	r3, [r7, #12]
    }
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <xPortStartScheduler+0x12c>)
 80025dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <xPortStartScheduler+0x130>)
 8002600:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <xPortStartScheduler+0x134>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002608:	e009      	b.n	800261e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <xPortStartScheduler+0x134>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <xPortStartScheduler+0x134>)
 8002612:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b80      	cmp	r3, #128	; 0x80
 8002628:	d0ef      	beq.n	800260a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <xPortStartScheduler+0x134>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00a      	beq.n	800264c <xPortStartScheduler+0xb8>
        __asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	60bb      	str	r3, [r7, #8]
    }
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <xPortStartScheduler+0x134>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <xPortStartScheduler+0x134>)
 8002654:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <xPortStartScheduler+0x134>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <xPortStartScheduler+0x134>)
 8002660:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <xPortStartScheduler+0x138>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <xPortStartScheduler+0x138>)
 8002670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <xPortStartScheduler+0x138>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <xPortStartScheduler+0x138>)
 800267c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002682:	f000 f8e3 	bl	800284c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <xPortStartScheduler+0x13c>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800268c:	f000 f8fc 	bl	8002888 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <xPortStartScheduler+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <xPortStartScheduler+0x140>)
 8002696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800269c:	f7ff ff64 	bl	8002568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80026a0:	f7ff f864 	bl	800176c <vTaskSwitchContext>
    prvTaskExitError();
 80026a4:	f7ff ff1a 	bl	80024dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	410fc271 	.word	0x410fc271
 80026bc:	410fc270 	.word	0x410fc270
 80026c0:	e000e400 	.word	0xe000e400
 80026c4:	20000218 	.word	0x20000218
 80026c8:	2000021c 	.word	0x2000021c
 80026cc:	e000ed20 	.word	0xe000ed20
 80026d0:	20000008 	.word	0x20000008
 80026d4:	e000ef34 	.word	0xe000ef34

080026d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	607b      	str	r3, [r7, #4]
    }
 80026f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <vPortEnterCritical+0x58>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <vPortEnterCritical+0x58>)
 80026fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <vPortEnterCritical+0x58>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10f      	bne.n	8002724 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <vPortEnterCritical+0x5c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <vPortEnterCritical+0x4c>
        __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	603b      	str	r3, [r7, #0]
    }
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <vPortEnterCritical+0x4a>
    }
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	20000008 	.word	0x20000008
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <vPortExitCritical+0x50>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <vPortExitCritical+0x24>
        __asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	607b      	str	r3, [r7, #4]
    }
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <vPortExitCritical+0x50>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3b01      	subs	r3, #1
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <vPortExitCritical+0x50>)
 8002764:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <vPortExitCritical+0x50>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <vPortExitCritical+0x42>
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f383 8811 	msr	BASEPRI, r3
    }
 8002778:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000008 	.word	0x20000008
 800278c:	00000000 	.word	0x00000000

08002790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002790:	f3ef 8009 	mrs	r0, PSP
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <pxCurrentTCBConst>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f01e 0f10 	tst.w	lr, #16
 80027a0:	bf08      	it	eq
 80027a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027aa:	6010      	str	r0, [r2, #0]
 80027ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027b4:	f380 8811 	msr	BASEPRI, r0
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f7fe ffd4 	bl	800176c <vTaskSwitchContext>
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f380 8811 	msr	BASEPRI, r0
 80027cc:	bc09      	pop	{r0, r3}
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	6808      	ldr	r0, [r1, #0]
 80027d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d6:	f01e 0f10 	tst.w	lr, #16
 80027da:	bf08      	it	eq
 80027dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027e0:	f380 8809 	msr	PSP, r0
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	f3af 8000 	nop.w

080027f0 <pxCurrentTCBConst>:
 80027f0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop

080027f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
    }
 8002810:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002812:	f001 fc0d 	bl	8004030 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002816:	f7fe fefb 	bl	8001610 <xTaskIncrementTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002820:	f001 fc64 	bl	80040ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <SysTick_Handler+0x50>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e001      	b.n	8002832 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800282e:	f001 fc41 	bl	80040b4 <SEGGER_SYSVIEW_RecordExitISR>
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f383 8811 	msr	BASEPRI, r3
    }
 800283c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <vPortSetupTimerInterrupt+0x2c>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <vPortSetupTimerInterrupt+0x30>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <vPortSetupTimerInterrupt+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <vPortSetupTimerInterrupt+0x38>)
 8002864:	3b01      	subs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <vPortSetupTimerInterrupt+0x2c>)
 800286a:	2207      	movs	r2, #7
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e010 	.word	0xe000e010
 800287c:	e000e018 	.word	0xe000e018
 8002880:	20000000 	.word	0x20000000
 8002884:	e000e014 	.word	0xe000e014

08002888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002898 <vPortEnableVFP+0x10>
 800288c:	6801      	ldr	r1, [r0, #0]
 800288e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002892:	6001      	str	r1, [r0, #0]
 8002894:	4770      	bx	lr
 8002896:	0000      	.short	0x0000
 8002898:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop

080028a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80028a6:	f3ef 8305 	mrs	r3, IPSR
 80028aa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d914      	bls.n	80028dc <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <vPortValidateInterruptPriority+0x70>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <vPortValidateInterruptPriority+0x74>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	7afa      	ldrb	r2, [r7, #11]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d20a      	bcs.n	80028dc <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	607b      	str	r3, [r7, #4]
    }
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <vPortValidateInterruptPriority+0x78>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <vPortValidateInterruptPriority+0x7c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d90a      	bls.n	8002902 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	603b      	str	r3, [r7, #0]
    }
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <vPortValidateInterruptPriority+0x60>
    }
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e3f0 	.word	0xe000e3f0
 8002914:	20000218 	.word	0x20000218
 8002918:	e000ed0c 	.word	0xe000ed0c
 800291c:	2000021c 	.word	0x2000021c

08002920 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800292c:	f7fe fdb2 	bl	8001494 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002930:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <pvPortMalloc+0x1a8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002938:	f000 f934 	bl	8002ba4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800293c:	4b63      	ldr	r3, [pc, #396]	; (8002acc <pvPortMalloc+0x1ac>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 80a7 	bne.w	8002a98 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02d      	beq.n	80029ac <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002950:	2208      	movs	r2, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d227      	bcs.n	80029ac <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800295c:	2208      	movs	r2, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	2b00      	cmp	r3, #0
 800296c:	d021      	beq.n	80029b2 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f023 0307 	bic.w	r3, r3, #7
 8002974:	3308      	adds	r3, #8
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d214      	bcs.n	80029a6 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	3308      	adds	r3, #8
 8002984:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <pvPortMalloc+0x92>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	617b      	str	r3, [r7, #20]
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029aa:	e002      	b.n	80029b2 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	e000      	b.n	80029b4 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029b2:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06e      	beq.n	8002a98 <pvPortMalloc+0x178>
 80029ba:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <pvPortMalloc+0x1b0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d869      	bhi.n	8002a98 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <pvPortMalloc+0x1b4>)
 80029c6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <pvPortMalloc+0x1b4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ce:	e004      	b.n	80029da <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d903      	bls.n	80029ec <pvPortMalloc+0xcc>
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f1      	bne.n	80029d0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <pvPortMalloc+0x1a8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d050      	beq.n	8002a98 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2208      	movs	r2, #8
 80029fc:	4413      	add	r3, r2
 80029fe:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	2308      	movs	r3, #8
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d91f      	bls.n	8002a58 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <pvPortMalloc+0x120>
        __asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	613b      	str	r3, [r7, #16]
    }
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a52:	69b8      	ldr	r0, [r7, #24]
 8002a54:	f000 f908 	bl	8002c68 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <pvPortMalloc+0x1b0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <pvPortMalloc+0x1b0>)
 8002a64:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <pvPortMalloc+0x1b0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <pvPortMalloc+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d203      	bcs.n	8002a7a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <pvPortMalloc+0x1b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <pvPortMalloc+0x1b8>)
 8002a78:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <pvPortMalloc+0x1ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <pvPortMalloc+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <pvPortMalloc+0x1bc>)
 8002a96:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a98:	f7fe fd0a 	bl	80014b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <pvPortMalloc+0x19c>
        __asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	60fb      	str	r3, [r7, #12]
    }
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <pvPortMalloc+0x19a>
    return pvReturn;
 8002abc:	69fb      	ldr	r3, [r7, #28]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20012e28 	.word	0x20012e28
 8002acc:	20012e3c 	.word	0x20012e3c
 8002ad0:	20012e2c 	.word	0x20012e2c
 8002ad4:	20012e20 	.word	0x20012e20
 8002ad8:	20012e30 	.word	0x20012e30
 8002adc:	20012e34 	.word	0x20012e34

08002ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04d      	beq.n	8002b8e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002af2:	2308      	movs	r3, #8
 8002af4:	425b      	negs	r3, r3
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <vPortFree+0xb8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <vPortFree+0x44>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60fb      	str	r3, [r7, #12]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <vPortFree+0x62>
        __asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60bb      	str	r3, [r7, #8]
    }
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <vPortFree+0xb8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01e      	beq.n	8002b8e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11a      	bne.n	8002b8e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <vPortFree+0xb8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002b68:	f7fe fc94 	bl	8001494 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <vPortFree+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <vPortFree+0xbc>)
 8002b78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b7a:	6938      	ldr	r0, [r7, #16]
 8002b7c:	f000 f874 	bl	8002c68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <vPortFree+0xc0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <vPortFree+0xc0>)
 8002b88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b8a:	f7fe fc91 	bl	80014b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20012e3c 	.word	0x20012e3c
 8002b9c:	20012e2c 	.word	0x20012e2c
 8002ba0:	20012e38 	.word	0x20012e38

08002ba4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002baa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002bae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <prvHeapInit+0xac>)
 8002bb2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3307      	adds	r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0307 	bic.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <prvHeapInit+0xac>)
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <prvHeapInit+0xb0>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <prvHeapInit+0xb0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4413      	add	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <prvHeapInit+0xb4>)
 8002c04:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <prvHeapInit+0xb4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <prvHeapInit+0xb4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <prvHeapInit+0xb4>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <prvHeapInit+0xb8>)
 8002c32:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <prvHeapInit+0xbc>)
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <prvHeapInit+0xc0>)
 8002c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	20000220 	.word	0x20000220
 8002c54:	20012e20 	.word	0x20012e20
 8002c58:	20012e28 	.word	0x20012e28
 8002c5c:	20012e30 	.word	0x20012e30
 8002c60:	20012e2c 	.word	0x20012e2c
 8002c64:	20012e3c 	.word	0x20012e3c

08002c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <prvInsertBlockIntoFreeList+0xac>)
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e002      	b.n	8002c7c <prvInsertBlockIntoFreeList+0x14>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d8f7      	bhi.n	8002c76 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d108      	bne.n	8002caa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d118      	bne.n	8002cf0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <prvInsertBlockIntoFreeList+0xb0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d00d      	beq.n	8002ce6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e008      	b.n	8002cf8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <prvInsertBlockIntoFreeList+0xb0>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e003      	b.n	8002cf8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d002      	beq.n	8002d06 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20012e20 	.word	0x20012e20
 8002d18:	20012e28 	.word	0x20012e28

08002d1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	492b      	ldr	r1, [pc, #172]	; (8002ddc <SYSVIEW_AddTask+0xc0>)
 8002d2e:	68b8      	ldr	r0, [r7, #8]
 8002d30:	f001 fe48 	bl	80049c4 <memcmp>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04b      	beq.n	8002dd2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	d903      	bls.n	8002d4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002d42:	4828      	ldr	r0, [pc, #160]	; (8002de4 <SYSVIEW_AddTask+0xc8>)
 8002d44:	f001 fc1c 	bl	8004580 <SEGGER_SYSVIEW_Warn>
    return;
 8002d48:	e044      	b.n	8002dd4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4926      	ldr	r1, [pc, #152]	; (8002de8 <SYSVIEW_AddTask+0xcc>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4921      	ldr	r1, [pc, #132]	; (8002de8 <SYSVIEW_AddTask+0xcc>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3304      	adds	r3, #4
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	491b      	ldr	r1, [pc, #108]	; (8002de8 <SYSVIEW_AddTask+0xcc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3308      	adds	r3, #8
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4916      	ldr	r1, [pc, #88]	; (8002de8 <SYSVIEW_AddTask+0xcc>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4910      	ldr	r1, [pc, #64]	; (8002de8 <SYSVIEW_AddTask+0xcc>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3310      	adds	r3, #16
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <SYSVIEW_AddTask+0xc4>)
 8002dbe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f80e 	bl	8002dec <SYSVIEW_SendTaskInfo>
 8002dd0:	e000      	b.n	8002dd4 <SYSVIEW_AddTask+0xb8>
    return;
 8002dd2:	bf00      	nop

}
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	08005460 	.word	0x08005460
 8002de0:	20012ee0 	.word	0x20012ee0
 8002de4:	08005468 	.word	0x08005468
 8002de8:	20012e40 	.word	0x20012e40

08002dec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	2214      	movs	r2, #20
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fdfc 	bl	8004a00 <memset>
  TaskInfo.TaskID     = TaskID;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 ffdb 	bl	8003ddc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002e26:	bf00      	nop
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <USART2_IRQHandler+0x80>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <USART2_IRQHandler+0x84>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 030b 	and.w	r3, r3, #11
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <USART2_IRQHandler+0x88>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <USART2_IRQHandler+0x88>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	4610      	mov	r0, r2
 8002e68:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01a      	beq.n	8002eaa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <USART2_IRQHandler+0x8c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <USART2_IRQHandler+0x8c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1dfa      	adds	r2, r7, #7
 8002e82:	4610      	mov	r0, r2
 8002e84:	4798      	blx	r3
 8002e86:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <USART2_IRQHandler+0x90>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <USART2_IRQHandler+0x90>)
 8002e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e006      	b.n	8002eaa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <USART2_IRQHandler+0x80>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <USART2_IRQHandler+0x84>)
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e000      	b.n	8002eaa <USART2_IRQHandler+0x7a>
      return;
 8002ea8:	bf00      	nop
    }
  }
}
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40004404 	.word	0x40004404
 8002eb8:	20012ee4 	.word	0x20012ee4
 8002ebc:	20012ee8 	.word	0x20012ee8
 8002ec0:	4000440c 	.word	0x4000440c

08002ec4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	4000440c 	.word	0x4000440c

08002ee4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <_DoInit+0x98>)
 8002eec:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <_DoInit+0x9c>)
 8002efe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <_DoInit+0xa0>)
 8002f04:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <_DoInit+0x9c>)
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <_DoInit+0xa4>)
 8002f2a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3307      	adds	r3, #7
 8002f48:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <_DoInit+0xa8>)
 8002f4a:	6810      	ldr	r0, [r2, #0]
 8002f4c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002f4e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <_DoInit+0xac>)
 8002f56:	6810      	ldr	r0, [r2, #0]
 8002f58:	6018      	str	r0, [r3, #0]
 8002f5a:	8891      	ldrh	r1, [r2, #4]
 8002f5c:	7992      	ldrb	r2, [r2, #6]
 8002f5e:	8099      	strh	r1, [r3, #4]
 8002f60:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002f62:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002f6c:	f3bf 8f5f 	dmb	sy
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20012eec 	.word	0x20012eec
 8002f80:	080054b8 	.word	0x080054b8
 8002f84:	20012f94 	.word	0x20012f94
 8002f88:	20013394 	.word	0x20013394
 8002f8c:	080054c4 	.word	0x080054c4
 8002f90:	080054c8 	.word	0x080054c8

08002f94 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d905      	bls.n	8002fc4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e007      	b.n	8002fd4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	1acb      	subs	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf28      	it	cs
 8002fe2:	4613      	movcs	r3, r2
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	bf28      	it	cs
 8002fee:	4613      	movcs	r3, r2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f001 fcef 	bl	80049e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	4413      	add	r3, r2
 800300c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	4413      	add	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	4413      	add	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	d101      	bne.n	8003034 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003034:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1b2      	bne.n	8002faa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003044:	6a3b      	ldr	r3, [r7, #32]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800304e:	b580      	push	{r7, lr}
 8003050:	b088      	sub	sp, #32
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d911      	bls.n	8003096 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6938      	ldr	r0, [r7, #16]
 8003082:	f001 fcaf 	bl	80049e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003086:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003094:	e01f      	b.n	80030d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6938      	ldr	r0, [r7, #16]
 80030aa:	f001 fc9b 	bl	80049e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4413      	add	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4619      	mov	r1, r3
 80030c6:	6938      	ldr	r0, [r7, #16]
 80030c8:	f001 fc8c 	bl	80049e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80030cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	60da      	str	r2, [r3, #12]
}
 80030d6:	bf00      	nop
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d808      	bhi.n	800310c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	3b01      	subs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003116:	697b      	ldr	r3, [r7, #20]
}
 8003118:	4618      	mov	r0, r3
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <SEGGER_RTT_ReadNoLock+0x108>)
 8003132:	623b      	str	r3, [r7, #32]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <SEGGER_RTT_ReadNoLock+0x1e>
 800313e:	f7ff fed1 	bl	8002ee4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	3360      	adds	r3, #96	; 0x60
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <SEGGER_RTT_ReadNoLock+0x108>)
 8003150:	4413      	add	r3, r2
 8003152:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d92b      	bls.n	80031c8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4293      	cmp	r3, r2
 8003180:	bf28      	it	cs
 8003182:	4613      	movcs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	4413      	add	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	6939      	ldr	r1, [r7, #16]
 8003194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003196:	f001 fc25 	bl	80049e4 <memcpy>
    NumBytesRead += NumBytesRem;
 800319a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4413      	add	r3, r2
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4413      	add	r3, r2
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4413      	add	r3, r2
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d101      	bne.n	80031c8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	bf28      	it	cs
 80031d8:	4613      	movcs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	4413      	add	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031f2:	f001 fbf7 	bl	80049e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4413      	add	r3, r2
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4413      	add	r3, r2
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4413      	add	r3, r2
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003220:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003224:	4618      	mov	r0, r3
 8003226:	3730      	adds	r7, #48	; 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20012eec 	.word	0x20012eec

08003230 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <SEGGER_RTT_WriteNoLock+0x9c>)
 800324e:	4413      	add	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d029      	beq.n	80032ae <SEGGER_RTT_WriteNoLock+0x7e>
 800325a:	2b02      	cmp	r3, #2
 800325c:	d82e      	bhi.n	80032bc <SEGGER_RTT_WriteNoLock+0x8c>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <SEGGER_RTT_WriteNoLock+0x38>
 8003262:	2b01      	cmp	r3, #1
 8003264:	d013      	beq.n	800328e <SEGGER_RTT_WriteNoLock+0x5e>
 8003266:	e029      	b.n	80032bc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003268:	6978      	ldr	r0, [r7, #20]
 800326a:	f7ff ff38 	bl	80030de <_GetAvailWriteSpace>
 800326e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d202      	bcs.n	800327e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800327c:	e021      	b.n	80032c2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	69b9      	ldr	r1, [r7, #24]
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f7ff fee1 	bl	800304e <_WriteNoCheck>
    break;
 800328c:	e019      	b.n	80032c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f7ff ff25 	bl	80030de <_GetAvailWriteSpace>
 8003294:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4293      	cmp	r3, r2
 800329c:	bf28      	it	cs
 800329e:	4613      	movcs	r3, r2
 80032a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff fed1 	bl	800304e <_WriteNoCheck>
    break;
 80032ac:	e009      	b.n	80032c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff fe6e 	bl	8002f94 <_WriteBlocking>
 80032b8:	61f8      	str	r0, [r7, #28]
    break;
 80032ba:	e002      	b.n	80032c2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    break;
 80032c0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80032c2:	69fb      	ldr	r3, [r7, #28]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20012eec 	.word	0x20012eec

080032d0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <SEGGER_RTT_Write+0x48>)
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <SEGGER_RTT_Write+0x1e>
 80032ea:	f7ff fdfb 	bl	8002ee4 <_DoInit>
  SEGGER_RTT_LOCK();
 80032ee:	f3ef 8311 	mrs	r3, BASEPRI
 80032f2:	f04f 0120 	mov.w	r1, #32
 80032f6:	f381 8811 	msr	BASEPRI, r1
 80032fa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff95 	bl	8003230 <SEGGER_RTT_WriteNoLock>
 8003306:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800330e:	697b      	ldr	r3, [r7, #20]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20012eec 	.word	0x20012eec

0800331c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800332c:	e002      	b.n	8003334 <_EncodeStr+0x18>
    Len++;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3301      	adds	r3, #1
 8003332:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f6      	bne.n	800332e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d901      	bls.n	800334c <_EncodeStr+0x30>
    Len = Limit;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2bfe      	cmp	r3, #254	; 0xfe
 8003350:	d806      	bhi.n	8003360 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e011      	b.n	8003384 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60fa      	str	r2, [r7, #12]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	0a19      	lsrs	r1, r3, #8
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	60fa      	str	r2, [r7, #12]
 8003380:	b2ca      	uxtb	r2, r1
 8003382:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003388:	e00a      	b.n	80033a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	1c53      	adds	r3, r2, #1
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	60f9      	str	r1, [r7, #12]
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
    n++;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3f0      	bcc.n	800338a <_EncodeStr+0x6e>
  }
  return pPayload;
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <_HandleIncomingPacket+0xe0>)
 80033d8:	7e1b      	ldrb	r3, [r3, #24]
 80033da:	4618      	mov	r0, r3
 80033dc:	1cfb      	adds	r3, r7, #3
 80033de:	2201      	movs	r2, #1
 80033e0:	4619      	mov	r1, r3
 80033e2:	f7ff fe9f 	bl	8003124 <SEGGER_RTT_ReadNoLock>
 80033e6:	4603      	mov	r3, r0
 80033e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dd54      	ble.n	800349a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	2b80      	cmp	r3, #128	; 0x80
 80033f4:	d032      	beq.n	800345c <_HandleIncomingPacket+0x8c>
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	dc42      	bgt.n	8003480 <_HandleIncomingPacket+0xb0>
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	dc16      	bgt.n	800342c <_HandleIncomingPacket+0x5c>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dd3e      	ble.n	8003480 <_HandleIncomingPacket+0xb0>
 8003402:	3b01      	subs	r3, #1
 8003404:	2b06      	cmp	r3, #6
 8003406:	d83b      	bhi.n	8003480 <_HandleIncomingPacket+0xb0>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <_HandleIncomingPacket+0x40>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003433 	.word	0x08003433
 8003414:	08003439 	.word	0x08003439
 8003418:	0800343f 	.word	0x0800343f
 800341c:	08003445 	.word	0x08003445
 8003420:	0800344b 	.word	0x0800344b
 8003424:	08003451 	.word	0x08003451
 8003428:	08003457 	.word	0x08003457
 800342c:	2b7f      	cmp	r3, #127	; 0x7f
 800342e:	d036      	beq.n	800349e <_HandleIncomingPacket+0xce>
 8003430:	e026      	b.n	8003480 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003432:	f000 fb57 	bl	8003ae4 <SEGGER_SYSVIEW_Start>
      break;
 8003436:	e037      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003438:	f000 fc10 	bl	8003c5c <SEGGER_SYSVIEW_Stop>
      break;
 800343c:	e034      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800343e:	f000 fdc5 	bl	8003fcc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003442:	e031      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003444:	f000 fdae 	bl	8003fa4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003448:	e02e      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800344a:	f000 fc2d 	bl	8003ca8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800344e:	e02b      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003450:	f001 f858 	bl	8004504 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003454:	e028      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003456:	f001 f837 	bl	80044c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800345a:	e025      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <_HandleIncomingPacket+0xe0>)
 800345e:	7e1b      	ldrb	r3, [r3, #24]
 8003460:	4618      	mov	r0, r3
 8003462:	1cfb      	adds	r3, r7, #3
 8003464:	2201      	movs	r2, #1
 8003466:	4619      	mov	r1, r3
 8003468:	f7ff fe5c 	bl	8003124 <SEGGER_RTT_ReadNoLock>
 800346c:	4603      	mov	r3, r0
 800346e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dd15      	ble.n	80034a2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 ffa5 	bl	80043c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800347e:	e010      	b.n	80034a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	b25b      	sxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	da0e      	bge.n	80034a6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <_HandleIncomingPacket+0xe0>)
 800348a:	7e1b      	ldrb	r3, [r3, #24]
 800348c:	4618      	mov	r0, r3
 800348e:	1cfb      	adds	r3, r7, #3
 8003490:	2201      	movs	r2, #1
 8003492:	4619      	mov	r1, r3
 8003494:	f7ff fe46 	bl	8003124 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003498:	e005      	b.n	80034a6 <_HandleIncomingPacket+0xd6>
    }
  }
 800349a:	bf00      	nop
 800349c:	e004      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
      break;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <_HandleIncomingPacket+0xd8>
      break;
 80034a6:	bf00      	nop
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200133a4 	.word	0x200133a4

080034b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80034ba:	2301      	movs	r3, #1
 80034bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c8:	4b32      	ldr	r3, [pc, #200]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	e00b      	b.n	80034e8 <_TrySendOverflowPacket+0x34>
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	09db      	lsrs	r3, r3, #7
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b7f      	cmp	r3, #127	; 0x7f
 80034ec:	d8f0      	bhi.n	80034d0 <_TrySendOverflowPacket+0x1c>
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <_TrySendOverflowPacket+0xe4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	e00b      	b.n	8003530 <_TrySendOverflowPacket+0x7c>
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	6279      	str	r1, [r7, #36]	; 0x24
 8003522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	09db      	lsrs	r3, r3, #7
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	2b7f      	cmp	r3, #127	; 0x7f
 8003534:	d8f0      	bhi.n	8003518 <_TrySendOverflowPacket+0x64>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	627a      	str	r2, [r7, #36]	; 0x24
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	4618      	mov	r0, r3
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	461a      	mov	r2, r3
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	4619      	mov	r1, r3
 8003558:	f7fc fe42 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800355c:	4603      	mov	r3, r0
 800355e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003560:	f7ff fcb0 	bl	8002ec4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e004      	b.n	8003588 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <_TrySendOverflowPacket+0xe0>)
 8003586:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003588:	693b      	ldr	r3, [r7, #16]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3730      	adds	r7, #48	; 0x30
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200133a4 	.word	0x200133a4
 8003598:	e0001004 	.word	0xe0001004

0800359c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <_SendPacket+0x1c4>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d010      	beq.n	80035d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80035b0:	4b6b      	ldr	r3, [pc, #428]	; (8003760 <_SendPacket+0x1c4>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a5 	beq.w	8003704 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80035ba:	4b69      	ldr	r3, [pc, #420]	; (8003760 <_SendPacket+0x1c4>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d109      	bne.n	80035d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80035c2:	f7ff ff77 	bl	80034b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80035c6:	4b66      	ldr	r3, [pc, #408]	; (8003760 <_SendPacket+0x1c4>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 809c 	bne.w	8003708 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80035d0:	e001      	b.n	80035d6 <_SendPacket+0x3a>
    goto Send;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <_SendPacket+0x3c>
Send:
 80035d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b1f      	cmp	r3, #31
 80035dc:	d809      	bhi.n	80035f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80035de:	4b60      	ldr	r3, [pc, #384]	; (8003760 <_SendPacket+0x1c4>)
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f040 808d 	bne.w	800370c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b17      	cmp	r3, #23
 80035f6:	d807      	bhi.n	8003608 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e03d      	b.n	8003684 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b7f      	cmp	r3, #127	; 0x7f
 8003614:	d912      	bls.n	800363c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	09da      	lsrs	r2, r3, #7
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3b01      	subs	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	3a01      	subs	r2, #1
 800362e:	60fa      	str	r2, [r7, #12]
 8003630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e006      	b.n	800364a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b7f      	cmp	r3, #127	; 0x7f
 800364e:	d912      	bls.n	8003676 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	09da      	lsrs	r2, r3, #7
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	3a01      	subs	r2, #1
 8003668:	60fa      	str	r2, [r7, #12]
 800366a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e006      	b.n	8003684 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b01      	subs	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003684:	4b37      	ldr	r3, [pc, #220]	; (8003764 <_SendPacket+0x1c8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <_SendPacket+0x1c4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	e00b      	b.n	80036b6 <_SendPacket+0x11a>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	6279      	str	r1, [r7, #36]	; 0x24
 80036a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	09db      	lsrs	r3, r3, #7
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	2b7f      	cmp	r3, #127	; 0x7f
 80036ba:	d8f0      	bhi.n	800369e <_SendPacket+0x102>
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	627a      	str	r2, [r7, #36]	; 0x24
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <_SendPacket+0x1c4>)
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	4618      	mov	r0, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	68f9      	ldr	r1, [r7, #12]
 80036dc:	f7fc fd80 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80036e0:	4603      	mov	r3, r0
 80036e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80036e4:	f7ff fbee 	bl	8002ec4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <_SendPacket+0x1c4>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	60d3      	str	r3, [r2, #12]
 80036f4:	e00b      	b.n	800370e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <_SendPacket+0x1c4>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4b18      	ldr	r3, [pc, #96]	; (8003760 <_SendPacket+0x1c4>)
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e004      	b.n	800370e <_SendPacket+0x172>
    goto SendDone;
 8003704:	bf00      	nop
 8003706:	e002      	b.n	800370e <_SendPacket+0x172>
      goto SendDone;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <_SendPacket+0x172>
      goto SendDone;
 800370c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <_SendPacket+0x1c4>)
 8003710:	7e1b      	ldrb	r3, [r3, #24]
 8003712:	4619      	mov	r1, r3
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <_SendPacket+0x1cc>)
 8003716:	460b      	mov	r3, r1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	440b      	add	r3, r1
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	336c      	adds	r3, #108	; 0x6c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <_SendPacket+0x1c4>)
 8003726:	7e1b      	ldrb	r3, [r3, #24]
 8003728:	4618      	mov	r0, r3
 800372a:	490f      	ldr	r1, [pc, #60]	; (8003768 <_SendPacket+0x1cc>)
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4403      	add	r3, r0
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	3370      	adds	r3, #112	; 0x70
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d00b      	beq.n	8003756 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <_SendPacket+0x1c4>)
 8003740:	789b      	ldrb	r3, [r3, #2]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <_SendPacket+0x1c4>)
 8003748:	2201      	movs	r2, #1
 800374a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800374c:	f7ff fe40 	bl	80033d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <_SendPacket+0x1c4>)
 8003752:	2200      	movs	r2, #0
 8003754:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003756:	bf00      	nop
 8003758:	3728      	adds	r7, #40	; 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200133a4 	.word	0x200133a4
 8003764:	e0001004 	.word	0xe0001004
 8003768:	20012eec 	.word	0x20012eec

0800376c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003774:	f3ef 8311 	mrs	r3, BASEPRI
 8003778:	f04f 0120 	mov.w	r1, #32
 800377c:	f381 8811 	msr	BASEPRI, r1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4808      	ldr	r0, [pc, #32]	; (80037a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003784:	f7ff fe17 	bl	80033b6 <_PreparePacket>
 8003788:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68b8      	ldr	r0, [r7, #8]
 8003790:	f7ff ff04 	bl	800359c <_SendPacket>
  RECORD_END();
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f383 8811 	msr	BASEPRI, r3
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200133d4 	.word	0x200133d4

080037a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037b2:	f3ef 8311 	mrs	r3, BASEPRI
 80037b6:	f04f 0120 	mov.w	r1, #32
 80037ba:	f381 8811 	msr	BASEPRI, r1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	4816      	ldr	r0, [pc, #88]	; (800381c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80037c2:	f7ff fdf8 	bl	80033b6 <_PreparePacket>
 80037c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e00b      	b.n	80037ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	61f9      	str	r1, [r7, #28]
 80037e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	09db      	lsrs	r3, r3, #7
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b7f      	cmp	r3, #127	; 0x7f
 80037f2:	d8f0      	bhi.n	80037d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	61fa      	str	r2, [r7, #28]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	6938      	ldr	r0, [r7, #16]
 800380a:	f7ff fec7 	bl	800359c <_SendPacket>
  RECORD_END();
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f383 8811 	msr	BASEPRI, r3
}
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200133d4 	.word	0x200133d4

08003820 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800382c:	f3ef 8311 	mrs	r3, BASEPRI
 8003830:	f04f 0120 	mov.w	r1, #32
 8003834:	f381 8811 	msr	BASEPRI, r1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	4825      	ldr	r0, [pc, #148]	; (80038d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800383c:	f7ff fdbb 	bl	80033b6 <_PreparePacket>
 8003840:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	e00b      	b.n	8003868 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	b2da      	uxtb	r2, r3
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	62f9      	str	r1, [r7, #44]	; 0x2c
 800385a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	09db      	lsrs	r3, r3, #7
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2b7f      	cmp	r3, #127	; 0x7f
 800386c:	d8f0      	bhi.n	8003850 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	e00b      	b.n	80038a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	6279      	str	r1, [r7, #36]	; 0x24
 8003892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	09db      	lsrs	r3, r3, #7
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2b7f      	cmp	r3, #127	; 0x7f
 80038a4:	d8f0      	bhi.n	8003888 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	627a      	str	r2, [r7, #36]	; 0x24
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6979      	ldr	r1, [r7, #20]
 80038ba:	69b8      	ldr	r0, [r7, #24]
 80038bc:	f7ff fe6e 	bl	800359c <_SendPacket>
  RECORD_END();
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f383 8811 	msr	BASEPRI, r3
}
 80038c6:	bf00      	nop
 80038c8:	3730      	adds	r7, #48	; 0x30
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200133d4 	.word	0x200133d4

080038d4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80038e2:	f3ef 8311 	mrs	r3, BASEPRI
 80038e6:	f04f 0120 	mov.w	r1, #32
 80038ea:	f381 8811 	msr	BASEPRI, r1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	4832      	ldr	r0, [pc, #200]	; (80039bc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80038f2:	f7ff fd60 	bl	80033b6 <_PreparePacket>
 80038f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
 8003904:	e00b      	b.n	800391e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	b2da      	uxtb	r2, r3
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	1c59      	adds	r1, r3, #1
 800390e:	6379      	str	r1, [r7, #52]	; 0x34
 8003910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	09db      	lsrs	r3, r3, #7
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2b7f      	cmp	r3, #127	; 0x7f
 8003922:	d8f0      	bhi.n	8003906 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	637a      	str	r2, [r7, #52]	; 0x34
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
 800393c:	e00b      	b.n	8003956 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	1c59      	adds	r1, r3, #1
 8003946:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	09db      	lsrs	r3, r3, #7
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b7f      	cmp	r3, #127	; 0x7f
 800395a:	d8f0      	bhi.n	800393e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	e00b      	b.n	800398e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	6279      	str	r1, [r7, #36]	; 0x24
 8003980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	09db      	lsrs	r3, r3, #7
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	2b7f      	cmp	r3, #127	; 0x7f
 8003992:	d8f0      	bhi.n	8003976 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	627a      	str	r2, [r7, #36]	; 0x24
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	69b8      	ldr	r0, [r7, #24]
 80039aa:	f7ff fdf7 	bl	800359c <_SendPacket>
  RECORD_END();
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f383 8811 	msr	BASEPRI, r3
}
 80039b4:	bf00      	nop
 80039b6:	3738      	adds	r7, #56	; 0x38
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200133d4 	.word	0x200133d4

080039c0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b090      	sub	sp, #64	; 0x40
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80039ce:	f3ef 8311 	mrs	r3, BASEPRI
 80039d2:	f04f 0120 	mov.w	r1, #32
 80039d6:	f381 8811 	msr	BASEPRI, r1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	4840      	ldr	r0, [pc, #256]	; (8003ae0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80039de:	f7ff fcea 	bl	80033b6 <_PreparePacket>
 80039e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f0:	e00b      	b.n	8003a0a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	1c59      	adds	r1, r3, #1
 80039fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80039fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a0e:	d8f0      	bhi.n	80039f2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
 8003a28:	e00b      	b.n	8003a42 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	6379      	str	r1, [r7, #52]	; 0x34
 8003a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2b7f      	cmp	r3, #127	; 0x7f
 8003a46:	d8f0      	bhi.n	8003a2a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a60:	e00b      	b.n	8003a7a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	1c59      	adds	r1, r3, #1
 8003a6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	09db      	lsrs	r3, r3, #7
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7e:	d8f0      	bhi.n	8003a62 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	e00b      	b.n	8003ab2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	1c59      	adds	r1, r3, #1
 8003aa2:	6279      	str	r1, [r7, #36]	; 0x24
 8003aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	09db      	lsrs	r3, r3, #7
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab6:	d8f0      	bhi.n	8003a9a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	627a      	str	r2, [r7, #36]	; 0x24
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	69b8      	ldr	r0, [r7, #24]
 8003ace:	f7ff fd65 	bl	800359c <_SendPacket>
  RECORD_END();
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f383 8811 	msr	BASEPRI, r3
}
 8003ad8:	bf00      	nop
 8003ada:	3740      	adds	r7, #64	; 0x40
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200133d4 	.word	0x200133d4

08003ae4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003aea:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003af0:	f3ef 8311 	mrs	r3, BASEPRI
 8003af4:	f04f 0120 	mov.w	r1, #32
 8003af8:	f381 8811 	msr	BASEPRI, r1
 8003afc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003afe:	4b54      	ldr	r3, [pc, #336]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	220a      	movs	r2, #10
 8003b04:	4953      	ldr	r1, [pc, #332]	; (8003c54 <SEGGER_SYSVIEW_Start+0x170>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fb6a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003b12:	f7ff f9d7 	bl	8002ec4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b16:	200a      	movs	r0, #10
 8003b18:	f7ff fe28 	bl	800376c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b20:	f04f 0120 	mov.w	r1, #32
 8003b24:	f381 8811 	msr	BASEPRI, r1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	484b      	ldr	r0, [pc, #300]	; (8003c58 <SEGGER_SYSVIEW_Start+0x174>)
 8003b2c:	f7ff fc43 	bl	80033b6 <_PreparePacket>
 8003b30:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b40:	e00b      	b.n	8003b5a <SEGGER_SYSVIEW_Start+0x76>
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	1c59      	adds	r1, r3, #1
 8003b4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	09db      	lsrs	r3, r3, #7
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5e:	d8f0      	bhi.n	8003b42 <SEGGER_SYSVIEW_Start+0x5e>
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	e00b      	b.n	8003b94 <SEGGER_SYSVIEW_Start+0xb0>
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	6279      	str	r1, [r7, #36]	; 0x24
 8003b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	09db      	lsrs	r3, r3, #7
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2b7f      	cmp	r3, #127	; 0x7f
 8003b98:	d8f0      	bhi.n	8003b7c <SEGGER_SYSVIEW_Start+0x98>
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e00b      	b.n	8003bce <SEGGER_SYSVIEW_Start+0xea>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	1c59      	adds	r1, r3, #1
 8003bbe:	61f9      	str	r1, [r7, #28]
 8003bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	09db      	lsrs	r3, r3, #7
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd2:	d8f0      	bhi.n	8003bb6 <SEGGER_SYSVIEW_Start+0xd2>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	61fa      	str	r2, [r7, #28]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e00b      	b.n	8003c06 <SEGGER_SYSVIEW_Start+0x122>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1c59      	adds	r1, r3, #1
 8003bf6:	6179      	str	r1, [r7, #20]
 8003bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	09db      	lsrs	r3, r3, #7
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0a:	d8f0      	bhi.n	8003bee <SEGGER_SYSVIEW_Start+0x10a>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	617a      	str	r2, [r7, #20]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	6839      	ldr	r1, [r7, #0]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fcbb 	bl	800359c <_SendPacket>
      RECORD_END();
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c3a:	f000 f9c7 	bl	8003fcc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c3e:	f000 f9b1 	bl	8003fa4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c42:	f000 fc5f 	bl	8004504 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003c46:	bf00      	nop
 8003c48:	3730      	adds	r7, #48	; 0x30
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200133a4 	.word	0x200133a4
 8003c54:	080054d0 	.word	0x080054d0
 8003c58:	200133d4 	.word	0x200133d4

08003c5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c62:	f3ef 8311 	mrs	r3, BASEPRI
 8003c66:	f04f 0120 	mov.w	r1, #32
 8003c6a:	f381 8811 	msr	BASEPRI, r1
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	480b      	ldr	r0, [pc, #44]	; (8003ca0 <SEGGER_SYSVIEW_Stop+0x44>)
 8003c72:	f7ff fba0 	bl	80033b6 <_PreparePacket>
 8003c76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c80:	220b      	movs	r2, #11
 8003c82:	6839      	ldr	r1, [r7, #0]
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f7ff fc89 	bl	800359c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f383 8811 	msr	BASEPRI, r3
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200133d4 	.word	0x200133d4
 8003ca4:	200133a4 	.word	0x200133a4

08003ca8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cae:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb2:	f04f 0120 	mov.w	r1, #32
 8003cb6:	f381 8811 	msr	BASEPRI, r1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	4845      	ldr	r0, [pc, #276]	; (8003dd4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003cbe:	f7ff fb7a 	bl	80033b6 <_PreparePacket>
 8003cc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd2:	e00b      	b.n	8003cec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	09db      	lsrs	r3, r3, #7
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf0:	d8f0      	bhi.n	8003cd4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	e00b      	b.n	8003d26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	6279      	str	r1, [r7, #36]	; 0x24
 8003d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	09db      	lsrs	r3, r3, #7
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2a:	d8f0      	bhi.n	8003d0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	627a      	str	r2, [r7, #36]	; 0x24
 8003d32:	6a3a      	ldr	r2, [r7, #32]
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e00b      	b.n	8003d60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	61f9      	str	r1, [r7, #28]
 8003d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	09db      	lsrs	r3, r3, #7
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b7f      	cmp	r3, #127	; 0x7f
 8003d64:	d8f0      	bhi.n	8003d48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	61fa      	str	r2, [r7, #28]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	e00b      	b.n	8003d98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	6179      	str	r1, [r7, #20]
 8003d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	09db      	lsrs	r3, r3, #7
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d9c:	d8f0      	bhi.n	8003d80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	617a      	str	r2, [r7, #20]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003dae:	2218      	movs	r2, #24
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f7ff fbf2 	bl	800359c <_SendPacket>
  RECORD_END();
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4798      	blx	r3
  }
}
 8003dcc:	bf00      	nop
 8003dce:	3730      	adds	r7, #48	; 0x30
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200133d4 	.word	0x200133d4
 8003dd8:	200133a4 	.word	0x200133a4

08003ddc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b092      	sub	sp, #72	; 0x48
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003de4:	f3ef 8311 	mrs	r3, BASEPRI
 8003de8:	f04f 0120 	mov.w	r1, #32
 8003dec:	f381 8811 	msr	BASEPRI, r1
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	486a      	ldr	r0, [pc, #424]	; (8003f9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003df4:	f7ff fadf 	bl	80033b6 <_PreparePacket>
 8003df8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0e:	e00b      	b.n	8003e28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	6479      	str	r1, [r7, #68]	; 0x44
 8003e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e24:	09db      	lsrs	r3, r3, #7
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
 8003e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e2c:	d8f0      	bhi.n	8003e10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	647a      	str	r2, [r7, #68]	; 0x44
 8003e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e48:	e00b      	b.n	8003e62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	1c59      	adds	r1, r3, #1
 8003e52:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	09db      	lsrs	r3, r3, #7
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b7f      	cmp	r3, #127	; 0x7f
 8003e66:	d8f0      	bhi.n	8003e4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fa4b 	bl	800331c <_EncodeStr>
 8003e86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e88:	2209      	movs	r2, #9
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	6938      	ldr	r0, [r7, #16]
 8003e8e:	f7ff fb85 	bl	800359c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	e00b      	b.n	8003ec0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	6379      	str	r1, [r7, #52]	; 0x34
 8003eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	09db      	lsrs	r3, r3, #7
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec4:	d8f0      	bhi.n	8003ea8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	637a      	str	r2, [r7, #52]	; 0x34
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	e00b      	b.n	8003efa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	09db      	lsrs	r3, r3, #7
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2b7f      	cmp	r3, #127	; 0x7f
 8003efe:	d8f0      	bhi.n	8003ee2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	e00b      	b.n	8003f34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	6279      	str	r1, [r7, #36]	; 0x24
 8003f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2b7f      	cmp	r3, #127	; 0x7f
 8003f38:	d8f0      	bhi.n	8003f1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e00b      	b.n	8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	61f9      	str	r1, [r7, #28]
 8003f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	09db      	lsrs	r3, r3, #7
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f70:	d8f0      	bhi.n	8003f54 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	61fa      	str	r2, [r7, #28]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f82:	2215      	movs	r2, #21
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	6938      	ldr	r0, [r7, #16]
 8003f88:	f7ff fb08 	bl	800359c <_SendPacket>
  RECORD_END();
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f383 8811 	msr	BASEPRI, r3
}
 8003f92:	bf00      	nop
 8003f94:	3748      	adds	r7, #72	; 0x48
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200133d4 	.word	0x200133d4
 8003fa0:	200133a4 	.word	0x200133a4

08003fa4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003fba:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4798      	blx	r3
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200133a4 	.word	0x200133a4

08003fcc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01a      	beq.n	8004010 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4798      	blx	r3
 8003fec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003ff0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	000a      	movs	r2, r1
 8004000:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004002:	4613      	mov	r3, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4621      	mov	r1, r4
 8004008:	200d      	movs	r0, #13
 800400a:	f7ff fc09 	bl	8003820 <SEGGER_SYSVIEW_RecordU32x2>
 800400e:	e006      	b.n	800401e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	200c      	movs	r0, #12
 8004018:	f7ff fbc6 	bl	80037a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	bf00      	nop
 8004028:	200133a4 	.word	0x200133a4
 800402c:	e0001004 	.word	0xe0001004

08004030 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004036:	f3ef 8311 	mrs	r3, BASEPRI
 800403a:	f04f 0120 	mov.w	r1, #32
 800403e:	f381 8811 	msr	BASEPRI, r1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	4819      	ldr	r0, [pc, #100]	; (80040ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004046:	f7ff f9b6 	bl	80033b6 <_PreparePacket>
 800404a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004058:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e00b      	b.n	800407c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	6179      	str	r1, [r7, #20]
 800406e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f0      	bhi.n	8004064 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	617a      	str	r2, [r7, #20]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004092:	2202      	movs	r2, #2
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fa80 	bl	800359c <_SendPacket>
  RECORD_END();
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f383 8811 	msr	BASEPRI, r3
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200133d4 	.word	0x200133d4
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040ba:	f3ef 8311 	mrs	r3, BASEPRI
 80040be:	f04f 0120 	mov.w	r1, #32
 80040c2:	f381 8811 	msr	BASEPRI, r1
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	4807      	ldr	r0, [pc, #28]	; (80040e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80040ca:	f7ff f974 	bl	80033b6 <_PreparePacket>
 80040ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80040d0:	2203      	movs	r2, #3
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	6838      	ldr	r0, [r7, #0]
 80040d6:	f7ff fa61 	bl	800359c <_SendPacket>
  RECORD_END();
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f383 8811 	msr	BASEPRI, r3
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200133d4 	.word	0x200133d4

080040ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040f2:	f3ef 8311 	mrs	r3, BASEPRI
 80040f6:	f04f 0120 	mov.w	r1, #32
 80040fa:	f381 8811 	msr	BASEPRI, r1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	4807      	ldr	r0, [pc, #28]	; (8004120 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004102:	f7ff f958 	bl	80033b6 <_PreparePacket>
 8004106:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004108:	2212      	movs	r2, #18
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f7ff fa45 	bl	800359c <_SendPacket>
  RECORD_END();
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f383 8811 	msr	BASEPRI, r3
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200133d4 	.word	0x200133d4

08004124 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800412a:	f3ef 8311 	mrs	r3, BASEPRI
 800412e:	f04f 0120 	mov.w	r1, #32
 8004132:	f381 8811 	msr	BASEPRI, r1
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	4807      	ldr	r0, [pc, #28]	; (8004158 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800413a:	f7ff f93c 	bl	80033b6 <_PreparePacket>
 800413e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004140:	2211      	movs	r2, #17
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	6838      	ldr	r0, [r7, #0]
 8004146:	f7ff fa29 	bl	800359c <_SendPacket>
  RECORD_END();
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f383 8811 	msr	BASEPRI, r3
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200133d4 	.word	0x200133d4

0800415c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004164:	f3ef 8311 	mrs	r3, BASEPRI
 8004168:	f04f 0120 	mov.w	r1, #32
 800416c:	f381 8811 	msr	BASEPRI, r1
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	4819      	ldr	r0, [pc, #100]	; (80041d8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004174:	f7ff f91f 	bl	80033b6 <_PreparePacket>
 8004178:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e00b      	b.n	80041aa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	1c59      	adds	r1, r3, #1
 800419a:	61f9      	str	r1, [r7, #28]
 800419c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	09db      	lsrs	r3, r3, #7
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b7f      	cmp	r3, #127	; 0x7f
 80041ae:	d8f0      	bhi.n	8004192 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80041c0:	2208      	movs	r2, #8
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	6938      	ldr	r0, [r7, #16]
 80041c6:	f7ff f9e9 	bl	800359c <_SendPacket>
  RECORD_END();
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f383 8811 	msr	BASEPRI, r3
}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	200133d4 	.word	0x200133d4
 80041dc:	200133a4 	.word	0x200133a4

080041e0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041e8:	f3ef 8311 	mrs	r3, BASEPRI
 80041ec:	f04f 0120 	mov.w	r1, #32
 80041f0:	f381 8811 	msr	BASEPRI, r1
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	4819      	ldr	r0, [pc, #100]	; (800425c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80041f8:	f7ff f8dd 	bl	80033b6 <_PreparePacket>
 80041fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	e00b      	b.n	800422e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1c59      	adds	r1, r3, #1
 800421e:	61f9      	str	r1, [r7, #28]
 8004220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	09db      	lsrs	r3, r3, #7
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b7f      	cmp	r3, #127	; 0x7f
 8004232:	d8f0      	bhi.n	8004216 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	61fa      	str	r2, [r7, #28]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004244:	2204      	movs	r2, #4
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	6938      	ldr	r0, [r7, #16]
 800424a:	f7ff f9a7 	bl	800359c <_SendPacket>
  RECORD_END();
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f383 8811 	msr	BASEPRI, r3
}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200133d4 	.word	0x200133d4
 8004260:	200133a4 	.word	0x200133a4

08004264 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800426c:	f3ef 8311 	mrs	r3, BASEPRI
 8004270:	f04f 0120 	mov.w	r1, #32
 8004274:	f381 8811 	msr	BASEPRI, r1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	4819      	ldr	r0, [pc, #100]	; (80042e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800427c:	f7ff f89b 	bl	80033b6 <_PreparePacket>
 8004280:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e00b      	b.n	80042b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	61f9      	str	r1, [r7, #28]
 80042a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d8f0      	bhi.n	800429a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80042c8:	2206      	movs	r2, #6
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6938      	ldr	r0, [r7, #16]
 80042ce:	f7ff f965 	bl	800359c <_SendPacket>
  RECORD_END();
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f383 8811 	msr	BASEPRI, r3
}
 80042d8:	bf00      	nop
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200133d4 	.word	0x200133d4
 80042e4:	200133a4 	.word	0x200133a4

080042e8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80042f2:	f3ef 8311 	mrs	r3, BASEPRI
 80042f6:	f04f 0120 	mov.w	r1, #32
 80042fa:	f381 8811 	msr	BASEPRI, r1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	4827      	ldr	r0, [pc, #156]	; (80043a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004302:	f7ff f858 	bl	80033b6 <_PreparePacket>
 8004306:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	e00b      	b.n	8004338 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	6279      	str	r1, [r7, #36]	; 0x24
 800432a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	09db      	lsrs	r3, r3, #7
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b7f      	cmp	r3, #127	; 0x7f
 800433c:	d8f0      	bhi.n	8004320 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	627a      	str	r2, [r7, #36]	; 0x24
 8004344:	6a3a      	ldr	r2, [r7, #32]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e00b      	b.n	8004370 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1c59      	adds	r1, r3, #1
 8004360:	61f9      	str	r1, [r7, #28]
 8004362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	09db      	lsrs	r3, r3, #7
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b7f      	cmp	r3, #127	; 0x7f
 8004374:	d8f0      	bhi.n	8004358 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	61fa      	str	r2, [r7, #28]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004386:	2207      	movs	r2, #7
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	6938      	ldr	r0, [r7, #16]
 800438c:	f7ff f906 	bl	800359c <_SendPacket>
  RECORD_END();
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f383 8811 	msr	BASEPRI, r3
}
 8004396:	bf00      	nop
 8004398:	3728      	adds	r7, #40	; 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200133d4 	.word	0x200133d4
 80043a4:	200133a4 	.word	0x200133a4

080043a8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	1ad3      	subs	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	200133a4 	.word	0x200133a4

080043c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	; 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d06d      	beq.n	80044b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80043e0:	2300      	movs	r3, #0
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e4:	e008      	b.n	80043f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	3301      	adds	r3, #1
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d3f2      	bcc.n	80043e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004400:	e000      	b.n	8004404 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004402:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d055      	beq.n	80044b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800440a:	f3ef 8311 	mrs	r3, BASEPRI
 800440e:	f04f 0120 	mov.w	r1, #32
 8004412:	f381 8811 	msr	BASEPRI, r1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	482a      	ldr	r0, [pc, #168]	; (80044c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800441a:	f7fe ffcc 	bl	80033b6 <_PreparePacket>
 800441e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	e00b      	b.n	8004446 <SEGGER_SYSVIEW_SendModule+0x7e>
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	6279      	str	r1, [r7, #36]	; 0x24
 8004438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2b7f      	cmp	r3, #127	; 0x7f
 800444a:	d8f0      	bhi.n	800442e <SEGGER_SYSVIEW_SendModule+0x66>
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	627a      	str	r2, [r7, #36]	; 0x24
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e00b      	b.n	8004480 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	61f9      	str	r1, [r7, #28]
 8004472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	09db      	lsrs	r3, r3, #7
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b7f      	cmp	r3, #127	; 0x7f
 8004484:	d8f0      	bhi.n	8004468 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	61fa      	str	r2, [r7, #28]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	4619      	mov	r1, r3
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7fe ff3c 	bl	800331c <_EncodeStr>
 80044a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80044a6:	2216      	movs	r2, #22
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	6938      	ldr	r0, [r7, #16]
 80044ac:	f7ff f876 	bl	800359c <_SendPacket>
      RECORD_END();
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80044b6:	bf00      	nop
 80044b8:	3730      	adds	r7, #48	; 0x30
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200133cc 	.word	0x200133cc
 80044c4:	200133d4 	.word	0x200133d4

080044c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00f      	beq.n	80044f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200133cc 	.word	0x200133cc

08004504 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800450a:	f3ef 8311 	mrs	r3, BASEPRI
 800450e:	f04f 0120 	mov.w	r1, #32
 8004512:	f381 8811 	msr	BASEPRI, r1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	4817      	ldr	r0, [pc, #92]	; (8004578 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800451a:	f7fe ff4c 	bl	80033b6 <_PreparePacket>
 800451e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	4b14      	ldr	r3, [pc, #80]	; (800457c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e00b      	b.n	8004548 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1c59      	adds	r1, r3, #1
 8004538:	6179      	str	r1, [r7, #20]
 800453a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	09db      	lsrs	r3, r3, #7
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b7f      	cmp	r3, #127	; 0x7f
 800454c:	d8f0      	bhi.n	8004530 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	617a      	str	r2, [r7, #20]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800455e:	221b      	movs	r2, #27
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7ff f81a 	bl	800359c <_SendPacket>
  RECORD_END();
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f383 8811 	msr	BASEPRI, r3
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200133d4 	.word	0x200133d4
 800457c:	200133d0 	.word	0x200133d0

08004580 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004588:	f3ef 8311 	mrs	r3, BASEPRI
 800458c:	f04f 0120 	mov.w	r1, #32
 8004590:	f381 8811 	msr	BASEPRI, r1
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	4827      	ldr	r0, [pc, #156]	; (8004634 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004598:	f7fe ff0d 	bl	80033b6 <_PreparePacket>
 800459c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6938      	ldr	r0, [r7, #16]
 80045a4:	f7fe feba 	bl	800331c <_EncodeStr>
 80045a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	2301      	movs	r3, #1
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	e00b      	b.n	80045cc <SEGGER_SYSVIEW_Warn+0x4c>
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	6279      	str	r1, [r7, #36]	; 0x24
 80045be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	09db      	lsrs	r3, r3, #7
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b7f      	cmp	r3, #127	; 0x7f
 80045d0:	d8f0      	bhi.n	80045b4 <SEGGER_SYSVIEW_Warn+0x34>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	627a      	str	r2, [r7, #36]	; 0x24
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e00b      	b.n	8004604 <SEGGER_SYSVIEW_Warn+0x84>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	61f9      	str	r1, [r7, #28]
 80045f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b7f      	cmp	r3, #127	; 0x7f
 8004608:	d8f0      	bhi.n	80045ec <SEGGER_SYSVIEW_Warn+0x6c>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	61fa      	str	r2, [r7, #28]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800461a:	221a      	movs	r2, #26
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	6938      	ldr	r0, [r7, #16]
 8004620:	f7fe ffbc 	bl	800359c <_SendPacket>
  RECORD_END();
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f383 8811 	msr	BASEPRI, r3
}
 800462a:	bf00      	nop
 800462c:	3728      	adds	r7, #40	; 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	200133d4 	.word	0x200133d4

08004638 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	2000      	movs	r0, #0
 800464c:	f7fe fe40 	bl	80032d0 <SEGGER_RTT_Write>
  return len;
 8004650:	683b      	ldr	r3, [r7, #0]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <GPIO_Config>:
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	2300      	movs	r3, #0
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a88      	ldr	r2, [pc, #544]	; (8004894 <GPIO_Config+0x238>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d106      	bne.n	8004684 <GPIO_Config+0x28>
 8004676:	4b88      	ldr	r3, [pc, #544]	; (8004898 <GPIO_Config+0x23c>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a87      	ldr	r2, [pc, #540]	; (8004898 <GPIO_Config+0x23c>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	e03a      	b.n	80046fa <GPIO_Config+0x9e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a84      	ldr	r2, [pc, #528]	; (800489c <GPIO_Config+0x240>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d106      	bne.n	800469c <GPIO_Config+0x40>
 800468e:	4b82      	ldr	r3, [pc, #520]	; (8004898 <GPIO_Config+0x23c>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a81      	ldr	r2, [pc, #516]	; (8004898 <GPIO_Config+0x23c>)
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	e02e      	b.n	80046fa <GPIO_Config+0x9e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7f      	ldr	r2, [pc, #508]	; (80048a0 <GPIO_Config+0x244>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d106      	bne.n	80046b4 <GPIO_Config+0x58>
 80046a6:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <GPIO_Config+0x23c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a7b      	ldr	r2, [pc, #492]	; (8004898 <GPIO_Config+0x23c>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	e022      	b.n	80046fa <GPIO_Config+0x9e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7a      	ldr	r2, [pc, #488]	; (80048a4 <GPIO_Config+0x248>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d106      	bne.n	80046cc <GPIO_Config+0x70>
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <GPIO_Config+0x23c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	4a75      	ldr	r2, [pc, #468]	; (8004898 <GPIO_Config+0x23c>)
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ca:	e016      	b.n	80046fa <GPIO_Config+0x9e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a75      	ldr	r2, [pc, #468]	; (80048a8 <GPIO_Config+0x24c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d106      	bne.n	80046e4 <GPIO_Config+0x88>
 80046d6:	4b70      	ldr	r3, [pc, #448]	; (8004898 <GPIO_Config+0x23c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a6f      	ldr	r2, [pc, #444]	; (8004898 <GPIO_Config+0x23c>)
 80046dc:	f043 0310 	orr.w	r3, r3, #16
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	e00a      	b.n	80046fa <GPIO_Config+0x9e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a70      	ldr	r2, [pc, #448]	; (80048ac <GPIO_Config+0x250>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d105      	bne.n	80046fa <GPIO_Config+0x9e>
 80046ee:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <GPIO_Config+0x23c>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4a69      	ldr	r2, [pc, #420]	; (8004898 <GPIO_Config+0x23c>)
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	6313      	str	r3, [r2, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	795b      	ldrb	r3, [r3, #5]
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	791b      	ldrb	r3, [r3, #4]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2103      	movs	r1, #3
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7a1b      	ldrb	r3, [r3, #8]
 800473e:	461a      	mov	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	791b      	ldrb	r3, [r3, #4]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	791b      	ldrb	r3, [r3, #4]
 8004754:	4619      	mov	r1, r3
 8004756:	2301      	movs	r3, #1
 8004758:	408b      	lsls	r3, r1
 800475a:	43db      	mvns	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	400a      	ands	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	799b      	ldrb	r3, [r3, #6]
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	791b      	ldrb	r3, [r3, #4]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2103      	movs	r1, #3
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	400a      	ands	r2, r1
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	79db      	ldrb	r3, [r3, #7]
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	791b      	ldrb	r3, [r3, #4]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	791b      	ldrb	r3, [r3, #4]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2103      	movs	r1, #3
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	4619      	mov	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	400a      	ands	r2, r1
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68d9      	ldr	r1, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	795b      	ldrb	r3, [r3, #5]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d143      	bne.n	8004886 <GPIO_Config+0x22a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	791b      	ldrb	r3, [r3, #4]
 8004802:	2b07      	cmp	r3, #7
 8004804:	d81f      	bhi.n	8004846 <GPIO_Config+0x1ea>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	210f      	movs	r1, #15
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	400a      	ands	r2, r1
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7a5b      	ldrb	r3, [r3, #9]
 8004832:	4619      	mov	r1, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	4619      	mov	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	e01f      	b.n	8004886 <GPIO_Config+0x22a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	791b      	ldrb	r3, [r3, #4]
 800484a:	3b08      	subs	r3, #8
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004856:	210f      	movs	r1, #15
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	400a      	ands	r2, r1
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7a5b      	ldrb	r3, [r3, #9]
 8004874:	4619      	mov	r1, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	4619      	mov	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40020000 	.word	0x40020000
 8004898:	40023800 	.word	0x40023800
 800489c:	40020400 	.word	0x40020400
 80048a0:	40020800 	.word	0x40020800
 80048a4:	40020c00 	.word	0x40020c00
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40021c00 	.word	0x40021c00

080048b0 <GPIO_WritePin>:
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10d      	bne.n	80048de <GPIO_WritePin+0x2e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	791b      	ldrb	r3, [r3, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2301      	movs	r3, #1
 80048d0:	408b      	lsls	r3, r1
 80048d2:	4619      	mov	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	e00d      	b.n	80048fa <GPIO_WritePin+0x4a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	3310      	adds	r3, #16
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	619a      	str	r2, [r3, #24]
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <GPIO_ReadPin>:
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	461a      	mov	r2, r3
 8004918:	2301      	movs	r3, #1
 800491a:	4093      	lsls	r3, r2
 800491c:	817b      	strh	r3, [r7, #10]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	791b      	ldrb	r3, [r3, #4]
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	40d3      	lsrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <GPIOxTooglePin>:
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ffd8 	bl	8004906 <GPIO_ReadPin>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d104      	bne.n	800496a <GPIOxTooglePin+0x22>
 8004960:	2100      	movs	r1, #0
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ffa4 	bl	80048b0 <GPIO_WritePin>
 8004968:	e003      	b.n	8004972 <GPIOxTooglePin+0x2a>
 800496a:	2101      	movs	r1, #1
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff9f 	bl	80048b0 <GPIO_WritePin>
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	; (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	; (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	; (80049c0 <__libc_init_array+0x44>)
 8004990:	f000 fd38 	bl	8005404 <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08005540 	.word	0x08005540
 80049b8:	08005540 	.word	0x08005540
 80049bc:	08005540 	.word	0x08005540
 80049c0:	08005544 	.word	0x08005544

080049c4 <memcmp>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	3901      	subs	r1, #1
 80049c8:	4402      	add	r2, r0
 80049ca:	4290      	cmp	r0, r2
 80049cc:	d101      	bne.n	80049d2 <memcmp+0xe>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e005      	b.n	80049de <memcmp+0x1a>
 80049d2:	7803      	ldrb	r3, [r0, #0]
 80049d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d001      	beq.n	80049e0 <memcmp+0x1c>
 80049dc:	1b18      	subs	r0, r3, r4
 80049de:	bd10      	pop	{r4, pc}
 80049e0:	3001      	adds	r0, #1
 80049e2:	e7f2      	b.n	80049ca <memcmp+0x6>

080049e4 <memcpy>:
 80049e4:	440a      	add	r2, r1
 80049e6:	4291      	cmp	r1, r2
 80049e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049ec:	d100      	bne.n	80049f0 <memcpy+0xc>
 80049ee:	4770      	bx	lr
 80049f0:	b510      	push	{r4, lr}
 80049f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d1f9      	bne.n	80049f2 <memcpy+0xe>
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <memset>:
 8004a00:	4402      	add	r2, r0
 8004a02:	4603      	mov	r3, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <memset+0xa>
 8004a08:	4770      	bx	lr
 8004a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0e:	e7f9      	b.n	8004a04 <memset+0x4>

08004a10 <_puts_r>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	460e      	mov	r6, r1
 8004a14:	4605      	mov	r5, r0
 8004a16:	b118      	cbz	r0, 8004a20 <_puts_r+0x10>
 8004a18:	6983      	ldr	r3, [r0, #24]
 8004a1a:	b90b      	cbnz	r3, 8004a20 <_puts_r+0x10>
 8004a1c:	f000 fa9c 	bl	8004f58 <__sinit>
 8004a20:	69ab      	ldr	r3, [r5, #24]
 8004a22:	68ac      	ldr	r4, [r5, #8]
 8004a24:	b913      	cbnz	r3, 8004a2c <_puts_r+0x1c>
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 fa96 	bl	8004f58 <__sinit>
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <_puts_r+0xd0>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d120      	bne.n	8004a74 <_puts_r+0x64>
 8004a32:	686c      	ldr	r4, [r5, #4]
 8004a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a36:	07db      	lsls	r3, r3, #31
 8004a38:	d405      	bmi.n	8004a46 <_puts_r+0x36>
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	0598      	lsls	r0, r3, #22
 8004a3e:	d402      	bmi.n	8004a46 <_puts_r+0x36>
 8004a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a42:	f000 fb27 	bl	8005094 <__retarget_lock_acquire_recursive>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0719      	lsls	r1, r3, #28
 8004a4a:	d51d      	bpl.n	8004a88 <_puts_r+0x78>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	b1db      	cbz	r3, 8004a88 <_puts_r+0x78>
 8004a50:	3e01      	subs	r6, #1
 8004a52:	68a3      	ldr	r3, [r4, #8]
 8004a54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	bb39      	cbnz	r1, 8004aae <_puts_r+0x9e>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da38      	bge.n	8004ad4 <_puts_r+0xc4>
 8004a62:	4622      	mov	r2, r4
 8004a64:	210a      	movs	r1, #10
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 f88c 	bl	8004b84 <__swbuf_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d011      	beq.n	8004a94 <_puts_r+0x84>
 8004a70:	250a      	movs	r5, #10
 8004a72:	e011      	b.n	8004a98 <_puts_r+0x88>
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <_puts_r+0xd4>)
 8004a76:	429c      	cmp	r4, r3
 8004a78:	d101      	bne.n	8004a7e <_puts_r+0x6e>
 8004a7a:	68ac      	ldr	r4, [r5, #8]
 8004a7c:	e7da      	b.n	8004a34 <_puts_r+0x24>
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <_puts_r+0xd8>)
 8004a80:	429c      	cmp	r4, r3
 8004a82:	bf08      	it	eq
 8004a84:	68ec      	ldreq	r4, [r5, #12]
 8004a86:	e7d5      	b.n	8004a34 <_puts_r+0x24>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f8cc 	bl	8004c28 <__swsetup_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d0dd      	beq.n	8004a50 <_puts_r+0x40>
 8004a94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a9a:	07da      	lsls	r2, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_puts_r+0x9a>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_puts_r+0x9a>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aa6:	f000 faf6 	bl	8005096 <__retarget_lock_release_recursive>
 8004aaa:	4628      	mov	r0, r5
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da04      	bge.n	8004abc <_puts_r+0xac>
 8004ab2:	69a2      	ldr	r2, [r4, #24]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dc06      	bgt.n	8004ac6 <_puts_r+0xb6>
 8004ab8:	290a      	cmp	r1, #10
 8004aba:	d004      	beq.n	8004ac6 <_puts_r+0xb6>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	7019      	strb	r1, [r3, #0]
 8004ac4:	e7c5      	b.n	8004a52 <_puts_r+0x42>
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 f85b 	bl	8004b84 <__swbuf_r>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d1bf      	bne.n	8004a52 <_puts_r+0x42>
 8004ad2:	e7df      	b.n	8004a94 <_puts_r+0x84>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	250a      	movs	r5, #10
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	701d      	strb	r5, [r3, #0]
 8004ade:	e7db      	b.n	8004a98 <_puts_r+0x88>
 8004ae0:	08005500 	.word	0x08005500
 8004ae4:	08005520 	.word	0x08005520
 8004ae8:	080054e0 	.word	0x080054e0

08004aec <puts>:
 8004aec:	4b02      	ldr	r3, [pc, #8]	; (8004af8 <puts+0xc>)
 8004aee:	4601      	mov	r1, r0
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	f7ff bf8d 	b.w	8004a10 <_puts_r>
 8004af6:	bf00      	nop
 8004af8:	2000000c 	.word	0x2000000c

08004afc <__sread>:
 8004afc:	b510      	push	{r4, lr}
 8004afe:	460c      	mov	r4, r1
 8004b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b04:	f000 fc20 	bl	8005348 <_read_r>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	bfab      	itete	ge
 8004b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b10:	181b      	addge	r3, r3, r0
 8004b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b16:	bfac      	ite	ge
 8004b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b1a:	81a3      	strhlt	r3, [r4, #12]
 8004b1c:	bd10      	pop	{r4, pc}

08004b1e <__swrite>:
 8004b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b22:	461f      	mov	r7, r3
 8004b24:	898b      	ldrh	r3, [r1, #12]
 8004b26:	05db      	lsls	r3, r3, #23
 8004b28:	4605      	mov	r5, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	d505      	bpl.n	8004b3c <__swrite+0x1e>
 8004b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b34:	2302      	movs	r3, #2
 8004b36:	2200      	movs	r2, #0
 8004b38:	f000 faae 	bl	8005098 <_lseek_r>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	4632      	mov	r2, r6
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b52:	f7ff bd71 	b.w	8004638 <_write_r>

08004b56 <__sseek>:
 8004b56:	b510      	push	{r4, lr}
 8004b58:	460c      	mov	r4, r1
 8004b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5e:	f000 fa9b 	bl	8005098 <_lseek_r>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	bf15      	itete	ne
 8004b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b72:	81a3      	strheq	r3, [r4, #12]
 8004b74:	bf18      	it	ne
 8004b76:	81a3      	strhne	r3, [r4, #12]
 8004b78:	bd10      	pop	{r4, pc}

08004b7a <__sclose>:
 8004b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7e:	f000 b8c1 	b.w	8004d04 <_close_r>
	...

08004b84 <__swbuf_r>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	460e      	mov	r6, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	b118      	cbz	r0, 8004b96 <__swbuf_r+0x12>
 8004b8e:	6983      	ldr	r3, [r0, #24]
 8004b90:	b90b      	cbnz	r3, 8004b96 <__swbuf_r+0x12>
 8004b92:	f000 f9e1 	bl	8004f58 <__sinit>
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <__swbuf_r+0x98>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	d12b      	bne.n	8004bf4 <__swbuf_r+0x70>
 8004b9c:	686c      	ldr	r4, [r5, #4]
 8004b9e:	69a3      	ldr	r3, [r4, #24]
 8004ba0:	60a3      	str	r3, [r4, #8]
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	071a      	lsls	r2, r3, #28
 8004ba6:	d52f      	bpl.n	8004c08 <__swbuf_r+0x84>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	b36b      	cbz	r3, 8004c08 <__swbuf_r+0x84>
 8004bac:	6923      	ldr	r3, [r4, #16]
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	1ac0      	subs	r0, r0, r3
 8004bb2:	6963      	ldr	r3, [r4, #20]
 8004bb4:	b2f6      	uxtb	r6, r6
 8004bb6:	4283      	cmp	r3, r0
 8004bb8:	4637      	mov	r7, r6
 8004bba:	dc04      	bgt.n	8004bc6 <__swbuf_r+0x42>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f936 	bl	8004e30 <_fflush_r>
 8004bc4:	bb30      	cbnz	r0, 8004c14 <__swbuf_r+0x90>
 8004bc6:	68a3      	ldr	r3, [r4, #8]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60a3      	str	r3, [r4, #8]
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	6022      	str	r2, [r4, #0]
 8004bd2:	701e      	strb	r6, [r3, #0]
 8004bd4:	6963      	ldr	r3, [r4, #20]
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	d004      	beq.n	8004be6 <__swbuf_r+0x62>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	07db      	lsls	r3, r3, #31
 8004be0:	d506      	bpl.n	8004bf0 <__swbuf_r+0x6c>
 8004be2:	2e0a      	cmp	r6, #10
 8004be4:	d104      	bne.n	8004bf0 <__swbuf_r+0x6c>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f921 	bl	8004e30 <_fflush_r>
 8004bee:	b988      	cbnz	r0, 8004c14 <__swbuf_r+0x90>
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <__swbuf_r+0x9c>)
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	d101      	bne.n	8004bfe <__swbuf_r+0x7a>
 8004bfa:	68ac      	ldr	r4, [r5, #8]
 8004bfc:	e7cf      	b.n	8004b9e <__swbuf_r+0x1a>
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <__swbuf_r+0xa0>)
 8004c00:	429c      	cmp	r4, r3
 8004c02:	bf08      	it	eq
 8004c04:	68ec      	ldreq	r4, [r5, #12]
 8004c06:	e7ca      	b.n	8004b9e <__swbuf_r+0x1a>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f80c 	bl	8004c28 <__swsetup_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0cb      	beq.n	8004bac <__swbuf_r+0x28>
 8004c14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c18:	e7ea      	b.n	8004bf0 <__swbuf_r+0x6c>
 8004c1a:	bf00      	nop
 8004c1c:	08005500 	.word	0x08005500
 8004c20:	08005520 	.word	0x08005520
 8004c24:	080054e0 	.word	0x080054e0

08004c28 <__swsetup_r>:
 8004c28:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <__swsetup_r+0xcc>)
 8004c2a:	b570      	push	{r4, r5, r6, lr}
 8004c2c:	681d      	ldr	r5, [r3, #0]
 8004c2e:	4606      	mov	r6, r0
 8004c30:	460c      	mov	r4, r1
 8004c32:	b125      	cbz	r5, 8004c3e <__swsetup_r+0x16>
 8004c34:	69ab      	ldr	r3, [r5, #24]
 8004c36:	b913      	cbnz	r3, 8004c3e <__swsetup_r+0x16>
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f98d 	bl	8004f58 <__sinit>
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <__swsetup_r+0xd0>)
 8004c40:	429c      	cmp	r4, r3
 8004c42:	d10f      	bne.n	8004c64 <__swsetup_r+0x3c>
 8004c44:	686c      	ldr	r4, [r5, #4]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c4c:	0719      	lsls	r1, r3, #28
 8004c4e:	d42c      	bmi.n	8004caa <__swsetup_r+0x82>
 8004c50:	06dd      	lsls	r5, r3, #27
 8004c52:	d411      	bmi.n	8004c78 <__swsetup_r+0x50>
 8004c54:	2309      	movs	r3, #9
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c62:	e03e      	b.n	8004ce2 <__swsetup_r+0xba>
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <__swsetup_r+0xd4>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d101      	bne.n	8004c6e <__swsetup_r+0x46>
 8004c6a:	68ac      	ldr	r4, [r5, #8]
 8004c6c:	e7eb      	b.n	8004c46 <__swsetup_r+0x1e>
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <__swsetup_r+0xd8>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	bf08      	it	eq
 8004c74:	68ec      	ldreq	r4, [r5, #12]
 8004c76:	e7e6      	b.n	8004c46 <__swsetup_r+0x1e>
 8004c78:	0758      	lsls	r0, r3, #29
 8004c7a:	d512      	bpl.n	8004ca2 <__swsetup_r+0x7a>
 8004c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c7e:	b141      	cbz	r1, 8004c92 <__swsetup_r+0x6a>
 8004c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d002      	beq.n	8004c8e <__swsetup_r+0x66>
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 fa7d 	bl	8005188 <_free_r>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6363      	str	r3, [r4, #52]	; 0x34
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6063      	str	r3, [r4, #4]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	b94b      	cbnz	r3, 8004cc2 <__swsetup_r+0x9a>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d003      	beq.n	8004cc2 <__swsetup_r+0x9a>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f000 fa23 	bl	8005108 <__smakebuf_r>
 8004cc2:	89a0      	ldrh	r0, [r4, #12]
 8004cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc8:	f010 0301 	ands.w	r3, r0, #1
 8004ccc:	d00a      	beq.n	8004ce4 <__swsetup_r+0xbc>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60a3      	str	r3, [r4, #8]
 8004cd2:	6963      	ldr	r3, [r4, #20]
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	61a3      	str	r3, [r4, #24]
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	b943      	cbnz	r3, 8004cee <__swsetup_r+0xc6>
 8004cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ce0:	d1ba      	bne.n	8004c58 <__swsetup_r+0x30>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	0781      	lsls	r1, r0, #30
 8004ce6:	bf58      	it	pl
 8004ce8:	6963      	ldrpl	r3, [r4, #20]
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	e7f4      	b.n	8004cd8 <__swsetup_r+0xb0>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e7f7      	b.n	8004ce2 <__swsetup_r+0xba>
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c
 8004cf8:	08005500 	.word	0x08005500
 8004cfc:	08005520 	.word	0x08005520
 8004d00:	080054e0 	.word	0x080054e0

08004d04 <_close_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	; (8004d20 <_close_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fb fb56 	bl	80003c0 <_close>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_close_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_close_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200134c4 	.word	0x200134c4

08004d24 <__sflush_r>:
 8004d24:	898a      	ldrh	r2, [r1, #12]
 8004d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	0710      	lsls	r0, r2, #28
 8004d2e:	460c      	mov	r4, r1
 8004d30:	d458      	bmi.n	8004de4 <__sflush_r+0xc0>
 8004d32:	684b      	ldr	r3, [r1, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dc05      	bgt.n	8004d44 <__sflush_r+0x20>
 8004d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dc02      	bgt.n	8004d44 <__sflush_r+0x20>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	d0f9      	beq.n	8004d3e <__sflush_r+0x1a>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d50:	682f      	ldr	r7, [r5, #0]
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	d032      	beq.n	8004dbc <__sflush_r+0x98>
 8004d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	075a      	lsls	r2, r3, #29
 8004d5c:	d505      	bpl.n	8004d6a <__sflush_r+0x46>
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	1ac0      	subs	r0, r0, r3
 8004d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d64:	b10b      	cbz	r3, 8004d6a <__sflush_r+0x46>
 8004d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d68:	1ac0      	subs	r0, r0, r3
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d70:	6a21      	ldr	r1, [r4, #32]
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b0      	blx	r6
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	d106      	bne.n	8004d8a <__sflush_r+0x66>
 8004d7c:	6829      	ldr	r1, [r5, #0]
 8004d7e:	291d      	cmp	r1, #29
 8004d80:	d82c      	bhi.n	8004ddc <__sflush_r+0xb8>
 8004d82:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <__sflush_r+0x108>)
 8004d84:	40ca      	lsrs	r2, r1
 8004d86:	07d6      	lsls	r6, r2, #31
 8004d88:	d528      	bpl.n	8004ddc <__sflush_r+0xb8>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	6062      	str	r2, [r4, #4]
 8004d8e:	04d9      	lsls	r1, r3, #19
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	d504      	bpl.n	8004da0 <__sflush_r+0x7c>
 8004d96:	1c42      	adds	r2, r0, #1
 8004d98:	d101      	bne.n	8004d9e <__sflush_r+0x7a>
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	b903      	cbnz	r3, 8004da0 <__sflush_r+0x7c>
 8004d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8004da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da2:	602f      	str	r7, [r5, #0]
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d0ca      	beq.n	8004d3e <__sflush_r+0x1a>
 8004da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dac:	4299      	cmp	r1, r3
 8004dae:	d002      	beq.n	8004db6 <__sflush_r+0x92>
 8004db0:	4628      	mov	r0, r5
 8004db2:	f000 f9e9 	bl	8005188 <_free_r>
 8004db6:	2000      	movs	r0, #0
 8004db8:	6360      	str	r0, [r4, #52]	; 0x34
 8004dba:	e7c1      	b.n	8004d40 <__sflush_r+0x1c>
 8004dbc:	6a21      	ldr	r1, [r4, #32]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	47b0      	blx	r6
 8004dc4:	1c41      	adds	r1, r0, #1
 8004dc6:	d1c7      	bne.n	8004d58 <__sflush_r+0x34>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0c4      	beq.n	8004d58 <__sflush_r+0x34>
 8004dce:	2b1d      	cmp	r3, #29
 8004dd0:	d001      	beq.n	8004dd6 <__sflush_r+0xb2>
 8004dd2:	2b16      	cmp	r3, #22
 8004dd4:	d101      	bne.n	8004dda <__sflush_r+0xb6>
 8004dd6:	602f      	str	r7, [r5, #0]
 8004dd8:	e7b1      	b.n	8004d3e <__sflush_r+0x1a>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	e7ad      	b.n	8004d40 <__sflush_r+0x1c>
 8004de4:	690f      	ldr	r7, [r1, #16]
 8004de6:	2f00      	cmp	r7, #0
 8004de8:	d0a9      	beq.n	8004d3e <__sflush_r+0x1a>
 8004dea:	0793      	lsls	r3, r2, #30
 8004dec:	680e      	ldr	r6, [r1, #0]
 8004dee:	bf08      	it	eq
 8004df0:	694b      	ldreq	r3, [r1, #20]
 8004df2:	600f      	str	r7, [r1, #0]
 8004df4:	bf18      	it	ne
 8004df6:	2300      	movne	r3, #0
 8004df8:	eba6 0807 	sub.w	r8, r6, r7
 8004dfc:	608b      	str	r3, [r1, #8]
 8004dfe:	f1b8 0f00 	cmp.w	r8, #0
 8004e02:	dd9c      	ble.n	8004d3e <__sflush_r+0x1a>
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e08:	4643      	mov	r3, r8
 8004e0a:	463a      	mov	r2, r7
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b0      	blx	r6
 8004e10:	2800      	cmp	r0, #0
 8004e12:	dc06      	bgt.n	8004e22 <__sflush_r+0xfe>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e20:	e78e      	b.n	8004d40 <__sflush_r+0x1c>
 8004e22:	4407      	add	r7, r0
 8004e24:	eba8 0800 	sub.w	r8, r8, r0
 8004e28:	e7e9      	b.n	8004dfe <__sflush_r+0xda>
 8004e2a:	bf00      	nop
 8004e2c:	20400001 	.word	0x20400001

08004e30 <_fflush_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	690b      	ldr	r3, [r1, #16]
 8004e34:	4605      	mov	r5, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b913      	cbnz	r3, 8004e40 <_fflush_r+0x10>
 8004e3a:	2500      	movs	r5, #0
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	b118      	cbz	r0, 8004e4a <_fflush_r+0x1a>
 8004e42:	6983      	ldr	r3, [r0, #24]
 8004e44:	b90b      	cbnz	r3, 8004e4a <_fflush_r+0x1a>
 8004e46:	f000 f887 	bl	8004f58 <__sinit>
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <_fflush_r+0x6c>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d11b      	bne.n	8004e88 <_fflush_r+0x58>
 8004e50:	686c      	ldr	r4, [r5, #4]
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <_fflush_r+0xa>
 8004e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e5c:	07d0      	lsls	r0, r2, #31
 8004e5e:	d404      	bmi.n	8004e6a <_fflush_r+0x3a>
 8004e60:	0599      	lsls	r1, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_fflush_r+0x3a>
 8004e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e66:	f000 f915 	bl	8005094 <__retarget_lock_acquire_recursive>
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7ff ff59 	bl	8004d24 <__sflush_r>
 8004e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e74:	07da      	lsls	r2, r3, #31
 8004e76:	4605      	mov	r5, r0
 8004e78:	d4e0      	bmi.n	8004e3c <_fflush_r+0xc>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d4dd      	bmi.n	8004e3c <_fflush_r+0xc>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f000 f908 	bl	8005096 <__retarget_lock_release_recursive>
 8004e86:	e7d9      	b.n	8004e3c <_fflush_r+0xc>
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <_fflush_r+0x70>)
 8004e8a:	429c      	cmp	r4, r3
 8004e8c:	d101      	bne.n	8004e92 <_fflush_r+0x62>
 8004e8e:	68ac      	ldr	r4, [r5, #8]
 8004e90:	e7df      	b.n	8004e52 <_fflush_r+0x22>
 8004e92:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <_fflush_r+0x74>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	bf08      	it	eq
 8004e98:	68ec      	ldreq	r4, [r5, #12]
 8004e9a:	e7da      	b.n	8004e52 <_fflush_r+0x22>
 8004e9c:	08005500 	.word	0x08005500
 8004ea0:	08005520 	.word	0x08005520
 8004ea4:	080054e0 	.word	0x080054e0

08004ea8 <std>:
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
 8004eae:	e9c0 3300 	strd	r3, r3, [r0]
 8004eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eb6:	6083      	str	r3, [r0, #8]
 8004eb8:	8181      	strh	r1, [r0, #12]
 8004eba:	6643      	str	r3, [r0, #100]	; 0x64
 8004ebc:	81c2      	strh	r2, [r0, #14]
 8004ebe:	6183      	str	r3, [r0, #24]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	305c      	adds	r0, #92	; 0x5c
 8004ec6:	f7ff fd9b 	bl	8004a00 <memset>
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <std+0x38>)
 8004ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <std+0x3c>)
 8004ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <std+0x40>)
 8004ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <std+0x44>)
 8004ed8:	6224      	str	r4, [r4, #32]
 8004eda:	6323      	str	r3, [r4, #48]	; 0x30
 8004edc:	bd10      	pop	{r4, pc}
 8004ede:	bf00      	nop
 8004ee0:	08004afd 	.word	0x08004afd
 8004ee4:	08004b1f 	.word	0x08004b1f
 8004ee8:	08004b57 	.word	0x08004b57
 8004eec:	08004b7b 	.word	0x08004b7b

08004ef0 <_cleanup_r>:
 8004ef0:	4901      	ldr	r1, [pc, #4]	; (8004ef8 <_cleanup_r+0x8>)
 8004ef2:	f000 b8af 	b.w	8005054 <_fwalk_reent>
 8004ef6:	bf00      	nop
 8004ef8:	08004e31 	.word	0x08004e31

08004efc <__sfmoreglue>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	2268      	movs	r2, #104	; 0x68
 8004f00:	1e4d      	subs	r5, r1, #1
 8004f02:	4355      	muls	r5, r2
 8004f04:	460e      	mov	r6, r1
 8004f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f0a:	f000 f9a9 	bl	8005260 <_malloc_r>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	b140      	cbz	r0, 8004f24 <__sfmoreglue+0x28>
 8004f12:	2100      	movs	r1, #0
 8004f14:	e9c0 1600 	strd	r1, r6, [r0]
 8004f18:	300c      	adds	r0, #12
 8004f1a:	60a0      	str	r0, [r4, #8]
 8004f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f20:	f7ff fd6e 	bl	8004a00 <memset>
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd70      	pop	{r4, r5, r6, pc}

08004f28 <__sfp_lock_acquire>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__sfp_lock_acquire+0x8>)
 8004f2a:	f000 b8b3 	b.w	8005094 <__retarget_lock_acquire_recursive>
 8004f2e:	bf00      	nop
 8004f30:	200134b8 	.word	0x200134b8

08004f34 <__sfp_lock_release>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__sfp_lock_release+0x8>)
 8004f36:	f000 b8ae 	b.w	8005096 <__retarget_lock_release_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	200134b8 	.word	0x200134b8

08004f40 <__sinit_lock_acquire>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__sinit_lock_acquire+0x8>)
 8004f42:	f000 b8a7 	b.w	8005094 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	200134b9 	.word	0x200134b9

08004f4c <__sinit_lock_release>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__sinit_lock_release+0x8>)
 8004f4e:	f000 b8a2 	b.w	8005096 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	200134b9 	.word	0x200134b9

08004f58 <__sinit>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	f7ff fff0 	bl	8004f40 <__sinit_lock_acquire>
 8004f60:	69a3      	ldr	r3, [r4, #24]
 8004f62:	b11b      	cbz	r3, 8004f6c <__sinit+0x14>
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f7ff bff0 	b.w	8004f4c <__sinit_lock_release>
 8004f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f70:	6523      	str	r3, [r4, #80]	; 0x50
 8004f72:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <__sinit+0x68>)
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <__sinit+0x6c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	bf04      	itt	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	61a3      	streq	r3, [r4, #24]
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 f820 	bl	8004fc8 <__sfp>
 8004f88:	6060      	str	r0, [r4, #4]
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f000 f81c 	bl	8004fc8 <__sfp>
 8004f90:	60a0      	str	r0, [r4, #8]
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f818 	bl	8004fc8 <__sfp>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	60e0      	str	r0, [r4, #12]
 8004f9c:	2104      	movs	r1, #4
 8004f9e:	6860      	ldr	r0, [r4, #4]
 8004fa0:	f7ff ff82 	bl	8004ea8 <std>
 8004fa4:	68a0      	ldr	r0, [r4, #8]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2109      	movs	r1, #9
 8004faa:	f7ff ff7d 	bl	8004ea8 <std>
 8004fae:	68e0      	ldr	r0, [r4, #12]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	2112      	movs	r1, #18
 8004fb4:	f7ff ff78 	bl	8004ea8 <std>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61a3      	str	r3, [r4, #24]
 8004fbc:	e7d2      	b.n	8004f64 <__sinit+0xc>
 8004fbe:	bf00      	nop
 8004fc0:	080054dc 	.word	0x080054dc
 8004fc4:	08004ef1 	.word	0x08004ef1

08004fc8 <__sfp>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	4607      	mov	r7, r0
 8004fcc:	f7ff ffac 	bl	8004f28 <__sfp_lock_acquire>
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	; (800504c <__sfp+0x84>)
 8004fd2:	681e      	ldr	r6, [r3, #0]
 8004fd4:	69b3      	ldr	r3, [r6, #24]
 8004fd6:	b913      	cbnz	r3, 8004fde <__sfp+0x16>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7ff ffbd 	bl	8004f58 <__sinit>
 8004fde:	3648      	adds	r6, #72	; 0x48
 8004fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	d503      	bpl.n	8004ff0 <__sfp+0x28>
 8004fe8:	6833      	ldr	r3, [r6, #0]
 8004fea:	b30b      	cbz	r3, 8005030 <__sfp+0x68>
 8004fec:	6836      	ldr	r6, [r6, #0]
 8004fee:	e7f7      	b.n	8004fe0 <__sfp+0x18>
 8004ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ff4:	b9d5      	cbnz	r5, 800502c <__sfp+0x64>
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <__sfp+0x88>)
 8004ff8:	60e3      	str	r3, [r4, #12]
 8004ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8005000:	f000 f847 	bl	8005092 <__retarget_lock_init_recursive>
 8005004:	f7ff ff96 	bl	8004f34 <__sfp_lock_release>
 8005008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800500c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005010:	6025      	str	r5, [r4, #0]
 8005012:	61a5      	str	r5, [r4, #24]
 8005014:	2208      	movs	r2, #8
 8005016:	4629      	mov	r1, r5
 8005018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800501c:	f7ff fcf0 	bl	8004a00 <memset>
 8005020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005028:	4620      	mov	r0, r4
 800502a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502c:	3468      	adds	r4, #104	; 0x68
 800502e:	e7d9      	b.n	8004fe4 <__sfp+0x1c>
 8005030:	2104      	movs	r1, #4
 8005032:	4638      	mov	r0, r7
 8005034:	f7ff ff62 	bl	8004efc <__sfmoreglue>
 8005038:	4604      	mov	r4, r0
 800503a:	6030      	str	r0, [r6, #0]
 800503c:	2800      	cmp	r0, #0
 800503e:	d1d5      	bne.n	8004fec <__sfp+0x24>
 8005040:	f7ff ff78 	bl	8004f34 <__sfp_lock_release>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	e7ee      	b.n	8005028 <__sfp+0x60>
 800504a:	bf00      	nop
 800504c:	080054dc 	.word	0x080054dc
 8005050:	ffff0001 	.word	0xffff0001

08005054 <_fwalk_reent>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	4606      	mov	r6, r0
 800505a:	4688      	mov	r8, r1
 800505c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005060:	2700      	movs	r7, #0
 8005062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005066:	f1b9 0901 	subs.w	r9, r9, #1
 800506a:	d505      	bpl.n	8005078 <_fwalk_reent+0x24>
 800506c:	6824      	ldr	r4, [r4, #0]
 800506e:	2c00      	cmp	r4, #0
 8005070:	d1f7      	bne.n	8005062 <_fwalk_reent+0xe>
 8005072:	4638      	mov	r0, r7
 8005074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005078:	89ab      	ldrh	r3, [r5, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d907      	bls.n	800508e <_fwalk_reent+0x3a>
 800507e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005082:	3301      	adds	r3, #1
 8005084:	d003      	beq.n	800508e <_fwalk_reent+0x3a>
 8005086:	4629      	mov	r1, r5
 8005088:	4630      	mov	r0, r6
 800508a:	47c0      	blx	r8
 800508c:	4307      	orrs	r7, r0
 800508e:	3568      	adds	r5, #104	; 0x68
 8005090:	e7e9      	b.n	8005066 <_fwalk_reent+0x12>

08005092 <__retarget_lock_init_recursive>:
 8005092:	4770      	bx	lr

08005094 <__retarget_lock_acquire_recursive>:
 8005094:	4770      	bx	lr

08005096 <__retarget_lock_release_recursive>:
 8005096:	4770      	bx	lr

08005098 <_lseek_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d07      	ldr	r5, [pc, #28]	; (80050b8 <_lseek_r+0x20>)
 800509c:	4604      	mov	r4, r0
 800509e:	4608      	mov	r0, r1
 80050a0:	4611      	mov	r1, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	602a      	str	r2, [r5, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f7fb f9b1 	bl	800040e <_lseek>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_lseek_r+0x1e>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_lseek_r+0x1e>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200134c4 	.word	0x200134c4

080050bc <__swhatbuf_r>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	460e      	mov	r6, r1
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	2900      	cmp	r1, #0
 80050c6:	b096      	sub	sp, #88	; 0x58
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	da08      	bge.n	80050e0 <__swhatbuf_r+0x24>
 80050ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	602a      	str	r2, [r5, #0]
 80050d6:	061a      	lsls	r2, r3, #24
 80050d8:	d410      	bmi.n	80050fc <__swhatbuf_r+0x40>
 80050da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050de:	e00e      	b.n	80050fe <__swhatbuf_r+0x42>
 80050e0:	466a      	mov	r2, sp
 80050e2:	f000 f953 	bl	800538c <_fstat_r>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	dbf1      	blt.n	80050ce <__swhatbuf_r+0x12>
 80050ea:	9a01      	ldr	r2, [sp, #4]
 80050ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050f4:	425a      	negs	r2, r3
 80050f6:	415a      	adcs	r2, r3
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	e7ee      	b.n	80050da <__swhatbuf_r+0x1e>
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	2000      	movs	r0, #0
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	b016      	add	sp, #88	; 0x58
 8005104:	bd70      	pop	{r4, r5, r6, pc}
	...

08005108 <__smakebuf_r>:
 8005108:	898b      	ldrh	r3, [r1, #12]
 800510a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800510c:	079d      	lsls	r5, r3, #30
 800510e:	4606      	mov	r6, r0
 8005110:	460c      	mov	r4, r1
 8005112:	d507      	bpl.n	8005124 <__smakebuf_r+0x1c>
 8005114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	2301      	movs	r3, #1
 800511e:	6163      	str	r3, [r4, #20]
 8005120:	b002      	add	sp, #8
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	ab01      	add	r3, sp, #4
 8005126:	466a      	mov	r2, sp
 8005128:	f7ff ffc8 	bl	80050bc <__swhatbuf_r>
 800512c:	9900      	ldr	r1, [sp, #0]
 800512e:	4605      	mov	r5, r0
 8005130:	4630      	mov	r0, r6
 8005132:	f000 f895 	bl	8005260 <_malloc_r>
 8005136:	b948      	cbnz	r0, 800514c <__smakebuf_r+0x44>
 8005138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513c:	059a      	lsls	r2, r3, #22
 800513e:	d4ef      	bmi.n	8005120 <__smakebuf_r+0x18>
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	f043 0302 	orr.w	r3, r3, #2
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	e7e3      	b.n	8005114 <__smakebuf_r+0xc>
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <__smakebuf_r+0x7c>)
 800514e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	6020      	str	r0, [r4, #0]
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	6163      	str	r3, [r4, #20]
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	6120      	str	r0, [r4, #16]
 8005162:	b15b      	cbz	r3, 800517c <__smakebuf_r+0x74>
 8005164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005168:	4630      	mov	r0, r6
 800516a:	f000 f921 	bl	80053b0 <_isatty_r>
 800516e:	b128      	cbz	r0, 800517c <__smakebuf_r+0x74>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	89a0      	ldrh	r0, [r4, #12]
 800517e:	4305      	orrs	r5, r0
 8005180:	81a5      	strh	r5, [r4, #12]
 8005182:	e7cd      	b.n	8005120 <__smakebuf_r+0x18>
 8005184:	08004ef1 	.word	0x08004ef1

08005188 <_free_r>:
 8005188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800518a:	2900      	cmp	r1, #0
 800518c:	d044      	beq.n	8005218 <_free_r+0x90>
 800518e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005192:	9001      	str	r0, [sp, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f1a1 0404 	sub.w	r4, r1, #4
 800519a:	bfb8      	it	lt
 800519c:	18e4      	addlt	r4, r4, r3
 800519e:	f000 f917 	bl	80053d0 <__malloc_lock>
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <_free_r+0x94>)
 80051a4:	9801      	ldr	r0, [sp, #4]
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	b933      	cbnz	r3, 80051b8 <_free_r+0x30>
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	6014      	str	r4, [r2, #0]
 80051ae:	b003      	add	sp, #12
 80051b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051b4:	f000 b912 	b.w	80053dc <__malloc_unlock>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d908      	bls.n	80051ce <_free_r+0x46>
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	1961      	adds	r1, r4, r5
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf01      	itttt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	1949      	addeq	r1, r1, r5
 80051ca:	6021      	streq	r1, [r4, #0]
 80051cc:	e7ed      	b.n	80051aa <_free_r+0x22>
 80051ce:	461a      	mov	r2, r3
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b10b      	cbz	r3, 80051d8 <_free_r+0x50>
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	d9fa      	bls.n	80051ce <_free_r+0x46>
 80051d8:	6811      	ldr	r1, [r2, #0]
 80051da:	1855      	adds	r5, r2, r1
 80051dc:	42a5      	cmp	r5, r4
 80051de:	d10b      	bne.n	80051f8 <_free_r+0x70>
 80051e0:	6824      	ldr	r4, [r4, #0]
 80051e2:	4421      	add	r1, r4
 80051e4:	1854      	adds	r4, r2, r1
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	6011      	str	r1, [r2, #0]
 80051ea:	d1e0      	bne.n	80051ae <_free_r+0x26>
 80051ec:	681c      	ldr	r4, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	6053      	str	r3, [r2, #4]
 80051f2:	4421      	add	r1, r4
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	e7da      	b.n	80051ae <_free_r+0x26>
 80051f8:	d902      	bls.n	8005200 <_free_r+0x78>
 80051fa:	230c      	movs	r3, #12
 80051fc:	6003      	str	r3, [r0, #0]
 80051fe:	e7d6      	b.n	80051ae <_free_r+0x26>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1961      	adds	r1, r4, r5
 8005204:	428b      	cmp	r3, r1
 8005206:	bf04      	itt	eq
 8005208:	6819      	ldreq	r1, [r3, #0]
 800520a:	685b      	ldreq	r3, [r3, #4]
 800520c:	6063      	str	r3, [r4, #4]
 800520e:	bf04      	itt	eq
 8005210:	1949      	addeq	r1, r1, r5
 8005212:	6021      	streq	r1, [r4, #0]
 8005214:	6054      	str	r4, [r2, #4]
 8005216:	e7ca      	b.n	80051ae <_free_r+0x26>
 8005218:	b003      	add	sp, #12
 800521a:	bd30      	pop	{r4, r5, pc}
 800521c:	200134bc 	.word	0x200134bc

08005220 <sbrk_aligned>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4e0e      	ldr	r6, [pc, #56]	; (800525c <sbrk_aligned+0x3c>)
 8005224:	460c      	mov	r4, r1
 8005226:	6831      	ldr	r1, [r6, #0]
 8005228:	4605      	mov	r5, r0
 800522a:	b911      	cbnz	r1, 8005232 <sbrk_aligned+0x12>
 800522c:	f000 f89e 	bl	800536c <_sbrk_r>
 8005230:	6030      	str	r0, [r6, #0]
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f899 	bl	800536c <_sbrk_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d00a      	beq.n	8005254 <sbrk_aligned+0x34>
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d007      	beq.n	8005258 <sbrk_aligned+0x38>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f88e 	bl	800536c <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d101      	bne.n	8005258 <sbrk_aligned+0x38>
 8005254:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	200134c0 	.word	0x200134c0

08005260 <_malloc_r>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	1ccd      	adds	r5, r1, #3
 8005266:	f025 0503 	bic.w	r5, r5, #3
 800526a:	3508      	adds	r5, #8
 800526c:	2d0c      	cmp	r5, #12
 800526e:	bf38      	it	cc
 8005270:	250c      	movcc	r5, #12
 8005272:	2d00      	cmp	r5, #0
 8005274:	4607      	mov	r7, r0
 8005276:	db01      	blt.n	800527c <_malloc_r+0x1c>
 8005278:	42a9      	cmp	r1, r5
 800527a:	d905      	bls.n	8005288 <_malloc_r+0x28>
 800527c:	230c      	movs	r3, #12
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	2600      	movs	r6, #0
 8005282:	4630      	mov	r0, r6
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	4e2e      	ldr	r6, [pc, #184]	; (8005344 <_malloc_r+0xe4>)
 800528a:	f000 f8a1 	bl	80053d0 <__malloc_lock>
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	461c      	mov	r4, r3
 8005292:	bb34      	cbnz	r4, 80052e2 <_malloc_r+0x82>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	f7ff ffc2 	bl	8005220 <sbrk_aligned>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	4604      	mov	r4, r0
 80052a0:	d14d      	bne.n	800533e <_malloc_r+0xde>
 80052a2:	6834      	ldr	r4, [r6, #0]
 80052a4:	4626      	mov	r6, r4
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d140      	bne.n	800532c <_malloc_r+0xcc>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	4631      	mov	r1, r6
 80052ae:	4638      	mov	r0, r7
 80052b0:	eb04 0803 	add.w	r8, r4, r3
 80052b4:	f000 f85a 	bl	800536c <_sbrk_r>
 80052b8:	4580      	cmp	r8, r0
 80052ba:	d13a      	bne.n	8005332 <_malloc_r+0xd2>
 80052bc:	6821      	ldr	r1, [r4, #0]
 80052be:	3503      	adds	r5, #3
 80052c0:	1a6d      	subs	r5, r5, r1
 80052c2:	f025 0503 	bic.w	r5, r5, #3
 80052c6:	3508      	adds	r5, #8
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	bf38      	it	cc
 80052cc:	250c      	movcc	r5, #12
 80052ce:	4629      	mov	r1, r5
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ffa5 	bl	8005220 <sbrk_aligned>
 80052d6:	3001      	adds	r0, #1
 80052d8:	d02b      	beq.n	8005332 <_malloc_r+0xd2>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	442b      	add	r3, r5
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	e00e      	b.n	8005300 <_malloc_r+0xa0>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	1b52      	subs	r2, r2, r5
 80052e6:	d41e      	bmi.n	8005326 <_malloc_r+0xc6>
 80052e8:	2a0b      	cmp	r2, #11
 80052ea:	d916      	bls.n	800531a <_malloc_r+0xba>
 80052ec:	1961      	adds	r1, r4, r5
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6025      	str	r5, [r4, #0]
 80052f2:	bf18      	it	ne
 80052f4:	6059      	strne	r1, [r3, #4]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	bf08      	it	eq
 80052fa:	6031      	streq	r1, [r6, #0]
 80052fc:	5162      	str	r2, [r4, r5]
 80052fe:	604b      	str	r3, [r1, #4]
 8005300:	4638      	mov	r0, r7
 8005302:	f104 060b 	add.w	r6, r4, #11
 8005306:	f000 f869 	bl	80053dc <__malloc_unlock>
 800530a:	f026 0607 	bic.w	r6, r6, #7
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	1af2      	subs	r2, r6, r3
 8005312:	d0b6      	beq.n	8005282 <_malloc_r+0x22>
 8005314:	1b9b      	subs	r3, r3, r6
 8005316:	50a3      	str	r3, [r4, r2]
 8005318:	e7b3      	b.n	8005282 <_malloc_r+0x22>
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	42a3      	cmp	r3, r4
 800531e:	bf0c      	ite	eq
 8005320:	6032      	streq	r2, [r6, #0]
 8005322:	605a      	strne	r2, [r3, #4]
 8005324:	e7ec      	b.n	8005300 <_malloc_r+0xa0>
 8005326:	4623      	mov	r3, r4
 8005328:	6864      	ldr	r4, [r4, #4]
 800532a:	e7b2      	b.n	8005292 <_malloc_r+0x32>
 800532c:	4634      	mov	r4, r6
 800532e:	6876      	ldr	r6, [r6, #4]
 8005330:	e7b9      	b.n	80052a6 <_malloc_r+0x46>
 8005332:	230c      	movs	r3, #12
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4638      	mov	r0, r7
 8005338:	f000 f850 	bl	80053dc <__malloc_unlock>
 800533c:	e7a1      	b.n	8005282 <_malloc_r+0x22>
 800533e:	6025      	str	r5, [r4, #0]
 8005340:	e7de      	b.n	8005300 <_malloc_r+0xa0>
 8005342:	bf00      	nop
 8005344:	200134bc 	.word	0x200134bc

08005348 <_read_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d07      	ldr	r5, [pc, #28]	; (8005368 <_read_r+0x20>)
 800534c:	4604      	mov	r4, r0
 800534e:	4608      	mov	r0, r1
 8005350:	4611      	mov	r1, r2
 8005352:	2200      	movs	r2, #0
 8005354:	602a      	str	r2, [r5, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7fb f815 	bl	8000386 <_read>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_read_r+0x1e>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_read_r+0x1e>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	200134c4 	.word	0x200134c4

0800536c <_sbrk_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d06      	ldr	r5, [pc, #24]	; (8005388 <_sbrk_r+0x1c>)
 8005370:	2300      	movs	r3, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	602b      	str	r3, [r5, #0]
 8005378:	f000 f836 	bl	80053e8 <_sbrk>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_sbrk_r+0x1a>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_sbrk_r+0x1a>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	200134c4 	.word	0x200134c4

0800538c <_fstat_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d07      	ldr	r5, [pc, #28]	; (80053ac <_fstat_r+0x20>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	f7fb f81d 	bl	80003d8 <_fstat>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d102      	bne.n	80053a8 <_fstat_r+0x1c>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	b103      	cbz	r3, 80053a8 <_fstat_r+0x1c>
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	bf00      	nop
 80053ac:	200134c4 	.word	0x200134c4

080053b0 <_isatty_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d06      	ldr	r5, [pc, #24]	; (80053cc <_isatty_r+0x1c>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fb f81c 	bl	80003f8 <_isatty>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_isatty_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_isatty_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	200134c4 	.word	0x200134c4

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f7ff be5f 	b.w	8005094 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	200134b7 	.word	0x200134b7

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f7ff be5a 	b.w	8005096 <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	200134b7 	.word	0x200134b7

080053e8 <_sbrk>:
 80053e8:	4a04      	ldr	r2, [pc, #16]	; (80053fc <_sbrk+0x14>)
 80053ea:	6811      	ldr	r1, [r2, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	b909      	cbnz	r1, 80053f4 <_sbrk+0xc>
 80053f0:	4903      	ldr	r1, [pc, #12]	; (8005400 <_sbrk+0x18>)
 80053f2:	6011      	str	r1, [r2, #0]
 80053f4:	6810      	ldr	r0, [r2, #0]
 80053f6:	4403      	add	r3, r0
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4770      	bx	lr
 80053fc:	200134c8 	.word	0x200134c8
 8005400:	200134d0 	.word	0x200134d0

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
