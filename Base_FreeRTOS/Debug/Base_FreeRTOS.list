
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800ae48  0800ae48  0001ae48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b298  0800b298  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b298  0800b298  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b298  0800b298  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b29c  0800b29c  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013084  20000088  0800b328  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001310c  0800b328  0002310c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be89  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002298  00000000  00000000  0002bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011be5  00000000  00000000  0002f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb9f  00000000  00000000  000411bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006071c  00000000  00000000  0004dd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000ae4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae2c 	.word	0x0800ae2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800ae2c 	.word	0x0800ae2c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <main>:
PID_Parameters_t parameter_PID_distace = {0};        //estructura para los parametros del PID
/// Variables para Odometria
Parameters_Position_t parameters_Pos_Robot = {0}; 	//Estructura que almacena la posicion del robot

int main(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000bee:	4b5e      	ldr	r3, [pc, #376]	; (8000d68 <main+0x180>)
 8000bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf4:	4a5c      	ldr	r2, [pc, #368]	; (8000d68 <main+0x180>)
 8000bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000bfe:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <main+0x184>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a5a      	ldr	r2, [pc, #360]	; (8000d6c <main+0x184>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


	inSystem ();
 8000c0a:	f000 f8d3 	bl	8000db4 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, 'z');
 8000c0e:	217a      	movs	r1, #122	; 0x7a
 8000c10:	4857      	ldr	r0, [pc, #348]	; (8000d70 <main+0x188>)
 8000c12:	f000 fe75 	bl	8001900 <calibracionGyros>
 8000c16:	ee10 3a10 	vmov	r3, s0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fc44 	bl	80004a8 <__aeabi_f2d>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4953      	ldr	r1, [pc, #332]	; (8000d74 <main+0x18c>)
 8000c26:	e9c1 2300 	strd	r2, r3, [r1]

	xReturned = xTaskCreate(
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <main+0x190>)
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2303      	movs	r3, #3
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	22c8      	movs	r2, #200	; 0xc8
 8000c36:	4951      	ldr	r1, [pc, #324]	; (8000d7c <main+0x194>)
 8000c38:	4851      	ldr	r0, [pc, #324]	; (8000d80 <main+0x198>)
 8000c3a:	f001 fdbd 	bl	80027b8 <xTaskCreate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a50      	ldr	r2, [pc, #320]	; (8000d84 <main+0x19c>)
 8000c42:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
						&xHandleTask_Menu );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000c44:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <main+0x19c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d00a      	beq.n	8000c62 <main+0x7a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c50:	f383 8811 	msr	BASEPRI, r3
 8000c54:	f3bf 8f6f 	isb	sy
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c5e:	bf00      	nop
 8000c60:	e7fe      	b.n	8000c60 <main+0x78>

	xReturned = xTaskCreate(
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <main+0x1a0>)
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	2302      	movs	r3, #2
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	22c8      	movs	r2, #200	; 0xc8
 8000c6e:	4947      	ldr	r1, [pc, #284]	; (8000d8c <main+0x1a4>)
 8000c70:	4847      	ldr	r0, [pc, #284]	; (8000d90 <main+0x1a8>)
 8000c72:	f001 fda1 	bl	80027b8 <xTaskCreate>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <main+0x19c>)
 8000c7a:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						2,/* Priority at which the task is created. */
						&xHandleTask_Print );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000c7c:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <main+0x19c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d00a      	beq.n	8000c9a <main+0xb2>
        __asm volatile
 8000c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	613b      	str	r3, [r7, #16]
    }
 8000c96:	bf00      	nop
 8000c98:	e7fe      	b.n	8000c98 <main+0xb0>


	xReturned = xTaskCreate(
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <main+0x1ac>)
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	22c8      	movs	r2, #200	; 0xc8
 8000ca6:	493c      	ldr	r1, [pc, #240]	; (8000d98 <main+0x1b0>)
 8000ca8:	483c      	ldr	r0, [pc, #240]	; (8000d9c <main+0x1b4>)
 8000caa:	f001 fd85 	bl	80027b8 <xTaskCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a34      	ldr	r2, [pc, #208]	; (8000d84 <main+0x19c>)
 8000cb2:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
						&xHandleTask_Commands );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <main+0x19c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d00a      	beq.n	8000cd2 <main+0xea>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	60fb      	str	r3, [r7, #12]
    }
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <main+0xe8>

	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(10,sizeof(char));
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 f822 	bl	8001d20 <xQueueGenericCreate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a30      	ldr	r2, [pc, #192]	; (8000da0 <main+0x1b8>)
 8000ce0:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <main+0x1b8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10a      	bne.n	8000d00 <main+0x118>
        __asm volatile
 8000cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cee:	f383 8811 	msr	BASEPRI, r3
 8000cf2:	f3bf 8f6f 	isb	sy
 8000cf6:	f3bf 8f4f 	dsb	sy
 8000cfa:	60bb      	str	r3, [r7, #8]
    }
 8000cfc:	bf00      	nop
 8000cfe:	e7fe      	b.n	8000cfe <main+0x116>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000d00:	2200      	movs	r2, #0
 8000d02:	2104      	movs	r1, #4
 8000d04:	200a      	movs	r0, #10
 8000d06:	f001 f80b 	bl	8001d20 <xQueueGenericCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <main+0x1bc>)
 8000d0e:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <main+0x1bc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10a      	bne.n	8000d2e <main+0x146>
        __asm volatile
 8000d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1c:	f383 8811 	msr	BASEPRI, r3
 8000d20:	f3bf 8f6f 	isb	sy
 8000d24:	f3bf 8f4f 	dsb	sy
 8000d28:	607b      	str	r3, [r7, #4]
    }
 8000d2a:	bf00      	nop
 8000d2c:	e7fe      	b.n	8000d2c <main+0x144>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <main+0x1c0>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d3a:	481c      	ldr	r0, [pc, #112]	; (8000dac <main+0x1c4>)
 8000d3c:	f002 fe12 	bl	8003964 <xTimerCreate>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <main+0x1c8>)
 8000d44:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <main+0x1c8>)
 8000d48:	681c      	ldr	r4, [r3, #0]
 8000d4a:	f001 ff77 	bl	8002c3c <xTaskGetTickCount>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f002 fe5e 	bl	8003a1c <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000d60:	f001 fe70 	bl	8002a44 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000d64:	e7fe      	b.n	8000d64 <main+0x17c>
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	e0001000 	.word	0xe0001000
 8000d70:	20000260 	.word	0x20000260
 8000d74:	200002d0 	.word	0x200002d0
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	0800af2c 	.word	0x0800af2c
 8000d80:	08001231 	.word	0x08001231
 8000d84:	200000a4 	.word	0x200000a4
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	0800af38 	.word	0x0800af38
 8000d90:	080013c1 	.word	0x080013c1
 8000d94:	200000b0 	.word	0x200000b0
 8000d98:	0800af44 	.word	0x0800af44
 8000d9c:	08001381 	.word	0x08001381
 8000da0:	200000b8 	.word	0x200000b8
 8000da4:	200000b4 	.word	0x200000b4
 8000da8:	08001a79 	.word	0x08001a79
 8000dac:	0800af54 	.word	0x0800af54
 8000db0:	200000bc 	.word	0x200000bc

08000db4 <inSystem>:

	}
}


void inSystem (void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0


	//Descripcion de la configuracion

	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000db8:	2008      	movs	r0, #8
 8000dba:	f006 fad7 	bl	800736c <RCC_enableMaxFrequencies>

//	//BLINKY LED
	handlerPinA5.pGPIOx = GPIOA;
 8000dbe:	4bb1      	ldr	r3, [pc, #708]	; (8001084 <inSystem+0x2d0>)
 8000dc0:	4ab1      	ldr	r2, [pc, #708]	; (8001088 <inSystem+0x2d4>)
 8000dc2:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000dc4:	4baf      	ldr	r3, [pc, #700]	; (8001084 <inSystem+0x2d0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000dca:	4bae      	ldr	r3, [pc, #696]	; (8001084 <inSystem+0x2d0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000dd0:	4bac      	ldr	r3, [pc, #688]	; (8001084 <inSystem+0x2d0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000dd6:	4bab      	ldr	r3, [pc, #684]	; (8001084 <inSystem+0x2d0>)
 8000dd8:	2205      	movs	r2, #5
 8000dda:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ddc:	4ba9      	ldr	r3, [pc, #676]	; (8001084 <inSystem+0x2d0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000de2:	4ba8      	ldr	r3, [pc, #672]	; (8001084 <inSystem+0x2d0>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000de8:	48a6      	ldr	r0, [pc, #664]	; (8001084 <inSystem+0x2d0>)
 8000dea:	f005 fa0f 	bl	800620c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, RESET);
 8000dee:	2100      	movs	r1, #0
 8000df0:	48a4      	ldr	r0, [pc, #656]	; (8001084 <inSystem+0x2d0>)
 8000df2:	f005 fb35 	bl	8006460 <GPIO_WritePin>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


		//PWM
		// PWM motor 1
		handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000df6:	4ba5      	ldr	r3, [pc, #660]	; (800108c <inSystem+0x2d8>)
 8000df8:	4aa3      	ldr	r2, [pc, #652]	; (8001088 <inSystem+0x2d4>)
 8000dfa:	601a      	str	r2, [r3, #0]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000dfc:	4ba3      	ldr	r3, [pc, #652]	; (800108c <inSystem+0x2d8>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	725a      	strb	r2, [r3, #9]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e02:	4ba2      	ldr	r3, [pc, #648]	; (800108c <inSystem+0x2d8>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	715a      	strb	r2, [r3, #5]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e08:	4ba0      	ldr	r3, [pc, #640]	; (800108c <inSystem+0x2d8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	721a      	strb	r2, [r3, #8]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000e0e:	4b9f      	ldr	r3, [pc, #636]	; (800108c <inSystem+0x2d8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	711a      	strb	r2, [r3, #4]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e14:	4b9d      	ldr	r3, [pc, #628]	; (800108c <inSystem+0x2d8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	71da      	strb	r2, [r3, #7]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000e1a:	4b9c      	ldr	r3, [pc, #624]	; (800108c <inSystem+0x2d8>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerPinPwm_1);
 8000e20:	489a      	ldr	r0, [pc, #616]	; (800108c <inSystem+0x2d8>)
 8000e22:	f005 f9f3 	bl	800620c <GPIO_Config>

		handlerPWM_1.ptrTIMx            = TIM5;
 8000e26:	4b9a      	ldr	r3, [pc, #616]	; (8001090 <inSystem+0x2dc>)
 8000e28:	4a9a      	ldr	r2, [pc, #616]	; (8001094 <inSystem+0x2e0>)
 8000e2a:	601a      	str	r2, [r3, #0]
		handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000e2c:	4b98      	ldr	r3, [pc, #608]	; (8001090 <inSystem+0x2dc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	711a      	strb	r2, [r3, #4]
		handlerPWM_1.config.duttyCicle  = 0;
 8000e32:	4b97      	ldr	r3, [pc, #604]	; (8001090 <inSystem+0x2dc>)
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
	//	counter = 50;
		handlerPWM_1.config.periodo     = 40; // se maneja 25 hz por testeo
 8000e3a:	4b95      	ldr	r3, [pc, #596]	; (8001090 <inSystem+0x2dc>)
 8000e3c:	2228      	movs	r2, #40	; 0x28
 8000e3e:	819a      	strh	r2, [r3, #12]
		handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000e40:	4b93      	ldr	r3, [pc, #588]	; (8001090 <inSystem+0x2dc>)
 8000e42:	2264      	movs	r2, #100	; 0x64
 8000e44:	609a      	str	r2, [r3, #8]
		handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000e46:	4b92      	ldr	r3, [pc, #584]	; (8001090 <inSystem+0x2dc>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	751a      	strb	r2, [r3, #20]
		handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000e4c:	4b90      	ldr	r3, [pc, #576]	; (8001090 <inSystem+0x2dc>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	755a      	strb	r2, [r3, #21]
		pwm_Config(&handlerPWM_1);
 8000e52:	488f      	ldr	r0, [pc, #572]	; (8001090 <inSystem+0x2dc>)
 8000e54:	f005 feb2 	bl	8006bbc <pwm_Config>
		startPwmSignal(&handlerPWM_1);
 8000e58:	488d      	ldr	r0, [pc, #564]	; (8001090 <inSystem+0x2dc>)
 8000e5a:	f005 ff99 	bl	8006d90 <startPwmSignal>

		//PWM motor 2
		handlerPinPwm_2.pGPIOx                             = GPIOA;
 8000e5e:	4b8e      	ldr	r3, [pc, #568]	; (8001098 <inSystem+0x2e4>)
 8000e60:	4a89      	ldr	r2, [pc, #548]	; (8001088 <inSystem+0x2d4>)
 8000e62:	601a      	str	r2, [r3, #0]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000e64:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <inSystem+0x2e4>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	725a      	strb	r2, [r3, #9]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <inSystem+0x2e4>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	715a      	strb	r2, [r3, #5]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e70:	4b89      	ldr	r3, [pc, #548]	; (8001098 <inSystem+0x2e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	721a      	strb	r2, [r3, #8]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000e76:	4b88      	ldr	r3, [pc, #544]	; (8001098 <inSystem+0x2e4>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e7c:	4b86      	ldr	r3, [pc, #536]	; (8001098 <inSystem+0x2e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	71da      	strb	r2, [r3, #7]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000e82:	4b85      	ldr	r3, [pc, #532]	; (8001098 <inSystem+0x2e4>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerPinPwm_2);
 8000e88:	4883      	ldr	r0, [pc, #524]	; (8001098 <inSystem+0x2e4>)
 8000e8a:	f005 f9bf 	bl	800620c <GPIO_Config>

		handlerPWM_2.ptrTIMx            = TIM5;
 8000e8e:	4b83      	ldr	r3, [pc, #524]	; (800109c <inSystem+0x2e8>)
 8000e90:	4a80      	ldr	r2, [pc, #512]	; (8001094 <inSystem+0x2e0>)
 8000e92:	601a      	str	r2, [r3, #0]
		handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8000e94:	4b81      	ldr	r3, [pc, #516]	; (800109c <inSystem+0x2e8>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	711a      	strb	r2, [r3, #4]
		handlerPWM_2.config.duttyCicle  = 0;
 8000e9a:	4b80      	ldr	r3, [pc, #512]	; (800109c <inSystem+0x2e8>)
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
		handlerPWM_2.config.periodo     = 40;// se maneja 25 hz por testeo
 8000ea2:	4b7e      	ldr	r3, [pc, #504]	; (800109c <inSystem+0x2e8>)
 8000ea4:	2228      	movs	r2, #40	; 0x28
 8000ea6:	819a      	strh	r2, [r3, #12]
		handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000ea8:	4b7c      	ldr	r3, [pc, #496]	; (800109c <inSystem+0x2e8>)
 8000eaa:	2264      	movs	r2, #100	; 0x64
 8000eac:	609a      	str	r2, [r3, #8]
		handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8000eae:	4b7b      	ldr	r3, [pc, #492]	; (800109c <inSystem+0x2e8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
		handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000eb4:	4b79      	ldr	r3, [pc, #484]	; (800109c <inSystem+0x2e8>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	755a      	strb	r2, [r3, #21]
		pwm_Config(&handlerPWM_2);
 8000eba:	4878      	ldr	r0, [pc, #480]	; (800109c <inSystem+0x2e8>)
 8000ebc:	f005 fe7e 	bl	8006bbc <pwm_Config>
		startPwmSignal(&handlerPWM_2);
 8000ec0:	4876      	ldr	r0, [pc, #472]	; (800109c <inSystem+0x2e8>)
 8000ec2:	f005 ff65 	bl	8006d90 <startPwmSignal>

		////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



		handlerEn1PinC10.pGPIOx                             = GPIOC;
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <inSystem+0x2ec>)
 8000ec8:	4a76      	ldr	r2, [pc, #472]	; (80010a4 <inSystem+0x2f0>)
 8000eca:	601a      	str	r2, [r3, #0]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000ecc:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <inSystem+0x2ec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	725a      	strb	r2, [r3, #9]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <inSystem+0x2ec>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	715a      	strb	r2, [r3, #5]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8000ed8:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <inSystem+0x2ec>)
 8000eda:	220a      	movs	r2, #10
 8000edc:	711a      	strb	r2, [r3, #4]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ede:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <inSystem+0x2ec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	721a      	strb	r2, [r3, #8]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <inSystem+0x2ec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	71da      	strb	r2, [r3, #7]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000eea:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <inSystem+0x2ec>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerEn1PinC10);
 8000ef0:	486b      	ldr	r0, [pc, #428]	; (80010a0 <inSystem+0x2ec>)
 8000ef2:	f005 f98b 	bl	800620c <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4869      	ldr	r0, [pc, #420]	; (80010a0 <inSystem+0x2ec>)
 8000efa:	f005 fadc 	bl	80064b6 <GPIO_WritePin_Afopt>

		handlerEn2PinC11.pGPIOx                             = GPIOC;
 8000efe:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <inSystem+0x2f4>)
 8000f00:	4a68      	ldr	r2, [pc, #416]	; (80010a4 <inSystem+0x2f0>)
 8000f02:	601a      	str	r2, [r3, #0]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <inSystem+0x2f4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	725a      	strb	r2, [r3, #9]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <inSystem+0x2f4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	715a      	strb	r2, [r3, #5]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8000f10:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <inSystem+0x2f4>)
 8000f12:	220b      	movs	r2, #11
 8000f14:	711a      	strb	r2, [r3, #4]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f16:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <inSystem+0x2f4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	721a      	strb	r2, [r3, #8]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f1c:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <inSystem+0x2f4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	71da      	strb	r2, [r3, #7]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f22:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <inSystem+0x2f4>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerEn2PinC11);
 8000f28:	485f      	ldr	r0, [pc, #380]	; (80010a8 <inSystem+0x2f4>)
 8000f2a:	f005 f96f 	bl	800620c <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	485d      	ldr	r0, [pc, #372]	; (80010a8 <inSystem+0x2f4>)
 8000f32:	f005 fac0 	bl	80064b6 <GPIO_WritePin_Afopt>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

		handlerIn1PinC12.pGPIOx                             = GPIOC;
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <inSystem+0x2f8>)
 8000f38:	4a5a      	ldr	r2, [pc, #360]	; (80010a4 <inSystem+0x2f0>)
 8000f3a:	601a      	str	r2, [r3, #0]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <inSystem+0x2f8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	725a      	strb	r2, [r3, #9]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <inSystem+0x2f8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	715a      	strb	r2, [r3, #5]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8000f48:	4b58      	ldr	r3, [pc, #352]	; (80010ac <inSystem+0x2f8>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	711a      	strb	r2, [r3, #4]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <inSystem+0x2f8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	721a      	strb	r2, [r3, #8]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f54:	4b55      	ldr	r3, [pc, #340]	; (80010ac <inSystem+0x2f8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	71da      	strb	r2, [r3, #7]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <inSystem+0x2f8>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerIn1PinC12);
 8000f60:	4852      	ldr	r0, [pc, #328]	; (80010ac <inSystem+0x2f8>)
 8000f62:	f005 f953 	bl	800620c <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 8000f66:	2100      	movs	r1, #0
 8000f68:	4850      	ldr	r0, [pc, #320]	; (80010ac <inSystem+0x2f8>)
 8000f6a:	f005 faa4 	bl	80064b6 <GPIO_WritePin_Afopt>

		handlerIn2PinD2.pGPIOx                             = GPIOD;
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <inSystem+0x2fc>)
 8000f70:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <inSystem+0x300>)
 8000f72:	601a      	str	r2, [r3, #0]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000f74:	4b4e      	ldr	r3, [pc, #312]	; (80010b0 <inSystem+0x2fc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	725a      	strb	r2, [r3, #9]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <inSystem+0x2fc>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	715a      	strb	r2, [r3, #5]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <inSystem+0x2fc>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	711a      	strb	r2, [r3, #4]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <inSystem+0x2fc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	721a      	strb	r2, [r3, #8]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f8c:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <inSystem+0x2fc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	71da      	strb	r2, [r3, #7]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <inSystem+0x2fc>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerIn2PinD2);
 8000f98:	4845      	ldr	r0, [pc, #276]	; (80010b0 <inSystem+0x2fc>)
 8000f9a:	f005 f937 	bl	800620c <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4843      	ldr	r0, [pc, #268]	; (80010b0 <inSystem+0x2fc>)
 8000fa2:	f005 fa88 	bl	80064b6 <GPIO_WritePin_Afopt>
		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


		handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <inSystem+0x304>)
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <inSystem+0x2f0>)
 8000faa:	601a      	str	r2, [r3, #0]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <inSystem+0x304>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	725a      	strb	r2, [r3, #9]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <inSystem+0x304>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	715a      	strb	r2, [r3, #5]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <inSystem+0x304>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	711a      	strb	r2, [r3, #4]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <inSystem+0x304>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	721a      	strb	r2, [r3, #8]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fc4:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <inSystem+0x304>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	71da      	strb	r2, [r3, #7]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <inSystem+0x304>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	719a      	strb	r2, [r3, #6]
		handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <inSystem+0x308>)
 8000fd2:	4a39      	ldr	r2, [pc, #228]	; (80010b8 <inSystem+0x304>)
 8000fd4:	601a      	str	r2, [r3, #0]
		handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <inSystem+0x308>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	711a      	strb	r2, [r3, #4]
		extInt_Config(&handlerExtiConEnc_1);
 8000fdc:	4837      	ldr	r0, [pc, #220]	; (80010bc <inSystem+0x308>)
 8000fde:	f004 f8d7 	bl	8005190 <extInt_Config>

		handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <inSystem+0x30c>)
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <inSystem+0x2f0>)
 8000fe6:	601a      	str	r2, [r3, #0]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <inSystem+0x30c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	725a      	strb	r2, [r3, #9]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <inSystem+0x30c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	715a      	strb	r2, [r3, #5]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <inSystem+0x30c>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	711a      	strb	r2, [r3, #4]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <inSystem+0x30c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	721a      	strb	r2, [r3, #8]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <inSystem+0x30c>)
 8001002:	2200      	movs	r2, #0
 8001004:	71da      	strb	r2, [r3, #7]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <inSystem+0x30c>)
 8001008:	2202      	movs	r2, #2
 800100a:	719a      	strb	r2, [r3, #6]
		handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <inSystem+0x310>)
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <inSystem+0x30c>)
 8001010:	601a      	str	r2, [r3, #0]
		handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <inSystem+0x310>)
 8001014:	2202      	movs	r2, #2
 8001016:	711a      	strb	r2, [r3, #4]
		extInt_Config(&handlerExtiConEnc_2);
 8001018:	482a      	ldr	r0, [pc, #168]	; (80010c4 <inSystem+0x310>)
 800101a:	f004 f8b9 	bl	8005190 <extInt_Config>

		///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


		//USART 2 Comunicacion serial
		handlerUSART_RX.pGPIOx = GPIOA;
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <inSystem+0x314>)
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <inSystem+0x2d4>)
 8001022:	601a      	str	r2, [r3, #0]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <inSystem+0x314>)
 8001026:	2207      	movs	r2, #7
 8001028:	725a      	strb	r2, [r3, #9]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <inSystem+0x314>)
 800102c:	2202      	movs	r2, #2
 800102e:	715a      	strb	r2, [r3, #5]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <inSystem+0x314>)
 8001032:	2200      	movs	r2, #0
 8001034:	721a      	strb	r2, [r3, #8]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <inSystem+0x314>)
 8001038:	2203      	movs	r2, #3
 800103a:	711a      	strb	r2, [r3, #4]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <inSystem+0x314>)
 800103e:	2200      	movs	r2, #0
 8001040:	71da      	strb	r2, [r3, #7]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <inSystem+0x314>)
 8001044:	2202      	movs	r2, #2
 8001046:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerUSART_RX);
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <inSystem+0x314>)
 800104a:	f005 f8df 	bl	800620c <GPIO_Config>


		handlerUSART_TX.pGPIOx = GPIOA;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <inSystem+0x318>)
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <inSystem+0x2d4>)
 8001052:	601a      	str	r2, [r3, #0]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <inSystem+0x318>)
 8001056:	2207      	movs	r2, #7
 8001058:	725a      	strb	r2, [r3, #9]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <inSystem+0x318>)
 800105c:	2202      	movs	r2, #2
 800105e:	715a      	strb	r2, [r3, #5]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <inSystem+0x318>)
 8001062:	2200      	movs	r2, #0
 8001064:	721a      	strb	r2, [r3, #8]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <inSystem+0x318>)
 8001068:	2202      	movs	r2, #2
 800106a:	711a      	strb	r2, [r3, #4]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <inSystem+0x318>)
 800106e:	2200      	movs	r2, #0
 8001070:	71da      	strb	r2, [r3, #7]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <inSystem+0x318>)
 8001074:	2202      	movs	r2, #2
 8001076:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerUSART_TX);
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <inSystem+0x318>)
 800107a:	f005 f8c7 	bl	800620c <GPIO_Config>

		handlerUSART2.ptrUSARTx                      = USART2;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <inSystem+0x31c>)
 8001080:	e028      	b.n	80010d4 <inSystem+0x320>
 8001082:	bf00      	nop
 8001084:	200000c0 	.word	0x200000c0
 8001088:	40020000 	.word	0x40020000
 800108c:	20000178 	.word	0x20000178
 8001090:	20000228 	.word	0x20000228
 8001094:	40000c00 	.word	0x40000c00
 8001098:	20000184 	.word	0x20000184
 800109c:	20000240 	.word	0x20000240
 80010a0:	2000019c 	.word	0x2000019c
 80010a4:	40020800 	.word	0x40020800
 80010a8:	20000190 	.word	0x20000190
 80010ac:	200001b4 	.word	0x200001b4
 80010b0:	200001a8 	.word	0x200001a8
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	200001c0 	.word	0x200001c0
 80010bc:	200001f0 	.word	0x200001f0
 80010c0:	200001cc 	.word	0x200001cc
 80010c4:	200001f8 	.word	0x200001f8
 80010c8:	200000cc 	.word	0x200000cc
 80010cc:	200000d8 	.word	0x200000d8
 80010d0:	200000e4 	.word	0x200000e4
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <inSystem+0x44c>)
 80010d6:	601a      	str	r2, [r3, #0]
		handlerUSART2.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80010d8:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <inSystem+0x450>)
 80010da:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <inSystem+0x454>)
 80010dc:	60da      	str	r2, [r3, #12]
		handlerUSART2.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80010de:	4b49      	ldr	r3, [pc, #292]	; (8001204 <inSystem+0x450>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	71da      	strb	r2, [r3, #7]
		handlerUSART2.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80010e4:	4b47      	ldr	r3, [pc, #284]	; (8001204 <inSystem+0x450>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	715a      	strb	r2, [r3, #5]
		handlerUSART2.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <inSystem+0x450>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	711a      	strb	r2, [r3, #4]
		handlerUSART2.USART_Config.USART_mode        = USART_MODE_RXTX;
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <inSystem+0x450>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	719a      	strb	r2, [r3, #6]
		handlerUSART2.USART_Config.USART_parity      = USART_PARITY_NONE;
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <inSystem+0x450>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	725a      	strb	r2, [r3, #9]
		handlerUSART2.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <inSystem+0x450>)
 80010fe:	2200      	movs	r2, #0
 8001100:	729a      	strb	r2, [r3, #10]
		handlerUSART2.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <inSystem+0x450>)
 8001104:	2200      	movs	r2, #0
 8001106:	721a      	strb	r2, [r3, #8]
		USART_Config(&handlerUSART2);
 8001108:	483e      	ldr	r0, [pc, #248]	; (8001204 <inSystem+0x450>)
 800110a:	f006 fcab 	bl	8007a64 <USART_Config>
		usart_Set_Priority(&handlerUSART2, e_USART_PRIORITY_6);
 800110e:	2106      	movs	r1, #6
 8001110:	483c      	ldr	r0, [pc, #240]	; (8001204 <inSystem+0x450>)
 8001112:	f007 f94d 	bl	80083b0 <usart_Set_Priority>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		///////////////////////////////////////////Timer para el control de la Distancia y la velocidad//////////////////////////////////////////////

		handlerTIM2_vel.ptrTIMx                           = TIM2;
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <inSystem+0x458>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111c:	601a      	str	r2, [r3, #0]
		handlerTIM2_vel.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <inSystem+0x458>)
 8001120:	2201      	movs	r2, #1
 8001122:	741a      	strb	r2, [r3, #16]
		handlerTIM2_vel.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <inSystem+0x458>)
 8001126:	2200      	movs	r2, #0
 8001128:	711a      	strb	r2, [r3, #4]
		handlerTIM2_vel.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <inSystem+0x458>)
 800112c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001130:	609a      	str	r2, [r3, #8]
		handlerTIM2_vel.TIMx_Config.TIMx_period           = 16;
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <inSystem+0x458>)
 8001134:	2210      	movs	r2, #16
 8001136:	60da      	str	r2, [r3, #12]
		BasicTimer_Config(&handlerTIM2_vel);
 8001138:	4834      	ldr	r0, [pc, #208]	; (800120c <inSystem+0x458>)
 800113a:	f003 fbe5 	bl	8004908 <BasicTimer_Config>
		TIM_SetPriority(&handlerTIM2_vel, e_TIM_PRIORITY_6);
 800113e:	2106      	movs	r1, #6
 8001140:	4832      	ldr	r0, [pc, #200]	; (800120c <inSystem+0x458>)
 8001142:	f003 fd5b 	bl	8004bfc <TIM_SetPriority>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

		handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <inSystem+0x45c>)
 8001148:	4a32      	ldr	r2, [pc, #200]	; (8001214 <inSystem+0x460>)
 800114a:	601a      	str	r2, [r3, #0]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <inSystem+0x45c>)
 800114e:	2204      	movs	r2, #4
 8001150:	725a      	strb	r2, [r3, #9]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <inSystem+0x45c>)
 8001154:	2202      	movs	r2, #2
 8001156:	715a      	strb	r2, [r3, #5]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <inSystem+0x45c>)
 800115a:	2208      	movs	r2, #8
 800115c:	711a      	strb	r2, [r3, #4]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <inSystem+0x45c>)
 8001160:	2201      	movs	r2, #1
 8001162:	721a      	strb	r2, [r3, #8]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <inSystem+0x45c>)
 8001166:	2200      	movs	r2, #0
 8001168:	71da      	strb	r2, [r3, #7]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <inSystem+0x45c>)
 800116c:	2203      	movs	r2, #3
 800116e:	719a      	strb	r2, [r3, #6]

		handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <inSystem+0x464>)
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <inSystem+0x460>)
 8001174:	601a      	str	r2, [r3, #0]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <inSystem+0x464>)
 8001178:	2204      	movs	r2, #4
 800117a:	725a      	strb	r2, [r3, #9]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <inSystem+0x464>)
 800117e:	2202      	movs	r2, #2
 8001180:	715a      	strb	r2, [r3, #5]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <inSystem+0x464>)
 8001184:	2209      	movs	r2, #9
 8001186:	711a      	strb	r2, [r3, #4]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <inSystem+0x464>)
 800118a:	2201      	movs	r2, #1
 800118c:	721a      	strb	r2, [r3, #8]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <inSystem+0x464>)
 8001190:	2200      	movs	r2, #0
 8001192:	71da      	strb	r2, [r3, #7]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <inSystem+0x464>)
 8001196:	2203      	movs	r2, #3
 8001198:	719a      	strb	r2, [r3, #6]

		handler_I2C1.ptrI2Cx = I2C1;
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <inSystem+0x468>)
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <inSystem+0x46c>)
 800119e:	601a      	str	r2, [r3, #0]
		handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <inSystem+0x468>)
 80011a2:	2232      	movs	r2, #50	; 0x32
 80011a4:	71da      	strb	r2, [r3, #7]
		handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <inSystem+0x468>)
 80011a8:	2268      	movs	r2, #104	; 0x68
 80011aa:	711a      	strb	r2, [r3, #4]
		handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <inSystem+0x468>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	715a      	strb	r2, [r3, #5]

		handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <inSystem+0x470>)
 80011b4:	4a16      	ldr	r2, [pc, #88]	; (8001210 <inSystem+0x45c>)
 80011b6:	605a      	str	r2, [r3, #4]
		handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <inSystem+0x470>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <inSystem+0x464>)
 80011bc:	609a      	str	r2, [r3, #8]
		handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <inSystem+0x470>)
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <inSystem+0x468>)
 80011c2:	60da      	str	r2, [r3, #12]
		handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <inSystem+0x470>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <inSystem+0x470>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	705a      	strb	r2, [r3, #1]
		configMPUAccel(&handler_MPUAccel_6050);
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <inSystem+0x470>)
 80011d2:	f005 f9d3 	bl	800657c <configMPUAccel>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

		handlerTIM4_time.ptrTIMx                           = TIM4;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <inSystem+0x474>)
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <inSystem+0x478>)
 80011da:	601a      	str	r2, [r3, #0]
		handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <inSystem+0x474>)
 80011de:	2200      	movs	r2, #0
 80011e0:	741a      	strb	r2, [r3, #16]
		handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <inSystem+0x474>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	711a      	strb	r2, [r3, #4]
		handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <inSystem+0x474>)
 80011ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ee:	609a      	str	r2, [r3, #8]
		handlerTIM4_time.TIMx_Config.TIMx_period           = 1;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <inSystem+0x474>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	60da      	str	r2, [r3, #12]
		BasicTimer_Config(&handlerTIM4_time);
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <inSystem+0x474>)
 80011f8:	f003 fb86 	bl	8004908 <BasicTimer_Config>




}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004400 	.word	0x40004400
 8001204:	200000e4 	.word	0x200000e4
 8001208:	02faf080 	.word	0x02faf080
 800120c:	20000200 	.word	0x20000200
 8001210:	200001d8 	.word	0x200001d8
 8001214:	40020400 	.word	0x40020400
 8001218:	200001e4 	.word	0x200001e4
 800121c:	20000258 	.word	0x20000258
 8001220:	40005400 	.word	0x40005400
 8001224:	20000260 	.word	0x20000260
 8001228:	20000214 	.word	0x20000214
 800122c:	40000800 	.word	0x40000800

08001230 <vTask_Menu>:
}

//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	const char* msg_menu = "=========================\n"
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <vTask_Menu+0x12c>)
 800123a:	60bb      	str	r3, [r7, #8]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <vTask_Menu+0x130>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	2300      	movs	r3, #0
 8001246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124a:	f000 fdeb 	bl	8001e24 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f002 f887 	bl	8003370 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	617b      	str	r3, [r7, #20]

		// El comando recibido solo tener el largo de 1 caracter
		if (cmd->len == 1){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d158      	bne.n	8001320 <vTask_Menu+0xf0>

			// transformando un ASCII a un numero entero
			option = cmd->payload[0]-48;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3b30      	subs	r3, #48	; 0x30
 8001274:	613b      	str	r3, [r7, #16]

			switch (option) {
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d033      	beq.n	80012e4 <vTask_Menu+0xb4>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b02      	cmp	r3, #2
 8001280:	dc45      	bgt.n	800130e <vTask_Menu+0xde>
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <vTask_Menu+0x60>
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d015      	beq.n	80012ba <vTask_Menu+0x8a>
 800128e:	e03e      	b.n	800130e <vTask_Menu+0xde>
				case 0:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_0,portMAX_DELAY);
 8001290:	4b33      	ldr	r3, [pc, #204]	; (8001360 <vTask_Menu+0x130>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800129a:	4932      	ldr	r1, [pc, #200]	; (8001364 <vTask_Menu+0x134>)
 800129c:	f000 fdc2 	bl	8001e24 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <vTask_Menu+0x138>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <vTask_Menu+0x13c>)
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	f002 f8dc 	bl	8003470 <xTaskGenericNotify>


					break;
 80012b8:	e046      	b.n	8001348 <vTask_Menu+0x118>
				}case 1:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <vTask_Menu+0x130>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c4:	492a      	ldr	r1, [pc, #168]	; (8001370 <vTask_Menu+0x140>)
 80012c6:	f000 fdad 	bl	8001e24 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <vTask_Menu+0x138>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <vTask_Menu+0x13c>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	f002 f8c7 	bl	8003470 <xTaskGenericNotify>


					break;
 80012e2:	e031      	b.n	8001348 <vTask_Menu+0x118>
				}case 2:{
					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <vTask_Menu+0x130>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ee:	4921      	ldr	r1, [pc, #132]	; (8001374 <vTask_Menu+0x144>)
 80012f0:	f000 fd98 	bl	8001e24 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sMainMenu;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <vTask_Menu+0x138>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <vTask_Menu+0x13c>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	f002 f8b2 	bl	8003470 <xTaskGenericNotify>



					break;
 800130c:	e01c      	b.n	8001348 <vTask_Menu+0x118>
				}
				default:{
					xQueueSend(xQueue_Print,&msg_option_n,portMAX_DELAY);
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <vTask_Menu+0x130>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001318:	4917      	ldr	r1, [pc, #92]	; (8001378 <vTask_Menu+0x148>)
 800131a:	f000 fd83 	bl	8001e24 <xQueueGenericSend>
					continue;
 800131e:	e01c      	b.n	800135a <vTask_Menu+0x12a>

				}
			}

		}else{
			xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <vTask_Menu+0x130>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800132a:	4914      	ldr	r1, [pc, #80]	; (800137c <vTask_Menu+0x14c>)
 800132c:	f000 fd7a 	bl	8001e24 <xQueueGenericSend>
			//Aca se deberia notificar cambiar la variable next_state y notificar
			next_state = sMainMenu;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <vTask_Menu+0x138>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
			xTaskNotify(xHandleTask_Menu,0,eNoAction);
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <vTask_Menu+0x13c>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	f002 f894 	bl	8003470 <xTaskGenericNotify>

		}

		// La tarea vuelve a quedar en un estado de espera por un tiempo indefinido
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f002 f80b 	bl	8003370 <xTaskGenericNotifyWait>
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 800135a:	e76f      	b.n	800123c <vTask_Menu+0xc>
 800135c:	0800af60 	.word	0x0800af60
 8001360:	200000b4 	.word	0x200000b4
 8001364:	20000004 	.word	0x20000004
 8001368:	200002c9 	.word	0x200002c9
 800136c:	200000a8 	.word	0x200000a8
 8001370:	20000008 	.word	0x20000008
 8001374:	2000000c 	.word	0x2000000c
 8001378:	20000010 	.word	0x20000010
 800137c:	20000000 	.word	0x20000000

08001380 <vTask_Commands>:

	}// Fin del loop de esta tarea

}

void vTask_Commands( void * pvParameters ){
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
	command_t cmd = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2000      	movs	r0, #0
 80013a8:	f001 ffe2 	bl	8003370 <xTaskGenericNotifyWait>
 80013ac:	61f8      	str	r0, [r7, #28]

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d1f2      	bne.n	800139a <vTask_Commands+0x1a>

		   process_command(&cmd);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f819 	bl	80013f0 <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80013be:	e7ec      	b.n	800139a <vTask_Commands+0x1a>

080013c0 <vTask_Print>:

//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Print( void * pvParameters ){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <vTask_Print+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fecd 	bl	8002174 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART2, (char*) msg);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4619      	mov	r1, r3
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <vTask_Print+0x2c>)
 80013e0:	f006 ff20 	bl	8008224 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80013e4:	e7f0      	b.n	80013c8 <vTask_Print+0x8>
 80013e6:	bf00      	nop
 80013e8:	200000b4 	.word	0x200000b4
 80013ec:	200000e4 	.word	0x200000e4

080013f0 <process_command>:
   }
}

void process_command (command_t *cmd){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f819 	bl	8001430 <extract_command>

	switch (next_state) {
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <process_command+0x38>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <process_command+0x2a>
		case sMainMenu:{
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <process_command+0x3c>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2303      	movs	r3, #3
 8001412:	2100      	movs	r1, #0
 8001414:	f002 f82c 	bl	8003470 <xTaskGenericNotify>
			break;
 8001418:	e001      	b.n	800141e <process_command+0x2e>
		}
		default:{
			__NOP();
 800141a:	bf00      	nop
			break;
 800141c:	bf00      	nop
		}
	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002c9 	.word	0x200002c9
 800142c:	200000a8 	.word	0x200000a8

08001430 <extract_command>:

int extract_command (command_t *cmd){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <extract_command+0x70>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f001 f806 	bl	8002452 <uxQueueMessagesWaiting>
 8001446:	4603      	mov	r3, r0
 8001448:	613b      	str	r3, [r7, #16]
	if (status == 0){
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <extract_command+0x26>
		return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001454:	e020      	b.n	8001498 <extract_command+0x68>
	}

	do{
		// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
		status = xQueueReceive(xQueue_InputData, &item,0);
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <extract_command+0x70>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f107 010f 	add.w	r1, r7, #15
 800145e:	2200      	movs	r2, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fe87 	bl	8002174 <xQueueReceive>
 8001466:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE){
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <extract_command+0x4c>

			//vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	75fa      	strb	r2, [r7, #23]
 8001474:	461a      	mov	r2, r3
 8001476:	7bf9      	ldrb	r1, [r7, #15]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	5499      	strb	r1, [r3, r2]

		}
	}while(item != '#');
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b23      	cmp	r3, #35	; 0x23
 8001480:	d1e9      	bne.n	8001456 <extract_command+0x26>

	cmd->payload[counter_j-1] = '\0';
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	3b01      	subs	r3, #1
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	2100      	movs	r1, #0
 800148a:	54d1      	strb	r1, [r2, r3]
	cmd->len = counter_j -1; // Longitud de los caracteres del comando
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	3b01      	subs	r3, #1
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60da      	str	r2, [r3, #12]

	return 0;
 8001496:	2300      	movs	r3, #0

}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000b8 	.word	0x200000b8

080014a4 <usart2Rx_Callback>:



//Interripcion USART2
void usart2Rx_Callback(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af02      	add	r7, sp, #8

	rxData = getRxData();
 80014aa:	f006 fee3 	bl	8008274 <getRxData>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <usart2Rx_Callback+0x88>)
 80014b4:	701a      	strb	r2, [r3, #0]
//
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <usart2Rx_Callback+0x8c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f8f5 	bl	80026ae <xQueueIsQueueFullFromISR>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <usart2Rx_Callback+0x90>)
 80014c8:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <usart2Rx_Callback+0x90>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d007      	beq.n	80014e2 <usart2Rx_Callback+0x3e>

		xQueueSendToBackFromISR(xQueue_InputData,
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <usart2Rx_Callback+0x8c>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	2200      	movs	r2, #0
 80014da:	4914      	ldr	r1, [pc, #80]	; (800152c <usart2Rx_Callback+0x88>)
 80014dc:	f000 fda0 	bl	8002020 <xQueueGenericSendFromISR>
 80014e0:	e011      	b.n	8001506 <usart2Rx_Callback+0x62>


	}else{


		if (rxData == '#'){
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <usart2Rx_Callback+0x88>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b23      	cmp	r3, #35	; 0x23
 80014e8:	d10d      	bne.n	8001506 <usart2Rx_Callback+0x62>

			xQueueReceiveFromISR(xQueue_InputData,
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <usart2Rx_Callback+0x8c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <usart2Rx_Callback+0x88>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 ff1e 	bl	8002334 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <usart2Rx_Callback+0x8c>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	2200      	movs	r2, #0
 8001500:	490a      	ldr	r1, [pc, #40]	; (800152c <usart2Rx_Callback+0x88>)
 8001502:	f000 fd8d 	bl	8002020 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#'){
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <usart2Rx_Callback+0x88>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b23      	cmp	r3, #35	; 0x23
 800150c:	d10a      	bne.n	8001524 <usart2Rx_Callback+0x80>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <usart2Rx_Callback+0x94>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2300      	movs	r3, #0
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	f002 f886 	bl	8003630 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002c8 	.word	0x200002c8
 8001530:	200000b8 	.word	0x200000b8
 8001534:	200000a4 	.word	0x200000a4
 8001538:	200000b0 	.word	0x200000b0
 800153c:	00000000 	.word	0x00000000

08001540 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	ed2d 8b02 	vpush	{d8}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el ángulo
	//Lectura velocidad angular
	float w = readGyro_Z(&handler_MPUAccel_6050) - cal_Gyro;
 800154a:	487f      	ldr	r0, [pc, #508]	; (8001748 <BasicTimer2_Callback+0x208>)
 800154c:	f005 fab0 	bl	8006ab0 <readGyro_Z>
 8001550:	ee10 3a10 	vmov	r3, s0
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffa7 	bl	80004a8 <__aeabi_f2d>
 800155a:	4b7c      	ldr	r3, [pc, #496]	; (800174c <BasicTimer2_Callback+0x20c>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7fe fe42 	bl	80001e8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff faec 	bl	8000b48 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	607b      	str	r3, [r7, #4]
	//Calculo angulo
	float ang_d = (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001574:	edd7 7a01 	vldr	s15, [r7, #4]
 8001578:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800157c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001580:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001750 <BasicTimer2_Callback+0x210>
 8001584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001588:	edc7 7a00 	vstr	s15, [r7]


	parameters_Pos_Robot.grad_relativo = ang_d;
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f7fe ff8b 	bl	80004a8 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	496f      	ldr	r1, [pc, #444]	; (8001754 <BasicTimer2_Callback+0x214>)
 8001598:	e9c1 2300 	strd	r2, r3, [r1]

	//Verificamos el modo
	if(flag_mode == 1)
 800159c:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <BasicTimer2_Callback+0x218>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	f040 80f5 	bne.w	8001790 <BasicTimer2_Callback+0x250>
	{
		//Acumulamos los angulos
		sum_ang += parameters_Pos_Robot.grad_relativo;
 80015a6:	4b6d      	ldr	r3, [pc, #436]	; (800175c <BasicTimer2_Callback+0x21c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff7c 	bl	80004a8 <__aeabi_f2d>
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <BasicTimer2_Callback+0x214>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe19 	bl	80001ec <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fac1 	bl	8000b48 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a64      	ldr	r2, [pc, #400]	; (800175c <BasicTimer2_Callback+0x21c>)
 80015ca:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_vel.TIMx_Config.TIMx_period;
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <BasicTimer2_Callback+0x220>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <BasicTimer2_Callback+0x224>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <BasicTimer2_Callback+0x224>)
 80015dc:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 80015de:	4b62      	ldr	r3, [pc, #392]	; (8001768 <BasicTimer2_Callback+0x228>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <BasicTimer2_Callback+0x22c>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f200 80a2 	bhi.w	8001732 <BasicTimer2_Callback+0x1f2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <BasicTimer2_Callback+0x224>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <BasicTimer2_Callback+0x230>)
 80015f6:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			promAng = sum_ang/counting_action;
 80015f8:	4b58      	ldr	r3, [pc, #352]	; (800175c <BasicTimer2_Callback+0x21c>)
 80015fa:	edd3 6a00 	vldr	s13, [r3]
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <BasicTimer2_Callback+0x22c>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <BasicTimer2_Callback+0x234>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
			parameters_Pos_Robot.phi_relativo = (promAng*M_PI)/180;          //[rad]
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <BasicTimer2_Callback+0x234>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff45 	bl	80004a8 <__aeabi_f2d>
 800161e:	a348      	add	r3, pc, #288	; (adr r3, 8001740 <BasicTimer2_Callback+0x200>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe ff98 	bl	8000558 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <BasicTimer2_Callback+0x238>)
 8001636:	f7ff f8b9 	bl	80007ac <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4945      	ldr	r1, [pc, #276]	; (8001754 <BasicTimer2_Callback+0x214>)
 8001640:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameters_Pos_Robot.phi_relativo = atan2(sin(parameters_Pos_Robot.phi_relativo),cos(parameters_Pos_Robot.phi_relativo));
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <BasicTimer2_Callback+0x214>)
 8001646:	ed93 7b02 	vldr	d7, [r3, #8]
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	f007 faa1 	bl	8008b98 <sin>
 8001656:	eeb0 8a40 	vmov.f32	s16, s0
 800165a:	eef0 8a60 	vmov.f32	s17, s1
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <BasicTimer2_Callback+0x214>)
 8001660:	ed93 7b02 	vldr	d7, [r3, #8]
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	eef0 0a67 	vmov.f32	s1, s15
 800166c:	f007 f9f8 	bl	8008a60 <cos>
 8001670:	eeb0 7a40 	vmov.f32	s14, s0
 8001674:	eef0 7a60 	vmov.f32	s15, s1
 8001678:	eeb0 1a47 	vmov.f32	s2, s14
 800167c:	eef0 1a67 	vmov.f32	s3, s15
 8001680:	eeb0 0a48 	vmov.f32	s0, s16
 8001684:	eef0 0a68 	vmov.f32	s1, s17
 8001688:	f007 fade 	bl	8008c48 <atan2>
 800168c:	eeb0 7a40 	vmov.f32	s14, s0
 8001690:	eef0 7a60 	vmov.f32	s15, s1
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <BasicTimer2_Callback+0x214>)
 8001696:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_1.parametersMotor.dis = (cm_1*handler_Motor_1.parametersMotor.counts);                   //[mm]
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <BasicTimer2_Callback+0x23c>)
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <BasicTimer2_Callback+0x240>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <BasicTimer2_Callback+0x23c>)
 80016b2:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_2.parametersMotor.dis = (cm_2*handler_Motor_2.parametersMotor.counts);				   //[mm]
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <BasicTimer2_Callback+0x244>)
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <BasicTimer2_Callback+0x248>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <BasicTimer2_Callback+0x244>)
 80016ce:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_1.parametersMotor.vel = handler_Motor_1.parametersMotor.dis/time_accion;      //[m/s]
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <BasicTimer2_Callback+0x23c>)
 80016d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <BasicTimer2_Callback+0x230>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <BasicTimer2_Callback+0x23c>)
 80016ea:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.vel = handler_Motor_2.parametersMotor.dis/time_accion;      //[m/s]
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <BasicTimer2_Callback+0x244>)
 80016f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <BasicTimer2_Callback+0x230>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <BasicTimer2_Callback+0x244>)
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]
			//Reiniciamos el numero de conteos
			handler_Motor_1.parametersMotor.counts = 0;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <BasicTimer2_Callback+0x23c>)
 800170c:	2200      	movs	r2, #0
 800170e:	711a      	strb	r2, [r3, #4]
			handler_Motor_2.parametersMotor.counts = 0;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <BasicTimer2_Callback+0x244>)
 8001712:	2200      	movs	r2, #0
 8001714:	711a      	strb	r2, [r3, #4]
			//Reiniciamos variable
			sum_ang = 0;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <BasicTimer2_Callback+0x21c>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <BasicTimer2_Callback+0x224>)
 8001720:	2200      	movs	r2, #0
 8001722:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <BasicTimer2_Callback+0x22c>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <BasicTimer2_Callback+0x24c>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]

		//Combinar ambos ángulos
		ang_complementary = parameters_Pos_Robot.grad_relativo + ang_for_Displament_ICR;
	}
	else{  __NOP(); }
}
 8001730:	e0c0      	b.n	80018b4 <BasicTimer2_Callback+0x374>
		else{ counting_action++; }
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <BasicTimer2_Callback+0x22c>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <BasicTimer2_Callback+0x22c>)
 800173c:	801a      	strh	r2, [r3, #0]
}
 800173e:	e0b9      	b.n	80018b4 <BasicTimer2_Callback+0x374>
 8001740:	54442d18 	.word	0x54442d18
 8001744:	400921fb 	.word	0x400921fb
 8001748:	20000260 	.word	0x20000260
 800174c:	200002d0 	.word	0x200002d0
 8001750:	447a0000 	.word	0x447a0000
 8001754:	20000300 	.word	0x20000300
 8001758:	200002ca 	.word	0x200002ca
 800175c:	200002d8 	.word	0x200002d8
 8001760:	20000200 	.word	0x20000200
 8001764:	200002f8 	.word	0x200002f8
 8001768:	20000014 	.word	0x20000014
 800176c:	200002fa 	.word	0x200002fa
 8001770:	200002fc 	.word	0x200002fc
 8001774:	200002dc 	.word	0x200002dc
 8001778:	40668000 	.word	0x40668000
 800177c:	20000270 	.word	0x20000270
 8001780:	200002e0 	.word	0x200002e0
 8001784:	2000029c 	.word	0x2000029c
 8001788:	200002e4 	.word	0x200002e4
 800178c:	200002cb 	.word	0x200002cb
	else if(flag_mode==2)
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <BasicTimer2_Callback+0x388>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b02      	cmp	r3, #2
 8001796:	f040 808c 	bne.w	80018b2 <BasicTimer2_Callback+0x372>
		if(counting_action>=timeAction_TIMER_Sampling)
 800179a:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <BasicTimer2_Callback+0x38c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <BasicTimer2_Callback+0x390>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d870      	bhi.n	800188a <BasicTimer2_Callback+0x34a>
			time_accion = time_accumulated;
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <BasicTimer2_Callback+0x394>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <BasicTimer2_Callback+0x398>)
 80017b0:	601a      	str	r2, [r3, #0]
			handler_Motor_1.parametersMotor.dis = (cm_1*handler_Motor_1.parametersMotor.counts);                   //[mm]
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <BasicTimer2_Callback+0x39c>)
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <BasicTimer2_Callback+0x3a0>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	4b44      	ldr	r3, [pc, #272]	; (80018dc <BasicTimer2_Callback+0x39c>)
 80017ca:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_2.parametersMotor.dis = (cm_2*handler_Motor_2.parametersMotor.counts);				   //[mm]
 80017ce:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <BasicTimer2_Callback+0x3a8>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 80017e6:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_1.parametersMotor.vel = handler_Motor_1.parametersMotor.dis/time_accion;      //[m/s]
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <BasicTimer2_Callback+0x39c>)
 80017ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <BasicTimer2_Callback+0x398>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <BasicTimer2_Callback+0x39c>)
 8001802:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.vel = handler_Motor_2.parametersMotor.dis/time_accion;      //[m/s]
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 8001808:	edd3 6a03 	vldr	s13, [r3, #12]
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <BasicTimer2_Callback+0x398>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 800181e:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.counts = 0;
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 8001824:	2200      	movs	r2, #0
 8001826:	711a      	strb	r2, [r3, #4]
			handler_Motor_1.parametersMotor.counts = 0;
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <BasicTimer2_Callback+0x39c>)
 800182a:	2200      	movs	r2, #0
 800182c:	711a      	strb	r2, [r3, #4]
			ang_for_Displament_ICR += (((handler_Motor_2.parametersMotor.dis - handler_Motor_1.parametersMotor.dis)*100)
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <BasicTimer2_Callback+0x3a4>)
 8001830:	ed93 7a03 	vldr	s14, [r3, #12]
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <BasicTimer2_Callback+0x39c>)
 8001836:	edd3 7a03 	vldr	s15, [r3, #12]
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80018ec <BasicTimer2_Callback+0x3ac>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 8001846:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80018f0 <BasicTimer2_Callback+0x3b0>
 800184a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800184e:	ee16 0a90 	vmov	r0, s13
 8001852:	f7fe fe29 	bl	80004a8 <__aeabi_f2d>
 8001856:	a31a      	add	r3, pc, #104	; (adr r3, 80018c0 <BasicTimer2_Callback+0x380>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fe7c 	bl	8000558 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_2.parametersMotor.dis - handler_Motor_1.parametersMotor.dis)*100)
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <BasicTimer2_Callback+0x3b4>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fcbd 	bl	80001ec <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	491f      	ldr	r1, [pc, #124]	; (80018f4 <BasicTimer2_Callback+0x3b4>)
 8001878:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <BasicTimer2_Callback+0x394>)
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
			counting_action = 0;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <BasicTimer2_Callback+0x390>)
 8001884:	2200      	movs	r2, #0
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e005      	b.n	8001896 <BasicTimer2_Callback+0x356>
		else{counting_action++;}
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <BasicTimer2_Callback+0x390>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <BasicTimer2_Callback+0x390>)
 8001894:	801a      	strh	r2, [r3, #0]
		ang_complementary = parameters_Pos_Robot.grad_relativo + ang_for_Displament_ICR;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <BasicTimer2_Callback+0x3b8>)
 8001898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <BasicTimer2_Callback+0x3b4>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fca3 	bl	80001ec <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4914      	ldr	r1, [pc, #80]	; (80018fc <BasicTimer2_Callback+0x3bc>)
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
}
 80018b0:	e000      	b.n	80018b4 <BasicTimer2_Callback+0x374>
	else{  __NOP(); }
 80018b2:	bf00      	nop
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	ecbd 8b02 	vpop	{d8}
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	1a63c1f8 	.word	0x1a63c1f8
 80018c4:	404ca5dc 	.word	0x404ca5dc
 80018c8:	200002ca 	.word	0x200002ca
 80018cc:	20000014 	.word	0x20000014
 80018d0:	200002fa 	.word	0x200002fa
 80018d4:	200002f8 	.word	0x200002f8
 80018d8:	200002fc 	.word	0x200002fc
 80018dc:	20000270 	.word	0x20000270
 80018e0:	200002e0 	.word	0x200002e0
 80018e4:	2000029c 	.word	0x2000029c
 80018e8:	200002e4 	.word	0x200002e4
 80018ec:	42c80000 	.word	0x42c80000
 80018f0:	4625a000 	.word	0x4625a000
 80018f4:	200002e8 	.word	0x200002e8
 80018f8:	20000300 	.word	0x20000300
 80018fc:	200002f0 	.word	0x200002f0

08001900 <calibracionGyros>:

// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 800190c:	23c8      	movs	r3, #200	; 0xc8
 800190e:	827b      	strh	r3, [r7, #18]
	float    medidas    = 0;
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
	float    suma       = 0;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
	uint8_t  contador   = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	76fb      	strb	r3, [r7, #27]
	float    promedio   = 0;
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	2b7a      	cmp	r3, #122	; 0x7a
 800192a:	d05b      	beq.n	80019e4 <calibracionGyros+0xe4>
 800192c:	2b7a      	cmp	r3, #122	; 0x7a
 800192e:	dc6a      	bgt.n	8001a06 <calibracionGyros+0x106>
 8001930:	2b78      	cmp	r3, #120	; 0x78
 8001932:	d015      	beq.n	8001960 <calibracionGyros+0x60>
 8001934:	2b79      	cmp	r3, #121	; 0x79
 8001936:	d034      	beq.n	80019a2 <calibracionGyros+0xa2>
				contador++;
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001938:	e065      	b.n	8001a06 <calibracionGyros+0x106>
				medidas = readGyro_X(ptrMPUAccel);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f004 ffa8 	bl	8006890 <readGyro_X>
 8001940:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001944:	ed97 7a07 	vldr	s14, [r7, #28]
 8001948:	edd7 7a03 	vldr	s15, [r7, #12]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	3301      	adds	r3, #1
 8001958:	76fb      	strb	r3, [r7, #27]
				delay_ms(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 f85c 	bl	8001a18 <delay_ms>
			while (contador < numMedidas){
 8001960:	7efb      	ldrb	r3, [r7, #27]
 8001962:	b29b      	uxth	r3, r3
 8001964:	8a7a      	ldrh	r2, [r7, #18]
 8001966:	429a      	cmp	r2, r3
 8001968:	d8e7      	bhi.n	800193a <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	edd7 6a07 	vldr	s13, [r7, #28]
 8001978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001980:	e042      	b.n	8001a08 <calibracionGyros+0x108>
				medidas = readGyro_Y(ptrMPUAccel);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 f80c 	bl	80069a0 <readGyro_Y>
 8001988:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 800198c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001990:	edd7 7a03 	vldr	s15, [r7, #12]
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800199c:	7efb      	ldrb	r3, [r7, #27]
 800199e:	3301      	adds	r3, #1
 80019a0:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 80019a2:	7efb      	ldrb	r3, [r7, #27]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8a7a      	ldrh	r2, [r7, #18]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8ea      	bhi.n	8001982 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 80019ac:	8a7b      	ldrh	r3, [r7, #18]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80019ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019be:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80019c2:	e021      	b.n	8001a08 <calibracionGyros+0x108>
				medidas = readGyro_Z(ptrMPUAccel);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f005 f873 	bl	8006ab0 <readGyro_Z>
 80019ca:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80019ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80019de:	7efb      	ldrb	r3, [r7, #27]
 80019e0:	3301      	adds	r3, #1
 80019e2:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 80019e4:	7efb      	ldrb	r3, [r7, #27]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	8a7a      	ldrh	r2, [r7, #18]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d8ea      	bhi.n	80019c4 <calibracionGyros+0xc4>
			promedio = suma / numMedidas;
 80019ee:	8a7b      	ldrh	r3, [r7, #18]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80019fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a00:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001a04:	e000      	b.n	8001a08 <calibracionGyros+0x108>
			break;
 8001a06:	bf00      	nop
		}
	}


	return promedio;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	ee07 3a90 	vmov	s15, r3
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <delay_ms>:


void delay_ms(uint16_t time_to_wait_ms){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <delay_ms+0x5c>)
 8001a24:	f003 fb72 	bl	800510c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8001a3c:	e00e      	b.n	8001a5c <delay_ms+0x44>
		if (handlerTIM4_time.ptrTIMx->CNT == handlerTIM4_time.ptrTIMx->ARR)  {CNT += handlerTIM4_time.ptrTIMx->CNT;}
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <delay_ms+0x5c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <delay_ms+0x5c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <delay_ms+0x44>
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <delay_ms+0x5c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4413      	add	r3, r2
 8001a5a:	81fb      	strh	r3, [r7, #14]
	while (CNT < limit){
 8001a5c:	89fa      	ldrh	r2, [r7, #14]
 8001a5e:	89bb      	ldrh	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3ec      	bcc.n	8001a3e <delay_ms+0x26>
	}
	stopTimer(&handlerTIM4_time);
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <delay_ms+0x5c>)
 8001a66:	f003 fb63 	bl	8005130 <stopTimer>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000214 	.word	0x20000214

08001a78 <led_state_callback>:





void led_state_callback (TimerHandle_t xTimer){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <led_state_callback+0x18>)
 8001a82:	f004 fd64 	bl	800654e <GPIOxTooglePin>

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200000c0 	.word	0x200000c0

08001a94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a98:	f006 fcc0 	bl	800841c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ac2:	f006 ff91 	bl	80089e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ac6:	f7ff f88f 	bl	8000be8 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   r0, =_estack
 8001acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001ad8:	0800b2a0 	.word	0x0800b2a0
  ldr r2, =_sbss
 8001adc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001ae0:	2001310c 	.word	0x2001310c

08001ae4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>

08001ae6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f103 0208 	add.w	r2, r3, #8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001afe:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 0208 	add.w	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f103 0208 	add.w	r2, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9e:	d103      	bne.n	8001ba8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e00c      	b.n	8001bc2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3308      	adds	r3, #8
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e002      	b.n	8001bb6 <vListInsert+0x2e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d2f6      	bcs.n	8001bb0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6892      	ldr	r2, [r2, #8]
 8001c10:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6852      	ldr	r2, [r2, #4]
 8001c1a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d103      	bne.n	8001c2e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <xQueueGenericReset+0x2a>
        __asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	60bb      	str	r3, [r7, #8]
    }
 8001c76:	bf00      	nop
 8001c78:	e7fe      	b.n	8001c78 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c7a:	f002 fadd 	bl	8004238 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	441a      	add	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	3b01      	subs	r3, #1
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	441a      	add	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	22ff      	movs	r2, #255	; 0xff
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d114      	bne.n	8001cfa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01a      	beq.n	8001d0e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3310      	adds	r3, #16
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f913 	bl	8002f08 <xTaskRemoveFromEventList>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <xQueueGenericReset+0xcc>)
 8001cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	e009      	b.n	8001d0e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fef1 	bl	8001ae6 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3324      	adds	r3, #36	; 0x24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff feec 	bl	8001ae6 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001d0e:	f002 fac3 	bl	8004298 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGenericCreate+0x2a>
        __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	61bb      	str	r3, [r7, #24]
    }
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <xQueueGenericCreate+0x48>
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d101      	bne.n	8001d6c <xQueueGenericCreate+0x4c>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <xQueueGenericCreate+0x4e>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <xQueueGenericCreate+0x68>
        __asm volatile
 8001d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	617b      	str	r3, [r7, #20]
    }
 8001d84:	bf00      	nop
 8001d86:	e7fe      	b.n	8001d86 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001d8e:	d90a      	bls.n	8001da6 <xQueueGenericCreate+0x86>
        __asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	613b      	str	r3, [r7, #16]
    }
 8001da2:	bf00      	nop
 8001da4:	e7fe      	b.n	8001da4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3350      	adds	r3, #80	; 0x50
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fb66 	bl	800447c <pvPortMalloc>
 8001db0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3350      	adds	r3, #80	; 0x50
 8001dc0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f805 	bl	8001dde <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
    }
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e002      	b.n	8001e00 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	69b8      	ldr	r0, [r7, #24]
 8001e10:	f7ff ff1e 	bl	8001c50 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	; 0x38
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <xQueueGenericSend+0x32>
        __asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <xQueueGenericSend+0x40>
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <xQueueGenericSend+0x44>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <xQueueGenericSend+0x46>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <xQueueGenericSend+0x60>
        __asm volatile
 8001e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001e80:	bf00      	nop
 8001e82:	e7fe      	b.n	8001e82 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d103      	bne.n	8001e92 <xQueueGenericSend+0x6e>
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <xQueueGenericSend+0x72>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <xQueueGenericSend+0x74>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <xQueueGenericSend+0x8e>
        __asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	623b      	str	r3, [r7, #32]
    }
 8001eae:	bf00      	nop
 8001eb0:	e7fe      	b.n	8001eb0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eb2:	f001 f9c5 	bl	8003240 <xTaskGetSchedulerState>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <xQueueGenericSend+0x9e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <xQueueGenericSend+0xa2>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <xQueueGenericSend+0xa4>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <xQueueGenericSend+0xbe>
        __asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	61fb      	str	r3, [r7, #28]
    }
 8001ede:	bf00      	nop
 8001ee0:	e7fe      	b.n	8001ee0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ee2:	f002 f9a9 	bl	8004238 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d302      	bcc.n	8001ef8 <xQueueGenericSend+0xd4>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d129      	bne.n	8001f4c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001efe:	f000 fac6 	bl	800248e <prvCopyDataToQueue>
 8001f02:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d010      	beq.n	8001f2e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	3324      	adds	r3, #36	; 0x24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fff9 	bl	8002f08 <xTaskRemoveFromEventList>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <xQueueGenericSend+0x1f8>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	e00a      	b.n	8001f44 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <xQueueGenericSend+0x1f8>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f44:	f002 f9a8 	bl	8004298 <vPortExitCritical>
                return pdPASS;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e063      	b.n	8002014 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f52:	f002 f9a1 	bl	8004298 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e05c      	b.n	8002014 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 f831 	bl	8002fcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f6e:	f002 f993 	bl	8004298 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f72:	f000 fdb9 	bl	8002ae8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f76:	f002 f95f 	bl	8004238 <vPortEnterCritical>
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f86:	d103      	bne.n	8001f90 <xQueueGenericSend+0x16c>
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f9c:	d103      	bne.n	8001fa6 <xQueueGenericSend+0x182>
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa6:	f002 f977 	bl	8004298 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001faa:	1d3a      	adds	r2, r7, #4
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f820 	bl	8002ff8 <xTaskCheckForTimeOut>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d124      	bne.n	8002008 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc0:	f000 fb5d 	bl	800267e <prvIsQueueFull>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d018      	beq.n	8001ffc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	3310      	adds	r3, #16
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 ff48 	bl	8002e68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fda:	f000 fae8 	bl	80025ae <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001fde:	f000 fd91 	bl	8002b04 <xTaskResumeAll>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f af7c 	bne.w	8001ee2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <xQueueGenericSend+0x1f8>)
 8001fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	e772      	b.n	8001ee2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ffe:	f000 fad6 	bl	80025ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002002:	f000 fd7f 	bl	8002b04 <xTaskResumeAll>
 8002006:	e76c      	b.n	8001ee2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800200a:	f000 fad0 	bl	80025ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800200e:	f000 fd79 	bl	8002b04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002012:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002014:	4618      	mov	r0, r3
 8002016:	3738      	adds	r7, #56	; 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b090      	sub	sp, #64	; 0x40
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800204a:	bf00      	nop
 800204c:	e7fe      	b.n	800204c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <xQueueGenericSendFromISR+0x3c>
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <xQueueGenericSendFromISR+0x40>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <xQueueGenericSendFromISR+0x42>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002078:	bf00      	nop
 800207a:	e7fe      	b.n	800207a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d103      	bne.n	800208a <xQueueGenericSendFromISR+0x6a>
 8002082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <xQueueGenericSendFromISR+0x6e>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueGenericSendFromISR+0x70>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	623b      	str	r3, [r7, #32]
    }
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020aa:	f002 f9a7 	bl	80043fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80020ae:	f3ef 8211 	mrs	r2, BASEPRI
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	61fa      	str	r2, [r7, #28]
 80020c4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80020c6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <xQueueGenericSendFromISR+0xbc>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d13e      	bne.n	800215a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020f2:	f000 f9cc 	bl	800248e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80020f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fe:	d112      	bne.n	8002126 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d025      	beq.n	8002154 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	3324      	adds	r3, #36	; 0x24
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fefb 	bl	8002f08 <xTaskRemoveFromEventList>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01d      	beq.n	8002154 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01a      	beq.n	8002154 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e016      	b.n	8002154 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002126:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800212a:	2b7f      	cmp	r3, #127	; 0x7f
 800212c:	d10a      	bne.n	8002144 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	617b      	str	r3, [r7, #20]
    }
 8002140:	bf00      	nop
 8002142:	e7fe      	b.n	8002142 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002144:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002148:	3301      	adds	r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	b25a      	sxtb	r2, r3
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002154:	2301      	movs	r3, #1
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002158:	e001      	b.n	800215e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800215a:	2300      	movs	r3, #0
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002168:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800216c:	4618      	mov	r0, r3
 800216e:	3740      	adds	r7, #64	; 0x40
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <xQueueReceive+0x30>
        __asm volatile
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	623b      	str	r3, [r7, #32]
    }
 80021a0:	bf00      	nop
 80021a2:	e7fe      	b.n	80021a2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <xQueueReceive+0x3e>
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <xQueueReceive+0x42>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <xQueueReceive+0x44>
 80021b6:	2300      	movs	r3, #0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <xQueueReceive+0x5e>
        __asm volatile
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	61fb      	str	r3, [r7, #28]
    }
 80021ce:	bf00      	nop
 80021d0:	e7fe      	b.n	80021d0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021d2:	f001 f835 	bl	8003240 <xTaskGetSchedulerState>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <xQueueReceive+0x6e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <xQueueReceive+0x72>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <xQueueReceive+0x74>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <xQueueReceive+0x8e>
        __asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	61bb      	str	r3, [r7, #24]
    }
 80021fe:	bf00      	nop
 8002200:	e7fe      	b.n	8002200 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002202:	f002 f819 	bl	8004238 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01f      	beq.n	8002252 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002216:	f000 f9a4 	bl	8002562 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	3310      	adds	r3, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fe6a 	bl	8002f08 <xTaskRemoveFromEventList>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <xQueueReceive+0x1bc>)
 800223c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800224a:	f002 f825 	bl	8004298 <vPortExitCritical>
                return pdPASS;
 800224e:	2301      	movs	r3, #1
 8002250:	e069      	b.n	8002326 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002258:	f002 f81e 	bl	8004298 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800225c:	2300      	movs	r3, #0
 800225e:	e062      	b.n	8002326 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f000 feae 	bl	8002fcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002274:	f002 f810 	bl	8004298 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002278:	f000 fc36 	bl	8002ae8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800227c:	f001 ffdc 	bl	8004238 <vPortEnterCritical>
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002286:	b25b      	sxtb	r3, r3
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228c:	d103      	bne.n	8002296 <xQueueReceive+0x122>
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800229c:	b25b      	sxtb	r3, r3
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a2:	d103      	bne.n	80022ac <xQueueReceive+0x138>
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ac:	f001 fff4 	bl	8004298 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fe9d 	bl	8002ff8 <xTaskCheckForTimeOut>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d123      	bne.n	800230c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c6:	f000 f9c4 	bl	8002652 <prvIsQueueEmpty>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	3324      	adds	r3, #36	; 0x24
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fdc5 	bl	8002e68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e0:	f000 f965 	bl	80025ae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022e4:	f000 fc0e 	bl	8002b04 <xTaskResumeAll>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d189      	bne.n	8002202 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <xQueueReceive+0x1bc>)
 80022f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	e780      	b.n	8002202 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002302:	f000 f954 	bl	80025ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002306:	f000 fbfd 	bl	8002b04 <xTaskResumeAll>
 800230a:	e77a      	b.n	8002202 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800230c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800230e:	f000 f94e 	bl	80025ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002312:	f000 fbf7 	bl	8002b04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002318:	f000 f99b 	bl	8002652 <prvIsQueueEmpty>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f43f af6f 	beq.w	8002202 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002324:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002326:	4618      	mov	r0, r3
 8002328:	3730      	adds	r7, #48	; 0x30
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b090      	sub	sp, #64	; 0x40
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <xQueueReceiveFromISR+0x3a>
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <xQueueReceiveFromISR+0x3e>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <xQueueReceiveFromISR+0x40>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800238e:	f002 f835 	bl	80043fc <vPortValidateInterruptPriority>
        __asm volatile
 8002392:	f3ef 8211 	mrs	r2, BASEPRI
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	623a      	str	r2, [r7, #32]
 80023a8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80023aa:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03e      	beq.n	8002438 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023c8:	f000 f8cb 	bl	8002562 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80023d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d112      	bne.n	8002404 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d025      	beq.n	8002432 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	3310      	adds	r3, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd8c 	bl	8002f08 <xTaskRemoveFromEventList>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01d      	beq.n	8002432 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01a      	beq.n	8002432 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e016      	b.n	8002432 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8002404:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002408:	2b7f      	cmp	r3, #127	; 0x7f
 800240a:	d10a      	bne.n	8002422 <xQueueReceiveFromISR+0xee>
        __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	61bb      	str	r3, [r7, #24]
    }
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002426:	3301      	adds	r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	b25a      	sxtb	r2, r3
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8002432:	2301      	movs	r3, #1
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002436:	e001      	b.n	800243c <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f383 8811 	msr	BASEPRI, r3
    }
 8002446:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800244a:	4618      	mov	r0, r3
 800244c:	3740      	adds	r7, #64	; 0x40
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	60bb      	str	r3, [r7, #8]
    }
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8002476:	f001 fedf 	bl	8004238 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8002480:	f001 ff0a 	bl	8004298 <vPortExitCritical>

    return uxReturn;
 8002484:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d14d      	bne.n	8002550 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fedf 	bl	800327c <xTaskPriorityDisinherit>
 80024be:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	e043      	b.n	8002550 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d119      	bne.n	8002502 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6858      	ldr	r0, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	461a      	mov	r2, r3
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	f006 faa9 	bl	8008a30 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	441a      	add	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d32b      	bcc.n	8002550 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	e026      	b.n	8002550 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68d8      	ldr	r0, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	461a      	mov	r2, r3
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	f006 fa8f 	bl	8008a30 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	425b      	negs	r3, r3
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d207      	bcs.n	800253e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	425b      	negs	r3, r3
 8002538:	441a      	add	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d105      	bne.n	8002550 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3b01      	subs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002558:	697b      	ldr	r3, [r7, #20]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d018      	beq.n	80025a6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	441a      	add	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d303      	bcc.n	8002596 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68d9      	ldr	r1, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	461a      	mov	r2, r3
 80025a0:	6838      	ldr	r0, [r7, #0]
 80025a2:	f006 fa45 	bl	8008a30 <memcpy>
    }
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025b6:	f001 fe3f 	bl	8004238 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025c0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c2:	e011      	b.n	80025e8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3324      	adds	r3, #36	; 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fc99 	bl	8002f08 <xTaskRemoveFromEventList>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80025dc:	f000 fd72 	bl	80030c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dce9      	bgt.n	80025c4 <prvUnlockQueue+0x16>
 80025f0:	e000      	b.n	80025f4 <prvUnlockQueue+0x46>
                        break;
 80025f2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80025fc:	f001 fe4c 	bl	8004298 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002600:	f001 fe1a 	bl	8004238 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800260c:	e011      	b.n	8002632 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3310      	adds	r3, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fc74 	bl	8002f08 <xTaskRemoveFromEventList>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002626:	f000 fd4d 	bl	80030c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	3b01      	subs	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002636:	2b00      	cmp	r3, #0
 8002638:	dce9      	bgt.n	800260e <prvUnlockQueue+0x60>
 800263a:	e000      	b.n	800263e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800263c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002646:	f001 fe27 	bl	8004298 <vPortExitCritical>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800265a:	f001 fded 	bl	8004238 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e001      	b.n	8002670 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002670:	f001 fe12 	bl	8004298 <vPortExitCritical>

    return xReturn;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002686:	f001 fdd7 	bl	8004238 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	429a      	cmp	r2, r3
 8002694:	d102      	bne.n	800269c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002696:	2301      	movs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e001      	b.n	80026a0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026a0:	f001 fdfa 	bl	8004298 <vPortExitCritical>

    return xReturn;
 80026a4:	68fb      	ldr	r3, [r7, #12]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80026ae:	b480      	push	{r7}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60fb      	str	r3, [r7, #12]
    }
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d102      	bne.n	80026e8 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e001      	b.n	80026ec <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80026ec:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e014      	b.n	8002736 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <vQueueAddToRegistry+0x50>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <vQueueAddToRegistry+0x50>)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <vQueueAddToRegistry+0x50>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800272e:	e006      	b.n	800273e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d9e7      	bls.n	800270c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000348 	.word	0x20000348

08002750 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002760:	f001 fd6a 	bl	8004238 <vPortEnterCritical>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800276a:	b25b      	sxtb	r3, r3
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002770:	d103      	bne.n	800277a <vQueueWaitForMessageRestricted+0x2a>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002780:	b25b      	sxtb	r3, r3
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002786:	d103      	bne.n	8002790 <vQueueWaitForMessageRestricted+0x40>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002790:	f001 fd82 	bl	8004298 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb83 	bl	8002eb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff feff 	bl	80025ae <prvUnlockQueue>
    }
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af04      	add	r7, sp, #16
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 fe55 	bl	800447c <pvPortMalloc>
 80027d2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027da:	2058      	movs	r0, #88	; 0x58
 80027dc:	f001 fe4e 	bl	800447c <pvPortMalloc>
 80027e0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
 80027ee:	e005      	b.n	80027fc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80027f0:	6978      	ldr	r0, [r7, #20]
 80027f2:	f001 ff23 	bl	800463c <vPortFree>
 80027f6:	e001      	b.n	80027fc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	2300      	movs	r3, #0
 8002806:	9303      	str	r3, [sp, #12]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f80e 	bl	800283a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800281e:	69f8      	ldr	r0, [r7, #28]
 8002820:	f000 f8a2 	bl	8002968 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002824:	2301      	movs	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e002      	b.n	8002830 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002830:	69bb      	ldr	r3, [r7, #24]
    }
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	461a      	mov	r2, r3
 8002852:	21a5      	movs	r1, #165	; 0xa5
 8002854:	f006 f8fa 	bl	8008a4c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002862:	3b01      	subs	r3, #1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f023 0307 	bic.w	r3, r3, #7
 8002870:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <prvInitialiseNewTask+0x58>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	617b      	str	r3, [r7, #20]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01f      	beq.n	80028d8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e012      	b.n	80028c4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	7819      	ldrb	r1, [r3, #0]
 80028a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	3334      	adds	r3, #52	; 0x34
 80028ae:	460a      	mov	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	d9e9      	bls.n	800289e <prvInitialiseNewTask+0x64>
 80028ca:	e000      	b.n	80028ce <prvInitialiseNewTask+0x94>
            {
                break;
 80028cc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028d6:	e003      	b.n	80028e0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d901      	bls.n	80028ea <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028e6:	2304      	movs	r3, #4
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2200      	movs	r2, #0
 80028fa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	3304      	adds	r3, #4
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff f910 	bl	8001b26 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	3318      	adds	r3, #24
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f90b 	bl	8001b26 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002914:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	f1c3 0205 	rsb	r2, r3, #5
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	3350      	adds	r3, #80	; 0x50
 800292a:	2204      	movs	r2, #4
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f88c 	bl	8008a4c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	3354      	adds	r3, #84	; 0x54
 8002938:	2201      	movs	r2, #1
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f006 f885 	bl	8008a4c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	69b8      	ldr	r0, [r7, #24]
 8002948:	f001 fb48 	bl	8003fdc <pxPortInitialiseStack>
 800294c:	4602      	mov	r2, r0
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002970:	f001 fc62 	bl	8004238 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <prvAddNewTaskToReadyList+0xc0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <prvAddNewTaskToReadyList+0xc0>)
 800297c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <prvAddNewTaskToReadyList+0xc0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d110      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002994:	f000 fbba 	bl	800310c <prvInitialiseTaskLists>
 8002998:	e00d      	b.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d802      	bhi.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029b0:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 80029be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2201      	movs	r2, #1
 80029ce:	409a      	lsls	r2, r3
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <prvAddNewTaskToReadyList+0xd0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <prvAddNewTaskToReadyList+0xd0>)
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <prvAddNewTaskToReadyList+0xd4>)
 80029e8:	441a      	add	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7ff f8a5 	bl	8001b40 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029f6:	f001 fc4f 	bl	8004298 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d207      	bcs.n	8002a20 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <prvAddNewTaskToReadyList+0xd8>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000460 	.word	0x20000460
 8002a2c:	20000388 	.word	0x20000388
 8002a30:	2000046c 	.word	0x2000046c
 8002a34:	2000047c 	.word	0x2000047c
 8002a38:	20000468 	.word	0x20000468
 8002a3c:	2000038c 	.word	0x2000038c
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <vTaskStartScheduler+0x88>)
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	2282      	movs	r2, #130	; 0x82
 8002a56:	491e      	ldr	r1, [pc, #120]	; (8002ad0 <vTaskStartScheduler+0x8c>)
 8002a58:	481e      	ldr	r0, [pc, #120]	; (8002ad4 <vTaskStartScheduler+0x90>)
 8002a5a:	f7ff fead 	bl	80027b8 <xTaskCreate>
 8002a5e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a66:	f000 ff4b 	bl	8003900 <xTimerCreateTimerTask>
 8002a6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d116      	bne.n	8002aa0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	60bb      	str	r3, [r7, #8]
    }
 8002a84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <vTaskStartScheduler+0x94>)
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <vTaskStartScheduler+0x98>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <vTaskStartScheduler+0x9c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a9a:	f001 fb2b 	bl	80040f4 <xPortStartScheduler>
 8002a9e:	e00e      	b.n	8002abe <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa6:	d10a      	bne.n	8002abe <vTaskStartScheduler+0x7a>
        __asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	607b      	str	r3, [r7, #4]
    }
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <vTaskStartScheduler+0xa0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000484 	.word	0x20000484
 8002ad0:	0800aff4 	.word	0x0800aff4
 8002ad4:	080030dd 	.word	0x080030dd
 8002ad8:	20000480 	.word	0x20000480
 8002adc:	2000046c 	.word	0x2000046c
 8002ae0:	20000464 	.word	0x20000464
 8002ae4:	20000018 	.word	0x20000018

08002ae8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <vTaskSuspendAll+0x18>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <vTaskSuspendAll+0x18>)
 8002af4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	20000488 	.word	0x20000488

08002b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <xTaskResumeAll+0x114>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	603b      	str	r3, [r7, #0]
    }
 8002b2c:	bf00      	nop
 8002b2e:	e7fe      	b.n	8002b2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b30:	f001 fb82 	bl	8004238 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <xTaskResumeAll+0x114>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <xTaskResumeAll+0x114>)
 8002b3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <xTaskResumeAll+0x114>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d161      	bne.n	8002c0a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b46:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <xTaskResumeAll+0x118>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d05d      	beq.n	8002c0a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b4e:	e02e      	b.n	8002bae <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b50:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <xTaskResumeAll+0x11c>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f84c 	bl	8001bfa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f847 	bl	8001bfa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <xTaskResumeAll+0x120>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <xTaskResumeAll+0x120>)
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <xTaskResumeAll+0x124>)
 8002b8c:	441a      	add	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fe ffd3 	bl	8001b40 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <xTaskResumeAll+0x128>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <xTaskResumeAll+0x12c>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <xTaskResumeAll+0x11c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1cc      	bne.n	8002b50 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bbc:	f000 fb24 	bl	8003208 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <xTaskResumeAll+0x130>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bcc:	f000 f846 	bl	8002c5c <xTaskIncrementTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <xTaskResumeAll+0x12c>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f1      	bne.n	8002bcc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <xTaskResumeAll+0x130>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <xTaskResumeAll+0x12c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <xTaskResumeAll+0x134>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c0a:	f001 fb45 	bl	8004298 <vPortExitCritical>

    return xAlreadyYielded;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000488 	.word	0x20000488
 8002c1c:	20000460 	.word	0x20000460
 8002c20:	20000420 	.word	0x20000420
 8002c24:	20000468 	.word	0x20000468
 8002c28:	2000038c 	.word	0x2000038c
 8002c2c:	20000388 	.word	0x20000388
 8002c30:	20000474 	.word	0x20000474
 8002c34:	20000470 	.word	0x20000470
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <xTaskGetTickCount+0x1c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000464 	.word	0x20000464

08002c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <xTaskIncrementTick+0x128>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d17f      	bne.n	8002d6e <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <xTaskIncrementTick+0x12c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c76:	4a44      	ldr	r2, [pc, #272]	; (8002d88 <xTaskIncrementTick+0x12c>)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d120      	bne.n	8002cc4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <xTaskIncrementTick+0x130>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <xTaskIncrementTick+0x46>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	603b      	str	r3, [r7, #0]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xTaskIncrementTick+0x44>
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <xTaskIncrementTick+0x130>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <xTaskIncrementTick+0x134>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <xTaskIncrementTick+0x130>)
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4a37      	ldr	r2, [pc, #220]	; (8002d90 <xTaskIncrementTick+0x134>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <xTaskIncrementTick+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <xTaskIncrementTick+0x138>)
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	f000 faa2 	bl	8003208 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <xTaskIncrementTick+0x13c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d348      	bcc.n	8002d60 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <xTaskIncrementTick+0x130>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <xTaskIncrementTick+0x13c>)
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cde:	601a      	str	r2, [r3, #0]
                    break;
 8002ce0:	e03e      	b.n	8002d60 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <xTaskIncrementTick+0x130>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d203      	bcs.n	8002d02 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <xTaskIncrementTick+0x13c>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d00:	e02e      	b.n	8002d60 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ff77 	bl	8001bfa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3318      	adds	r3, #24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe ff6e 	bl	8001bfa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	2201      	movs	r2, #1
 8002d24:	409a      	lsls	r2, r3
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <xTaskIncrementTick+0x140>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <xTaskIncrementTick+0x140>)
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <xTaskIncrementTick+0x144>)
 8002d3e:	441a      	add	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7fe fefa 	bl	8001b40 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <xTaskIncrementTick+0x148>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3b9      	bcc.n	8002cce <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d5e:	e7b6      	b.n	8002cce <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <xTaskIncrementTick+0x14c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e004      	b.n	8002d78 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <xTaskIncrementTick+0x150>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <xTaskIncrementTick+0x150>)
 8002d76:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d78:	697b      	ldr	r3, [r7, #20]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000488 	.word	0x20000488
 8002d88:	20000464 	.word	0x20000464
 8002d8c:	20000418 	.word	0x20000418
 8002d90:	2000041c 	.word	0x2000041c
 8002d94:	20000478 	.word	0x20000478
 8002d98:	20000480 	.word	0x20000480
 8002d9c:	20000468 	.word	0x20000468
 8002da0:	2000038c 	.word	0x2000038c
 8002da4:	20000388 	.word	0x20000388
 8002da8:	20000474 	.word	0x20000474
 8002dac:	20000470 	.word	0x20000470

08002db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <vTaskSwitchContext+0xa4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002dc4:	e03f      	b.n	8002e46 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <vTaskSwitchContext+0xac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f1c3 031f 	rsb	r3, r3, #31
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	491f      	ldr	r1, [pc, #124]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <vTaskSwitchContext+0x5a>
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d104      	bne.n	8002e3c <vTaskSwitchContext+0x8c>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <vTaskSwitchContext+0xb4>)
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000488 	.word	0x20000488
 8002e58:	20000474 	.word	0x20000474
 8002e5c:	20000468 	.word	0x20000468
 8002e60:	2000038c 	.word	0x2000038c
 8002e64:	20000388 	.word	0x20000388

08002e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60fb      	str	r3, [r7, #12]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <vTaskPlaceOnEventList+0x44>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fe76 	bl	8001b88 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	f000 fcc8 	bl	8003834 <prvAddCurrentTaskToDelayedList>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000388 	.word	0x20000388

08002eb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	617b      	str	r3, [r7, #20]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3318      	adds	r3, #24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7fe fe2d 	bl	8001b40 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68b8      	ldr	r0, [r7, #8]
 8002ef6:	f000 fc9d 	bl	8003834 <prvAddCurrentTaskToDelayedList>
    }
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000388 	.word	0x20000388

08002f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60fb      	str	r3, [r7, #12]
    }
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	3318      	adds	r3, #24
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe fe5e 	bl	8001bfa <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <xTaskRemoveFromEventList+0xac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11c      	bne.n	8002f80 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fe55 	bl	8001bfa <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <xTaskRemoveFromEventList+0xb0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <xTaskRemoveFromEventList+0xb0>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <xTaskRemoveFromEventList+0xb4>)
 8002f70:	441a      	add	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f7fe fde1 	bl	8001b40 <vListInsertEnd>
 8002f7e:	e005      	b.n	8002f8c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3318      	adds	r3, #24
 8002f84:	4619      	mov	r1, r3
 8002f86:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <xTaskRemoveFromEventList+0xb8>)
 8002f88:	f7fe fdda 	bl	8001b40 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <xTaskRemoveFromEventList+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d905      	bls.n	8002fa6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <xTaskRemoveFromEventList+0xc0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e001      	b.n	8002faa <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002faa:	697b      	ldr	r3, [r7, #20]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000488 	.word	0x20000488
 8002fb8:	20000468 	.word	0x20000468
 8002fbc:	2000038c 	.word	0x2000038c
 8002fc0:	20000420 	.word	0x20000420
 8002fc4:	20000388 	.word	0x20000388
 8002fc8:	20000474 	.word	0x20000474

08002fcc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <vTaskInternalSetTimeOutState+0x24>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <vTaskInternalSetTimeOutState+0x28>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	605a      	str	r2, [r3, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	20000478 	.word	0x20000478
 8002ff4:	20000464 	.word	0x20000464

08002ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	613b      	str	r3, [r7, #16]
    }
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800303a:	f001 f8fd 	bl	8004238 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <xTaskCheckForTimeOut+0xc4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	d102      	bne.n	800305e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	e026      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <xTaskCheckForTimeOut+0xc8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d00a      	beq.n	8003080 <xTaskCheckForTimeOut+0x88>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	429a      	cmp	r2, r3
 8003072:	d305      	bcc.n	8003080 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e015      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20b      	bcs.n	80030a2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad2      	subs	r2, r2, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff98 	bl	8002fcc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	e004      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030ac:	f001 f8f4 	bl	8004298 <vPortExitCritical>

    return xReturn;
 80030b0:	69fb      	ldr	r3, [r7, #28]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000464 	.word	0x20000464
 80030c0:	20000478 	.word	0x20000478

080030c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <vTaskMissedYield+0x14>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	20000474 	.word	0x20000474

080030dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030e4:	f000 f852 	bl	800318c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <prvIdleTask+0x28>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d9f9      	bls.n	80030e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <prvIdleTask+0x2c>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003100:	e7f0      	b.n	80030e4 <prvIdleTask+0x8>
 8003102:	bf00      	nop
 8003104:	2000038c 	.word	0x2000038c
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e00c      	b.n	8003132 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <prvInitialiseTaskLists+0x60>)
 8003124:	4413      	add	r3, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fcdd 	bl	8001ae6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d9ef      	bls.n	8003118 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003138:	480d      	ldr	r0, [pc, #52]	; (8003170 <prvInitialiseTaskLists+0x64>)
 800313a:	f7fe fcd4 	bl	8001ae6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800313e:	480d      	ldr	r0, [pc, #52]	; (8003174 <prvInitialiseTaskLists+0x68>)
 8003140:	f7fe fcd1 	bl	8001ae6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <prvInitialiseTaskLists+0x6c>)
 8003146:	f7fe fcce 	bl	8001ae6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800314a:	480c      	ldr	r0, [pc, #48]	; (800317c <prvInitialiseTaskLists+0x70>)
 800314c:	f7fe fccb 	bl	8001ae6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <prvInitialiseTaskLists+0x74>)
 8003152:	f7fe fcc8 	bl	8001ae6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <prvInitialiseTaskLists+0x78>)
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <prvInitialiseTaskLists+0x64>)
 800315a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <prvInitialiseTaskLists+0x7c>)
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <prvInitialiseTaskLists+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000038c 	.word	0x2000038c
 8003170:	200003f0 	.word	0x200003f0
 8003174:	20000404 	.word	0x20000404
 8003178:	20000420 	.word	0x20000420
 800317c:	20000434 	.word	0x20000434
 8003180:	2000044c 	.word	0x2000044c
 8003184:	20000418 	.word	0x20000418
 8003188:	2000041c 	.word	0x2000041c

0800318c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003192:	e019      	b.n	80031c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003194:	f001 f850 	bl	8004238 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003198:	4b10      	ldr	r3, [pc, #64]	; (80031dc <prvCheckTasksWaitingTermination+0x50>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fd28 	bl	8001bfa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031be:	f001 f86b 	bl	8004298 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f810 	bl	80031e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e1      	bne.n	8003194 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000434 	.word	0x20000434
 80031e0:	20000460 	.word	0x20000460
 80031e4:	20000448 	.word	0x20000448

080031e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fa21 	bl	800463c <vPortFree>
                vPortFree( pxTCB );
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f001 fa1e 	bl	800463c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <prvResetNextTaskUnblockTime+0x30>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <prvResetNextTaskUnblockTime+0x34>)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800321e:	e005      	b.n	800322c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <prvResetNextTaskUnblockTime+0x30>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <prvResetNextTaskUnblockTime+0x34>)
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000418 	.word	0x20000418
 800323c:	20000480 	.word	0x20000480

08003240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <xTaskGetSchedulerState+0x34>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800324e:	2301      	movs	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e008      	b.n	8003266 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <xTaskGetSchedulerState+0x38>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800325c:	2302      	movs	r3, #2
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	e001      	b.n	8003266 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003266:	687b      	ldr	r3, [r7, #4]
    }
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	2000046c 	.word	0x2000046c
 8003278:	20000488 	.word	0x20000488

0800327c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <xTaskPriorityDisinherit+0xe8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d00a      	beq.n	80032b2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	60bb      	str	r3, [r7, #8]
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d039      	beq.n	800335a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d135      	bne.n	800335a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fc81 	bl	8001bfa <uxListRemove>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4013      	ands	r3, r2
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003312:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1c3 0205 	rsb	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <xTaskPriorityDisinherit+0xf0>)
 8003348:	441a      	add	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fe fbf5 	bl	8001b40 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800335a:	697b      	ldr	r3, [r7, #20]
    }
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000388 	.word	0x20000388
 8003368:	20000468 	.word	0x20000468
 800336c:	2000038c 	.word	0x2000038c

08003370 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	613b      	str	r3, [r7, #16]
    }
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800339a:	f000 ff4d 	bl	8004238 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3354      	adds	r3, #84	; 0x54
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d022      	beq.n	80033f6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	3214      	adds	r2, #20
 80033b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	43d2      	mvns	r2, r2
 80033c0:	4011      	ands	r1, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	3214      	adds	r2, #20
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	3354      	adds	r3, #84	; 0x54
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033de:	2101      	movs	r1, #1
 80033e0:	6a38      	ldr	r0, [r7, #32]
 80033e2:	f000 fa27 	bl	8003834 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <xTaskGenericNotifyWait+0xfc>)
 80033e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80033f6:	f000 ff4f 	bl	8004298 <vPortExitCritical>

        taskENTER_CRITICAL();
 80033fa:	f000 ff1d 	bl	8004238 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	3214      	adds	r2, #20
 800340c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	3354      	adds	r3, #84	; 0x54
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d002      	beq.n	800342c <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e00e      	b.n	800344a <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	3214      	adds	r2, #20
 8003434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	43d2      	mvns	r2, r2
 800343c:	4011      	ands	r1, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	3214      	adds	r2, #20
 8003442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <xTaskGenericNotifyWait+0xf8>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	3354      	adds	r3, #84	; 0x54
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003458:	f000 ff1e 	bl	8004298 <vPortExitCritical>

        return xReturn;
 800345c:	697b      	ldr	r3, [r7, #20]
    }
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000388 	.word	0x20000388
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800347e:	2301      	movs	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <xTaskGenericNotify+0x2e>
        __asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
    }
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xTaskGenericNotify+0x4a>
        __asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61fb      	str	r3, [r7, #28]
    }
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80034be:	f000 febb 	bl	8004238 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	3214      	adds	r2, #20
 80034ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80034d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4413      	add	r3, r2
 80034dc:	3354      	adds	r3, #84	; 0x54
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80034e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	3354      	adds	r3, #84	; 0x54
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d83b      	bhi.n	800356e <xTaskGenericNotify+0xfe>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <xTaskGenericNotify+0x8c>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	0800358d 	.word	0x0800358d
 8003500:	08003511 	.word	0x08003511
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003545 	.word	0x08003545
 800350c:	08003553 	.word	0x08003553
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	3214      	adds	r2, #20
 8003516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	3214      	adds	r2, #20
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800352a:	e032      	b.n	8003592 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	3214      	adds	r2, #20
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	3214      	adds	r2, #20
 800353e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003542:	e026      	b.n	8003592 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	3214      	adds	r2, #20
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003550:	e01f      	b.n	8003592 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003556:	2b02      	cmp	r3, #2
 8003558:	d006      	beq.n	8003568 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	3214      	adds	r2, #20
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003566:	e014      	b.n	8003592 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800356c:	e011      	b.n	8003592 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <xTaskGenericNotify+0x1ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <xTaskGenericNotify+0x120>
        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	61bb      	str	r3, [r7, #24]
    }
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <xTaskGenericNotify+0x11a>
                    break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <xTaskGenericNotify+0x122>

                    break;
 8003590:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003596:	2b01      	cmp	r3, #1
 8003598:	d139      	bne.n	800360e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fb2b 	bl	8001bfa <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2201      	movs	r2, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <xTaskGenericNotify+0x1b0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <xTaskGenericNotify+0x1b0>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <xTaskGenericNotify+0x1b4>)
 80035c4:	441a      	add	r2, r3
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	3304      	adds	r3, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f7fe fab7 	bl	8001b40 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <xTaskGenericNotify+0x180>
        __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	617b      	str	r3, [r7, #20]
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <xTaskGenericNotify+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d907      	bls.n	800360e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <xTaskGenericNotify+0x1bc>)
 8003600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800360e:	f000 fe43 	bl	8004298 <vPortExitCritical>

        return xReturn;
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003614:	4618      	mov	r0, r3
 8003616:	3730      	adds	r7, #48	; 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000464 	.word	0x20000464
 8003620:	20000468 	.word	0x20000468
 8003624:	2000038c 	.word	0x2000038c
 8003628:	20000388 	.word	0x20000388
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b090      	sub	sp, #64	; 0x40
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800363e:	2301      	movs	r3, #1
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367a:	f000 febf 	bl	80043fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003682:	f3ef 8211 	mrs	r2, BASEPRI
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	627a      	str	r2, [r7, #36]	; 0x24
 8003698:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	3214      	adds	r2, #20
 80036aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80036b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4413      	add	r3, r2
 80036b8:	3354      	adds	r3, #84	; 0x54
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80036c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	3354      	adds	r3, #84	; 0x54
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d83b      	bhi.n	800374a <xTaskGenericNotifyFromISR+0x11a>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <xTaskGenericNotifyFromISR+0xa8>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	08003769 	.word	0x08003769
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	08003709 	.word	0x08003709
 80036e4:	08003721 	.word	0x08003721
 80036e8:	0800372f 	.word	0x0800372f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	3214      	adds	r2, #20
 80036f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	ea42 0103 	orr.w	r1, r2, r3
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	3214      	adds	r2, #20
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003706:	e032      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	3214      	adds	r2, #20
 800370e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	3214      	adds	r2, #20
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800371e:	e026      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	3214      	adds	r2, #20
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800372c:	e01f      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800372e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003732:	2b02      	cmp	r3, #2
 8003734:	d006      	beq.n	8003744 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	3214      	adds	r2, #20
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003742:	e014      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003744:	2300      	movs	r3, #0
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003748:	e011      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <xTaskGenericNotifyFromISR+0x1e8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800376c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800376e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003772:	2b01      	cmp	r3, #1
 8003774:	d145      	bne.n	8003802 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	61bb      	str	r3, [r7, #24]
    }
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <xTaskGenericNotifyFromISR+0x1ec>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11c      	bne.n	80037d6 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	3304      	adds	r3, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fa2a 	bl	8001bfa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	2201      	movs	r2, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <xTaskGenericNotifyFromISR+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <xTaskGenericNotifyFromISR+0x1f0>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <xTaskGenericNotifyFromISR+0x1f4>)
 80037c6:	441a      	add	r2, r3
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f7fe f9b6 	bl	8001b40 <vListInsertEnd>
 80037d4:	e005      	b.n	80037e2 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	3318      	adds	r3, #24
 80037da:	4619      	mov	r1, r3
 80037dc:	4812      	ldr	r0, [pc, #72]	; (8003828 <xTaskGenericNotifyFromISR+0x1f8>)
 80037de:	f7fe f9af 	bl	8001b40 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <xTaskGenericNotifyFromISR+0x1fc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d908      	bls.n	8003802 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <xTaskGenericNotifyFromISR+0x200>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f383 8811 	msr	BASEPRI, r3
    }
 800380c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003810:	4618      	mov	r0, r3
 8003812:	3740      	adds	r7, #64	; 0x40
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000464 	.word	0x20000464
 800381c:	20000488 	.word	0x20000488
 8003820:	20000468 	.word	0x20000468
 8003824:	2000038c 	.word	0x2000038c
 8003828:	20000420 	.word	0x20000420
 800382c:	20000388 	.word	0x20000388
 8003830:	20000474 	.word	0x20000474

08003834 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f9d5 	bl	8001bfa <uxListRemove>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4013      	ands	r3, r2
 800386a:	4a20      	ldr	r2, [pc, #128]	; (80038ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800386c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003874:	d10a      	bne.n	800388c <prvAddCurrentTaskToDelayedList+0x58>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	481a      	ldr	r0, [pc, #104]	; (80038f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003886:	f7fe f95b 	bl	8001b40 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800388a:	e026      	b.n	80038da <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d209      	bcs.n	80038b8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fe f969 	bl	8001b88 <vListInsert>
}
 80038b6:	e010      	b.n	80038da <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7fe f95f 	bl	8001b88 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d202      	bcs.n	80038da <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6013      	str	r3, [r2, #0]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000464 	.word	0x20000464
 80038e8:	20000388 	.word	0x20000388
 80038ec:	20000468 	.word	0x20000468
 80038f0:	2000044c 	.word	0x2000044c
 80038f4:	2000041c 	.word	0x2000041c
 80038f8:	20000418 	.word	0x20000418
 80038fc:	20000480 	.word	0x20000480

08003900 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800390a:	f000 fb31 	bl	8003f70 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <xTimerCreateTimerTask+0x54>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <xTimerCreateTimerTask+0x58>)
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2302      	movs	r3, #2
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003924:	490d      	ldr	r1, [pc, #52]	; (800395c <xTimerCreateTimerTask+0x5c>)
 8003926:	480e      	ldr	r0, [pc, #56]	; (8003960 <xTimerCreateTimerTask+0x60>)
 8003928:	f7fe ff46 	bl	80027b8 <xTaskCreate>
 800392c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	603b      	str	r3, [r7, #0]
    }
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800394a:	687b      	ldr	r3, [r7, #4]
    }
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200004bc 	.word	0x200004bc
 8003958:	200004c0 	.word	0x200004c0
 800395c:	0800affc 	.word	0x0800affc
 8003960:	08003b51 	.word	0x08003b51

08003964 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003972:	202c      	movs	r0, #44	; 0x2c
 8003974:	f000 fd82 	bl	800447c <pvPortMalloc>
 8003978:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f805 	bl	80039a6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800399c:	697b      	ldr	r3, [r7, #20]
        }
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	617b      	str	r3, [r7, #20]
    }
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01e      	beq.n	8003a14 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80039d6:	f000 facb 	bl	8003f70 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f895 	bl	8001b26 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <xTimerGenericCommand+0x98>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02a      	beq.n	8003aa8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	dc18      	bgt.n	8003a96 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a64:	f7ff fbec 	bl	8003240 <xTaskGetSchedulerState>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d109      	bne.n	8003a82 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <xTimerGenericCommand+0x98>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f107 0114 	add.w	r1, r7, #20
 8003a76:	2300      	movs	r3, #0
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	f7fe f9d3 	bl	8001e24 <xQueueGenericSend>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a80:	e012      	b.n	8003aa8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <xTimerGenericCommand+0x98>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0114 	add.w	r1, r7, #20
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f7fe f9c9 	bl	8001e24 <xQueueGenericSend>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
 8003a94:	e008      	b.n	8003aa8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <xTimerGenericCommand+0x98>)
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f107 0114 	add.w	r1, r7, #20
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	f7fe fabd 	bl	8002020 <xQueueGenericSendFromISR>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200004bc 	.word	0x200004bc

08003ab8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <prvProcessExpiredTimer+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe f892 	bl	8001bfa <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d022      	beq.n	8003b2a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	18d1      	adds	r1, r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f000 f8d1 	bl	8003c98 <prvInsertTimerInActiveList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01f      	beq.n	8003b3c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	2100      	movs	r1, #0
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff88 	bl	8003a1c <xTimerGenericCommand>
 8003b0c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	6978      	ldr	r0, [r7, #20]
 8003b42:	4798      	blx	r3
    }
 8003b44:	bf00      	nop
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200004b4 	.word	0x200004b4

08003b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f857 	bl	8003c10 <prvGetNextExpireTime>
 8003b62:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4619      	mov	r1, r3
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f803 	bl	8003b74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b6e:	f000 f8d5 	bl	8003d1c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b72:	e7f1      	b.n	8003b58 <prvTimerTask+0x8>

08003b74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b7e:	f7fe ffb3 	bl	8002ae8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f866 	bl	8003c58 <prvSampleTimeNow>
 8003b8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d130      	bne.n	8003bf6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <prvProcessTimerOrBlockTask+0x3c>
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d806      	bhi.n	8003bb0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003ba2:	f7fe ffaf 	bl	8002b04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff85 	bl	8003ab8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bae:	e024      	b.n	8003bfa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <prvProcessTimerOrBlockTask+0x90>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <prvProcessTimerOrBlockTask+0x50>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <prvProcessTimerOrBlockTask+0x52>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <prvProcessTimerOrBlockTask+0x94>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f7fe fdbb 	bl	8002750 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bda:	f7fe ff93 	bl	8002b04 <xTaskResumeAll>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <prvProcessTimerOrBlockTask+0x98>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
    }
 8003bf4:	e001      	b.n	8003bfa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003bf6:	f7fe ff85 	bl	8002b04 <xTaskResumeAll>
    }
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200004b8 	.word	0x200004b8
 8003c08:	200004bc 	.word	0x200004bc
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <prvGetNextExpireTime+0x44>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <prvGetNextExpireTime+0x16>
 8003c22:	2201      	movs	r2, #1
 8003c24:	e000      	b.n	8003c28 <prvGetNextExpireTime+0x18>
 8003c26:	2200      	movs	r2, #0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <prvGetNextExpireTime+0x44>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e001      	b.n	8003c44 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c44:	68fb      	ldr	r3, [r7, #12]
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	200004b4 	.word	0x200004b4

08003c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c60:	f7fe ffec 	bl	8002c3c <xTaskGetTickCount>
 8003c64:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <prvSampleTimeNow+0x3c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d205      	bcs.n	8003c7c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c70:	f000 f91a 	bl	8003ea8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e002      	b.n	8003c82 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <prvSampleTimeNow+0x3c>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c88:	68fb      	ldr	r3, [r7, #12]
    }
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200004c4 	.word	0x200004c4

08003c98 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d812      	bhi.n	8003ce4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e01b      	b.n	8003d0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <prvInsertTimerInActiveList+0x7c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f7fd ff53 	bl	8001b88 <vListInsert>
 8003ce2:	e012      	b.n	8003d0a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d206      	bcs.n	8003cfa <prvInsertTimerInActiveList+0x62>
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e007      	b.n	8003d0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvInsertTimerInActiveList+0x80>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fd ff3f 	bl	8001b88 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d0a:	697b      	ldr	r3, [r7, #20]
    }
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200004b8 	.word	0x200004b8
 8003d18:	200004b4 	.word	0x200004b4

08003d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d22:	e0ae      	b.n	8003e82 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f2c0 80aa 	blt.w	8003e80 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd ff5c 	bl	8001bfa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff87 	bl	8003c58 <prvSampleTimeNow>
 8003d4a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b09      	cmp	r3, #9
 8003d50:	f200 8097 	bhi.w	8003e82 <prvProcessReceivedCommands+0x166>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <prvProcessReceivedCommands+0x40>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d85 	.word	0x08003d85
 8003d68:	08003df9 	.word	0x08003df9
 8003d6c:	08003e0d 	.word	0x08003e0d
 8003d70:	08003e57 	.word	0x08003e57
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d85 	.word	0x08003d85
 8003d7c:	08003df9 	.word	0x08003df9
 8003d80:	08003e0d 	.word	0x08003e0d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	18d1      	adds	r1, r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da4:	f7ff ff78 	bl	8003c98 <prvInsertTimerInActiveList>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d069      	beq.n	8003e82 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003db4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d05e      	beq.n	8003e82 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	441a      	add	r2, r3
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd6:	f7ff fe21 	bl	8003a1c <xTimerGenericCommand>
 8003dda:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d14f      	bne.n	8003e82 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	61bb      	str	r3, [r7, #24]
    }
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e0a:	e03a      	b.n	8003e82 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	617b      	str	r3, [r7, #20]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	18d1      	adds	r1, r2, r3
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e50:	f7ff ff22 	bl	8003c98 <prvInsertTimerInActiveList>
                        break;
 8003e54:	e015      	b.n	8003e82 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e66:	f000 fbe9 	bl	800463c <vPortFree>
 8003e6a:	e00a      	b.n	8003e82 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e7e:	e000      	b.n	8003e82 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e80:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <prvProcessReceivedCommands+0x188>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f107 0108 	add.w	r1, r7, #8
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f971 	bl	8002174 <xQueueReceive>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f af45 	bne.w	8003d24 <prvProcessReceivedCommands+0x8>
        }
    }
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200004bc 	.word	0x200004bc

08003ea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eae:	e048      	b.n	8003f42 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fe96 	bl	8001bfa <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02e      	beq.n	8003f42 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90e      	bls.n	8003f14 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fd fe3b 	bl	8001b88 <vListInsert>
 8003f12:	e016      	b.n	8003f42 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f14:	2300      	movs	r3, #0
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fd7c 	bl	8003a1c <xTimerGenericCommand>
 8003f24:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	603b      	str	r3, [r7, #0]
    }
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1b1      	bne.n	8003eb0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <prvSwitchTimerLists+0xc4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <prvSwitchTimerLists+0xc0>)
 8003f58:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <prvSwitchTimerLists+0xc4>)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	6013      	str	r3, [r2, #0]
    }
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	200004b4 	.word	0x200004b4
 8003f6c:	200004b8 	.word	0x200004b8

08003f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f74:	f000 f960 	bl	8004238 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <prvCheckForValidListAndQueue+0x54>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11d      	bne.n	8003fbc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f80:	4811      	ldr	r0, [pc, #68]	; (8003fc8 <prvCheckForValidListAndQueue+0x58>)
 8003f82:	f7fd fdb0 	bl	8001ae6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f86:	4811      	ldr	r0, [pc, #68]	; (8003fcc <prvCheckForValidListAndQueue+0x5c>)
 8003f88:	f7fd fdad 	bl	8001ae6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <prvCheckForValidListAndQueue+0x60>)
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <prvCheckForValidListAndQueue+0x58>)
 8003f90:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <prvCheckForValidListAndQueue+0x64>)
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <prvCheckForValidListAndQueue+0x5c>)
 8003f96:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f98:	2200      	movs	r2, #0
 8003f9a:	210c      	movs	r1, #12
 8003f9c:	200a      	movs	r0, #10
 8003f9e:	f7fd febf 	bl	8001d20 <xQueueGenericCreate>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <prvCheckForValidListAndQueue+0x54>)
 8003fa6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <prvCheckForValidListAndQueue+0x54>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <prvCheckForValidListAndQueue+0x54>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4908      	ldr	r1, [pc, #32]	; (8003fd8 <prvCheckForValidListAndQueue+0x68>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fba0 	bl	80026fc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fbc:	f000 f96c 	bl	8004298 <vPortExitCritical>
    }
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200004bc 	.word	0x200004bc
 8003fc8:	2000048c 	.word	0x2000048c
 8003fcc:	200004a0 	.word	0x200004a0
 8003fd0:	200004b4 	.word	0x200004b4
 8003fd4:	200004b8 	.word	0x200004b8
 8003fd8:	0800b004 	.word	0x0800b004

08003fdc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800400c:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <pxPortInitialiseStack+0x64>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b14      	subs	r3, #20
 8004016:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b20      	subs	r3, #32
 8004030:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	08004045 	.word	0x08004045

08004044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <prvTaskExitError+0x54>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004056:	d00a      	beq.n	800406e <prvTaskExitError+0x2a>
        __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
    }
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <prvTaskExitError+0x28>
        __asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60bb      	str	r3, [r7, #8]
    }
 8004080:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004082:	bf00      	nop
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0fc      	beq.n	8004084 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	2000001c 	.word	0x2000001c
 800409c:	00000000 	.word	0x00000000

080040a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	4770      	bx	lr
 80040bc:	f3af 8000 	nop.w

080040c0 <pxCurrentTCBConst2>:
 80040c0:	20000388 	.word	0x20000388
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <prvPortStartFirstTask+0x24>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f380 8808 	msr	MSP, r0
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8814 	msr	CONTROL, r0
 80040da:	b662      	cpsie	i
 80040dc:	b661      	cpsie	f
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	df00      	svc	0
 80040e8:	bf00      	nop
 80040ea:	0000      	.short	0x0000
 80040ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop

080040f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <xPortStartScheduler+0x120>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a46      	ldr	r2, [pc, #280]	; (8004218 <xPortStartScheduler+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10a      	bne.n	800411a <xPortStartScheduler+0x26>
        __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	613b      	str	r3, [r7, #16]
    }
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <xPortStartScheduler+0x120>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3f      	ldr	r2, [pc, #252]	; (800421c <xPortStartScheduler+0x128>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10a      	bne.n	800413a <xPortStartScheduler+0x46>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
    }
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xPortStartScheduler+0x12c>)
 800413c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <xPortStartScheduler+0x130>)
 8004160:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <xPortStartScheduler+0x134>)
 8004164:	2207      	movs	r2, #7
 8004166:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004168:	e009      	b.n	800417e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <xPortStartScheduler+0x134>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3b01      	subs	r3, #1
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <xPortStartScheduler+0x134>)
 8004172:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d0ef      	beq.n	800416a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800418a:	4b27      	ldr	r3, [pc, #156]	; (8004228 <xPortStartScheduler+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1c3 0307 	rsb	r3, r3, #7
 8004192:	2b04      	cmp	r3, #4
 8004194:	d00a      	beq.n	80041ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
    }
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <xPortStartScheduler+0x134>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <xPortStartScheduler+0x134>)
 80041b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <xPortStartScheduler+0x134>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <xPortStartScheduler+0x134>)
 80041c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <xPortStartScheduler+0x138>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <xPortStartScheduler+0x138>)
 80041d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <xPortStartScheduler+0x138>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a14      	ldr	r2, [pc, #80]	; (800422c <xPortStartScheduler+0x138>)
 80041dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041e2:	f000 f8db 	bl	800439c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <xPortStartScheduler+0x13c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041ec:	f000 f8fa 	bl	80043e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041f0:	4b10      	ldr	r3, [pc, #64]	; (8004234 <xPortStartScheduler+0x140>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <xPortStartScheduler+0x140>)
 80041f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041fc:	f7ff ff64 	bl	80040c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004200:	f7fe fdd6 	bl	8002db0 <vTaskSwitchContext>
    prvTaskExitError();
 8004204:	f7ff ff1e 	bl	8004044 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	410fc271 	.word	0x410fc271
 800421c:	410fc270 	.word	0x410fc270
 8004220:	e000e400 	.word	0xe000e400
 8004224:	200004c8 	.word	0x200004c8
 8004228:	200004cc 	.word	0x200004cc
 800422c:	e000ed20 	.word	0xe000ed20
 8004230:	2000001c 	.word	0x2000001c
 8004234:	e000ef34 	.word	0xe000ef34

08004238 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
        __asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	607b      	str	r3, [r7, #4]
    }
 8004250:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <vPortEnterCritical+0x58>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <vPortEnterCritical+0x58>)
 800425a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <vPortEnterCritical+0x58>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10f      	bne.n	8004284 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <vPortEnterCritical+0x5c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <vPortEnterCritical+0x4c>
        __asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	603b      	str	r3, [r7, #0]
    }
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <vPortEnterCritical+0x4a>
    }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	2000001c 	.word	0x2000001c
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <vPortExitCritical+0x50>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <vPortExitCritical+0x24>
        __asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	607b      	str	r3, [r7, #4]
    }
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <vPortExitCritical+0x50>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <vPortExitCritical+0x50>)
 80042c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <vPortExitCritical+0x50>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <vPortExitCritical+0x42>
 80042ce:	2300      	movs	r3, #0
 80042d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f383 8811 	msr	BASEPRI, r3
    }
 80042d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	2000001c 	.word	0x2000001c
 80042ec:	00000000 	.word	0x00000000

080042f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80042f0:	f3ef 8009 	mrs	r0, PSP
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <pxCurrentTCBConst>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f01e 0f10 	tst.w	lr, #16
 8004300:	bf08      	it	eq
 8004302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	6010      	str	r0, [r2, #0]
 800430c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004314:	f380 8811 	msr	BASEPRI, r0
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f7fe fd46 	bl	8002db0 <vTaskSwitchContext>
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f380 8811 	msr	BASEPRI, r0
 800432c:	bc09      	pop	{r0, r3}
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	6808      	ldr	r0, [r1, #0]
 8004332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004336:	f01e 0f10 	tst.w	lr, #16
 800433a:	bf08      	it	eq
 800433c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004340:	f380 8809 	msr	PSP, r0
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst>:
 8004350:	20000388 	.word	0x20000388
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
        __asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	607b      	str	r3, [r7, #4]
    }
 8004370:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004372:	f7fe fc73 	bl	8002c5c <xTaskIncrementTick>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <SysTick_Handler+0x40>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f383 8811 	msr	BASEPRI, r3
    }
 800438e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortSetupTimerInterrupt+0x38>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <vPortSetupTimerInterrupt+0x3c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <vPortSetupTimerInterrupt+0x40>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <vPortSetupTimerInterrupt+0x44>)
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010
 80043d4:	e000e018 	.word	0xe000e018
 80043d8:	20000020 	.word	0x20000020
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	e000e014 	.word	0xe000e014

080043e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043f4 <vPortEnableVFP+0x10>
 80043e8:	6801      	ldr	r1, [r0, #0]
 80043ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ee:	6001      	str	r1, [r0, #0]
 80043f0:	4770      	bx	lr
 80043f2:	0000      	.short	0x0000
 80043f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop

080043fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004402:	f3ef 8305 	mrs	r3, IPSR
 8004406:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	d914      	bls.n	8004438 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <vPortValidateInterruptPriority+0x70>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <vPortValidateInterruptPriority+0x74>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	7afa      	ldrb	r2, [r7, #11]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20a      	bcs.n	8004438 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <vPortValidateInterruptPriority+0x78>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004440:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <vPortValidateInterruptPriority+0x7c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d90a      	bls.n	800445e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	603b      	str	r3, [r7, #0]
    }
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <vPortValidateInterruptPriority+0x60>
    }
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e3f0 	.word	0xe000e3f0
 8004470:	200004c8 	.word	0x200004c8
 8004474:	e000ed0c 	.word	0xe000ed0c
 8004478:	200004cc 	.word	0x200004cc

0800447c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004488:	f7fe fb2e 	bl	8002ae8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800448c:	4b65      	ldr	r3, [pc, #404]	; (8004624 <pvPortMalloc+0x1a8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004494:	f000 f934 	bl	8004700 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004498:	4b63      	ldr	r3, [pc, #396]	; (8004628 <pvPortMalloc+0x1ac>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 80a7 	bne.w	80045f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02d      	beq.n	8004508 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80044ac:	2208      	movs	r2, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d227      	bcs.n	8004508 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80044b8:	2208      	movs	r2, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d021      	beq.n	800450e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	3308      	adds	r3, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d214      	bcs.n	8004502 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	3308      	adds	r3, #8
 80044e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <pvPortMalloc+0x92>
        __asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	617b      	str	r3, [r7, #20]
    }
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004506:	e002      	b.n	800450e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	e000      	b.n	8004510 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800450e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d06e      	beq.n	80045f4 <pvPortMalloc+0x178>
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <pvPortMalloc+0x1b0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d869      	bhi.n	80045f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <pvPortMalloc+0x1b4>)
 8004522:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004524:	4b42      	ldr	r3, [pc, #264]	; (8004630 <pvPortMalloc+0x1b4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800452a:	e004      	b.n	8004536 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d903      	bls.n	8004548 <pvPortMalloc+0xcc>
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f1      	bne.n	800452c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004548:	4b36      	ldr	r3, [pc, #216]	; (8004624 <pvPortMalloc+0x1a8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	429a      	cmp	r2, r3
 8004550:	d050      	beq.n	80045f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2208      	movs	r2, #8
 8004558:	4413      	add	r3, r2
 800455a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	2308      	movs	r3, #8
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	429a      	cmp	r2, r3
 8004572:	d91f      	bls.n	80045b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <pvPortMalloc+0x120>
        __asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	613b      	str	r3, [r7, #16]
    }
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ae:	69b8      	ldr	r0, [r7, #24]
 80045b0:	f000 f908 	bl	80047c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b4:	4b1d      	ldr	r3, [pc, #116]	; (800462c <pvPortMalloc+0x1b0>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	4a1b      	ldr	r2, [pc, #108]	; (800462c <pvPortMalloc+0x1b0>)
 80045c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <pvPortMalloc+0x1b0>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <pvPortMalloc+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d203      	bcs.n	80045d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <pvPortMalloc+0x1b0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <pvPortMalloc+0x1b8>)
 80045d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <pvPortMalloc+0x1ac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	431a      	orrs	r2, r3
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <pvPortMalloc+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <pvPortMalloc+0x1bc>)
 80045f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80045f4:	f7fe fa86 	bl	8002b04 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <pvPortMalloc+0x19c>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60fb      	str	r3, [r7, #12]
    }
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <pvPortMalloc+0x19a>
    return pvReturn;
 8004618:	69fb      	ldr	r3, [r7, #28]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3728      	adds	r7, #40	; 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200130d8 	.word	0x200130d8
 8004628:	200130ec 	.word	0x200130ec
 800462c:	200130dc 	.word	0x200130dc
 8004630:	200130d0 	.word	0x200130d0
 8004634:	200130e0 	.word	0x200130e0
 8004638:	200130e4 	.word	0x200130e4

0800463c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04d      	beq.n	80046ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800464e:	2308      	movs	r3, #8
 8004650:	425b      	negs	r3, r3
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <vPortFree+0xb8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <vPortFree+0x44>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <vPortFree+0x62>
        __asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60bb      	str	r3, [r7, #8]
    }
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <vPortFree+0xb8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01e      	beq.n	80046ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11a      	bne.n	80046ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <vPortFree+0xb8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80046c4:	f7fe fa10 	bl	8002ae8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vPortFree+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <vPortFree+0xbc>)
 80046d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046d6:	6938      	ldr	r0, [r7, #16]
 80046d8:	f000 f874 	bl	80047c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <vPortFree+0xc0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a06      	ldr	r2, [pc, #24]	; (80046fc <vPortFree+0xc0>)
 80046e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046e6:	f7fe fa0d 	bl	8002b04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200130ec 	.word	0x200130ec
 80046f8:	200130dc 	.word	0x200130dc
 80046fc:	200130e8 	.word	0x200130e8

08004700 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004706:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800470a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <prvHeapInit+0xac>)
 800470e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3307      	adds	r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0307 	bic.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <prvHeapInit+0xac>)
 8004730:	4413      	add	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004738:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <prvHeapInit+0xb0>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <prvHeapInit+0xb0>)
 8004740:	2200      	movs	r2, #0
 8004742:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800474c:	2208      	movs	r2, #8
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <prvHeapInit+0xb4>)
 8004760:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <prvHeapInit+0xb4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <prvHeapInit+0xb4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <prvHeapInit+0xb4>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <prvHeapInit+0xb8>)
 800478e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <prvHeapInit+0xbc>)
 8004796:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <prvHeapInit+0xc0>)
 800479a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	200004d0 	.word	0x200004d0
 80047b0:	200130d0 	.word	0x200130d0
 80047b4:	200130d8 	.word	0x200130d8
 80047b8:	200130e0 	.word	0x200130e0
 80047bc:	200130dc 	.word	0x200130dc
 80047c0:	200130ec 	.word	0x200130ec

080047c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047cc:	4b28      	ldr	r3, [pc, #160]	; (8004870 <prvInsertBlockIntoFreeList+0xac>)
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e002      	b.n	80047d8 <prvInsertBlockIntoFreeList+0x14>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d8f7      	bhi.n	80047d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d108      	bne.n	8004806 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d118      	bne.n	800484c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b15      	ldr	r3, [pc, #84]	; (8004874 <prvInsertBlockIntoFreeList+0xb0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d00d      	beq.n	8004842 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e008      	b.n	8004854 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <prvInsertBlockIntoFreeList+0xb0>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e003      	b.n	8004854 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d002      	beq.n	8004862 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200130d0 	.word	0x200130d0
 8004874:	200130d8 	.word	0x200130d8

08004878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	2b00      	cmp	r3, #0
 8004888:	db0b      	blt.n	80048a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	f003 021f 	and.w	r2, r3, #31
 8004890:	4907      	ldr	r1, [pc, #28]	; (80048b0 <__NVIC_EnableIRQ+0x38>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2001      	movs	r0, #1
 800489a:	fa00 f202 	lsl.w	r2, r0, r2
 800489e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e100 	.word	0xe000e100

080048b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	db0a      	blt.n	80048de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	490c      	ldr	r1, [pc, #48]	; (8004900 <__NVIC_SetPriority+0x4c>)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	0112      	lsls	r2, r2, #4
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	440b      	add	r3, r1
 80048d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048dc:	e00a      	b.n	80048f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4908      	ldr	r1, [pc, #32]	; (8004904 <__NVIC_SetPriority+0x50>)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3b04      	subs	r3, #4
 80048ec:	0112      	lsls	r2, r2, #4
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	440b      	add	r3, r1
 80048f2:	761a      	strb	r2, [r3, #24]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000e100 	.word	0xe000e100
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004918:	b672      	cpsid	i
}
 800491a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a85      	ldr	r2, [pc, #532]	; (8004b38 <BasicTimer_Config+0x230>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d106      	bne.n	8004934 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8004926:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <BasicTimer_Config+0x234>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4a84      	ldr	r2, [pc, #528]	; (8004b3c <BasicTimer_Config+0x234>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6453      	str	r3, [r2, #68]	; 0x44
 8004932:	e030      	b.n	8004996 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d106      	bne.n	800494c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800493e:	4b7f      	ldr	r3, [pc, #508]	; (8004b3c <BasicTimer_Config+0x234>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a7e      	ldr	r2, [pc, #504]	; (8004b3c <BasicTimer_Config+0x234>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	e024      	b.n	8004996 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7b      	ldr	r2, [pc, #492]	; (8004b40 <BasicTimer_Config+0x238>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d106      	bne.n	8004964 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004956:	4b79      	ldr	r3, [pc, #484]	; (8004b3c <BasicTimer_Config+0x234>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a78      	ldr	r2, [pc, #480]	; (8004b3c <BasicTimer_Config+0x234>)
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	e018      	b.n	8004996 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a76      	ldr	r2, [pc, #472]	; (8004b44 <BasicTimer_Config+0x23c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d106      	bne.n	800497c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800496e:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <BasicTimer_Config+0x234>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a72      	ldr	r2, [pc, #456]	; (8004b3c <BasicTimer_Config+0x234>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	e00c      	b.n	8004996 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a71      	ldr	r2, [pc, #452]	; (8004b48 <BasicTimer_Config+0x240>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d106      	bne.n	8004994 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004986:	4b6d      	ldr	r3, [pc, #436]	; (8004b3c <BasicTimer_Config+0x234>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	4a6c      	ldr	r2, [pc, #432]	; (8004b3c <BasicTimer_Config+0x234>)
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	6413      	str	r3, [r2, #64]	; 0x40
 8004992:	e000      	b.n	8004996 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8004994:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049a4:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	791b      	ldrb	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 80d3 	bne.w	8004b60 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0210 	bic.w	r2, r2, #16
 80049c8:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2ba0      	cmp	r3, #160	; 0xa0
 80049d4:	d022      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2bc8      	cmp	r3, #200	; 0xc8
 80049da:	d01f      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80049e2:	d01b      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80049ea:	d017      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f2:	d013      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80049fa:	d00f      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004a02:	d00b      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004a0a:	d007      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a12:	d003      	beq.n	8004a1c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1a:	d10b      	bne.n	8004a34 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2264      	movs	r2, #100	; 0x64
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a32:	e07c      	b.n	8004b2e <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a3a:	d029      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a42:	d025      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d020      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a54:	d01c      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d017      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d012      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004a7a:	d009      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f242 3228 	movw	r2, #9000	; 0x2328
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa8:	e041      	b.n	8004b2e <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004ab0:	d028      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d023      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f247 5230 	movw	r2, #30000	; 0x7530
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01e      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d019      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d014      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <BasicTimer_Config+0x244>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <BasicTimer_Config+0x248>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <BasicTimer_Config+0x24c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <BasicTimer_Config+0x250>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b14:	e00b      	b.n	8004b2e <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <BasicTimer_Config+0x254>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
 8004b36:	e027      	b.n	8004b88 <BasicTimer_Config+0x280>
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	00011170 	.word	0x00011170
 8004b50:	00013880 	.word	0x00013880
 8004b54:	00015f90 	.word	0x00015f90
 8004b58:	000186a0 	.word	0x000186a0
 8004b5c:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0210 	orr.w	r2, r2, #16
 8004b6e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3a01      	subs	r2, #1
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d103      	bne.n	8004baa <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8004ba2:	201c      	movs	r0, #28
 8004ba4:	f7ff fe68 	bl	8004878 <__NVIC_EnableIRQ>
 8004ba8:	e01b      	b.n	8004be2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <BasicTimer_Config+0x2e8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8004bb4:	201d      	movs	r0, #29
 8004bb6:	f7ff fe5f 	bl	8004878 <__NVIC_EnableIRQ>
 8004bba:	e012      	b.n	8004be2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <BasicTimer_Config+0x2ec>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d103      	bne.n	8004bce <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8004bc6:	201e      	movs	r0, #30
 8004bc8:	f7ff fe56 	bl	8004878 <__NVIC_EnableIRQ>
 8004bcc:	e009      	b.n	8004be2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <BasicTimer_Config+0x2f0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8004bd8:	2032      	movs	r0, #50	; 0x32
 8004bda:	f7ff fe4d 	bl	8004878 <__NVIC_EnableIRQ>
 8004bde:	e000      	b.n	8004be2 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 8004be0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004be2:	b662      	cpsie	i
}
 8004be4:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00

08004bfc <TIM_SetPriority>:

void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c08:	b672      	cpsid	i
}
 8004c0a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d105      	bne.n	8004c22 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	201c      	movs	r0, #28
 8004c1c:	f7ff fe4a 	bl	80048b4 <__NVIC_SetPriority>
 8004c20:	e021      	b.n	8004c66 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <TIM_SetPriority+0x78>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d105      	bne.n	8004c38 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	201d      	movs	r0, #29
 8004c32:	f7ff fe3f 	bl	80048b4 <__NVIC_SetPriority>
 8004c36:	e016      	b.n	8004c66 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <TIM_SetPriority+0x7c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d105      	bne.n	8004c4e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	4619      	mov	r1, r3
 8004c46:	201e      	movs	r0, #30
 8004c48:	f7ff fe34 	bl	80048b4 <__NVIC_SetPriority>
 8004c4c:	e00b      	b.n	8004c66 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <TIM_SetPriority+0x80>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d105      	bne.n	8004c64 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2032      	movs	r0, #50	; 0x32
 8004c5e:	f7ff fe29 	bl	80048b4 <__NVIC_SetPriority>
 8004c62:	e000      	b.n	8004c66 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8004c64:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004c66:	b662      	cpsie	i
}
 8004c68:	bf00      	nop
	}

	__enable_irq();

}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00

08004c80 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004c84:	bf00      	nop
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004c94:	bf00      	nop
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004ca4:	bf00      	nop
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004cb4:	bf00      	nop
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004cc4:	bf00      	nop
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004cd4:	bf00      	nop
}
 8004cd6:	bf00      	nop
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004ce4:	bf00      	nop
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004cf4:	bf00      	nop
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d04:	bf00      	nop
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d14:	bf00      	nop
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d24:	bf00      	nop
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d34:	bf00      	nop
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d44:	bf00      	nop
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d54:	bf00      	nop
}
 8004d56:	bf00      	nop
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d64:	bf00      	nop
}
 8004d66:	bf00      	nop
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d74:	bf00      	nop
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d84:	bf00      	nop
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004d94:	bf00      	nop
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8004da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8004db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8004dc2:	f7fc fbbd 	bl	8001540 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8004dc6:	e066      	b.n	8004e96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8004dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8004dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004de0:	f023 0302 	bic.w	r3, r3, #2
 8004de4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8004de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8004df6:	f7ff ff5b 	bl	8004cb0 <Capture_TIM2_Ch1_Callback>
}
 8004dfa:	e04c      	b.n	8004e96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8004dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8004e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8004e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e28:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8004e2a:	f7ff ff49 	bl	8004cc0 <Capture_TIM2_Ch2_Callback>
}
 8004e2e:	e032      	b.n	8004e96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8004e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d012      	beq.n	8004e64 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8004e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e48:	f023 0308 	bic.w	r3, r3, #8
 8004e4c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8004e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e5c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8004e5e:	f7ff ff37 	bl	8004cd0 <Capture_TIM2_Ch3_Callback>
}
 8004e62:	e018      	b.n	8004e96 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8004e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8004e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e7c:	f023 0310 	bic.w	r3, r3, #16
 8004e80:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8004e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e90:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8004e92:	f7ff ff25 	bl	8004ce0 <Capture_TIM2_Ch4_Callback>
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8004eac:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8004eb8:	f7ff fee2 	bl	8004c80 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8004ebc:	e052      	b.n	8004f64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00e      	beq.n	8004ee8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ed0:	f023 0302 	bic.w	r3, r3, #2
 8004ed4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8004ee2:	f7ff ff05 	bl	8004cf0 <Capture_TIM3_Ch1_Callback>
}
 8004ee6:	e03d      	b.n	8004f64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8004ee8:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00e      	beq.n	8004f12 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004efa:	f023 0304 	bic.w	r3, r3, #4
 8004efe:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8004f0c:	f7ff fef8 	bl	8004d00 <Capture_TIM3_Ch2_Callback>
}
 8004f10:	e028      	b.n	8004f64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f24:	f023 0308 	bic.w	r3, r3, #8
 8004f28:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f34:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8004f36:	f7ff feeb 	bl	8004d10 <Capture_TIM3_Ch3_Callback>
}
 8004f3a:	e013      	b.n	8004f64 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f4e:	f023 0310 	bic.w	r3, r3, #16
 8004f52:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	4a03      	ldr	r2, [pc, #12]	; (8004f68 <TIM3_IRQHandler+0xcc>)
 8004f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f5e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8004f60:	f7ff fede 	bl	8004d20 <Capture_TIM3_Ch4_Callback>
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40000400 	.word	0x40000400

08004f6c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8004f70:	4b31      	ldr	r3, [pc, #196]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8004f7c:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8004f88:	f7ff fe82 	bl	8004c90 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8004f8c:	e052      	b.n	8005034 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00e      	beq.n	8004fb8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8004f9a:	4b27      	ldr	r3, [pc, #156]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fa0:	f023 0302 	bic.w	r3, r3, #2
 8004fa4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8004fa6:	4b24      	ldr	r3, [pc, #144]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	4a23      	ldr	r2, [pc, #140]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8004fb2:	f7ff febd 	bl	8004d30 <Capture_TIM4_Ch1_Callback>
}
 8004fb6:	e03d      	b.n	8005034 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8004fb8:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8004fc4:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fda:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8004fdc:	f7ff fec8 	bl	8004d70 <Capture_TIM5_Ch2_Callback>
}
 8004fe0:	e028      	b.n	8005034 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4a11      	ldr	r2, [pc, #68]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004ff4:	f023 0308 	bic.w	r3, r3, #8
 8004ff8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8005000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005004:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8005006:	f7ff fe9b 	bl	8004d40 <Capture_TIM4_Ch3_Callback>
}
 800500a:	e013      	b.n	8005034 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <TIM4_IRQHandler+0xcc>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <TIM4_IRQHandler+0xcc>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4a06      	ldr	r2, [pc, #24]	; (8005038 <TIM4_IRQHandler+0xcc>)
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <TIM4_IRQHandler+0xcc>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	4a03      	ldr	r2, [pc, #12]	; (8005038 <TIM4_IRQHandler+0xcc>)
 800502a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800502e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8005030:	f7ff fe8e 	bl	8004d50 <Capture_TIM4_Ch4_Callback>
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40000800 	.word	0x40000800

0800503c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8005040:	4b31      	ldr	r3, [pc, #196]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800504c:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <TIM5_IRQHandler+0xcc>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8005058:	f7ff fe22 	bl	8004ca0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800505c:	e052      	b.n	8005104 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800505e:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <TIM5_IRQHandler+0xcc>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	4a26      	ldr	r2, [pc, #152]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005070:	f023 0302 	bic.w	r3, r3, #2
 8005074:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <TIM5_IRQHandler+0xcc>)
 800507c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005080:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8005082:	f7ff fe6d 	bl	8004d60 <Capture_TIM5_Ch1_Callback>
}
 8005086:	e03d      	b.n	8005104 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8005088:	4b1f      	ldr	r3, [pc, #124]	; (8005108 <TIM5_IRQHandler+0xcc>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00e      	beq.n	80050b2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8005094:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <TIM5_IRQHandler+0xcc>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <TIM5_IRQHandler+0xcc>)
 800509a:	f023 0304 	bic.w	r3, r3, #4
 800509e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050aa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80050ac:	f7ff fe60 	bl	8004d70 <Capture_TIM5_Ch2_Callback>
}
 80050b0:	e028      	b.n	8005104 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00e      	beq.n	80050dc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	4a11      	ldr	r2, [pc, #68]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050c4:	f023 0308 	bic.w	r3, r3, #8
 80050c8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80050d6:	f7ff fe53 	bl	8004d80 <Capture_TIM5_Ch3_Callback>
}
 80050da:	e013      	b.n	8005104 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	4a06      	ldr	r2, [pc, #24]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050ee:	f023 0310 	bic.w	r3, r3, #16
 80050f2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4a03      	ldr	r2, [pc, #12]	; (8005108 <TIM5_IRQHandler+0xcc>)
 80050fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fe:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8005100:	f7ff fe46 	bl	8004d90 <Capture_TIM5_Ch4_Callback>
}
 8005104:	bf00      	nop
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40000c00 	.word	0x40000c00

0800510c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <__NVIC_EnableIRQ>:
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4907      	ldr	r1, [pc, #28]	; (800518c <__NVIC_EnableIRQ+0x38>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	e000e100 	.word	0xe000e100

08005190 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f001 f835 	bl	800620c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80051a2:	4b96      	ldr	r3, [pc, #600]	; (80053fc <extInt_Config+0x26c>)
 80051a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	f200 85cd 	bhi.w	8005d50 <extInt_Config+0xbc0>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <extInt_Config+0x2c>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051fd 	.word	0x080051fd
 80051c0:	080052b3 	.word	0x080052b3
 80051c4:	08005369 	.word	0x08005369
 80051c8:	0800543f 	.word	0x0800543f
 80051cc:	080054f5 	.word	0x080054f5
 80051d0:	080055a3 	.word	0x080055a3
 80051d4:	08005669 	.word	0x08005669
 80051d8:	08005711 	.word	0x08005711
 80051dc:	080057b9 	.word	0x080057b9
 80051e0:	08005861 	.word	0x08005861
 80051e4:	08005927 	.word	0x08005927
 80051e8:	080059cf 	.word	0x080059cf
 80051ec:	08005a77 	.word	0x08005a77
 80051f0:	08005b3d 	.word	0x08005b3d
 80051f4:	08005be3 	.word	0x08005be3
 80051f8:	08005c8b 	.word	0x08005c8b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80051fc:	4b80      	ldr	r3, [pc, #512]	; (8005400 <extInt_Config+0x270>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4a7f      	ldr	r2, [pc, #508]	; (8005400 <extInt_Config+0x270>)
 8005202:	f023 030f 	bic.w	r3, r3, #15
 8005206:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a7d      	ldr	r2, [pc, #500]	; (8005404 <extInt_Config+0x274>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d105      	bne.n	8005220 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8005214:	4b7a      	ldr	r3, [pc, #488]	; (8005400 <extInt_Config+0x270>)
 8005216:	4a7a      	ldr	r2, [pc, #488]	; (8005400 <extInt_Config+0x270>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800521c:	f000 bd9a 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a78      	ldr	r2, [pc, #480]	; (8005408 <extInt_Config+0x278>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d107      	bne.n	800523c <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 800522c:	4b74      	ldr	r3, [pc, #464]	; (8005400 <extInt_Config+0x270>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a73      	ldr	r2, [pc, #460]	; (8005400 <extInt_Config+0x270>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6093      	str	r3, [r2, #8]
					break;
 8005238:	f000 bd8c 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a72      	ldr	r2, [pc, #456]	; (800540c <extInt_Config+0x27c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d107      	bne.n	8005258 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <extInt_Config+0x270>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4a6c      	ldr	r2, [pc, #432]	; (8005400 <extInt_Config+0x270>)
 800524e:	f043 0302 	orr.w	r3, r3, #2
 8005252:	6093      	str	r3, [r2, #8]
					break;
 8005254:	f000 bd7e 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6c      	ldr	r2, [pc, #432]	; (8005410 <extInt_Config+0x280>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d107      	bne.n	8005274 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <extInt_Config+0x270>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a65      	ldr	r2, [pc, #404]	; (8005400 <extInt_Config+0x270>)
 800526a:	f043 0303 	orr.w	r3, r3, #3
 800526e:	6093      	str	r3, [r2, #8]
					break;
 8005270:	f000 bd70 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a66      	ldr	r2, [pc, #408]	; (8005414 <extInt_Config+0x284>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d107      	bne.n	8005290 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <extInt_Config+0x270>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <extInt_Config+0x270>)
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	6093      	str	r3, [r2, #8]
					break;
 800528c:	f000 bd62 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a60      	ldr	r2, [pc, #384]	; (8005418 <extInt_Config+0x288>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d107      	bne.n	80052ac <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800529c:	4b58      	ldr	r3, [pc, #352]	; (8005400 <extInt_Config+0x270>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a57      	ldr	r2, [pc, #348]	; (8005400 <extInt_Config+0x270>)
 80052a2:	f043 0307 	orr.w	r3, r3, #7
 80052a6:	6093      	str	r3, [r2, #8]
					break;
 80052a8:	f000 bd54 	b.w	8005d54 <extInt_Config+0xbc4>
						__NOP();
 80052ac:	bf00      	nop
					break;
 80052ae:	f000 bd51 	b.w	8005d54 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80052b2:	4b53      	ldr	r3, [pc, #332]	; (8005400 <extInt_Config+0x270>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4a52      	ldr	r2, [pc, #328]	; (8005400 <extInt_Config+0x270>)
 80052b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052bc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <extInt_Config+0x274>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d105      	bne.n	80052d6 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <extInt_Config+0x270>)
 80052cc:	4a4c      	ldr	r2, [pc, #304]	; (8005400 <extInt_Config+0x270>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80052d2:	f000 bd3f 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4a      	ldr	r2, [pc, #296]	; (8005408 <extInt_Config+0x278>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d107      	bne.n	80052f2 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <extInt_Config+0x270>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a46      	ldr	r2, [pc, #280]	; (8005400 <extInt_Config+0x270>)
 80052e8:	f043 0310 	orr.w	r3, r3, #16
 80052ec:	6093      	str	r3, [r2, #8]
					break;
 80052ee:	f000 bd31 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a44      	ldr	r2, [pc, #272]	; (800540c <extInt_Config+0x27c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d107      	bne.n	800530e <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80052fe:	4b40      	ldr	r3, [pc, #256]	; (8005400 <extInt_Config+0x270>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4a3f      	ldr	r2, [pc, #252]	; (8005400 <extInt_Config+0x270>)
 8005304:	f043 0320 	orr.w	r3, r3, #32
 8005308:	6093      	str	r3, [r2, #8]
					break;
 800530a:	f000 bd23 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <extInt_Config+0x280>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d107      	bne.n	800532a <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <extInt_Config+0x270>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	4a38      	ldr	r2, [pc, #224]	; (8005400 <extInt_Config+0x270>)
 8005320:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005324:	6093      	str	r3, [r2, #8]
					break;
 8005326:	f000 bd15 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a38      	ldr	r2, [pc, #224]	; (8005414 <extInt_Config+0x284>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d107      	bne.n	8005346 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <extInt_Config+0x270>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <extInt_Config+0x270>)
 800533c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005340:	6093      	str	r3, [r2, #8]
					break;
 8005342:	f000 bd07 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a32      	ldr	r2, [pc, #200]	; (8005418 <extInt_Config+0x288>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d107      	bne.n	8005362 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005352:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <extInt_Config+0x270>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <extInt_Config+0x270>)
 8005358:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800535c:	6093      	str	r3, [r2, #8]
					break;
 800535e:	f000 bcf9 	b.w	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005362:	bf00      	nop
					break;
 8005364:	f000 bcf6 	b.w	8005d54 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <extInt_Config+0x270>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a24      	ldr	r2, [pc, #144]	; (8005400 <extInt_Config+0x270>)
 800536e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005372:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <extInt_Config+0x274>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d105      	bne.n	800538c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <extInt_Config+0x270>)
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <extInt_Config+0x270>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005388:	f000 bce4 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <extInt_Config+0x278>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d107      	bne.n	80053a8 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <extInt_Config+0x270>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <extInt_Config+0x270>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6093      	str	r3, [r2, #8]
					break;
 80053a4:	f000 bcd6 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <extInt_Config+0x27c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d107      	bne.n	80053c4 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80053b4:	4b12      	ldr	r3, [pc, #72]	; (8005400 <extInt_Config+0x270>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a11      	ldr	r2, [pc, #68]	; (8005400 <extInt_Config+0x270>)
 80053ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053be:	6093      	str	r3, [r2, #8]
					break;
 80053c0:	f000 bcc8 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a11      	ldr	r2, [pc, #68]	; (8005410 <extInt_Config+0x280>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d107      	bne.n	80053e0 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <extInt_Config+0x270>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <extInt_Config+0x270>)
 80053d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053da:	6093      	str	r3, [r2, #8]
					break;
 80053dc:	f000 bcba 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <extInt_Config+0x284>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d117      	bne.n	800541c <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <extInt_Config+0x270>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <extInt_Config+0x270>)
 80053f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f6:	6093      	str	r3, [r2, #8]
					break;
 80053f8:	f000 bcac 	b.w	8005d54 <extInt_Config+0xbc4>
 80053fc:	40023800 	.word	0x40023800
 8005400:	40013800 	.word	0x40013800
 8005404:	40020000 	.word	0x40020000
 8005408:	40020400 	.word	0x40020400
 800540c:	40020800 	.word	0x40020800
 8005410:	40020c00 	.word	0x40020c00
 8005414:	40021000 	.word	0x40021000
 8005418:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a8a      	ldr	r2, [pc, #552]	; (800564c <extInt_Config+0x4bc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d107      	bne.n	8005438 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005428:	4b89      	ldr	r3, [pc, #548]	; (8005650 <extInt_Config+0x4c0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a88      	ldr	r2, [pc, #544]	; (8005650 <extInt_Config+0x4c0>)
 800542e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005432:	6093      	str	r3, [r2, #8]
					break;
 8005434:	f000 bc8e 	b.w	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005438:	bf00      	nop
					break;
 800543a:	f000 bc8b 	b.w	8005d54 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 800543e:	4b84      	ldr	r3, [pc, #528]	; (8005650 <extInt_Config+0x4c0>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4a83      	ldr	r2, [pc, #524]	; (8005650 <extInt_Config+0x4c0>)
 8005444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005448:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a80      	ldr	r2, [pc, #512]	; (8005654 <extInt_Config+0x4c4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d105      	bne.n	8005462 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005456:	4b7e      	ldr	r3, [pc, #504]	; (8005650 <extInt_Config+0x4c0>)
 8005458:	4a7d      	ldr	r2, [pc, #500]	; (8005650 <extInt_Config+0x4c0>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800545e:	f000 bc79 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7b      	ldr	r2, [pc, #492]	; (8005658 <extInt_Config+0x4c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d107      	bne.n	800547e <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800546e:	4b78      	ldr	r3, [pc, #480]	; (8005650 <extInt_Config+0x4c0>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	4a77      	ldr	r2, [pc, #476]	; (8005650 <extInt_Config+0x4c0>)
 8005474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005478:	6093      	str	r3, [r2, #8]
					break;
 800547a:	f000 bc6b 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a75      	ldr	r2, [pc, #468]	; (800565c <extInt_Config+0x4cc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d107      	bne.n	800549a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800548a:	4b71      	ldr	r3, [pc, #452]	; (8005650 <extInt_Config+0x4c0>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4a70      	ldr	r2, [pc, #448]	; (8005650 <extInt_Config+0x4c0>)
 8005490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005494:	6093      	str	r3, [r2, #8]
					break;
 8005496:	f000 bc5d 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6f      	ldr	r2, [pc, #444]	; (8005660 <extInt_Config+0x4d0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d107      	bne.n	80054b6 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80054a6:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <extInt_Config+0x4c0>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4a69      	ldr	r2, [pc, #420]	; (8005650 <extInt_Config+0x4c0>)
 80054ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80054b0:	6093      	str	r3, [r2, #8]
					break;
 80054b2:	f000 bc4f 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a69      	ldr	r2, [pc, #420]	; (8005664 <extInt_Config+0x4d4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d107      	bne.n	80054d2 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80054c2:	4b63      	ldr	r3, [pc, #396]	; (8005650 <extInt_Config+0x4c0>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	4a62      	ldr	r2, [pc, #392]	; (8005650 <extInt_Config+0x4c0>)
 80054c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054cc:	6093      	str	r3, [r2, #8]
					break;
 80054ce:	f000 bc41 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5c      	ldr	r2, [pc, #368]	; (800564c <extInt_Config+0x4bc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d107      	bne.n	80054ee <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80054de:	4b5c      	ldr	r3, [pc, #368]	; (8005650 <extInt_Config+0x4c0>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4a5b      	ldr	r2, [pc, #364]	; (8005650 <extInt_Config+0x4c0>)
 80054e4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80054e8:	6093      	str	r3, [r2, #8]
					break;
 80054ea:	f000 bc33 	b.w	8005d54 <extInt_Config+0xbc4>
						__NOP();
 80054ee:	bf00      	nop
					break;
 80054f0:	f000 bc30 	b.w	8005d54 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80054f4:	4b56      	ldr	r3, [pc, #344]	; (8005650 <extInt_Config+0x4c0>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a55      	ldr	r2, [pc, #340]	; (8005650 <extInt_Config+0x4c0>)
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a53      	ldr	r2, [pc, #332]	; (8005654 <extInt_Config+0x4c4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d105      	bne.n	8005518 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 800550c:	4b50      	ldr	r3, [pc, #320]	; (8005650 <extInt_Config+0x4c0>)
 800550e:	4a50      	ldr	r2, [pc, #320]	; (8005650 <extInt_Config+0x4c0>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005514:	f000 bc1e 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4e      	ldr	r2, [pc, #312]	; (8005658 <extInt_Config+0x4c8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d107      	bne.n	8005534 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8005524:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <extInt_Config+0x4c0>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a49      	ldr	r2, [pc, #292]	; (8005650 <extInt_Config+0x4c0>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	60d3      	str	r3, [r2, #12]
					break;
 8005530:	f000 bc10 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a48      	ldr	r2, [pc, #288]	; (800565c <extInt_Config+0x4cc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d107      	bne.n	8005550 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005540:	4b43      	ldr	r3, [pc, #268]	; (8005650 <extInt_Config+0x4c0>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a42      	ldr	r2, [pc, #264]	; (8005650 <extInt_Config+0x4c0>)
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	60d3      	str	r3, [r2, #12]
					break;
 800554c:	f000 bc02 	b.w	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a42      	ldr	r2, [pc, #264]	; (8005660 <extInt_Config+0x4d0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d106      	bne.n	800556a <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 800555c:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <extInt_Config+0x4c0>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <extInt_Config+0x4c0>)
 8005562:	f043 0303 	orr.w	r3, r3, #3
 8005566:	60d3      	str	r3, [r2, #12]
					break;
 8005568:	e3f4      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <extInt_Config+0x4d4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d106      	bne.n	8005584 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <extInt_Config+0x4c0>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <extInt_Config+0x4c0>)
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	60d3      	str	r3, [r2, #12]
					break;
 8005582:	e3e7      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a30      	ldr	r2, [pc, #192]	; (800564c <extInt_Config+0x4bc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d106      	bne.n	800559e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <extInt_Config+0x4c0>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a2e      	ldr	r2, [pc, #184]	; (8005650 <extInt_Config+0x4c0>)
 8005596:	f043 0307 	orr.w	r3, r3, #7
 800559a:	60d3      	str	r3, [r2, #12]
					break;
 800559c:	e3da      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 800559e:	bf00      	nop
					break;
 80055a0:	e3d8      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80055a2:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <extInt_Config+0x4c0>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <extInt_Config+0x4c0>)
 80055a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ac:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <extInt_Config+0x4c4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d104      	bne.n	80055c4 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <extInt_Config+0x4c0>)
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <extInt_Config+0x4c0>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80055c2:	e3c7      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a23      	ldr	r2, [pc, #140]	; (8005658 <extInt_Config+0x4c8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d106      	bne.n	80055de <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <extInt_Config+0x4c0>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <extInt_Config+0x4c0>)
 80055d6:	f043 0310 	orr.w	r3, r3, #16
 80055da:	60d3      	str	r3, [r2, #12]
					break;
 80055dc:	e3ba      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <extInt_Config+0x4cc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d106      	bne.n	80055f8 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80055ea:	4b19      	ldr	r3, [pc, #100]	; (8005650 <extInt_Config+0x4c0>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <extInt_Config+0x4c0>)
 80055f0:	f043 0320 	orr.w	r3, r3, #32
 80055f4:	60d3      	str	r3, [r2, #12]
					break;
 80055f6:	e3ad      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a18      	ldr	r2, [pc, #96]	; (8005660 <extInt_Config+0x4d0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d106      	bne.n	8005612 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8005604:	4b12      	ldr	r3, [pc, #72]	; (8005650 <extInt_Config+0x4c0>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <extInt_Config+0x4c0>)
 800560a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800560e:	60d3      	str	r3, [r2, #12]
					break;
 8005610:	e3a0      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a12      	ldr	r2, [pc, #72]	; (8005664 <extInt_Config+0x4d4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d106      	bne.n	800562c <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <extInt_Config+0x4c0>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <extInt_Config+0x4c0>)
 8005624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005628:	60d3      	str	r3, [r2, #12]
					break;
 800562a:	e393      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a06      	ldr	r2, [pc, #24]	; (800564c <extInt_Config+0x4bc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d106      	bne.n	8005646 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <extInt_Config+0x4c0>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <extInt_Config+0x4c0>)
 800563e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005642:	60d3      	str	r3, [r2, #12]
					break;
 8005644:	e386      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005646:	bf00      	nop
					break;
 8005648:	e384      	b.n	8005d54 <extInt_Config+0xbc4>
 800564a:	bf00      	nop
 800564c:	40021c00 	.word	0x40021c00
 8005650:	40013800 	.word	0x40013800
 8005654:	40020000 	.word	0x40020000
 8005658:	40020400 	.word	0x40020400
 800565c:	40020800 	.word	0x40020800
 8005660:	40020c00 	.word	0x40020c00
 8005664:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8005668:	4b86      	ldr	r3, [pc, #536]	; (8005884 <extInt_Config+0x6f4>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a85      	ldr	r2, [pc, #532]	; (8005884 <extInt_Config+0x6f4>)
 800566e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005672:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a83      	ldr	r2, [pc, #524]	; (8005888 <extInt_Config+0x6f8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d104      	bne.n	800568a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005680:	4b80      	ldr	r3, [pc, #512]	; (8005884 <extInt_Config+0x6f4>)
 8005682:	4a80      	ldr	r2, [pc, #512]	; (8005884 <extInt_Config+0x6f4>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005688:	e364      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7e      	ldr	r2, [pc, #504]	; (800588c <extInt_Config+0x6fc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d106      	bne.n	80056a4 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005696:	4b7b      	ldr	r3, [pc, #492]	; (8005884 <extInt_Config+0x6f4>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4a7a      	ldr	r2, [pc, #488]	; (8005884 <extInt_Config+0x6f4>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a0:	60d3      	str	r3, [r2, #12]
					break;
 80056a2:	e357      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a79      	ldr	r2, [pc, #484]	; (8005890 <extInt_Config+0x700>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d106      	bne.n	80056be <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80056b0:	4b74      	ldr	r3, [pc, #464]	; (8005884 <extInt_Config+0x6f4>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a73      	ldr	r2, [pc, #460]	; (8005884 <extInt_Config+0x6f4>)
 80056b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ba:	60d3      	str	r3, [r2, #12]
					break;
 80056bc:	e34a      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a73      	ldr	r2, [pc, #460]	; (8005894 <extInt_Config+0x704>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d106      	bne.n	80056d8 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <extInt_Config+0x6f4>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a6d      	ldr	r2, [pc, #436]	; (8005884 <extInt_Config+0x6f4>)
 80056d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056d4:	60d3      	str	r3, [r2, #12]
					break;
 80056d6:	e33d      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <extInt_Config+0x708>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d106      	bne.n	80056f2 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80056e4:	4b67      	ldr	r3, [pc, #412]	; (8005884 <extInt_Config+0x6f4>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a66      	ldr	r2, [pc, #408]	; (8005884 <extInt_Config+0x6f4>)
 80056ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ee:	60d3      	str	r3, [r2, #12]
					break;
 80056f0:	e330      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a68      	ldr	r2, [pc, #416]	; (800589c <extInt_Config+0x70c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d106      	bne.n	800570c <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <extInt_Config+0x6f4>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	4a60      	ldr	r2, [pc, #384]	; (8005884 <extInt_Config+0x6f4>)
 8005704:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005708:	60d3      	str	r3, [r2, #12]
					break;
 800570a:	e323      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 800570c:	bf00      	nop
					break;
 800570e:	e321      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8005710:	4b5c      	ldr	r3, [pc, #368]	; (8005884 <extInt_Config+0x6f4>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a5b      	ldr	r2, [pc, #364]	; (8005884 <extInt_Config+0x6f4>)
 8005716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a59      	ldr	r2, [pc, #356]	; (8005888 <extInt_Config+0x6f8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d104      	bne.n	8005732 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <extInt_Config+0x6f4>)
 800572a:	4a56      	ldr	r2, [pc, #344]	; (8005884 <extInt_Config+0x6f4>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005730:	e310      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a54      	ldr	r2, [pc, #336]	; (800588c <extInt_Config+0x6fc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d106      	bne.n	800574c <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800573e:	4b51      	ldr	r3, [pc, #324]	; (8005884 <extInt_Config+0x6f4>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a50      	ldr	r2, [pc, #320]	; (8005884 <extInt_Config+0x6f4>)
 8005744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005748:	60d3      	str	r3, [r2, #12]
					break;
 800574a:	e303      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4f      	ldr	r2, [pc, #316]	; (8005890 <extInt_Config+0x700>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d106      	bne.n	8005766 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005758:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <extInt_Config+0x6f4>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a49      	ldr	r2, [pc, #292]	; (8005884 <extInt_Config+0x6f4>)
 800575e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005762:	60d3      	str	r3, [r2, #12]
					break;
 8005764:	e2f6      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a49      	ldr	r2, [pc, #292]	; (8005894 <extInt_Config+0x704>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d106      	bne.n	8005780 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005772:	4b44      	ldr	r3, [pc, #272]	; (8005884 <extInt_Config+0x6f4>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a43      	ldr	r2, [pc, #268]	; (8005884 <extInt_Config+0x6f4>)
 8005778:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800577c:	60d3      	str	r3, [r2, #12]
					break;
 800577e:	e2e9      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a44      	ldr	r2, [pc, #272]	; (8005898 <extInt_Config+0x708>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d106      	bne.n	800579a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800578c:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <extInt_Config+0x6f4>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <extInt_Config+0x6f4>)
 8005792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005796:	60d3      	str	r3, [r2, #12]
					break;
 8005798:	e2dc      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3e      	ldr	r2, [pc, #248]	; (800589c <extInt_Config+0x70c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d106      	bne.n	80057b4 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <extInt_Config+0x6f4>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	4a36      	ldr	r2, [pc, #216]	; (8005884 <extInt_Config+0x6f4>)
 80057ac:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80057b0:	60d3      	str	r3, [r2, #12]
					break;
 80057b2:	e2cf      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 80057b4:	bf00      	nop
					break;
 80057b6:	e2cd      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <extInt_Config+0x6f4>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	4a31      	ldr	r2, [pc, #196]	; (8005884 <extInt_Config+0x6f4>)
 80057be:	f023 030f 	bic.w	r3, r3, #15
 80057c2:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <extInt_Config+0x6f8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d104      	bne.n	80057da <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80057d0:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <extInt_Config+0x6f4>)
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <extInt_Config+0x6f4>)
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80057d8:	e2bc      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2a      	ldr	r2, [pc, #168]	; (800588c <extInt_Config+0x6fc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d106      	bne.n	80057f4 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <extInt_Config+0x6f4>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4a26      	ldr	r2, [pc, #152]	; (8005884 <extInt_Config+0x6f4>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6113      	str	r3, [r2, #16]
					break;
 80057f2:	e2af      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a25      	ldr	r2, [pc, #148]	; (8005890 <extInt_Config+0x700>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d106      	bne.n	800580e <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <extInt_Config+0x6f4>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <extInt_Config+0x6f4>)
 8005806:	f043 0302 	orr.w	r3, r3, #2
 800580a:	6113      	str	r3, [r2, #16]
					break;
 800580c:	e2a2      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <extInt_Config+0x704>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d106      	bne.n	8005828 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <extInt_Config+0x6f4>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a19      	ldr	r2, [pc, #100]	; (8005884 <extInt_Config+0x6f4>)
 8005820:	f043 0303 	orr.w	r3, r3, #3
 8005824:	6113      	str	r3, [r2, #16]
					break;
 8005826:	e295      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <extInt_Config+0x708>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d106      	bne.n	8005842 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <extInt_Config+0x6f4>)
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	4a12      	ldr	r2, [pc, #72]	; (8005884 <extInt_Config+0x6f4>)
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	6113      	str	r3, [r2, #16]
					break;
 8005840:	e288      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <extInt_Config+0x70c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d106      	bne.n	800585c <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <extInt_Config+0x6f4>)
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <extInt_Config+0x6f4>)
 8005854:	f043 0307 	orr.w	r3, r3, #7
 8005858:	6113      	str	r3, [r2, #16]
					break;
 800585a:	e27b      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 800585c:	bf00      	nop
					break;
 800585e:	e279      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <extInt_Config+0x6f4>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a07      	ldr	r2, [pc, #28]	; (8005884 <extInt_Config+0x6f4>)
 8005866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a05      	ldr	r2, [pc, #20]	; (8005888 <extInt_Config+0x6f8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d113      	bne.n	80058a0 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <extInt_Config+0x6f4>)
 800587a:	4a02      	ldr	r2, [pc, #8]	; (8005884 <extInt_Config+0x6f4>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005880:	e268      	b.n	8005d54 <extInt_Config+0xbc4>
 8005882:	bf00      	nop
 8005884:	40013800 	.word	0x40013800
 8005888:	40020000 	.word	0x40020000
 800588c:	40020400 	.word	0x40020400
 8005890:	40020800 	.word	0x40020800
 8005894:	40020c00 	.word	0x40020c00
 8005898:	40021000 	.word	0x40021000
 800589c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a83      	ldr	r2, [pc, #524]	; (8005ab4 <extInt_Config+0x924>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d106      	bne.n	80058ba <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80058ac:	4b82      	ldr	r3, [pc, #520]	; (8005ab8 <extInt_Config+0x928>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	4a81      	ldr	r2, [pc, #516]	; (8005ab8 <extInt_Config+0x928>)
 80058b2:	f043 0310 	orr.w	r3, r3, #16
 80058b6:	6113      	str	r3, [r2, #16]
					break;
 80058b8:	e24c      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a7e      	ldr	r2, [pc, #504]	; (8005abc <extInt_Config+0x92c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d106      	bne.n	80058d4 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80058c6:	4b7c      	ldr	r3, [pc, #496]	; (8005ab8 <extInt_Config+0x928>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	4a7b      	ldr	r2, [pc, #492]	; (8005ab8 <extInt_Config+0x928>)
 80058cc:	f043 0320 	orr.w	r3, r3, #32
 80058d0:	6113      	str	r3, [r2, #16]
					break;
 80058d2:	e23f      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a79      	ldr	r2, [pc, #484]	; (8005ac0 <extInt_Config+0x930>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d106      	bne.n	80058ee <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80058e0:	4b75      	ldr	r3, [pc, #468]	; (8005ab8 <extInt_Config+0x928>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	4a74      	ldr	r2, [pc, #464]	; (8005ab8 <extInt_Config+0x928>)
 80058e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80058ea:	6113      	str	r3, [r2, #16]
					break;
 80058ec:	e232      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a73      	ldr	r2, [pc, #460]	; (8005ac4 <extInt_Config+0x934>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d106      	bne.n	8005908 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80058fa:	4b6f      	ldr	r3, [pc, #444]	; (8005ab8 <extInt_Config+0x928>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	4a6e      	ldr	r2, [pc, #440]	; (8005ab8 <extInt_Config+0x928>)
 8005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005904:	6113      	str	r3, [r2, #16]
					break;
 8005906:	e225      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a6e      	ldr	r2, [pc, #440]	; (8005ac8 <extInt_Config+0x938>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d106      	bne.n	8005922 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8005914:	4b68      	ldr	r3, [pc, #416]	; (8005ab8 <extInt_Config+0x928>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	4a67      	ldr	r2, [pc, #412]	; (8005ab8 <extInt_Config+0x928>)
 800591a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800591e:	6113      	str	r3, [r2, #16]
					break;
 8005920:	e218      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005922:	bf00      	nop
					break;
 8005924:	e216      	b.n	8005d54 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8005926:	4b64      	ldr	r3, [pc, #400]	; (8005ab8 <extInt_Config+0x928>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	4a63      	ldr	r2, [pc, #396]	; (8005ab8 <extInt_Config+0x928>)
 800592c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005930:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a64      	ldr	r2, [pc, #400]	; (8005acc <extInt_Config+0x93c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d104      	bne.n	8005948 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800593e:	4b5e      	ldr	r3, [pc, #376]	; (8005ab8 <extInt_Config+0x928>)
 8005940:	4a5d      	ldr	r2, [pc, #372]	; (8005ab8 <extInt_Config+0x928>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005946:	e205      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a59      	ldr	r2, [pc, #356]	; (8005ab4 <extInt_Config+0x924>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d106      	bne.n	8005962 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8005954:	4b58      	ldr	r3, [pc, #352]	; (8005ab8 <extInt_Config+0x928>)
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <extInt_Config+0x928>)
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	6113      	str	r3, [r2, #16]
					break;
 8005960:	e1f8      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a54      	ldr	r2, [pc, #336]	; (8005abc <extInt_Config+0x92c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d106      	bne.n	800597c <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800596e:	4b52      	ldr	r3, [pc, #328]	; (8005ab8 <extInt_Config+0x928>)
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	4a51      	ldr	r2, [pc, #324]	; (8005ab8 <extInt_Config+0x928>)
 8005974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005978:	6113      	str	r3, [r2, #16]
					break;
 800597a:	e1eb      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4f      	ldr	r2, [pc, #316]	; (8005ac0 <extInt_Config+0x930>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d106      	bne.n	8005996 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8005988:	4b4b      	ldr	r3, [pc, #300]	; (8005ab8 <extInt_Config+0x928>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	4a4a      	ldr	r2, [pc, #296]	; (8005ab8 <extInt_Config+0x928>)
 800598e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005992:	6113      	str	r3, [r2, #16]
					break;
 8005994:	e1de      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a49      	ldr	r2, [pc, #292]	; (8005ac4 <extInt_Config+0x934>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d106      	bne.n	80059b0 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80059a2:	4b45      	ldr	r3, [pc, #276]	; (8005ab8 <extInt_Config+0x928>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4a44      	ldr	r2, [pc, #272]	; (8005ab8 <extInt_Config+0x928>)
 80059a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ac:	6113      	str	r3, [r2, #16]
					break;
 80059ae:	e1d1      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a44      	ldr	r2, [pc, #272]	; (8005ac8 <extInt_Config+0x938>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d106      	bne.n	80059ca <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80059bc:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <extInt_Config+0x928>)
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	4a3d      	ldr	r2, [pc, #244]	; (8005ab8 <extInt_Config+0x928>)
 80059c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059c6:	6113      	str	r3, [r2, #16]
					break;
 80059c8:	e1c4      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 80059ca:	bf00      	nop
					break;
 80059cc:	e1c2      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80059ce:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <extInt_Config+0x928>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	4a39      	ldr	r2, [pc, #228]	; (8005ab8 <extInt_Config+0x928>)
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d8:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a3a      	ldr	r2, [pc, #232]	; (8005acc <extInt_Config+0x93c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d104      	bne.n	80059f0 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80059e6:	4b34      	ldr	r3, [pc, #208]	; (8005ab8 <extInt_Config+0x928>)
 80059e8:	4a33      	ldr	r2, [pc, #204]	; (8005ab8 <extInt_Config+0x928>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80059ee:	e1b1      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <extInt_Config+0x924>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d106      	bne.n	8005a0a <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80059fc:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <extInt_Config+0x928>)
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <extInt_Config+0x928>)
 8005a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a06:	6113      	str	r3, [r2, #16]
					break;
 8005a08:	e1a4      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <extInt_Config+0x92c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d106      	bne.n	8005a24 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <extInt_Config+0x928>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <extInt_Config+0x928>)
 8005a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a20:	6113      	str	r3, [r2, #16]
					break;
 8005a22:	e197      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a25      	ldr	r2, [pc, #148]	; (8005ac0 <extInt_Config+0x930>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d106      	bne.n	8005a3e <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8005a30:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <extInt_Config+0x928>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <extInt_Config+0x928>)
 8005a36:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005a3a:	6113      	str	r3, [r2, #16]
					break;
 8005a3c:	e18a      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <extInt_Config+0x934>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d106      	bne.n	8005a58 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <extInt_Config+0x928>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <extInt_Config+0x928>)
 8005a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a54:	6113      	str	r3, [r2, #16]
					break;
 8005a56:	e17d      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <extInt_Config+0x938>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d106      	bne.n	8005a72 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <extInt_Config+0x928>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <extInt_Config+0x928>)
 8005a6a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005a6e:	6113      	str	r3, [r2, #16]
					break;
 8005a70:	e170      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005a72:	bf00      	nop
					break;
 8005a74:	e16e      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <extInt_Config+0x928>)
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <extInt_Config+0x928>)
 8005a7c:	f023 030f 	bic.w	r3, r3, #15
 8005a80:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a10      	ldr	r2, [pc, #64]	; (8005acc <extInt_Config+0x93c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d104      	bne.n	8005a98 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <extInt_Config+0x928>)
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <extInt_Config+0x928>)
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005a96:	e15d      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <extInt_Config+0x924>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d115      	bne.n	8005ad0 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8005aa4:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <extInt_Config+0x928>)
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4a03      	ldr	r2, [pc, #12]	; (8005ab8 <extInt_Config+0x928>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6153      	str	r3, [r2, #20]
					break;
 8005ab0:	e150      	b.n	8005d54 <extInt_Config+0xbc4>
 8005ab2:	bf00      	nop
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40013800 	.word	0x40013800
 8005abc:	40020800 	.word	0x40020800
 8005ac0:	40020c00 	.word	0x40020c00
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40021c00 	.word	0x40021c00
 8005acc:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a89      	ldr	r2, [pc, #548]	; (8005cfc <extInt_Config+0xb6c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d106      	bne.n	8005aea <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8005adc:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <extInt_Config+0xb70>)
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4a87      	ldr	r2, [pc, #540]	; (8005d00 <extInt_Config+0xb70>)
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	6153      	str	r3, [r2, #20]
					break;
 8005ae8:	e134      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a84      	ldr	r2, [pc, #528]	; (8005d04 <extInt_Config+0xb74>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d106      	bne.n	8005b04 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8005af6:	4b82      	ldr	r3, [pc, #520]	; (8005d00 <extInt_Config+0xb70>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4a81      	ldr	r2, [pc, #516]	; (8005d00 <extInt_Config+0xb70>)
 8005afc:	f043 0303 	orr.w	r3, r3, #3
 8005b00:	6153      	str	r3, [r2, #20]
					break;
 8005b02:	e127      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a7f      	ldr	r2, [pc, #508]	; (8005d08 <extInt_Config+0xb78>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d106      	bne.n	8005b1e <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8005b10:	4b7b      	ldr	r3, [pc, #492]	; (8005d00 <extInt_Config+0xb70>)
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4a7a      	ldr	r2, [pc, #488]	; (8005d00 <extInt_Config+0xb70>)
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6153      	str	r3, [r2, #20]
					break;
 8005b1c:	e11a      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a79      	ldr	r2, [pc, #484]	; (8005d0c <extInt_Config+0xb7c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d106      	bne.n	8005b38 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8005b2a:	4b75      	ldr	r3, [pc, #468]	; (8005d00 <extInt_Config+0xb70>)
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4a74      	ldr	r2, [pc, #464]	; (8005d00 <extInt_Config+0xb70>)
 8005b30:	f043 0307 	orr.w	r3, r3, #7
 8005b34:	6153      	str	r3, [r2, #20]
					break;
 8005b36:	e10d      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005b38:	bf00      	nop
					break;
 8005b3a:	e10b      	b.n	8005d54 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8005b3c:	4b70      	ldr	r3, [pc, #448]	; (8005d00 <extInt_Config+0xb70>)
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	4a6f      	ldr	r2, [pc, #444]	; (8005d00 <extInt_Config+0xb70>)
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a70      	ldr	r2, [pc, #448]	; (8005d10 <extInt_Config+0xb80>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d104      	bne.n	8005b5e <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8005b54:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <extInt_Config+0xb70>)
 8005b56:	4a6a      	ldr	r2, [pc, #424]	; (8005d00 <extInt_Config+0xb70>)
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	6153      	str	r3, [r2, #20]
 8005b5c:	e041      	b.n	8005be2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6b      	ldr	r2, [pc, #428]	; (8005d14 <extInt_Config+0xb84>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d106      	bne.n	8005b78 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8005b6a:	4b65      	ldr	r3, [pc, #404]	; (8005d00 <extInt_Config+0xb70>)
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <extInt_Config+0xb70>)
 8005b70:	f043 0310 	orr.w	r3, r3, #16
 8005b74:	6153      	str	r3, [r2, #20]
 8005b76:	e034      	b.n	8005be2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a5f      	ldr	r2, [pc, #380]	; (8005cfc <extInt_Config+0xb6c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d106      	bne.n	8005b92 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8005b84:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <extInt_Config+0xb70>)
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	4a5d      	ldr	r2, [pc, #372]	; (8005d00 <extInt_Config+0xb70>)
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6153      	str	r3, [r2, #20]
 8005b90:	e027      	b.n	8005be2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5a      	ldr	r2, [pc, #360]	; (8005d04 <extInt_Config+0xb74>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d106      	bne.n	8005bac <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8005b9e:	4b58      	ldr	r3, [pc, #352]	; (8005d00 <extInt_Config+0xb70>)
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <extInt_Config+0xb70>)
 8005ba4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005ba8:	6153      	str	r3, [r2, #20]
 8005baa:	e01a      	b.n	8005be2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a55      	ldr	r2, [pc, #340]	; (8005d08 <extInt_Config+0xb78>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d106      	bne.n	8005bc6 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8005bb8:	4b51      	ldr	r3, [pc, #324]	; (8005d00 <extInt_Config+0xb70>)
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	4a50      	ldr	r2, [pc, #320]	; (8005d00 <extInt_Config+0xb70>)
 8005bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc2:	6153      	str	r3, [r2, #20]
 8005bc4:	e00d      	b.n	8005be2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <extInt_Config+0xb7c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d106      	bne.n	8005be0 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8005bd2:	4b4b      	ldr	r3, [pc, #300]	; (8005d00 <extInt_Config+0xb70>)
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4a4a      	ldr	r2, [pc, #296]	; (8005d00 <extInt_Config+0xb70>)
 8005bd8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005bdc:	6153      	str	r3, [r2, #20]
 8005bde:	e000      	b.n	8005be2 <extInt_Config+0xa52>

					} else {
						__NOP();
 8005be0:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <extInt_Config+0xb70>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	4a46      	ldr	r2, [pc, #280]	; (8005d00 <extInt_Config+0xb70>)
 8005be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bec:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a46      	ldr	r2, [pc, #280]	; (8005d10 <extInt_Config+0xb80>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d104      	bne.n	8005c04 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8005bfa:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <extInt_Config+0xb70>)
 8005bfc:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <extInt_Config+0xb70>)
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005c02:	e0a7      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a42      	ldr	r2, [pc, #264]	; (8005d14 <extInt_Config+0xb84>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d106      	bne.n	8005c1e <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8005c10:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <extInt_Config+0xb70>)
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4a3a      	ldr	r2, [pc, #232]	; (8005d00 <extInt_Config+0xb70>)
 8005c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1a:	6153      	str	r3, [r2, #20]
					break;
 8005c1c:	e09a      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <extInt_Config+0xb6c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d106      	bne.n	8005c38 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8005c2a:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <extInt_Config+0xb70>)
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <extInt_Config+0xb70>)
 8005c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c34:	6153      	str	r3, [r2, #20]
					break;
 8005c36:	e08d      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a31      	ldr	r2, [pc, #196]	; (8005d04 <extInt_Config+0xb74>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d106      	bne.n	8005c52 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8005c44:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <extInt_Config+0xb70>)
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	4a2d      	ldr	r2, [pc, #180]	; (8005d00 <extInt_Config+0xb70>)
 8005c4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c4e:	6153      	str	r3, [r2, #20]
					break;
 8005c50:	e080      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2b      	ldr	r2, [pc, #172]	; (8005d08 <extInt_Config+0xb78>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d106      	bne.n	8005c6c <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8005c5e:	4b28      	ldr	r3, [pc, #160]	; (8005d00 <extInt_Config+0xb70>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <extInt_Config+0xb70>)
 8005c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c68:	6153      	str	r3, [r2, #20]
					break;
 8005c6a:	e073      	b.n	8005d54 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <extInt_Config+0xb7c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d106      	bne.n	8005c86 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <extInt_Config+0xb70>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <extInt_Config+0xb70>)
 8005c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c82:	6153      	str	r3, [r2, #20]
					break;
 8005c84:	e066      	b.n	8005d54 <extInt_Config+0xbc4>
						__NOP();
 8005c86:	bf00      	nop
					break;
 8005c88:	e064      	b.n	8005d54 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <extInt_Config+0xb70>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <extInt_Config+0xb70>)
 8005c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c94:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <extInt_Config+0xb80>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d104      	bne.n	8005cac <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <extInt_Config+0xb70>)
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <extInt_Config+0xb70>)
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8005caa:	e053      	b.n	8005d54 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <extInt_Config+0xb84>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d106      	bne.n	8005cc6 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <extInt_Config+0xb70>)
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <extInt_Config+0xb70>)
 8005cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cc2:	6153      	str	r3, [r2, #20]
						break;
 8005cc4:	e046      	b.n	8005d54 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <extInt_Config+0xb6c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d106      	bne.n	8005ce0 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <extInt_Config+0xb70>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <extInt_Config+0xb70>)
 8005cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cdc:	6153      	str	r3, [r2, #20]
						break;
 8005cde:	e039      	b.n	8005d54 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <extInt_Config+0xb74>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d115      	bne.n	8005d18 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <extInt_Config+0xb70>)
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <extInt_Config+0xb70>)
 8005cf2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005cf6:	6153      	str	r3, [r2, #20]
						break;
 8005cf8:	e02c      	b.n	8005d54 <extInt_Config+0xbc4>
 8005cfa:	bf00      	nop
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	40013800 	.word	0x40013800
 8005d04:	40020c00 	.word	0x40020c00
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40021c00 	.word	0x40021c00
 8005d10:	40020000 	.word	0x40020000
 8005d14:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <extInt_Config+0xd40>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d106      	bne.n	8005d32 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8005d24:	4b6b      	ldr	r3, [pc, #428]	; (8005ed4 <extInt_Config+0xd44>)
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	4a6a      	ldr	r2, [pc, #424]	; (8005ed4 <extInt_Config+0xd44>)
 8005d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d2e:	6153      	str	r3, [r2, #20]
						break;
 8005d30:	e010      	b.n	8005d54 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a67      	ldr	r2, [pc, #412]	; (8005ed8 <extInt_Config+0xd48>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d106      	bne.n	8005d4c <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <extInt_Config+0xd44>)
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	4a64      	ldr	r2, [pc, #400]	; (8005ed4 <extInt_Config+0xd44>)
 8005d44:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005d48:	6153      	str	r3, [r2, #20]
						break;
 8005d4a:	e003      	b.n	8005d54 <extInt_Config+0xbc4>
							__NOP();
 8005d4c:	bf00      	nop
						break;
 8005d4e:	e001      	b.n	8005d54 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8005d50:	bf00      	nop
						break;
 8005d52:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d020      	beq.n	8005d9e <extInt_Config+0xc0e>
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	dc37      	bgt.n	8005dd0 <extInt_Config+0xc40>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <extInt_Config+0xbda>
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d00d      	beq.n	8005d84 <extInt_Config+0xbf4>
 8005d68:	e032      	b.n	8005dd0 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005d6a:	4b5c      	ldr	r3, [pc, #368]	; (8005edc <extInt_Config+0xd4c>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	7912      	ldrb	r2, [r2, #4]
 8005d74:	4611      	mov	r1, r2
 8005d76:	2201      	movs	r2, #1
 8005d78:	408a      	lsls	r2, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4a57      	ldr	r2, [pc, #348]	; (8005edc <extInt_Config+0xd4c>)
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	60d3      	str	r3, [r2, #12]

		break;
 8005d82:	e027      	b.n	8005dd4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005d84:	4b55      	ldr	r3, [pc, #340]	; (8005edc <extInt_Config+0xd4c>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	7912      	ldrb	r2, [r2, #4]
 8005d8e:	4611      	mov	r1, r2
 8005d90:	2201      	movs	r2, #1
 8005d92:	408a      	lsls	r2, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	4a51      	ldr	r2, [pc, #324]	; (8005edc <extInt_Config+0xd4c>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6093      	str	r3, [r2, #8]

		break;
 8005d9c:	e01a      	b.n	8005dd4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005d9e:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <extInt_Config+0xd4c>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	7912      	ldrb	r2, [r2, #4]
 8005da8:	4611      	mov	r1, r2
 8005daa:	2201      	movs	r2, #1
 8005dac:	408a      	lsls	r2, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	4a4a      	ldr	r2, [pc, #296]	; (8005edc <extInt_Config+0xd4c>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005db6:	4b49      	ldr	r3, [pc, #292]	; (8005edc <extInt_Config+0xd4c>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	7912      	ldrb	r2, [r2, #4]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	408a      	lsls	r2, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4a44      	ldr	r2, [pc, #272]	; (8005edc <extInt_Config+0xd4c>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6093      	str	r3, [r2, #8]

		break;
 8005dce:	e001      	b.n	8005dd4 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8005dd0:	bf00      	nop
		break;
 8005dd2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd4:	b672      	cpsid	i
}
 8005dd6:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005dd8:	4b40      	ldr	r3, [pc, #256]	; (8005edc <extInt_Config+0xd4c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	7912      	ldrb	r2, [r2, #4]
 8005de2:	4611      	mov	r1, r2
 8005de4:	2201      	movs	r2, #1
 8005de6:	408a      	lsls	r2, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <extInt_Config+0xd4c>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d862      	bhi.n	8005ec0 <extInt_Config+0xd30>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <extInt_Config+0xc70>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e49 	.word	0x08005e49
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e61 	.word	0x08005e61
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005e71 	.word	0x08005e71
 8005e1c:	08005e79 	.word	0x08005e79
 8005e20:	08005e81 	.word	0x08005e81
 8005e24:	08005e89 	.word	0x08005e89
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e99 	.word	0x08005e99
 8005e30:	08005ea1 	.word	0x08005ea1
 8005e34:	08005ea9 	.word	0x08005ea9
 8005e38:	08005eb1 	.word	0x08005eb1
 8005e3c:	08005eb9 	.word	0x08005eb9
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8005e40:	2006      	movs	r0, #6
 8005e42:	f7ff f987 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e46:	e03d      	b.n	8005ec4 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8005e48:	2007      	movs	r0, #7
 8005e4a:	f7ff f983 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e4e:	e039      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8005e50:	2008      	movs	r0, #8
 8005e52:	f7ff f97f 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e56:	e035      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8005e58:	2009      	movs	r0, #9
 8005e5a:	f7ff f97b 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e5e:	e031      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8005e60:	200a      	movs	r0, #10
 8005e62:	f7ff f977 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e66:	e02d      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e68:	2017      	movs	r0, #23
 8005e6a:	f7ff f973 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e6e:	e029      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e70:	2017      	movs	r0, #23
 8005e72:	f7ff f96f 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e76:	e025      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e78:	2017      	movs	r0, #23
 8005e7a:	f7ff f96b 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e7e:	e021      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e80:	2017      	movs	r0, #23
 8005e82:	f7ff f967 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e86:	e01d      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e88:	2017      	movs	r0, #23
 8005e8a:	f7ff f963 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e8e:	e019      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005e90:	2028      	movs	r0, #40	; 0x28
 8005e92:	f7ff f95f 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e96:	e015      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005e98:	2028      	movs	r0, #40	; 0x28
 8005e9a:	f7ff f95b 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005e9e:	e011      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ea0:	2028      	movs	r0, #40	; 0x28
 8005ea2:	f7ff f957 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005ea6:	e00d      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ea8:	2028      	movs	r0, #40	; 0x28
 8005eaa:	f7ff f953 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005eae:	e009      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005eb0:	2028      	movs	r0, #40	; 0x28
 8005eb2:	f7ff f94f 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005eb6:	e005      	b.n	8005ec4 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005eb8:	2028      	movs	r0, #40	; 0x28
 8005eba:	f7ff f94b 	bl	8005154 <__NVIC_EnableIRQ>
			break;
 8005ebe:	e001      	b.n	8005ec4 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8005ec0:	bf00      	nop
			break;
 8005ec2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005ec4:	b662      	cpsie	i
}
 8005ec6:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40021c00 	.word	0x40021c00
 8005edc:	40013c00 	.word	0x40013c00

08005ee0 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
	__NOP();
 8005ee4:	bf00      	nop
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <callback_extInt1>:
__attribute__ ((weak)) void callback_extInt1(void){
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	__NOP();
 8005ef4:	bf00      	nop
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt2(void){
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	__NOP();
 8005f04:	bf00      	nop
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <callback_extInt3>:
__attribute__ ((weak)) void callback_extInt3(void){
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	__NOP();
 8005f14:	bf00      	nop
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt4(void){
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	__NOP();
 8005f24:	bf00      	nop
}
 8005f26:	bf00      	nop
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
	__NOP();
 8005f34:	bf00      	nop
}
 8005f36:	bf00      	nop
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	__NOP();
 8005f44:	bf00      	nop
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
	__NOP();
 8005f54:	bf00      	nop
}
 8005f56:	bf00      	nop
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	__NOP();
 8005f64:	bf00      	nop
}
 8005f66:	bf00      	nop
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
	__NOP();
 8005f74:	bf00      	nop
}
 8005f76:	bf00      	nop
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	__NOP();
 8005f84:	bf00      	nop
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
	__NOP();
 8005f94:	bf00      	nop
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
	__NOP();
 8005fa4:	bf00      	nop
}
 8005fa6:	bf00      	nop
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
	__NOP();
 8005fb4:	bf00      	nop
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
	__NOP();
 8005fc4:	bf00      	nop
}
 8005fc6:	bf00      	nop
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
	__NOP();
 8005fd4:	bf00      	nop
}
 8005fd6:	bf00      	nop
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8005fe4:	4b07      	ldr	r3, [pc, #28]	; (8006004 <EXTI0_IRQHandler+0x24>)
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <EXTI0_IRQHandler+0x24>)
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	4a03      	ldr	r2, [pc, #12]	; (8006004 <EXTI0_IRQHandler+0x24>)
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8005ffc:	f7ff ff70 	bl	8005ee0 <callback_extInt0>
	}
}
 8006000:	bf00      	nop
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40013c00 	.word	0x40013c00

08006008 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <EXTI1_IRQHandler+0x24>)
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <EXTI1_IRQHandler+0x24>)
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <EXTI1_IRQHandler+0x24>)
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8006024:	f7ff ff64 	bl	8005ef0 <callback_extInt1>
	}
}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40013c00 	.word	0x40013c00

08006030 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <EXTI2_IRQHandler+0x24>)
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <EXTI2_IRQHandler+0x24>)
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	4a03      	ldr	r2, [pc, #12]	; (8006054 <EXTI2_IRQHandler+0x24>)
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800604c:	f7ff ff58 	bl	8005f00 <callback_extInt2>
	}
}
 8006050:	bf00      	nop
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40013c00 	.word	0x40013c00

08006058 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800605c:	4b07      	ldr	r3, [pc, #28]	; (800607c <EXTI3_IRQHandler+0x24>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <EXTI3_IRQHandler+0x24>)
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	4a03      	ldr	r2, [pc, #12]	; (800607c <EXTI3_IRQHandler+0x24>)
 800606e:	f043 0308 	orr.w	r3, r3, #8
 8006072:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006074:	f7ff ff4c 	bl	8005f10 <callback_extInt3>
	}
}
 8006078:	bf00      	nop
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40013c00 	.word	0x40013c00

08006080 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8006084:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <EXTI4_IRQHandler+0x24>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <EXTI4_IRQHandler+0x24>)
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	4a03      	ldr	r2, [pc, #12]	; (80060a4 <EXTI4_IRQHandler+0x24>)
 8006096:	f043 0310 	orr.w	r3, r3, #16
 800609a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800609c:	f7ff ff40 	bl	8005f20 <callback_extInt4>
	}
}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40013c00 	.word	0x40013c00

080060a8 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060be:	f043 0320 	orr.w	r3, r3, #32
 80060c2:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 80060c4:	f7ff ff34 	bl	8005f30 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80060c8:	e03c      	b.n	8006144 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80060d6:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e0:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80060e2:	f7ff ff2d 	bl	8005f40 <callback_extInt6>
}
 80060e6:	e02d      	b.n	8006144 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8006100:	f7ff ff26 	bl	8005f50 <callback_extInt7>
}
 8006104:	e01e      	b.n	8006144 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8006112:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800611c:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800611e:	f7ff ff1f 	bl	8005f60 <callback_extInt8>
}
 8006122:	e00f      	b.n	8006144 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	4a04      	ldr	r2, [pc, #16]	; (8006148 <EXTI9_5_IRQHandler+0xa0>)
 8006136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613a:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800613c:	f7ff ff18 	bl	8005f70 <callback_extInt9>
}
 8006140:	e000      	b.n	8006144 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006142:	bf00      	nop
}
 8006144:	bf00      	nop
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40013c00 	.word	0x40013c00

0800614c <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8006150:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800615c:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	4a29      	ldr	r2, [pc, #164]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 8006162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006166:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8006168:	f7ff ff0a 	bl	8005f80 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800616c:	e049      	b.n	8006202 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800616e:	4b26      	ldr	r3, [pc, #152]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800617a:	4b23      	ldr	r3, [pc, #140]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4a22      	ldr	r2, [pc, #136]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 8006180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006184:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8006186:	f7ff ff03 	bl	8005f90 <callback_extInt11>
}
 800618a:	e03a      	b.n	8006202 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 800619e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061a2:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80061a4:	f7ff fefc 	bl	8005fa0 <callback_extInt12>
}
 80061a8:	e02b      	b.n	8006202 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4a13      	ldr	r2, [pc, #76]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061c0:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 80061c2:	f7ff fef5 	bl	8005fb0 <callback_extInt13>
}
 80061c6:	e01c      	b.n	8006202 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061de:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80061e0:	f7ff feee 	bl	8005fc0 <callback_extInt14>
}
 80061e4:	e00d      	b.n	8006202 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <EXTI15_10_IRQHandler+0xbc>)
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fc:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80061fe:	f7ff fee7 	bl	8005fd0 <callback_extInt15>
}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40013c00 	.word	0x40013c00

0800620c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a88      	ldr	r2, [pc, #544]	; (8006444 <GPIO_Config+0x238>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d106      	bne.n	8006234 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8006226:	4b88      	ldr	r3, [pc, #544]	; (8006448 <GPIO_Config+0x23c>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	4a87      	ldr	r2, [pc, #540]	; (8006448 <GPIO_Config+0x23c>)
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6313      	str	r3, [r2, #48]	; 0x30
 8006232:	e03a      	b.n	80062aa <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a84      	ldr	r2, [pc, #528]	; (800644c <GPIO_Config+0x240>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d106      	bne.n	800624c <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800623e:	4b82      	ldr	r3, [pc, #520]	; (8006448 <GPIO_Config+0x23c>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	4a81      	ldr	r2, [pc, #516]	; (8006448 <GPIO_Config+0x23c>)
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	6313      	str	r3, [r2, #48]	; 0x30
 800624a:	e02e      	b.n	80062aa <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7f      	ldr	r2, [pc, #508]	; (8006450 <GPIO_Config+0x244>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d106      	bne.n	8006264 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8006256:	4b7c      	ldr	r3, [pc, #496]	; (8006448 <GPIO_Config+0x23c>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	4a7b      	ldr	r2, [pc, #492]	; (8006448 <GPIO_Config+0x23c>)
 800625c:	f043 0304 	orr.w	r3, r3, #4
 8006260:	6313      	str	r3, [r2, #48]	; 0x30
 8006262:	e022      	b.n	80062aa <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7a      	ldr	r2, [pc, #488]	; (8006454 <GPIO_Config+0x248>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d106      	bne.n	800627c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800626e:	4b76      	ldr	r3, [pc, #472]	; (8006448 <GPIO_Config+0x23c>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	4a75      	ldr	r2, [pc, #468]	; (8006448 <GPIO_Config+0x23c>)
 8006274:	f043 0308 	orr.w	r3, r3, #8
 8006278:	6313      	str	r3, [r2, #48]	; 0x30
 800627a:	e016      	b.n	80062aa <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a75      	ldr	r2, [pc, #468]	; (8006458 <GPIO_Config+0x24c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d106      	bne.n	8006294 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8006286:	4b70      	ldr	r3, [pc, #448]	; (8006448 <GPIO_Config+0x23c>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4a6f      	ldr	r2, [pc, #444]	; (8006448 <GPIO_Config+0x23c>)
 800628c:	f043 0310 	orr.w	r3, r3, #16
 8006290:	6313      	str	r3, [r2, #48]	; 0x30
 8006292:	e00a      	b.n	80062aa <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a70      	ldr	r2, [pc, #448]	; (800645c <GPIO_Config+0x250>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d105      	bne.n	80062aa <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800629e:	4b6a      	ldr	r3, [pc, #424]	; (8006448 <GPIO_Config+0x23c>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	4a69      	ldr	r2, [pc, #420]	; (8006448 <GPIO_Config+0x23c>)
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	795b      	ldrb	r3, [r3, #5]
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	791b      	ldrb	r3, [r3, #4]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	2103      	movs	r1, #3
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	400a      	ands	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7a1b      	ldrb	r3, [r3, #8]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	791b      	ldrb	r3, [r3, #4]
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	791b      	ldrb	r3, [r3, #4]
 8006304:	4619      	mov	r1, r3
 8006306:	2301      	movs	r3, #1
 8006308:	408b      	lsls	r3, r1
 800630a:	43db      	mvns	r3, r3
 800630c:	4619      	mov	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	400a      	ands	r2, r1
 8006314:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	799b      	ldrb	r3, [r3, #6]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	791b      	ldrb	r3, [r3, #4]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	2103      	movs	r1, #3
 8006346:	fa01 f303 	lsl.w	r3, r1, r3
 800634a:	43db      	mvns	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	400a      	ands	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6899      	ldr	r1, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	79db      	ldrb	r3, [r3, #7]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	791b      	ldrb	r3, [r3, #4]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	2103      	movs	r1, #3
 8006386:	fa01 f303 	lsl.w	r3, r1, r3
 800638a:	43db      	mvns	r3, r3
 800638c:	4619      	mov	r1, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	400a      	ands	r2, r1
 8006394:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68d9      	ldr	r1, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	795b      	ldrb	r3, [r3, #5]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d143      	bne.n	8006436 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	791b      	ldrb	r3, [r3, #4]
 80063b2:	2b07      	cmp	r3, #7
 80063b4:	d81f      	bhi.n	80063f6 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	791b      	ldrb	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	210f      	movs	r1, #15
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	4619      	mov	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	400a      	ands	r2, r1
 80063d6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6a1a      	ldr	r2, [r3, #32]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7a5b      	ldrb	r3, [r3, #9]
 80063e2:	4619      	mov	r1, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	4619      	mov	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 80063f4:	e01f      	b.n	8006436 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	791b      	ldrb	r3, [r3, #4]
 80063fa:	3b08      	subs	r3, #8
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006406:	210f      	movs	r1, #15
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	4619      	mov	r1, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	400a      	ands	r2, r1
 8006418:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7a5b      	ldrb	r3, [r3, #9]
 8006424:	4619      	mov	r1, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	4619      	mov	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40020000 	.word	0x40020000
 8006448:	40023800 	.word	0x40023800
 800644c:	40020400 	.word	0x40020400
 8006450:	40020800 	.word	0x40020800
 8006454:	40020c00 	.word	0x40020c00
 8006458:	40021000 	.word	0x40021000
 800645c:	40021c00 	.word	0x40021c00

08006460 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10d      	bne.n	800648e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	2301      	movs	r3, #1
 8006480:	408b      	lsls	r3, r1
 8006482:	4619      	mov	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800648c:	e00d      	b.n	80064aa <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	3310      	adds	r3, #16
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f303 	lsl.w	r3, r1, r3
 80064a0:	4619      	mov	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	619a      	str	r2, [r3, #24]
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	2301      	movs	r3, #1
 80064d6:	408b      	lsls	r3, r1
 80064d8:	4619      	mov	r1, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 80064e2:	e00d      	b.n	8006500 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	3310      	adds	r3, #16
 80064f0:	2101      	movs	r1, #1
 80064f2:	fa01 f303 	lsl.w	r3, r1, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	619a      	str	r2, [r3, #24]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	791b      	ldrb	r3, [r3, #4]
 800651c:	461a      	mov	r2, r3
 800651e:	2301      	movs	r3, #1
 8006520:	4093      	lsls	r3, r2
 8006522:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800652c:	897b      	ldrh	r3, [r7, #10]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	791b      	ldrb	r3, [r3, #4]
 8006538:	461a      	mov	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	40d3      	lsrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ffd8 	bl	800650c <GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ff76 	bl	8006460 <GPIO_WritePin>
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fe3b 	bl	800620c <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fe36 	bl	800620c <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 ffcb 	bl	8008540 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 80065aa:	e004      	b.n	80065b6 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f94f 	bl	8006850 <WHOIAM>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f7      	beq.n	80065ac <configMPUAccel+0x30>
	}

	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 80065bc:	216b      	movs	r1, #107	; 0x6b
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8f1 	bl	80067a6 <readData>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73bb      	strb	r3, [r7, #14]
	byte &=  ~byte;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	461a      	mov	r2, r3
 80065d0:	216b      	movs	r1, #107	; 0x6b
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f89c 	bl	8006710 <writeData>
	byte = readData(ptrMPUAccel, 0x6B);
 80065d8:	216b      	movs	r1, #107	; 0x6b
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8e3 	bl	80067a6 <readData>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 80065e4:	211c      	movs	r1, #28
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8dd 	bl	80067a6 <readData>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	f023 0318 	bic.w	r3, r3, #24
 80065f6:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d833      	bhi.n	8006668 <configMPUAccel+0xec>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <configMPUAccel+0x8c>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006619 	.word	0x08006619
 800660c:	08006627 	.word	0x08006627
 8006610:	0800663d 	.word	0x0800663d
 8006614:	08006653 	.word	0x08006653
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	461a      	mov	r2, r3
 800661c:	211c      	movs	r1, #28
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f876 	bl	8006710 <writeData>

				break;
 8006624:	e021      	b.n	800666a <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	461a      	mov	r2, r3
 8006632:	211c      	movs	r1, #28
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f86b 	bl	8006710 <writeData>

				break;
 800663a:	e016      	b.n	800666a <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	f043 0310 	orr.w	r3, r3, #16
 8006642:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	461a      	mov	r2, r3
 8006648:	211c      	movs	r1, #28
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f860 	bl	8006710 <writeData>

				break;
 8006650:	e00b      	b.n	800666a <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	f043 0318 	orr.w	r3, r3, #24
 8006658:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	461a      	mov	r2, r3
 800665e:	211c      	movs	r1, #28
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f855 	bl	8006710 <writeData>

				break;
 8006666:	e000      	b.n	800666a <configMPUAccel+0xee>
			}default:{
				break;
 8006668:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800666a:	211c      	movs	r1, #28
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f89a 	bl	80067a6 <readData>
 8006672:	4603      	mov	r3, r0
 8006674:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8006676:	211b      	movs	r1, #27
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f894 	bl	80067a6 <readData>
 800667e:	4603      	mov	r3, r0
 8006680:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	f023 0318 	bic.w	r3, r3, #24
 8006688:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d832      	bhi.n	80066f8 <configMPUAccel+0x17c>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <configMPUAccel+0x11c>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066b7 	.word	0x080066b7
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066e3 	.word	0x080066e3
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	461a      	mov	r2, r3
 80066ac:	211b      	movs	r1, #27
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f82e 	bl	8006710 <writeData>

				break;
 80066b4:	e021      	b.n	80066fa <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	f043 0308 	orr.w	r3, r3, #8
 80066bc:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	461a      	mov	r2, r3
 80066c2:	211b      	movs	r1, #27
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f823 	bl	8006710 <writeData>

				break;
 80066ca:	e016      	b.n	80066fa <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	f043 0310 	orr.w	r3, r3, #16
 80066d2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	461a      	mov	r2, r3
 80066d8:	211b      	movs	r1, #27
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f818 	bl	8006710 <writeData>

				break;
 80066e0:	e00b      	b.n	80066fa <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	f043 0318 	orr.w	r3, r3, #24
 80066e8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	461a      	mov	r2, r3
 80066ee:	211b      	movs	r1, #27
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f80d 	bl	8006710 <writeData>

				break;
 80066f6:	e000      	b.n	80066fa <configMPUAccel+0x17e>
			}default:{
				break;
 80066f8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80066fa:	211b      	movs	r1, #27
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f852 	bl	80067a6 <readData>
 8006702:	4603      	mov	r3, r0
 8006704:	73bb      	strb	r3, [r7, #14]


}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
 800671c:	4613      	mov	r3, r2
 800671e:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4618      	mov	r0, r3
 800673a:	f002 f885 	bl	8008848 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68d8      	ldr	r0, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	791b      	ldrb	r3, [r3, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	4619      	mov	r1, r3
 800674c:	f002 f8cf 	bl	80088ee <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f002 f8f0 	bl	800893e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800675e:	e000      	b.n	8006762 <writeData+0x52>
		__NOP();
 8006760:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f6      	bne.n	8006760 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	78ba      	ldrb	r2, [r7, #2]
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f002 f8f9 	bl	8008972 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006780:	e000      	b.n	8006784 <writeData+0x74>
		__NOP();
 8006782:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f6      	bne.n	8006782 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4618      	mov	r0, r3
 800679a:	f002 f843 	bl	8008824 <i2c_stopTransaction>



}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c8:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f002 f83a 	bl	8008848 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68d8      	ldr	r0, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	791b      	ldrb	r3, [r3, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	4619      	mov	r1, r3
 80067e2:	f002 f884 	bl	80088ee <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f002 f8a5 	bl	800893e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80067f4:	e000      	b.n	80067f8 <readData+0x52>
		__NOP();
 80067f6:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f6      	bne.n	80067f6 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4618      	mov	r0, r3
 800680e:	f002 f840 	bl	8008892 <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68d8      	ldr	r0, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	791b      	ldrb	r3, [r3, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	4619      	mov	r1, r3
 8006820:	f002 f865 	bl	80088ee <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4618      	mov	r0, r3
 800682a:	f002 f84e 	bl	80088ca <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fff6 	bl	8008824 <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4618      	mov	r0, r3
 800683e:	f002 f8b2 	bl	80089a6 <i2c_readDataByte>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8006860:	2175      	movs	r1, #117	; 0x75
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff9f 	bl	80067a6 <readData>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006872:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8006886:	7bbb      	ldrb	r3, [r7, #14]

}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 80068b0:	2143      	movs	r1, #67	; 0x43
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff77 	bl	80067a6 <readData>
 80068b8:	4603      	mov	r3, r0
 80068ba:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 80068bc:	2144      	movs	r1, #68	; 0x44
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff71 	bl	80067a6 <readData>
 80068c4:	4603      	mov	r3, r0
 80068c6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 80068c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	b21a      	sxth	r2, r3
 80068d0:	89bb      	ldrh	r3, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d846      	bhi.n	800696c <readGyro_X+0xdc>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <readGyro_X+0x54>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006913 	.word	0x08006913
 80068ec:	08006931 	.word	0x08006931
 80068f0:	0800694f 	.word	0x0800694f
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 80068f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7f9 fdc3 	bl	8000484 <__aeabi_i2d>
 80068fe:	a325      	add	r3, pc, #148	; (adr r3, 8006994 <readGyro_X+0x104>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 ff52 	bl	80007ac <__aeabi_ddiv>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006910:	e02d      	b.n	800696e <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8006912:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fdb4 	bl	8000484 <__aeabi_i2d>
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	4b19      	ldr	r3, [pc, #100]	; (8006988 <readGyro_X+0xf8>)
 8006922:	f7f9 ff43 	bl	80007ac <__aeabi_ddiv>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800692e:	e01e      	b.n	800696e <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8006930:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006934:	4618      	mov	r0, r3
 8006936:	f7f9 fda5 	bl	8000484 <__aeabi_i2d>
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <readGyro_X+0xfc>)
 8006940:	f7f9 ff34 	bl	80007ac <__aeabi_ddiv>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800694c:	e00f      	b.n	800696e <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800694e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fd96 	bl	8000484 <__aeabi_i2d>
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <readGyro_X+0x100>)
 800695e:	f7f9 ff25 	bl	80007ac <__aeabi_ddiv>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800696a:	e000      	b.n	800696e <readGyro_X+0xde>
		}default:{
			break;
 800696c:	bf00      	nop
		}

	}

	return GYROX_R;
 800696e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006972:	f7fa f8e9 	bl	8000b48 <__aeabi_d2f>
 8006976:	4603      	mov	r3, r0
 8006978:	ee07 3a90 	vmov	s15, r3

}
 800697c:	eeb0 0a67 	vmov.f32	s0, s15
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40508000 	.word	0x40508000
 800698c:	40408000 	.word	0x40408000
 8006990:	40300000 	.word	0x40300000
 8006994:	00000000 	.word	0x00000000
 8006998:	40606000 	.word	0x40606000
 800699c:	00000000 	.word	0x00000000

080069a0 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 80069c0:	2145      	movs	r1, #69	; 0x45
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff feef 	bl	80067a6 <readData>
 80069c8:	4603      	mov	r3, r0
 80069ca:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 80069cc:	2146      	movs	r1, #70	; 0x46
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fee9 	bl	80067a6 <readData>
 80069d4:	4603      	mov	r3, r0
 80069d6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 80069d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b21a      	sxth	r2, r3
 80069e0:	89bb      	ldrh	r3, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d846      	bhi.n	8006a7c <readGyro_Y+0xdc>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <readGyro_Y+0x54>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a41 	.word	0x08006a41
 8006a00:	08006a5f 	.word	0x08006a5f
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8006a04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7f9 fd3b 	bl	8000484 <__aeabi_i2d>
 8006a0e:	a325      	add	r3, pc, #148	; (adr r3, 8006aa4 <readGyro_Y+0x104>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f7f9 feca 	bl	80007ac <__aeabi_ddiv>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006a20:	e02d      	b.n	8006a7e <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8006a22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7f9 fd2c 	bl	8000484 <__aeabi_i2d>
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <readGyro_Y+0xf8>)
 8006a32:	f7f9 febb 	bl	80007ac <__aeabi_ddiv>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006a3e:	e01e      	b.n	8006a7e <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8006a40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7f9 fd1d 	bl	8000484 <__aeabi_i2d>
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <readGyro_Y+0xfc>)
 8006a50:	f7f9 feac 	bl	80007ac <__aeabi_ddiv>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006a5c:	e00f      	b.n	8006a7e <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8006a5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fd0e 	bl	8000484 <__aeabi_i2d>
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <readGyro_Y+0x100>)
 8006a6e:	f7f9 fe9d 	bl	80007ac <__aeabi_ddiv>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006a7a:	e000      	b.n	8006a7e <readGyro_Y+0xde>
		}default:{
			break;
 8006a7c:	bf00      	nop
		}

	}

	return GYROY_R;
 8006a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a82:	f7fa f861 	bl	8000b48 <__aeabi_d2f>
 8006a86:	4603      	mov	r3, r0
 8006a88:	ee07 3a90 	vmov	s15, r3

}
 8006a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40508000 	.word	0x40508000
 8006a9c:	40408000 	.word	0x40408000
 8006aa0:	40300000 	.word	0x40300000
 8006aa4:	00000000 	.word	0x00000000
 8006aa8:	40606000 	.word	0x40606000
 8006aac:	00000000 	.word	0x00000000

08006ab0 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8006ad0:	2147      	movs	r1, #71	; 0x47
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe67 	bl	80067a6 <readData>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8006adc:	2148      	movs	r1, #72	; 0x48
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fe61 	bl	80067a6 <readData>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8006ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d846      	bhi.n	8006b8c <readGyro_Z+0xdc>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <readGyro_Z+0x54>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b33 	.word	0x08006b33
 8006b0c:	08006b51 	.word	0x08006b51
 8006b10:	08006b6f 	.word	0x08006b6f
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8006b14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7f9 fcb3 	bl	8000484 <__aeabi_i2d>
 8006b1e:	a325      	add	r3, pc, #148	; (adr r3, 8006bb4 <readGyro_Z+0x104>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fe42 	bl	80007ac <__aeabi_ddiv>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b30:	e02d      	b.n	8006b8e <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8006b32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fca4 	bl	8000484 <__aeabi_i2d>
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <readGyro_Z+0xf8>)
 8006b42:	f7f9 fe33 	bl	80007ac <__aeabi_ddiv>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b4e:	e01e      	b.n	8006b8e <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8006b50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7f9 fc95 	bl	8000484 <__aeabi_i2d>
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <readGyro_Z+0xfc>)
 8006b60:	f7f9 fe24 	bl	80007ac <__aeabi_ddiv>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b6c:	e00f      	b.n	8006b8e <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8006b6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7f9 fc86 	bl	8000484 <__aeabi_i2d>
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <readGyro_Z+0x100>)
 8006b7e:	f7f9 fe15 	bl	80007ac <__aeabi_ddiv>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006b8a:	e000      	b.n	8006b8e <readGyro_Z+0xde>
		}default:{
			break;
 8006b8c:	bf00      	nop
		}

	}

	return GYROZ_R;
 8006b8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b92:	f7f9 ffd9 	bl	8000b48 <__aeabi_d2f>
 8006b96:	4603      	mov	r3, r0
 8006b98:	ee07 3a90 	vmov	s15, r3

}
 8006b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40508000 	.word	0x40508000
 8006bac:	40408000 	.word	0x40408000
 8006bb0:	40300000 	.word	0x40300000
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	40606000 	.word	0x40606000

08006bbc <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a6c      	ldr	r2, [pc, #432]	; (8006d7c <pwm_Config+0x1c0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d106      	bne.n	8006bdc <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8006bce:	4b6c      	ldr	r3, [pc, #432]	; (8006d80 <pwm_Config+0x1c4>)
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	4a6b      	ldr	r2, [pc, #428]	; (8006d80 <pwm_Config+0x1c4>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bda:	e030      	b.n	8006c3e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be4:	d106      	bne.n	8006bf4 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8006be6:	4b66      	ldr	r3, [pc, #408]	; (8006d80 <pwm_Config+0x1c4>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	4a65      	ldr	r2, [pc, #404]	; (8006d80 <pwm_Config+0x1c4>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf2:	e024      	b.n	8006c3e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a62      	ldr	r2, [pc, #392]	; (8006d84 <pwm_Config+0x1c8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d106      	bne.n	8006c0c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8006bfe:	4b60      	ldr	r3, [pc, #384]	; (8006d80 <pwm_Config+0x1c4>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a5f      	ldr	r2, [pc, #380]	; (8006d80 <pwm_Config+0x1c4>)
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0a:	e018      	b.n	8006c3e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a5d      	ldr	r2, [pc, #372]	; (8006d88 <pwm_Config+0x1cc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d106      	bne.n	8006c24 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006c16:	4b5a      	ldr	r3, [pc, #360]	; (8006d80 <pwm_Config+0x1c4>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	4a59      	ldr	r2, [pc, #356]	; (8006d80 <pwm_Config+0x1c4>)
 8006c1c:	f043 0304 	orr.w	r3, r3, #4
 8006c20:	6413      	str	r3, [r2, #64]	; 0x40
 8006c22:	e00c      	b.n	8006c3e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a58      	ldr	r2, [pc, #352]	; (8006d8c <pwm_Config+0x1d0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d106      	bne.n	8006c3c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8006c2e:	4b54      	ldr	r3, [pc, #336]	; (8006d80 <pwm_Config+0x1c4>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	4a53      	ldr	r2, [pc, #332]	; (8006d80 <pwm_Config+0x1c4>)
 8006c34:	f043 0308 	orr.w	r3, r3, #8
 8006c38:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3a:	e000      	b.n	8006c3e <pwm_Config+0x82>
	}
	else{
		__NOP();
 8006c3c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c4c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7d5b      	ldrb	r3, [r3, #21]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8ac 	bl	8006db4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f9c3 	bl	8006fe8 <setDuttyCycle>
 8006c62:	e005      	b.n	8006c70 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f8a5 	bl	8006db4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa94 	bl	8007198 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0210 	bic.w	r2, r2, #16
 8006c7e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	791b      	ldrb	r3, [r3, #4]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d86f      	bhi.n	8006d70 <pwm_Config+0x1b4>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <pwm_Config+0xdc>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cdb 	.word	0x08006cdb
 8006ca0:	08006d0d 	.word	0x08006d0d
 8006ca4:	08006d3f 	.word	0x08006d3f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0203 	bic.w	r2, r2, #3
 8006cb6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006cc6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0208 	orr.w	r2, r2, #8
 8006cd6:	619a      	str	r2, [r3, #24]


		break;
 8006cd8:	e04b      	b.n	8006d72 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ce8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006cf8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d08:	619a      	str	r2, [r3, #24]

		break;
 8006d0a:	e032      	b.n	8006d72 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0203 	bic.w	r2, r2, #3
 8006d1a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69da      	ldr	r2, [r3, #28]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006d2a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69da      	ldr	r2, [r3, #28]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0208 	orr.w	r2, r2, #8
 8006d3a:	61da      	str	r2, [r3, #28]

		break;
 8006d3c:	e019      	b.n	8006d72 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d4c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006d5c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d6c:	61da      	str	r2, [r3, #28]

		break;
 8006d6e:	e000      	b.n	8006d72 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8006d70:	bf00      	nop
	}// fin del switch-case




}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00

08006d90 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6892      	ldr	r2, [r2, #8]
 8006dc8:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_10us )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2ba0      	cmp	r3, #160	; 0xa0
 8006dd4:	d022      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_20MHz_10us)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2bc8      	cmp	r3, #200	; 0xc8
 8006dda:	d01f      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_30MHz_10us)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006de2:	d01b      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_40MHz_10us)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006dea:	d017      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_50MHz_10us)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006df2:	d013      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_60MHz_10us)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006dfa:	d00f      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_70MHz_10us)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006e02:	d00b      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_80MHz_10us)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006e0a:	d007      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_90MHz_10us)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8006e12:	d003      	beq.n	8006e1c <setFrequency+0x68>
     ||(speed == PWM_SPEED_100MHz_10us)){
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1a:	d111      	bne.n	8006e40 <setFrequency+0x8c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	899b      	ldrh	r3, [r3, #12]
 8006e20:	461a      	mov	r2, r3
 8006e22:	0152      	lsls	r2, r2, #5
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	0092      	lsls	r2, r2, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	4b68      	ldr	r3, [pc, #416]	; (8006fd0 <setFrequency+0x21c>)
 8006e30:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8006e32:	4b67      	ldr	r3, [pc, #412]	; (8006fd0 <setFrequency+0x21c>)
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e3e:	e0c0      	b.n	8006fc2 <setFrequency+0x20e>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2ba0      	cmp	r3, #160	; 0xa0
 8006e44:	d022      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2bc8      	cmp	r3, #200	; 0xc8
 8006e4a:	d01f      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006e52:	d01b      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006e5a:	d017      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e62:	d013      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006e6a:	d00f      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006e72:	d00b      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006e7a:	d007      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8006e82:	d003      	beq.n	8006e8c <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e8a:	d114      	bne.n	8006eb6 <setFrequency+0x102>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	899b      	ldrh	r3, [r3, #12]
 8006e90:	461a      	mov	r2, r3
 8006e92:	0092      	lsls	r2, r2, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	461a      	mov	r2, r3
 8006e98:	0091      	lsls	r1, r2, #2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <setFrequency+0x21c>)
 8006ea6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8006ea8:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <setFrequency+0x21c>)
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8006eb4:	e085      	b.n	8006fc2 <setFrequency+0x20e>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ebc:	d029      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006ec4:	d025      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_30MHz_100us)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d020      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006ed6:	d01c      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_50MHz_100us)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d017      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_60MHz_100us)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f241 7270 	movw	r2, #6000	; 0x1770
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d012      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f641 3258 	movw	r2, #7000	; 0x1b58
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00d      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_80MHz_100us)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006efc:	d009      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f242 3228 	movw	r2, #9000	; 0x2328
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10f      	bne.n	8006f32 <setFrequency+0x17e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	899b      	ldrh	r3, [r3, #12]
 8006f16:	461a      	mov	r2, r3
 8006f18:	0092      	lsls	r2, r2, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	4b2b      	ldr	r3, [pc, #172]	; (8006fd0 <setFrequency+0x21c>)
 8006f22:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <setFrequency+0x21c>)
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f30:	e047      	b.n	8006fc2 <setFrequency+0x20e>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006f38:	d028      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d023      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f247 5230 	movw	r2, #30000	; 0x7530
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01e      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f649 4240 	movw	r2, #40000	; 0x9c40
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d019      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d014      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00f      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <setFrequency+0x220>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00b      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <setFrequency+0x224>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <setFrequency+0x228>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <setFrequency+0x22c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d10a      	bne.n	8006fa2 <setFrequency+0x1ee>

		periodo = ptrPwmHandler->config.periodo;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	899a      	ldrh	r2, [r3, #12]
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <setFrequency+0x21c>)
 8006f92:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <setFrequency+0x21c>)
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	1e5a      	subs	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fa0:	e00f      	b.n	8006fc2 <setFrequency+0x20e>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	899b      	ldrh	r3, [r3, #12]
 8006fa6:	4a0f      	ldr	r2, [pc, #60]	; (8006fe4 <setFrequency+0x230>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <setFrequency+0x21c>)
 8006fb2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <setFrequency+0x21c>)
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200130f0 	.word	0x200130f0
 8006fd4:	00011170 	.word	0x00011170
 8006fd8:	00013880 	.word	0x00013880
 8006fdc:	00015f90 	.word	0x00015f90
 8006fe0:	000186a0 	.word	0x000186a0
 8006fe4:	cccccccd 	.word	0xcccccccd

08006fe8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b08b      	sub	sp, #44	; 0x2c
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	791b      	ldrb	r3, [r3, #4]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	f200 80c3 	bhi.w	8007180 <setDuttyCycle+0x198>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <setDuttyCycle+0x18>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007011 	.word	0x08007011
 8007004:	0800706d 	.word	0x0800706d
 8007008:	080070c9 	.word	0x080070c9
 800700c:	08007125 	.word	0x08007125
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	ed93 7a04 	vldr	s14, [r3, #16]
 8007016:	4b5d      	ldr	r3, [pc, #372]	; (800718c <setDuttyCycle+0x1a4>)
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	ee17 0a90 	vmov	r0, s15
 800702a:	f7f9 fa3d 	bl	80004a8 <__aeabi_f2d>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	4b55      	ldr	r3, [pc, #340]	; (8007190 <setDuttyCycle+0x1a8>)
 800703c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007040:	f7f9 fbb4 	bl	80007ac <__aeabi_ddiv>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	4b50      	ldr	r3, [pc, #320]	; (8007194 <setDuttyCycle+0x1ac>)
 8007052:	f7f9 f8c9 	bl	80001e8 <__aeabi_dsub>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681c      	ldr	r4, [r3, #0]
 8007062:	f7f9 fd51 	bl	8000b08 <__aeabi_d2uiz>
 8007066:	4603      	mov	r3, r0
 8007068:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800706a:	e08a      	b.n	8007182 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	ed93 7a04 	vldr	s14, [r3, #16]
 8007072:	4b46      	ldr	r3, [pc, #280]	; (800718c <setDuttyCycle+0x1a4>)
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800707e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007082:	ee17 0a90 	vmov	r0, s15
 8007086:	f7f9 fa0f 	bl	80004a8 <__aeabi_f2d>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <setDuttyCycle+0x1a8>)
 8007098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800709c:	f7f9 fb86 	bl	80007ac <__aeabi_ddiv>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4610      	mov	r0, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <setDuttyCycle+0x1ac>)
 80070ae:	f7f9 f89b 	bl	80001e8 <__aeabi_dsub>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4610      	mov	r0, r2
 80070b8:	4619      	mov	r1, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681c      	ldr	r4, [r3, #0]
 80070be:	f7f9 fd23 	bl	8000b08 <__aeabi_d2uiz>
 80070c2:	4603      	mov	r3, r0
 80070c4:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80070c6:	e05c      	b.n	8007182 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80070ce:	4b2f      	ldr	r3, [pc, #188]	; (800718c <setDuttyCycle+0x1a4>)
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	ee17 0a90 	vmov	r0, s15
 80070e2:	f7f9 f9e1 	bl	80004a8 <__aeabi_f2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	4b27      	ldr	r3, [pc, #156]	; (8007190 <setDuttyCycle+0x1a8>)
 80070f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070f8:	f7f9 fb58 	bl	80007ac <__aeabi_ddiv>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	4b22      	ldr	r3, [pc, #136]	; (8007194 <setDuttyCycle+0x1ac>)
 800710a:	f7f9 f86d 	bl	80001e8 <__aeabi_dsub>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681c      	ldr	r4, [r3, #0]
 800711a:	f7f9 fcf5 	bl	8000b08 <__aeabi_d2uiz>
 800711e:	4603      	mov	r3, r0
 8007120:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8007122:	e02e      	b.n	8007182 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	ed93 7a04 	vldr	s14, [r3, #16]
 800712a:	4b18      	ldr	r3, [pc, #96]	; (800718c <setDuttyCycle+0x1a4>)
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	ee17 0a90 	vmov	r0, s15
 800713e:	f7f9 f9b3 	bl	80004a8 <__aeabi_f2d>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <setDuttyCycle+0x1a8>)
 8007150:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007154:	f7f9 fb2a 	bl	80007ac <__aeabi_ddiv>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4610      	mov	r0, r2
 800715e:	4619      	mov	r1, r3
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <setDuttyCycle+0x1ac>)
 8007166:	f7f9 f83f 	bl	80001e8 <__aeabi_dsub>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4610      	mov	r0, r2
 8007170:	4619      	mov	r1, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681c      	ldr	r4, [r3, #0]
 8007176:	f7f9 fcc7 	bl	8000b08 <__aeabi_d2uiz>
 800717a:	4603      	mov	r3, r0
 800717c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800717e:	e000      	b.n	8007182 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8007180:	bf00      	nop
	}

	}// fin del switch-case

}
 8007182:	bf00      	nop
 8007184:	372c      	adds	r7, #44	; 0x2c
 8007186:	46bd      	mov	sp, r7
 8007188:	bd90      	pop	{r4, r7, pc}
 800718a:	bf00      	nop
 800718c:	200130f0 	.word	0x200130f0
 8007190:	40590000 	.word	0x40590000
 8007194:	3ff00000 	.word	0x3ff00000

08007198 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b08b      	sub	sp, #44	; 0x2c
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	f200 80d3 	bhi.w	8007350 <setDuttyCycleAfOpt+0x1b8>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <setDuttyCycleAfOpt+0x18>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	08007225 	.word	0x08007225
 80071b8:	08007289 	.word	0x08007289
 80071bc:	080072ed 	.word	0x080072ed
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80071c6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800735c <setDuttyCycleAfOpt+0x1c4>
 80071ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80071ce:	4b64      	ldr	r3, [pc, #400]	; (8007360 <setDuttyCycleAfOpt+0x1c8>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	ee17 0a90 	vmov	r0, s15
 80071e2:	f7f9 f961 	bl	80004a8 <__aeabi_f2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	4b5c      	ldr	r3, [pc, #368]	; (8007364 <setDuttyCycleAfOpt+0x1cc>)
 80071f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071f8:	f7f9 fad8 	bl	80007ac <__aeabi_ddiv>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4610      	mov	r0, r2
 8007202:	4619      	mov	r1, r3
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	4b57      	ldr	r3, [pc, #348]	; (8007368 <setDuttyCycleAfOpt+0x1d0>)
 800720a:	f7f8 ffed 	bl	80001e8 <__aeabi_dsub>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681c      	ldr	r4, [r3, #0]
 800721a:	f7f9 fc75 	bl	8000b08 <__aeabi_d2uiz>
 800721e:	4603      	mov	r3, r0
 8007220:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8007222:	e096      	b.n	8007352 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	edd3 7a04 	vldr	s15, [r3, #16]
 800722a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800735c <setDuttyCycleAfOpt+0x1c4>
 800722e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007232:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <setDuttyCycleAfOpt+0x1c8>)
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	ee17 0a90 	vmov	r0, s15
 8007246:	f7f9 f92f 	bl	80004a8 <__aeabi_f2d>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	4b43      	ldr	r3, [pc, #268]	; (8007364 <setDuttyCycleAfOpt+0x1cc>)
 8007258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800725c:	f7f9 faa6 	bl	80007ac <__aeabi_ddiv>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <setDuttyCycleAfOpt+0x1d0>)
 800726e:	f7f8 ffbb 	bl	80001e8 <__aeabi_dsub>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4610      	mov	r0, r2
 8007278:	4619      	mov	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681c      	ldr	r4, [r3, #0]
 800727e:	f7f9 fc43 	bl	8000b08 <__aeabi_d2uiz>
 8007282:	4603      	mov	r3, r0
 8007284:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8007286:	e064      	b.n	8007352 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	edd3 7a04 	vldr	s15, [r3, #16]
 800728e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800735c <setDuttyCycleAfOpt+0x1c4>
 8007292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007296:	4b32      	ldr	r3, [pc, #200]	; (8007360 <setDuttyCycleAfOpt+0x1c8>)
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	ee17 0a90 	vmov	r0, s15
 80072aa:	f7f9 f8fd 	bl	80004a8 <__aeabi_f2d>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <setDuttyCycleAfOpt+0x1cc>)
 80072bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072c0:	f7f9 fa74 	bl	80007ac <__aeabi_ddiv>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4610      	mov	r0, r2
 80072ca:	4619      	mov	r1, r3
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <setDuttyCycleAfOpt+0x1d0>)
 80072d2:	f7f8 ff89 	bl	80001e8 <__aeabi_dsub>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681c      	ldr	r4, [r3, #0]
 80072e2:	f7f9 fc11 	bl	8000b08 <__aeabi_d2uiz>
 80072e6:	4603      	mov	r3, r0
 80072e8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80072ea:	e032      	b.n	8007352 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80072f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800735c <setDuttyCycleAfOpt+0x1c4>
 80072f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <setDuttyCycleAfOpt+0x1c8>)
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	ee17 0a90 	vmov	r0, s15
 800730e:	f7f9 f8cb 	bl	80004a8 <__aeabi_f2d>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <setDuttyCycleAfOpt+0x1cc>)
 8007320:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007324:	f7f9 fa42 	bl	80007ac <__aeabi_ddiv>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <setDuttyCycleAfOpt+0x1d0>)
 8007336:	f7f8 ff57 	bl	80001e8 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4610      	mov	r0, r2
 8007340:	4619      	mov	r1, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681c      	ldr	r4, [r3, #0]
 8007346:	f7f9 fbdf 	bl	8000b08 <__aeabi_d2uiz>
 800734a:	4603      	mov	r3, r0
 800734c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800734e:	e000      	b.n	8007352 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8007350:	bf00      	nop
	}

	}// fin del switch-case


}
 8007352:	bf00      	nop
 8007354:	372c      	adds	r7, #44	; 0x2c
 8007356:	46bd      	mov	sp, r7
 8007358:	bd90      	pop	{r4, r7, pc}
 800735a:	bf00      	nop
 800735c:	42c80000 	.word	0x42c80000
 8007360:	200130f0 	.word	0x200130f0
 8007364:	40590000 	.word	0x40590000
 8007368:	3ff00000 	.word	0x3ff00000

0800736c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8007376:	4b92      	ldr	r3, [pc, #584]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a91      	ldr	r2, [pc, #580]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800737c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007380:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8007382:	4b8f      	ldr	r3, [pc, #572]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800738a:	4b8e      	ldr	r3, [pc, #568]	; (80075c4 <RCC_enableMaxFrequencies+0x258>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a8d      	ldr	r2, [pc, #564]	; (80075c4 <RCC_enableMaxFrequencies+0x258>)
 8007390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007394:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8007396:	4b8a      	ldr	r3, [pc, #552]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	4a89      	ldr	r2, [pc, #548]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800739c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80073a0:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	f200 82fc 	bhi.w	80079a2 <RCC_enableMaxFrequencies+0x636>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <RCC_enableMaxFrequencies+0x44>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	08007477 	.word	0x08007477
 80073b8:	08007519 	.word	0x08007519
 80073bc:	080075cd 	.word	0x080075cd
 80073c0:	0800766f 	.word	0x0800766f
 80073c4:	08007711 	.word	0x08007711
 80073c8:	080077bd 	.word	0x080077bd
 80073cc:	0800785f 	.word	0x0800785f
 80073d0:	08007901 	.word	0x08007901
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80073d4:	4b7a      	ldr	r3, [pc, #488]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4a79      	ldr	r2, [pc, #484]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80073e0:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4a76      	ldr	r2, [pc, #472]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073e6:	f043 0310 	orr.w	r3, r3, #16
 80073ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80073ec:	4b74      	ldr	r3, [pc, #464]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a73      	ldr	r2, [pc, #460]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80073fc:	4b70      	ldr	r3, [pc, #448]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4a6f      	ldr	r2, [pc, #444]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007402:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8007406:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007408:	4b6d      	ldr	r3, [pc, #436]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a6c      	ldr	r2, [pc, #432]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800740e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007412:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8007414:	4b6a      	ldr	r3, [pc, #424]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4a69      	ldr	r2, [pc, #420]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800741a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800741e:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007420:	4b67      	ldr	r3, [pc, #412]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	4a66      	ldr	r2, [pc, #408]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800742c:	4b64      	ldr	r3, [pc, #400]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	4a63      	ldr	r2, [pc, #396]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007436:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007438:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4a60      	ldr	r2, [pc, #384]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800743e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007442:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007444:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a5d      	ldr	r2, [pc, #372]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800744a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800744e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007450:	e000      	b.n	8007454 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8007452:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007454:	4b5a      	ldr	r3, [pc, #360]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f8      	beq.n	8007452 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007460:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a58      	ldr	r2, [pc, #352]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007466:	f023 030f 	bic.w	r3, r3, #15
 800746a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800746c:	4b56      	ldr	r3, [pc, #344]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 800746e:	4a56      	ldr	r2, [pc, #344]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6013      	str	r3, [r2, #0]

			break;
 8007474:	e296      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007476:	4b52      	ldr	r3, [pc, #328]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4a51      	ldr	r2, [pc, #324]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800747c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007480:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007482:	4b4f      	ldr	r3, [pc, #316]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	4a4e      	ldr	r2, [pc, #312]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007488:	f043 0310 	orr.w	r3, r3, #16
 800748c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800748e:	4b4c      	ldr	r3, [pc, #304]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4a4b      	ldr	r2, [pc, #300]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007494:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800749e:	4b48      	ldr	r3, [pc, #288]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4a47      	ldr	r2, [pc, #284]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074a4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80074a8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80074aa:	4b45      	ldr	r3, [pc, #276]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	4a44      	ldr	r2, [pc, #272]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80074b4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 80074b6:	4b42      	ldr	r3, [pc, #264]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4a41      	ldr	r2, [pc, #260]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80074c2:	4b3f      	ldr	r3, [pc, #252]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	4a3e      	ldr	r2, [pc, #248]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074cc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80074ce:	4b3c      	ldr	r3, [pc, #240]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4a3b      	ldr	r2, [pc, #236]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074d8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80074da:	4b39      	ldr	r3, [pc, #228]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	4a38      	ldr	r2, [pc, #224]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80074e6:	4b36      	ldr	r3, [pc, #216]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a35      	ldr	r2, [pc, #212]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074f0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80074f2:	e000      	b.n	80074f6 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 80074f4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80074f6:	4b32      	ldr	r3, [pc, #200]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f8      	beq.n	80074f4 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007502:	4b31      	ldr	r3, [pc, #196]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a30      	ldr	r2, [pc, #192]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007508:	f023 030f 	bic.w	r3, r3, #15
 800750c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800750e:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007510:	4a2d      	ldr	r2, [pc, #180]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6013      	str	r3, [r2, #0]

			break;
 8007516:	e245      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007518:	4b29      	ldr	r3, [pc, #164]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a28      	ldr	r2, [pc, #160]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800751e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007522:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007524:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800752a:	f043 0310 	orr.w	r3, r3, #16
 800752e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a22      	ldr	r2, [pc, #136]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007536:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800753a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007546:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800754a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007552:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007556:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8007558:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a18      	ldr	r2, [pc, #96]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800755e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007562:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007564:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800756a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007570:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800757a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 8007582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007586:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800758e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007592:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007594:	e000      	b.n	8007598 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8007596:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <RCC_enableMaxFrequencies+0x254>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f8      	beq.n	8007596 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80075a4:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a07      	ldr	r2, [pc, #28]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 80075aa:	f023 030f 	bic.w	r3, r3, #15
 80075ae:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <RCC_enableMaxFrequencies+0x25c>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6013      	str	r3, [r2, #0]


			break;
 80075bc:	e1f2      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
 80075be:	bf00      	nop
 80075c0:	40023800 	.word	0x40023800
 80075c4:	40007000 	.word	0x40007000
 80075c8:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80075cc:	4b79      	ldr	r3, [pc, #484]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a78      	ldr	r2, [pc, #480]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80075d8:	4b76      	ldr	r3, [pc, #472]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4a75      	ldr	r2, [pc, #468]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075de:	f043 0310 	orr.w	r3, r3, #16
 80075e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80075e4:	4b73      	ldr	r3, [pc, #460]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a72      	ldr	r2, [pc, #456]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80075ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80075f4:	4b6f      	ldr	r3, [pc, #444]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4a6e      	ldr	r2, [pc, #440]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80075fa:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80075fe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007600:	4b6c      	ldr	r3, [pc, #432]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a6b      	ldr	r2, [pc, #428]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800760a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800760c:	4b69      	ldr	r3, [pc, #420]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800760e:	4a69      	ldr	r2, [pc, #420]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007614:	4b67      	ldr	r3, [pc, #412]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	4a66      	ldr	r2, [pc, #408]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800761a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800761e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007620:	4b64      	ldr	r3, [pc, #400]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	4a63      	ldr	r2, [pc, #396]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007626:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800762a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800762c:	4b61      	ldr	r3, [pc, #388]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4a60      	ldr	r2, [pc, #384]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007636:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007638:	4b5e      	ldr	r3, [pc, #376]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a5d      	ldr	r2, [pc, #372]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800763e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007642:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007644:	e000      	b.n	8007648 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8007646:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007648:	4b5a      	ldr	r3, [pc, #360]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0f8      	beq.n	8007646 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007654:	4b58      	ldr	r3, [pc, #352]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a57      	ldr	r2, [pc, #348]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 800765a:	f023 030f 	bic.w	r3, r3, #15
 800765e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007660:	4b55      	ldr	r3, [pc, #340]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a54      	ldr	r2, [pc, #336]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	6013      	str	r3, [r2, #0]

			break;
 800766c:	e19a      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800766e:	4b51      	ldr	r3, [pc, #324]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	4a50      	ldr	r2, [pc, #320]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007678:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800767a:	4b4e      	ldr	r3, [pc, #312]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	4a4d      	ldr	r2, [pc, #308]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007680:	f043 0310 	orr.w	r3, r3, #16
 8007684:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007686:	4b4b      	ldr	r3, [pc, #300]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4a4a      	ldr	r2, [pc, #296]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800768c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007694:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8007696:	4b47      	ldr	r3, [pc, #284]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4a46      	ldr	r2, [pc, #280]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800769c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80076a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80076a2:	4b44      	ldr	r3, [pc, #272]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4a43      	ldr	r2, [pc, #268]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80076ac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80076ae:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076b0:	4a40      	ldr	r2, [pc, #256]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80076b6:	4b3f      	ldr	r3, [pc, #252]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4a3e      	ldr	r2, [pc, #248]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80076c2:	4b3c      	ldr	r3, [pc, #240]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	4a3b      	ldr	r2, [pc, #236]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076cc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80076ce:	4b39      	ldr	r3, [pc, #228]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4a38      	ldr	r2, [pc, #224]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076d8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80076da:	4b36      	ldr	r3, [pc, #216]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a35      	ldr	r2, [pc, #212]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80076e6:	e000      	b.n	80076ea <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80076e8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80076ea:	4b32      	ldr	r3, [pc, #200]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f8      	beq.n	80076e8 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80076f6:	4b30      	ldr	r3, [pc, #192]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a2f      	ldr	r2, [pc, #188]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 80076fc:	f023 030f 	bic.w	r3, r3, #15
 8007700:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007702:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	6013      	str	r3, [r2, #0]

			break;
 800770e:	e149      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800771a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800771c:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4a24      	ldr	r2, [pc, #144]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007722:	f043 0310 	orr.w	r3, r3, #16
 8007726:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007728:	4b22      	ldr	r3, [pc, #136]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800772e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007736:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8007738:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800773e:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8007742:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4a1a      	ldr	r2, [pc, #104]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800774a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800774e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007750:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007752:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007758:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800775e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007762:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007764:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4a12      	ldr	r2, [pc, #72]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800776a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800776e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007770:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	4a0f      	ldr	r2, [pc, #60]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800777a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800777c:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 8007782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007786:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007788:	e000      	b.n	800778c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800778a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <RCC_enableMaxFrequencies+0x448>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f8      	beq.n	800778a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a06      	ldr	r2, [pc, #24]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 800779e:	f023 030f 	bic.w	r3, r3, #15
 80077a2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a03      	ldr	r2, [pc, #12]	; (80077b8 <RCC_enableMaxFrequencies+0x44c>)
 80077aa:	f043 0302 	orr.w	r3, r3, #2
 80077ae:	6013      	str	r3, [r2, #0]

			break;
 80077b0:	e0f8      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800
 80077b8:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80077bc:	4b83      	ldr	r3, [pc, #524]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a82      	ldr	r2, [pc, #520]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80077c8:	4b80      	ldr	r3, [pc, #512]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4a7f      	ldr	r2, [pc, #508]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077ce:	f043 0310 	orr.w	r3, r3, #16
 80077d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80077d4:	4b7d      	ldr	r3, [pc, #500]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4a7c      	ldr	r2, [pc, #496]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80077de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80077e4:	4b79      	ldr	r3, [pc, #484]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4a78      	ldr	r2, [pc, #480]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077ea:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80077ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80077f0:	4b76      	ldr	r3, [pc, #472]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4a75      	ldr	r2, [pc, #468]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80077fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80077fc:	4b73      	ldr	r3, [pc, #460]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80077fe:	4a73      	ldr	r2, [pc, #460]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007804:	4b71      	ldr	r3, [pc, #452]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4a70      	ldr	r2, [pc, #448]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800780a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007810:	4b6e      	ldr	r3, [pc, #440]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	4a6d      	ldr	r2, [pc, #436]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800781a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800781c:	4b6b      	ldr	r3, [pc, #428]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4a6a      	ldr	r2, [pc, #424]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007826:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007828:	4b68      	ldr	r3, [pc, #416]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a67      	ldr	r2, [pc, #412]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800782e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007832:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007834:	e000      	b.n	8007838 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8007836:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007838:	4b64      	ldr	r3, [pc, #400]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0f8      	beq.n	8007836 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007844:	4b62      	ldr	r3, [pc, #392]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a61      	ldr	r2, [pc, #388]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 800784a:	f023 030f 	bic.w	r3, r3, #15
 800784e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007850:	4b5f      	ldr	r3, [pc, #380]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a5e      	ldr	r2, [pc, #376]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 8007856:	f043 0302 	orr.w	r3, r3, #2
 800785a:	6013      	str	r3, [r2, #0]

			break;
 800785c:	e0a2      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800785e:	4b5b      	ldr	r3, [pc, #364]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	4a5a      	ldr	r2, [pc, #360]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007864:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007868:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800786a:	4b58      	ldr	r3, [pc, #352]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4a57      	ldr	r2, [pc, #348]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007870:	f043 0310 	orr.w	r3, r3, #16
 8007874:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007876:	4b55      	ldr	r3, [pc, #340]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4a54      	ldr	r2, [pc, #336]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800787c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007884:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8007886:	4b51      	ldr	r3, [pc, #324]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4a50      	ldr	r2, [pc, #320]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800788c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8007890:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007892:	4b4e      	ldr	r3, [pc, #312]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4a4d      	ldr	r2, [pc, #308]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007898:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800789c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800789e:	4b4b      	ldr	r3, [pc, #300]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078a0:	4a4a      	ldr	r2, [pc, #296]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80078a6:	4b49      	ldr	r3, [pc, #292]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	4a48      	ldr	r2, [pc, #288]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80078b2:	4b46      	ldr	r3, [pc, #280]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4a45      	ldr	r2, [pc, #276]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078bc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80078be:	4b43      	ldr	r3, [pc, #268]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	4a42      	ldr	r2, [pc, #264]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078c8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80078ca:	4b40      	ldr	r3, [pc, #256]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a3f      	ldr	r2, [pc, #252]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078d4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80078d6:	e000      	b.n	80078da <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80078d8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80078da:	4b3c      	ldr	r3, [pc, #240]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f8      	beq.n	80078d8 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80078e6:	4b3a      	ldr	r3, [pc, #232]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a39      	ldr	r2, [pc, #228]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 80078ec:	f023 030f 	bic.w	r3, r3, #15
 80078f0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80078f2:	4b37      	ldr	r3, [pc, #220]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a36      	ldr	r2, [pc, #216]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	6013      	str	r3, [r2, #0]

			break;
 80078fe:	e051      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007900:	4b32      	ldr	r3, [pc, #200]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a31      	ldr	r2, [pc, #196]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800790a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800790c:	4b2f      	ldr	r3, [pc, #188]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	4a2e      	ldr	r2, [pc, #184]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007912:	f043 0308 	orr.w	r3, r3, #8
 8007916:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007918:	4b2c      	ldr	r3, [pc, #176]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800791e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007926:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8007928:	4b28      	ldr	r3, [pc, #160]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4a27      	ldr	r2, [pc, #156]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800792e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8007932:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007934:	4b25      	ldr	r3, [pc, #148]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4a24      	ldr	r2, [pc, #144]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800793a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800793e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007940:	4b22      	ldr	r3, [pc, #136]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007942:	4a22      	ldr	r2, [pc, #136]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007948:	4b20      	ldr	r3, [pc, #128]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	4a1f      	ldr	r2, [pc, #124]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800794e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007952:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007954:	4b1d      	ldr	r3, [pc, #116]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800795a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800795e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007960:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	4a19      	ldr	r2, [pc, #100]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800796a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800796c:	4b17      	ldr	r3, [pc, #92]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a16      	ldr	r2, [pc, #88]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 8007972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007976:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007978:	e000      	b.n	800797c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800797a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800797c:	4b13      	ldr	r3, [pc, #76]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f8      	beq.n	800797a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007988:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 800798e:	f023 030f 	bic.w	r3, r3, #15
 8007992:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8007994:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a0d      	ldr	r2, [pc, #52]	; (80079d0 <RCC_enableMaxFrequencies+0x664>)
 800799a:	f043 0303 	orr.w	r3, r3, #3
 800799e:	6013      	str	r3, [r2, #0]

			break;
 80079a0:	e000      	b.n	80079a4 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 80079a2:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4a08      	ldr	r2, [pc, #32]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80079aa:	f043 0302 	orr.w	r3, r3, #2
 80079ae:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80079b0:	e000      	b.n	80079b4 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 80079b2:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <RCC_enableMaxFrequencies+0x660>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0f8      	beq.n	80079b2 <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 80079c0:	f000 fd3e 	bl	8008440 <SystemCoreClockUpdate>

}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40023c00 	.word	0x40023c00

080079d4 <__NVIC_EnableIRQ>:
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	db0b      	blt.n	80079fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	f003 021f 	and.w	r2, r3, #31
 80079ec:	4907      	ldr	r1, [pc, #28]	; (8007a0c <__NVIC_EnableIRQ+0x38>)
 80079ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2001      	movs	r0, #1
 80079f6:	fa00 f202 	lsl.w	r2, r0, r2
 80079fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	e000e100 	.word	0xe000e100

08007a10 <__NVIC_SetPriority>:
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	6039      	str	r1, [r7, #0]
 8007a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db0a      	blt.n	8007a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	490c      	ldr	r1, [pc, #48]	; (8007a5c <__NVIC_SetPriority+0x4c>)
 8007a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2e:	0112      	lsls	r2, r2, #4
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	440b      	add	r3, r1
 8007a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a38:	e00a      	b.n	8007a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	4908      	ldr	r1, [pc, #32]	; (8007a60 <__NVIC_SetPriority+0x50>)
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	3b04      	subs	r3, #4
 8007a48:	0112      	lsls	r2, r2, #4
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	761a      	strb	r2, [r3, #24]
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	e000e100 	.word	0xe000e100
 8007a60:	e000ed00 	.word	0xe000ed00

08007a64 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a6c:	b672      	cpsid	i
}
 8007a6e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a8f      	ldr	r2, [pc, #572]	; (8007cb4 <USART_Config+0x250>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d106      	bne.n	8007a88 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8007a7a:	4b8f      	ldr	r3, [pc, #572]	; (8007cb8 <USART_Config+0x254>)
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	4a8e      	ldr	r2, [pc, #568]	; (8007cb8 <USART_Config+0x254>)
 8007a80:	f043 0310 	orr.w	r3, r3, #16
 8007a84:	6453      	str	r3, [r2, #68]	; 0x44
 8007a86:	e018      	b.n	8007aba <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a8b      	ldr	r2, [pc, #556]	; (8007cbc <USART_Config+0x258>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d106      	bne.n	8007aa0 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8007a92:	4b89      	ldr	r3, [pc, #548]	; (8007cb8 <USART_Config+0x254>)
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	4a88      	ldr	r2, [pc, #544]	; (8007cb8 <USART_Config+0x254>)
 8007a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a9e:	e00c      	b.n	8007aba <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a86      	ldr	r2, [pc, #536]	; (8007cc0 <USART_Config+0x25c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d106      	bne.n	8007ab8 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8007aaa:	4b83      	ldr	r3, [pc, #524]	; (8007cb8 <USART_Config+0x254>)
 8007aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aae:	4a82      	ldr	r2, [pc, #520]	; (8007cb8 <USART_Config+0x254>)
 8007ab0:	f043 0320 	orr.w	r3, r3, #32
 8007ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ab6:	e000      	b.n	8007aba <USART_Config+0x56>
	}
	else{
		__NOP();
 8007ab8:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7a5b      	ldrb	r3, [r3, #9]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d025      	beq.n	8007b1e <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7a5b      	ldrb	r3, [r3, #9]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d110      	bne.n	8007afc <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ae8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	e018      	b.n	8007b2e <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0a:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	e007      	b.n	8007b2e <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2c:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7a1b      	ldrb	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d108      	bne.n	8007b48 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	e007      	b.n	8007b58 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b56:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7a9b      	ldrb	r3, [r3, #10]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d82f      	bhi.n	8007bc0 <USART_Config+0x15c>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USART_Config+0x104>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b8b 	.word	0x08007b8b
 8007b70:	08007b9d 	.word	0x08007b9d
 8007b74:	08007baf 	.word	0x08007baf
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007b86:	611a      	str	r2, [r3, #16]
			break;
 8007b88:	e023      	b.n	8007bd2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b98:	611a      	str	r2, [r3, #16]
			break;
 8007b9a:	e01a      	b.n	8007bd2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007baa:	611a      	str	r2, [r3, #16]
			break;
 8007bac:	e011      	b.n	8007bd2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8007bbc:	611a      	str	r2, [r3, #16]
			break;
 8007bbe:	e008      	b.n	8007bd2 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007bce:	611a      	str	r2, [r3, #16]
			break;
 8007bd0:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681c      	ldr	r4, [r3, #0]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8cb 	bl	8007d78 <brrCalculus>
 8007be2:	4603      	mov	r3, r0
 8007be4:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	799b      	ldrb	r3, [r3, #6]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d82e      	bhi.n	8007c4c <USART_Config+0x1e8>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USART_Config+0x190>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c17 	.word	0x08007c17
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3b 	.word	0x08007c3b
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0208 	orr.w	r2, r2, #8
 8007c12:	60da      	str	r2, [r3, #12]
			break;
 8007c14:	e023      	b.n	8007c5e <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0204 	orr.w	r2, r2, #4
 8007c24:	60da      	str	r2, [r3, #12]
			break;
 8007c26:	e01a      	b.n	8007c5e <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 020c 	orr.w	r2, r2, #12
 8007c36:	60da      	str	r2, [r3, #12]
			break;
 8007c38:	e011      	b.n	8007c5e <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 020c 	bic.w	r2, r2, #12
 8007c48:	60da      	str	r2, [r3, #12]
			break;
 8007c4a:	e008      	b.n	8007c5e <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 020c 	bic.w	r2, r2, #12
 8007c5a:	60da      	str	r2, [r3, #12]
			break;
 8007c5c:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	799b      	ldrb	r3, [r3, #6]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d008      	beq.n	8007c78 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	e007      	b.n	8007c88 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c86:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	795b      	ldrb	r3, [r3, #5]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d12d      	bne.n	8007cec <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0220 	orr.w	r2, r2, #32
 8007c9e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <USART_Config+0x250>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10c      	bne.n	8007cc4 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8007caa:	2025      	movs	r0, #37	; 0x25
 8007cac:	f7ff fe92 	bl	80079d4 <__NVIC_EnableIRQ>
 8007cb0:	e024      	b.n	8007cfc <USART_Config+0x298>
 8007cb2:	bf00      	nop
 8007cb4:	40011000 	.word	0x40011000
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	40004400 	.word	0x40004400
 8007cc0:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <USART_Config+0x308>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d103      	bne.n	8007cd6 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8007cce:	2026      	movs	r0, #38	; 0x26
 8007cd0:	f7ff fe80 	bl	80079d4 <__NVIC_EnableIRQ>
 8007cd4:	e012      	b.n	8007cfc <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a25      	ldr	r2, [pc, #148]	; (8007d70 <USART_Config+0x30c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d103      	bne.n	8007ce8 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8007ce0:	2047      	movs	r0, #71	; 0x47
 8007ce2:	f7ff fe77 	bl	80079d4 <__NVIC_EnableIRQ>
 8007ce6:	e009      	b.n	8007cfc <USART_Config+0x298>
		}
		else{
				__NOP();
 8007ce8:	bf00      	nop
 8007cea:	e007      	b.n	8007cfc <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0220 	bic.w	r2, r2, #32
 8007cfa:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d124      	bne.n	8007d4e <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d12:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <USART_Config+0x310>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d103      	bne.n	8007d26 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8007d1e:	2025      	movs	r0, #37	; 0x25
 8007d20:	f7ff fe58 	bl	80079d4 <__NVIC_EnableIRQ>
 8007d24:	e01b      	b.n	8007d5e <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <USART_Config+0x308>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d103      	bne.n	8007d38 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8007d30:	2026      	movs	r0, #38	; 0x26
 8007d32:	f7ff fe4f 	bl	80079d4 <__NVIC_EnableIRQ>
 8007d36:	e012      	b.n	8007d5e <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a0c      	ldr	r2, [pc, #48]	; (8007d70 <USART_Config+0x30c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d103      	bne.n	8007d4a <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8007d42:	2047      	movs	r0, #71	; 0x47
 8007d44:	f7ff fe46 	bl	80079d4 <__NVIC_EnableIRQ>
 8007d48:	e009      	b.n	8007d5e <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8007d4a:	bf00      	nop
 8007d4c:	e007      	b.n	8007d5e <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d5c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d5e:	b662      	cpsie	i
}
 8007d60:	bf00      	nop
	}

	__enable_irq();
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd90      	pop	{r4, r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	40004400 	.word	0x40004400
 8007d70:	40011400 	.word	0x40011400
 8007d74:	40011000 	.word	0x40011000

08007d78 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8007d78:	b5b0      	push	{r4, r5, r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	79db      	ldrb	r3, [r3, #7]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f200 8217 	bhi.w	80081ba <brrCalculus+0x442>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <brrCalculus+0x1c>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007e9f 	.word	0x08007e9f
 8007d9c:	08007fb9 	.word	0x08007fb9
 8007da0:	080080c1 	.word	0x080080c1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8007da4:	4980      	ldr	r1, [pc, #512]	; (8007fa8 <brrCalculus+0x230>)
 8007da6:	a37c      	add	r3, pc, #496	; (adr r3, 8007f98 <brrCalculus+0x220>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	ee17 0a90 	vmov	r0, s15
 8007dbe:	f7f8 fb73 	bl	80004a8 <__aeabi_f2d>
 8007dc2:	4b79      	ldr	r3, [pc, #484]	; (8007fa8 <brrCalculus+0x230>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fbc6 	bl	8000558 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4975      	ldr	r1, [pc, #468]	; (8007fa8 <brrCalculus+0x230>)
 8007dd2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8007dd6:	4b74      	ldr	r3, [pc, #464]	; (8007fa8 <brrCalculus+0x230>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7f8 fe6a 	bl	8000ab8 <__aeabi_d2iz>
 8007de4:	4603      	mov	r3, r0
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	4b70      	ldr	r3, [pc, #448]	; (8007fac <brrCalculus+0x234>)
 8007dea:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8007dec:	4b6e      	ldr	r3, [pc, #440]	; (8007fa8 <brrCalculus+0x230>)
 8007dee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007df2:	4b6d      	ldr	r3, [pc, #436]	; (8007fa8 <brrCalculus+0x230>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f7f8 fe5c 	bl	8000ab8 <__aeabi_d2iz>
 8007e00:	4603      	mov	r3, r0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7f8 fb3e 	bl	8000484 <__aeabi_i2d>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 f9ea 	bl	80001e8 <__aeabi_dsub>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7f8 fe94 	bl	8000b48 <__aeabi_d2f>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4a63      	ldr	r2, [pc, #396]	; (8007fb0 <brrCalculus+0x238>)
 8007e24:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8007e26:	4b62      	ldr	r3, [pc, #392]	; (8007fb0 <brrCalculus+0x238>)
 8007e28:	edd3 7a00 	vldr	s15, [r3]
 8007e2c:	2004      	movs	r0, #4
 8007e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e32:	f000 fa6d 	bl	8008310 <roundToNDecimals>
 8007e36:	eef0 7a40 	vmov.f32	s15, s0
 8007e3a:	4b5d      	ldr	r3, [pc, #372]	; (8007fb0 <brrCalculus+0x238>)
 8007e3c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8007e40:	4b5b      	ldr	r3, [pc, #364]	; (8007fb0 <brrCalculus+0x238>)
 8007e42:	edd3 7a00 	vldr	s15, [r3]
 8007e46:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e4e:	4b58      	ldr	r3, [pc, #352]	; (8007fb0 <brrCalculus+0x238>)
 8007e50:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8007e54:	4b56      	ldr	r3, [pc, #344]	; (8007fb0 <brrCalculus+0x238>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7f8 fb25 	bl	80004a8 <__aeabi_f2d>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	ec43 2b10 	vmov	d0, r2, r3
 8007e66:	f000 fe4f 	bl	8008b08 <round>
 8007e6a:	ec53 2b10 	vmov	r2, r3, d0
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	f7f8 fe69 	bl	8000b48 <__aeabi_d2f>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4a4d      	ldr	r2, [pc, #308]	; (8007fb0 <brrCalculus+0x238>)
 8007e7a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <brrCalculus+0x234>)
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	4b4a      	ldr	r3, [pc, #296]	; (8007fb0 <brrCalculus+0x238>)
 8007e86:	edd3 7a00 	vldr	s15, [r3]
 8007e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8e:	ee17 3a90 	vmov	r3, s15
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4313      	orrs	r3, r2
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	4b46      	ldr	r3, [pc, #280]	; (8007fb4 <brrCalculus+0x23c>)
 8007e9a:	801a      	strh	r2, [r3, #0]


		break;
 8007e9c:	e18f      	b.n	80081be <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8007e9e:	4942      	ldr	r1, [pc, #264]	; (8007fa8 <brrCalculus+0x230>)
 8007ea0:	a33f      	add	r3, pc, #252	; (adr r3, 8007fa0 <brrCalculus+0x228>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb4:	ee17 0a90 	vmov	r0, s15
 8007eb8:	f7f8 faf6 	bl	80004a8 <__aeabi_f2d>
 8007ebc:	4b3a      	ldr	r3, [pc, #232]	; (8007fa8 <brrCalculus+0x230>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 fb49 	bl	8000558 <__aeabi_dmul>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4937      	ldr	r1, [pc, #220]	; (8007fa8 <brrCalculus+0x230>)
 8007ecc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8007ed0:	4b35      	ldr	r3, [pc, #212]	; (8007fa8 <brrCalculus+0x230>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f7f8 fded 	bl	8000ab8 <__aeabi_d2iz>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	4b32      	ldr	r3, [pc, #200]	; (8007fac <brrCalculus+0x234>)
 8007ee4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8007ee6:	4b30      	ldr	r3, [pc, #192]	; (8007fa8 <brrCalculus+0x230>)
 8007ee8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007eec:	4b2e      	ldr	r3, [pc, #184]	; (8007fa8 <brrCalculus+0x230>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f7f8 fddf 	bl	8000ab8 <__aeabi_d2iz>
 8007efa:	4603      	mov	r3, r0
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 fac1 	bl	8000484 <__aeabi_i2d>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7f8 f96d 	bl	80001e8 <__aeabi_dsub>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7f8 fe17 	bl	8000b48 <__aeabi_d2f>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4a24      	ldr	r2, [pc, #144]	; (8007fb0 <brrCalculus+0x238>)
 8007f1e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8007f20:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <brrCalculus+0x238>)
 8007f22:	edd3 7a00 	vldr	s15, [r3]
 8007f26:	2004      	movs	r0, #4
 8007f28:	eeb0 0a67 	vmov.f32	s0, s15
 8007f2c:	f000 f9f0 	bl	8008310 <roundToNDecimals>
 8007f30:	eef0 7a40 	vmov.f32	s15, s0
 8007f34:	4b1e      	ldr	r3, [pc, #120]	; (8007fb0 <brrCalculus+0x238>)
 8007f36:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8007f3a:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <brrCalculus+0x238>)
 8007f3c:	edd3 7a00 	vldr	s15, [r3]
 8007f40:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <brrCalculus+0x238>)
 8007f4a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8007f4e:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <brrCalculus+0x238>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7f8 faa8 	bl	80004a8 <__aeabi_f2d>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	ec43 2b10 	vmov	d0, r2, r3
 8007f60:	f000 fdd2 	bl	8008b08 <round>
 8007f64:	ec53 2b10 	vmov	r2, r3, d0
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	f7f8 fdec 	bl	8000b48 <__aeabi_d2f>
 8007f70:	4603      	mov	r3, r0
 8007f72:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <brrCalculus+0x238>)
 8007f74:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <brrCalculus+0x234>)
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <brrCalculus+0x238>)
 8007f80:	edd3 7a00 	vldr	s15, [r3]
 8007f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f88:	ee17 3a90 	vmov	r3, s15
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	4b08      	ldr	r3, [pc, #32]	; (8007fb4 <brrCalculus+0x23c>)
 8007f94:	801a      	strh	r2, [r3, #0]


		break;
 8007f96:	e112      	b.n	80081be <brrCalculus+0x446>
 8007f98:	b4e81b4f 	.word	0xb4e81b4f
 8007f9c:	3edb4e81 	.word	0x3edb4e81
 8007fa0:	b4e81b4f 	.word	0xb4e81b4f
 8007fa4:	3ecb4e81 	.word	0x3ecb4e81
 8007fa8:	20013100 	.word	0x20013100
 8007fac:	200130f4 	.word	0x200130f4
 8007fb0:	200130f8 	.word	0x200130f8
 8007fb4:	200130f2 	.word	0x200130f2
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8007fb8:	4989      	ldr	r1, [pc, #548]	; (80081e0 <brrCalculus+0x468>)
 8007fba:	a385      	add	r3, pc, #532	; (adr r3, 80081d0 <brrCalculus+0x458>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fce:	ee17 0a90 	vmov	r0, s15
 8007fd2:	f7f8 fa69 	bl	80004a8 <__aeabi_f2d>
 8007fd6:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <brrCalculus+0x468>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fabc 	bl	8000558 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	497e      	ldr	r1, [pc, #504]	; (80081e0 <brrCalculus+0x468>)
 8007fe6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8007fea:	4b7d      	ldr	r3, [pc, #500]	; (80081e0 <brrCalculus+0x468>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 fd60 	bl	8000ab8 <__aeabi_d2iz>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <brrCalculus+0x46c>)
 8007ffe:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008000:	4b77      	ldr	r3, [pc, #476]	; (80081e0 <brrCalculus+0x468>)
 8008002:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008006:	4b76      	ldr	r3, [pc, #472]	; (80081e0 <brrCalculus+0x468>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	4610      	mov	r0, r2
 800800e:	4619      	mov	r1, r3
 8008010:	f7f8 fd52 	bl	8000ab8 <__aeabi_d2iz>
 8008014:	4603      	mov	r3, r0
 8008016:	4618      	mov	r0, r3
 8008018:	f7f8 fa34 	bl	8000484 <__aeabi_i2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	f7f8 f8e0 	bl	80001e8 <__aeabi_dsub>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4610      	mov	r0, r2
 800802e:	4619      	mov	r1, r3
 8008030:	f7f8 fd8a 	bl	8000b48 <__aeabi_d2f>
 8008034:	4603      	mov	r3, r0
 8008036:	4a6c      	ldr	r2, [pc, #432]	; (80081e8 <brrCalculus+0x470>)
 8008038:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800803a:	4b6b      	ldr	r3, [pc, #428]	; (80081e8 <brrCalculus+0x470>)
 800803c:	edd3 7a00 	vldr	s15, [r3]
 8008040:	2004      	movs	r0, #4
 8008042:	eeb0 0a67 	vmov.f32	s0, s15
 8008046:	f000 f963 	bl	8008310 <roundToNDecimals>
 800804a:	eef0 7a40 	vmov.f32	s15, s0
 800804e:	4b66      	ldr	r3, [pc, #408]	; (80081e8 <brrCalculus+0x470>)
 8008050:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008054:	4b64      	ldr	r3, [pc, #400]	; (80081e8 <brrCalculus+0x470>)
 8008056:	edd3 7a00 	vldr	s15, [r3]
 800805a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800805e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008062:	4b61      	ldr	r3, [pc, #388]	; (80081e8 <brrCalculus+0x470>)
 8008064:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8008068:	4b5f      	ldr	r3, [pc, #380]	; (80081e8 <brrCalculus+0x470>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7f8 fa1b 	bl	80004a8 <__aeabi_f2d>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	ec43 2b10 	vmov	d0, r2, r3
 800807a:	f000 fd45 	bl	8008b08 <round>
 800807e:	ec51 0b10 	vmov	r0, r1, d0
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4b59      	ldr	r3, [pc, #356]	; (80081ec <brrCalculus+0x474>)
 8008088:	f7f8 f8b0 	bl	80001ec <__adddf3>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	f7f8 fd58 	bl	8000b48 <__aeabi_d2f>
 8008098:	4603      	mov	r3, r0
 800809a:	4a53      	ldr	r2, [pc, #332]	; (80081e8 <brrCalculus+0x470>)
 800809c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800809e:	4b51      	ldr	r3, [pc, #324]	; (80081e4 <brrCalculus+0x46c>)
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	4b50      	ldr	r3, [pc, #320]	; (80081e8 <brrCalculus+0x470>)
 80080a8:	edd3 7a00 	vldr	s15, [r3]
 80080ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b0:	ee17 3a90 	vmov	r3, s15
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <brrCalculus+0x478>)
 80080bc:	801a      	strh	r2, [r3, #0]


		break;
 80080be:	e07e      	b.n	80081be <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80080c0:	4947      	ldr	r1, [pc, #284]	; (80081e0 <brrCalculus+0x468>)
 80080c2:	a345      	add	r3, pc, #276	; (adr r3, 80081d8 <brrCalculus+0x460>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	ee17 0a90 	vmov	r0, s15
 80080da:	f7f8 f9e5 	bl	80004a8 <__aeabi_f2d>
 80080de:	4b40      	ldr	r3, [pc, #256]	; (80081e0 <brrCalculus+0x468>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 fa38 	bl	8000558 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	493c      	ldr	r1, [pc, #240]	; (80081e0 <brrCalculus+0x468>)
 80080ee:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80080f2:	4b3b      	ldr	r3, [pc, #236]	; (80081e0 <brrCalculus+0x468>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	4610      	mov	r0, r2
 80080fa:	4619      	mov	r1, r3
 80080fc:	f7f8 fcdc 	bl	8000ab8 <__aeabi_d2iz>
 8008100:	4603      	mov	r3, r0
 8008102:	b29a      	uxth	r2, r3
 8008104:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <brrCalculus+0x46c>)
 8008106:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008108:	4b35      	ldr	r3, [pc, #212]	; (80081e0 <brrCalculus+0x468>)
 800810a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800810e:	4b34      	ldr	r3, [pc, #208]	; (80081e0 <brrCalculus+0x468>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	4610      	mov	r0, r2
 8008116:	4619      	mov	r1, r3
 8008118:	f7f8 fcce 	bl	8000ab8 <__aeabi_d2iz>
 800811c:	4603      	mov	r3, r0
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f9b0 	bl	8000484 <__aeabi_i2d>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 f85c 	bl	80001e8 <__aeabi_dsub>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	f7f8 fd06 	bl	8000b48 <__aeabi_d2f>
 800813c:	4603      	mov	r3, r0
 800813e:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <brrCalculus+0x470>)
 8008140:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <brrCalculus+0x470>)
 8008144:	edd3 7a00 	vldr	s15, [r3]
 8008148:	2004      	movs	r0, #4
 800814a:	eeb0 0a67 	vmov.f32	s0, s15
 800814e:	f000 f8df 	bl	8008310 <roundToNDecimals>
 8008152:	eef0 7a40 	vmov.f32	s15, s0
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <brrCalculus+0x470>)
 8008158:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800815c:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <brrCalculus+0x470>)
 800815e:	edd3 7a00 	vldr	s15, [r3]
 8008162:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <brrCalculus+0x470>)
 800816c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8008170:	4b1d      	ldr	r3, [pc, #116]	; (80081e8 <brrCalculus+0x470>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7f8 f997 	bl	80004a8 <__aeabi_f2d>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	ec43 2b10 	vmov	d0, r2, r3
 8008182:	f000 fcc1 	bl	8008b08 <round>
 8008186:	ec53 2b10 	vmov	r2, r3, d0
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	f7f8 fcdb 	bl	8000b48 <__aeabi_d2f>
 8008192:	4603      	mov	r3, r0
 8008194:	4a14      	ldr	r2, [pc, #80]	; (80081e8 <brrCalculus+0x470>)
 8008196:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8008198:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <brrCalculus+0x46c>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	b29a      	uxth	r2, r3
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <brrCalculus+0x470>)
 80081a2:	edd3 7a00 	vldr	s15, [r3]
 80081a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081aa:	ee17 3a90 	vmov	r3, s15
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	4b0e      	ldr	r3, [pc, #56]	; (80081f0 <brrCalculus+0x478>)
 80081b6:	801a      	strh	r2, [r3, #0]


		break;
 80081b8:	e001      	b.n	80081be <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80081ba:	bf00      	nop
		break;
 80081bc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <brrCalculus+0x478>)
 80081c0:	881b      	ldrh	r3, [r3, #0]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ca:	bf00      	nop
 80081cc:	f3af 8000 	nop.w
 80081d0:	789abcdf 	.word	0x789abcdf
 80081d4:	3ec23456 	.word	0x3ec23456
 80081d8:	789abcdf 	.word	0x789abcdf
 80081dc:	3ea23456 	.word	0x3ea23456
 80081e0:	20013100 	.word	0x20013100
 80081e4:	200130f4 	.word	0x200130f4
 80081e8:	200130f8 	.word	0x200130f8
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	200130f2 	.word	0x200130f2

080081f4 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80081fe:	e000      	b.n	8008202 <writeChar+0xe>
		__NOP();
 8008200:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0f7      	beq.n	8008200 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	605a      	str	r2, [r3, #4]

}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800822e:	e008      	b.n	8008242 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff ffdc 	bl	80081f4 <writeChar>
		msgToSend ++ ;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f2      	bne.n	8008230 <writeMsg+0xc>
	}
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
	__NOP();
 8008258:	bf00      	nop
}
 800825a:	bf00      	nop
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
	__NOP();
 8008268:	bf00      	nop
}
 800826a:	bf00      	nop
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
	return auxRxData;
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <getRxData+0x14>)
 800827a:	781b      	ldrb	r3, [r3, #0]
}
 800827c:	4618      	mov	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20013108 	.word	0x20013108

0800828c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8008290:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <USART2_IRQHandler+0x24>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <USART2_IRQHandler+0x24>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <USART2_IRQHandler+0x28>)
 80082a4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80082a6:	f7f9 f8fd 	bl	80014a4 <usart2Rx_Callback>
	}

}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40004400 	.word	0x40004400
 80082b4:	20013108 	.word	0x20013108

080082b8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80082bc:	4b07      	ldr	r3, [pc, #28]	; (80082dc <USART1_IRQHandler+0x24>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <USART1_IRQHandler+0x24>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <USART1_IRQHandler+0x28>)
 80082d0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80082d2:	f7ff ffbf 	bl	8008254 <usart1Rx_Callback>
	}
}
 80082d6:	bf00      	nop
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40011000 	.word	0x40011000
 80082e0:	20013108 	.word	0x20013108

080082e4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <USART6_IRQHandler+0x24>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <USART6_IRQHandler+0x24>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	4b04      	ldr	r3, [pc, #16]	; (800830c <USART6_IRQHandler+0x28>)
 80082fc:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80082fe:	f7ff ffb1 	bl	8008264 <usart6Rx_Callback>
	}

}
 8008302:	bf00      	nop
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	40011400 	.word	0x40011400
 800830c:	20013108 	.word	0x20013108

08008310 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	ed87 0a01 	vstr	s0, [r7, #4]
 800831a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800831c:	6838      	ldr	r0, [r7, #0]
 800831e:	f7f8 f8b1 	bl	8000484 <__aeabi_i2d>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	ec43 2b11 	vmov	d1, r2, r3
 800832a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80083a8 <roundToNDecimals+0x98>
 800832e:	f000 fc8d 	bl	8008c4c <pow>
 8008332:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7f8 f8b6 	bl	80004a8 <__aeabi_f2d>
 800833c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008340:	f7f8 f90a 	bl	8000558 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	f7f8 fbfc 	bl	8000b48 <__aeabi_d2f>
 8008350:	4603      	mov	r3, r0
 8008352:	607b      	str	r3, [r7, #4]

    number = round(number);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7f8 f8a7 	bl	80004a8 <__aeabi_f2d>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	ec43 2b10 	vmov	d0, r2, r3
 8008362:	f000 fbd1 	bl	8008b08 <round>
 8008366:	ec53 2b10 	vmov	r2, r3, d0
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f7f8 fbeb 	bl	8000b48 <__aeabi_d2f>
 8008372:	4603      	mov	r3, r0
 8008374:	607b      	str	r3, [r7, #4]

    number /= factor;
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f8 f896 	bl	80004a8 <__aeabi_f2d>
 800837c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008380:	f7f8 fa14 	bl	80007ac <__aeabi_ddiv>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4610      	mov	r0, r2
 800838a:	4619      	mov	r1, r3
 800838c:	f7f8 fbdc 	bl	8000b48 <__aeabi_d2f>
 8008390:	4603      	mov	r3, r0
 8008392:	607b      	str	r3, [r7, #4]

    return number;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	ee07 3a90 	vmov	s15, r3
}
 800839a:	eeb0 0a67 	vmov.f32	s0, s15
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	f3af 8000 	nop.w
 80083a8:	00000000 	.word	0x00000000
 80083ac:	40240000 	.word	0x40240000

080083b0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80083bc:	b672      	cpsid	i
}
 80083be:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a12      	ldr	r2, [pc, #72]	; (8008410 <usart_Set_Priority+0x60>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d105      	bne.n	80083d6 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	4619      	mov	r1, r3
 80083ce:	2025      	movs	r0, #37	; 0x25
 80083d0:	f7ff fb1e 	bl	8007a10 <__NVIC_SetPriority>
 80083d4:	e016      	b.n	8008404 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a0e      	ldr	r2, [pc, #56]	; (8008414 <usart_Set_Priority+0x64>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d105      	bne.n	80083ec <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	4619      	mov	r1, r3
 80083e4:	2026      	movs	r0, #38	; 0x26
 80083e6:	f7ff fb13 	bl	8007a10 <__NVIC_SetPriority>
 80083ea:	e00b      	b.n	8008404 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a09      	ldr	r2, [pc, #36]	; (8008418 <usart_Set_Priority+0x68>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d105      	bne.n	8008402 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	4619      	mov	r1, r3
 80083fa:	2047      	movs	r0, #71	; 0x47
 80083fc:	f7ff fb08 	bl	8007a10 <__NVIC_SetPriority>
 8008400:	e000      	b.n	8008404 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 8008402:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8008404:	b662      	cpsie	i
}
 8008406:	bf00      	nop



	__enable_irq();

}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40011000 	.word	0x40011000
 8008414:	40004400 	.word	0x40004400
 8008418:	40011400 	.word	0x40011400

0800841c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <SystemInit+0x20>)
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008426:	4a05      	ldr	r2, [pc, #20]	; (800843c <SystemInit+0x20>)
 8008428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800842c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	e000ed00 	.word	0xe000ed00

08008440 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	2302      	movs	r3, #2
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	2302      	movs	r3, #2
 8008458:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800845a:	4b34      	ldr	r3, [pc, #208]	; (800852c <SystemCoreClockUpdate+0xec>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 030c 	and.w	r3, r3, #12
 8008462:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b08      	cmp	r3, #8
 8008468:	d011      	beq.n	800848e <SystemCoreClockUpdate+0x4e>
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d844      	bhi.n	80084fa <SystemCoreClockUpdate+0xba>
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <SystemCoreClockUpdate+0x3e>
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d004      	beq.n	8008486 <SystemCoreClockUpdate+0x46>
 800847c:	e03d      	b.n	80084fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800847e:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 8008480:	4a2c      	ldr	r2, [pc, #176]	; (8008534 <SystemCoreClockUpdate+0xf4>)
 8008482:	601a      	str	r2, [r3, #0]
      break;
 8008484:	e03d      	b.n	8008502 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8008486:	4b2a      	ldr	r3, [pc, #168]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 8008488:	4a2b      	ldr	r2, [pc, #172]	; (8008538 <SystemCoreClockUpdate+0xf8>)
 800848a:	601a      	str	r2, [r3, #0]
      break;
 800848c:	e039      	b.n	8008502 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800848e:	4b27      	ldr	r3, [pc, #156]	; (800852c <SystemCoreClockUpdate+0xec>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	0d9b      	lsrs	r3, r3, #22
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800849a:	4b24      	ldr	r3, [pc, #144]	; (800852c <SystemCoreClockUpdate+0xec>)
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00c      	beq.n	80084c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80084aa:	4a23      	ldr	r2, [pc, #140]	; (8008538 <SystemCoreClockUpdate+0xf8>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <SystemCoreClockUpdate+0xec>)
 80084b4:	6852      	ldr	r2, [r2, #4]
 80084b6:	0992      	lsrs	r2, r2, #6
 80084b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e00b      	b.n	80084dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <SystemCoreClockUpdate+0xf4>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084cc:	4a17      	ldr	r2, [pc, #92]	; (800852c <SystemCoreClockUpdate+0xec>)
 80084ce:	6852      	ldr	r2, [r2, #4]
 80084d0:	0992      	lsrs	r2, r2, #6
 80084d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <SystemCoreClockUpdate+0xec>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	0c1b      	lsrs	r3, r3, #16
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	3301      	adds	r3, #1
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f4:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 80084f6:	6013      	str	r3, [r2, #0]
      break;
 80084f8:	e003      	b.n	8008502 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 80084fc:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <SystemCoreClockUpdate+0xf4>)
 80084fe:	601a      	str	r2, [r3, #0]
      break;
 8008500:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <SystemCoreClockUpdate+0xec>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	4a0b      	ldr	r2, [pc, #44]	; (800853c <SystemCoreClockUpdate+0xfc>)
 800850e:	5cd3      	ldrb	r3, [r2, r3]
 8008510:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	4a04      	ldr	r2, [pc, #16]	; (8008530 <SystemCoreClockUpdate+0xf0>)
 800851e:	6013      	str	r3, [r2, #0]
}
 8008520:	bf00      	nop
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	40023800 	.word	0x40023800
 8008530:	20000020 	.word	0x20000020
 8008534:	00f42400 	.word	0x00f42400
 8008538:	017d7840 	.word	0x017d7840
 800853c:	0800b00c 	.word	0x0800b00c

08008540 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a89      	ldr	r2, [pc, #548]	; (8008774 <i2c_config+0x234>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d112      	bne.n	8008578 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8008552:	4b89      	ldr	r3, [pc, #548]	; (8008778 <i2c_config+0x238>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	4a88      	ldr	r2, [pc, #544]	; (8008778 <i2c_config+0x238>)
 8008558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800855c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC ->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 800855e:	4b86      	ldr	r3, [pc, #536]	; (8008778 <i2c_config+0x238>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	4a85      	ldr	r2, [pc, #532]	; (8008778 <i2c_config+0x238>)
 8008564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008568:	6213      	str	r3, [r2, #32]
		RCC ->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 800856a:	4b83      	ldr	r3, [pc, #524]	; (8008778 <i2c_config+0x238>)
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	4a82      	ldr	r2, [pc, #520]	; (8008778 <i2c_config+0x238>)
 8008570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008574:	6213      	str	r3, [r2, #32]
 8008576:	e016      	b.n	80085a6 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a7f      	ldr	r2, [pc, #508]	; (800877c <i2c_config+0x23c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d106      	bne.n	8008590 <i2c_config+0x50>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8008582:	4b7d      	ldr	r3, [pc, #500]	; (8008778 <i2c_config+0x238>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	4a7c      	ldr	r2, [pc, #496]	; (8008778 <i2c_config+0x238>)
 8008588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800858c:	6413      	str	r3, [r2, #64]	; 0x40
 800858e:	e00a      	b.n	80085a6 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a7a      	ldr	r2, [pc, #488]	; (8008780 <i2c_config+0x240>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d105      	bne.n	80085a6 <i2c_config+0x66>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800859a:	4b77      	ldr	r3, [pc, #476]	; (8008778 <i2c_config+0x238>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	4a76      	ldr	r2, [pc, #472]	; (8008778 <i2c_config+0x238>)
 80085a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085a4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80085b6:	e000      	b.n	80085ba <i2c_config+0x7a>
		__NOP();
 80085b8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f7      	bne.n	80085b8 <i2c_config+0x78>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d6:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e003      	b.n	80085e6 <i2c_config+0xa6>
		__NOP();
 80085de:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a66      	ldr	r2, [pc, #408]	; (8008784 <i2c_config+0x244>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d3f7      	bcc.n	80085de <i2c_config+0x9e>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085fc:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800860c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	79db      	ldrb	r3, [r3, #7]
 8008612:	2b10      	cmp	r3, #16
 8008614:	d108      	bne.n	8008628 <i2c_config+0xe8>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f042 0210 	orr.w	r2, r2, #16
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	e00b      	b.n	8008640 <i2c_config+0x100>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	79db      	ldrb	r3, [r3, #7]
 800862c:	2b32      	cmp	r3, #50	; 0x32
 800862e:	d107      	bne.n	8008640 <i2c_config+0x100>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800863e:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0201 	bic.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2200      	movs	r2, #0
 8008656:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	795b      	ldrb	r3, [r3, #5]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d15c      	bne.n	8008722 <i2c_config+0x1e2>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008676:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	79db      	ldrb	r3, [r3, #7]
 800867c:	2b32      	cmp	r3, #50	; 0x32
 800867e:	d03f      	beq.n	8008700 <i2c_config+0x1c0>
 8008680:	2b32      	cmp	r3, #50	; 0x32
 8008682:	f300 80b4 	bgt.w	80087ee <i2c_config+0x2ae>
 8008686:	2b14      	cmp	r3, #20
 8008688:	d029      	beq.n	80086de <i2c_config+0x19e>
 800868a:	2b14      	cmp	r3, #20
 800868c:	f300 80af 	bgt.w	80087ee <i2c_config+0x2ae>
 8008690:	2b04      	cmp	r3, #4
 8008692:	d002      	beq.n	800869a <i2c_config+0x15a>
 8008694:	2b10      	cmp	r3, #16
 8008696:	d011      	beq.n	80086bc <i2c_config+0x17c>


				break;
			}default:{

				break;
 8008698:	e0a9      	b.n	80087ee <i2c_config+0x2ae>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0214 	orr.w	r2, r2, #20
 80086a8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6a1a      	ldr	r2, [r3, #32]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0205 	orr.w	r2, r2, #5
 80086b8:	621a      	str	r2, [r3, #32]
				break;
 80086ba:	e09b      	b.n	80087f4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80086ca:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0211 	orr.w	r2, r2, #17
 80086da:	621a      	str	r2, [r3, #32]
				break;
 80086dc:	e08a      	b.n	80087f4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 80086ec:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0215 	orr.w	r2, r2, #21
 80086fc:	621a      	str	r2, [r3, #32]
				break;
 80086fe:	e079      	b.n	80087f4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	69da      	ldr	r2, [r3, #28]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800870e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800871e:	621a      	str	r2, [r3, #32]
				break;
 8008720:	e068      	b.n	80087f4 <i2c_config+0x2b4>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008730:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	79db      	ldrb	r3, [r3, #7]
 8008736:	2b32      	cmp	r3, #50	; 0x32
 8008738:	d048      	beq.n	80087cc <i2c_config+0x28c>
 800873a:	2b32      	cmp	r3, #50	; 0x32
 800873c:	dc59      	bgt.n	80087f2 <i2c_config+0x2b2>
 800873e:	2b14      	cmp	r3, #20
 8008740:	d033      	beq.n	80087aa <i2c_config+0x26a>
 8008742:	2b14      	cmp	r3, #20
 8008744:	dc55      	bgt.n	80087f2 <i2c_config+0x2b2>
 8008746:	2b04      	cmp	r3, #4
 8008748:	d002      	beq.n	8008750 <i2c_config+0x210>
 800874a:	2b10      	cmp	r3, #16
 800874c:	d01c      	beq.n	8008788 <i2c_config+0x248>


				break;
			}default:{

				break;
 800874e:	e050      	b.n	80087f2 <i2c_config+0x2b2>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0203 	orr.w	r2, r2, #3
 800875e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a1a      	ldr	r2, [r3, #32]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0202 	orr.w	r2, r2, #2
 800876e:	621a      	str	r2, [r3, #32]
				break;
 8008770:	e040      	b.n	80087f4 <i2c_config+0x2b4>
 8008772:	bf00      	nop
 8008774:	40005400 	.word	0x40005400
 8008778:	40023800 	.word	0x40023800
 800877c:	40005800 	.word	0x40005800
 8008780:	40005c00 	.word	0x40005c00
 8008784:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 020d 	orr.w	r2, r2, #13
 8008796:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0206 	orr.w	r2, r2, #6
 80087a6:	621a      	str	r2, [r3, #32]
				break;
 80087a8:	e024      	b.n	80087f4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0211 	orr.w	r2, r2, #17
 80087b8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0207 	orr.w	r2, r2, #7
 80087c8:	621a      	str	r2, [r3, #32]
				break;
 80087ca:	e013      	b.n	80087f4 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69da      	ldr	r2, [r3, #28]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80087da:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6a1a      	ldr	r2, [r3, #32]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0210 	orr.w	r2, r2, #16
 80087ea:	621a      	str	r2, [r3, #32]
				break;
 80087ec:	e002      	b.n	80087f4 <i2c_config+0x2b4>
				break;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <i2c_config+0x2b8>
				break;
 80087f2:	bf00      	nop
			}

		}

	}
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80087f4:	e000      	b.n	80087f8 <i2c_config+0x2b8>
		__NOP();
 80087f6:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f7      	bne.n	80087f6 <i2c_config+0x2b6>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0201 	orr.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800883a:	601a      	str	r2, [r3, #0]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008850:	e000      	b.n	8008854 <i2c_startTransaction+0xc>
		__NOP();
 8008852:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f7      	bne.n	8008852 <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008870:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008872:	e000      	b.n	8008876 <i2c_startTransaction+0x2e>
		__NOP();
 8008874:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0f7      	beq.n	8008874 <i2c_startTransaction+0x2c>
	}
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088a8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80088aa:	e000      	b.n	80088ae <i2c_reStartTransaction+0x1c>
		__NOP();
 80088ac:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0f7      	beq.n	80088ac <i2c_reStartTransaction+0x1a>
	}
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088e0:	601a      	str	r2, [r3, #0]
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
 80088fa:	4613      	mov	r3, r2
 80088fc:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	005a      	lsls	r2, r3, #1
 8008906:	78bb      	ldrb	r3, [r7, #2]
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8008910:	e000      	b.n	8008914 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8008912:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f7      	beq.n	8008912 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	73fb      	strb	r3, [r7, #15]

}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8008952:	e000      	b.n	8008956 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8008954:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0f7      	beq.n	8008954 <i2c_sendMemoryAddress+0x16>
	}
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8008986:	e000      	b.n	800898a <i2c_sendDataByte+0x18>
		__NOP();
 8008988:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f7      	beq.n	8008988 <i2c_sendDataByte+0x16>
	}
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80089ae:	e000      	b.n	80089b2 <i2c_readDataByte+0xc>
		__NOP();
 80089b0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0f7      	beq.n	80089b0 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	799b      	ldrb	r3, [r3, #6]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <__errno>:
 80089dc:	4b01      	ldr	r3, [pc, #4]	; (80089e4 <__errno+0x8>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000024 	.word	0x20000024

080089e8 <__libc_init_array>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4d0d      	ldr	r5, [pc, #52]	; (8008a20 <__libc_init_array+0x38>)
 80089ec:	4c0d      	ldr	r4, [pc, #52]	; (8008a24 <__libc_init_array+0x3c>)
 80089ee:	1b64      	subs	r4, r4, r5
 80089f0:	10a4      	asrs	r4, r4, #2
 80089f2:	2600      	movs	r6, #0
 80089f4:	42a6      	cmp	r6, r4
 80089f6:	d109      	bne.n	8008a0c <__libc_init_array+0x24>
 80089f8:	4d0b      	ldr	r5, [pc, #44]	; (8008a28 <__libc_init_array+0x40>)
 80089fa:	4c0c      	ldr	r4, [pc, #48]	; (8008a2c <__libc_init_array+0x44>)
 80089fc:	f002 fa16 	bl	800ae2c <_init>
 8008a00:	1b64      	subs	r4, r4, r5
 8008a02:	10a4      	asrs	r4, r4, #2
 8008a04:	2600      	movs	r6, #0
 8008a06:	42a6      	cmp	r6, r4
 8008a08:	d105      	bne.n	8008a16 <__libc_init_array+0x2e>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a10:	4798      	blx	r3
 8008a12:	3601      	adds	r6, #1
 8008a14:	e7ee      	b.n	80089f4 <__libc_init_array+0xc>
 8008a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1a:	4798      	blx	r3
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	e7f2      	b.n	8008a06 <__libc_init_array+0x1e>
 8008a20:	0800b298 	.word	0x0800b298
 8008a24:	0800b298 	.word	0x0800b298
 8008a28:	0800b298 	.word	0x0800b298
 8008a2c:	0800b29c 	.word	0x0800b29c

08008a30 <memcpy>:
 8008a30:	440a      	add	r2, r1
 8008a32:	4291      	cmp	r1, r2
 8008a34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a38:	d100      	bne.n	8008a3c <memcpy+0xc>
 8008a3a:	4770      	bx	lr
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a46:	4291      	cmp	r1, r2
 8008a48:	d1f9      	bne.n	8008a3e <memcpy+0xe>
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <memset>:
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d100      	bne.n	8008a56 <memset+0xa>
 8008a54:	4770      	bx	lr
 8008a56:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5a:	e7f9      	b.n	8008a50 <memset+0x4>
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <cos>:
 8008a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a62:	ec53 2b10 	vmov	r2, r3, d0
 8008a66:	4826      	ldr	r0, [pc, #152]	; (8008b00 <cos+0xa0>)
 8008a68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a6c:	4281      	cmp	r1, r0
 8008a6e:	dc06      	bgt.n	8008a7e <cos+0x1e>
 8008a70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008af8 <cos+0x98>
 8008a74:	b005      	add	sp, #20
 8008a76:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a7a:	f001 ba15 	b.w	8009ea8 <__kernel_cos>
 8008a7e:	4821      	ldr	r0, [pc, #132]	; (8008b04 <cos+0xa4>)
 8008a80:	4281      	cmp	r1, r0
 8008a82:	dd09      	ble.n	8008a98 <cos+0x38>
 8008a84:	ee10 0a10 	vmov	r0, s0
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7f7 fbad 	bl	80001e8 <__aeabi_dsub>
 8008a8e:	ec41 0b10 	vmov	d0, r0, r1
 8008a92:	b005      	add	sp, #20
 8008a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a98:	4668      	mov	r0, sp
 8008a9a:	f000 ff45 	bl	8009928 <__ieee754_rem_pio2>
 8008a9e:	f000 0003 	and.w	r0, r0, #3
 8008aa2:	2801      	cmp	r0, #1
 8008aa4:	d00b      	beq.n	8008abe <cos+0x5e>
 8008aa6:	2802      	cmp	r0, #2
 8008aa8:	d016      	beq.n	8008ad8 <cos+0x78>
 8008aaa:	b9e0      	cbnz	r0, 8008ae6 <cos+0x86>
 8008aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ab0:	ed9d 0b00 	vldr	d0, [sp]
 8008ab4:	f001 f9f8 	bl	8009ea8 <__kernel_cos>
 8008ab8:	ec51 0b10 	vmov	r0, r1, d0
 8008abc:	e7e7      	b.n	8008a8e <cos+0x2e>
 8008abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ac2:	ed9d 0b00 	vldr	d0, [sp]
 8008ac6:	f001 fe07 	bl	800a6d8 <__kernel_sin>
 8008aca:	ec53 2b10 	vmov	r2, r3, d0
 8008ace:	ee10 0a10 	vmov	r0, s0
 8008ad2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ad6:	e7da      	b.n	8008a8e <cos+0x2e>
 8008ad8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008adc:	ed9d 0b00 	vldr	d0, [sp]
 8008ae0:	f001 f9e2 	bl	8009ea8 <__kernel_cos>
 8008ae4:	e7f1      	b.n	8008aca <cos+0x6a>
 8008ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008aea:	ed9d 0b00 	vldr	d0, [sp]
 8008aee:	2001      	movs	r0, #1
 8008af0:	f001 fdf2 	bl	800a6d8 <__kernel_sin>
 8008af4:	e7e0      	b.n	8008ab8 <cos+0x58>
 8008af6:	bf00      	nop
	...
 8008b00:	3fe921fb 	.word	0x3fe921fb
 8008b04:	7fefffff 	.word	0x7fefffff

08008b08 <round>:
 8008b08:	ec51 0b10 	vmov	r0, r1, d0
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008b12:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008b16:	2c13      	cmp	r4, #19
 8008b18:	ee10 2a10 	vmov	r2, s0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	dc19      	bgt.n	8008b54 <round+0x4c>
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	da09      	bge.n	8008b38 <round+0x30>
 8008b24:	3401      	adds	r4, #1
 8008b26:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008b2a:	d103      	bne.n	8008b34 <round+0x2c>
 8008b2c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b34:	2200      	movs	r2, #0
 8008b36:	e028      	b.n	8008b8a <round+0x82>
 8008b38:	4d15      	ldr	r5, [pc, #84]	; (8008b90 <round+0x88>)
 8008b3a:	4125      	asrs	r5, r4
 8008b3c:	ea01 0605 	and.w	r6, r1, r5
 8008b40:	4332      	orrs	r2, r6
 8008b42:	d00e      	beq.n	8008b62 <round+0x5a>
 8008b44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008b48:	fa42 f404 	asr.w	r4, r2, r4
 8008b4c:	4423      	add	r3, r4
 8008b4e:	ea23 0305 	bic.w	r3, r3, r5
 8008b52:	e7ef      	b.n	8008b34 <round+0x2c>
 8008b54:	2c33      	cmp	r4, #51	; 0x33
 8008b56:	dd07      	ble.n	8008b68 <round+0x60>
 8008b58:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008b5c:	d101      	bne.n	8008b62 <round+0x5a>
 8008b5e:	f7f7 fb45 	bl	80001ec <__adddf3>
 8008b62:	ec41 0b10 	vmov	d0, r0, r1
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b70:	40f5      	lsrs	r5, r6
 8008b72:	4228      	tst	r0, r5
 8008b74:	d0f5      	beq.n	8008b62 <round+0x5a>
 8008b76:	2101      	movs	r1, #1
 8008b78:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008b7c:	fa01 f404 	lsl.w	r4, r1, r4
 8008b80:	1912      	adds	r2, r2, r4
 8008b82:	bf28      	it	cs
 8008b84:	185b      	addcs	r3, r3, r1
 8008b86:	ea22 0205 	bic.w	r2, r2, r5
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	e7e8      	b.n	8008b62 <round+0x5a>
 8008b90:	000fffff 	.word	0x000fffff
 8008b94:	00000000 	.word	0x00000000

08008b98 <sin>:
 8008b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b9a:	ec53 2b10 	vmov	r2, r3, d0
 8008b9e:	4828      	ldr	r0, [pc, #160]	; (8008c40 <sin+0xa8>)
 8008ba0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ba4:	4281      	cmp	r1, r0
 8008ba6:	dc07      	bgt.n	8008bb8 <sin+0x20>
 8008ba8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008c38 <sin+0xa0>
 8008bac:	2000      	movs	r0, #0
 8008bae:	b005      	add	sp, #20
 8008bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb4:	f001 bd90 	b.w	800a6d8 <__kernel_sin>
 8008bb8:	4822      	ldr	r0, [pc, #136]	; (8008c44 <sin+0xac>)
 8008bba:	4281      	cmp	r1, r0
 8008bbc:	dd09      	ble.n	8008bd2 <sin+0x3a>
 8008bbe:	ee10 0a10 	vmov	r0, s0
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f7f7 fb10 	bl	80001e8 <__aeabi_dsub>
 8008bc8:	ec41 0b10 	vmov	d0, r0, r1
 8008bcc:	b005      	add	sp, #20
 8008bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bd2:	4668      	mov	r0, sp
 8008bd4:	f000 fea8 	bl	8009928 <__ieee754_rem_pio2>
 8008bd8:	f000 0003 	and.w	r0, r0, #3
 8008bdc:	2801      	cmp	r0, #1
 8008bde:	d00c      	beq.n	8008bfa <sin+0x62>
 8008be0:	2802      	cmp	r0, #2
 8008be2:	d011      	beq.n	8008c08 <sin+0x70>
 8008be4:	b9f0      	cbnz	r0, 8008c24 <sin+0x8c>
 8008be6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bea:	ed9d 0b00 	vldr	d0, [sp]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	f001 fd72 	bl	800a6d8 <__kernel_sin>
 8008bf4:	ec51 0b10 	vmov	r0, r1, d0
 8008bf8:	e7e6      	b.n	8008bc8 <sin+0x30>
 8008bfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bfe:	ed9d 0b00 	vldr	d0, [sp]
 8008c02:	f001 f951 	bl	8009ea8 <__kernel_cos>
 8008c06:	e7f5      	b.n	8008bf4 <sin+0x5c>
 8008c08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c0c:	ed9d 0b00 	vldr	d0, [sp]
 8008c10:	2001      	movs	r0, #1
 8008c12:	f001 fd61 	bl	800a6d8 <__kernel_sin>
 8008c16:	ec53 2b10 	vmov	r2, r3, d0
 8008c1a:	ee10 0a10 	vmov	r0, s0
 8008c1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c22:	e7d1      	b.n	8008bc8 <sin+0x30>
 8008c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c28:	ed9d 0b00 	vldr	d0, [sp]
 8008c2c:	f001 f93c 	bl	8009ea8 <__kernel_cos>
 8008c30:	e7f1      	b.n	8008c16 <sin+0x7e>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
	...
 8008c40:	3fe921fb 	.word	0x3fe921fb
 8008c44:	7fefffff 	.word	0x7fefffff

08008c48 <atan2>:
 8008c48:	f000 b872 	b.w	8008d30 <__ieee754_atan2>

08008c4c <pow>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	ed2d 8b02 	vpush	{d8}
 8008c52:	eeb0 8a40 	vmov.f32	s16, s0
 8008c56:	eef0 8a60 	vmov.f32	s17, s1
 8008c5a:	ec55 4b11 	vmov	r4, r5, d1
 8008c5e:	f000 f933 	bl	8008ec8 <__ieee754_pow>
 8008c62:	4622      	mov	r2, r4
 8008c64:	462b      	mov	r3, r5
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	ec57 6b10 	vmov	r6, r7, d0
 8008c6e:	f7f7 ff0d 	bl	8000a8c <__aeabi_dcmpun>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d13b      	bne.n	8008cee <pow+0xa2>
 8008c76:	ec51 0b18 	vmov	r0, r1, d8
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f7f7 fed3 	bl	8000a28 <__aeabi_dcmpeq>
 8008c82:	b1b8      	cbz	r0, 8008cb4 <pow+0x68>
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	f7f7 fecc 	bl	8000a28 <__aeabi_dcmpeq>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d146      	bne.n	8008d22 <pow+0xd6>
 8008c94:	ec45 4b10 	vmov	d0, r4, r5
 8008c98:	f001 ffb7 	bl	800ac0a <finite>
 8008c9c:	b338      	cbz	r0, 8008cee <pow+0xa2>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 fec9 	bl	8000a3c <__aeabi_dcmplt>
 8008caa:	b300      	cbz	r0, 8008cee <pow+0xa2>
 8008cac:	f7ff fe96 	bl	80089dc <__errno>
 8008cb0:	2322      	movs	r3, #34	; 0x22
 8008cb2:	e01b      	b.n	8008cec <pow+0xa0>
 8008cb4:	ec47 6b10 	vmov	d0, r6, r7
 8008cb8:	f001 ffa7 	bl	800ac0a <finite>
 8008cbc:	b9e0      	cbnz	r0, 8008cf8 <pow+0xac>
 8008cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc2:	eef0 0a68 	vmov.f32	s1, s17
 8008cc6:	f001 ffa0 	bl	800ac0a <finite>
 8008cca:	b1a8      	cbz	r0, 8008cf8 <pow+0xac>
 8008ccc:	ec45 4b10 	vmov	d0, r4, r5
 8008cd0:	f001 ff9b 	bl	800ac0a <finite>
 8008cd4:	b180      	cbz	r0, 8008cf8 <pow+0xac>
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	463b      	mov	r3, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 fed5 	bl	8000a8c <__aeabi_dcmpun>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0e2      	beq.n	8008cac <pow+0x60>
 8008ce6:	f7ff fe79 	bl	80089dc <__errno>
 8008cea:	2321      	movs	r3, #33	; 0x21
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	ecbd 8b02 	vpop	{d8}
 8008cf2:	ec47 6b10 	vmov	d0, r6, r7
 8008cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fe92 	bl	8000a28 <__aeabi_dcmpeq>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0f2      	beq.n	8008cee <pow+0xa2>
 8008d08:	eeb0 0a48 	vmov.f32	s0, s16
 8008d0c:	eef0 0a68 	vmov.f32	s1, s17
 8008d10:	f001 ff7b 	bl	800ac0a <finite>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d0ea      	beq.n	8008cee <pow+0xa2>
 8008d18:	ec45 4b10 	vmov	d0, r4, r5
 8008d1c:	f001 ff75 	bl	800ac0a <finite>
 8008d20:	e7c3      	b.n	8008caa <pow+0x5e>
 8008d22:	4f01      	ldr	r7, [pc, #4]	; (8008d28 <pow+0xdc>)
 8008d24:	2600      	movs	r6, #0
 8008d26:	e7e2      	b.n	8008cee <pow+0xa2>
 8008d28:	3ff00000 	.word	0x3ff00000
 8008d2c:	00000000 	.word	0x00000000

08008d30 <__ieee754_atan2>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	ec57 6b11 	vmov	r6, r7, d1
 8008d38:	4273      	negs	r3, r6
 8008d3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008ec0 <__ieee754_atan2+0x190>
 8008d3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008d42:	4333      	orrs	r3, r6
 8008d44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d48:	4573      	cmp	r3, lr
 8008d4a:	ec51 0b10 	vmov	r0, r1, d0
 8008d4e:	ee11 8a10 	vmov	r8, s2
 8008d52:	d80a      	bhi.n	8008d6a <__ieee754_atan2+0x3a>
 8008d54:	4244      	negs	r4, r0
 8008d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d5a:	4304      	orrs	r4, r0
 8008d5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008d60:	4574      	cmp	r4, lr
 8008d62:	ee10 9a10 	vmov	r9, s0
 8008d66:	468c      	mov	ip, r1
 8008d68:	d907      	bls.n	8008d7a <__ieee754_atan2+0x4a>
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	f7f7 fa3d 	bl	80001ec <__adddf3>
 8008d72:	ec41 0b10 	vmov	d0, r0, r1
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008d7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d82:	4334      	orrs	r4, r6
 8008d84:	d103      	bne.n	8008d8e <__ieee754_atan2+0x5e>
 8008d86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d8a:	f001 bd95 	b.w	800a8b8 <atan>
 8008d8e:	17bc      	asrs	r4, r7, #30
 8008d90:	f004 0402 	and.w	r4, r4, #2
 8008d94:	ea53 0909 	orrs.w	r9, r3, r9
 8008d98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008d9c:	d107      	bne.n	8008dae <__ieee754_atan2+0x7e>
 8008d9e:	2c02      	cmp	r4, #2
 8008da0:	d060      	beq.n	8008e64 <__ieee754_atan2+0x134>
 8008da2:	2c03      	cmp	r4, #3
 8008da4:	d1e5      	bne.n	8008d72 <__ieee754_atan2+0x42>
 8008da6:	a142      	add	r1, pc, #264	; (adr r1, 8008eb0 <__ieee754_atan2+0x180>)
 8008da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dac:	e7e1      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008dae:	ea52 0808 	orrs.w	r8, r2, r8
 8008db2:	d106      	bne.n	8008dc2 <__ieee754_atan2+0x92>
 8008db4:	f1bc 0f00 	cmp.w	ip, #0
 8008db8:	da5f      	bge.n	8008e7a <__ieee754_atan2+0x14a>
 8008dba:	a13f      	add	r1, pc, #252	; (adr r1, 8008eb8 <__ieee754_atan2+0x188>)
 8008dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc0:	e7d7      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008dc2:	4572      	cmp	r2, lr
 8008dc4:	d10f      	bne.n	8008de6 <__ieee754_atan2+0xb6>
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008dcc:	d107      	bne.n	8008dde <__ieee754_atan2+0xae>
 8008dce:	2c02      	cmp	r4, #2
 8008dd0:	d84c      	bhi.n	8008e6c <__ieee754_atan2+0x13c>
 8008dd2:	4b35      	ldr	r3, [pc, #212]	; (8008ea8 <__ieee754_atan2+0x178>)
 8008dd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008dd8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008ddc:	e7c9      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008dde:	2c02      	cmp	r4, #2
 8008de0:	d848      	bhi.n	8008e74 <__ieee754_atan2+0x144>
 8008de2:	4b32      	ldr	r3, [pc, #200]	; (8008eac <__ieee754_atan2+0x17c>)
 8008de4:	e7f6      	b.n	8008dd4 <__ieee754_atan2+0xa4>
 8008de6:	4573      	cmp	r3, lr
 8008de8:	d0e4      	beq.n	8008db4 <__ieee754_atan2+0x84>
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008df0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008df4:	da1e      	bge.n	8008e34 <__ieee754_atan2+0x104>
 8008df6:	2f00      	cmp	r7, #0
 8008df8:	da01      	bge.n	8008dfe <__ieee754_atan2+0xce>
 8008dfa:	323c      	adds	r2, #60	; 0x3c
 8008dfc:	db1e      	blt.n	8008e3c <__ieee754_atan2+0x10c>
 8008dfe:	4632      	mov	r2, r6
 8008e00:	463b      	mov	r3, r7
 8008e02:	f7f7 fcd3 	bl	80007ac <__aeabi_ddiv>
 8008e06:	ec41 0b10 	vmov	d0, r0, r1
 8008e0a:	f001 fef5 	bl	800abf8 <fabs>
 8008e0e:	f001 fd53 	bl	800a8b8 <atan>
 8008e12:	ec51 0b10 	vmov	r0, r1, d0
 8008e16:	2c01      	cmp	r4, #1
 8008e18:	d013      	beq.n	8008e42 <__ieee754_atan2+0x112>
 8008e1a:	2c02      	cmp	r4, #2
 8008e1c:	d015      	beq.n	8008e4a <__ieee754_atan2+0x11a>
 8008e1e:	2c00      	cmp	r4, #0
 8008e20:	d0a7      	beq.n	8008d72 <__ieee754_atan2+0x42>
 8008e22:	a319      	add	r3, pc, #100	; (adr r3, 8008e88 <__ieee754_atan2+0x158>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 f9de 	bl	80001e8 <__aeabi_dsub>
 8008e2c:	a318      	add	r3, pc, #96	; (adr r3, 8008e90 <__ieee754_atan2+0x160>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	e014      	b.n	8008e5e <__ieee754_atan2+0x12e>
 8008e34:	a118      	add	r1, pc, #96	; (adr r1, 8008e98 <__ieee754_atan2+0x168>)
 8008e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e3a:	e7ec      	b.n	8008e16 <__ieee754_atan2+0xe6>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	2100      	movs	r1, #0
 8008e40:	e7e9      	b.n	8008e16 <__ieee754_atan2+0xe6>
 8008e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e46:	4619      	mov	r1, r3
 8008e48:	e793      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e4a:	a30f      	add	r3, pc, #60	; (adr r3, 8008e88 <__ieee754_atan2+0x158>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 f9ca 	bl	80001e8 <__aeabi_dsub>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	a10d      	add	r1, pc, #52	; (adr r1, 8008e90 <__ieee754_atan2+0x160>)
 8008e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5e:	f7f7 f9c3 	bl	80001e8 <__aeabi_dsub>
 8008e62:	e786      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e64:	a10a      	add	r1, pc, #40	; (adr r1, 8008e90 <__ieee754_atan2+0x160>)
 8008e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e6a:	e782      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e6c:	a10c      	add	r1, pc, #48	; (adr r1, 8008ea0 <__ieee754_atan2+0x170>)
 8008e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e72:	e77e      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e74:	2000      	movs	r0, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	e77b      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e7a:	a107      	add	r1, pc, #28	; (adr r1, 8008e98 <__ieee754_atan2+0x168>)
 8008e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e80:	e777      	b.n	8008d72 <__ieee754_atan2+0x42>
 8008e82:	bf00      	nop
 8008e84:	f3af 8000 	nop.w
 8008e88:	33145c07 	.word	0x33145c07
 8008e8c:	3ca1a626 	.word	0x3ca1a626
 8008e90:	54442d18 	.word	0x54442d18
 8008e94:	400921fb 	.word	0x400921fb
 8008e98:	54442d18 	.word	0x54442d18
 8008e9c:	3ff921fb 	.word	0x3ff921fb
 8008ea0:	54442d18 	.word	0x54442d18
 8008ea4:	3fe921fb 	.word	0x3fe921fb
 8008ea8:	0800b020 	.word	0x0800b020
 8008eac:	0800b038 	.word	0x0800b038
 8008eb0:	54442d18 	.word	0x54442d18
 8008eb4:	c00921fb 	.word	0xc00921fb
 8008eb8:	54442d18 	.word	0x54442d18
 8008ebc:	bff921fb 	.word	0xbff921fb
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	00000000 	.word	0x00000000

08008ec8 <__ieee754_pow>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	ed2d 8b06 	vpush	{d8-d10}
 8008ed0:	b089      	sub	sp, #36	; 0x24
 8008ed2:	ed8d 1b00 	vstr	d1, [sp]
 8008ed6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008eda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008ede:	ea58 0102 	orrs.w	r1, r8, r2
 8008ee2:	ec57 6b10 	vmov	r6, r7, d0
 8008ee6:	d115      	bne.n	8008f14 <__ieee754_pow+0x4c>
 8008ee8:	19b3      	adds	r3, r6, r6
 8008eea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008eee:	4152      	adcs	r2, r2
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	4b89      	ldr	r3, [pc, #548]	; (8009118 <__ieee754_pow+0x250>)
 8008ef4:	4193      	sbcs	r3, r2
 8008ef6:	f080 84d2 	bcs.w	800989e <__ieee754_pow+0x9d6>
 8008efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 f973 	bl	80001ec <__adddf3>
 8008f06:	ec41 0b10 	vmov	d0, r0, r1
 8008f0a:	b009      	add	sp, #36	; 0x24
 8008f0c:	ecbd 8b06 	vpop	{d8-d10}
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	4b81      	ldr	r3, [pc, #516]	; (800911c <__ieee754_pow+0x254>)
 8008f16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	ee10 aa10 	vmov	sl, s0
 8008f20:	463d      	mov	r5, r7
 8008f22:	dc06      	bgt.n	8008f32 <__ieee754_pow+0x6a>
 8008f24:	d101      	bne.n	8008f2a <__ieee754_pow+0x62>
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d1e7      	bne.n	8008efa <__ieee754_pow+0x32>
 8008f2a:	4598      	cmp	r8, r3
 8008f2c:	dc01      	bgt.n	8008f32 <__ieee754_pow+0x6a>
 8008f2e:	d10f      	bne.n	8008f50 <__ieee754_pow+0x88>
 8008f30:	b172      	cbz	r2, 8008f50 <__ieee754_pow+0x88>
 8008f32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008f36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008f3a:	ea55 050a 	orrs.w	r5, r5, sl
 8008f3e:	d1dc      	bne.n	8008efa <__ieee754_pow+0x32>
 8008f40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f44:	18db      	adds	r3, r3, r3
 8008f46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008f4a:	4152      	adcs	r2, r2
 8008f4c:	429d      	cmp	r5, r3
 8008f4e:	e7d0      	b.n	8008ef2 <__ieee754_pow+0x2a>
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	da3b      	bge.n	8008fcc <__ieee754_pow+0x104>
 8008f54:	4b72      	ldr	r3, [pc, #456]	; (8009120 <__ieee754_pow+0x258>)
 8008f56:	4598      	cmp	r8, r3
 8008f58:	dc51      	bgt.n	8008ffe <__ieee754_pow+0x136>
 8008f5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f5e:	4598      	cmp	r8, r3
 8008f60:	f340 84ac 	ble.w	80098bc <__ieee754_pow+0x9f4>
 8008f64:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f6c:	2b14      	cmp	r3, #20
 8008f6e:	dd0f      	ble.n	8008f90 <__ieee754_pow+0xc8>
 8008f70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f74:	fa22 f103 	lsr.w	r1, r2, r3
 8008f78:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	f040 849d 	bne.w	80098bc <__ieee754_pow+0x9f4>
 8008f82:	f001 0101 	and.w	r1, r1, #1
 8008f86:	f1c1 0302 	rsb	r3, r1, #2
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	b182      	cbz	r2, 8008fb0 <__ieee754_pow+0xe8>
 8008f8e:	e05f      	b.n	8009050 <__ieee754_pow+0x188>
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d15b      	bne.n	800904c <__ieee754_pow+0x184>
 8008f94:	f1c3 0314 	rsb	r3, r3, #20
 8008f98:	fa48 f103 	asr.w	r1, r8, r3
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	4543      	cmp	r3, r8
 8008fa2:	f040 8488 	bne.w	80098b6 <__ieee754_pow+0x9ee>
 8008fa6:	f001 0101 	and.w	r1, r1, #1
 8008faa:	f1c1 0302 	rsb	r3, r1, #2
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	4b5c      	ldr	r3, [pc, #368]	; (8009124 <__ieee754_pow+0x25c>)
 8008fb2:	4598      	cmp	r8, r3
 8008fb4:	d132      	bne.n	800901c <__ieee754_pow+0x154>
 8008fb6:	f1b9 0f00 	cmp.w	r9, #0
 8008fba:	f280 8478 	bge.w	80098ae <__ieee754_pow+0x9e6>
 8008fbe:	4959      	ldr	r1, [pc, #356]	; (8009124 <__ieee754_pow+0x25c>)
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7f7 fbf1 	bl	80007ac <__aeabi_ddiv>
 8008fca:	e79c      	b.n	8008f06 <__ieee754_pow+0x3e>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	d13d      	bne.n	8009050 <__ieee754_pow+0x188>
 8008fd4:	4b51      	ldr	r3, [pc, #324]	; (800911c <__ieee754_pow+0x254>)
 8008fd6:	4598      	cmp	r8, r3
 8008fd8:	d1ea      	bne.n	8008fb0 <__ieee754_pow+0xe8>
 8008fda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008fde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008fe2:	ea53 030a 	orrs.w	r3, r3, sl
 8008fe6:	f000 845a 	beq.w	800989e <__ieee754_pow+0x9d6>
 8008fea:	4b4f      	ldr	r3, [pc, #316]	; (8009128 <__ieee754_pow+0x260>)
 8008fec:	429c      	cmp	r4, r3
 8008fee:	dd08      	ble.n	8009002 <__ieee754_pow+0x13a>
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	f2c0 8457 	blt.w	80098a6 <__ieee754_pow+0x9de>
 8008ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ffc:	e783      	b.n	8008f06 <__ieee754_pow+0x3e>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e7e5      	b.n	8008fce <__ieee754_pow+0x106>
 8009002:	f1b9 0f00 	cmp.w	r9, #0
 8009006:	f04f 0000 	mov.w	r0, #0
 800900a:	f04f 0100 	mov.w	r1, #0
 800900e:	f6bf af7a 	bge.w	8008f06 <__ieee754_pow+0x3e>
 8009012:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009016:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800901a:	e774      	b.n	8008f06 <__ieee754_pow+0x3e>
 800901c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009020:	d106      	bne.n	8009030 <__ieee754_pow+0x168>
 8009022:	4632      	mov	r2, r6
 8009024:	463b      	mov	r3, r7
 8009026:	4630      	mov	r0, r6
 8009028:	4639      	mov	r1, r7
 800902a:	f7f7 fa95 	bl	8000558 <__aeabi_dmul>
 800902e:	e76a      	b.n	8008f06 <__ieee754_pow+0x3e>
 8009030:	4b3e      	ldr	r3, [pc, #248]	; (800912c <__ieee754_pow+0x264>)
 8009032:	4599      	cmp	r9, r3
 8009034:	d10c      	bne.n	8009050 <__ieee754_pow+0x188>
 8009036:	2d00      	cmp	r5, #0
 8009038:	db0a      	blt.n	8009050 <__ieee754_pow+0x188>
 800903a:	ec47 6b10 	vmov	d0, r6, r7
 800903e:	b009      	add	sp, #36	; 0x24
 8009040:	ecbd 8b06 	vpop	{d8-d10}
 8009044:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	f000 be7a 	b.w	8009d40 <__ieee754_sqrt>
 800904c:	2300      	movs	r3, #0
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	ec47 6b10 	vmov	d0, r6, r7
 8009054:	f001 fdd0 	bl	800abf8 <fabs>
 8009058:	ec51 0b10 	vmov	r0, r1, d0
 800905c:	f1ba 0f00 	cmp.w	sl, #0
 8009060:	d129      	bne.n	80090b6 <__ieee754_pow+0x1ee>
 8009062:	b124      	cbz	r4, 800906e <__ieee754_pow+0x1a6>
 8009064:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <__ieee754_pow+0x25c>)
 8009066:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800906a:	429a      	cmp	r2, r3
 800906c:	d123      	bne.n	80090b6 <__ieee754_pow+0x1ee>
 800906e:	f1b9 0f00 	cmp.w	r9, #0
 8009072:	da05      	bge.n	8009080 <__ieee754_pow+0x1b8>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	2000      	movs	r0, #0
 800907a:	492a      	ldr	r1, [pc, #168]	; (8009124 <__ieee754_pow+0x25c>)
 800907c:	f7f7 fb96 	bl	80007ac <__aeabi_ddiv>
 8009080:	2d00      	cmp	r5, #0
 8009082:	f6bf af40 	bge.w	8008f06 <__ieee754_pow+0x3e>
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800908c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009090:	4323      	orrs	r3, r4
 8009092:	d108      	bne.n	80090a6 <__ieee754_pow+0x1de>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	f7f7 f8a4 	bl	80001e8 <__aeabi_dsub>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	e78f      	b.n	8008fc6 <__ieee754_pow+0xfe>
 80090a6:	9b04      	ldr	r3, [sp, #16]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	f47f af2c 	bne.w	8008f06 <__ieee754_pow+0x3e>
 80090ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090b2:	4619      	mov	r1, r3
 80090b4:	e727      	b.n	8008f06 <__ieee754_pow+0x3e>
 80090b6:	0feb      	lsrs	r3, r5, #31
 80090b8:	3b01      	subs	r3, #1
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	9a06      	ldr	r2, [sp, #24]
 80090be:	9b04      	ldr	r3, [sp, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d102      	bne.n	80090ca <__ieee754_pow+0x202>
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	e7e6      	b.n	8009098 <__ieee754_pow+0x1d0>
 80090ca:	4b19      	ldr	r3, [pc, #100]	; (8009130 <__ieee754_pow+0x268>)
 80090cc:	4598      	cmp	r8, r3
 80090ce:	f340 80fb 	ble.w	80092c8 <__ieee754_pow+0x400>
 80090d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80090d6:	4598      	cmp	r8, r3
 80090d8:	4b13      	ldr	r3, [pc, #76]	; (8009128 <__ieee754_pow+0x260>)
 80090da:	dd0c      	ble.n	80090f6 <__ieee754_pow+0x22e>
 80090dc:	429c      	cmp	r4, r3
 80090de:	dc0f      	bgt.n	8009100 <__ieee754_pow+0x238>
 80090e0:	f1b9 0f00 	cmp.w	r9, #0
 80090e4:	da0f      	bge.n	8009106 <__ieee754_pow+0x23e>
 80090e6:	2000      	movs	r0, #0
 80090e8:	b009      	add	sp, #36	; 0x24
 80090ea:	ecbd 8b06 	vpop	{d8-d10}
 80090ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f2:	f001 bbd6 	b.w	800a8a2 <__math_oflow>
 80090f6:	429c      	cmp	r4, r3
 80090f8:	dbf2      	blt.n	80090e0 <__ieee754_pow+0x218>
 80090fa:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <__ieee754_pow+0x25c>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	dd19      	ble.n	8009134 <__ieee754_pow+0x26c>
 8009100:	f1b9 0f00 	cmp.w	r9, #0
 8009104:	dcef      	bgt.n	80090e6 <__ieee754_pow+0x21e>
 8009106:	2000      	movs	r0, #0
 8009108:	b009      	add	sp, #36	; 0x24
 800910a:	ecbd 8b06 	vpop	{d8-d10}
 800910e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009112:	f001 bbbd 	b.w	800a890 <__math_uflow>
 8009116:	bf00      	nop
 8009118:	fff00000 	.word	0xfff00000
 800911c:	7ff00000 	.word	0x7ff00000
 8009120:	433fffff 	.word	0x433fffff
 8009124:	3ff00000 	.word	0x3ff00000
 8009128:	3fefffff 	.word	0x3fefffff
 800912c:	3fe00000 	.word	0x3fe00000
 8009130:	41e00000 	.word	0x41e00000
 8009134:	4b60      	ldr	r3, [pc, #384]	; (80092b8 <__ieee754_pow+0x3f0>)
 8009136:	2200      	movs	r2, #0
 8009138:	f7f7 f856 	bl	80001e8 <__aeabi_dsub>
 800913c:	a354      	add	r3, pc, #336	; (adr r3, 8009290 <__ieee754_pow+0x3c8>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	4604      	mov	r4, r0
 8009144:	460d      	mov	r5, r1
 8009146:	f7f7 fa07 	bl	8000558 <__aeabi_dmul>
 800914a:	a353      	add	r3, pc, #332	; (adr r3, 8009298 <__ieee754_pow+0x3d0>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 f9fe 	bl	8000558 <__aeabi_dmul>
 800915c:	4b57      	ldr	r3, [pc, #348]	; (80092bc <__ieee754_pow+0x3f4>)
 800915e:	4682      	mov	sl, r0
 8009160:	468b      	mov	fp, r1
 8009162:	2200      	movs	r2, #0
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f7 f9f6 	bl	8000558 <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	a14b      	add	r1, pc, #300	; (adr r1, 80092a0 <__ieee754_pow+0x3d8>)
 8009172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009176:	f7f7 f837 	bl	80001e8 <__aeabi_dsub>
 800917a:	4622      	mov	r2, r4
 800917c:	462b      	mov	r3, r5
 800917e:	f7f7 f9eb 	bl	8000558 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	2000      	movs	r0, #0
 8009188:	494d      	ldr	r1, [pc, #308]	; (80092c0 <__ieee754_pow+0x3f8>)
 800918a:	f7f7 f82d 	bl	80001e8 <__aeabi_dsub>
 800918e:	4622      	mov	r2, r4
 8009190:	4680      	mov	r8, r0
 8009192:	4689      	mov	r9, r1
 8009194:	462b      	mov	r3, r5
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 f9dd 	bl	8000558 <__aeabi_dmul>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	f7f7 f9d7 	bl	8000558 <__aeabi_dmul>
 80091aa:	a33f      	add	r3, pc, #252	; (adr r3, 80092a8 <__ieee754_pow+0x3e0>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 f9d2 	bl	8000558 <__aeabi_dmul>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4650      	mov	r0, sl
 80091ba:	4659      	mov	r1, fp
 80091bc:	f7f7 f814 	bl	80001e8 <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 f80e 	bl	80001ec <__adddf3>
 80091d0:	2000      	movs	r0, #0
 80091d2:	4632      	mov	r2, r6
 80091d4:	463b      	mov	r3, r7
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	f7f7 f805 	bl	80001e8 <__aeabi_dsub>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f6 ffff 	bl	80001e8 <__aeabi_dsub>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	9a06      	ldr	r2, [sp, #24]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	4313      	orrs	r3, r2
 80091f2:	4682      	mov	sl, r0
 80091f4:	468b      	mov	fp, r1
 80091f6:	f040 81e7 	bne.w	80095c8 <__ieee754_pow+0x700>
 80091fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80092b0 <__ieee754_pow+0x3e8>
 80091fe:	eeb0 8a47 	vmov.f32	s16, s14
 8009202:	eef0 8a67 	vmov.f32	s17, s15
 8009206:	e9dd 6700 	ldrd	r6, r7, [sp]
 800920a:	2600      	movs	r6, #0
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009214:	f7f6 ffe8 	bl	80001e8 <__aeabi_dsub>
 8009218:	4622      	mov	r2, r4
 800921a:	462b      	mov	r3, r5
 800921c:	f7f7 f99c 	bl	8000558 <__aeabi_dmul>
 8009220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009224:	4680      	mov	r8, r0
 8009226:	4689      	mov	r9, r1
 8009228:	4650      	mov	r0, sl
 800922a:	4659      	mov	r1, fp
 800922c:	f7f7 f994 	bl	8000558 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f6 ffd8 	bl	80001ec <__adddf3>
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	4680      	mov	r8, r0
 8009242:	4689      	mov	r9, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f7 f986 	bl	8000558 <__aeabi_dmul>
 800924c:	460b      	mov	r3, r1
 800924e:	4604      	mov	r4, r0
 8009250:	460d      	mov	r5, r1
 8009252:	4602      	mov	r2, r0
 8009254:	4649      	mov	r1, r9
 8009256:	4640      	mov	r0, r8
 8009258:	f7f6 ffc8 	bl	80001ec <__adddf3>
 800925c:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <__ieee754_pow+0x3fc>)
 800925e:	4299      	cmp	r1, r3
 8009260:	ec45 4b19 	vmov	d9, r4, r5
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	468b      	mov	fp, r1
 800926a:	f340 82f1 	ble.w	8009850 <__ieee754_pow+0x988>
 800926e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009272:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009276:	4303      	orrs	r3, r0
 8009278:	f000 81e4 	beq.w	8009644 <__ieee754_pow+0x77c>
 800927c:	ec51 0b18 	vmov	r0, r1, d8
 8009280:	2200      	movs	r2, #0
 8009282:	2300      	movs	r3, #0
 8009284:	f7f7 fbda 	bl	8000a3c <__aeabi_dcmplt>
 8009288:	3800      	subs	r0, #0
 800928a:	bf18      	it	ne
 800928c:	2001      	movne	r0, #1
 800928e:	e72b      	b.n	80090e8 <__ieee754_pow+0x220>
 8009290:	60000000 	.word	0x60000000
 8009294:	3ff71547 	.word	0x3ff71547
 8009298:	f85ddf44 	.word	0xf85ddf44
 800929c:	3e54ae0b 	.word	0x3e54ae0b
 80092a0:	55555555 	.word	0x55555555
 80092a4:	3fd55555 	.word	0x3fd55555
 80092a8:	652b82fe 	.word	0x652b82fe
 80092ac:	3ff71547 	.word	0x3ff71547
 80092b0:	00000000 	.word	0x00000000
 80092b4:	bff00000 	.word	0xbff00000
 80092b8:	3ff00000 	.word	0x3ff00000
 80092bc:	3fd00000 	.word	0x3fd00000
 80092c0:	3fe00000 	.word	0x3fe00000
 80092c4:	408fffff 	.word	0x408fffff
 80092c8:	4bd5      	ldr	r3, [pc, #852]	; (8009620 <__ieee754_pow+0x758>)
 80092ca:	402b      	ands	r3, r5
 80092cc:	2200      	movs	r2, #0
 80092ce:	b92b      	cbnz	r3, 80092dc <__ieee754_pow+0x414>
 80092d0:	4bd4      	ldr	r3, [pc, #848]	; (8009624 <__ieee754_pow+0x75c>)
 80092d2:	f7f7 f941 	bl	8000558 <__aeabi_dmul>
 80092d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80092da:	460c      	mov	r4, r1
 80092dc:	1523      	asrs	r3, r4, #20
 80092de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092e2:	4413      	add	r3, r2
 80092e4:	9305      	str	r3, [sp, #20]
 80092e6:	4bd0      	ldr	r3, [pc, #832]	; (8009628 <__ieee754_pow+0x760>)
 80092e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80092f0:	429c      	cmp	r4, r3
 80092f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092f6:	dd08      	ble.n	800930a <__ieee754_pow+0x442>
 80092f8:	4bcc      	ldr	r3, [pc, #816]	; (800962c <__ieee754_pow+0x764>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	f340 8162 	ble.w	80095c4 <__ieee754_pow+0x6fc>
 8009300:	9b05      	ldr	r3, [sp, #20]
 8009302:	3301      	adds	r3, #1
 8009304:	9305      	str	r3, [sp, #20]
 8009306:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800930a:	2400      	movs	r4, #0
 800930c:	00e3      	lsls	r3, r4, #3
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	4bc7      	ldr	r3, [pc, #796]	; (8009630 <__ieee754_pow+0x768>)
 8009312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009316:	ed93 7b00 	vldr	d7, [r3]
 800931a:	4629      	mov	r1, r5
 800931c:	ec53 2b17 	vmov	r2, r3, d7
 8009320:	eeb0 9a47 	vmov.f32	s18, s14
 8009324:	eef0 9a67 	vmov.f32	s19, s15
 8009328:	4682      	mov	sl, r0
 800932a:	f7f6 ff5d 	bl	80001e8 <__aeabi_dsub>
 800932e:	4652      	mov	r2, sl
 8009330:	4606      	mov	r6, r0
 8009332:	460f      	mov	r7, r1
 8009334:	462b      	mov	r3, r5
 8009336:	ec51 0b19 	vmov	r0, r1, d9
 800933a:	f7f6 ff57 	bl	80001ec <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	2000      	movs	r0, #0
 8009344:	49bb      	ldr	r1, [pc, #748]	; (8009634 <__ieee754_pow+0x76c>)
 8009346:	f7f7 fa31 	bl	80007ac <__aeabi_ddiv>
 800934a:	ec41 0b1a 	vmov	d10, r0, r1
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7f7 f8ff 	bl	8000558 <__aeabi_dmul>
 800935a:	2300      	movs	r3, #0
 800935c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009366:	46ab      	mov	fp, r5
 8009368:	106d      	asrs	r5, r5, #1
 800936a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800936e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009372:	ec41 0b18 	vmov	d8, r0, r1
 8009376:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800937a:	2200      	movs	r2, #0
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	4614      	mov	r4, r2
 8009382:	461d      	mov	r5, r3
 8009384:	f7f7 f8e8 	bl	8000558 <__aeabi_dmul>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f6 ff2a 	bl	80001e8 <__aeabi_dsub>
 8009394:	ec53 2b19 	vmov	r2, r3, d9
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f6 ff22 	bl	80001e8 <__aeabi_dsub>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4650      	mov	r0, sl
 80093aa:	4659      	mov	r1, fp
 80093ac:	f7f6 ff1c 	bl	80001e8 <__aeabi_dsub>
 80093b0:	4642      	mov	r2, r8
 80093b2:	464b      	mov	r3, r9
 80093b4:	f7f7 f8d0 	bl	8000558 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 ff12 	bl	80001e8 <__aeabi_dsub>
 80093c4:	ec53 2b1a 	vmov	r2, r3, d10
 80093c8:	f7f7 f8c6 	bl	8000558 <__aeabi_dmul>
 80093cc:	ec53 2b18 	vmov	r2, r3, d8
 80093d0:	ec41 0b19 	vmov	d9, r0, r1
 80093d4:	ec51 0b18 	vmov	r0, r1, d8
 80093d8:	f7f7 f8be 	bl	8000558 <__aeabi_dmul>
 80093dc:	a37c      	add	r3, pc, #496	; (adr r3, 80095d0 <__ieee754_pow+0x708>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	4604      	mov	r4, r0
 80093e4:	460d      	mov	r5, r1
 80093e6:	f7f7 f8b7 	bl	8000558 <__aeabi_dmul>
 80093ea:	a37b      	add	r3, pc, #492	; (adr r3, 80095d8 <__ieee754_pow+0x710>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 fefc 	bl	80001ec <__adddf3>
 80093f4:	4622      	mov	r2, r4
 80093f6:	462b      	mov	r3, r5
 80093f8:	f7f7 f8ae 	bl	8000558 <__aeabi_dmul>
 80093fc:	a378      	add	r3, pc, #480	; (adr r3, 80095e0 <__ieee754_pow+0x718>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f7f6 fef3 	bl	80001ec <__adddf3>
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	f7f7 f8a5 	bl	8000558 <__aeabi_dmul>
 800940e:	a376      	add	r3, pc, #472	; (adr r3, 80095e8 <__ieee754_pow+0x720>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f6 feea 	bl	80001ec <__adddf3>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f7 f89c 	bl	8000558 <__aeabi_dmul>
 8009420:	a373      	add	r3, pc, #460	; (adr r3, 80095f0 <__ieee754_pow+0x728>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 fee1 	bl	80001ec <__adddf3>
 800942a:	4622      	mov	r2, r4
 800942c:	462b      	mov	r3, r5
 800942e:	f7f7 f893 	bl	8000558 <__aeabi_dmul>
 8009432:	a371      	add	r3, pc, #452	; (adr r3, 80095f8 <__ieee754_pow+0x730>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f6 fed8 	bl	80001ec <__adddf3>
 800943c:	4622      	mov	r2, r4
 800943e:	4606      	mov	r6, r0
 8009440:	460f      	mov	r7, r1
 8009442:	462b      	mov	r3, r5
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 f886 	bl	8000558 <__aeabi_dmul>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 f880 	bl	8000558 <__aeabi_dmul>
 8009458:	4642      	mov	r2, r8
 800945a:	4604      	mov	r4, r0
 800945c:	460d      	mov	r5, r1
 800945e:	464b      	mov	r3, r9
 8009460:	ec51 0b18 	vmov	r0, r1, d8
 8009464:	f7f6 fec2 	bl	80001ec <__adddf3>
 8009468:	ec53 2b19 	vmov	r2, r3, d9
 800946c:	f7f7 f874 	bl	8000558 <__aeabi_dmul>
 8009470:	4622      	mov	r2, r4
 8009472:	462b      	mov	r3, r5
 8009474:	f7f6 feba 	bl	80001ec <__adddf3>
 8009478:	4642      	mov	r2, r8
 800947a:	4682      	mov	sl, r0
 800947c:	468b      	mov	fp, r1
 800947e:	464b      	mov	r3, r9
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f7f7 f868 	bl	8000558 <__aeabi_dmul>
 8009488:	4b6b      	ldr	r3, [pc, #428]	; (8009638 <__ieee754_pow+0x770>)
 800948a:	2200      	movs	r2, #0
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	f7f6 feac 	bl	80001ec <__adddf3>
 8009494:	4652      	mov	r2, sl
 8009496:	465b      	mov	r3, fp
 8009498:	f7f6 fea8 	bl	80001ec <__adddf3>
 800949c:	2000      	movs	r0, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 f855 	bl	8000558 <__aeabi_dmul>
 80094ae:	4b62      	ldr	r3, [pc, #392]	; (8009638 <__ieee754_pow+0x770>)
 80094b0:	4680      	mov	r8, r0
 80094b2:	4689      	mov	r9, r1
 80094b4:	2200      	movs	r2, #0
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f6 fe95 	bl	80001e8 <__aeabi_dsub>
 80094be:	4632      	mov	r2, r6
 80094c0:	463b      	mov	r3, r7
 80094c2:	f7f6 fe91 	bl	80001e8 <__aeabi_dsub>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4650      	mov	r0, sl
 80094cc:	4659      	mov	r1, fp
 80094ce:	f7f6 fe8b 	bl	80001e8 <__aeabi_dsub>
 80094d2:	ec53 2b18 	vmov	r2, r3, d8
 80094d6:	f7f7 f83f 	bl	8000558 <__aeabi_dmul>
 80094da:	4622      	mov	r2, r4
 80094dc:	4606      	mov	r6, r0
 80094de:	460f      	mov	r7, r1
 80094e0:	462b      	mov	r3, r5
 80094e2:	ec51 0b19 	vmov	r0, r1, d9
 80094e6:	f7f7 f837 	bl	8000558 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f6 fe7b 	bl	80001ec <__adddf3>
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f6 fe73 	bl	80001ec <__adddf3>
 8009506:	a33e      	add	r3, pc, #248	; (adr r3, 8009600 <__ieee754_pow+0x738>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	2000      	movs	r0, #0
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	f7f7 f821 	bl	8000558 <__aeabi_dmul>
 8009516:	4642      	mov	r2, r8
 8009518:	ec41 0b18 	vmov	d8, r0, r1
 800951c:	464b      	mov	r3, r9
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f6 fe61 	bl	80001e8 <__aeabi_dsub>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4630      	mov	r0, r6
 800952c:	4639      	mov	r1, r7
 800952e:	f7f6 fe5b 	bl	80001e8 <__aeabi_dsub>
 8009532:	a335      	add	r3, pc, #212	; (adr r3, 8009608 <__ieee754_pow+0x740>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f7 f80e 	bl	8000558 <__aeabi_dmul>
 800953c:	a334      	add	r3, pc, #208	; (adr r3, 8009610 <__ieee754_pow+0x748>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f7 f805 	bl	8000558 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f6 fe49 	bl	80001ec <__adddf3>
 800955a:	9a07      	ldr	r2, [sp, #28]
 800955c:	4b37      	ldr	r3, [pc, #220]	; (800963c <__ieee754_pow+0x774>)
 800955e:	4413      	add	r3, r2
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f6 fe42 	bl	80001ec <__adddf3>
 8009568:	4682      	mov	sl, r0
 800956a:	9805      	ldr	r0, [sp, #20]
 800956c:	468b      	mov	fp, r1
 800956e:	f7f6 ff89 	bl	8000484 <__aeabi_i2d>
 8009572:	9a07      	ldr	r2, [sp, #28]
 8009574:	4b32      	ldr	r3, [pc, #200]	; (8009640 <__ieee754_pow+0x778>)
 8009576:	4413      	add	r3, r2
 8009578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	4652      	mov	r2, sl
 8009582:	465b      	mov	r3, fp
 8009584:	ec51 0b18 	vmov	r0, r1, d8
 8009588:	f7f6 fe30 	bl	80001ec <__adddf3>
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	f7f6 fe2c 	bl	80001ec <__adddf3>
 8009594:	4632      	mov	r2, r6
 8009596:	463b      	mov	r3, r7
 8009598:	f7f6 fe28 	bl	80001ec <__adddf3>
 800959c:	2000      	movs	r0, #0
 800959e:	4632      	mov	r2, r6
 80095a0:	463b      	mov	r3, r7
 80095a2:	4604      	mov	r4, r0
 80095a4:	460d      	mov	r5, r1
 80095a6:	f7f6 fe1f 	bl	80001e8 <__aeabi_dsub>
 80095aa:	4642      	mov	r2, r8
 80095ac:	464b      	mov	r3, r9
 80095ae:	f7f6 fe1b 	bl	80001e8 <__aeabi_dsub>
 80095b2:	ec53 2b18 	vmov	r2, r3, d8
 80095b6:	f7f6 fe17 	bl	80001e8 <__aeabi_dsub>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4650      	mov	r0, sl
 80095c0:	4659      	mov	r1, fp
 80095c2:	e610      	b.n	80091e6 <__ieee754_pow+0x31e>
 80095c4:	2401      	movs	r4, #1
 80095c6:	e6a1      	b.n	800930c <__ieee754_pow+0x444>
 80095c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009618 <__ieee754_pow+0x750>
 80095cc:	e617      	b.n	80091fe <__ieee754_pow+0x336>
 80095ce:	bf00      	nop
 80095d0:	4a454eef 	.word	0x4a454eef
 80095d4:	3fca7e28 	.word	0x3fca7e28
 80095d8:	93c9db65 	.word	0x93c9db65
 80095dc:	3fcd864a 	.word	0x3fcd864a
 80095e0:	a91d4101 	.word	0xa91d4101
 80095e4:	3fd17460 	.word	0x3fd17460
 80095e8:	518f264d 	.word	0x518f264d
 80095ec:	3fd55555 	.word	0x3fd55555
 80095f0:	db6fabff 	.word	0xdb6fabff
 80095f4:	3fdb6db6 	.word	0x3fdb6db6
 80095f8:	33333303 	.word	0x33333303
 80095fc:	3fe33333 	.word	0x3fe33333
 8009600:	e0000000 	.word	0xe0000000
 8009604:	3feec709 	.word	0x3feec709
 8009608:	dc3a03fd 	.word	0xdc3a03fd
 800960c:	3feec709 	.word	0x3feec709
 8009610:	145b01f5 	.word	0x145b01f5
 8009614:	be3e2fe0 	.word	0xbe3e2fe0
 8009618:	00000000 	.word	0x00000000
 800961c:	3ff00000 	.word	0x3ff00000
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	43400000 	.word	0x43400000
 8009628:	0003988e 	.word	0x0003988e
 800962c:	000bb679 	.word	0x000bb679
 8009630:	0800b050 	.word	0x0800b050
 8009634:	3ff00000 	.word	0x3ff00000
 8009638:	40080000 	.word	0x40080000
 800963c:	0800b070 	.word	0x0800b070
 8009640:	0800b060 	.word	0x0800b060
 8009644:	a3b5      	add	r3, pc, #724	; (adr r3, 800991c <__ieee754_pow+0xa54>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	4640      	mov	r0, r8
 800964c:	4649      	mov	r1, r9
 800964e:	f7f6 fdcd 	bl	80001ec <__adddf3>
 8009652:	4622      	mov	r2, r4
 8009654:	ec41 0b1a 	vmov	d10, r0, r1
 8009658:	462b      	mov	r3, r5
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 fdc3 	bl	80001e8 <__aeabi_dsub>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	ec51 0b1a 	vmov	r0, r1, d10
 800966a:	f7f7 fa05 	bl	8000a78 <__aeabi_dcmpgt>
 800966e:	2800      	cmp	r0, #0
 8009670:	f47f ae04 	bne.w	800927c <__ieee754_pow+0x3b4>
 8009674:	4aa4      	ldr	r2, [pc, #656]	; (8009908 <__ieee754_pow+0xa40>)
 8009676:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800967a:	4293      	cmp	r3, r2
 800967c:	f340 8108 	ble.w	8009890 <__ieee754_pow+0x9c8>
 8009680:	151b      	asrs	r3, r3, #20
 8009682:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009686:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800968a:	fa4a f303 	asr.w	r3, sl, r3
 800968e:	445b      	add	r3, fp
 8009690:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009694:	4e9d      	ldr	r6, [pc, #628]	; (800990c <__ieee754_pow+0xa44>)
 8009696:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800969a:	4116      	asrs	r6, r2
 800969c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80096a0:	2000      	movs	r0, #0
 80096a2:	ea23 0106 	bic.w	r1, r3, r6
 80096a6:	f1c2 0214 	rsb	r2, r2, #20
 80096aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80096ae:	fa4a fa02 	asr.w	sl, sl, r2
 80096b2:	f1bb 0f00 	cmp.w	fp, #0
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4620      	mov	r0, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	bfb8      	it	lt
 80096c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80096c4:	f7f6 fd90 	bl	80001e8 <__aeabi_dsub>
 80096c8:	ec41 0b19 	vmov	d9, r0, r1
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	ec51 0b19 	vmov	r0, r1, d9
 80096d4:	f7f6 fd8a 	bl	80001ec <__adddf3>
 80096d8:	a37b      	add	r3, pc, #492	; (adr r3, 80098c8 <__ieee754_pow+0xa00>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	2000      	movs	r0, #0
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	f7f6 ff38 	bl	8000558 <__aeabi_dmul>
 80096e8:	ec53 2b19 	vmov	r2, r3, d9
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 fd78 	bl	80001e8 <__aeabi_dsub>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f6 fd72 	bl	80001e8 <__aeabi_dsub>
 8009704:	a372      	add	r3, pc, #456	; (adr r3, 80098d0 <__ieee754_pow+0xa08>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 ff25 	bl	8000558 <__aeabi_dmul>
 800970e:	a372      	add	r3, pc, #456	; (adr r3, 80098d8 <__ieee754_pow+0xa10>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	4680      	mov	r8, r0
 8009716:	4689      	mov	r9, r1
 8009718:	4620      	mov	r0, r4
 800971a:	4629      	mov	r1, r5
 800971c:	f7f6 ff1c 	bl	8000558 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4640      	mov	r0, r8
 8009726:	4649      	mov	r1, r9
 8009728:	f7f6 fd60 	bl	80001ec <__adddf3>
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f6 fd58 	bl	80001ec <__adddf3>
 800973c:	4632      	mov	r2, r6
 800973e:	463b      	mov	r3, r7
 8009740:	4680      	mov	r8, r0
 8009742:	4689      	mov	r9, r1
 8009744:	f7f6 fd50 	bl	80001e8 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 fd4a 	bl	80001e8 <__aeabi_dsub>
 8009754:	4642      	mov	r2, r8
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	464b      	mov	r3, r9
 800975c:	4640      	mov	r0, r8
 800975e:	4649      	mov	r1, r9
 8009760:	f7f6 fefa 	bl	8000558 <__aeabi_dmul>
 8009764:	a35e      	add	r3, pc, #376	; (adr r3, 80098e0 <__ieee754_pow+0xa18>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	4604      	mov	r4, r0
 800976c:	460d      	mov	r5, r1
 800976e:	f7f6 fef3 	bl	8000558 <__aeabi_dmul>
 8009772:	a35d      	add	r3, pc, #372	; (adr r3, 80098e8 <__ieee754_pow+0xa20>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 fd36 	bl	80001e8 <__aeabi_dsub>
 800977c:	4622      	mov	r2, r4
 800977e:	462b      	mov	r3, r5
 8009780:	f7f6 feea 	bl	8000558 <__aeabi_dmul>
 8009784:	a35a      	add	r3, pc, #360	; (adr r3, 80098f0 <__ieee754_pow+0xa28>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 fd2f 	bl	80001ec <__adddf3>
 800978e:	4622      	mov	r2, r4
 8009790:	462b      	mov	r3, r5
 8009792:	f7f6 fee1 	bl	8000558 <__aeabi_dmul>
 8009796:	a358      	add	r3, pc, #352	; (adr r3, 80098f8 <__ieee754_pow+0xa30>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fd24 	bl	80001e8 <__aeabi_dsub>
 80097a0:	4622      	mov	r2, r4
 80097a2:	462b      	mov	r3, r5
 80097a4:	f7f6 fed8 	bl	8000558 <__aeabi_dmul>
 80097a8:	a355      	add	r3, pc, #340	; (adr r3, 8009900 <__ieee754_pow+0xa38>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fd1d 	bl	80001ec <__adddf3>
 80097b2:	4622      	mov	r2, r4
 80097b4:	462b      	mov	r3, r5
 80097b6:	f7f6 fecf 	bl	8000558 <__aeabi_dmul>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4640      	mov	r0, r8
 80097c0:	4649      	mov	r1, r9
 80097c2:	f7f6 fd11 	bl	80001e8 <__aeabi_dsub>
 80097c6:	4604      	mov	r4, r0
 80097c8:	460d      	mov	r5, r1
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
 80097d2:	f7f6 fec1 	bl	8000558 <__aeabi_dmul>
 80097d6:	2200      	movs	r2, #0
 80097d8:	ec41 0b19 	vmov	d9, r0, r1
 80097dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097e0:	4620      	mov	r0, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7f6 fd00 	bl	80001e8 <__aeabi_dsub>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	ec51 0b19 	vmov	r0, r1, d9
 80097f0:	f7f6 ffdc 	bl	80007ac <__aeabi_ddiv>
 80097f4:	4632      	mov	r2, r6
 80097f6:	4604      	mov	r4, r0
 80097f8:	460d      	mov	r5, r1
 80097fa:	463b      	mov	r3, r7
 80097fc:	4640      	mov	r0, r8
 80097fe:	4649      	mov	r1, r9
 8009800:	f7f6 feaa 	bl	8000558 <__aeabi_dmul>
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	f7f6 fcf0 	bl	80001ec <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fce8 	bl	80001e8 <__aeabi_dsub>
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	f7f6 fce4 	bl	80001e8 <__aeabi_dsub>
 8009820:	460b      	mov	r3, r1
 8009822:	4602      	mov	r2, r0
 8009824:	493a      	ldr	r1, [pc, #232]	; (8009910 <__ieee754_pow+0xa48>)
 8009826:	2000      	movs	r0, #0
 8009828:	f7f6 fcde 	bl	80001e8 <__aeabi_dsub>
 800982c:	ec41 0b10 	vmov	d0, r0, r1
 8009830:	ee10 3a90 	vmov	r3, s1
 8009834:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983c:	da2b      	bge.n	8009896 <__ieee754_pow+0x9ce>
 800983e:	4650      	mov	r0, sl
 8009840:	f001 fa6e 	bl	800ad20 <scalbn>
 8009844:	ec51 0b10 	vmov	r0, r1, d0
 8009848:	ec53 2b18 	vmov	r2, r3, d8
 800984c:	f7ff bbed 	b.w	800902a <__ieee754_pow+0x162>
 8009850:	4b30      	ldr	r3, [pc, #192]	; (8009914 <__ieee754_pow+0xa4c>)
 8009852:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009856:	429e      	cmp	r6, r3
 8009858:	f77f af0c 	ble.w	8009674 <__ieee754_pow+0x7ac>
 800985c:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <__ieee754_pow+0xa50>)
 800985e:	440b      	add	r3, r1
 8009860:	4303      	orrs	r3, r0
 8009862:	d009      	beq.n	8009878 <__ieee754_pow+0x9b0>
 8009864:	ec51 0b18 	vmov	r0, r1, d8
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	f7f7 f8e6 	bl	8000a3c <__aeabi_dcmplt>
 8009870:	3800      	subs	r0, #0
 8009872:	bf18      	it	ne
 8009874:	2001      	movne	r0, #1
 8009876:	e447      	b.n	8009108 <__ieee754_pow+0x240>
 8009878:	4622      	mov	r2, r4
 800987a:	462b      	mov	r3, r5
 800987c:	f7f6 fcb4 	bl	80001e8 <__aeabi_dsub>
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	f7f7 f8ee 	bl	8000a64 <__aeabi_dcmpge>
 8009888:	2800      	cmp	r0, #0
 800988a:	f43f aef3 	beq.w	8009674 <__ieee754_pow+0x7ac>
 800988e:	e7e9      	b.n	8009864 <__ieee754_pow+0x99c>
 8009890:	f04f 0a00 	mov.w	sl, #0
 8009894:	e71a      	b.n	80096cc <__ieee754_pow+0x804>
 8009896:	ec51 0b10 	vmov	r0, r1, d0
 800989a:	4619      	mov	r1, r3
 800989c:	e7d4      	b.n	8009848 <__ieee754_pow+0x980>
 800989e:	491c      	ldr	r1, [pc, #112]	; (8009910 <__ieee754_pow+0xa48>)
 80098a0:	2000      	movs	r0, #0
 80098a2:	f7ff bb30 	b.w	8008f06 <__ieee754_pow+0x3e>
 80098a6:	2000      	movs	r0, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	f7ff bb2c 	b.w	8008f06 <__ieee754_pow+0x3e>
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7ff bb28 	b.w	8008f06 <__ieee754_pow+0x3e>
 80098b6:	9204      	str	r2, [sp, #16]
 80098b8:	f7ff bb7a 	b.w	8008fb0 <__ieee754_pow+0xe8>
 80098bc:	2300      	movs	r3, #0
 80098be:	f7ff bb64 	b.w	8008f8a <__ieee754_pow+0xc2>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	00000000 	.word	0x00000000
 80098cc:	3fe62e43 	.word	0x3fe62e43
 80098d0:	fefa39ef 	.word	0xfefa39ef
 80098d4:	3fe62e42 	.word	0x3fe62e42
 80098d8:	0ca86c39 	.word	0x0ca86c39
 80098dc:	be205c61 	.word	0xbe205c61
 80098e0:	72bea4d0 	.word	0x72bea4d0
 80098e4:	3e663769 	.word	0x3e663769
 80098e8:	c5d26bf1 	.word	0xc5d26bf1
 80098ec:	3ebbbd41 	.word	0x3ebbbd41
 80098f0:	af25de2c 	.word	0xaf25de2c
 80098f4:	3f11566a 	.word	0x3f11566a
 80098f8:	16bebd93 	.word	0x16bebd93
 80098fc:	3f66c16c 	.word	0x3f66c16c
 8009900:	5555553e 	.word	0x5555553e
 8009904:	3fc55555 	.word	0x3fc55555
 8009908:	3fe00000 	.word	0x3fe00000
 800990c:	000fffff 	.word	0x000fffff
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	4090cbff 	.word	0x4090cbff
 8009918:	3f6f3400 	.word	0x3f6f3400
 800991c:	652b82fe 	.word	0x652b82fe
 8009920:	3c971547 	.word	0x3c971547
 8009924:	00000000 	.word	0x00000000

08009928 <__ieee754_rem_pio2>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ed2d 8b02 	vpush	{d8}
 8009930:	ec55 4b10 	vmov	r4, r5, d0
 8009934:	4bca      	ldr	r3, [pc, #808]	; (8009c60 <__ieee754_rem_pio2+0x338>)
 8009936:	b08b      	sub	sp, #44	; 0x2c
 8009938:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800993c:	4598      	cmp	r8, r3
 800993e:	4682      	mov	sl, r0
 8009940:	9502      	str	r5, [sp, #8]
 8009942:	dc08      	bgt.n	8009956 <__ieee754_rem_pio2+0x2e>
 8009944:	2200      	movs	r2, #0
 8009946:	2300      	movs	r3, #0
 8009948:	ed80 0b00 	vstr	d0, [r0]
 800994c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009950:	f04f 0b00 	mov.w	fp, #0
 8009954:	e028      	b.n	80099a8 <__ieee754_rem_pio2+0x80>
 8009956:	4bc3      	ldr	r3, [pc, #780]	; (8009c64 <__ieee754_rem_pio2+0x33c>)
 8009958:	4598      	cmp	r8, r3
 800995a:	dc78      	bgt.n	8009a4e <__ieee754_rem_pio2+0x126>
 800995c:	9b02      	ldr	r3, [sp, #8]
 800995e:	4ec2      	ldr	r6, [pc, #776]	; (8009c68 <__ieee754_rem_pio2+0x340>)
 8009960:	2b00      	cmp	r3, #0
 8009962:	ee10 0a10 	vmov	r0, s0
 8009966:	a3b0      	add	r3, pc, #704	; (adr r3, 8009c28 <__ieee754_rem_pio2+0x300>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4629      	mov	r1, r5
 800996e:	dd39      	ble.n	80099e4 <__ieee754_rem_pio2+0xbc>
 8009970:	f7f6 fc3a 	bl	80001e8 <__aeabi_dsub>
 8009974:	45b0      	cmp	r8, r6
 8009976:	4604      	mov	r4, r0
 8009978:	460d      	mov	r5, r1
 800997a:	d01b      	beq.n	80099b4 <__ieee754_rem_pio2+0x8c>
 800997c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fc31 	bl	80001e8 <__aeabi_dsub>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9ca 2300 	strd	r2, r3, [sl]
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 fc29 	bl	80001e8 <__aeabi_dsub>
 8009996:	a3a6      	add	r3, pc, #664	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	f7f6 fc24 	bl	80001e8 <__aeabi_dsub>
 80099a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099a4:	f04f 0b01 	mov.w	fp, #1
 80099a8:	4658      	mov	r0, fp
 80099aa:	b00b      	add	sp, #44	; 0x2c
 80099ac:	ecbd 8b02 	vpop	{d8}
 80099b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009c38 <__ieee754_rem_pio2+0x310>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fc15 	bl	80001e8 <__aeabi_dsub>
 80099be:	a3a0      	add	r3, pc, #640	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x318>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	f7f6 fc0e 	bl	80001e8 <__aeabi_dsub>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	e9ca 2300 	strd	r2, r3, [sl]
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fc06 	bl	80001e8 <__aeabi_dsub>
 80099dc:	a398      	add	r3, pc, #608	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x318>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	e7db      	b.n	800999c <__ieee754_rem_pio2+0x74>
 80099e4:	f7f6 fc02 	bl	80001ec <__adddf3>
 80099e8:	45b0      	cmp	r8, r6
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	d016      	beq.n	8009a1e <__ieee754_rem_pio2+0xf6>
 80099f0:	a38f      	add	r3, pc, #572	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f6 fbf9 	bl	80001ec <__adddf3>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	e9ca 2300 	strd	r2, r3, [sl]
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f6 fbef 	bl	80001e8 <__aeabi_dsub>
 8009a0a:	a389      	add	r3, pc, #548	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fbec 	bl	80001ec <__adddf3>
 8009a14:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a1c:	e7c4      	b.n	80099a8 <__ieee754_rem_pio2+0x80>
 8009a1e:	a386      	add	r3, pc, #536	; (adr r3, 8009c38 <__ieee754_rem_pio2+0x310>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f7f6 fbe2 	bl	80001ec <__adddf3>
 8009a28:	a385      	add	r3, pc, #532	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x318>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	4604      	mov	r4, r0
 8009a30:	460d      	mov	r5, r1
 8009a32:	f7f6 fbdb 	bl	80001ec <__adddf3>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	e9ca 2300 	strd	r2, r3, [sl]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fbd1 	bl	80001e8 <__aeabi_dsub>
 8009a46:	a37e      	add	r3, pc, #504	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x318>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	e7e0      	b.n	8009a10 <__ieee754_rem_pio2+0xe8>
 8009a4e:	4b87      	ldr	r3, [pc, #540]	; (8009c6c <__ieee754_rem_pio2+0x344>)
 8009a50:	4598      	cmp	r8, r3
 8009a52:	f300 80d9 	bgt.w	8009c08 <__ieee754_rem_pio2+0x2e0>
 8009a56:	f001 f8cf 	bl	800abf8 <fabs>
 8009a5a:	ec55 4b10 	vmov	r4, r5, d0
 8009a5e:	ee10 0a10 	vmov	r0, s0
 8009a62:	a379      	add	r3, pc, #484	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x320>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7f6 fd75 	bl	8000558 <__aeabi_dmul>
 8009a6e:	4b80      	ldr	r3, [pc, #512]	; (8009c70 <__ieee754_rem_pio2+0x348>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	f7f6 fbbb 	bl	80001ec <__adddf3>
 8009a76:	f7f7 f81f 	bl	8000ab8 <__aeabi_d2iz>
 8009a7a:	4683      	mov	fp, r0
 8009a7c:	f7f6 fd02 	bl	8000484 <__aeabi_i2d>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	ec43 2b18 	vmov	d8, r2, r3
 8009a88:	a367      	add	r3, pc, #412	; (adr r3, 8009c28 <__ieee754_rem_pio2+0x300>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fd63 	bl	8000558 <__aeabi_dmul>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4620      	mov	r0, r4
 8009a98:	4629      	mov	r1, r5
 8009a9a:	f7f6 fba5 	bl	80001e8 <__aeabi_dsub>
 8009a9e:	a364      	add	r3, pc, #400	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	ec51 0b18 	vmov	r0, r1, d8
 8009aac:	f7f6 fd54 	bl	8000558 <__aeabi_dmul>
 8009ab0:	f1bb 0f1f 	cmp.w	fp, #31
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	dc0d      	bgt.n	8009ad6 <__ieee754_rem_pio2+0x1ae>
 8009aba:	4b6e      	ldr	r3, [pc, #440]	; (8009c74 <__ieee754_rem_pio2+0x34c>)
 8009abc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	d006      	beq.n	8009ad6 <__ieee754_rem_pio2+0x1ae>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	462b      	mov	r3, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	4639      	mov	r1, r7
 8009ad0:	f7f6 fb8a 	bl	80001e8 <__aeabi_dsub>
 8009ad4:	e00f      	b.n	8009af6 <__ieee754_rem_pio2+0x1ce>
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 fb83 	bl	80001e8 <__aeabi_dsub>
 8009ae2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ae6:	9303      	str	r3, [sp, #12]
 8009ae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009aec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009af0:	f1b8 0f10 	cmp.w	r8, #16
 8009af4:	dc02      	bgt.n	8009afc <__ieee754_rem_pio2+0x1d4>
 8009af6:	e9ca 0100 	strd	r0, r1, [sl]
 8009afa:	e039      	b.n	8009b70 <__ieee754_rem_pio2+0x248>
 8009afc:	a34e      	add	r3, pc, #312	; (adr r3, 8009c38 <__ieee754_rem_pio2+0x310>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	ec51 0b18 	vmov	r0, r1, d8
 8009b06:	f7f6 fd27 	bl	8000558 <__aeabi_dmul>
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	460d      	mov	r5, r1
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4630      	mov	r0, r6
 8009b14:	4639      	mov	r1, r7
 8009b16:	f7f6 fb67 	bl	80001e8 <__aeabi_dsub>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4689      	mov	r9, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fb5f 	bl	80001e8 <__aeabi_dsub>
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	f7f6 fb5b 	bl	80001e8 <__aeabi_dsub>
 8009b32:	a343      	add	r3, pc, #268	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x318>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	ec51 0b18 	vmov	r0, r1, d8
 8009b40:	f7f6 fd0a 	bl	8000558 <__aeabi_dmul>
 8009b44:	4622      	mov	r2, r4
 8009b46:	462b      	mov	r3, r5
 8009b48:	f7f6 fb4e 	bl	80001e8 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4604      	mov	r4, r0
 8009b52:	460d      	mov	r5, r1
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 fb46 	bl	80001e8 <__aeabi_dsub>
 8009b5c:	9a03      	ldr	r2, [sp, #12]
 8009b5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b31      	cmp	r3, #49	; 0x31
 8009b66:	dc24      	bgt.n	8009bb2 <__ieee754_rem_pio2+0x28a>
 8009b68:	e9ca 0100 	strd	r0, r1, [sl]
 8009b6c:	4646      	mov	r6, r8
 8009b6e:	464f      	mov	r7, r9
 8009b70:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b74:	4630      	mov	r0, r6
 8009b76:	4642      	mov	r2, r8
 8009b78:	464b      	mov	r3, r9
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fb34 	bl	80001e8 <__aeabi_dsub>
 8009b80:	462b      	mov	r3, r5
 8009b82:	4622      	mov	r2, r4
 8009b84:	f7f6 fb30 	bl	80001e8 <__aeabi_dsub>
 8009b88:	9b02      	ldr	r3, [sp, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b90:	f6bf af0a 	bge.w	80099a8 <__ieee754_rem_pio2+0x80>
 8009b94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b98:	f8ca 3004 	str.w	r3, [sl, #4]
 8009b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ba0:	f8ca 8000 	str.w	r8, [sl]
 8009ba4:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ba8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009bac:	f1cb 0b00 	rsb	fp, fp, #0
 8009bb0:	e6fa      	b.n	80099a8 <__ieee754_rem_pio2+0x80>
 8009bb2:	a327      	add	r3, pc, #156	; (adr r3, 8009c50 <__ieee754_rem_pio2+0x328>)
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	ec51 0b18 	vmov	r0, r1, d8
 8009bbc:	f7f6 fccc 	bl	8000558 <__aeabi_dmul>
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4649      	mov	r1, r9
 8009bcc:	f7f6 fb0c 	bl	80001e8 <__aeabi_dsub>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4640      	mov	r0, r8
 8009bda:	4649      	mov	r1, r9
 8009bdc:	f7f6 fb04 	bl	80001e8 <__aeabi_dsub>
 8009be0:	4622      	mov	r2, r4
 8009be2:	462b      	mov	r3, r5
 8009be4:	f7f6 fb00 	bl	80001e8 <__aeabi_dsub>
 8009be8:	a31b      	add	r3, pc, #108	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x330>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	4604      	mov	r4, r0
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	ec51 0b18 	vmov	r0, r1, d8
 8009bf6:	f7f6 fcaf 	bl	8000558 <__aeabi_dmul>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 faf3 	bl	80001e8 <__aeabi_dsub>
 8009c02:	4604      	mov	r4, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	e75f      	b.n	8009ac8 <__ieee754_rem_pio2+0x1a0>
 8009c08:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <__ieee754_rem_pio2+0x350>)
 8009c0a:	4598      	cmp	r8, r3
 8009c0c:	dd36      	ble.n	8009c7c <__ieee754_rem_pio2+0x354>
 8009c0e:	ee10 2a10 	vmov	r2, s0
 8009c12:	462b      	mov	r3, r5
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fae6 	bl	80001e8 <__aeabi_dsub>
 8009c1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c20:	e9ca 0100 	strd	r0, r1, [sl]
 8009c24:	e694      	b.n	8009950 <__ieee754_rem_pio2+0x28>
 8009c26:	bf00      	nop
 8009c28:	54400000 	.word	0x54400000
 8009c2c:	3ff921fb 	.word	0x3ff921fb
 8009c30:	1a626331 	.word	0x1a626331
 8009c34:	3dd0b461 	.word	0x3dd0b461
 8009c38:	1a600000 	.word	0x1a600000
 8009c3c:	3dd0b461 	.word	0x3dd0b461
 8009c40:	2e037073 	.word	0x2e037073
 8009c44:	3ba3198a 	.word	0x3ba3198a
 8009c48:	6dc9c883 	.word	0x6dc9c883
 8009c4c:	3fe45f30 	.word	0x3fe45f30
 8009c50:	2e000000 	.word	0x2e000000
 8009c54:	3ba3198a 	.word	0x3ba3198a
 8009c58:	252049c1 	.word	0x252049c1
 8009c5c:	397b839a 	.word	0x397b839a
 8009c60:	3fe921fb 	.word	0x3fe921fb
 8009c64:	4002d97b 	.word	0x4002d97b
 8009c68:	3ff921fb 	.word	0x3ff921fb
 8009c6c:	413921fb 	.word	0x413921fb
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	0800b080 	.word	0x0800b080
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009c80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009c84:	ee10 0a10 	vmov	r0, s0
 8009c88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009c8c:	ee10 6a10 	vmov	r6, s0
 8009c90:	460f      	mov	r7, r1
 8009c92:	f7f6 ff11 	bl	8000ab8 <__aeabi_d2iz>
 8009c96:	f7f6 fbf5 	bl	8000484 <__aeabi_i2d>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ca6:	f7f6 fa9f 	bl	80001e8 <__aeabi_dsub>
 8009caa:	4b23      	ldr	r3, [pc, #140]	; (8009d38 <__ieee754_rem_pio2+0x410>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	f7f6 fc53 	bl	8000558 <__aeabi_dmul>
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	f7f6 feff 	bl	8000ab8 <__aeabi_d2iz>
 8009cba:	f7f6 fbe3 	bl	8000484 <__aeabi_i2d>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cca:	f7f6 fa8d 	bl	80001e8 <__aeabi_dsub>
 8009cce:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <__ieee754_rem_pio2+0x410>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f7f6 fc41 	bl	8000558 <__aeabi_dmul>
 8009cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cda:	ad04      	add	r5, sp, #16
 8009cdc:	f04f 0803 	mov.w	r8, #3
 8009ce0:	46a9      	mov	r9, r5
 8009ce2:	2600      	movs	r6, #0
 8009ce4:	2700      	movs	r7, #0
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	463b      	mov	r3, r7
 8009cea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009cee:	46c3      	mov	fp, r8
 8009cf0:	3d08      	subs	r5, #8
 8009cf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009cf6:	f7f6 fe97 	bl	8000a28 <__aeabi_dcmpeq>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d1f3      	bne.n	8009ce6 <__ieee754_rem_pio2+0x3be>
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <__ieee754_rem_pio2+0x414>)
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	2302      	movs	r3, #2
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	4622      	mov	r2, r4
 8009d08:	465b      	mov	r3, fp
 8009d0a:	4651      	mov	r1, sl
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 f993 	bl	800a038 <__kernel_rem_pio2>
 8009d12:	9b02      	ldr	r3, [sp, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	4683      	mov	fp, r0
 8009d18:	f6bf ae46 	bge.w	80099a8 <__ieee754_rem_pio2+0x80>
 8009d1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009d20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d24:	e9ca 2300 	strd	r2, r3, [sl]
 8009d28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009d34:	e73a      	b.n	8009bac <__ieee754_rem_pio2+0x284>
 8009d36:	bf00      	nop
 8009d38:	41700000 	.word	0x41700000
 8009d3c:	0800b100 	.word	0x0800b100

08009d40 <__ieee754_sqrt>:
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	ec55 4b10 	vmov	r4, r5, d0
 8009d48:	4e55      	ldr	r6, [pc, #340]	; (8009ea0 <__ieee754_sqrt+0x160>)
 8009d4a:	43ae      	bics	r6, r5
 8009d4c:	ee10 0a10 	vmov	r0, s0
 8009d50:	ee10 3a10 	vmov	r3, s0
 8009d54:	462a      	mov	r2, r5
 8009d56:	4629      	mov	r1, r5
 8009d58:	d110      	bne.n	8009d7c <__ieee754_sqrt+0x3c>
 8009d5a:	ee10 2a10 	vmov	r2, s0
 8009d5e:	462b      	mov	r3, r5
 8009d60:	f7f6 fbfa 	bl	8000558 <__aeabi_dmul>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7f6 fa3e 	bl	80001ec <__adddf3>
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	ec45 4b10 	vmov	d0, r4, r5
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	dc10      	bgt.n	8009da2 <__ieee754_sqrt+0x62>
 8009d80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d84:	4330      	orrs	r0, r6
 8009d86:	d0f5      	beq.n	8009d74 <__ieee754_sqrt+0x34>
 8009d88:	b15d      	cbz	r5, 8009da2 <__ieee754_sqrt+0x62>
 8009d8a:	ee10 2a10 	vmov	r2, s0
 8009d8e:	462b      	mov	r3, r5
 8009d90:	ee10 0a10 	vmov	r0, s0
 8009d94:	f7f6 fa28 	bl	80001e8 <__aeabi_dsub>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	f7f6 fd06 	bl	80007ac <__aeabi_ddiv>
 8009da0:	e7e6      	b.n	8009d70 <__ieee754_sqrt+0x30>
 8009da2:	1512      	asrs	r2, r2, #20
 8009da4:	d074      	beq.n	8009e90 <__ieee754_sqrt+0x150>
 8009da6:	07d4      	lsls	r4, r2, #31
 8009da8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009dac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009db0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009db4:	bf5e      	ittt	pl
 8009db6:	0fda      	lsrpl	r2, r3, #31
 8009db8:	005b      	lslpl	r3, r3, #1
 8009dba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	0fda      	lsrs	r2, r3, #31
 8009dc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009dc6:	107f      	asrs	r7, r7, #1
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	2516      	movs	r5, #22
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009dd2:	1886      	adds	r6, r0, r2
 8009dd4:	428e      	cmp	r6, r1
 8009dd6:	bfde      	ittt	le
 8009dd8:	1b89      	suble	r1, r1, r6
 8009dda:	18b0      	addle	r0, r6, r2
 8009ddc:	18a4      	addle	r4, r4, r2
 8009dde:	0049      	lsls	r1, r1, #1
 8009de0:	3d01      	subs	r5, #1
 8009de2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009de6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009dea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dee:	d1f0      	bne.n	8009dd2 <__ieee754_sqrt+0x92>
 8009df0:	462a      	mov	r2, r5
 8009df2:	f04f 0e20 	mov.w	lr, #32
 8009df6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009dfa:	4281      	cmp	r1, r0
 8009dfc:	eb06 0c05 	add.w	ip, r6, r5
 8009e00:	dc02      	bgt.n	8009e08 <__ieee754_sqrt+0xc8>
 8009e02:	d113      	bne.n	8009e2c <__ieee754_sqrt+0xec>
 8009e04:	459c      	cmp	ip, r3
 8009e06:	d811      	bhi.n	8009e2c <__ieee754_sqrt+0xec>
 8009e08:	f1bc 0f00 	cmp.w	ip, #0
 8009e0c:	eb0c 0506 	add.w	r5, ip, r6
 8009e10:	da43      	bge.n	8009e9a <__ieee754_sqrt+0x15a>
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	db41      	blt.n	8009e9a <__ieee754_sqrt+0x15a>
 8009e16:	f100 0801 	add.w	r8, r0, #1
 8009e1a:	1a09      	subs	r1, r1, r0
 8009e1c:	459c      	cmp	ip, r3
 8009e1e:	bf88      	it	hi
 8009e20:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009e24:	eba3 030c 	sub.w	r3, r3, ip
 8009e28:	4432      	add	r2, r6
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009e30:	f1be 0e01 	subs.w	lr, lr, #1
 8009e34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009e38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e40:	d1db      	bne.n	8009dfa <__ieee754_sqrt+0xba>
 8009e42:	430b      	orrs	r3, r1
 8009e44:	d006      	beq.n	8009e54 <__ieee754_sqrt+0x114>
 8009e46:	1c50      	adds	r0, r2, #1
 8009e48:	bf13      	iteet	ne
 8009e4a:	3201      	addne	r2, #1
 8009e4c:	3401      	addeq	r4, #1
 8009e4e:	4672      	moveq	r2, lr
 8009e50:	f022 0201 	bicne.w	r2, r2, #1
 8009e54:	1063      	asrs	r3, r4, #1
 8009e56:	0852      	lsrs	r2, r2, #1
 8009e58:	07e1      	lsls	r1, r4, #31
 8009e5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009e5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009e62:	bf48      	it	mi
 8009e64:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009e68:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	e781      	b.n	8009d74 <__ieee754_sqrt+0x34>
 8009e70:	0ad9      	lsrs	r1, r3, #11
 8009e72:	3815      	subs	r0, #21
 8009e74:	055b      	lsls	r3, r3, #21
 8009e76:	2900      	cmp	r1, #0
 8009e78:	d0fa      	beq.n	8009e70 <__ieee754_sqrt+0x130>
 8009e7a:	02cd      	lsls	r5, r1, #11
 8009e7c:	d50a      	bpl.n	8009e94 <__ieee754_sqrt+0x154>
 8009e7e:	f1c2 0420 	rsb	r4, r2, #32
 8009e82:	fa23 f404 	lsr.w	r4, r3, r4
 8009e86:	1e55      	subs	r5, r2, #1
 8009e88:	4093      	lsls	r3, r2
 8009e8a:	4321      	orrs	r1, r4
 8009e8c:	1b42      	subs	r2, r0, r5
 8009e8e:	e78a      	b.n	8009da6 <__ieee754_sqrt+0x66>
 8009e90:	4610      	mov	r0, r2
 8009e92:	e7f0      	b.n	8009e76 <__ieee754_sqrt+0x136>
 8009e94:	0049      	lsls	r1, r1, #1
 8009e96:	3201      	adds	r2, #1
 8009e98:	e7ef      	b.n	8009e7a <__ieee754_sqrt+0x13a>
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	e7bd      	b.n	8009e1a <__ieee754_sqrt+0xda>
 8009e9e:	bf00      	nop
 8009ea0:	7ff00000 	.word	0x7ff00000
 8009ea4:	00000000 	.word	0x00000000

08009ea8 <__kernel_cos>:
 8009ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	ec57 6b10 	vmov	r6, r7, d0
 8009eb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009eb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009eb8:	ed8d 1b00 	vstr	d1, [sp]
 8009ebc:	da07      	bge.n	8009ece <__kernel_cos+0x26>
 8009ebe:	ee10 0a10 	vmov	r0, s0
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fdf8 	bl	8000ab8 <__aeabi_d2iz>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f000 8088 	beq.w	8009fde <__kernel_cos+0x136>
 8009ece:	4632      	mov	r2, r6
 8009ed0:	463b      	mov	r3, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fb3f 	bl	8000558 <__aeabi_dmul>
 8009eda:	4b51      	ldr	r3, [pc, #324]	; (800a020 <__kernel_cos+0x178>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	f7f6 fb39 	bl	8000558 <__aeabi_dmul>
 8009ee6:	a340      	add	r3, pc, #256	; (adr r3, 8009fe8 <__kernel_cos+0x140>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	4682      	mov	sl, r0
 8009eee:	468b      	mov	fp, r1
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	f7f6 fb30 	bl	8000558 <__aeabi_dmul>
 8009ef8:	a33d      	add	r3, pc, #244	; (adr r3, 8009ff0 <__kernel_cos+0x148>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f7f6 f975 	bl	80001ec <__adddf3>
 8009f02:	4622      	mov	r2, r4
 8009f04:	462b      	mov	r3, r5
 8009f06:	f7f6 fb27 	bl	8000558 <__aeabi_dmul>
 8009f0a:	a33b      	add	r3, pc, #236	; (adr r3, 8009ff8 <__kernel_cos+0x150>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 f96a 	bl	80001e8 <__aeabi_dsub>
 8009f14:	4622      	mov	r2, r4
 8009f16:	462b      	mov	r3, r5
 8009f18:	f7f6 fb1e 	bl	8000558 <__aeabi_dmul>
 8009f1c:	a338      	add	r3, pc, #224	; (adr r3, 800a000 <__kernel_cos+0x158>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 f963 	bl	80001ec <__adddf3>
 8009f26:	4622      	mov	r2, r4
 8009f28:	462b      	mov	r3, r5
 8009f2a:	f7f6 fb15 	bl	8000558 <__aeabi_dmul>
 8009f2e:	a336      	add	r3, pc, #216	; (adr r3, 800a008 <__kernel_cos+0x160>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 f958 	bl	80001e8 <__aeabi_dsub>
 8009f38:	4622      	mov	r2, r4
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	f7f6 fb0c 	bl	8000558 <__aeabi_dmul>
 8009f40:	a333      	add	r3, pc, #204	; (adr r3, 800a010 <__kernel_cos+0x168>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 f951 	bl	80001ec <__adddf3>
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	f7f6 fb03 	bl	8000558 <__aeabi_dmul>
 8009f52:	4622      	mov	r2, r4
 8009f54:	462b      	mov	r3, r5
 8009f56:	f7f6 faff 	bl	8000558 <__aeabi_dmul>
 8009f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	f7f6 faf7 	bl	8000558 <__aeabi_dmul>
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7f6 f939 	bl	80001e8 <__aeabi_dsub>
 8009f76:	4b2b      	ldr	r3, [pc, #172]	; (800a024 <__kernel_cos+0x17c>)
 8009f78:	4598      	cmp	r8, r3
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	dc10      	bgt.n	8009fa2 <__kernel_cos+0xfa>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4650      	mov	r0, sl
 8009f86:	4659      	mov	r1, fp
 8009f88:	f7f6 f92e 	bl	80001e8 <__aeabi_dsub>
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4926      	ldr	r1, [pc, #152]	; (800a028 <__kernel_cos+0x180>)
 8009f90:	4602      	mov	r2, r0
 8009f92:	2000      	movs	r0, #0
 8009f94:	f7f6 f928 	bl	80001e8 <__aeabi_dsub>
 8009f98:	ec41 0b10 	vmov	d0, r0, r1
 8009f9c:	b003      	add	sp, #12
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	4b22      	ldr	r3, [pc, #136]	; (800a02c <__kernel_cos+0x184>)
 8009fa4:	4920      	ldr	r1, [pc, #128]	; (800a028 <__kernel_cos+0x180>)
 8009fa6:	4598      	cmp	r8, r3
 8009fa8:	bfcc      	ite	gt
 8009faa:	4d21      	ldrgt	r5, [pc, #132]	; (800a030 <__kernel_cos+0x188>)
 8009fac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f7f6 f916 	bl	80001e8 <__aeabi_dsub>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4680      	mov	r8, r0
 8009fc0:	4689      	mov	r9, r1
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	4659      	mov	r1, fp
 8009fc8:	f7f6 f90e 	bl	80001e8 <__aeabi_dsub>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	f7f6 f90a 	bl	80001e8 <__aeabi_dsub>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	e7da      	b.n	8009f94 <__kernel_cos+0xec>
 8009fde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a018 <__kernel_cos+0x170>
 8009fe2:	e7db      	b.n	8009f9c <__kernel_cos+0xf4>
 8009fe4:	f3af 8000 	nop.w
 8009fe8:	be8838d4 	.word	0xbe8838d4
 8009fec:	bda8fae9 	.word	0xbda8fae9
 8009ff0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009ff4:	3e21ee9e 	.word	0x3e21ee9e
 8009ff8:	809c52ad 	.word	0x809c52ad
 8009ffc:	3e927e4f 	.word	0x3e927e4f
 800a000:	19cb1590 	.word	0x19cb1590
 800a004:	3efa01a0 	.word	0x3efa01a0
 800a008:	16c15177 	.word	0x16c15177
 800a00c:	3f56c16c 	.word	0x3f56c16c
 800a010:	5555554c 	.word	0x5555554c
 800a014:	3fa55555 	.word	0x3fa55555
 800a018:	00000000 	.word	0x00000000
 800a01c:	3ff00000 	.word	0x3ff00000
 800a020:	3fe00000 	.word	0x3fe00000
 800a024:	3fd33332 	.word	0x3fd33332
 800a028:	3ff00000 	.word	0x3ff00000
 800a02c:	3fe90000 	.word	0x3fe90000
 800a030:	3fd20000 	.word	0x3fd20000
 800a034:	00000000 	.word	0x00000000

0800a038 <__kernel_rem_pio2>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b02 	vpush	{d8}
 800a040:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a044:	f112 0f14 	cmn.w	r2, #20
 800a048:	9308      	str	r3, [sp, #32]
 800a04a:	9101      	str	r1, [sp, #4]
 800a04c:	4bc4      	ldr	r3, [pc, #784]	; (800a360 <__kernel_rem_pio2+0x328>)
 800a04e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a050:	900b      	str	r0, [sp, #44]	; 0x2c
 800a052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a056:	9302      	str	r3, [sp, #8]
 800a058:	9b08      	ldr	r3, [sp, #32]
 800a05a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a05e:	bfa8      	it	ge
 800a060:	1ed4      	subge	r4, r2, #3
 800a062:	9306      	str	r3, [sp, #24]
 800a064:	bfb2      	itee	lt
 800a066:	2400      	movlt	r4, #0
 800a068:	2318      	movge	r3, #24
 800a06a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a06e:	f06f 0317 	mvn.w	r3, #23
 800a072:	fb04 3303 	mla	r3, r4, r3, r3
 800a076:	eb03 0a02 	add.w	sl, r3, r2
 800a07a:	9b02      	ldr	r3, [sp, #8]
 800a07c:	9a06      	ldr	r2, [sp, #24]
 800a07e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a350 <__kernel_rem_pio2+0x318>
 800a082:	eb03 0802 	add.w	r8, r3, r2
 800a086:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a088:	1aa7      	subs	r7, r4, r2
 800a08a:	ae22      	add	r6, sp, #136	; 0x88
 800a08c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a090:	2500      	movs	r5, #0
 800a092:	4545      	cmp	r5, r8
 800a094:	dd13      	ble.n	800a0be <__kernel_rem_pio2+0x86>
 800a096:	9b08      	ldr	r3, [sp, #32]
 800a098:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a350 <__kernel_rem_pio2+0x318>
 800a09c:	aa22      	add	r2, sp, #136	; 0x88
 800a09e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a0a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	9b02      	ldr	r3, [sp, #8]
 800a0ac:	4598      	cmp	r8, r3
 800a0ae:	dc2f      	bgt.n	800a110 <__kernel_rem_pio2+0xd8>
 800a0b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a0b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a0b8:	462f      	mov	r7, r5
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	e01b      	b.n	800a0f6 <__kernel_rem_pio2+0xbe>
 800a0be:	42ef      	cmn	r7, r5
 800a0c0:	d407      	bmi.n	800a0d2 <__kernel_rem_pio2+0x9a>
 800a0c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a0c6:	f7f6 f9dd 	bl	8000484 <__aeabi_i2d>
 800a0ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a0ce:	3501      	adds	r5, #1
 800a0d0:	e7df      	b.n	800a092 <__kernel_rem_pio2+0x5a>
 800a0d2:	ec51 0b18 	vmov	r0, r1, d8
 800a0d6:	e7f8      	b.n	800a0ca <__kernel_rem_pio2+0x92>
 800a0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a0e0:	f7f6 fa3a 	bl	8000558 <__aeabi_dmul>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ec:	f7f6 f87e 	bl	80001ec <__adddf3>
 800a0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0f4:	3601      	adds	r6, #1
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	429e      	cmp	r6, r3
 800a0fa:	f1a7 0708 	sub.w	r7, r7, #8
 800a0fe:	ddeb      	ble.n	800a0d8 <__kernel_rem_pio2+0xa0>
 800a100:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a104:	f108 0801 	add.w	r8, r8, #1
 800a108:	ecab 7b02 	vstmia	fp!, {d7}
 800a10c:	3508      	adds	r5, #8
 800a10e:	e7cc      	b.n	800a0aa <__kernel_rem_pio2+0x72>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	aa0e      	add	r2, sp, #56	; 0x38
 800a114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a118:	930d      	str	r3, [sp, #52]	; 0x34
 800a11a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a11c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a120:	9c02      	ldr	r4, [sp, #8]
 800a122:	930c      	str	r3, [sp, #48]	; 0x30
 800a124:	00e3      	lsls	r3, r4, #3
 800a126:	930a      	str	r3, [sp, #40]	; 0x28
 800a128:	ab9a      	add	r3, sp, #616	; 0x268
 800a12a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a12e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a132:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a136:	ab72      	add	r3, sp, #456	; 0x1c8
 800a138:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a13c:	46c3      	mov	fp, r8
 800a13e:	46a1      	mov	r9, r4
 800a140:	f1b9 0f00 	cmp.w	r9, #0
 800a144:	f1a5 0508 	sub.w	r5, r5, #8
 800a148:	dc77      	bgt.n	800a23a <__kernel_rem_pio2+0x202>
 800a14a:	ec47 6b10 	vmov	d0, r6, r7
 800a14e:	4650      	mov	r0, sl
 800a150:	f000 fde6 	bl	800ad20 <scalbn>
 800a154:	ec57 6b10 	vmov	r6, r7, d0
 800a158:	2200      	movs	r2, #0
 800a15a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a15e:	ee10 0a10 	vmov	r0, s0
 800a162:	4639      	mov	r1, r7
 800a164:	f7f6 f9f8 	bl	8000558 <__aeabi_dmul>
 800a168:	ec41 0b10 	vmov	d0, r0, r1
 800a16c:	f000 fd58 	bl	800ac20 <floor>
 800a170:	4b7c      	ldr	r3, [pc, #496]	; (800a364 <__kernel_rem_pio2+0x32c>)
 800a172:	ec51 0b10 	vmov	r0, r1, d0
 800a176:	2200      	movs	r2, #0
 800a178:	f7f6 f9ee 	bl	8000558 <__aeabi_dmul>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 f830 	bl	80001e8 <__aeabi_dsub>
 800a188:	460f      	mov	r7, r1
 800a18a:	4606      	mov	r6, r0
 800a18c:	f7f6 fc94 	bl	8000ab8 <__aeabi_d2iz>
 800a190:	9004      	str	r0, [sp, #16]
 800a192:	f7f6 f977 	bl	8000484 <__aeabi_i2d>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 f823 	bl	80001e8 <__aeabi_dsub>
 800a1a2:	f1ba 0f00 	cmp.w	sl, #0
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	dd6d      	ble.n	800a288 <__kernel_rem_pio2+0x250>
 800a1ac:	1e62      	subs	r2, r4, #1
 800a1ae:	ab0e      	add	r3, sp, #56	; 0x38
 800a1b0:	9d04      	ldr	r5, [sp, #16]
 800a1b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a1b6:	f1ca 0118 	rsb	r1, sl, #24
 800a1ba:	fa40 f301 	asr.w	r3, r0, r1
 800a1be:	441d      	add	r5, r3
 800a1c0:	408b      	lsls	r3, r1
 800a1c2:	1ac0      	subs	r0, r0, r3
 800a1c4:	ab0e      	add	r3, sp, #56	; 0x38
 800a1c6:	9504      	str	r5, [sp, #16]
 800a1c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a1cc:	f1ca 0317 	rsb	r3, sl, #23
 800a1d0:	fa40 fb03 	asr.w	fp, r0, r3
 800a1d4:	f1bb 0f00 	cmp.w	fp, #0
 800a1d8:	dd65      	ble.n	800a2a6 <__kernel_rem_pio2+0x26e>
 800a1da:	9b04      	ldr	r3, [sp, #16]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	3301      	adds	r3, #1
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	4615      	mov	r5, r2
 800a1e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a1e8:	4294      	cmp	r4, r2
 800a1ea:	f300 809c 	bgt.w	800a326 <__kernel_rem_pio2+0x2ee>
 800a1ee:	f1ba 0f00 	cmp.w	sl, #0
 800a1f2:	dd07      	ble.n	800a204 <__kernel_rem_pio2+0x1cc>
 800a1f4:	f1ba 0f01 	cmp.w	sl, #1
 800a1f8:	f000 80c0 	beq.w	800a37c <__kernel_rem_pio2+0x344>
 800a1fc:	f1ba 0f02 	cmp.w	sl, #2
 800a200:	f000 80c6 	beq.w	800a390 <__kernel_rem_pio2+0x358>
 800a204:	f1bb 0f02 	cmp.w	fp, #2
 800a208:	d14d      	bne.n	800a2a6 <__kernel_rem_pio2+0x26e>
 800a20a:	4632      	mov	r2, r6
 800a20c:	463b      	mov	r3, r7
 800a20e:	4956      	ldr	r1, [pc, #344]	; (800a368 <__kernel_rem_pio2+0x330>)
 800a210:	2000      	movs	r0, #0
 800a212:	f7f5 ffe9 	bl	80001e8 <__aeabi_dsub>
 800a216:	4606      	mov	r6, r0
 800a218:	460f      	mov	r7, r1
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	d043      	beq.n	800a2a6 <__kernel_rem_pio2+0x26e>
 800a21e:	4650      	mov	r0, sl
 800a220:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a358 <__kernel_rem_pio2+0x320>
 800a224:	f000 fd7c 	bl	800ad20 <scalbn>
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	ec53 2b10 	vmov	r2, r3, d0
 800a230:	f7f5 ffda 	bl	80001e8 <__aeabi_dsub>
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	e035      	b.n	800a2a6 <__kernel_rem_pio2+0x26e>
 800a23a:	4b4c      	ldr	r3, [pc, #304]	; (800a36c <__kernel_rem_pio2+0x334>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 f989 	bl	8000558 <__aeabi_dmul>
 800a246:	f7f6 fc37 	bl	8000ab8 <__aeabi_d2iz>
 800a24a:	f7f6 f91b 	bl	8000484 <__aeabi_i2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	ec43 2b18 	vmov	d8, r2, r3
 800a256:	4b46      	ldr	r3, [pc, #280]	; (800a370 <__kernel_rem_pio2+0x338>)
 800a258:	2200      	movs	r2, #0
 800a25a:	f7f6 f97d 	bl	8000558 <__aeabi_dmul>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f5 ffbf 	bl	80001e8 <__aeabi_dsub>
 800a26a:	f7f6 fc25 	bl	8000ab8 <__aeabi_d2iz>
 800a26e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a272:	f84b 0b04 	str.w	r0, [fp], #4
 800a276:	ec51 0b18 	vmov	r0, r1, d8
 800a27a:	f7f5 ffb7 	bl	80001ec <__adddf3>
 800a27e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a282:	4606      	mov	r6, r0
 800a284:	460f      	mov	r7, r1
 800a286:	e75b      	b.n	800a140 <__kernel_rem_pio2+0x108>
 800a288:	d106      	bne.n	800a298 <__kernel_rem_pio2+0x260>
 800a28a:	1e63      	subs	r3, r4, #1
 800a28c:	aa0e      	add	r2, sp, #56	; 0x38
 800a28e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a292:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a296:	e79d      	b.n	800a1d4 <__kernel_rem_pio2+0x19c>
 800a298:	4b36      	ldr	r3, [pc, #216]	; (800a374 <__kernel_rem_pio2+0x33c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	f7f6 fbe2 	bl	8000a64 <__aeabi_dcmpge>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d13d      	bne.n	800a320 <__kernel_rem_pio2+0x2e8>
 800a2a4:	4683      	mov	fp, r0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f6 fbbb 	bl	8000a28 <__aeabi_dcmpeq>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f000 80c0 	beq.w	800a438 <__kernel_rem_pio2+0x400>
 800a2b8:	1e65      	subs	r5, r4, #1
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	2200      	movs	r2, #0
 800a2be:	9902      	ldr	r1, [sp, #8]
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	da6c      	bge.n	800a39e <__kernel_rem_pio2+0x366>
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	f000 8089 	beq.w	800a3dc <__kernel_rem_pio2+0x3a4>
 800a2ca:	ab0e      	add	r3, sp, #56	; 0x38
 800a2cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a2d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80ad 	beq.w	800a434 <__kernel_rem_pio2+0x3fc>
 800a2da:	4650      	mov	r0, sl
 800a2dc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a358 <__kernel_rem_pio2+0x320>
 800a2e0:	f000 fd1e 	bl	800ad20 <scalbn>
 800a2e4:	ab9a      	add	r3, sp, #616	; 0x268
 800a2e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2ea:	ec57 6b10 	vmov	r6, r7, d0
 800a2ee:	00ec      	lsls	r4, r5, #3
 800a2f0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a2f4:	46aa      	mov	sl, r5
 800a2f6:	f1ba 0f00 	cmp.w	sl, #0
 800a2fa:	f280 80d6 	bge.w	800a4aa <__kernel_rem_pio2+0x472>
 800a2fe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a350 <__kernel_rem_pio2+0x318>
 800a302:	462e      	mov	r6, r5
 800a304:	2e00      	cmp	r6, #0
 800a306:	f2c0 8104 	blt.w	800a512 <__kernel_rem_pio2+0x4da>
 800a30a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a30c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a310:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a378 <__kernel_rem_pio2+0x340>
 800a314:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a318:	f04f 0800 	mov.w	r8, #0
 800a31c:	1baf      	subs	r7, r5, r6
 800a31e:	e0ea      	b.n	800a4f6 <__kernel_rem_pio2+0x4be>
 800a320:	f04f 0b02 	mov.w	fp, #2
 800a324:	e759      	b.n	800a1da <__kernel_rem_pio2+0x1a2>
 800a326:	f8d8 3000 	ldr.w	r3, [r8]
 800a32a:	b955      	cbnz	r5, 800a342 <__kernel_rem_pio2+0x30a>
 800a32c:	b123      	cbz	r3, 800a338 <__kernel_rem_pio2+0x300>
 800a32e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a332:	f8c8 3000 	str.w	r3, [r8]
 800a336:	2301      	movs	r3, #1
 800a338:	3201      	adds	r2, #1
 800a33a:	f108 0804 	add.w	r8, r8, #4
 800a33e:	461d      	mov	r5, r3
 800a340:	e752      	b.n	800a1e8 <__kernel_rem_pio2+0x1b0>
 800a342:	1acb      	subs	r3, r1, r3
 800a344:	f8c8 3000 	str.w	r3, [r8]
 800a348:	462b      	mov	r3, r5
 800a34a:	e7f5      	b.n	800a338 <__kernel_rem_pio2+0x300>
 800a34c:	f3af 8000 	nop.w
	...
 800a35c:	3ff00000 	.word	0x3ff00000
 800a360:	0800b248 	.word	0x0800b248
 800a364:	40200000 	.word	0x40200000
 800a368:	3ff00000 	.word	0x3ff00000
 800a36c:	3e700000 	.word	0x3e700000
 800a370:	41700000 	.word	0x41700000
 800a374:	3fe00000 	.word	0x3fe00000
 800a378:	0800b208 	.word	0x0800b208
 800a37c:	1e62      	subs	r2, r4, #1
 800a37e:	ab0e      	add	r3, sp, #56	; 0x38
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a388:	a90e      	add	r1, sp, #56	; 0x38
 800a38a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a38e:	e739      	b.n	800a204 <__kernel_rem_pio2+0x1cc>
 800a390:	1e62      	subs	r2, r4, #1
 800a392:	ab0e      	add	r3, sp, #56	; 0x38
 800a394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a398:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a39c:	e7f4      	b.n	800a388 <__kernel_rem_pio2+0x350>
 800a39e:	a90e      	add	r1, sp, #56	; 0x38
 800a3a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	e789      	b.n	800a2be <__kernel_rem_pio2+0x286>
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d0fa      	beq.n	800a3aa <__kernel_rem_pio2+0x372>
 800a3b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a3ba:	446a      	add	r2, sp
 800a3bc:	3a98      	subs	r2, #152	; 0x98
 800a3be:	920a      	str	r2, [sp, #40]	; 0x28
 800a3c0:	9a08      	ldr	r2, [sp, #32]
 800a3c2:	18e3      	adds	r3, r4, r3
 800a3c4:	18a5      	adds	r5, r4, r2
 800a3c6:	aa22      	add	r2, sp, #136	; 0x88
 800a3c8:	f104 0801 	add.w	r8, r4, #1
 800a3cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	4543      	cmp	r3, r8
 800a3d6:	da04      	bge.n	800a3e2 <__kernel_rem_pio2+0x3aa>
 800a3d8:	461c      	mov	r4, r3
 800a3da:	e6a3      	b.n	800a124 <__kernel_rem_pio2+0xec>
 800a3dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7e4      	b.n	800a3ac <__kernel_rem_pio2+0x374>
 800a3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a3e8:	f7f6 f84c 	bl	8000484 <__aeabi_i2d>
 800a3ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f2:	46ab      	mov	fp, r5
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	2700      	movs	r7, #0
 800a3fe:	9b06      	ldr	r3, [sp, #24]
 800a400:	4599      	cmp	r9, r3
 800a402:	dd06      	ble.n	800a412 <__kernel_rem_pio2+0x3da>
 800a404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a406:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a40a:	f108 0801 	add.w	r8, r8, #1
 800a40e:	930a      	str	r3, [sp, #40]	; 0x28
 800a410:	e7df      	b.n	800a3d2 <__kernel_rem_pio2+0x39a>
 800a412:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a416:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a41a:	f7f6 f89d 	bl	8000558 <__aeabi_dmul>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f5 fee1 	bl	80001ec <__adddf3>
 800a42a:	f109 0901 	add.w	r9, r9, #1
 800a42e:	4606      	mov	r6, r0
 800a430:	460f      	mov	r7, r1
 800a432:	e7e4      	b.n	800a3fe <__kernel_rem_pio2+0x3c6>
 800a434:	3d01      	subs	r5, #1
 800a436:	e748      	b.n	800a2ca <__kernel_rem_pio2+0x292>
 800a438:	ec47 6b10 	vmov	d0, r6, r7
 800a43c:	f1ca 0000 	rsb	r0, sl, #0
 800a440:	f000 fc6e 	bl	800ad20 <scalbn>
 800a444:	ec57 6b10 	vmov	r6, r7, d0
 800a448:	4ba0      	ldr	r3, [pc, #640]	; (800a6cc <__kernel_rem_pio2+0x694>)
 800a44a:	ee10 0a10 	vmov	r0, s0
 800a44e:	2200      	movs	r2, #0
 800a450:	4639      	mov	r1, r7
 800a452:	f7f6 fb07 	bl	8000a64 <__aeabi_dcmpge>
 800a456:	b1f8      	cbz	r0, 800a498 <__kernel_rem_pio2+0x460>
 800a458:	4b9d      	ldr	r3, [pc, #628]	; (800a6d0 <__kernel_rem_pio2+0x698>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	4630      	mov	r0, r6
 800a45e:	4639      	mov	r1, r7
 800a460:	f7f6 f87a 	bl	8000558 <__aeabi_dmul>
 800a464:	f7f6 fb28 	bl	8000ab8 <__aeabi_d2iz>
 800a468:	4680      	mov	r8, r0
 800a46a:	f7f6 f80b 	bl	8000484 <__aeabi_i2d>
 800a46e:	4b97      	ldr	r3, [pc, #604]	; (800a6cc <__kernel_rem_pio2+0x694>)
 800a470:	2200      	movs	r2, #0
 800a472:	f7f6 f871 	bl	8000558 <__aeabi_dmul>
 800a476:	460b      	mov	r3, r1
 800a478:	4602      	mov	r2, r0
 800a47a:	4639      	mov	r1, r7
 800a47c:	4630      	mov	r0, r6
 800a47e:	f7f5 feb3 	bl	80001e8 <__aeabi_dsub>
 800a482:	f7f6 fb19 	bl	8000ab8 <__aeabi_d2iz>
 800a486:	1c65      	adds	r5, r4, #1
 800a488:	ab0e      	add	r3, sp, #56	; 0x38
 800a48a:	f10a 0a18 	add.w	sl, sl, #24
 800a48e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a492:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a496:	e720      	b.n	800a2da <__kernel_rem_pio2+0x2a2>
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 fb0c 	bl	8000ab8 <__aeabi_d2iz>
 800a4a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a4a2:	4625      	mov	r5, r4
 800a4a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4a8:	e717      	b.n	800a2da <__kernel_rem_pio2+0x2a2>
 800a4aa:	ab0e      	add	r3, sp, #56	; 0x38
 800a4ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a4b0:	f7f5 ffe8 	bl	8000484 <__aeabi_i2d>
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	f7f6 f84e 	bl	8000558 <__aeabi_dmul>
 800a4bc:	4b84      	ldr	r3, [pc, #528]	; (800a6d0 <__kernel_rem_pio2+0x698>)
 800a4be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	f7f6 f846 	bl	8000558 <__aeabi_dmul>
 800a4cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	460f      	mov	r7, r1
 800a4d4:	e70f      	b.n	800a2f6 <__kernel_rem_pio2+0x2be>
 800a4d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a4da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a4de:	f7f6 f83b 	bl	8000558 <__aeabi_dmul>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4ea:	f7f5 fe7f 	bl	80001ec <__adddf3>
 800a4ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4f2:	f108 0801 	add.w	r8, r8, #1
 800a4f6:	9b02      	ldr	r3, [sp, #8]
 800a4f8:	4598      	cmp	r8, r3
 800a4fa:	dc01      	bgt.n	800a500 <__kernel_rem_pio2+0x4c8>
 800a4fc:	45b8      	cmp	r8, r7
 800a4fe:	ddea      	ble.n	800a4d6 <__kernel_rem_pio2+0x49e>
 800a500:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a504:	ab4a      	add	r3, sp, #296	; 0x128
 800a506:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a50a:	ed87 7b00 	vstr	d7, [r7]
 800a50e:	3e01      	subs	r6, #1
 800a510:	e6f8      	b.n	800a304 <__kernel_rem_pio2+0x2cc>
 800a512:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a514:	2b02      	cmp	r3, #2
 800a516:	dc0b      	bgt.n	800a530 <__kernel_rem_pio2+0x4f8>
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dc35      	bgt.n	800a588 <__kernel_rem_pio2+0x550>
 800a51c:	d059      	beq.n	800a5d2 <__kernel_rem_pio2+0x59a>
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	f003 0007 	and.w	r0, r3, #7
 800a524:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a528:	ecbd 8b02 	vpop	{d8}
 800a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a530:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a532:	2b03      	cmp	r3, #3
 800a534:	d1f3      	bne.n	800a51e <__kernel_rem_pio2+0x4e6>
 800a536:	ab4a      	add	r3, sp, #296	; 0x128
 800a538:	4423      	add	r3, r4
 800a53a:	9306      	str	r3, [sp, #24]
 800a53c:	461c      	mov	r4, r3
 800a53e:	469a      	mov	sl, r3
 800a540:	9502      	str	r5, [sp, #8]
 800a542:	9b02      	ldr	r3, [sp, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f1aa 0a08 	sub.w	sl, sl, #8
 800a54a:	dc6b      	bgt.n	800a624 <__kernel_rem_pio2+0x5ec>
 800a54c:	46aa      	mov	sl, r5
 800a54e:	f1ba 0f01 	cmp.w	sl, #1
 800a552:	f1a4 0408 	sub.w	r4, r4, #8
 800a556:	f300 8085 	bgt.w	800a664 <__kernel_rem_pio2+0x62c>
 800a55a:	9c06      	ldr	r4, [sp, #24]
 800a55c:	2000      	movs	r0, #0
 800a55e:	3408      	adds	r4, #8
 800a560:	2100      	movs	r1, #0
 800a562:	2d01      	cmp	r5, #1
 800a564:	f300 809d 	bgt.w	800a6a2 <__kernel_rem_pio2+0x66a>
 800a568:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a56c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a570:	f1bb 0f00 	cmp.w	fp, #0
 800a574:	f040 809b 	bne.w	800a6ae <__kernel_rem_pio2+0x676>
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	e9c3 5600 	strd	r5, r6, [r3]
 800a57e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a582:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a586:	e7ca      	b.n	800a51e <__kernel_rem_pio2+0x4e6>
 800a588:	3408      	adds	r4, #8
 800a58a:	ab4a      	add	r3, sp, #296	; 0x128
 800a58c:	441c      	add	r4, r3
 800a58e:	462e      	mov	r6, r5
 800a590:	2000      	movs	r0, #0
 800a592:	2100      	movs	r1, #0
 800a594:	2e00      	cmp	r6, #0
 800a596:	da36      	bge.n	800a606 <__kernel_rem_pio2+0x5ce>
 800a598:	f1bb 0f00 	cmp.w	fp, #0
 800a59c:	d039      	beq.n	800a612 <__kernel_rem_pio2+0x5da>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5a4:	9c01      	ldr	r4, [sp, #4]
 800a5a6:	e9c4 2300 	strd	r2, r3, [r4]
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a5b2:	f7f5 fe19 	bl	80001e8 <__aeabi_dsub>
 800a5b6:	ae4c      	add	r6, sp, #304	; 0x130
 800a5b8:	2401      	movs	r4, #1
 800a5ba:	42a5      	cmp	r5, r4
 800a5bc:	da2c      	bge.n	800a618 <__kernel_rem_pio2+0x5e0>
 800a5be:	f1bb 0f00 	cmp.w	fp, #0
 800a5c2:	d002      	beq.n	800a5ca <__kernel_rem_pio2+0x592>
 800a5c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a5d0:	e7a5      	b.n	800a51e <__kernel_rem_pio2+0x4e6>
 800a5d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a5d6:	eb0d 0403 	add.w	r4, sp, r3
 800a5da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a5de:	2000      	movs	r0, #0
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	da09      	bge.n	800a5fa <__kernel_rem_pio2+0x5c2>
 800a5e6:	f1bb 0f00 	cmp.w	fp, #0
 800a5ea:	d002      	beq.n	800a5f2 <__kernel_rem_pio2+0x5ba>
 800a5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	e9c3 0100 	strd	r0, r1, [r3]
 800a5f8:	e791      	b.n	800a51e <__kernel_rem_pio2+0x4e6>
 800a5fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a5fe:	f7f5 fdf5 	bl	80001ec <__adddf3>
 800a602:	3d01      	subs	r5, #1
 800a604:	e7ed      	b.n	800a5e2 <__kernel_rem_pio2+0x5aa>
 800a606:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a60a:	f7f5 fdef 	bl	80001ec <__adddf3>
 800a60e:	3e01      	subs	r6, #1
 800a610:	e7c0      	b.n	800a594 <__kernel_rem_pio2+0x55c>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	e7c5      	b.n	800a5a4 <__kernel_rem_pio2+0x56c>
 800a618:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a61c:	f7f5 fde6 	bl	80001ec <__adddf3>
 800a620:	3401      	adds	r4, #1
 800a622:	e7ca      	b.n	800a5ba <__kernel_rem_pio2+0x582>
 800a624:	e9da 8900 	ldrd	r8, r9, [sl]
 800a628:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a62c:	9b02      	ldr	r3, [sp, #8]
 800a62e:	3b01      	subs	r3, #1
 800a630:	9302      	str	r3, [sp, #8]
 800a632:	4632      	mov	r2, r6
 800a634:	463b      	mov	r3, r7
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f5 fdd7 	bl	80001ec <__adddf3>
 800a63e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fdcd 	bl	80001e8 <__aeabi_dsub>
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	f7f5 fdcb 	bl	80001ec <__adddf3>
 800a656:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a65a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a65e:	ed8a 7b00 	vstr	d7, [sl]
 800a662:	e76e      	b.n	800a542 <__kernel_rem_pio2+0x50a>
 800a664:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a668:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a66c:	4640      	mov	r0, r8
 800a66e:	4632      	mov	r2, r6
 800a670:	463b      	mov	r3, r7
 800a672:	4649      	mov	r1, r9
 800a674:	f7f5 fdba 	bl	80001ec <__adddf3>
 800a678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f5 fdb0 	bl	80001e8 <__aeabi_dsub>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	f7f5 fdae 	bl	80001ec <__adddf3>
 800a690:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a694:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a698:	ed84 7b00 	vstr	d7, [r4]
 800a69c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6a0:	e755      	b.n	800a54e <__kernel_rem_pio2+0x516>
 800a6a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a6a6:	f7f5 fda1 	bl	80001ec <__adddf3>
 800a6aa:	3d01      	subs	r5, #1
 800a6ac:	e759      	b.n	800a562 <__kernel_rem_pio2+0x52a>
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	9a01      	ldr	r2, [sp, #4]
 800a6b2:	601d      	str	r5, [r3, #0]
 800a6b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a6b8:	605c      	str	r4, [r3, #4]
 800a6ba:	609f      	str	r7, [r3, #8]
 800a6bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a6c0:	60d3      	str	r3, [r2, #12]
 800a6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6c6:	6110      	str	r0, [r2, #16]
 800a6c8:	6153      	str	r3, [r2, #20]
 800a6ca:	e728      	b.n	800a51e <__kernel_rem_pio2+0x4e6>
 800a6cc:	41700000 	.word	0x41700000
 800a6d0:	3e700000 	.word	0x3e700000
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <__kernel_sin>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	ed2d 8b04 	vpush	{d8-d9}
 800a6e0:	eeb0 8a41 	vmov.f32	s16, s2
 800a6e4:	eef0 8a61 	vmov.f32	s17, s3
 800a6e8:	ec55 4b10 	vmov	r4, r5, d0
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a6f6:	9001      	str	r0, [sp, #4]
 800a6f8:	da06      	bge.n	800a708 <__kernel_sin+0x30>
 800a6fa:	ee10 0a10 	vmov	r0, s0
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f6 f9da 	bl	8000ab8 <__aeabi_d2iz>
 800a704:	2800      	cmp	r0, #0
 800a706:	d051      	beq.n	800a7ac <__kernel_sin+0xd4>
 800a708:	4622      	mov	r2, r4
 800a70a:	462b      	mov	r3, r5
 800a70c:	4620      	mov	r0, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	f7f5 ff22 	bl	8000558 <__aeabi_dmul>
 800a714:	4682      	mov	sl, r0
 800a716:	468b      	mov	fp, r1
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 ff1a 	bl	8000558 <__aeabi_dmul>
 800a724:	a341      	add	r3, pc, #260	; (adr r3, 800a82c <__kernel_sin+0x154>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	4680      	mov	r8, r0
 800a72c:	4689      	mov	r9, r1
 800a72e:	4650      	mov	r0, sl
 800a730:	4659      	mov	r1, fp
 800a732:	f7f5 ff11 	bl	8000558 <__aeabi_dmul>
 800a736:	a33f      	add	r3, pc, #252	; (adr r3, 800a834 <__kernel_sin+0x15c>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f7f5 fd54 	bl	80001e8 <__aeabi_dsub>
 800a740:	4652      	mov	r2, sl
 800a742:	465b      	mov	r3, fp
 800a744:	f7f5 ff08 	bl	8000558 <__aeabi_dmul>
 800a748:	a33c      	add	r3, pc, #240	; (adr r3, 800a83c <__kernel_sin+0x164>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f7f5 fd4d 	bl	80001ec <__adddf3>
 800a752:	4652      	mov	r2, sl
 800a754:	465b      	mov	r3, fp
 800a756:	f7f5 feff 	bl	8000558 <__aeabi_dmul>
 800a75a:	a33a      	add	r3, pc, #232	; (adr r3, 800a844 <__kernel_sin+0x16c>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f5 fd42 	bl	80001e8 <__aeabi_dsub>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	f7f5 fef6 	bl	8000558 <__aeabi_dmul>
 800a76c:	a337      	add	r3, pc, #220	; (adr r3, 800a84c <__kernel_sin+0x174>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f7f5 fd3b 	bl	80001ec <__adddf3>
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	4606      	mov	r6, r0
 800a77a:	460f      	mov	r7, r1
 800a77c:	b9eb      	cbnz	r3, 800a7ba <__kernel_sin+0xe2>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4650      	mov	r0, sl
 800a784:	4659      	mov	r1, fp
 800a786:	f7f5 fee7 	bl	8000558 <__aeabi_dmul>
 800a78a:	a325      	add	r3, pc, #148	; (adr r3, 800a820 <__kernel_sin+0x148>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 fd2a 	bl	80001e8 <__aeabi_dsub>
 800a794:	4642      	mov	r2, r8
 800a796:	464b      	mov	r3, r9
 800a798:	f7f5 fede 	bl	8000558 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fd22 	bl	80001ec <__adddf3>
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	ec45 4b10 	vmov	d0, r4, r5
 800a7b0:	b003      	add	sp, #12
 800a7b2:	ecbd 8b04 	vpop	{d8-d9}
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ba:	4b1b      	ldr	r3, [pc, #108]	; (800a828 <__kernel_sin+0x150>)
 800a7bc:	ec51 0b18 	vmov	r0, r1, d8
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f7f5 fec9 	bl	8000558 <__aeabi_dmul>
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	ec41 0b19 	vmov	d9, r0, r1
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	f7f5 fec1 	bl	8000558 <__aeabi_dmul>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	ec51 0b19 	vmov	r0, r1, d9
 800a7de:	f7f5 fd03 	bl	80001e8 <__aeabi_dsub>
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	465b      	mov	r3, fp
 800a7e6:	f7f5 feb7 	bl	8000558 <__aeabi_dmul>
 800a7ea:	ec53 2b18 	vmov	r2, r3, d8
 800a7ee:	f7f5 fcfb 	bl	80001e8 <__aeabi_dsub>
 800a7f2:	a30b      	add	r3, pc, #44	; (adr r3, 800a820 <__kernel_sin+0x148>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	4649      	mov	r1, r9
 800a800:	f7f5 feaa 	bl	8000558 <__aeabi_dmul>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f5 fcee 	bl	80001ec <__adddf3>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f5 fce6 	bl	80001e8 <__aeabi_dsub>
 800a81c:	e7c4      	b.n	800a7a8 <__kernel_sin+0xd0>
 800a81e:	bf00      	nop
 800a820:	55555549 	.word	0x55555549
 800a824:	3fc55555 	.word	0x3fc55555
 800a828:	3fe00000 	.word	0x3fe00000
 800a82c:	5acfd57c 	.word	0x5acfd57c
 800a830:	3de5d93a 	.word	0x3de5d93a
 800a834:	8a2b9ceb 	.word	0x8a2b9ceb
 800a838:	3e5ae5e6 	.word	0x3e5ae5e6
 800a83c:	57b1fe7d 	.word	0x57b1fe7d
 800a840:	3ec71de3 	.word	0x3ec71de3
 800a844:	19c161d5 	.word	0x19c161d5
 800a848:	3f2a01a0 	.word	0x3f2a01a0
 800a84c:	1110f8a6 	.word	0x1110f8a6
 800a850:	3f811111 	.word	0x3f811111

0800a854 <with_errno>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	4616      	mov	r6, r2
 800a85c:	f7fe f8be 	bl	80089dc <__errno>
 800a860:	4629      	mov	r1, r5
 800a862:	6006      	str	r6, [r0, #0]
 800a864:	4620      	mov	r0, r4
 800a866:	bd70      	pop	{r4, r5, r6, pc}

0800a868 <xflow>:
 800a868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a86a:	4614      	mov	r4, r2
 800a86c:	461d      	mov	r5, r3
 800a86e:	b108      	cbz	r0, 800a874 <xflow+0xc>
 800a870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a874:	e9cd 2300 	strd	r2, r3, [sp]
 800a878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fe6a 	bl	8000558 <__aeabi_dmul>
 800a884:	2222      	movs	r2, #34	; 0x22
 800a886:	b003      	add	sp, #12
 800a888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a88c:	f7ff bfe2 	b.w	800a854 <with_errno>

0800a890 <__math_uflow>:
 800a890:	b508      	push	{r3, lr}
 800a892:	2200      	movs	r2, #0
 800a894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a898:	f7ff ffe6 	bl	800a868 <xflow>
 800a89c:	ec41 0b10 	vmov	d0, r0, r1
 800a8a0:	bd08      	pop	{r3, pc}

0800a8a2 <__math_oflow>:
 800a8a2:	b508      	push	{r3, lr}
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a8aa:	f7ff ffdd 	bl	800a868 <xflow>
 800a8ae:	ec41 0b10 	vmov	d0, r0, r1
 800a8b2:	bd08      	pop	{r3, pc}
 800a8b4:	0000      	movs	r0, r0
	...

0800a8b8 <atan>:
 800a8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	ec55 4b10 	vmov	r4, r5, d0
 800a8c0:	4bc3      	ldr	r3, [pc, #780]	; (800abd0 <atan+0x318>)
 800a8c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8c6:	429e      	cmp	r6, r3
 800a8c8:	46ab      	mov	fp, r5
 800a8ca:	dd18      	ble.n	800a8fe <atan+0x46>
 800a8cc:	4bc1      	ldr	r3, [pc, #772]	; (800abd4 <atan+0x31c>)
 800a8ce:	429e      	cmp	r6, r3
 800a8d0:	dc01      	bgt.n	800a8d6 <atan+0x1e>
 800a8d2:	d109      	bne.n	800a8e8 <atan+0x30>
 800a8d4:	b144      	cbz	r4, 800a8e8 <atan+0x30>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	462b      	mov	r3, r5
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f5 fc85 	bl	80001ec <__adddf3>
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	e006      	b.n	800a8f6 <atan+0x3e>
 800a8e8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ec:	f300 8131 	bgt.w	800ab52 <atan+0x29a>
 800a8f0:	a59b      	add	r5, pc, #620	; (adr r5, 800ab60 <atan+0x2a8>)
 800a8f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8f6:	ec45 4b10 	vmov	d0, r4, r5
 800a8fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fe:	4bb6      	ldr	r3, [pc, #728]	; (800abd8 <atan+0x320>)
 800a900:	429e      	cmp	r6, r3
 800a902:	dc14      	bgt.n	800a92e <atan+0x76>
 800a904:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a908:	429e      	cmp	r6, r3
 800a90a:	dc0d      	bgt.n	800a928 <atan+0x70>
 800a90c:	a396      	add	r3, pc, #600	; (adr r3, 800ab68 <atan+0x2b0>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	ee10 0a10 	vmov	r0, s0
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fc68 	bl	80001ec <__adddf3>
 800a91c:	4baf      	ldr	r3, [pc, #700]	; (800abdc <atan+0x324>)
 800a91e:	2200      	movs	r2, #0
 800a920:	f7f6 f8aa 	bl	8000a78 <__aeabi_dcmpgt>
 800a924:	2800      	cmp	r0, #0
 800a926:	d1e6      	bne.n	800a8f6 <atan+0x3e>
 800a928:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a92c:	e02b      	b.n	800a986 <atan+0xce>
 800a92e:	f000 f963 	bl	800abf8 <fabs>
 800a932:	4bab      	ldr	r3, [pc, #684]	; (800abe0 <atan+0x328>)
 800a934:	429e      	cmp	r6, r3
 800a936:	ec55 4b10 	vmov	r4, r5, d0
 800a93a:	f300 80bf 	bgt.w	800aabc <atan+0x204>
 800a93e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a942:	429e      	cmp	r6, r3
 800a944:	f300 80a0 	bgt.w	800aa88 <atan+0x1d0>
 800a948:	ee10 2a10 	vmov	r2, s0
 800a94c:	ee10 0a10 	vmov	r0, s0
 800a950:	462b      	mov	r3, r5
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fc4a 	bl	80001ec <__adddf3>
 800a958:	4ba0      	ldr	r3, [pc, #640]	; (800abdc <atan+0x324>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fc44 	bl	80001e8 <__aeabi_dsub>
 800a960:	2200      	movs	r2, #0
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a96a:	4620      	mov	r0, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	f7f5 fc3d 	bl	80001ec <__adddf3>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4630      	mov	r0, r6
 800a978:	4639      	mov	r1, r7
 800a97a:	f7f5 ff17 	bl	80007ac <__aeabi_ddiv>
 800a97e:	f04f 0a00 	mov.w	sl, #0
 800a982:	4604      	mov	r4, r0
 800a984:	460d      	mov	r5, r1
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f5 fde3 	bl	8000558 <__aeabi_dmul>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4680      	mov	r8, r0
 800a998:	4689      	mov	r9, r1
 800a99a:	f7f5 fddd 	bl	8000558 <__aeabi_dmul>
 800a99e:	a374      	add	r3, pc, #464	; (adr r3, 800ab70 <atan+0x2b8>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	460f      	mov	r7, r1
 800a9a8:	f7f5 fdd6 	bl	8000558 <__aeabi_dmul>
 800a9ac:	a372      	add	r3, pc, #456	; (adr r3, 800ab78 <atan+0x2c0>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 fc1b 	bl	80001ec <__adddf3>
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f5 fdcd 	bl	8000558 <__aeabi_dmul>
 800a9be:	a370      	add	r3, pc, #448	; (adr r3, 800ab80 <atan+0x2c8>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fc12 	bl	80001ec <__adddf3>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f7f5 fdc4 	bl	8000558 <__aeabi_dmul>
 800a9d0:	a36d      	add	r3, pc, #436	; (adr r3, 800ab88 <atan+0x2d0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fc09 	bl	80001ec <__adddf3>
 800a9da:	4632      	mov	r2, r6
 800a9dc:	463b      	mov	r3, r7
 800a9de:	f7f5 fdbb 	bl	8000558 <__aeabi_dmul>
 800a9e2:	a36b      	add	r3, pc, #428	; (adr r3, 800ab90 <atan+0x2d8>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 fc00 	bl	80001ec <__adddf3>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	f7f5 fdb2 	bl	8000558 <__aeabi_dmul>
 800a9f4:	a368      	add	r3, pc, #416	; (adr r3, 800ab98 <atan+0x2e0>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fbf7 	bl	80001ec <__adddf3>
 800a9fe:	4642      	mov	r2, r8
 800aa00:	464b      	mov	r3, r9
 800aa02:	f7f5 fda9 	bl	8000558 <__aeabi_dmul>
 800aa06:	a366      	add	r3, pc, #408	; (adr r3, 800aba0 <atan+0x2e8>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f5 fda0 	bl	8000558 <__aeabi_dmul>
 800aa18:	a363      	add	r3, pc, #396	; (adr r3, 800aba8 <atan+0x2f0>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fbe3 	bl	80001e8 <__aeabi_dsub>
 800aa22:	4632      	mov	r2, r6
 800aa24:	463b      	mov	r3, r7
 800aa26:	f7f5 fd97 	bl	8000558 <__aeabi_dmul>
 800aa2a:	a361      	add	r3, pc, #388	; (adr r3, 800abb0 <atan+0x2f8>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fbda 	bl	80001e8 <__aeabi_dsub>
 800aa34:	4632      	mov	r2, r6
 800aa36:	463b      	mov	r3, r7
 800aa38:	f7f5 fd8e 	bl	8000558 <__aeabi_dmul>
 800aa3c:	a35e      	add	r3, pc, #376	; (adr r3, 800abb8 <atan+0x300>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fbd1 	bl	80001e8 <__aeabi_dsub>
 800aa46:	4632      	mov	r2, r6
 800aa48:	463b      	mov	r3, r7
 800aa4a:	f7f5 fd85 	bl	8000558 <__aeabi_dmul>
 800aa4e:	a35c      	add	r3, pc, #368	; (adr r3, 800abc0 <atan+0x308>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fbc8 	bl	80001e8 <__aeabi_dsub>
 800aa58:	4632      	mov	r2, r6
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	f7f5 fd7c 	bl	8000558 <__aeabi_dmul>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4640      	mov	r0, r8
 800aa66:	4649      	mov	r1, r9
 800aa68:	f7f5 fbc0 	bl	80001ec <__adddf3>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	462b      	mov	r3, r5
 800aa70:	f7f5 fd72 	bl	8000558 <__aeabi_dmul>
 800aa74:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	d14b      	bne.n	800ab16 <atan+0x25e>
 800aa7e:	4620      	mov	r0, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f5 fbb1 	bl	80001e8 <__aeabi_dsub>
 800aa86:	e72c      	b.n	800a8e2 <atan+0x2a>
 800aa88:	ee10 0a10 	vmov	r0, s0
 800aa8c:	4b53      	ldr	r3, [pc, #332]	; (800abdc <atan+0x324>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7f5 fba9 	bl	80001e8 <__aeabi_dsub>
 800aa96:	4b51      	ldr	r3, [pc, #324]	; (800abdc <atan+0x324>)
 800aa98:	4606      	mov	r6, r0
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f7f5 fba3 	bl	80001ec <__adddf3>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4630      	mov	r0, r6
 800aaac:	4639      	mov	r1, r7
 800aaae:	f7f5 fe7d 	bl	80007ac <__aeabi_ddiv>
 800aab2:	f04f 0a01 	mov.w	sl, #1
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	e764      	b.n	800a986 <atan+0xce>
 800aabc:	4b49      	ldr	r3, [pc, #292]	; (800abe4 <atan+0x32c>)
 800aabe:	429e      	cmp	r6, r3
 800aac0:	da1d      	bge.n	800aafe <atan+0x246>
 800aac2:	ee10 0a10 	vmov	r0, s0
 800aac6:	4b48      	ldr	r3, [pc, #288]	; (800abe8 <atan+0x330>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fb8c 	bl	80001e8 <__aeabi_dsub>
 800aad0:	4b45      	ldr	r3, [pc, #276]	; (800abe8 <atan+0x330>)
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	2200      	movs	r2, #0
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fd3c 	bl	8000558 <__aeabi_dmul>
 800aae0:	4b3e      	ldr	r3, [pc, #248]	; (800abdc <atan+0x324>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fb82 	bl	80001ec <__adddf3>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f5 fe5c 	bl	80007ac <__aeabi_ddiv>
 800aaf4:	f04f 0a02 	mov.w	sl, #2
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	e743      	b.n	800a986 <atan+0xce>
 800aafe:	462b      	mov	r3, r5
 800ab00:	ee10 2a10 	vmov	r2, s0
 800ab04:	4939      	ldr	r1, [pc, #228]	; (800abec <atan+0x334>)
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7f5 fe50 	bl	80007ac <__aeabi_ddiv>
 800ab0c:	f04f 0a03 	mov.w	sl, #3
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	e737      	b.n	800a986 <atan+0xce>
 800ab16:	4b36      	ldr	r3, [pc, #216]	; (800abf0 <atan+0x338>)
 800ab18:	4e36      	ldr	r6, [pc, #216]	; (800abf4 <atan+0x33c>)
 800ab1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ab1e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ab22:	e9da 2300 	ldrd	r2, r3, [sl]
 800ab26:	f7f5 fb5f 	bl	80001e8 <__aeabi_dsub>
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	f7f5 fb5b 	bl	80001e8 <__aeabi_dsub>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ab3a:	f7f5 fb55 	bl	80001e8 <__aeabi_dsub>
 800ab3e:	f1bb 0f00 	cmp.w	fp, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	f6bf aed6 	bge.w	800a8f6 <atan+0x3e>
 800ab4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab4e:	461d      	mov	r5, r3
 800ab50:	e6d1      	b.n	800a8f6 <atan+0x3e>
 800ab52:	a51d      	add	r5, pc, #116	; (adr r5, 800abc8 <atan+0x310>)
 800ab54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ab58:	e6cd      	b.n	800a8f6 <atan+0x3e>
 800ab5a:	bf00      	nop
 800ab5c:	f3af 8000 	nop.w
 800ab60:	54442d18 	.word	0x54442d18
 800ab64:	bff921fb 	.word	0xbff921fb
 800ab68:	8800759c 	.word	0x8800759c
 800ab6c:	7e37e43c 	.word	0x7e37e43c
 800ab70:	e322da11 	.word	0xe322da11
 800ab74:	3f90ad3a 	.word	0x3f90ad3a
 800ab78:	24760deb 	.word	0x24760deb
 800ab7c:	3fa97b4b 	.word	0x3fa97b4b
 800ab80:	a0d03d51 	.word	0xa0d03d51
 800ab84:	3fb10d66 	.word	0x3fb10d66
 800ab88:	c54c206e 	.word	0xc54c206e
 800ab8c:	3fb745cd 	.word	0x3fb745cd
 800ab90:	920083ff 	.word	0x920083ff
 800ab94:	3fc24924 	.word	0x3fc24924
 800ab98:	5555550d 	.word	0x5555550d
 800ab9c:	3fd55555 	.word	0x3fd55555
 800aba0:	2c6a6c2f 	.word	0x2c6a6c2f
 800aba4:	bfa2b444 	.word	0xbfa2b444
 800aba8:	52defd9a 	.word	0x52defd9a
 800abac:	3fadde2d 	.word	0x3fadde2d
 800abb0:	af749a6d 	.word	0xaf749a6d
 800abb4:	3fb3b0f2 	.word	0x3fb3b0f2
 800abb8:	fe231671 	.word	0xfe231671
 800abbc:	3fbc71c6 	.word	0x3fbc71c6
 800abc0:	9998ebc4 	.word	0x9998ebc4
 800abc4:	3fc99999 	.word	0x3fc99999
 800abc8:	54442d18 	.word	0x54442d18
 800abcc:	3ff921fb 	.word	0x3ff921fb
 800abd0:	440fffff 	.word	0x440fffff
 800abd4:	7ff00000 	.word	0x7ff00000
 800abd8:	3fdbffff 	.word	0x3fdbffff
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	3ff2ffff 	.word	0x3ff2ffff
 800abe4:	40038000 	.word	0x40038000
 800abe8:	3ff80000 	.word	0x3ff80000
 800abec:	bff00000 	.word	0xbff00000
 800abf0:	0800b278 	.word	0x0800b278
 800abf4:	0800b258 	.word	0x0800b258

0800abf8 <fabs>:
 800abf8:	ec51 0b10 	vmov	r0, r1, d0
 800abfc:	ee10 2a10 	vmov	r2, s0
 800ac00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac04:	ec43 2b10 	vmov	d0, r2, r3
 800ac08:	4770      	bx	lr

0800ac0a <finite>:
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	ed8d 0b00 	vstr	d0, [sp]
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ac16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac1a:	0fc0      	lsrs	r0, r0, #31
 800ac1c:	b002      	add	sp, #8
 800ac1e:	4770      	bx	lr

0800ac20 <floor>:
 800ac20:	ec51 0b10 	vmov	r0, r1, d0
 800ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac30:	2e13      	cmp	r6, #19
 800ac32:	ee10 5a10 	vmov	r5, s0
 800ac36:	ee10 8a10 	vmov	r8, s0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	dc32      	bgt.n	800aca4 <floor+0x84>
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	da14      	bge.n	800ac6c <floor+0x4c>
 800ac42:	a333      	add	r3, pc, #204	; (adr r3, 800ad10 <floor+0xf0>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fad0 	bl	80001ec <__adddf3>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f7f5 ff12 	bl	8000a78 <__aeabi_dcmpgt>
 800ac54:	b138      	cbz	r0, 800ac66 <floor+0x46>
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	da57      	bge.n	800ad0a <floor+0xea>
 800ac5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac5e:	431d      	orrs	r5, r3
 800ac60:	d001      	beq.n	800ac66 <floor+0x46>
 800ac62:	4c2d      	ldr	r4, [pc, #180]	; (800ad18 <floor+0xf8>)
 800ac64:	2500      	movs	r5, #0
 800ac66:	4621      	mov	r1, r4
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e025      	b.n	800acb8 <floor+0x98>
 800ac6c:	4f2b      	ldr	r7, [pc, #172]	; (800ad1c <floor+0xfc>)
 800ac6e:	4137      	asrs	r7, r6
 800ac70:	ea01 0307 	and.w	r3, r1, r7
 800ac74:	4303      	orrs	r3, r0
 800ac76:	d01f      	beq.n	800acb8 <floor+0x98>
 800ac78:	a325      	add	r3, pc, #148	; (adr r3, 800ad10 <floor+0xf0>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fab5 	bl	80001ec <__adddf3>
 800ac82:	2200      	movs	r2, #0
 800ac84:	2300      	movs	r3, #0
 800ac86:	f7f5 fef7 	bl	8000a78 <__aeabi_dcmpgt>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0eb      	beq.n	800ac66 <floor+0x46>
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	bfbe      	ittt	lt
 800ac92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ac96:	fa43 f606 	asrlt.w	r6, r3, r6
 800ac9a:	19a4      	addlt	r4, r4, r6
 800ac9c:	ea24 0407 	bic.w	r4, r4, r7
 800aca0:	2500      	movs	r5, #0
 800aca2:	e7e0      	b.n	800ac66 <floor+0x46>
 800aca4:	2e33      	cmp	r6, #51	; 0x33
 800aca6:	dd0b      	ble.n	800acc0 <floor+0xa0>
 800aca8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800acac:	d104      	bne.n	800acb8 <floor+0x98>
 800acae:	ee10 2a10 	vmov	r2, s0
 800acb2:	460b      	mov	r3, r1
 800acb4:	f7f5 fa9a 	bl	80001ec <__adddf3>
 800acb8:	ec41 0b10 	vmov	d0, r0, r1
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc8:	fa23 f707 	lsr.w	r7, r3, r7
 800accc:	4207      	tst	r7, r0
 800acce:	d0f3      	beq.n	800acb8 <floor+0x98>
 800acd0:	a30f      	add	r3, pc, #60	; (adr r3, 800ad10 <floor+0xf0>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 fa89 	bl	80001ec <__adddf3>
 800acda:	2200      	movs	r2, #0
 800acdc:	2300      	movs	r3, #0
 800acde:	f7f5 fecb 	bl	8000a78 <__aeabi_dcmpgt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d0bf      	beq.n	800ac66 <floor+0x46>
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	da02      	bge.n	800acf0 <floor+0xd0>
 800acea:	2e14      	cmp	r6, #20
 800acec:	d103      	bne.n	800acf6 <floor+0xd6>
 800acee:	3401      	adds	r4, #1
 800acf0:	ea25 0507 	bic.w	r5, r5, r7
 800acf4:	e7b7      	b.n	800ac66 <floor+0x46>
 800acf6:	2301      	movs	r3, #1
 800acf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800acfc:	fa03 f606 	lsl.w	r6, r3, r6
 800ad00:	4435      	add	r5, r6
 800ad02:	4545      	cmp	r5, r8
 800ad04:	bf38      	it	cc
 800ad06:	18e4      	addcc	r4, r4, r3
 800ad08:	e7f2      	b.n	800acf0 <floor+0xd0>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	462c      	mov	r4, r5
 800ad0e:	e7aa      	b.n	800ac66 <floor+0x46>
 800ad10:	8800759c 	.word	0x8800759c
 800ad14:	7e37e43c 	.word	0x7e37e43c
 800ad18:	bff00000 	.word	0xbff00000
 800ad1c:	000fffff 	.word	0x000fffff

0800ad20 <scalbn>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	ec55 4b10 	vmov	r4, r5, d0
 800ad26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	b99a      	cbnz	r2, 800ad58 <scalbn+0x38>
 800ad30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad34:	4323      	orrs	r3, r4
 800ad36:	d036      	beq.n	800ada6 <scalbn+0x86>
 800ad38:	4b39      	ldr	r3, [pc, #228]	; (800ae20 <scalbn+0x100>)
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	ee10 0a10 	vmov	r0, s0
 800ad40:	2200      	movs	r2, #0
 800ad42:	f7f5 fc09 	bl	8000558 <__aeabi_dmul>
 800ad46:	4b37      	ldr	r3, [pc, #220]	; (800ae24 <scalbn+0x104>)
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	da10      	bge.n	800ad72 <scalbn+0x52>
 800ad50:	a32b      	add	r3, pc, #172	; (adr r3, 800ae00 <scalbn+0xe0>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	e03a      	b.n	800adce <scalbn+0xae>
 800ad58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad5c:	428a      	cmp	r2, r1
 800ad5e:	d10c      	bne.n	800ad7a <scalbn+0x5a>
 800ad60:	ee10 2a10 	vmov	r2, s0
 800ad64:	4620      	mov	r0, r4
 800ad66:	4629      	mov	r1, r5
 800ad68:	f7f5 fa40 	bl	80001ec <__adddf3>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	e019      	b.n	800ada6 <scalbn+0x86>
 800ad72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad76:	460b      	mov	r3, r1
 800ad78:	3a36      	subs	r2, #54	; 0x36
 800ad7a:	4432      	add	r2, r6
 800ad7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad80:	428a      	cmp	r2, r1
 800ad82:	dd08      	ble.n	800ad96 <scalbn+0x76>
 800ad84:	2d00      	cmp	r5, #0
 800ad86:	a120      	add	r1, pc, #128	; (adr r1, 800ae08 <scalbn+0xe8>)
 800ad88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad8c:	da1c      	bge.n	800adc8 <scalbn+0xa8>
 800ad8e:	a120      	add	r1, pc, #128	; (adr r1, 800ae10 <scalbn+0xf0>)
 800ad90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad94:	e018      	b.n	800adc8 <scalbn+0xa8>
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	dd08      	ble.n	800adac <scalbn+0x8c>
 800ad9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ada2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ada6:	ec45 4b10 	vmov	d0, r4, r5
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800adb0:	da19      	bge.n	800ade6 <scalbn+0xc6>
 800adb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adb6:	429e      	cmp	r6, r3
 800adb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800adbc:	dd0a      	ble.n	800add4 <scalbn+0xb4>
 800adbe:	a112      	add	r1, pc, #72	; (adr r1, 800ae08 <scalbn+0xe8>)
 800adc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e2      	bne.n	800ad8e <scalbn+0x6e>
 800adc8:	a30f      	add	r3, pc, #60	; (adr r3, 800ae08 <scalbn+0xe8>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fbc3 	bl	8000558 <__aeabi_dmul>
 800add2:	e7cb      	b.n	800ad6c <scalbn+0x4c>
 800add4:	a10a      	add	r1, pc, #40	; (adr r1, 800ae00 <scalbn+0xe0>)
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0b8      	beq.n	800ad50 <scalbn+0x30>
 800adde:	a10e      	add	r1, pc, #56	; (adr r1, 800ae18 <scalbn+0xf8>)
 800ade0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade4:	e7b4      	b.n	800ad50 <scalbn+0x30>
 800ade6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adea:	3236      	adds	r2, #54	; 0x36
 800adec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adf4:	4620      	mov	r0, r4
 800adf6:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <scalbn+0x108>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	e7e8      	b.n	800adce <scalbn+0xae>
 800adfc:	f3af 8000 	nop.w
 800ae00:	c2f8f359 	.word	0xc2f8f359
 800ae04:	01a56e1f 	.word	0x01a56e1f
 800ae08:	8800759c 	.word	0x8800759c
 800ae0c:	7e37e43c 	.word	0x7e37e43c
 800ae10:	8800759c 	.word	0x8800759c
 800ae14:	fe37e43c 	.word	0xfe37e43c
 800ae18:	c2f8f359 	.word	0xc2f8f359
 800ae1c:	81a56e1f 	.word	0x81a56e1f
 800ae20:	43500000 	.word	0x43500000
 800ae24:	ffff3cb0 	.word	0xffff3cb0
 800ae28:	3c900000 	.word	0x3c900000

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr
