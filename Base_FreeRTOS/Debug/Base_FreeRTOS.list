
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080068a8  080068a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a8  080068a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013478  20000070  08006920  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134e8  08006920  000234e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e40f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002322  00000000  00000000  0002e4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000307d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00031440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cb6  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e336  00000000  00000000  00044c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066037  00000000  00000000  00052f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ec  00000000  00000000  000b8ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800676c 	.word	0x0800676c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800676c 	.word	0x0800676c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f08 	.word	0x20012f08

08000274 <main>:
unsigned int secondParameter;
unsigned int thirdParameter;
char userMsg[64];

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 800027a:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <main+0x74>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <main+0x74>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <main+0x78>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <main+0x78>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


	inSystem ();
 8000296:	f000 f839 	bl	800030c <inSystem>

	BaseType_t xReturned;

	xReturned = xTaskCreate(
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <main+0x7c>)
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	2302      	movs	r3, #2
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	22c8      	movs	r2, #200	; 0xc8
 80002a6:	4913      	ldr	r1, [pc, #76]	; (80002f4 <main+0x80>)
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <main+0x84>)
 80002aa:	f000 ff23 	bl	80010f4 <xTaskCreate>
 80002ae:	6078      	str	r0, [r7, #4]
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Led );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d00a      	beq.n	80002cc <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ba:	f383 8811 	msr	BASEPRI, r3
 80002be:	f3bf 8f6f 	isb	sy
 80002c2:	f3bf 8f4f 	dsb	sy
 80002c6:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002c8:	bf00      	nop
 80002ca:	e7fe      	b.n	80002ca <main+0x56>

	 xReturned = xTaskCreate(
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <main+0x88>)
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <main+0x8c>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	490a      	ldr	r1, [pc, #40]	; (8000304 <main+0x90>)
 80002da:	480b      	ldr	r0, [pc, #44]	; (8000308 <main+0x94>)
 80002dc:	f000 ff0a 	bl	80010f4 <xTaskCreate>
 80002e0:	6078      	str	r0, [r7, #4]
	 	                    2,/* Priority at which the task is created. */
	 	                    &xHandleTask_Button );      /* Used to pass out the created task's handle. */


	 /* Start the created tasks running. */
	 vTaskStartScheduler();
 80002e2:	f001 f8a3 	bl	800142c <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 80002e6:	e7fe      	b.n	80002e6 <main+0x72>
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e0001000 	.word	0xe0001000
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	08006784 	.word	0x08006784
 80002f8:	080003b1 	.word	0x080003b1
 80002fc:	20000090 	.word	0x20000090
 8000300:	0800678c 	.word	0x0800678c
 8000304:	08006798 	.word	0x08006798
 8000308:	080003cd 	.word	0x080003cd

0800030c <inSystem>:

	}
}


void inSystem (void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0


	//Descripcion de la configuracion

	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 8000310:	f005 fc78 	bl	8005c04 <RCC_enableMaxFrequencies>

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <inSystem+0x90>)
 8000316:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <inSystem+0x94>)
 8000318:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <inSystem+0x90>)
 800031c:	2200      	movs	r2, #0
 800031e:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <inSystem+0x90>)
 8000322:	2201      	movs	r2, #1
 8000324:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <inSystem+0x90>)
 8000328:	2200      	movs	r2, #0
 800032a:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <inSystem+0x90>)
 800032e:	2205      	movs	r2, #5
 8000330:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <inSystem+0x90>)
 8000334:	2200      	movs	r2, #0
 8000336:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <inSystem+0x90>)
 800033a:	2202      	movs	r2, #2
 800033c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 800033e:	4817      	ldr	r0, [pc, #92]	; (800039c <inSystem+0x90>)
 8000340:	f005 fad0 	bl	80058e4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, RESET);
 8000344:	2100      	movs	r1, #0
 8000346:	4815      	ldr	r0, [pc, #84]	; (800039c <inSystem+0x90>)
 8000348:	f005 fbf6 	bl	8005b38 <GPIO_WritePin>


	// USER Button exti config

	handlerUserButton.pGPIOx = GPIOC;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <inSystem+0x98>)
 800034e:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <inSystem+0x9c>)
 8000350:	601a      	str	r2, [r3, #0]
	handlerUserButton.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <inSystem+0x98>)
 8000354:	2200      	movs	r2, #0
 8000356:	725a      	strb	r2, [r3, #9]
	handlerUserButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <inSystem+0x98>)
 800035a:	2200      	movs	r2, #0
 800035c:	715a      	strb	r2, [r3, #5]
	handlerUserButton.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <inSystem+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	721a      	strb	r2, [r3, #8]
	handlerUserButton.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <inSystem+0x98>)
 8000366:	220d      	movs	r2, #13
 8000368:	711a      	strb	r2, [r3, #4]
	handlerUserButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <inSystem+0x98>)
 800036c:	2200      	movs	r2, #0
 800036e:	71da      	strb	r2, [r3, #7]
	handlerUserButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <inSystem+0x98>)
 8000372:	2202      	movs	r2, #2
 8000374:	719a      	strb	r2, [r3, #6]
	handler_exti_userButon.edgeType = EXTERNAL_INTERRUPT_RISING_EDGE;
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <inSystem+0xa0>)
 8000378:	2201      	movs	r2, #1
 800037a:	711a      	strb	r2, [r3, #4]
	handler_exti_userButon.pGPIOHandler = &handlerUserButton;
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <inSystem+0xa0>)
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <inSystem+0x98>)
 8000380:	601a      	str	r2, [r3, #0]
	handler_exti_userButon.priority     = e_EXTI_PRIORITY_6;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <inSystem+0xa0>)
 8000384:	2206      	movs	r2, #6
 8000386:	715a      	strb	r2, [r3, #5]
	exti_Set_Priority(&handler_exti_userButon, e_EXTI_PRIORITY_6);
 8000388:	2106      	movs	r1, #6
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <inSystem+0xa0>)
 800038c:	f005 f87e 	bl	800548c <exti_Set_Priority>
	extInt_Config(&handler_exti_userButon);
 8000390:	4806      	ldr	r0, [pc, #24]	; (80003ac <inSystem+0xa0>)
 8000392:	f004 f9d3 	bl	800473c <extInt_Config>




}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000094 	.word	0x20000094
 80003a0:	40020000 	.word	0x40020000
 80003a4:	200000a0 	.word	0x200000a0
 80003a8:	40020800 	.word	0x40020800
 80003ac:	200000ac 	.word	0x200000ac

080003b0 <vTaskLedGreen>:



void vTaskLedGreen( void * pvParameters )
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

   while(1){
	   //printf("%s\n",((char*) pvParameters));
	   GPIOxTooglePin(&handlerPinA5);
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <vTaskLedGreen+0x18>)
 80003ba:	f005 fc09 	bl	8005bd0 <GPIOxTooglePin>
   	   vTaskDelay((pdMS_TO_TICKS(250)));
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fffc 	bl	80013bc <vTaskDelay>
	   GPIOxTooglePin(&handlerPinA5);
 80003c4:	e7f8      	b.n	80003b8 <vTaskLedGreen+0x8>
 80003c6:	bf00      	nop
 80003c8:	20000094 	.word	0x20000094

080003cc <vTaskTwo>:
	   //taskYIELD();
   }
}

void vTaskTwo( void * pvParameters )
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

   while(1){
	   printf("%s\n",((char*) pvParameters));
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f005 fd3d 	bl	8005e54 <puts>
	   vTaskDelay((pdMS_TO_TICKS(10)));
 80003da:	2000      	movs	r0, #0
 80003dc:	f000 ffee 	bl	80013bc <vTaskDelay>
	   printf("%s\n",((char*) pvParameters));
 80003e0:	e7f8      	b.n	80003d4 <vTaskTwo+0x8>

080003e2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b086      	sub	sp, #24
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e00a      	b.n	800040a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003f4:	f3af 8000 	nop.w
 80003f8:	4601      	mov	r1, r0
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	1c5a      	adds	r2, r3, #1
 80003fe:	60ba      	str	r2, [r7, #8]
 8000400:	b2ca      	uxtb	r2, r1
 8000402:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	3301      	adds	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	429a      	cmp	r2, r3
 8000410:	dbf0      	blt.n	80003f4 <_read+0x12>
	}

return len;
 8000412:	687b      	ldr	r3, [r7, #4]
}
 8000414:	4618      	mov	r0, r3
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <_close>:
	}
	return len;
}

int _close(int file)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	return -1;
 8000424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000444:	605a      	str	r2, [r3, #4]
	return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <_isatty>:

int _isatty(int file)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	return 1;
 800045c:	2301      	movs	r3, #1
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800046a:	b480      	push	{r7}
 800046c:	b085      	sub	sp, #20
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
	return 0;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	; (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	; (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f005 fc17 	bl	8005ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff fedd 	bl	8000274 <main>

080004ba <LoopForever>:

LoopForever:
    b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80004c8:	080068b0 	.word	0x080068b0
  ldr r2, =_sbss
 80004cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80004d0:	200134e8 	.word	0x200134e8

080004d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC_IRQHandler>

080004d6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f103 0208 	add.w	r2, r3, #8
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ee:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f103 0208 	add.w	r2, r3, #8
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f103 0208 	add.w	r2, r3, #8
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800058e:	d103      	bne.n	8000598 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e00c      	b.n	80005b2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3308      	adds	r3, #8
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e002      	b.n	80005a6 <vListInsert+0x2e>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d2f6      	bcs.n	80005a0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	685a      	ldr	r2, [r3, #4]
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005ea:	b480      	push	{r7}
 80005ec:	b085      	sub	sp, #20
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	6892      	ldr	r2, [r2, #8]
 8000600:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	6852      	ldr	r2, [r2, #4]
 800060a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	d103      	bne.n	800061e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10a      	bne.n	800066a <xQueueGenericReset+0x2a>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	60bb      	str	r3, [r7, #8]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800066a:	f002 f85d 	bl	8002728 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000676:	68f9      	ldr	r1, [r7, #12]
 8000678:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	441a      	add	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	3b01      	subs	r3, #1
 800069c:	68f9      	ldr	r1, [r7, #12]
 800069e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006a0:	fb01 f303 	mul.w	r3, r1, r3
 80006a4:	441a      	add	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d114      	bne.n	80006ea <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d01a      	beq.n	80006fe <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3310      	adds	r3, #16
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f937 	bl	8001940 <xTaskRemoveFromEventList>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d012      	beq.n	80006fe <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <xQueueGenericReset+0xcc>)
 80006da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	e009      	b.n	80006fe <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3310      	adds	r3, #16
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fef1 	bl	80004d6 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3324      	adds	r3, #36	; 0x24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff feec 	bl	80004d6 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80006fe:	f002 f843 	bl	8002788 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	e000ed04 	.word	0xe000ed04

08000710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af02      	add	r7, sp, #8
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10a      	bne.n	800073a <xQueueGenericCreate+0x2a>
        __asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	61bb      	str	r3, [r7, #24]
    }
 8000736:	bf00      	nop
 8000738:	e7fe      	b.n	8000738 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <xQueueGenericCreate+0x48>
 800074a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <xQueueGenericCreate+0x4c>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <xQueueGenericCreate+0x4e>
 800075c:	2300      	movs	r3, #0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10a      	bne.n	8000778 <xQueueGenericCreate+0x68>
        __asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000766:	f383 8811 	msr	BASEPRI, r3
 800076a:	f3bf 8f6f 	isb	sy
 800076e:	f3bf 8f4f 	dsb	sy
 8000772:	617b      	str	r3, [r7, #20]
    }
 8000774:	bf00      	nop
 8000776:	e7fe      	b.n	8000776 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800077e:	d90a      	bls.n	8000796 <xQueueGenericCreate+0x86>
        __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
    }
 8000792:	bf00      	nop
 8000794:	e7fe      	b.n	8000794 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f8e8 	bl	8002970 <pvPortMalloc>
 80007a0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00d      	beq.n	80007c4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	3350      	adds	r3, #80	; 0x50
 80007b0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	4613      	mov	r3, r2
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f000 f805 	bl	80007ce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007c4:	6a3b      	ldr	r3, [r7, #32]
    }
 80007c6:	4618      	mov	r0, r3
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e002      	b.n	80007f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007fc:	2101      	movs	r1, #1
 80007fe:	69b8      	ldr	r0, [r7, #24]
 8000800:	f7ff ff1e 	bl	8000640 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	68f9      	ldr	r1, [r7, #12]
 8000812:	2073      	movs	r0, #115	; 0x73
 8000814:	f003 f886 	bl	8003924 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10a      	bne.n	8000852 <xQueueGenericSend+0x32>
        __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800084e:	bf00      	nop
 8000850:	e7fe      	b.n	8000850 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d103      	bne.n	8000860 <xQueueGenericSend+0x40>
 8000858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <xQueueGenericSend+0x44>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <xQueueGenericSend+0x46>
 8000864:	2300      	movs	r3, #0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10a      	bne.n	8000880 <xQueueGenericSend+0x60>
        __asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800087c:	bf00      	nop
 800087e:	e7fe      	b.n	800087e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d103      	bne.n	800088e <xQueueGenericSend+0x6e>
 8000886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088a:	2b01      	cmp	r3, #1
 800088c:	d101      	bne.n	8000892 <xQueueGenericSend+0x72>
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <xQueueGenericSend+0x74>
 8000892:	2300      	movs	r3, #0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10a      	bne.n	80008ae <xQueueGenericSend+0x8e>
        __asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	623b      	str	r3, [r7, #32]
    }
 80008aa:	bf00      	nop
 80008ac:	e7fe      	b.n	80008ac <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008ae:	f001 f9e7 	bl	8001c80 <xTaskGetSchedulerState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <xQueueGenericSend+0x9e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <xQueueGenericSend+0xa2>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <xQueueGenericSend+0xa4>
 80008c2:	2300      	movs	r3, #0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10a      	bne.n	80008de <xQueueGenericSend+0xbe>
        __asm volatile
 80008c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008cc:	f383 8811 	msr	BASEPRI, r3
 80008d0:	f3bf 8f6f 	isb	sy
 80008d4:	f3bf 8f4f 	dsb	sy
 80008d8:	61fb      	str	r3, [r7, #28]
    }
 80008da:	bf00      	nop
 80008dc:	e7fe      	b.n	80008dc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008de:	f001 ff23 	bl	8002728 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d302      	bcc.n	80008f4 <xQueueGenericSend+0xd4>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d136      	bne.n	8000962 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80008f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fd7e 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	460b      	mov	r3, r1
 8000906:	4601      	mov	r1, r0
 8000908:	205a      	movs	r0, #90	; 0x5a
 800090a:	f003 f881 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000914:	f000 fa78 	bl	8000e08 <prvCopyDataToQueue>
 8000918:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	2b00      	cmp	r3, #0
 8000920:	d010      	beq.n	8000944 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000924:	3324      	adds	r3, #36	; 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f80a 	bl	8001940 <xTaskRemoveFromEventList>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d013      	beq.n	800095a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <xQueueGenericSend+0x248>)
 8000934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	f3bf 8f4f 	dsb	sy
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	e00a      	b.n	800095a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000946:	2b00      	cmp	r3, #0
 8000948:	d007      	beq.n	800095a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <xQueueGenericSend+0x248>)
 800094c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	f3bf 8f4f 	dsb	sy
 8000956:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800095a:	f001 ff15 	bl	8002788 <vPortExitCritical>
                return pdPASS;
 800095e:	2301      	movs	r3, #1
 8000960:	e07d      	b.n	8000a5e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d110      	bne.n	800098a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000968:	f001 ff0e 	bl	8002788 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800096c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd42 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	460b      	mov	r3, r1
 800097e:	4601      	mov	r1, r0
 8000980:	205a      	movs	r0, #90	; 0x5a
 8000982:	f003 f845 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000986:	2300      	movs	r3, #0
 8000988:	e069      	b.n	8000a5e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098c:	2b00      	cmp	r3, #0
 800098e:	d106      	bne.n	800099e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f001 f839 	bl	8001a0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800099a:	2301      	movs	r3, #1
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800099e:	f001 fef3 	bl	8002788 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009a2:	f000 fda5 	bl	80014f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009a6:	f001 febf 	bl	8002728 <vPortEnterCritical>
 80009aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b6:	d103      	bne.n	80009c0 <xQueueGenericSend+0x1a0>
 80009b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009cc:	d103      	bne.n	80009d6 <xQueueGenericSend+0x1b6>
 80009ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009d6:	f001 fed7 	bl	8002788 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f828 	bl	8001a38 <xTaskCheckForTimeOut>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d124      	bne.n	8000a38 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009f0:	f000 fb02 	bl	8000ff8 <prvIsQueueFull>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d018      	beq.n	8000a2c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fc:	3310      	adds	r3, #16
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ff4a 	bl	800189c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a0a:	f000 fa8d 	bl	8000f28 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a0e:	f000 fd7d 	bl	800150c <xTaskResumeAll>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f47f af62 	bne.w	80008de <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <xQueueGenericSend+0x248>)
 8000a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	f3bf 8f4f 	dsb	sy
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	e758      	b.n	80008de <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a2e:	f000 fa7b 	bl	8000f28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a32:	f000 fd6b 	bl	800150c <xTaskResumeAll>
 8000a36:	e752      	b.n	80008de <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a3a:	f000 fa75 	bl	8000f28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a3e:	f000 fd65 	bl	800150c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fcd7 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	460b      	mov	r3, r1
 8000a54:	4601      	mov	r1, r0
 8000a56:	205a      	movs	r0, #90	; 0x5a
 8000a58:	f002 ffda 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a5c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000ed04 	.word	0xe000ed04

08000a6c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10a      	bne.n	8000a9a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a88:	f383 8811 	msr	BASEPRI, r3
 8000a8c:	f3bf 8f6f 	isb	sy
 8000a90:	f3bf 8f4f 	dsb	sy
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000a96:	bf00      	nop
 8000a98:	e7fe      	b.n	8000a98 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <xQueueGenericSendFromISR+0x3c>
 8000aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <xQueueGenericSendFromISR+0x40>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <xQueueGenericSendFromISR+0x42>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10a      	bne.n	8000ac8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ac4:	bf00      	nop
 8000ac6:	e7fe      	b.n	8000ac6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d103      	bne.n	8000ad6 <xQueueGenericSendFromISR+0x6a>
 8000ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <xQueueGenericSendFromISR+0x6e>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <xQueueGenericSendFromISR+0x70>
 8000ada:	2300      	movs	r3, #0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10a      	bne.n	8000af6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae4:	f383 8811 	msr	BASEPRI, r3
 8000ae8:	f3bf 8f6f 	isb	sy
 8000aec:	f3bf 8f4f 	dsb	sy
 8000af0:	623b      	str	r3, [r7, #32]
    }
 8000af2:	bf00      	nop
 8000af4:	e7fe      	b.n	8000af4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000af6:	f001 fefb 	bl	80028f0 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000afa:	f3ef 8211 	mrs	r2, BASEPRI
 8000afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b02:	f383 8811 	msr	BASEPRI, r3
 8000b06:	f3bf 8f6f 	isb	sy
 8000b0a:	f3bf 8f4f 	dsb	sy
 8000b0e:	61fa      	str	r2, [r7, #28]
 8000b10:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b12:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d302      	bcc.n	8000b28 <xQueueGenericSendFromISR+0xbc>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d148      	bne.n	8000bba <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fc5c 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000b40:	4601      	mov	r1, r0
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	461a      	mov	r2, r3
 8000b46:	2060      	movs	r0, #96	; 0x60
 8000b48:	f002 fe92 	bl	8003870 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b52:	f000 f959 	bl	8000e08 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5e:	d112      	bne.n	8000b86 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d025      	beq.n	8000bb4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6a:	3324      	adds	r3, #36	; 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fee7 	bl	8001940 <xTaskRemoveFromEventList>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01d      	beq.n	8000bb4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01a      	beq.n	8000bb4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e016      	b.n	8000bb4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8c:	d10a      	bne.n	8000ba4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	617b      	str	r3, [r7, #20]
    }
 8000ba0:	bf00      	nop
 8000ba2:	e7fe      	b.n	8000ba2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	b25a      	sxtb	r2, r3
 8000bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000bb8:	e00b      	b.n	8000bd2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fc1b 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2060      	movs	r0, #96	; 0x60
 8000bca:	f002 fe51 	bl	8003870 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000bdc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3740      	adds	r7, #64	; 0x40
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b08f      	sub	sp, #60	; 0x3c
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10a      	bne.n	8000c18 <xQueueReceive+0x30>
        __asm volatile
 8000c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c06:	f383 8811 	msr	BASEPRI, r3
 8000c0a:	f3bf 8f6f 	isb	sy
 8000c0e:	f3bf 8f4f 	dsb	sy
 8000c12:	623b      	str	r3, [r7, #32]
    }
 8000c14:	bf00      	nop
 8000c16:	e7fe      	b.n	8000c16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <xQueueReceive+0x3e>
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <xQueueReceive+0x42>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <xQueueReceive+0x44>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10a      	bne.n	8000c46 <xQueueReceive+0x5e>
        __asm volatile
 8000c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c34:	f383 8811 	msr	BASEPRI, r3
 8000c38:	f3bf 8f6f 	isb	sy
 8000c3c:	f3bf 8f4f 	dsb	sy
 8000c40:	61fb      	str	r3, [r7, #28]
    }
 8000c42:	bf00      	nop
 8000c44:	e7fe      	b.n	8000c44 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c46:	f001 f81b 	bl	8001c80 <xTaskGetSchedulerState>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <xQueueReceive+0x6e>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <xQueueReceive+0x72>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <xQueueReceive+0x74>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10a      	bne.n	8000c76 <xQueueReceive+0x8e>
        __asm volatile
 8000c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c64:	f383 8811 	msr	BASEPRI, r3
 8000c68:	f3bf 8f6f 	isb	sy
 8000c6c:	f3bf 8f4f 	dsb	sy
 8000c70:	61bb      	str	r3, [r7, #24]
    }
 8000c72:	bf00      	nop
 8000c74:	e7fe      	b.n	8000c74 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c76:	f001 fd57 	bl	8002728 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d02f      	beq.n	8000ce6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c8a:	f000 f927 	bl	8000edc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fbb1 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000c96:	4604      	mov	r4, r0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f003 fbad 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	9100      	str	r1, [sp, #0]
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	205c      	movs	r0, #92	; 0x5c
 8000caa:	f002 feb1 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	3310      	adds	r3, #16
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fe3c 	bl	8001940 <xTaskRemoveFromEventList>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d007      	beq.n	8000cde <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <xQueueReceive+0x21c>)
 8000cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cde:	f001 fd53 	bl	8002788 <vPortExitCritical>
                return pdPASS;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e08a      	b.n	8000dfc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d113      	bne.n	8000d14 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000cec:	f001 fd4c 	bl	8002788 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fb80 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 fb7c 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000d00:	4602      	mov	r2, r0
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2101      	movs	r1, #1
 8000d06:	9100      	str	r1, [sp, #0]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	205c      	movs	r0, #92	; 0x5c
 8000d0c:	f002 fe80 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e073      	b.n	8000dfc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fe74 	bl	8001a0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d28:	f001 fd2e 	bl	8002788 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d2c:	f000 fbe0 	bl	80014f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d30:	f001 fcfa 	bl	8002728 <vPortEnterCritical>
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d40:	d103      	bne.n	8000d4a <xQueueReceive+0x162>
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d56:	d103      	bne.n	8000d60 <xQueueReceive+0x178>
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d60:	f001 fd12 	bl	8002788 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d64:	1d3a      	adds	r2, r7, #4
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fe63 	bl	8001a38 <xTaskCheckForTimeOut>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d124      	bne.n	8000dc2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d7a:	f000 f927 	bl	8000fcc <prvIsQueueEmpty>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d018      	beq.n	8000db6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	3324      	adds	r3, #36	; 0x24
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fd85 	bl	800189c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d94:	f000 f8c8 	bl	8000f28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d98:	f000 fbb8 	bl	800150c <xTaskResumeAll>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f47f af69 	bne.w	8000c76 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <xQueueReceive+0x21c>)
 8000da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	e75f      	b.n	8000c76 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db8:	f000 f8b6 	bl	8000f28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dbc:	f000 fba6 	bl	800150c <xTaskResumeAll>
 8000dc0:	e759      	b.n	8000c76 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dc4:	f000 f8b0 	bl	8000f28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dc8:	f000 fba0 	bl	800150c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dce:	f000 f8fd 	bl	8000fcc <prvIsQueueEmpty>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f43f af4e 	beq.w	8000c76 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fb0b 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000de2:	4604      	mov	r4, r0
 8000de4:	2000      	movs	r0, #0
 8000de6:	f003 fb07 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8000dea:	4602      	mov	r2, r0
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2101      	movs	r1, #1
 8000df0:	9100      	str	r1, [sp, #0]
 8000df2:	4621      	mov	r1, r4
 8000df4:	205c      	movs	r0, #92	; 0x5c
 8000df6:	f002 fe0b 	bl	8003a10 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000dfa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3734      	adds	r7, #52	; 0x34
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000ed04 	.word	0xe000ed04

08000e08 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d14d      	bne.n	8000eca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 ff42 	bl	8001cbc <xTaskPriorityDisinherit>
 8000e38:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	e043      	b.n	8000eca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d119      	bne.n	8000e7c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6858      	ldr	r0, [r3, #4]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	461a      	mov	r2, r3
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	f004 ff7a 	bl	8005d4c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	441a      	add	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d32b      	bcc.n	8000eca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	e026      	b.n	8000eca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	68d8      	ldr	r0, [r3, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	461a      	mov	r2, r3
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	f004 ff60 	bl	8005d4c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	425b      	negs	r3, r3
 8000e96:	441a      	add	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	441a      	add	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d105      	bne.n	8000eca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ed2:	697b      	ldr	r3, [r7, #20]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d018      	beq.n	8000f20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	441a      	add	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d303      	bcc.n	8000f10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68d9      	ldr	r1, [r3, #12]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	461a      	mov	r2, r3
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f004 ff16 	bl	8005d4c <memcpy>
    }
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f30:	f001 fbfa 	bl	8002728 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f3c:	e011      	b.n	8000f62 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d012      	beq.n	8000f6c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3324      	adds	r3, #36	; 0x24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fcf8 	bl	8001940 <xTaskRemoveFromEventList>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f56:	f000 fdd5 	bl	8001b04 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dce9      	bgt.n	8000f3e <prvUnlockQueue+0x16>
 8000f6a:	e000      	b.n	8000f6e <prvUnlockQueue+0x46>
                        break;
 8000f6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f76:	f001 fc07 	bl	8002788 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f7a:	f001 fbd5 	bl	8002728 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f86:	e011      	b.n	8000fac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d012      	beq.n	8000fb6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3310      	adds	r3, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fcd3 	bl	8001940 <xTaskRemoveFromEventList>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000fa0:	f000 fdb0 	bl	8001b04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dce9      	bgt.n	8000f88 <prvUnlockQueue+0x60>
 8000fb4:	e000      	b.n	8000fb8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000fb6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fc0:	f001 fbe2 	bl	8002788 <vPortExitCritical>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fd4:	f001 fba8 	bl	8002728 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e001      	b.n	8000fea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fea:	f001 fbcd 	bl	8002788 <vPortExitCritical>

    return xReturn;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001000:	f001 fb92 	bl	8002728 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	429a      	cmp	r2, r3
 800100e:	d102      	bne.n	8001016 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e001      	b.n	800101a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800101a:	f001 fbb5 	bl	8002788 <vPortExitCritical>

    return xReturn;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e01e      	b.n	8001076 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <vQueueAddToRegistry+0x60>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d115      	bne.n	8001070 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001044:	4910      	ldr	r1, [pc, #64]	; (8001088 <vQueueAddToRegistry+0x60>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <vQueueAddToRegistry+0x60>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f9cb 	bl	80043f8 <SEGGER_SYSVIEW_ShrinkId>
 8001062:	4601      	mov	r1, r0
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	2071      	movs	r0, #113	; 0x71
 800106a:	f002 fc01 	bl	8003870 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800106e:	e006      	b.n	800107e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b07      	cmp	r3, #7
 800107a:	d9dd      	bls.n	8001038 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000b4 	.word	0x200000b4

0800108c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800109c:	f001 fb44 	bl	8002728 <vPortEnterCritical>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d103      	bne.n	80010b6 <vQueueWaitForMessageRestricted+0x2a>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c2:	d103      	bne.n	80010cc <vQueueWaitForMessageRestricted+0x40>
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010cc:	f001 fb5c 	bl	8002788 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3324      	adds	r3, #36	; 0x24
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fbff 	bl	80018e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff1e 	bl	8000f28 <prvUnlockQueue>
    }
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fc31 	bl	8002970 <pvPortMalloc>
 800110e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001116:	2058      	movs	r0, #88	; 0x58
 8001118:	f001 fc2a 	bl	8002970 <pvPortMalloc>
 800111c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
 800112a:	e005      	b.n	8001138 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f001 fcff 	bl	8002b30 <vPortFree>
 8001132:	e001      	b.n	8001138 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	2300      	movs	r3, #0
 8001142:	9303      	str	r3, [sp, #12]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f80e 	bl	8001176 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800115a:	69f8      	ldr	r0, [r7, #28]
 800115c:	f000 f8a2 	bl	80012a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001160:	2301      	movs	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	e002      	b.n	800116c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800116c:	69bb      	ldr	r3, [r7, #24]
    }
 800116e:	4618      	mov	r0, r3
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001186:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	461a      	mov	r2, r3
 800118e:	21a5      	movs	r1, #165	; 0xa5
 8001190:	f004 fdea 	bl	8005d68 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800119e:	3b01      	subs	r3, #1
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f023 0307 	bic.w	r3, r3, #7
 80011ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80011b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	617b      	str	r3, [r7, #20]
    }
 80011ca:	bf00      	nop
 80011cc:	e7fe      	b.n	80011cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01f      	beq.n	8001214 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	e012      	b.n	8001200 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4413      	add	r3, r2
 80011e0:	7819      	ldrb	r1, [r3, #0]
 80011e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	3334      	adds	r3, #52	; 0x34
 80011ea:	460a      	mov	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b09      	cmp	r3, #9
 8001204:	d9e9      	bls.n	80011da <prvInitialiseNewTask+0x64>
 8001206:	e000      	b.n	800120a <prvInitialiseNewTask+0x94>
            {
                break;
 8001208:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001212:	e003      	b.n	800121c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	2b04      	cmp	r3, #4
 8001220:	d901      	bls.n	8001226 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001222:	2304      	movs	r3, #4
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001230:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	2200      	movs	r2, #0
 8001236:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	3304      	adds	r3, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f96a 	bl	8000516 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	3318      	adds	r3, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f965 	bl	8000516 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001250:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	f1c3 0205 	rsb	r2, r3, #5
 8001258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	3350      	adds	r3, #80	; 0x50
 8001266:	2204      	movs	r2, #4
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fd7c 	bl	8005d68 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	3354      	adds	r3, #84	; 0x54
 8001274:	2201      	movs	r2, #1
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fd75 	bl	8005d68 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	69b8      	ldr	r0, [r7, #24]
 8001284:	f001 f924 	bl	80024d0 <pxPortInitialiseStack>
 8001288:	4602      	mov	r2, r0
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001298:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012ac:	f001 fa3c 	bl	8002728 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <prvAddNewTaskToReadyList+0xfc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <prvAddNewTaskToReadyList+0xfc>)
 80012b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <prvAddNewTaskToReadyList+0x100>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012c2:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <prvAddNewTaskToReadyList+0x100>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <prvAddNewTaskToReadyList+0xfc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d110      	bne.n	80012f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012d0:	f000 fc3c 	bl	8001b4c <prvInitialiseTaskLists>
 80012d4:	e00d      	b.n	80012f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <prvAddNewTaskToReadyList+0x104>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <prvAddNewTaskToReadyList+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d802      	bhi.n	80012f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80012ec:	4a2d      	ldr	r2, [pc, #180]	; (80013a4 <prvAddNewTaskToReadyList+0x100>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <prvAddNewTaskToReadyList+0x108>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <prvAddNewTaskToReadyList+0x108>)
 80012fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <prvAddNewTaskToReadyList+0x108>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d016      	beq.n	8001338 <prvAddNewTaskToReadyList+0x94>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	f002 ff4d 	bl	80041ac <SEGGER_SYSVIEW_OnTaskCreate>
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	461d      	mov	r5, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	461c      	mov	r4, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	1ae3      	subs	r3, r4, r3
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	462b      	mov	r3, r5
 8001334:	f001 fd1a 	bl	8002d6c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 ffba 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	2201      	movs	r2, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <prvAddNewTaskToReadyList+0x10c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4313      	orrs	r3, r2
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <prvAddNewTaskToReadyList+0x10c>)
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <prvAddNewTaskToReadyList+0x110>)
 8001360:	441a      	add	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff f8e1 	bl	8000530 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800136e:	f001 fa0b 	bl	8002788 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <prvAddNewTaskToReadyList+0x104>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00e      	beq.n	8001398 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <prvAddNewTaskToReadyList+0x100>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <prvAddNewTaskToReadyList+0x114>)
 800138a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	200001cc 	.word	0x200001cc
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	200001d8 	.word	0x200001d8
 80013ac:	200001e8 	.word	0x200001e8
 80013b0:	200001d4 	.word	0x200001d4
 80013b4:	200000f8 	.word	0x200000f8
 80013b8:	e000ed04 	.word	0xe000ed04

080013bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01b      	beq.n	8001406 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <vTaskDelay+0x68>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00a      	beq.n	80013ec <vTaskDelay+0x30>
        __asm volatile
 80013d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	60bb      	str	r3, [r7, #8]
    }
 80013e8:	bf00      	nop
 80013ea:	e7fe      	b.n	80013ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80013ec:	f000 f880 	bl	80014f0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	2023      	movs	r0, #35	; 0x23
 80013f4:	f002 fa00 	bl	80037f8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013f8:	2100      	movs	r1, #0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fcde 	bl	8001dbc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001400:	f000 f884 	bl	800150c <xTaskResumeAll>
 8001404:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <vTaskDelay+0x6c>)
 800140e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	f3bf 8f4f 	dsb	sy
 8001418:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001f4 	.word	0x200001f4
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <vTaskStartScheduler+0xa4>)
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2282      	movs	r2, #130	; 0x82
 800143e:	4925      	ldr	r1, [pc, #148]	; (80014d4 <vTaskStartScheduler+0xa8>)
 8001440:	4825      	ldr	r0, [pc, #148]	; (80014d8 <vTaskStartScheduler+0xac>)
 8001442:	f7ff fe57 	bl	80010f4 <xTaskCreate>
 8001446:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800144e:	f000 fd2d 	bl	8001eac <xTimerCreateTimerTask>
 8001452:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d124      	bne.n	80014a4 <vTaskStartScheduler+0x78>
        __asm volatile
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	60bb      	str	r3, [r7, #8]
    }
 800146c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <vTaskStartScheduler+0xb0>)
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001474:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <vTaskStartScheduler+0xb4>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <vTaskStartScheduler+0xb8>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <vTaskStartScheduler+0xbc>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <vTaskStartScheduler+0xa4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d102      	bne.n	8001494 <vTaskStartScheduler+0x68>
 800148e:	f002 fe71 	bl	8004174 <SEGGER_SYSVIEW_OnIdle>
 8001492:	e004      	b.n	800149e <vTaskStartScheduler+0x72>
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <vTaskStartScheduler+0xbc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fec9 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800149e:	f001 f8a1 	bl	80025e4 <xPortStartScheduler>
 80014a2:	e00e      	b.n	80014c2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014aa:	d10a      	bne.n	80014c2 <vTaskStartScheduler+0x96>
        __asm volatile
 80014ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b0:	f383 8811 	msr	BASEPRI, r3
 80014b4:	f3bf 8f6f 	isb	sy
 80014b8:	f3bf 8f4f 	dsb	sy
 80014bc:	607b      	str	r3, [r7, #4]
    }
 80014be:	bf00      	nop
 80014c0:	e7fe      	b.n	80014c0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <vTaskStartScheduler+0xc0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f0 	.word	0x200001f0
 80014d4:	080067b0 	.word	0x080067b0
 80014d8:	08001b1d 	.word	0x08001b1d
 80014dc:	200001ec 	.word	0x200001ec
 80014e0:	200001d8 	.word	0x200001d8
 80014e4:	200001d0 	.word	0x200001d0
 80014e8:	200000f4 	.word	0x200000f4
 80014ec:	20000004 	.word	0x20000004

080014f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <vTaskSuspendAll+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a03      	ldr	r2, [pc, #12]	; (8001508 <vTaskSuspendAll+0x18>)
 80014fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	200001f4 	.word	0x200001f4

0800150c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <xTaskResumeAll+0x11c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10a      	bne.n	8001538 <xTaskResumeAll+0x2c>
        __asm volatile
 8001522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	603b      	str	r3, [r7, #0]
    }
 8001534:	bf00      	nop
 8001536:	e7fe      	b.n	8001536 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001538:	f001 f8f6 	bl	8002728 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <xTaskResumeAll+0x11c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3b01      	subs	r3, #1
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <xTaskResumeAll+0x11c>)
 8001544:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <xTaskResumeAll+0x11c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d165      	bne.n	800161a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <xTaskResumeAll+0x120>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d061      	beq.n	800161a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001556:	e032      	b.n	80015be <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <xTaskResumeAll+0x124>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3318      	adds	r3, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f840 	bl	80005ea <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3304      	adds	r3, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f83b 	bl	80005ea <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fe9c 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <xTaskResumeAll+0x128>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	4a2a      	ldr	r2, [pc, #168]	; (8001634 <xTaskResumeAll+0x128>)
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <xTaskResumeAll+0x12c>)
 800159c:	441a      	add	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f7fe ffc3 	bl	8000530 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <xTaskResumeAll+0x130>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d302      	bcc.n	80015be <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <xTaskResumeAll+0x134>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <xTaskResumeAll+0x124>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1c8      	bne.n	8001558 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015cc:	f000 fb3c 	bl	8001c48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <xTaskResumeAll+0x138>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d010      	beq.n	80015fe <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015dc:	f000 f846 	bl	800166c <xTaskIncrementTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <xTaskResumeAll+0x134>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f1      	bne.n	80015dc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <xTaskResumeAll+0x138>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <xTaskResumeAll+0x134>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001606:	2301      	movs	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <xTaskResumeAll+0x13c>)
 800160c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f3bf 8f4f 	dsb	sy
 8001616:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800161a:	f001 f8b5 	bl	8002788 <vPortExitCritical>

    return xAlreadyYielded;
 800161e:	68bb      	ldr	r3, [r7, #8]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001f4 	.word	0x200001f4
 800162c:	200001cc 	.word	0x200001cc
 8001630:	2000018c 	.word	0x2000018c
 8001634:	200001d4 	.word	0x200001d4
 8001638:	200000f8 	.word	0x200000f8
 800163c:	200000f4 	.word	0x200000f4
 8001640:	200001e0 	.word	0x200001e0
 8001644:	200001dc 	.word	0x200001dc
 8001648:	e000ed04 	.word	0xe000ed04

0800164c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <xTaskGetTickCount+0x1c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200001d0 	.word	0x200001d0

0800166c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <xTaskIncrementTick+0x130>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8084 	bne.w	8001788 <xTaskIncrementTick+0x11c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <xTaskIncrementTick+0x134>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001688:	4a45      	ldr	r2, [pc, #276]	; (80017a0 <xTaskIncrementTick+0x134>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d120      	bne.n	80016d6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <xTaskIncrementTick+0x138>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <xTaskIncrementTick+0x48>
        __asm volatile
 800169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	f3bf 8f4f 	dsb	sy
 80016ae:	603b      	str	r3, [r7, #0]
    }
 80016b0:	bf00      	nop
 80016b2:	e7fe      	b.n	80016b2 <xTaskIncrementTick+0x46>
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <xTaskIncrementTick+0x138>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <xTaskIncrementTick+0x13c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <xTaskIncrementTick+0x138>)
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <xTaskIncrementTick+0x13c>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <xTaskIncrementTick+0x140>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a37      	ldr	r2, [pc, #220]	; (80017ac <xTaskIncrementTick+0x140>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	f000 fab9 	bl	8001c48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <xTaskIncrementTick+0x144>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d34c      	bcc.n	800177a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <xTaskIncrementTick+0x138>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d104      	bne.n	80016f4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <xTaskIncrementTick+0x144>)
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f0:	601a      	str	r2, [r3, #0]
                    break;
 80016f2:	e042      	b.n	800177a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <xTaskIncrementTick+0x138>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d203      	bcs.n	8001714 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <xTaskIncrementTick+0x144>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001712:	e032      	b.n	800177a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3304      	adds	r3, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff66 	bl	80005ea <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	3318      	adds	r3, #24
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff5d 	bl	80005ea <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fdbe 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	2201      	movs	r2, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <xTaskIncrementTick+0x148>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <xTaskIncrementTick+0x148>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <xTaskIncrementTick+0x14c>)
 8001758:	441a      	add	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3304      	adds	r3, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7fe fee5 	bl	8000530 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <xTaskIncrementTick+0x150>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	429a      	cmp	r2, r3
 8001772:	d3b5      	bcc.n	80016e0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001778:	e7b2      	b.n	80016e0 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <xTaskIncrementTick+0x154>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <xTaskIncrementTick+0x126>
                {
                    xSwitchRequired = pdTRUE;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e004      	b.n	8001792 <xTaskIncrementTick+0x126>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <xTaskIncrementTick+0x158>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <xTaskIncrementTick+0x158>)
 8001790:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001792:	697b      	ldr	r3, [r7, #20]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001f4 	.word	0x200001f4
 80017a0:	200001d0 	.word	0x200001d0
 80017a4:	20000184 	.word	0x20000184
 80017a8:	20000188 	.word	0x20000188
 80017ac:	200001e4 	.word	0x200001e4
 80017b0:	200001ec 	.word	0x200001ec
 80017b4:	200001d4 	.word	0x200001d4
 80017b8:	200000f8 	.word	0x200000f8
 80017bc:	200000f4 	.word	0x200000f4
 80017c0:	200001e0 	.word	0x200001e0
 80017c4:	200001dc 	.word	0x200001dc

080017c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <vTaskSwitchContext+0xbc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <vTaskSwitchContext+0xc0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80017dc:	e04d      	b.n	800187a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <vTaskSwitchContext+0xc0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <vTaskSwitchContext+0xc4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	f1c3 031f 	rsb	r3, r3, #31
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	4925      	ldr	r1, [pc, #148]	; (8001890 <vTaskSwitchContext+0xc8>)
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <vTaskSwitchContext+0x5c>
        __asm volatile
 800180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	607b      	str	r3, [r7, #4]
    }
 8001820:	bf00      	nop
 8001822:	e7fe      	b.n	8001822 <vTaskSwitchContext+0x5a>
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <vTaskSwitchContext+0xc8>)
 8001830:	4413      	add	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3308      	adds	r3, #8
 8001846:	429a      	cmp	r2, r3
 8001848:	d104      	bne.n	8001854 <vTaskSwitchContext+0x8c>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <vTaskSwitchContext+0xcc>)
 800185c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <vTaskSwitchContext+0xcc>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <vTaskSwitchContext+0xd0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d102      	bne.n	8001870 <vTaskSwitchContext+0xa8>
 800186a:	f002 fc83 	bl	8004174 <SEGGER_SYSVIEW_OnIdle>
}
 800186e:	e004      	b.n	800187a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <vTaskSwitchContext+0xcc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fcdb 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001f4 	.word	0x200001f4
 8001888:	200001e0 	.word	0x200001e0
 800188c:	200001d4 	.word	0x200001d4
 8001890:	200000f8 	.word	0x200000f8
 8001894:	200000f4 	.word	0x200000f4
 8001898:	200001f0 	.word	0x200001f0

0800189c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	60fb      	str	r3, [r7, #12]
    }
 80018be:	bf00      	nop
 80018c0:	e7fe      	b.n	80018c0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <vTaskPlaceOnEventList+0x44>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3318      	adds	r3, #24
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7fe fe54 	bl	8000578 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018d0:	2101      	movs	r1, #1
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f000 fa72 	bl	8001dbc <prvAddCurrentTaskToDelayedList>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000f4 	.word	0x200000f4

080018e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80018f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	617b      	str	r3, [r7, #20]
    }
 8001908:	bf00      	nop
 800190a:	e7fe      	b.n	800190a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <vTaskPlaceOnEventListRestricted+0x58>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3318      	adds	r3, #24
 8001912:	4619      	mov	r1, r3
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7fe fe0b 	bl	8000530 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001924:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001926:	2024      	movs	r0, #36	; 0x24
 8001928:	f001 ff48 	bl	80037bc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f000 fa44 	bl	8001dbc <prvAddCurrentTaskToDelayedList>
    }
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000f4 	.word	0x200000f4

08001940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195a:	f383 8811 	msr	BASEPRI, r3
 800195e:	f3bf 8f6f 	isb	sy
 8001962:	f3bf 8f4f 	dsb	sy
 8001966:	60fb      	str	r3, [r7, #12]
    }
 8001968:	bf00      	nop
 800196a:	e7fe      	b.n	800196a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	3318      	adds	r3, #24
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fe3a 	bl	80005ea <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <xTaskRemoveFromEventList+0xb4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d120      	bne.n	80019c0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3304      	adds	r3, #4
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fe31 	bl	80005ea <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fc92 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2201      	movs	r2, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <xTaskRemoveFromEventList+0xb8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <xTaskRemoveFromEventList+0xb8>)
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <xTaskRemoveFromEventList+0xbc>)
 80019b0:	441a      	add	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3304      	adds	r3, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f7fe fdb9 	bl	8000530 <vListInsertEnd>
 80019be:	e005      	b.n	80019cc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3318      	adds	r3, #24
 80019c4:	4619      	mov	r1, r3
 80019c6:	480e      	ldr	r0, [pc, #56]	; (8001a00 <xTaskRemoveFromEventList+0xc0>)
 80019c8:	f7fe fdb2 	bl	8000530 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <xTaskRemoveFromEventList+0xc4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d905      	bls.n	80019e6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <xTaskRemoveFromEventList+0xc8>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e001      	b.n	80019ea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80019ea:	697b      	ldr	r3, [r7, #20]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001f4 	.word	0x200001f4
 80019f8:	200001d4 	.word	0x200001d4
 80019fc:	200000f8 	.word	0x200000f8
 8001a00:	2000018c 	.word	0x2000018c
 8001a04:	200000f4 	.word	0x200000f4
 8001a08:	200001e0 	.word	0x200001e0

08001a0c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <vTaskInternalSetTimeOutState+0x24>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <vTaskInternalSetTimeOutState+0x28>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200001e4 	.word	0x200001e4
 8001a34:	200001d0 	.word	0x200001d0

08001a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10a      	bne.n	8001a5e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	613b      	str	r3, [r7, #16]
    }
 8001a5a:	bf00      	nop
 8001a5c:	e7fe      	b.n	8001a5c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	60fb      	str	r3, [r7, #12]
    }
 8001a76:	bf00      	nop
 8001a78:	e7fe      	b.n	8001a78 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001a7a:	f000 fe55 	bl	8002728 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <xTaskCheckForTimeOut+0xc4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a96:	d102      	bne.n	8001a9e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	e026      	b.n	8001aec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <xTaskCheckForTimeOut+0xc8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d00a      	beq.n	8001ac0 <xTaskCheckForTimeOut+0x88>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d305      	bcc.n	8001ac0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e015      	b.n	8001aec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d20b      	bcs.n	8001ae2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff98 	bl	8001a0c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e004      	b.n	8001aec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001aec:	f000 fe4c 	bl	8002788 <vPortExitCritical>

    return xReturn;
 8001af0:	69fb      	ldr	r3, [r7, #28]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001d0 	.word	0x200001d0
 8001b00:	200001e4 	.word	0x200001e4

08001b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <vTaskMissedYield+0x14>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	200001e0 	.word	0x200001e0

08001b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b24:	f000 f852 	bl	8001bcc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <prvIdleTask+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d9f9      	bls.n	8001b24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <prvIdleTask+0x2c>)
 8001b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f3bf 8f4f 	dsb	sy
 8001b3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b40:	e7f0      	b.n	8001b24 <prvIdleTask+0x8>
 8001b42:	bf00      	nop
 8001b44:	200000f8 	.word	0x200000f8
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	e00c      	b.n	8001b72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <prvInitialiseTaskLists+0x60>)
 8001b64:	4413      	add	r3, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcb5 	bl	80004d6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d9ef      	bls.n	8001b58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <prvInitialiseTaskLists+0x64>)
 8001b7a:	f7fe fcac 	bl	80004d6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <prvInitialiseTaskLists+0x68>)
 8001b80:	f7fe fca9 	bl	80004d6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <prvInitialiseTaskLists+0x6c>)
 8001b86:	f7fe fca6 	bl	80004d6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <prvInitialiseTaskLists+0x70>)
 8001b8c:	f7fe fca3 	bl	80004d6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <prvInitialiseTaskLists+0x74>)
 8001b92:	f7fe fca0 	bl	80004d6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <prvInitialiseTaskLists+0x78>)
 8001b98:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <prvInitialiseTaskLists+0x64>)
 8001b9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <prvInitialiseTaskLists+0x7c>)
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <prvInitialiseTaskLists+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000f8 	.word	0x200000f8
 8001bb0:	2000015c 	.word	0x2000015c
 8001bb4:	20000170 	.word	0x20000170
 8001bb8:	2000018c 	.word	0x2000018c
 8001bbc:	200001a0 	.word	0x200001a0
 8001bc0:	200001b8 	.word	0x200001b8
 8001bc4:	20000184 	.word	0x20000184
 8001bc8:	20000188 	.word	0x20000188

08001bcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd2:	e019      	b.n	8001c08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001bd4:	f000 fda8 	bl	8002728 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <prvCheckTasksWaitingTermination+0x50>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fd00 	bl	80005ea <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <prvCheckTasksWaitingTermination+0x54>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <prvCheckTasksWaitingTermination+0x54>)
 8001bf2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <prvCheckTasksWaitingTermination+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <prvCheckTasksWaitingTermination+0x58>)
 8001bfc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001bfe:	f000 fdc3 	bl	8002788 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f810 	bl	8001c28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <prvCheckTasksWaitingTermination+0x58>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e1      	bne.n	8001bd4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200001a0 	.word	0x200001a0
 8001c20:	200001cc 	.word	0x200001cc
 8001c24:	200001b4 	.word	0x200001b4

08001c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 ff7b 	bl	8002b30 <vPortFree>
                vPortFree( pxTCB );
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 ff78 	bl	8002b30 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <prvResetNextTaskUnblockTime+0x30>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d104      	bne.n	8001c60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <prvResetNextTaskUnblockTime+0x34>)
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c5e:	e005      	b.n	8001c6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <prvResetNextTaskUnblockTime+0x30>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <prvResetNextTaskUnblockTime+0x34>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000184 	.word	0x20000184
 8001c7c:	200001ec 	.word	0x200001ec

08001c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <xTaskGetSchedulerState+0x34>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	e008      	b.n	8001ca6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <xTaskGetSchedulerState+0x38>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	e001      	b.n	8001ca6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ca6:	687b      	ldr	r3, [r7, #4]
    }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	200001d8 	.word	0x200001d8
 8001cb8:	200001f4 	.word	0x200001f4

08001cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d068      	beq.n	8001da4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <xTaskPriorityDisinherit+0xf4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d00a      	beq.n	8001cf2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce0:	f383 8811 	msr	BASEPRI, r3
 8001ce4:	f3bf 8f6f 	isb	sy
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	60fb      	str	r3, [r7, #12]
    }
 8001cee:	bf00      	nop
 8001cf0:	e7fe      	b.n	8001cf0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10a      	bne.n	8001d10 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	60bb      	str	r3, [r7, #8]
    }
 8001d0c:	bf00      	nop
 8001d0e:	e7fe      	b.n	8001d0e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d03e      	beq.n	8001da4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13a      	bne.n	8001da4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc59 	bl	80005ea <uxListRemove>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2201      	movs	r2, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <xTaskPriorityDisinherit+0xf8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <xTaskPriorityDisinherit+0xf8>)
 8001d52:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4619      	mov	r1, r3
 8001d58:	204a      	movs	r0, #74	; 0x4a
 8001d5a:	f001 fd4d 	bl	80037f8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f1c3 0205 	rsb	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <xTaskPriorityDisinherit+0xf8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <xTaskPriorityDisinherit+0xf8>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <xTaskPriorityDisinherit+0xfc>)
 8001d92:	441a      	add	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7fe fbc8 	bl	8000530 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001da4:	697b      	ldr	r3, [r7, #20]
    }
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200000f4 	.word	0x200000f4
 8001db4:	200001d4 	.word	0x200001d4
 8001db8:	200000f8 	.word	0x200000f8

08001dbc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fc09 	bl	80005ea <uxListRemove>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10b      	bne.n	8001df6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2201      	movs	r2, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4013      	ands	r3, r2
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001df4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dfc:	d110      	bne.n	8001e20 <prvAddCurrentTaskToDelayedList+0x64>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	211b      	movs	r1, #27
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fa94 	bl	8004338 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3304      	adds	r3, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4820      	ldr	r0, [pc, #128]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xe0>)
 8001e1a:	f7fe fb89 	bl	8000530 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e1e:	e032      	b.n	8001e86 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d20f      	bcs.n	8001e58 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 fa7a 	bl	8004338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe fb91 	bl	8000578 <vListInsert>
}
 8001e56:	e016      	b.n	8001e86 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 fa6a 	bl	8004338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7fe fb81 	bl	8000578 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d202      	bcs.n	8001e86 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001d0 	.word	0x200001d0
 8001e94:	200000f4 	.word	0x200000f4
 8001e98:	200001d4 	.word	0x200001d4
 8001e9c:	200001b8 	.word	0x200001b8
 8001ea0:	20000188 	.word	0x20000188
 8001ea4:	20000184 	.word	0x20000184
 8001ea8:	200001ec 	.word	0x200001ec

08001eac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001eb6:	f000 fad5 	bl	8002464 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <xTimerCreateTimerTask+0x54>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <xTimerCreateTimerTask+0x58>)
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed0:	490d      	ldr	r1, [pc, #52]	; (8001f08 <xTimerCreateTimerTask+0x5c>)
 8001ed2:	480e      	ldr	r0, [pc, #56]	; (8001f0c <xTimerCreateTimerTask+0x60>)
 8001ed4:	f7ff f90e 	bl	80010f4 <xTaskCreate>
 8001ed8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	f383 8811 	msr	BASEPRI, r3
 8001ee8:	f3bf 8f6f 	isb	sy
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	603b      	str	r3, [r7, #0]
    }
 8001ef2:	bf00      	nop
 8001ef4:	e7fe      	b.n	8001ef4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001ef6:	687b      	ldr	r3, [r7, #4]
    }
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000228 	.word	0x20000228
 8001f04:	2000022c 	.word	0x2000022c
 8001f08:	080067b8 	.word	0x080067b8
 8001f0c:	08002045 	.word	0x08002045

08001f10 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <xTimerGenericCommand+0x2e>
        __asm volatile
 8001f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2c:	f383 8811 	msr	BASEPRI, r3
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	623b      	str	r3, [r7, #32]
    }
 8001f3a:	bf00      	nop
 8001f3c:	e7fe      	b.n	8001f3c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <xTimerGenericCommand+0x98>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02a      	beq.n	8001f9c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	dc18      	bgt.n	8001f8a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f58:	f7ff fe92 	bl	8001c80 <xTaskGetSchedulerState>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d109      	bne.n	8001f76 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <xTimerGenericCommand+0x98>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f107 0114 	add.w	r1, r7, #20
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6e:	f7fe fc57 	bl	8000820 <xQueueGenericSend>
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24
 8001f74:	e012      	b.n	8001f9c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <xTimerGenericCommand+0x98>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f107 0114 	add.w	r1, r7, #20
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	f7fe fc4d 	bl	8000820 <xQueueGenericSend>
 8001f86:	6278      	str	r0, [r7, #36]	; 0x24
 8001f88:	e008      	b.n	8001f9c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <xTimerGenericCommand+0x98>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f107 0114 	add.w	r1, r7, #20
 8001f92:	2300      	movs	r3, #0
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	f7fe fd69 	bl	8000a6c <xQueueGenericSendFromISR>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000228 	.word	0x20000228

08001fac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <prvProcessExpiredTimer+0x94>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fb10 	bl	80005ea <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d022      	beq.n	800201e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	18d1      	adds	r1, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	f000 f8d1 	bl	800218c <prvInsertTimerInActiveList>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01f      	beq.n	8002030 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff88 	bl	8001f10 <xTimerGenericCommand>
 8002000:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d113      	bne.n	8002030 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	60fb      	str	r3, [r7, #12]
    }
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	4798      	blx	r3
    }
 8002038:	bf00      	nop
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000220 	.word	0x20000220

08002044 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f857 	bl	8002104 <prvGetNextExpireTime>
 8002056:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4619      	mov	r1, r3
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f803 	bl	8002068 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002062:	f000 f8d5 	bl	8002210 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002066:	e7f1      	b.n	800204c <prvTimerTask+0x8>

08002068 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002072:	f7ff fa3d 	bl	80014f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f866 	bl	800214c <prvSampleTimeNow>
 8002080:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d130      	bne.n	80020ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <prvProcessTimerOrBlockTask+0x3c>
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	429a      	cmp	r2, r3
 8002094:	d806      	bhi.n	80020a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002096:	f7ff fa39 	bl	800150c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff85 	bl	8001fac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80020a2:	e024      	b.n	80020ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <prvProcessTimerOrBlockTask+0x90>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <prvProcessTimerOrBlockTask+0x50>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <prvProcessTimerOrBlockTask+0x52>
 80020b8:	2300      	movs	r3, #0
 80020ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <prvProcessTimerOrBlockTask+0x94>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe ffdf 	bl	800108c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80020ce:	f7ff fa1d 	bl	800150c <xTaskResumeAll>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <prvProcessTimerOrBlockTask+0x98>)
 80020da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	f3bf 8f6f 	isb	sy
    }
 80020e8:	e001      	b.n	80020ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80020ea:	f7ff fa0f 	bl	800150c <xTaskResumeAll>
    }
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000224 	.word	0x20000224
 80020fc:	20000228 	.word	0x20000228
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <prvGetNextExpireTime+0x44>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <prvGetNextExpireTime+0x16>
 8002116:	2201      	movs	r2, #1
 8002118:	e000      	b.n	800211c <prvGetNextExpireTime+0x18>
 800211a:	2200      	movs	r2, #0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <prvGetNextExpireTime+0x44>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e001      	b.n	8002138 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002138:	68fb      	ldr	r3, [r7, #12]
    }
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000220 	.word	0x20000220

0800214c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002154:	f7ff fa7a 	bl	800164c <xTaskGetTickCount>
 8002158:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <prvSampleTimeNow+0x3c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d205      	bcs.n	8002170 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002164:	f000 f91a 	bl	800239c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e002      	b.n	8002176 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <prvSampleTimeNow+0x3c>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800217c:	68fb      	ldr	r3, [r7, #12]
    }
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000230 	.word	0x20000230

0800218c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d812      	bhi.n	80021d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d302      	bcc.n	80021c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e01b      	b.n	80021fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <prvInsertTimerInActiveList+0x7c>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7fe f9d1 	bl	8000578 <vListInsert>
 80021d6:	e012      	b.n	80021fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d206      	bcs.n	80021ee <prvInsertTimerInActiveList+0x62>
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e007      	b.n	80021fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <prvInsertTimerInActiveList+0x80>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3304      	adds	r3, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7fe f9bd 	bl	8000578 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80021fe:	697b      	ldr	r3, [r7, #20]
    }
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000224 	.word	0x20000224
 800220c:	20000220 	.word	0x20000220

08002210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002216:	e0ae      	b.n	8002376 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f2c0 80aa 	blt.w	8002374 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	3304      	adds	r3, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f9da 	bl	80005ea <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff87 	bl	800214c <prvSampleTimeNow>
 800223e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b09      	cmp	r3, #9
 8002244:	f200 8097 	bhi.w	8002376 <prvProcessReceivedCommands+0x166>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <prvProcessReceivedCommands+0x40>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	08002279 	.word	0x08002279
 8002254:	08002279 	.word	0x08002279
 8002258:	08002279 	.word	0x08002279
 800225c:	080022ed 	.word	0x080022ed
 8002260:	08002301 	.word	0x08002301
 8002264:	0800234b 	.word	0x0800234b
 8002268:	08002279 	.word	0x08002279
 800226c:	08002279 	.word	0x08002279
 8002270:	080022ed 	.word	0x080022ed
 8002274:	08002301 	.word	0x08002301
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	18d1      	adds	r1, r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002298:	f7ff ff78 	bl	800218c <prvInsertTimerInActiveList>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d069      	beq.n	8002376 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022a8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05e      	beq.n	8002376 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	441a      	add	r2, r3
 80022c0:	2300      	movs	r3, #0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ca:	f7ff fe21 	bl	8001f10 <xTimerGenericCommand>
 80022ce:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d14f      	bne.n	8002376 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	61bb      	str	r3, [r7, #24]
    }
 80022e8:	bf00      	nop
 80022ea:	e7fe      	b.n	80022ea <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80022fe:	e03a      	b.n	8002376 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	b2da      	uxtb	r2, r3
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	617b      	str	r3, [r7, #20]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	18d1      	adds	r1, r2, r3
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002344:	f7ff ff22 	bl	800218c <prvInsertTimerInActiveList>
                        break;
 8002348:	e015      	b.n	8002376 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235a:	f000 fbe9 	bl	8002b30 <vPortFree>
 800235e:	e00a      	b.n	8002376 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002372:	e000      	b.n	8002376 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002374:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <prvProcessReceivedCommands+0x188>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f107 0108 	add.w	r1, r7, #8
 800237e:	2200      	movs	r2, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fc31 	bl	8000be8 <xQueueReceive>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f af45 	bne.w	8002218 <prvProcessReceivedCommands+0x8>
        }
    }
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000228 	.word	0x20000228

0800239c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023a2:	e048      	b.n	8002436 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <prvSwitchTimerLists+0xc0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <prvSwitchTimerLists+0xc0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f914 	bl	80005ea <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02e      	beq.n	8002436 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90e      	bls.n	8002408 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <prvSwitchTimerLists+0xc0>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7fe f8b9 	bl	8000578 <vListInsert>
 8002406:	e016      	b.n	8002436 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002408:	2300      	movs	r3, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2300      	movs	r3, #0
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	2100      	movs	r1, #0
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fd7c 	bl	8001f10 <xTimerGenericCommand>
 8002418:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	603b      	str	r3, [r7, #0]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <prvSwitchTimerLists+0xc0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1b1      	bne.n	80023a4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <prvSwitchTimerLists+0xc0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <prvSwitchTimerLists+0xc4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <prvSwitchTimerLists+0xc0>)
 800244c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <prvSwitchTimerLists+0xc4>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	6013      	str	r3, [r2, #0]
    }
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000220 	.word	0x20000220
 8002460:	20000224 	.word	0x20000224

08002464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002468:	f000 f95e 	bl	8002728 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <prvCheckForValidListAndQueue+0x54>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <prvCheckForValidListAndQueue+0x58>)
 8002476:	f7fe f82e 	bl	80004d6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800247a:	4811      	ldr	r0, [pc, #68]	; (80024c0 <prvCheckForValidListAndQueue+0x5c>)
 800247c:	f7fe f82b 	bl	80004d6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <prvCheckForValidListAndQueue+0x60>)
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <prvCheckForValidListAndQueue+0x58>)
 8002484:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <prvCheckForValidListAndQueue+0x64>)
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <prvCheckForValidListAndQueue+0x5c>)
 800248a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800248c:	2200      	movs	r2, #0
 800248e:	210c      	movs	r1, #12
 8002490:	200a      	movs	r0, #10
 8002492:	f7fe f93d 	bl	8000710 <xQueueGenericCreate>
 8002496:	4603      	mov	r3, r0
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <prvCheckForValidListAndQueue+0x54>)
 800249a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <prvCheckForValidListAndQueue+0x54>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <prvCheckForValidListAndQueue+0x54>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4908      	ldr	r1, [pc, #32]	; (80024cc <prvCheckForValidListAndQueue+0x68>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fdbc 	bl	8001028 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80024b0:	f000 f96a 	bl	8002788 <vPortExitCritical>
    }
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000228 	.word	0x20000228
 80024bc:	200001f8 	.word	0x200001f8
 80024c0:	2000020c 	.word	0x2000020c
 80024c4:	20000220 	.word	0x20000220
 80024c8:	20000224 	.word	0x20000224
 80024cc:	080067c0 	.word	0x080067c0

080024d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3b04      	subs	r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3b04      	subs	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3b04      	subs	r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <pxPortInitialiseStack+0x64>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3b14      	subs	r3, #20
 800250a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b04      	subs	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f06f 0202 	mvn.w	r2, #2
 800251e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b20      	subs	r3, #32
 8002524:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	08002539 	.word	0x08002539

08002538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <prvTaskExitError+0x54>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254a:	d00a      	beq.n	8002562 <prvTaskExitError+0x2a>
        __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	60fb      	str	r3, [r7, #12]
    }
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <prvTaskExitError+0x28>
        __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	60bb      	str	r3, [r7, #8]
    }
 8002574:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002576:	bf00      	nop
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0fc      	beq.n	8002578 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20000008 	.word	0x20000008

08002590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <pxCurrentTCBConst2>)
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	6808      	ldr	r0, [r1, #0]
 8002596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800259a:	f380 8809 	msr	PSP, r0
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f380 8811 	msr	BASEPRI, r0
 80025aa:	4770      	bx	lr
 80025ac:	f3af 8000 	nop.w

080025b0 <pxCurrentTCBConst2>:
 80025b0:	200000f4 	.word	0x200000f4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop

080025b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80025b8:	4808      	ldr	r0, [pc, #32]	; (80025dc <prvPortStartFirstTask+0x24>)
 80025ba:	6800      	ldr	r0, [r0, #0]
 80025bc:	6800      	ldr	r0, [r0, #0]
 80025be:	f380 8808 	msr	MSP, r0
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f380 8814 	msr	CONTROL, r0
 80025ca:	b662      	cpsie	i
 80025cc:	b661      	cpsie	f
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	df00      	svc	0
 80025d8:	bf00      	nop
 80025da:	0000      	.short	0x0000
 80025dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop

080025e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <xPortStartScheduler+0x120>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a46      	ldr	r2, [pc, #280]	; (8002708 <xPortStartScheduler+0x124>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10a      	bne.n	800260a <xPortStartScheduler+0x26>
        __asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	613b      	str	r3, [r7, #16]
    }
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <xPortStartScheduler+0x120>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <xPortStartScheduler+0x128>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10a      	bne.n	800262a <xPortStartScheduler+0x46>
        __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	60fb      	str	r3, [r7, #12]
    }
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <xPortStartScheduler+0x12c>)
 800262c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <xPortStartScheduler+0x130>)
 8002650:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <xPortStartScheduler+0x134>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002658:	e009      	b.n	800266e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <xPortStartScheduler+0x134>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3b01      	subs	r3, #1
 8002660:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <xPortStartScheduler+0x134>)
 8002662:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d0ef      	beq.n	800265a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800267a:	4b27      	ldr	r3, [pc, #156]	; (8002718 <xPortStartScheduler+0x134>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00a      	beq.n	800269c <xPortStartScheduler+0xb8>
        __asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	60bb      	str	r3, [r7, #8]
    }
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <xPortStartScheduler+0x134>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <xPortStartScheduler+0x134>)
 80026a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <xPortStartScheduler+0x134>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <xPortStartScheduler+0x134>)
 80026b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <xPortStartScheduler+0x138>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <xPortStartScheduler+0x138>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <xPortStartScheduler+0x138>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <xPortStartScheduler+0x138>)
 80026cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80026d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80026d2:	f000 f8e3 	bl	800289c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <xPortStartScheduler+0x13c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80026dc:	f000 f8fc 	bl	80028d8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <xPortStartScheduler+0x140>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <xPortStartScheduler+0x140>)
 80026e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80026ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80026ec:	f7ff ff64 	bl	80025b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80026f0:	f7ff f86a 	bl	80017c8 <vTaskSwitchContext>
    prvTaskExitError();
 80026f4:	f7ff ff20 	bl	8002538 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	410fc271 	.word	0x410fc271
 800270c:	410fc270 	.word	0x410fc270
 8002710:	e000e400 	.word	0xe000e400
 8002714:	20000234 	.word	0x20000234
 8002718:	20000238 	.word	0x20000238
 800271c:	e000ed20 	.word	0xe000ed20
 8002720:	20000008 	.word	0x20000008
 8002724:	e000ef34 	.word	0xe000ef34

08002728 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
        __asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	607b      	str	r3, [r7, #4]
    }
 8002740:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <vPortEnterCritical+0x58>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <vPortEnterCritical+0x58>)
 800274a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <vPortEnterCritical+0x58>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10f      	bne.n	8002774 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <vPortEnterCritical+0x5c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <vPortEnterCritical+0x4c>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	603b      	str	r3, [r7, #0]
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <vPortEnterCritical+0x4a>
    }
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	20000008 	.word	0x20000008
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <vPortExitCritical+0x50>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <vPortExitCritical+0x24>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	607b      	str	r3, [r7, #4]
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <vPortExitCritical+0x50>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <vPortExitCritical+0x50>)
 80027b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <vPortExitCritical+0x50>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <vPortExitCritical+0x42>
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f383 8811 	msr	BASEPRI, r3
    }
 80027c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008
 80027dc:	00000000 	.word	0x00000000

080027e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027e0:	f3ef 8009 	mrs	r0, PSP
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <pxCurrentTCBConst>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f01e 0f10 	tst.w	lr, #16
 80027f0:	bf08      	it	eq
 80027f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fa:	6010      	str	r0, [r2, #0]
 80027fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002804:	f380 8811 	msr	BASEPRI, r0
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f7fe ffda 	bl	80017c8 <vTaskSwitchContext>
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f380 8811 	msr	BASEPRI, r0
 800281c:	bc09      	pop	{r0, r3}
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	6808      	ldr	r0, [r1, #0]
 8002822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002826:	f01e 0f10 	tst.w	lr, #16
 800282a:	bf08      	it	eq
 800282c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002830:	f380 8809 	msr	PSP, r0
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	f3af 8000 	nop.w

08002840 <pxCurrentTCBConst>:
 8002840:	200000f4 	.word	0x200000f4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop

08002848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
        __asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	607b      	str	r3, [r7, #4]
    }
 8002860:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002862:	f001 fc0d 	bl	8004080 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002866:	f7fe ff01 	bl	800166c <xTaskIncrementTick>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002870:	f001 fc64 	bl	800413c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <SysTick_Handler+0x50>)
 8002876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e001      	b.n	8002882 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800287e:	f001 fc41 	bl	8004104 <SEGGER_SYSVIEW_RecordExitISR>
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f383 8811 	msr	BASEPRI, r3
    }
 800288c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <vPortSetupTimerInterrupt+0x2c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <vPortSetupTimerInterrupt+0x30>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <vPortSetupTimerInterrupt+0x34>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <vPortSetupTimerInterrupt+0x38>)
 80028b4:	3b01      	subs	r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <vPortSetupTimerInterrupt+0x2c>)
 80028ba:	2207      	movs	r2, #7
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e010 	.word	0xe000e010
 80028cc:	e000e018 	.word	0xe000e018
 80028d0:	20000000 	.word	0x20000000
 80028d4:	e000e014 	.word	0xe000e014

080028d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80028d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80028e8 <vPortEnableVFP+0x10>
 80028dc:	6801      	ldr	r1, [r0, #0]
 80028de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028e2:	6001      	str	r1, [r0, #0]
 80028e4:	4770      	bx	lr
 80028e6:	0000      	.short	0x0000
 80028e8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop

080028f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	d914      	bls.n	800292c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <vPortValidateInterruptPriority+0x70>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <vPortValidateInterruptPriority+0x74>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	7afa      	ldrb	r2, [r7, #11]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20a      	bcs.n	800292c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	607b      	str	r3, [r7, #4]
    }
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <vPortValidateInterruptPriority+0x78>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <vPortValidateInterruptPriority+0x7c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d90a      	bls.n	8002952 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	603b      	str	r3, [r7, #0]
    }
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <vPortValidateInterruptPriority+0x60>
    }
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e3f0 	.word	0xe000e3f0
 8002964:	20000234 	.word	0x20000234
 8002968:	e000ed0c 	.word	0xe000ed0c
 800296c:	20000238 	.word	0x20000238

08002970 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800297c:	f7fe fdb8 	bl	80014f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002980:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <pvPortMalloc+0x1a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002988:	f000 f934 	bl	8002bf4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800298c:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <pvPortMalloc+0x1ac>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 80a7 	bne.w	8002ae8 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02d      	beq.n	80029fc <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80029a0:	2208      	movs	r2, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d227      	bcs.n	80029fc <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80029ac:	2208      	movs	r2, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d021      	beq.n	8002a02 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f023 0307 	bic.w	r3, r3, #7
 80029c4:	3308      	adds	r3, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d214      	bcs.n	80029f6 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f023 0307 	bic.w	r3, r3, #7
 80029d2:	3308      	adds	r3, #8
 80029d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <pvPortMalloc+0x92>
        __asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	617b      	str	r3, [r7, #20]
    }
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029fa:	e002      	b.n	8002a02 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	e000      	b.n	8002a04 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a02:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d06e      	beq.n	8002ae8 <pvPortMalloc+0x178>
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <pvPortMalloc+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d869      	bhi.n	8002ae8 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a14:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <pvPortMalloc+0x1b4>)
 8002a16:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <pvPortMalloc+0x1b4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a1e:	e004      	b.n	8002a2a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d903      	bls.n	8002a3c <pvPortMalloc+0xcc>
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f1      	bne.n	8002a20 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <pvPortMalloc+0x1a8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d050      	beq.n	8002ae8 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4413      	add	r3, r2
 8002a4e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	1ad2      	subs	r2, r2, r3
 8002a60:	2308      	movs	r3, #8
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d91f      	bls.n	8002aa8 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <pvPortMalloc+0x120>
        __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	613b      	str	r3, [r7, #16]
    }
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002aa2:	69b8      	ldr	r0, [r7, #24]
 8002aa4:	f000 f908 	bl	8002cb8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <pvPortMalloc+0x1b0>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <pvPortMalloc+0x1b0>)
 8002ab4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <pvPortMalloc+0x1b0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <pvPortMalloc+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d203      	bcs.n	8002aca <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <pvPortMalloc+0x1b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <pvPortMalloc+0x1b8>)
 8002ac8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <pvPortMalloc+0x1ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <pvPortMalloc+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <pvPortMalloc+0x1bc>)
 8002ae6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002ae8:	f7fe fd10 	bl	800150c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <pvPortMalloc+0x19c>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	60fb      	str	r3, [r7, #12]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <pvPortMalloc+0x19a>
    return pvReturn;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20012e44 	.word	0x20012e44
 8002b1c:	20012e58 	.word	0x20012e58
 8002b20:	20012e48 	.word	0x20012e48
 8002b24:	20012e3c 	.word	0x20012e3c
 8002b28:	20012e4c 	.word	0x20012e4c
 8002b2c:	20012e50 	.word	0x20012e50

08002b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04d      	beq.n	8002bde <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002b42:	2308      	movs	r3, #8
 8002b44:	425b      	negs	r3, r3
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4413      	add	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <vPortFree+0xb8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <vPortFree+0x44>
        __asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	60fb      	str	r3, [r7, #12]
    }
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <vPortFree+0x62>
        __asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	60bb      	str	r3, [r7, #8]
    }
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <vPortFree+0xb8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01e      	beq.n	8002bde <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11a      	bne.n	8002bde <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <vPortFree+0xb8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002bb8:	f7fe fc9a 	bl	80014f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <vPortFree+0xbc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <vPortFree+0xbc>)
 8002bc8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002bca:	6938      	ldr	r0, [r7, #16]
 8002bcc:	f000 f874 	bl	8002cb8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <vPortFree+0xc0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <vPortFree+0xc0>)
 8002bd8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002bda:	f7fe fc97 	bl	800150c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20012e58 	.word	0x20012e58
 8002bec:	20012e48 	.word	0x20012e48
 8002bf0:	20012e54 	.word	0x20012e54

08002bf4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bfa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002bfe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <prvHeapInit+0xac>)
 8002c02:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3307      	adds	r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <prvHeapInit+0xac>)
 8002c24:	4413      	add	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <prvHeapInit+0xb0>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <prvHeapInit+0xb0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002c40:	2208      	movs	r2, #8
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0307 	bic.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <prvHeapInit+0xb4>)
 8002c54:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <prvHeapInit+0xb4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <prvHeapInit+0xb4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	1ad2      	subs	r2, r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <prvHeapInit+0xb4>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <prvHeapInit+0xb8>)
 8002c82:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <prvHeapInit+0xbc>)
 8002c8a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <prvHeapInit+0xc0>)
 8002c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	2000023c 	.word	0x2000023c
 8002ca4:	20012e3c 	.word	0x20012e3c
 8002ca8:	20012e44 	.word	0x20012e44
 8002cac:	20012e4c 	.word	0x20012e4c
 8002cb0:	20012e48 	.word	0x20012e48
 8002cb4:	20012e58 	.word	0x20012e58

08002cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cc0:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <prvInsertBlockIntoFreeList+0xac>)
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e002      	b.n	8002ccc <prvInsertBlockIntoFreeList+0x14>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d8f7      	bhi.n	8002cc6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d108      	bne.n	8002cfa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	441a      	add	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d118      	bne.n	8002d40 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <prvInsertBlockIntoFreeList+0xb0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d00d      	beq.n	8002d36 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e008      	b.n	8002d48 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <prvInsertBlockIntoFreeList+0xb0>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e003      	b.n	8002d48 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d002      	beq.n	8002d56 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20012e3c 	.word	0x20012e3c
 8002d68:	20012e44 	.word	0x20012e44

08002d6c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	492b      	ldr	r1, [pc, #172]	; (8002e2c <SYSVIEW_AddTask+0xc0>)
 8002d7e:	68b8      	ldr	r0, [r7, #8]
 8002d80:	f002 ffd4 	bl	8005d2c <memcmp>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d04b      	beq.n	8002e22 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b07      	cmp	r3, #7
 8002d90:	d903      	bls.n	8002d9a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002d92:	4828      	ldr	r0, [pc, #160]	; (8002e34 <SYSVIEW_AddTask+0xc8>)
 8002d94:	f001 fc1c 	bl	80045d0 <SEGGER_SYSVIEW_Warn>
    return;
 8002d98:	e044      	b.n	8002e24 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4926      	ldr	r1, [pc, #152]	; (8002e38 <SYSVIEW_AddTask+0xcc>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4921      	ldr	r1, [pc, #132]	; (8002e38 <SYSVIEW_AddTask+0xcc>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	491b      	ldr	r1, [pc, #108]	; (8002e38 <SYSVIEW_AddTask+0xcc>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4916      	ldr	r1, [pc, #88]	; (8002e38 <SYSVIEW_AddTask+0xcc>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	330c      	adds	r3, #12
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4910      	ldr	r1, [pc, #64]	; (8002e38 <SYSVIEW_AddTask+0xcc>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3310      	adds	r3, #16
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <SYSVIEW_AddTask+0xc4>)
 8002e0e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f80e 	bl	8002e3c <SYSVIEW_SendTaskInfo>
 8002e20:	e000      	b.n	8002e24 <SYSVIEW_AddTask+0xb8>
    return;
 8002e22:	bf00      	nop

}
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	080067c8 	.word	0x080067c8
 8002e30:	20012efc 	.word	0x20012efc
 8002e34:	080067d0 	.word	0x080067d0
 8002e38:	20012e5c 	.word	0x20012e5c

08002e3c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	2214      	movs	r2, #20
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 ff88 	bl	8005d68 <memset>
  TaskInfo.TaskID     = TaskID;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 ffdb 	bl	8003e2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002e76:	bf00      	nop
 8002e78:	3728      	adds	r7, #40	; 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <USART2_IRQHandler+0x80>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <USART2_IRQHandler+0x84>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 030b 	and.w	r3, r3, #11
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <USART2_IRQHandler+0x88>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <USART2_IRQHandler+0x88>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	79fa      	ldrb	r2, [r7, #7]
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01a      	beq.n	8002efa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <USART2_IRQHandler+0x8c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <USART2_IRQHandler+0x8c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1dfa      	adds	r2, r7, #7
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4798      	blx	r3
 8002ed6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <USART2_IRQHandler+0x90>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <USART2_IRQHandler+0x90>)
 8002ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e006      	b.n	8002efa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <USART2_IRQHandler+0x80>)
 8002eee:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002ef0:	79fa      	ldrb	r2, [r7, #7]
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <USART2_IRQHandler+0x84>)
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e000      	b.n	8002efa <USART2_IRQHandler+0x7a>
      return;
 8002ef8:	bf00      	nop
    }
  }
}
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40004400 	.word	0x40004400
 8002f04:	40004404 	.word	0x40004404
 8002f08:	20012f00 	.word	0x20012f00
 8002f0c:	20012f04 	.word	0x20012f04
 8002f10:	4000440c 	.word	0x4000440c

08002f14 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	4000440c 	.word	0x4000440c

08002f34 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <_DoInit+0x98>)
 8002f3c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2203      	movs	r2, #3
 8002f42:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <_DoInit+0x9c>)
 8002f4e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <_DoInit+0xa0>)
 8002f54:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <_DoInit+0x9c>)
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <_DoInit+0xa4>)
 8002f7a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3307      	adds	r3, #7
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <_DoInit+0xa8>)
 8002f9a:	6810      	ldr	r0, [r2, #0]
 8002f9c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002f9e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <_DoInit+0xac>)
 8002fa6:	6810      	ldr	r0, [r2, #0]
 8002fa8:	6018      	str	r0, [r3, #0]
 8002faa:	8891      	ldrh	r1, [r2, #4]
 8002fac:	7992      	ldrb	r2, [r2, #6]
 8002fae:	8099      	strh	r1, [r3, #4]
 8002fb0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002fb2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002fbc:	f3bf 8f5f 	dmb	sy
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20012f08 	.word	0x20012f08
 8002fd0:	08006820 	.word	0x08006820
 8002fd4:	20012fb0 	.word	0x20012fb0
 8002fd8:	200133b0 	.word	0x200133b0
 8002fdc:	0800682c 	.word	0x0800682c
 8002fe0:	08006830 	.word	0x08006830

08002fe4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	429a      	cmp	r2, r3
 8003006:	d905      	bls.n	8003014 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	e007      	b.n	8003024 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	1acb      	subs	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3b01      	subs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	4293      	cmp	r3, r2
 8003030:	bf28      	it	cs
 8003032:	4613      	movcs	r3, r2
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4293      	cmp	r3, r2
 800303c:	bf28      	it	cs
 800303e:	4613      	movcs	r3, r2
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	6978      	ldr	r0, [r7, #20]
 8003052:	f002 fe7b 	bl	8005d4c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	4413      	add	r3, r2
 800305c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	4413      	add	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	4413      	add	r3, r2
 8003074:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d101      	bne.n	8003084 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003084:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1b2      	bne.n	8002ffa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003094:	6a3b      	ldr	r3, [r7, #32]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3728      	adds	r7, #40	; 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800309e:	b580      	push	{r7, lr}
 80030a0:	b088      	sub	sp, #32
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d911      	bls.n	80030e6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6938      	ldr	r0, [r7, #16]
 80030d2:	f002 fe3b 	bl	8005d4c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80030d6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80030e4:	e01f      	b.n	8003126 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	6938      	ldr	r0, [r7, #16]
 80030fa:	f002 fe27 	bl	8005d4c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4619      	mov	r1, r3
 8003116:	6938      	ldr	r0, [r7, #16]
 8003118:	f002 fe18 	bl	8005d4c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800311c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	60da      	str	r2, [r3, #12]
}
 8003126:	bf00      	nop
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800312e:	b480      	push	{r7}
 8003130:	b087      	sub	sp, #28
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	d808      	bhi.n	800315c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad2      	subs	r2, r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	3b01      	subs	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e004      	b.n	8003166 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003166:	697b      	ldr	r3, [r7, #20]
}
 8003168:	4618      	mov	r0, r3
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003180:	4b3e      	ldr	r3, [pc, #248]	; (800327c <SEGGER_RTT_ReadNoLock+0x108>)
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <SEGGER_RTT_ReadNoLock+0x1e>
 800318e:	f7ff fed1 	bl	8002f34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	3360      	adds	r3, #96	; 0x60
 800319e:	4a37      	ldr	r2, [pc, #220]	; (800327c <SEGGER_RTT_ReadNoLock+0x108>)
 80031a0:	4413      	add	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80031b4:	2300      	movs	r3, #0
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80031b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d92b      	bls.n	8003218 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bf28      	it	cs
 80031d2:	4613      	movcs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	6939      	ldr	r1, [r7, #16]
 80031e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031e6:	f002 fdb1 	bl	8005d4c <memcpy>
    NumBytesRead += NumBytesRem;
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4413      	add	r3, r2
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	4413      	add	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4413      	add	r3, r2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	429a      	cmp	r2, r3
 8003212:	d101      	bne.n	8003218 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4293      	cmp	r3, r2
 8003226:	bf28      	it	cs
 8003228:	4613      	movcs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	4413      	add	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	6939      	ldr	r1, [r7, #16]
 8003240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003242:	f002 fd83 	bl	8005d4c <memcpy>
    NumBytesRead += NumBytesRem;
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4413      	add	r3, r2
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	4413      	add	r3, r2
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800325e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4413      	add	r3, r2
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003270:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003274:	4618      	mov	r0, r3
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20012f08 	.word	0x20012f08

08003280 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <SEGGER_RTT_WriteNoLock+0x9c>)
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d029      	beq.n	80032fe <SEGGER_RTT_WriteNoLock+0x7e>
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d82e      	bhi.n	800330c <SEGGER_RTT_WriteNoLock+0x8c>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <SEGGER_RTT_WriteNoLock+0x38>
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d013      	beq.n	80032de <SEGGER_RTT_WriteNoLock+0x5e>
 80032b6:	e029      	b.n	800330c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7ff ff38 	bl	800312e <_GetAvailWriteSpace>
 80032be:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d202      	bcs.n	80032ce <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80032cc:	e021      	b.n	8003312 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	69b9      	ldr	r1, [r7, #24]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff fee1 	bl	800309e <_WriteNoCheck>
    break;
 80032dc:	e019      	b.n	8003312 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f7ff ff25 	bl	800312e <_GetAvailWriteSpace>
 80032e4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bf28      	it	cs
 80032ee:	4613      	movcs	r3, r2
 80032f0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	69b9      	ldr	r1, [r7, #24]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff fed1 	bl	800309e <_WriteNoCheck>
    break;
 80032fc:	e009      	b.n	8003312 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	69b9      	ldr	r1, [r7, #24]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff fe6e 	bl	8002fe4 <_WriteBlocking>
 8003308:	61f8      	str	r0, [r7, #28]
    break;
 800330a:	e002      	b.n	8003312 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
    break;
 8003310:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003312:	69fb      	ldr	r3, [r7, #28]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20012f08 	.word	0x20012f08

08003320 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <SEGGER_RTT_Write+0x48>)
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <SEGGER_RTT_Write+0x1e>
 800333a:	f7ff fdfb 	bl	8002f34 <_DoInit>
  SEGGER_RTT_LOCK();
 800333e:	f3ef 8311 	mrs	r3, BASEPRI
 8003342:	f04f 0120 	mov.w	r1, #32
 8003346:	f381 8811 	msr	BASEPRI, r1
 800334a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff95 	bl	8003280 <SEGGER_RTT_WriteNoLock>
 8003356:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20012f08 	.word	0x20012f08

0800336c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800337c:	e002      	b.n	8003384 <_EncodeStr+0x18>
    Len++;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	3301      	adds	r3, #1
 8003382:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f6      	bne.n	800337e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d901      	bls.n	800339c <_EncodeStr+0x30>
    Len = Limit;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2bfe      	cmp	r3, #254	; 0xfe
 80033a0:	d806      	bhi.n	80033b0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e011      	b.n	80033d4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	60fa      	str	r2, [r7, #12]
 80033b6:	22ff      	movs	r2, #255	; 0xff
 80033b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	0a19      	lsrs	r1, r3, #8
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	60fa      	str	r2, [r7, #12]
 80033d0:	b2ca      	uxtb	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033d8:	e00a      	b.n	80033f0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	1c53      	adds	r3, r2, #1
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	60f9      	str	r1, [r7, #12]
 80033e6:	7812      	ldrb	r2, [r2, #0]
 80033e8:	701a      	strb	r2, [r3, #0]
    n++;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3301      	adds	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3f0      	bcc.n	80033da <_EncodeStr+0x6e>
  }
  return pPayload;
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <_HandleIncomingPacket+0xe0>)
 8003428:	7e1b      	ldrb	r3, [r3, #24]
 800342a:	4618      	mov	r0, r3
 800342c:	1cfb      	adds	r3, r7, #3
 800342e:	2201      	movs	r2, #1
 8003430:	4619      	mov	r1, r3
 8003432:	f7ff fe9f 	bl	8003174 <SEGGER_RTT_ReadNoLock>
 8003436:	4603      	mov	r3, r0
 8003438:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	dd54      	ble.n	80034ea <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d032      	beq.n	80034ac <_HandleIncomingPacket+0x8c>
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	dc42      	bgt.n	80034d0 <_HandleIncomingPacket+0xb0>
 800344a:	2b07      	cmp	r3, #7
 800344c:	dc16      	bgt.n	800347c <_HandleIncomingPacket+0x5c>
 800344e:	2b00      	cmp	r3, #0
 8003450:	dd3e      	ble.n	80034d0 <_HandleIncomingPacket+0xb0>
 8003452:	3b01      	subs	r3, #1
 8003454:	2b06      	cmp	r3, #6
 8003456:	d83b      	bhi.n	80034d0 <_HandleIncomingPacket+0xb0>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <_HandleIncomingPacket+0x40>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003483 	.word	0x08003483
 8003464:	08003489 	.word	0x08003489
 8003468:	0800348f 	.word	0x0800348f
 800346c:	08003495 	.word	0x08003495
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034a7 	.word	0x080034a7
 800347c:	2b7f      	cmp	r3, #127	; 0x7f
 800347e:	d036      	beq.n	80034ee <_HandleIncomingPacket+0xce>
 8003480:	e026      	b.n	80034d0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003482:	f000 fb57 	bl	8003b34 <SEGGER_SYSVIEW_Start>
      break;
 8003486:	e037      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003488:	f000 fc10 	bl	8003cac <SEGGER_SYSVIEW_Stop>
      break;
 800348c:	e034      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800348e:	f000 fdc5 	bl	800401c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003492:	e031      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003494:	f000 fdae 	bl	8003ff4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003498:	e02e      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800349a:	f000 fc2d 	bl	8003cf8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800349e:	e02b      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80034a0:	f001 f858 	bl	8004554 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80034a4:	e028      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80034a6:	f001 f837 	bl	8004518 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80034aa:	e025      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <_HandleIncomingPacket+0xe0>)
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
 80034b0:	4618      	mov	r0, r3
 80034b2:	1cfb      	adds	r3, r7, #3
 80034b4:	2201      	movs	r2, #1
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7ff fe5c 	bl	8003174 <SEGGER_RTT_ReadNoLock>
 80034bc:	4603      	mov	r3, r0
 80034be:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	dd15      	ble.n	80034f2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 ffa5 	bl	8004418 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80034ce:	e010      	b.n	80034f2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da0e      	bge.n	80034f6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <_HandleIncomingPacket+0xe0>)
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	4618      	mov	r0, r3
 80034de:	1cfb      	adds	r3, r7, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7ff fe46 	bl	8003174 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80034e8:	e005      	b.n	80034f6 <_HandleIncomingPacket+0xd6>
    }
  }
 80034ea:	bf00      	nop
 80034ec:	e004      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e002      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <_HandleIncomingPacket+0xd8>
      break;
 80034f6:	bf00      	nop
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200133c0 	.word	0x200133c0

08003504 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800350a:	2301      	movs	r3, #1
 800350c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003518:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	e00b      	b.n	8003538 <_TrySendOverflowPacket+0x34>
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	b2da      	uxtb	r2, r3
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	62f9      	str	r1, [r7, #44]	; 0x2c
 800352a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	09db      	lsrs	r3, r3, #7
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b7f      	cmp	r3, #127	; 0x7f
 800353c:	d8f0      	bhi.n	8003520 <_TrySendOverflowPacket+0x1c>
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <_TrySendOverflowPacket+0xe4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	e00b      	b.n	8003580 <_TrySendOverflowPacket+0x7c>
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	6279      	str	r1, [r7, #36]	; 0x24
 8003572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	09db      	lsrs	r3, r3, #7
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b7f      	cmp	r3, #127	; 0x7f
 8003584:	d8f0      	bhi.n	8003568 <_TrySendOverflowPacket+0x64>
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	627a      	str	r2, [r7, #36]	; 0x24
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	4618      	mov	r0, r3
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fc fe1a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80035ac:	4603      	mov	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80035b0:	f7ff fcb0 	bl	8002f14 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e004      	b.n	80035d8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <_TrySendOverflowPacket+0xe0>)
 80035d6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80035d8:	693b      	ldr	r3, [r7, #16]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3730      	adds	r7, #48	; 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200133c0 	.word	0x200133c0
 80035e8:	e0001004 	.word	0xe0001004

080035ec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80035f8:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <_SendPacket+0x1c4>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d010      	beq.n	8003622 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <_SendPacket+0x1c4>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a5 	beq.w	8003754 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <_SendPacket+0x1c4>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d109      	bne.n	8003626 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003612:	f7ff ff77 	bl	8003504 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003616:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <_SendPacket+0x1c4>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 809c 	bne.w	8003758 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003620:	e001      	b.n	8003626 <_SendPacket+0x3a>
    goto Send;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <_SendPacket+0x3c>
Send:
 8003626:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b1f      	cmp	r3, #31
 800362c:	d809      	bhi.n	8003642 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800362e:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <_SendPacket+0x1c4>)
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 808d 	bne.w	800375c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b17      	cmp	r3, #23
 8003646:	d807      	bhi.n	8003658 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e03d      	b.n	80036d4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b7f      	cmp	r3, #127	; 0x7f
 8003664:	d912      	bls.n	800368c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	09da      	lsrs	r2, r3, #7
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	3a01      	subs	r2, #1
 800367e:	60fa      	str	r2, [r7, #12]
 8003680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e006      	b.n	800369a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b7f      	cmp	r3, #127	; 0x7f
 800369e:	d912      	bls.n	80036c6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	09da      	lsrs	r2, r3, #7
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	3a01      	subs	r2, #1
 80036b8:	60fa      	str	r2, [r7, #12]
 80036ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e006      	b.n	80036d4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80036d4:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <_SendPacket+0x1c8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <_SendPacket+0x1c4>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	e00b      	b.n	8003706 <_SendPacket+0x11a>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	6279      	str	r1, [r7, #36]	; 0x24
 80036f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	09db      	lsrs	r3, r3, #7
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2b7f      	cmp	r3, #127	; 0x7f
 800370a:	d8f0      	bhi.n	80036ee <_SendPacket+0x102>
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	627a      	str	r2, [r7, #36]	; 0x24
 8003712:	6a3a      	ldr	r2, [r7, #32]
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <_SendPacket+0x1c4>)
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	4618      	mov	r0, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	461a      	mov	r2, r3
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	f7fc fd58 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003730:	4603      	mov	r3, r0
 8003732:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003734:	f7ff fbee 	bl	8002f14 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <_SendPacket+0x1c4>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	60d3      	str	r3, [r2, #12]
 8003744:	e00b      	b.n	800375e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <_SendPacket+0x1c4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <_SendPacket+0x1c4>)
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e004      	b.n	800375e <_SendPacket+0x172>
    goto SendDone;
 8003754:	bf00      	nop
 8003756:	e002      	b.n	800375e <_SendPacket+0x172>
      goto SendDone;
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <_SendPacket+0x172>
      goto SendDone;
 800375c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <_SendPacket+0x1c4>)
 8003760:	7e1b      	ldrb	r3, [r3, #24]
 8003762:	4619      	mov	r1, r3
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <_SendPacket+0x1cc>)
 8003766:	460b      	mov	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	440b      	add	r3, r1
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	336c      	adds	r3, #108	; 0x6c
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <_SendPacket+0x1c4>)
 8003776:	7e1b      	ldrb	r3, [r3, #24]
 8003778:	4618      	mov	r0, r3
 800377a:	490f      	ldr	r1, [pc, #60]	; (80037b8 <_SendPacket+0x1cc>)
 800377c:	4603      	mov	r3, r0
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4403      	add	r3, r0
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	3370      	adds	r3, #112	; 0x70
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d00b      	beq.n	80037a6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <_SendPacket+0x1c4>)
 8003790:	789b      	ldrb	r3, [r3, #2]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <_SendPacket+0x1c4>)
 8003798:	2201      	movs	r2, #1
 800379a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800379c:	f7ff fe40 	bl	8003420 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <_SendPacket+0x1c4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80037a6:	bf00      	nop
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200133c0 	.word	0x200133c0
 80037b4:	e0001004 	.word	0xe0001004
 80037b8:	20012f08 	.word	0x20012f08

080037bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80037c4:	f3ef 8311 	mrs	r3, BASEPRI
 80037c8:	f04f 0120 	mov.w	r1, #32
 80037cc:	f381 8811 	msr	BASEPRI, r1
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4808      	ldr	r0, [pc, #32]	; (80037f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80037d4:	f7ff fe17 	bl	8003406 <_PreparePacket>
 80037d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f7ff ff04 	bl	80035ec <_SendPacket>
  RECORD_END();
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f383 8811 	msr	BASEPRI, r3
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200133f0 	.word	0x200133f0

080037f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003802:	f3ef 8311 	mrs	r3, BASEPRI
 8003806:	f04f 0120 	mov.w	r1, #32
 800380a:	f381 8811 	msr	BASEPRI, r1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	4816      	ldr	r0, [pc, #88]	; (800386c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003812:	f7ff fdf8 	bl	8003406 <_PreparePacket>
 8003816:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e00b      	b.n	800383e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	61f9      	str	r1, [r7, #28]
 8003830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	09db      	lsrs	r3, r3, #7
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b7f      	cmp	r3, #127	; 0x7f
 8003842:	d8f0      	bhi.n	8003826 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	61fa      	str	r2, [r7, #28]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	6938      	ldr	r0, [r7, #16]
 800385a:	f7ff fec7 	bl	80035ec <_SendPacket>
  RECORD_END();
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f383 8811 	msr	BASEPRI, r3
}
 8003864:	bf00      	nop
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200133f0 	.word	0x200133f0

08003870 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800387c:	f3ef 8311 	mrs	r3, BASEPRI
 8003880:	f04f 0120 	mov.w	r1, #32
 8003884:	f381 8811 	msr	BASEPRI, r1
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	4825      	ldr	r0, [pc, #148]	; (8003920 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800388c:	f7ff fdbb 	bl	8003406 <_PreparePacket>
 8003890:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	e00b      	b.n	80038b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	09db      	lsrs	r3, r3, #7
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	d8f0      	bhi.n	80038a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	e00b      	b.n	80038f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1c59      	adds	r1, r3, #1
 80038e0:	6279      	str	r1, [r7, #36]	; 0x24
 80038e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	09db      	lsrs	r3, r3, #7
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b7f      	cmp	r3, #127	; 0x7f
 80038f4:	d8f0      	bhi.n	80038d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	627a      	str	r2, [r7, #36]	; 0x24
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	69b8      	ldr	r0, [r7, #24]
 800390c:	f7ff fe6e 	bl	80035ec <_SendPacket>
  RECORD_END();
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f383 8811 	msr	BASEPRI, r3
}
 8003916:	bf00      	nop
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200133f0 	.word	0x200133f0

08003924 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	; 0x38
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003932:	f3ef 8311 	mrs	r3, BASEPRI
 8003936:	f04f 0120 	mov.w	r1, #32
 800393a:	f381 8811 	msr	BASEPRI, r1
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	4832      	ldr	r0, [pc, #200]	; (8003a0c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003942:	f7ff fd60 	bl	8003406 <_PreparePacket>
 8003946:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
 8003954:	e00b      	b.n	800396e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	b2da      	uxtb	r2, r3
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	6379      	str	r1, [r7, #52]	; 0x34
 8003960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	09db      	lsrs	r3, r3, #7
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2b7f      	cmp	r3, #127	; 0x7f
 8003972:	d8f0      	bhi.n	8003956 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	637a      	str	r2, [r7, #52]	; 0x34
 800397a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
 800398c:	e00b      	b.n	80039a6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	1c59      	adds	r1, r3, #1
 8003996:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	09db      	lsrs	r3, r3, #7
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	2b7f      	cmp	r3, #127	; 0x7f
 80039aa:	d8f0      	bhi.n	800398e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	e00b      	b.n	80039de <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1c59      	adds	r1, r3, #1
 80039ce:	6279      	str	r1, [r7, #36]	; 0x24
 80039d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	09db      	lsrs	r3, r3, #7
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b7f      	cmp	r3, #127	; 0x7f
 80039e2:	d8f0      	bhi.n	80039c6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	69b8      	ldr	r0, [r7, #24]
 80039fa:	f7ff fdf7 	bl	80035ec <_SendPacket>
  RECORD_END();
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f383 8811 	msr	BASEPRI, r3
}
 8003a04:	bf00      	nop
 8003a06:	3738      	adds	r7, #56	; 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200133f0 	.word	0x200133f0

08003a10 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b090      	sub	sp, #64	; 0x40
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a22:	f04f 0120 	mov.w	r1, #32
 8003a26:	f381 8811 	msr	BASEPRI, r1
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	4840      	ldr	r0, [pc, #256]	; (8003b30 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003a2e:	f7ff fcea 	bl	8003406 <_PreparePacket>
 8003a32:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a40:	e00b      	b.n	8003a5a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	09db      	lsrs	r3, r3, #7
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5e:	d8f0      	bhi.n	8003a42 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
 8003a78:	e00b      	b.n	8003a92 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	6379      	str	r1, [r7, #52]	; 0x34
 8003a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	09db      	lsrs	r3, r3, #7
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2b7f      	cmp	r3, #127	; 0x7f
 8003a96:	d8f0      	bhi.n	8003a7a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab0:	e00b      	b.n	8003aca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	1c59      	adds	r1, r3, #1
 8003aba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003abc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ace:	d8f0      	bhi.n	8003ab2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	e00b      	b.n	8003b02 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1c59      	adds	r1, r3, #1
 8003af2:	6279      	str	r1, [r7, #36]	; 0x24
 8003af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	09db      	lsrs	r3, r3, #7
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2b7f      	cmp	r3, #127	; 0x7f
 8003b06:	d8f0      	bhi.n	8003aea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b0e:	6a3a      	ldr	r2, [r7, #32]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	69b8      	ldr	r0, [r7, #24]
 8003b1e:	f7ff fd65 	bl	80035ec <_SendPacket>
  RECORD_END();
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f383 8811 	msr	BASEPRI, r3
}
 8003b28:	bf00      	nop
 8003b2a:	3740      	adds	r7, #64	; 0x40
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200133f0 	.word	0x200133f0

08003b34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003b3a:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b40:	f3ef 8311 	mrs	r3, BASEPRI
 8003b44:	f04f 0120 	mov.w	r1, #32
 8003b48:	f381 8811 	msr	BASEPRI, r1
 8003b4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	220a      	movs	r2, #10
 8003b54:	4953      	ldr	r1, [pc, #332]	; (8003ca4 <SEGGER_SYSVIEW_Start+0x170>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fb42 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003b62:	f7ff f9d7 	bl	8002f14 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b66:	200a      	movs	r0, #10
 8003b68:	f7ff fe28 	bl	80037bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b70:	f04f 0120 	mov.w	r1, #32
 8003b74:	f381 8811 	msr	BASEPRI, r1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	484b      	ldr	r0, [pc, #300]	; (8003ca8 <SEGGER_SYSVIEW_Start+0x174>)
 8003b7c:	f7ff fc43 	bl	8003406 <_PreparePacket>
 8003b80:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b90:	e00b      	b.n	8003baa <SEGGER_SYSVIEW_Start+0x76>
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	09db      	lsrs	r3, r3, #7
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	2b7f      	cmp	r3, #127	; 0x7f
 8003bae:	d8f0      	bhi.n	8003b92 <SEGGER_SYSVIEW_Start+0x5e>
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	e00b      	b.n	8003be4 <SEGGER_SYSVIEW_Start+0xb0>
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	6279      	str	r1, [r7, #36]	; 0x24
 8003bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	09db      	lsrs	r3, r3, #7
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	2b7f      	cmp	r3, #127	; 0x7f
 8003be8:	d8f0      	bhi.n	8003bcc <SEGGER_SYSVIEW_Start+0x98>
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	627a      	str	r2, [r7, #36]	; 0x24
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e00b      	b.n	8003c1e <SEGGER_SYSVIEW_Start+0xea>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	1c59      	adds	r1, r3, #1
 8003c0e:	61f9      	str	r1, [r7, #28]
 8003c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	09db      	lsrs	r3, r3, #7
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b7f      	cmp	r3, #127	; 0x7f
 8003c22:	d8f0      	bhi.n	8003c06 <SEGGER_SYSVIEW_Start+0xd2>
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e00b      	b.n	8003c56 <SEGGER_SYSVIEW_Start+0x122>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	6179      	str	r1, [r7, #20]
 8003c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	09db      	lsrs	r3, r3, #7
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5a:	d8f0      	bhi.n	8003c3e <SEGGER_SYSVIEW_Start+0x10a>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	617a      	str	r2, [r7, #20]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c6c:	2218      	movs	r2, #24
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fcbb 	bl	80035ec <_SendPacket>
      RECORD_END();
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c8a:	f000 f9c7 	bl	800401c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c8e:	f000 f9b1 	bl	8003ff4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c92:	f000 fc5f 	bl	8004554 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003c96:	bf00      	nop
 8003c98:	3730      	adds	r7, #48	; 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200133c0 	.word	0x200133c0
 8003ca4:	08006838 	.word	0x08006838
 8003ca8:	200133f0 	.word	0x200133f0

08003cac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb6:	f04f 0120 	mov.w	r1, #32
 8003cba:	f381 8811 	msr	BASEPRI, r1
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	480b      	ldr	r0, [pc, #44]	; (8003cf0 <SEGGER_SYSVIEW_Stop+0x44>)
 8003cc2:	f7ff fba0 	bl	8003406 <_PreparePacket>
 8003cc6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003cd0:	220b      	movs	r2, #11
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	6838      	ldr	r0, [r7, #0]
 8003cd6:	f7ff fc89 	bl	80035ec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f383 8811 	msr	BASEPRI, r3
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200133f0 	.word	0x200133f0
 8003cf4:	200133c0 	.word	0x200133c0

08003cf8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	; 0x30
 8003cfc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8003d02:	f04f 0120 	mov.w	r1, #32
 8003d06:	f381 8811 	msr	BASEPRI, r1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	4845      	ldr	r0, [pc, #276]	; (8003e24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003d0e:	f7ff fb7a 	bl	8003406 <_PreparePacket>
 8003d12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1c:	4b42      	ldr	r3, [pc, #264]	; (8003e28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	e00b      	b.n	8003d3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d40:	d8f0      	bhi.n	8003d24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	e00b      	b.n	8003d76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	1c59      	adds	r1, r3, #1
 8003d66:	6279      	str	r1, [r7, #36]	; 0x24
 8003d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	09db      	lsrs	r3, r3, #7
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2b7f      	cmp	r3, #127	; 0x7f
 8003d7a:	d8f0      	bhi.n	8003d5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	627a      	str	r2, [r7, #36]	; 0x24
 8003d82:	6a3a      	ldr	r2, [r7, #32]
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	61f9      	str	r1, [r7, #28]
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e00b      	b.n	8003de8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	6179      	str	r1, [r7, #20]
 8003dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	09db      	lsrs	r3, r3, #7
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b7f      	cmp	r3, #127	; 0x7f
 8003dec:	d8f0      	bhi.n	8003dd0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	617a      	str	r2, [r7, #20]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003dfe:	2218      	movs	r2, #24
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	68b8      	ldr	r0, [r7, #8]
 8003e04:	f7ff fbf2 	bl	80035ec <_SendPacket>
  RECORD_END();
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	4798      	blx	r3
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3730      	adds	r7, #48	; 0x30
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200133f0 	.word	0x200133f0
 8003e28:	200133c0 	.word	0x200133c0

08003e2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b092      	sub	sp, #72	; 0x48
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003e34:	f3ef 8311 	mrs	r3, BASEPRI
 8003e38:	f04f 0120 	mov.w	r1, #32
 8003e3c:	f381 8811 	msr	BASEPRI, r1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	486a      	ldr	r0, [pc, #424]	; (8003fec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003e44:	f7ff fadf 	bl	8003406 <_PreparePacket>
 8003e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	647b      	str	r3, [r7, #68]	; 0x44
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5e:	e00b      	b.n	8003e78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	6479      	str	r1, [r7, #68]	; 0x44
 8003e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e74:	09db      	lsrs	r3, r3, #7
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7c:	d8f0      	bhi.n	8003e60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	647a      	str	r2, [r7, #68]	; 0x44
 8003e84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e98:	e00b      	b.n	8003eb2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	1c59      	adds	r1, r3, #1
 8003ea2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	09db      	lsrs	r3, r3, #7
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d8f0      	bhi.n	8003e9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fa4b 	bl	800336c <_EncodeStr>
 8003ed6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ed8:	2209      	movs	r2, #9
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6938      	ldr	r0, [r7, #16]
 8003ede:	f7ff fb85 	bl	80035ec <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef6:	e00b      	b.n	8003f10 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	6379      	str	r1, [r7, #52]	; 0x34
 8003f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	09db      	lsrs	r3, r3, #7
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2b7f      	cmp	r3, #127	; 0x7f
 8003f14:	d8f0      	bhi.n	8003ef8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f30:	e00b      	b.n	8003f4a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	1c59      	adds	r1, r3, #1
 8003f3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	09db      	lsrs	r3, r3, #7
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4e:	d8f0      	bhi.n	8003f32 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	e00b      	b.n	8003f84 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	6279      	str	r1, [r7, #36]	; 0x24
 8003f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	09db      	lsrs	r3, r3, #7
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d8f0      	bhi.n	8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e00b      	b.n	8003fbc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	61f9      	str	r1, [r7, #28]
 8003fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	09db      	lsrs	r3, r3, #7
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc0:	d8f0      	bhi.n	8003fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	61fa      	str	r2, [r7, #28]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003fd2:	2215      	movs	r2, #21
 8003fd4:	68f9      	ldr	r1, [r7, #12]
 8003fd6:	6938      	ldr	r0, [r7, #16]
 8003fd8:	f7ff fb08 	bl	80035ec <_SendPacket>
  RECORD_END();
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f383 8811 	msr	BASEPRI, r3
}
 8003fe2:	bf00      	nop
 8003fe4:	3748      	adds	r7, #72	; 0x48
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200133f0 	.word	0x200133f0
 8003ff0:	200133c0 	.word	0x200133c0

08003ff4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800400a:	4b03      	ldr	r3, [pc, #12]	; (8004018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4798      	blx	r3
  }
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200133c0 	.word	0x200133c0

0800401c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01a      	beq.n	8004060 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4798      	blx	r3
 800403c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004040:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	000a      	movs	r2, r1
 8004050:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004052:	4613      	mov	r3, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4621      	mov	r1, r4
 8004058:	200d      	movs	r0, #13
 800405a:	f7ff fc09 	bl	8003870 <SEGGER_SYSVIEW_RecordU32x2>
 800405e:	e006      	b.n	800406e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	200c      	movs	r0, #12
 8004068:	f7ff fbc6 	bl	80037f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop
 8004078:	200133c0 	.word	0x200133c0
 800407c:	e0001004 	.word	0xe0001004

08004080 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004086:	f3ef 8311 	mrs	r3, BASEPRI
 800408a:	f04f 0120 	mov.w	r1, #32
 800408e:	f381 8811 	msr	BASEPRI, r1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	4819      	ldr	r0, [pc, #100]	; (80040fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004096:	f7ff f9b6 	bl	8003406 <_PreparePacket>
 800409a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e00b      	b.n	80040cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	6179      	str	r1, [r7, #20]
 80040be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	09db      	lsrs	r3, r3, #7
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b7f      	cmp	r3, #127	; 0x7f
 80040d0:	d8f0      	bhi.n	80040b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	617a      	str	r2, [r7, #20]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80040e2:	2202      	movs	r2, #2
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	68b8      	ldr	r0, [r7, #8]
 80040e8:	f7ff fa80 	bl	80035ec <_SendPacket>
  RECORD_END();
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f383 8811 	msr	BASEPRI, r3
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200133f0 	.word	0x200133f0
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800410a:	f3ef 8311 	mrs	r3, BASEPRI
 800410e:	f04f 0120 	mov.w	r1, #32
 8004112:	f381 8811 	msr	BASEPRI, r1
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	4807      	ldr	r0, [pc, #28]	; (8004138 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800411a:	f7ff f974 	bl	8003406 <_PreparePacket>
 800411e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004120:	2203      	movs	r2, #3
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	6838      	ldr	r0, [r7, #0]
 8004126:	f7ff fa61 	bl	80035ec <_SendPacket>
  RECORD_END();
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f383 8811 	msr	BASEPRI, r3
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	200133f0 	.word	0x200133f0

0800413c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004142:	f3ef 8311 	mrs	r3, BASEPRI
 8004146:	f04f 0120 	mov.w	r1, #32
 800414a:	f381 8811 	msr	BASEPRI, r1
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	4807      	ldr	r0, [pc, #28]	; (8004170 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004152:	f7ff f958 	bl	8003406 <_PreparePacket>
 8004156:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004158:	2212      	movs	r2, #18
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	6838      	ldr	r0, [r7, #0]
 800415e:	f7ff fa45 	bl	80035ec <_SendPacket>
  RECORD_END();
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f383 8811 	msr	BASEPRI, r3
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200133f0 	.word	0x200133f0

08004174 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800417a:	f3ef 8311 	mrs	r3, BASEPRI
 800417e:	f04f 0120 	mov.w	r1, #32
 8004182:	f381 8811 	msr	BASEPRI, r1
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	4807      	ldr	r0, [pc, #28]	; (80041a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800418a:	f7ff f93c 	bl	8003406 <_PreparePacket>
 800418e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004190:	2211      	movs	r2, #17
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	6838      	ldr	r0, [r7, #0]
 8004196:	f7ff fa29 	bl	80035ec <_SendPacket>
  RECORD_END();
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f383 8811 	msr	BASEPRI, r3
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200133f0 	.word	0x200133f0

080041ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041b4:	f3ef 8311 	mrs	r3, BASEPRI
 80041b8:	f04f 0120 	mov.w	r1, #32
 80041bc:	f381 8811 	msr	BASEPRI, r1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4819      	ldr	r0, [pc, #100]	; (8004228 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80041c4:	f7ff f91f 	bl	8003406 <_PreparePacket>
 80041c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e00b      	b.n	80041fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	61f9      	str	r1, [r7, #28]
 80041ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b7f      	cmp	r3, #127	; 0x7f
 80041fe:	d8f0      	bhi.n	80041e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004210:	2208      	movs	r2, #8
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	6938      	ldr	r0, [r7, #16]
 8004216:	f7ff f9e9 	bl	80035ec <_SendPacket>
  RECORD_END();
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f383 8811 	msr	BASEPRI, r3
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200133f0 	.word	0x200133f0
 800422c:	200133c0 	.word	0x200133c0

08004230 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004238:	f3ef 8311 	mrs	r3, BASEPRI
 800423c:	f04f 0120 	mov.w	r1, #32
 8004240:	f381 8811 	msr	BASEPRI, r1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	4819      	ldr	r0, [pc, #100]	; (80042ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004248:	f7ff f8dd 	bl	8003406 <_PreparePacket>
 800424c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e00b      	b.n	800427e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	61f9      	str	r1, [r7, #28]
 8004270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	09db      	lsrs	r3, r3, #7
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b7f      	cmp	r3, #127	; 0x7f
 8004282:	d8f0      	bhi.n	8004266 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	61fa      	str	r2, [r7, #28]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004294:	2204      	movs	r2, #4
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6938      	ldr	r0, [r7, #16]
 800429a:	f7ff f9a7 	bl	80035ec <_SendPacket>
  RECORD_END();
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f383 8811 	msr	BASEPRI, r3
}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200133f0 	.word	0x200133f0
 80042b0:	200133c0 	.word	0x200133c0

080042b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042bc:	f3ef 8311 	mrs	r3, BASEPRI
 80042c0:	f04f 0120 	mov.w	r1, #32
 80042c4:	f381 8811 	msr	BASEPRI, r1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	4819      	ldr	r0, [pc, #100]	; (8004330 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80042cc:	f7ff f89b 	bl	8003406 <_PreparePacket>
 80042d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042d6:	4b17      	ldr	r3, [pc, #92]	; (8004334 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e00b      	b.n	8004302 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	1c59      	adds	r1, r3, #1
 80042f2:	61f9      	str	r1, [r7, #28]
 80042f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	09db      	lsrs	r3, r3, #7
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b7f      	cmp	r3, #127	; 0x7f
 8004306:	d8f0      	bhi.n	80042ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	61fa      	str	r2, [r7, #28]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004318:	2206      	movs	r2, #6
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	6938      	ldr	r0, [r7, #16]
 800431e:	f7ff f965 	bl	80035ec <_SendPacket>
  RECORD_END();
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f383 8811 	msr	BASEPRI, r3
}
 8004328:	bf00      	nop
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200133f0 	.word	0x200133f0
 8004334:	200133c0 	.word	0x200133c0

08004338 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004342:	f3ef 8311 	mrs	r3, BASEPRI
 8004346:	f04f 0120 	mov.w	r1, #32
 800434a:	f381 8811 	msr	BASEPRI, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	4827      	ldr	r0, [pc, #156]	; (80043f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004352:	f7ff f858 	bl	8003406 <_PreparePacket>
 8004356:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	e00b      	b.n	8004388 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	6279      	str	r1, [r7, #36]	; 0x24
 800437a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	09db      	lsrs	r3, r3, #7
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2b7f      	cmp	r3, #127	; 0x7f
 800438c:	d8f0      	bhi.n	8004370 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	627a      	str	r2, [r7, #36]	; 0x24
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e00b      	b.n	80043c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	61f9      	str	r1, [r7, #28]
 80043b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	09db      	lsrs	r3, r3, #7
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b7f      	cmp	r3, #127	; 0x7f
 80043c4:	d8f0      	bhi.n	80043a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	61fa      	str	r2, [r7, #28]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80043d6:	2207      	movs	r2, #7
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7ff f906 	bl	80035ec <_SendPacket>
  RECORD_END();
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f383 8811 	msr	BASEPRI, r3
}
 80043e6:	bf00      	nop
 80043e8:	3728      	adds	r7, #40	; 0x28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200133f0 	.word	0x200133f0
 80043f4:	200133c0 	.word	0x200133c0

080043f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	1ad3      	subs	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	200133c0 	.word	0x200133c0

08004418 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d06d      	beq.n	8004506 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004430:	2300      	movs	r3, #0
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
 8004434:	e008      	b.n	8004448 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	3301      	adds	r3, #1
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444c:	429a      	cmp	r2, r3
 800444e:	d3f2      	bcc.n	8004436 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004450:	e000      	b.n	8004454 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004452:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d055      	beq.n	8004506 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800445a:	f3ef 8311 	mrs	r3, BASEPRI
 800445e:	f04f 0120 	mov.w	r1, #32
 8004462:	f381 8811 	msr	BASEPRI, r1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	482a      	ldr	r0, [pc, #168]	; (8004514 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800446a:	f7fe ffcc 	bl	8003406 <_PreparePacket>
 800446e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	e00b      	b.n	8004496 <SEGGER_SYSVIEW_SendModule+0x7e>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	6279      	str	r1, [r7, #36]	; 0x24
 8004488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	09db      	lsrs	r3, r3, #7
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b7f      	cmp	r3, #127	; 0x7f
 800449a:	d8f0      	bhi.n	800447e <SEGGER_SYSVIEW_SendModule+0x66>
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	627a      	str	r2, [r7, #36]	; 0x24
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e00b      	b.n	80044d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	61f9      	str	r1, [r7, #28]
 80044c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	09db      	lsrs	r3, r3, #7
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b7f      	cmp	r3, #127	; 0x7f
 80044d4:	d8f0      	bhi.n	80044b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	61fa      	str	r2, [r7, #28]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7fe ff3c 	bl	800336c <_EncodeStr>
 80044f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80044f6:	2216      	movs	r2, #22
 80044f8:	68f9      	ldr	r1, [r7, #12]
 80044fa:	6938      	ldr	r0, [r7, #16]
 80044fc:	f7ff f876 	bl	80035ec <_SendPacket>
      RECORD_END();
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004506:	bf00      	nop
 8004508:	3730      	adds	r7, #48	; 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200133e8 	.word	0x200133e8
 8004514:	200133f0 	.word	0x200133f0

08004518 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00f      	beq.n	8004546 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f2      	bne.n	800452c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200133e8 	.word	0x200133e8

08004554 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800455a:	f3ef 8311 	mrs	r3, BASEPRI
 800455e:	f04f 0120 	mov.w	r1, #32
 8004562:	f381 8811 	msr	BASEPRI, r1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	4817      	ldr	r0, [pc, #92]	; (80045c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800456a:	f7fe ff4c 	bl	8003406 <_PreparePacket>
 800456e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e00b      	b.n	8004598 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	6179      	str	r1, [r7, #20]
 800458a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	09db      	lsrs	r3, r3, #7
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b7f      	cmp	r3, #127	; 0x7f
 800459c:	d8f0      	bhi.n	8004580 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	617a      	str	r2, [r7, #20]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80045ae:	221b      	movs	r2, #27
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	68b8      	ldr	r0, [r7, #8]
 80045b4:	f7ff f81a 	bl	80035ec <_SendPacket>
  RECORD_END();
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f383 8811 	msr	BASEPRI, r3
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200133f0 	.word	0x200133f0
 80045cc:	200133ec 	.word	0x200133ec

080045d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045d8:	f3ef 8311 	mrs	r3, BASEPRI
 80045dc:	f04f 0120 	mov.w	r1, #32
 80045e0:	f381 8811 	msr	BASEPRI, r1
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	4827      	ldr	r0, [pc, #156]	; (8004684 <SEGGER_SYSVIEW_Warn+0xb4>)
 80045e8:	f7fe ff0d 	bl	8003406 <_PreparePacket>
 80045ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	6938      	ldr	r0, [r7, #16]
 80045f4:	f7fe feba 	bl	800336c <_EncodeStr>
 80045f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	2301      	movs	r3, #1
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	e00b      	b.n	800461c <SEGGER_SYSVIEW_Warn+0x4c>
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	6279      	str	r1, [r7, #36]	; 0x24
 800460e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b7f      	cmp	r3, #127	; 0x7f
 8004620:	d8f0      	bhi.n	8004604 <SEGGER_SYSVIEW_Warn+0x34>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	627a      	str	r2, [r7, #36]	; 0x24
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e00b      	b.n	8004654 <SEGGER_SYSVIEW_Warn+0x84>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	61f9      	str	r1, [r7, #28]
 8004646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	09db      	lsrs	r3, r3, #7
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b7f      	cmp	r3, #127	; 0x7f
 8004658:	d8f0      	bhi.n	800463c <SEGGER_SYSVIEW_Warn+0x6c>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	61fa      	str	r2, [r7, #28]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800466a:	221a      	movs	r2, #26
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	6938      	ldr	r0, [r7, #16]
 8004670:	f7fe ffbc 	bl	80035ec <_SendPacket>
  RECORD_END();
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f383 8811 	msr	BASEPRI, r3
}
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200133f0 	.word	0x200133f0

08004688 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe fe40 	bl	8003320 <SEGGER_RTT_Write>
  return len;
 80046a0:	683b      	ldr	r3, [r7, #0]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4907      	ldr	r1, [pc, #28]	; (80046e4 <__NVIC_EnableIRQ+0x38>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db0a      	blt.n	8004712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	490c      	ldr	r1, [pc, #48]	; (8004734 <__NVIC_SetPriority+0x4c>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	440b      	add	r3, r1
 800470c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004710:	e00a      	b.n	8004728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4908      	ldr	r1, [pc, #32]	; (8004738 <__NVIC_SetPriority+0x50>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	3b04      	subs	r3, #4
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	440b      	add	r3, r1
 8004726:	761a      	strb	r2, [r3, #24]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000e100 	.word	0xe000e100
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f001 f8cb 	bl	80058e4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 800474e:	4b96      	ldr	r3, [pc, #600]	; (80049a8 <extInt_Config+0x26c>)
 8004750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004754:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	2b0f      	cmp	r3, #15
 800475e:	f200 85cd 	bhi.w	80052fc <extInt_Config+0xbc0>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <extInt_Config+0x2c>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	080047a9 	.word	0x080047a9
 800476c:	0800485f 	.word	0x0800485f
 8004770:	08004915 	.word	0x08004915
 8004774:	080049eb 	.word	0x080049eb
 8004778:	08004aa1 	.word	0x08004aa1
 800477c:	08004b4f 	.word	0x08004b4f
 8004780:	08004c15 	.word	0x08004c15
 8004784:	08004cbd 	.word	0x08004cbd
 8004788:	08004d65 	.word	0x08004d65
 800478c:	08004e0d 	.word	0x08004e0d
 8004790:	08004ed3 	.word	0x08004ed3
 8004794:	08004f7b 	.word	0x08004f7b
 8004798:	08005023 	.word	0x08005023
 800479c:	080050e9 	.word	0x080050e9
 80047a0:	0800518f 	.word	0x0800518f
 80047a4:	08005237 	.word	0x08005237
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80047a8:	4b80      	ldr	r3, [pc, #512]	; (80049ac <extInt_Config+0x270>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a7f      	ldr	r2, [pc, #508]	; (80049ac <extInt_Config+0x270>)
 80047ae:	f023 030f 	bic.w	r3, r3, #15
 80047b2:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7d      	ldr	r2, [pc, #500]	; (80049b0 <extInt_Config+0x274>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d105      	bne.n	80047cc <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80047c0:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <extInt_Config+0x270>)
 80047c2:	4a7a      	ldr	r2, [pc, #488]	; (80049ac <extInt_Config+0x270>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80047c8:	f000 bd9a 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <extInt_Config+0x278>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d107      	bne.n	80047e8 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80047d8:	4b74      	ldr	r3, [pc, #464]	; (80049ac <extInt_Config+0x270>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a73      	ldr	r2, [pc, #460]	; (80049ac <extInt_Config+0x270>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6093      	str	r3, [r2, #8]
					break;
 80047e4:	f000 bd8c 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a72      	ldr	r2, [pc, #456]	; (80049b8 <extInt_Config+0x27c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d107      	bne.n	8004804 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80047f4:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <extInt_Config+0x270>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a6c      	ldr	r2, [pc, #432]	; (80049ac <extInt_Config+0x270>)
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	6093      	str	r3, [r2, #8]
					break;
 8004800:	f000 bd7e 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6c      	ldr	r2, [pc, #432]	; (80049bc <extInt_Config+0x280>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d107      	bne.n	8004820 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <extInt_Config+0x270>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <extInt_Config+0x270>)
 8004816:	f043 0303 	orr.w	r3, r3, #3
 800481a:	6093      	str	r3, [r2, #8]
					break;
 800481c:	f000 bd70 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a66      	ldr	r2, [pc, #408]	; (80049c0 <extInt_Config+0x284>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d107      	bne.n	800483c <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800482c:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <extInt_Config+0x270>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a5e      	ldr	r2, [pc, #376]	; (80049ac <extInt_Config+0x270>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6093      	str	r3, [r2, #8]
					break;
 8004838:	f000 bd62 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a60      	ldr	r2, [pc, #384]	; (80049c4 <extInt_Config+0x288>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d107      	bne.n	8004858 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <extInt_Config+0x270>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a57      	ldr	r2, [pc, #348]	; (80049ac <extInt_Config+0x270>)
 800484e:	f043 0307 	orr.w	r3, r3, #7
 8004852:	6093      	str	r3, [r2, #8]
					break;
 8004854:	f000 bd54 	b.w	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004858:	bf00      	nop
					break;
 800485a:	f000 bd51 	b.w	8005300 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 800485e:	4b53      	ldr	r3, [pc, #332]	; (80049ac <extInt_Config+0x270>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4a52      	ldr	r2, [pc, #328]	; (80049ac <extInt_Config+0x270>)
 8004864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004868:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a4f      	ldr	r2, [pc, #316]	; (80049b0 <extInt_Config+0x274>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d105      	bne.n	8004882 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8004876:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <extInt_Config+0x270>)
 8004878:	4a4c      	ldr	r2, [pc, #304]	; (80049ac <extInt_Config+0x270>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800487e:	f000 bd3f 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a4a      	ldr	r2, [pc, #296]	; (80049b4 <extInt_Config+0x278>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d107      	bne.n	800489e <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <extInt_Config+0x270>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4a46      	ldr	r2, [pc, #280]	; (80049ac <extInt_Config+0x270>)
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	6093      	str	r3, [r2, #8]
					break;
 800489a:	f000 bd31 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a44      	ldr	r2, [pc, #272]	; (80049b8 <extInt_Config+0x27c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d107      	bne.n	80048ba <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80048aa:	4b40      	ldr	r3, [pc, #256]	; (80049ac <extInt_Config+0x270>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <extInt_Config+0x270>)
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	6093      	str	r3, [r2, #8]
					break;
 80048b6:	f000 bd23 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <extInt_Config+0x280>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d107      	bne.n	80048d6 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <extInt_Config+0x270>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a38      	ldr	r2, [pc, #224]	; (80049ac <extInt_Config+0x270>)
 80048cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80048d0:	6093      	str	r3, [r2, #8]
					break;
 80048d2:	f000 bd15 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <extInt_Config+0x284>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d107      	bne.n	80048f2 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80048e2:	4b32      	ldr	r3, [pc, #200]	; (80049ac <extInt_Config+0x270>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4a31      	ldr	r2, [pc, #196]	; (80049ac <extInt_Config+0x270>)
 80048e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ec:	6093      	str	r3, [r2, #8]
					break;
 80048ee:	f000 bd07 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <extInt_Config+0x288>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d107      	bne.n	800490e <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <extInt_Config+0x270>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <extInt_Config+0x270>)
 8004904:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004908:	6093      	str	r3, [r2, #8]
					break;
 800490a:	f000 bcf9 	b.w	8005300 <extInt_Config+0xbc4>
						__NOP();
 800490e:	bf00      	nop
					break;
 8004910:	f000 bcf6 	b.w	8005300 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <extInt_Config+0x270>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <extInt_Config+0x270>)
 800491a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800491e:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <extInt_Config+0x274>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d105      	bne.n	8004938 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <extInt_Config+0x270>)
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <extInt_Config+0x270>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8004934:	f000 bce4 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <extInt_Config+0x278>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d107      	bne.n	8004954 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <extInt_Config+0x270>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a18      	ldr	r2, [pc, #96]	; (80049ac <extInt_Config+0x270>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6093      	str	r3, [r2, #8]
					break;
 8004950:	f000 bcd6 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <extInt_Config+0x27c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d107      	bne.n	8004970 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <extInt_Config+0x270>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <extInt_Config+0x270>)
 8004966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800496a:	6093      	str	r3, [r2, #8]
					break;
 800496c:	f000 bcc8 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <extInt_Config+0x280>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d107      	bne.n	800498c <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <extInt_Config+0x270>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <extInt_Config+0x270>)
 8004982:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004986:	6093      	str	r3, [r2, #8]
					break;
 8004988:	f000 bcba 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <extInt_Config+0x284>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d117      	bne.n	80049c8 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <extInt_Config+0x270>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a03      	ldr	r2, [pc, #12]	; (80049ac <extInt_Config+0x270>)
 800499e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a2:	6093      	str	r3, [r2, #8]
					break;
 80049a4:	f000 bcac 	b.w	8005300 <extInt_Config+0xbc4>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40013800 	.word	0x40013800
 80049b0:	40020000 	.word	0x40020000
 80049b4:	40020400 	.word	0x40020400
 80049b8:	40020800 	.word	0x40020800
 80049bc:	40020c00 	.word	0x40020c00
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a8a      	ldr	r2, [pc, #552]	; (8004bf8 <extInt_Config+0x4bc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d107      	bne.n	80049e4 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80049d4:	4b89      	ldr	r3, [pc, #548]	; (8004bfc <extInt_Config+0x4c0>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a88      	ldr	r2, [pc, #544]	; (8004bfc <extInt_Config+0x4c0>)
 80049da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049de:	6093      	str	r3, [r2, #8]
					break;
 80049e0:	f000 bc8e 	b.w	8005300 <extInt_Config+0xbc4>
						__NOP();
 80049e4:	bf00      	nop
					break;
 80049e6:	f000 bc8b 	b.w	8005300 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80049ea:	4b84      	ldr	r3, [pc, #528]	; (8004bfc <extInt_Config+0x4c0>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4a83      	ldr	r2, [pc, #524]	; (8004bfc <extInt_Config+0x4c0>)
 80049f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f4:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a80      	ldr	r2, [pc, #512]	; (8004c00 <extInt_Config+0x4c4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d105      	bne.n	8004a0e <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8004a02:	4b7e      	ldr	r3, [pc, #504]	; (8004bfc <extInt_Config+0x4c0>)
 8004a04:	4a7d      	ldr	r2, [pc, #500]	; (8004bfc <extInt_Config+0x4c0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8004a0a:	f000 bc79 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a7b      	ldr	r2, [pc, #492]	; (8004c04 <extInt_Config+0x4c8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d107      	bne.n	8004a2a <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8004a1a:	4b78      	ldr	r3, [pc, #480]	; (8004bfc <extInt_Config+0x4c0>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <extInt_Config+0x4c0>)
 8004a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a24:	6093      	str	r3, [r2, #8]
					break;
 8004a26:	f000 bc6b 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a75      	ldr	r2, [pc, #468]	; (8004c08 <extInt_Config+0x4cc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d107      	bne.n	8004a46 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8004a36:	4b71      	ldr	r3, [pc, #452]	; (8004bfc <extInt_Config+0x4c0>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <extInt_Config+0x4c0>)
 8004a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a40:	6093      	str	r3, [r2, #8]
					break;
 8004a42:	f000 bc5d 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6f      	ldr	r2, [pc, #444]	; (8004c0c <extInt_Config+0x4d0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d107      	bne.n	8004a62 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8004a52:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <extInt_Config+0x4c0>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4a69      	ldr	r2, [pc, #420]	; (8004bfc <extInt_Config+0x4c0>)
 8004a58:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004a5c:	6093      	str	r3, [r2, #8]
					break;
 8004a5e:	f000 bc4f 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a69      	ldr	r2, [pc, #420]	; (8004c10 <extInt_Config+0x4d4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d107      	bne.n	8004a7e <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8004a6e:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <extInt_Config+0x4c0>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a62      	ldr	r2, [pc, #392]	; (8004bfc <extInt_Config+0x4c0>)
 8004a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a78:	6093      	str	r3, [r2, #8]
					break;
 8004a7a:	f000 bc41 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5c      	ldr	r2, [pc, #368]	; (8004bf8 <extInt_Config+0x4bc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d107      	bne.n	8004a9a <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8004a8a:	4b5c      	ldr	r3, [pc, #368]	; (8004bfc <extInt_Config+0x4c0>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4a5b      	ldr	r2, [pc, #364]	; (8004bfc <extInt_Config+0x4c0>)
 8004a90:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004a94:	6093      	str	r3, [r2, #8]
					break;
 8004a96:	f000 bc33 	b.w	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004a9a:	bf00      	nop
					break;
 8004a9c:	f000 bc30 	b.w	8005300 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8004aa0:	4b56      	ldr	r3, [pc, #344]	; (8004bfc <extInt_Config+0x4c0>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a55      	ldr	r2, [pc, #340]	; (8004bfc <extInt_Config+0x4c0>)
 8004aa6:	f023 030f 	bic.w	r3, r3, #15
 8004aaa:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a53      	ldr	r2, [pc, #332]	; (8004c00 <extInt_Config+0x4c4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d105      	bne.n	8004ac4 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <extInt_Config+0x4c0>)
 8004aba:	4a50      	ldr	r2, [pc, #320]	; (8004bfc <extInt_Config+0x4c0>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8004ac0:	f000 bc1e 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a4e      	ldr	r2, [pc, #312]	; (8004c04 <extInt_Config+0x4c8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d107      	bne.n	8004ae0 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <extInt_Config+0x4c0>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a49      	ldr	r2, [pc, #292]	; (8004bfc <extInt_Config+0x4c0>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	60d3      	str	r3, [r2, #12]
					break;
 8004adc:	f000 bc10 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a48      	ldr	r2, [pc, #288]	; (8004c08 <extInt_Config+0x4cc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d107      	bne.n	8004afc <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8004aec:	4b43      	ldr	r3, [pc, #268]	; (8004bfc <extInt_Config+0x4c0>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a42      	ldr	r2, [pc, #264]	; (8004bfc <extInt_Config+0x4c0>)
 8004af2:	f043 0302 	orr.w	r3, r3, #2
 8004af6:	60d3      	str	r3, [r2, #12]
					break;
 8004af8:	f000 bc02 	b.w	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a42      	ldr	r2, [pc, #264]	; (8004c0c <extInt_Config+0x4d0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d106      	bne.n	8004b16 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8004b08:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <extInt_Config+0x4c0>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a3b      	ldr	r2, [pc, #236]	; (8004bfc <extInt_Config+0x4c0>)
 8004b0e:	f043 0303 	orr.w	r3, r3, #3
 8004b12:	60d3      	str	r3, [r2, #12]
					break;
 8004b14:	e3f4      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <extInt_Config+0x4d4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d106      	bne.n	8004b30 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <extInt_Config+0x4c0>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <extInt_Config+0x4c0>)
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	60d3      	str	r3, [r2, #12]
					break;
 8004b2e:	e3e7      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a30      	ldr	r2, [pc, #192]	; (8004bf8 <extInt_Config+0x4bc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d106      	bne.n	8004b4a <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <extInt_Config+0x4c0>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <extInt_Config+0x4c0>)
 8004b42:	f043 0307 	orr.w	r3, r3, #7
 8004b46:	60d3      	str	r3, [r2, #12]
					break;
 8004b48:	e3da      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004b4a:	bf00      	nop
					break;
 8004b4c:	e3d8      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <extInt_Config+0x4c0>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <extInt_Config+0x4c0>)
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b58:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <extInt_Config+0x4c4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d104      	bne.n	8004b70 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <extInt_Config+0x4c0>)
 8004b68:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <extInt_Config+0x4c0>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8004b6e:	e3c7      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <extInt_Config+0x4c8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d106      	bne.n	8004b8a <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <extInt_Config+0x4c0>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <extInt_Config+0x4c0>)
 8004b82:	f043 0310 	orr.w	r3, r3, #16
 8004b86:	60d3      	str	r3, [r2, #12]
					break;
 8004b88:	e3ba      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <extInt_Config+0x4cc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d106      	bne.n	8004ba4 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8004b96:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <extInt_Config+0x4c0>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <extInt_Config+0x4c0>)
 8004b9c:	f043 0320 	orr.w	r3, r3, #32
 8004ba0:	60d3      	str	r3, [r2, #12]
					break;
 8004ba2:	e3ad      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <extInt_Config+0x4d0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d106      	bne.n	8004bbe <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <extInt_Config+0x4c0>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a11      	ldr	r2, [pc, #68]	; (8004bfc <extInt_Config+0x4c0>)
 8004bb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004bba:	60d3      	str	r3, [r2, #12]
					break;
 8004bbc:	e3a0      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <extInt_Config+0x4d4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d106      	bne.n	8004bd8 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <extInt_Config+0x4c0>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <extInt_Config+0x4c0>)
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd4:	60d3      	str	r3, [r2, #12]
					break;
 8004bd6:	e393      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <extInt_Config+0x4bc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d106      	bne.n	8004bf2 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <extInt_Config+0x4c0>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <extInt_Config+0x4c0>)
 8004bea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004bee:	60d3      	str	r3, [r2, #12]
					break;
 8004bf0:	e386      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004bf2:	bf00      	nop
					break;
 8004bf4:	e384      	b.n	8005300 <extInt_Config+0xbc4>
 8004bf6:	bf00      	nop
 8004bf8:	40021c00 	.word	0x40021c00
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	40020000 	.word	0x40020000
 8004c04:	40020400 	.word	0x40020400
 8004c08:	40020800 	.word	0x40020800
 8004c0c:	40020c00 	.word	0x40020c00
 8004c10:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8004c14:	4b86      	ldr	r3, [pc, #536]	; (8004e30 <extInt_Config+0x6f4>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a85      	ldr	r2, [pc, #532]	; (8004e30 <extInt_Config+0x6f4>)
 8004c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c1e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a83      	ldr	r2, [pc, #524]	; (8004e34 <extInt_Config+0x6f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d104      	bne.n	8004c36 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8004c2c:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <extInt_Config+0x6f4>)
 8004c2e:	4a80      	ldr	r2, [pc, #512]	; (8004e30 <extInt_Config+0x6f4>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8004c34:	e364      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a7e      	ldr	r2, [pc, #504]	; (8004e38 <extInt_Config+0x6fc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d106      	bne.n	8004c50 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8004c42:	4b7b      	ldr	r3, [pc, #492]	; (8004e30 <extInt_Config+0x6f4>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a7a      	ldr	r2, [pc, #488]	; (8004e30 <extInt_Config+0x6f4>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	60d3      	str	r3, [r2, #12]
					break;
 8004c4e:	e357      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a79      	ldr	r2, [pc, #484]	; (8004e3c <extInt_Config+0x700>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d106      	bne.n	8004c6a <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8004c5c:	4b74      	ldr	r3, [pc, #464]	; (8004e30 <extInt_Config+0x6f4>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a73      	ldr	r2, [pc, #460]	; (8004e30 <extInt_Config+0x6f4>)
 8004c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c66:	60d3      	str	r3, [r2, #12]
					break;
 8004c68:	e34a      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a73      	ldr	r2, [pc, #460]	; (8004e40 <extInt_Config+0x704>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d106      	bne.n	8004c84 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8004c76:	4b6e      	ldr	r3, [pc, #440]	; (8004e30 <extInt_Config+0x6f4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a6d      	ldr	r2, [pc, #436]	; (8004e30 <extInt_Config+0x6f4>)
 8004c7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c80:	60d3      	str	r3, [r2, #12]
					break;
 8004c82:	e33d      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <extInt_Config+0x708>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d106      	bne.n	8004c9e <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8004c90:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <extInt_Config+0x6f4>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4a66      	ldr	r2, [pc, #408]	; (8004e30 <extInt_Config+0x6f4>)
 8004c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c9a:	60d3      	str	r3, [r2, #12]
					break;
 8004c9c:	e330      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <extInt_Config+0x70c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d106      	bne.n	8004cb8 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8004caa:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <extInt_Config+0x6f4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4a60      	ldr	r2, [pc, #384]	; (8004e30 <extInt_Config+0x6f4>)
 8004cb0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cb4:	60d3      	str	r3, [r2, #12]
					break;
 8004cb6:	e323      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004cb8:	bf00      	nop
					break;
 8004cba:	e321      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <extInt_Config+0x6f4>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a5b      	ldr	r2, [pc, #364]	; (8004e30 <extInt_Config+0x6f4>)
 8004cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cc6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a59      	ldr	r2, [pc, #356]	; (8004e34 <extInt_Config+0x6f8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d104      	bne.n	8004cde <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8004cd4:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <extInt_Config+0x6f4>)
 8004cd6:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <extInt_Config+0x6f4>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8004cdc:	e310      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a54      	ldr	r2, [pc, #336]	; (8004e38 <extInt_Config+0x6fc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d106      	bne.n	8004cf8 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8004cea:	4b51      	ldr	r3, [pc, #324]	; (8004e30 <extInt_Config+0x6f4>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a50      	ldr	r2, [pc, #320]	; (8004e30 <extInt_Config+0x6f4>)
 8004cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cf4:	60d3      	str	r3, [r2, #12]
					break;
 8004cf6:	e303      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a4f      	ldr	r2, [pc, #316]	; (8004e3c <extInt_Config+0x700>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d106      	bne.n	8004d12 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8004d04:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <extInt_Config+0x6f4>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a49      	ldr	r2, [pc, #292]	; (8004e30 <extInt_Config+0x6f4>)
 8004d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d0e:	60d3      	str	r3, [r2, #12]
					break;
 8004d10:	e2f6      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a49      	ldr	r2, [pc, #292]	; (8004e40 <extInt_Config+0x704>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d106      	bne.n	8004d2c <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8004d1e:	4b44      	ldr	r3, [pc, #272]	; (8004e30 <extInt_Config+0x6f4>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a43      	ldr	r2, [pc, #268]	; (8004e30 <extInt_Config+0x6f4>)
 8004d24:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004d28:	60d3      	str	r3, [r2, #12]
					break;
 8004d2a:	e2e9      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a44      	ldr	r2, [pc, #272]	; (8004e44 <extInt_Config+0x708>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d106      	bne.n	8004d46 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <extInt_Config+0x6f4>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <extInt_Config+0x6f4>)
 8004d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d42:	60d3      	str	r3, [r2, #12]
					break;
 8004d44:	e2dc      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3e      	ldr	r2, [pc, #248]	; (8004e48 <extInt_Config+0x70c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d106      	bne.n	8004d60 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <extInt_Config+0x6f4>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4a36      	ldr	r2, [pc, #216]	; (8004e30 <extInt_Config+0x6f4>)
 8004d58:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004d5c:	60d3      	str	r3, [r2, #12]
					break;
 8004d5e:	e2cf      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004d60:	bf00      	nop
					break;
 8004d62:	e2cd      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8004d64:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <extInt_Config+0x6f4>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	4a31      	ldr	r2, [pc, #196]	; (8004e30 <extInt_Config+0x6f4>)
 8004d6a:	f023 030f 	bic.w	r3, r3, #15
 8004d6e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <extInt_Config+0x6f8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d104      	bne.n	8004d86 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <extInt_Config+0x6f4>)
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <extInt_Config+0x6f4>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004d84:	e2bc      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <extInt_Config+0x6fc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d106      	bne.n	8004da0 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <extInt_Config+0x6f4>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <extInt_Config+0x6f4>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6113      	str	r3, [r2, #16]
					break;
 8004d9e:	e2af      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <extInt_Config+0x700>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d106      	bne.n	8004dba <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <extInt_Config+0x6f4>)
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <extInt_Config+0x6f4>)
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	6113      	str	r3, [r2, #16]
					break;
 8004db8:	e2a2      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <extInt_Config+0x704>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d106      	bne.n	8004dd4 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <extInt_Config+0x6f4>)
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <extInt_Config+0x6f4>)
 8004dcc:	f043 0303 	orr.w	r3, r3, #3
 8004dd0:	6113      	str	r3, [r2, #16]
					break;
 8004dd2:	e295      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <extInt_Config+0x708>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d106      	bne.n	8004dee <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <extInt_Config+0x6f4>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <extInt_Config+0x6f4>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6113      	str	r3, [r2, #16]
					break;
 8004dec:	e288      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <extInt_Config+0x70c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d106      	bne.n	8004e08 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <extInt_Config+0x6f4>)
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <extInt_Config+0x6f4>)
 8004e00:	f043 0307 	orr.w	r3, r3, #7
 8004e04:	6113      	str	r3, [r2, #16]
					break;
 8004e06:	e27b      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004e08:	bf00      	nop
					break;
 8004e0a:	e279      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <extInt_Config+0x6f4>)
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <extInt_Config+0x6f4>)
 8004e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e16:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <extInt_Config+0x6f8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d113      	bne.n	8004e4c <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <extInt_Config+0x6f4>)
 8004e26:	4a02      	ldr	r2, [pc, #8]	; (8004e30 <extInt_Config+0x6f4>)
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004e2c:	e268      	b.n	8005300 <extInt_Config+0xbc4>
 8004e2e:	bf00      	nop
 8004e30:	40013800 	.word	0x40013800
 8004e34:	40020000 	.word	0x40020000
 8004e38:	40020400 	.word	0x40020400
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a83      	ldr	r2, [pc, #524]	; (8005060 <extInt_Config+0x924>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d106      	bne.n	8004e66 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8004e58:	4b82      	ldr	r3, [pc, #520]	; (8005064 <extInt_Config+0x928>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4a81      	ldr	r2, [pc, #516]	; (8005064 <extInt_Config+0x928>)
 8004e5e:	f043 0310 	orr.w	r3, r3, #16
 8004e62:	6113      	str	r3, [r2, #16]
					break;
 8004e64:	e24c      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7e      	ldr	r2, [pc, #504]	; (8005068 <extInt_Config+0x92c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d106      	bne.n	8004e80 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8004e72:	4b7c      	ldr	r3, [pc, #496]	; (8005064 <extInt_Config+0x928>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	4a7b      	ldr	r2, [pc, #492]	; (8005064 <extInt_Config+0x928>)
 8004e78:	f043 0320 	orr.w	r3, r3, #32
 8004e7c:	6113      	str	r3, [r2, #16]
					break;
 8004e7e:	e23f      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a79      	ldr	r2, [pc, #484]	; (800506c <extInt_Config+0x930>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d106      	bne.n	8004e9a <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8004e8c:	4b75      	ldr	r3, [pc, #468]	; (8005064 <extInt_Config+0x928>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	4a74      	ldr	r2, [pc, #464]	; (8005064 <extInt_Config+0x928>)
 8004e92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004e96:	6113      	str	r3, [r2, #16]
					break;
 8004e98:	e232      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a73      	ldr	r2, [pc, #460]	; (8005070 <extInt_Config+0x934>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d106      	bne.n	8004eb4 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8004ea6:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <extInt_Config+0x928>)
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	4a6e      	ldr	r2, [pc, #440]	; (8005064 <extInt_Config+0x928>)
 8004eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb0:	6113      	str	r3, [r2, #16]
					break;
 8004eb2:	e225      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <extInt_Config+0x938>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d106      	bne.n	8004ece <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8004ec0:	4b68      	ldr	r3, [pc, #416]	; (8005064 <extInt_Config+0x928>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	4a67      	ldr	r2, [pc, #412]	; (8005064 <extInt_Config+0x928>)
 8004ec6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004eca:	6113      	str	r3, [r2, #16]
					break;
 8004ecc:	e218      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004ece:	bf00      	nop
					break;
 8004ed0:	e216      	b.n	8005300 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8004ed2:	4b64      	ldr	r3, [pc, #400]	; (8005064 <extInt_Config+0x928>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	4a63      	ldr	r2, [pc, #396]	; (8005064 <extInt_Config+0x928>)
 8004ed8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004edc:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a64      	ldr	r2, [pc, #400]	; (8005078 <extInt_Config+0x93c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d104      	bne.n	8004ef4 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8004eea:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <extInt_Config+0x928>)
 8004eec:	4a5d      	ldr	r2, [pc, #372]	; (8005064 <extInt_Config+0x928>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004ef2:	e205      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a59      	ldr	r2, [pc, #356]	; (8005060 <extInt_Config+0x924>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d106      	bne.n	8004f0e <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8004f00:	4b58      	ldr	r3, [pc, #352]	; (8005064 <extInt_Config+0x928>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4a57      	ldr	r2, [pc, #348]	; (8005064 <extInt_Config+0x928>)
 8004f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0a:	6113      	str	r3, [r2, #16]
					break;
 8004f0c:	e1f8      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a54      	ldr	r2, [pc, #336]	; (8005068 <extInt_Config+0x92c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d106      	bne.n	8004f28 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8004f1a:	4b52      	ldr	r3, [pc, #328]	; (8005064 <extInt_Config+0x928>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4a51      	ldr	r2, [pc, #324]	; (8005064 <extInt_Config+0x928>)
 8004f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f24:	6113      	str	r3, [r2, #16]
					break;
 8004f26:	e1eb      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a4f      	ldr	r2, [pc, #316]	; (800506c <extInt_Config+0x930>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d106      	bne.n	8004f42 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8004f34:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <extInt_Config+0x928>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <extInt_Config+0x928>)
 8004f3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f3e:	6113      	str	r3, [r2, #16]
					break;
 8004f40:	e1de      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a49      	ldr	r2, [pc, #292]	; (8005070 <extInt_Config+0x934>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d106      	bne.n	8004f5c <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8004f4e:	4b45      	ldr	r3, [pc, #276]	; (8005064 <extInt_Config+0x928>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a44      	ldr	r2, [pc, #272]	; (8005064 <extInt_Config+0x928>)
 8004f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f58:	6113      	str	r3, [r2, #16]
					break;
 8004f5a:	e1d1      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a44      	ldr	r2, [pc, #272]	; (8005074 <extInt_Config+0x938>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d106      	bne.n	8004f76 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8004f68:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <extInt_Config+0x928>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	4a3d      	ldr	r2, [pc, #244]	; (8005064 <extInt_Config+0x928>)
 8004f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f72:	6113      	str	r3, [r2, #16]
					break;
 8004f74:	e1c4      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8004f76:	bf00      	nop
					break;
 8004f78:	e1c2      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8004f7a:	4b3a      	ldr	r3, [pc, #232]	; (8005064 <extInt_Config+0x928>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	4a39      	ldr	r2, [pc, #228]	; (8005064 <extInt_Config+0x928>)
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f84:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <extInt_Config+0x93c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d104      	bne.n	8004f9c <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8004f92:	4b34      	ldr	r3, [pc, #208]	; (8005064 <extInt_Config+0x928>)
 8004f94:	4a33      	ldr	r2, [pc, #204]	; (8005064 <extInt_Config+0x928>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004f9a:	e1b1      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2f      	ldr	r2, [pc, #188]	; (8005060 <extInt_Config+0x924>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d106      	bne.n	8004fb6 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <extInt_Config+0x928>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4a2d      	ldr	r2, [pc, #180]	; (8005064 <extInt_Config+0x928>)
 8004fae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fb2:	6113      	str	r3, [r2, #16]
					break;
 8004fb4:	e1a4      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <extInt_Config+0x92c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d106      	bne.n	8004fd0 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <extInt_Config+0x928>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	4a27      	ldr	r2, [pc, #156]	; (8005064 <extInt_Config+0x928>)
 8004fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fcc:	6113      	str	r3, [r2, #16]
					break;
 8004fce:	e197      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a25      	ldr	r2, [pc, #148]	; (800506c <extInt_Config+0x930>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d106      	bne.n	8004fea <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <extInt_Config+0x928>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <extInt_Config+0x928>)
 8004fe2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004fe6:	6113      	str	r3, [r2, #16]
					break;
 8004fe8:	e18a      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <extInt_Config+0x934>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d106      	bne.n	8005004 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <extInt_Config+0x928>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <extInt_Config+0x928>)
 8004ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005000:	6113      	str	r3, [r2, #16]
					break;
 8005002:	e17d      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <extInt_Config+0x938>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d106      	bne.n	800501e <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <extInt_Config+0x928>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <extInt_Config+0x928>)
 8005016:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800501a:	6113      	str	r3, [r2, #16]
					break;
 800501c:	e170      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 800501e:	bf00      	nop
					break;
 8005020:	e16e      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <extInt_Config+0x928>)
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <extInt_Config+0x928>)
 8005028:	f023 030f 	bic.w	r3, r3, #15
 800502c:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a10      	ldr	r2, [pc, #64]	; (8005078 <extInt_Config+0x93c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d104      	bne.n	8005044 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <extInt_Config+0x928>)
 800503c:	4a09      	ldr	r2, [pc, #36]	; (8005064 <extInt_Config+0x928>)
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005042:	e15d      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a05      	ldr	r2, [pc, #20]	; (8005060 <extInt_Config+0x924>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d115      	bne.n	800507c <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <extInt_Config+0x928>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	4a03      	ldr	r2, [pc, #12]	; (8005064 <extInt_Config+0x928>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6153      	str	r3, [r2, #20]
					break;
 800505c:	e150      	b.n	8005300 <extInt_Config+0xbc4>
 800505e:	bf00      	nop
 8005060:	40020400 	.word	0x40020400
 8005064:	40013800 	.word	0x40013800
 8005068:	40020800 	.word	0x40020800
 800506c:	40020c00 	.word	0x40020c00
 8005070:	40021000 	.word	0x40021000
 8005074:	40021c00 	.word	0x40021c00
 8005078:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a89      	ldr	r2, [pc, #548]	; (80052a8 <extInt_Config+0xb6c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d106      	bne.n	8005096 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8005088:	4b88      	ldr	r3, [pc, #544]	; (80052ac <extInt_Config+0xb70>)
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	4a87      	ldr	r2, [pc, #540]	; (80052ac <extInt_Config+0xb70>)
 800508e:	f043 0302 	orr.w	r3, r3, #2
 8005092:	6153      	str	r3, [r2, #20]
					break;
 8005094:	e134      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a84      	ldr	r2, [pc, #528]	; (80052b0 <extInt_Config+0xb74>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d106      	bne.n	80050b0 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80050a2:	4b82      	ldr	r3, [pc, #520]	; (80052ac <extInt_Config+0xb70>)
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	4a81      	ldr	r2, [pc, #516]	; (80052ac <extInt_Config+0xb70>)
 80050a8:	f043 0303 	orr.w	r3, r3, #3
 80050ac:	6153      	str	r3, [r2, #20]
					break;
 80050ae:	e127      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7f      	ldr	r2, [pc, #508]	; (80052b4 <extInt_Config+0xb78>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d106      	bne.n	80050ca <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80050bc:	4b7b      	ldr	r3, [pc, #492]	; (80052ac <extInt_Config+0xb70>)
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	4a7a      	ldr	r2, [pc, #488]	; (80052ac <extInt_Config+0xb70>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6153      	str	r3, [r2, #20]
					break;
 80050c8:	e11a      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a79      	ldr	r2, [pc, #484]	; (80052b8 <extInt_Config+0xb7c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d106      	bne.n	80050e4 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80050d6:	4b75      	ldr	r3, [pc, #468]	; (80052ac <extInt_Config+0xb70>)
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4a74      	ldr	r2, [pc, #464]	; (80052ac <extInt_Config+0xb70>)
 80050dc:	f043 0307 	orr.w	r3, r3, #7
 80050e0:	6153      	str	r3, [r2, #20]
					break;
 80050e2:	e10d      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 80050e4:	bf00      	nop
					break;
 80050e6:	e10b      	b.n	8005300 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80050e8:	4b70      	ldr	r3, [pc, #448]	; (80052ac <extInt_Config+0xb70>)
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	4a6f      	ldr	r2, [pc, #444]	; (80052ac <extInt_Config+0xb70>)
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f2:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a70      	ldr	r2, [pc, #448]	; (80052bc <extInt_Config+0xb80>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d104      	bne.n	800510a <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8005100:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <extInt_Config+0xb70>)
 8005102:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <extInt_Config+0xb70>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	6153      	str	r3, [r2, #20]
 8005108:	e041      	b.n	800518e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6b      	ldr	r2, [pc, #428]	; (80052c0 <extInt_Config+0xb84>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d106      	bne.n	8005124 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <extInt_Config+0xb70>)
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	4a64      	ldr	r2, [pc, #400]	; (80052ac <extInt_Config+0xb70>)
 800511c:	f043 0310 	orr.w	r3, r3, #16
 8005120:	6153      	str	r3, [r2, #20]
 8005122:	e034      	b.n	800518e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a5f      	ldr	r2, [pc, #380]	; (80052a8 <extInt_Config+0xb6c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d106      	bne.n	800513e <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8005130:	4b5e      	ldr	r3, [pc, #376]	; (80052ac <extInt_Config+0xb70>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	4a5d      	ldr	r2, [pc, #372]	; (80052ac <extInt_Config+0xb70>)
 8005136:	f043 0320 	orr.w	r3, r3, #32
 800513a:	6153      	str	r3, [r2, #20]
 800513c:	e027      	b.n	800518e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5a      	ldr	r2, [pc, #360]	; (80052b0 <extInt_Config+0xb74>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d106      	bne.n	8005158 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800514a:	4b58      	ldr	r3, [pc, #352]	; (80052ac <extInt_Config+0xb70>)
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4a57      	ldr	r2, [pc, #348]	; (80052ac <extInt_Config+0xb70>)
 8005150:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005154:	6153      	str	r3, [r2, #20]
 8005156:	e01a      	b.n	800518e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a55      	ldr	r2, [pc, #340]	; (80052b4 <extInt_Config+0xb78>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d106      	bne.n	8005172 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8005164:	4b51      	ldr	r3, [pc, #324]	; (80052ac <extInt_Config+0xb70>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	4a50      	ldr	r2, [pc, #320]	; (80052ac <extInt_Config+0xb70>)
 800516a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516e:	6153      	str	r3, [r2, #20]
 8005170:	e00d      	b.n	800518e <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4f      	ldr	r2, [pc, #316]	; (80052b8 <extInt_Config+0xb7c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d106      	bne.n	800518c <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800517e:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <extInt_Config+0xb70>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <extInt_Config+0xb70>)
 8005184:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005188:	6153      	str	r3, [r2, #20]
 800518a:	e000      	b.n	800518e <extInt_Config+0xa52>

					} else {
						__NOP();
 800518c:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800518e:	4b47      	ldr	r3, [pc, #284]	; (80052ac <extInt_Config+0xb70>)
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4a46      	ldr	r2, [pc, #280]	; (80052ac <extInt_Config+0xb70>)
 8005194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005198:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a46      	ldr	r2, [pc, #280]	; (80052bc <extInt_Config+0xb80>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d104      	bne.n	80051b0 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <extInt_Config+0xb70>)
 80051a8:	4a40      	ldr	r2, [pc, #256]	; (80052ac <extInt_Config+0xb70>)
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80051ae:	e0a7      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a42      	ldr	r2, [pc, #264]	; (80052c0 <extInt_Config+0xb84>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d106      	bne.n	80051ca <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <extInt_Config+0xb70>)
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <extInt_Config+0xb70>)
 80051c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c6:	6153      	str	r3, [r2, #20]
					break;
 80051c8:	e09a      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <extInt_Config+0xb6c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d106      	bne.n	80051e4 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80051d6:	4b35      	ldr	r3, [pc, #212]	; (80052ac <extInt_Config+0xb70>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <extInt_Config+0xb70>)
 80051dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e0:	6153      	str	r3, [r2, #20]
					break;
 80051e2:	e08d      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <extInt_Config+0xb74>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d106      	bne.n	80051fe <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80051f0:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <extInt_Config+0xb70>)
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <extInt_Config+0xb70>)
 80051f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051fa:	6153      	str	r3, [r2, #20]
					break;
 80051fc:	e080      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2b      	ldr	r2, [pc, #172]	; (80052b4 <extInt_Config+0xb78>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d106      	bne.n	8005218 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800520a:	4b28      	ldr	r3, [pc, #160]	; (80052ac <extInt_Config+0xb70>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4a27      	ldr	r2, [pc, #156]	; (80052ac <extInt_Config+0xb70>)
 8005210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005214:	6153      	str	r3, [r2, #20]
					break;
 8005216:	e073      	b.n	8005300 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <extInt_Config+0xb7c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d106      	bne.n	8005232 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8005224:	4b21      	ldr	r3, [pc, #132]	; (80052ac <extInt_Config+0xb70>)
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	4a20      	ldr	r2, [pc, #128]	; (80052ac <extInt_Config+0xb70>)
 800522a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800522e:	6153      	str	r3, [r2, #20]
					break;
 8005230:	e066      	b.n	8005300 <extInt_Config+0xbc4>
						__NOP();
 8005232:	bf00      	nop
					break;
 8005234:	e064      	b.n	8005300 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <extInt_Config+0xb70>)
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <extInt_Config+0xb70>)
 800523c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005240:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <extInt_Config+0xb80>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d104      	bne.n	8005258 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <extInt_Config+0xb70>)
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <extInt_Config+0xb70>)
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8005256:	e053      	b.n	8005300 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <extInt_Config+0xb84>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d106      	bne.n	8005272 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <extInt_Config+0xb70>)
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	4a10      	ldr	r2, [pc, #64]	; (80052ac <extInt_Config+0xb70>)
 800526a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800526e:	6153      	str	r3, [r2, #20]
						break;
 8005270:	e046      	b.n	8005300 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0b      	ldr	r2, [pc, #44]	; (80052a8 <extInt_Config+0xb6c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d106      	bne.n	800528c <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <extInt_Config+0xb70>)
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <extInt_Config+0xb70>)
 8005284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005288:	6153      	str	r3, [r2, #20]
						break;
 800528a:	e039      	b.n	8005300 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <extInt_Config+0xb74>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d115      	bne.n	80052c4 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <extInt_Config+0xb70>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	4a03      	ldr	r2, [pc, #12]	; (80052ac <extInt_Config+0xb70>)
 800529e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80052a2:	6153      	str	r3, [r2, #20]
						break;
 80052a4:	e02c      	b.n	8005300 <extInt_Config+0xbc4>
 80052a6:	bf00      	nop
 80052a8:	40020800 	.word	0x40020800
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40021c00 	.word	0x40021c00
 80052bc:	40020000 	.word	0x40020000
 80052c0:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6c      	ldr	r2, [pc, #432]	; (800547c <extInt_Config+0xd40>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d106      	bne.n	80052de <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80052d0:	4b6b      	ldr	r3, [pc, #428]	; (8005480 <extInt_Config+0xd44>)
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <extInt_Config+0xd44>)
 80052d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052da:	6153      	str	r3, [r2, #20]
						break;
 80052dc:	e010      	b.n	8005300 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a67      	ldr	r2, [pc, #412]	; (8005484 <extInt_Config+0xd48>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d106      	bne.n	80052f8 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <extInt_Config+0xd44>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4a64      	ldr	r2, [pc, #400]	; (8005480 <extInt_Config+0xd44>)
 80052f0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80052f4:	6153      	str	r3, [r2, #20]
						break;
 80052f6:	e003      	b.n	8005300 <extInt_Config+0xbc4>
							__NOP();
 80052f8:	bf00      	nop
						break;
 80052fa:	e001      	b.n	8005300 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 80052fc:	bf00      	nop
						break;
 80052fe:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d020      	beq.n	800534a <extInt_Config+0xc0e>
 8005308:	2b02      	cmp	r3, #2
 800530a:	dc37      	bgt.n	800537c <extInt_Config+0xc40>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <extInt_Config+0xbda>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d00d      	beq.n	8005330 <extInt_Config+0xbf4>
 8005314:	e032      	b.n	800537c <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <extInt_Config+0xd4c>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	7912      	ldrb	r2, [r2, #4]
 8005320:	4611      	mov	r1, r2
 8005322:	2201      	movs	r2, #1
 8005324:	408a      	lsls	r2, r1
 8005326:	4611      	mov	r1, r2
 8005328:	4a57      	ldr	r2, [pc, #348]	; (8005488 <extInt_Config+0xd4c>)
 800532a:	430b      	orrs	r3, r1
 800532c:	60d3      	str	r3, [r2, #12]

		break;
 800532e:	e027      	b.n	8005380 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005330:	4b55      	ldr	r3, [pc, #340]	; (8005488 <extInt_Config+0xd4c>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	7912      	ldrb	r2, [r2, #4]
 800533a:	4611      	mov	r1, r2
 800533c:	2201      	movs	r2, #1
 800533e:	408a      	lsls	r2, r1
 8005340:	4611      	mov	r1, r2
 8005342:	4a51      	ldr	r2, [pc, #324]	; (8005488 <extInt_Config+0xd4c>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6093      	str	r3, [r2, #8]

		break;
 8005348:	e01a      	b.n	8005380 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800534a:	4b4f      	ldr	r3, [pc, #316]	; (8005488 <extInt_Config+0xd4c>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	7912      	ldrb	r2, [r2, #4]
 8005354:	4611      	mov	r1, r2
 8005356:	2201      	movs	r2, #1
 8005358:	408a      	lsls	r2, r1
 800535a:	4611      	mov	r1, r2
 800535c:	4a4a      	ldr	r2, [pc, #296]	; (8005488 <extInt_Config+0xd4c>)
 800535e:	430b      	orrs	r3, r1
 8005360:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005362:	4b49      	ldr	r3, [pc, #292]	; (8005488 <extInt_Config+0xd4c>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	7912      	ldrb	r2, [r2, #4]
 800536c:	4611      	mov	r1, r2
 800536e:	2201      	movs	r2, #1
 8005370:	408a      	lsls	r2, r1
 8005372:	4611      	mov	r1, r2
 8005374:	4a44      	ldr	r2, [pc, #272]	; (8005488 <extInt_Config+0xd4c>)
 8005376:	430b      	orrs	r3, r1
 8005378:	6093      	str	r3, [r2, #8]

		break;
 800537a:	e001      	b.n	8005380 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800537c:	bf00      	nop
		break;
 800537e:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005380:	b672      	cpsid	i
}
 8005382:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005384:	4b40      	ldr	r3, [pc, #256]	; (8005488 <extInt_Config+0xd4c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	7912      	ldrb	r2, [r2, #4]
 800538e:	4611      	mov	r1, r2
 8005390:	2201      	movs	r2, #1
 8005392:	408a      	lsls	r2, r1
 8005394:	4611      	mov	r1, r2
 8005396:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <extInt_Config+0xd4c>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	791b      	ldrb	r3, [r3, #4]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	d862      	bhi.n	800546c <extInt_Config+0xd30>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <extInt_Config+0xc70>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053ed 	.word	0x080053ed
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053fd 	.word	0x080053fd
 80053b8:	08005405 	.word	0x08005405
 80053bc:	0800540d 	.word	0x0800540d
 80053c0:	08005415 	.word	0x08005415
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	08005425 	.word	0x08005425
 80053cc:	0800542d 	.word	0x0800542d
 80053d0:	08005435 	.word	0x08005435
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	08005445 	.word	0x08005445
 80053dc:	0800544d 	.word	0x0800544d
 80053e0:	08005455 	.word	0x08005455
 80053e4:	0800545d 	.word	0x0800545d
 80053e8:	08005465 	.word	0x08005465
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80053ec:	2006      	movs	r0, #6
 80053ee:	f7ff f95d 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 80053f2:	e03d      	b.n	8005470 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80053f4:	2007      	movs	r0, #7
 80053f6:	f7ff f959 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 80053fa:	e039      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80053fc:	2008      	movs	r0, #8
 80053fe:	f7ff f955 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005402:	e035      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8005404:	2009      	movs	r0, #9
 8005406:	f7ff f951 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800540a:	e031      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800540c:	200a      	movs	r0, #10
 800540e:	f7ff f94d 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005412:	e02d      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005414:	2017      	movs	r0, #23
 8005416:	f7ff f949 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800541a:	e029      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800541c:	2017      	movs	r0, #23
 800541e:	f7ff f945 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005422:	e025      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005424:	2017      	movs	r0, #23
 8005426:	f7ff f941 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800542a:	e021      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800542c:	2017      	movs	r0, #23
 800542e:	f7ff f93d 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005432:	e01d      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005434:	2017      	movs	r0, #23
 8005436:	f7ff f939 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800543a:	e019      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800543c:	2028      	movs	r0, #40	; 0x28
 800543e:	f7ff f935 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005442:	e015      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005444:	2028      	movs	r0, #40	; 0x28
 8005446:	f7ff f931 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800544a:	e011      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800544c:	2028      	movs	r0, #40	; 0x28
 800544e:	f7ff f92d 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005452:	e00d      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005454:	2028      	movs	r0, #40	; 0x28
 8005456:	f7ff f929 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800545a:	e009      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800545c:	2028      	movs	r0, #40	; 0x28
 800545e:	f7ff f925 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 8005462:	e005      	b.n	8005470 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005464:	2028      	movs	r0, #40	; 0x28
 8005466:	f7ff f921 	bl	80046ac <__NVIC_EnableIRQ>
			break;
 800546a:	e001      	b.n	8005470 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800546c:	bf00      	nop
			break;
 800546e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005470:	b662      	cpsie	i
}
 8005472:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	40013800 	.word	0x40013800
 8005484:	40021c00 	.word	0x40021c00
 8005488:	40013c00 	.word	0x40013c00

0800548c <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	f200 8084 	bhi.w	80055ac <exti_Set_Priority+0x120>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <exti_Set_Priority+0x20>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054ed 	.word	0x080054ed
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	08005505 	.word	0x08005505
 80054b8:	08005511 	.word	0x08005511
 80054bc:	0800551d 	.word	0x0800551d
 80054c0:	08005529 	.word	0x08005529
 80054c4:	08005535 	.word	0x08005535
 80054c8:	08005541 	.word	0x08005541
 80054cc:	0800554d 	.word	0x0800554d
 80054d0:	08005559 	.word	0x08005559
 80054d4:	08005565 	.word	0x08005565
 80054d8:	08005571 	.word	0x08005571
 80054dc:	0800557d 	.word	0x0800557d
 80054e0:	08005589 	.word	0x08005589
 80054e4:	08005595 	.word	0x08005595
 80054e8:	080055a1 	.word	0x080055a1
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	4619      	mov	r1, r3
 80054f0:	2006      	movs	r0, #6
 80054f2:	f7ff f8f9 	bl	80046e8 <__NVIC_SetPriority>
				break;
 80054f6:	e05b      	b.n	80055b0 <exti_Set_Priority+0x124>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	4619      	mov	r1, r3
 80054fc:	2007      	movs	r0, #7
 80054fe:	f7ff f8f3 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005502:	e055      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	4619      	mov	r1, r3
 8005508:	2008      	movs	r0, #8
 800550a:	f7ff f8ed 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800550e:	e04f      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	4619      	mov	r1, r3
 8005514:	2009      	movs	r0, #9
 8005516:	f7ff f8e7 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800551a:	e049      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	4619      	mov	r1, r3
 8005520:	200a      	movs	r0, #10
 8005522:	f7ff f8e1 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005526:	e043      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	4619      	mov	r1, r3
 800552c:	2017      	movs	r0, #23
 800552e:	f7ff f8db 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005532:	e03d      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	4619      	mov	r1, r3
 8005538:	2017      	movs	r0, #23
 800553a:	f7ff f8d5 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800553e:	e037      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	4619      	mov	r1, r3
 8005544:	2017      	movs	r0, #23
 8005546:	f7ff f8cf 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800554a:	e031      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	4619      	mov	r1, r3
 8005550:	2017      	movs	r0, #23
 8005552:	f7ff f8c9 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005556:	e02b      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	4619      	mov	r1, r3
 800555c:	2017      	movs	r0, #23
 800555e:	f7ff f8c3 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005562:	e025      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	4619      	mov	r1, r3
 8005568:	2028      	movs	r0, #40	; 0x28
 800556a:	f7ff f8bd 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800556e:	e01f      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	4619      	mov	r1, r3
 8005574:	2028      	movs	r0, #40	; 0x28
 8005576:	f7ff f8b7 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800557a:	e019      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	4619      	mov	r1, r3
 8005580:	2028      	movs	r0, #40	; 0x28
 8005582:	f7ff f8b1 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005586:	e013      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	4619      	mov	r1, r3
 800558c:	2028      	movs	r0, #40	; 0x28
 800558e:	f7ff f8ab 	bl	80046e8 <__NVIC_SetPriority>
				break;
 8005592:	e00d      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	4619      	mov	r1, r3
 8005598:	2028      	movs	r0, #40	; 0x28
 800559a:	f7ff f8a5 	bl	80046e8 <__NVIC_SetPriority>
				break;
 800559e:	e007      	b.n	80055b0 <exti_Set_Priority+0x124>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	4619      	mov	r1, r3
 80055a4:	2028      	movs	r0, #40	; 0x28
 80055a6:	f7ff f89f 	bl	80046e8 <__NVIC_SetPriority>
				break;
 80055aa:	e001      	b.n	80055b0 <exti_Set_Priority+0x124>
			}

			default: {
				__NOP();
 80055ac:	bf00      	nop
				break;
 80055ae:	bf00      	nop

		}



}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
	__NOP();
 80055bc:	bf00      	nop
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <callback_extInt1>:
__attribute__ ((weak)) void callback_extInt1(void){
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	__NOP();
 80055cc:	bf00      	nop
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt2(void){
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
	__NOP();
 80055dc:	bf00      	nop
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <callback_extInt3>:
__attribute__ ((weak)) void callback_extInt3(void){
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
	__NOP();
 80055ec:	bf00      	nop
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt4(void){
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
	__NOP();
 80055fc:	bf00      	nop
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
	__NOP();
 800560c:	bf00      	nop
}
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
	__NOP();
 800561c:	bf00      	nop
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	__NOP();
 800562c:	bf00      	nop
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
	__NOP();
 800563c:	bf00      	nop
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	__NOP();
 800564c:	bf00      	nop
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
	__NOP();
 800565c:	bf00      	nop
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
	__NOP();
 800566c:	bf00      	nop
}
 800566e:	bf00      	nop
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	__NOP();
 800567c:	bf00      	nop
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	__NOP();
 800568c:	bf00      	nop
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
	__NOP();
 800569c:	bf00      	nop
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
	__NOP();
 80056ac:	bf00      	nop
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <EXTI0_IRQHandler+0x24>)
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <EXTI0_IRQHandler+0x24>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4a03      	ldr	r2, [pc, #12]	; (80056dc <EXTI0_IRQHandler+0x24>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 80056d4:	f7ff ff70 	bl	80055b8 <callback_extInt0>
	}
}
 80056d8:	bf00      	nop
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40013c00 	.word	0x40013c00

080056e0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <EXTI1_IRQHandler+0x24>)
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <EXTI1_IRQHandler+0x24>)
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	4a03      	ldr	r2, [pc, #12]	; (8005704 <EXTI1_IRQHandler+0x24>)
 80056f6:	f043 0302 	orr.w	r3, r3, #2
 80056fa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80056fc:	f7ff ff64 	bl	80055c8 <callback_extInt1>
	}
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40013c00 	.word	0x40013c00

08005708 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <EXTI2_IRQHandler+0x24>)
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <EXTI2_IRQHandler+0x24>)
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	4a03      	ldr	r2, [pc, #12]	; (800572c <EXTI2_IRQHandler+0x24>)
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8005724:	f7ff ff58 	bl	80055d8 <callback_extInt2>
	}
}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40013c00 	.word	0x40013c00

08005730 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <EXTI3_IRQHandler+0x24>)
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <EXTI3_IRQHandler+0x24>)
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4a03      	ldr	r2, [pc, #12]	; (8005754 <EXTI3_IRQHandler+0x24>)
 8005746:	f043 0308 	orr.w	r3, r3, #8
 800574a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800574c:	f7ff ff4c 	bl	80055e8 <callback_extInt3>
	}
}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40013c00 	.word	0x40013c00

08005758 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <EXTI4_IRQHandler+0x24>)
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <EXTI4_IRQHandler+0x24>)
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	4a03      	ldr	r2, [pc, #12]	; (800577c <EXTI4_IRQHandler+0x24>)
 800576e:	f043 0310 	orr.w	r3, r3, #16
 8005772:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8005774:	f7ff ff40 	bl	80055f8 <callback_extInt4>
	}
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40013c00 	.word	0x40013c00

08005780 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	4a22      	ldr	r2, [pc, #136]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 8005796:	f043 0320 	orr.w	r3, r3, #32
 800579a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800579c:	f7ff ff34 	bl	8005608 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80057a0:	e03c      	b.n	800581c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b8:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80057ba:	f7ff ff2d 	bl	8005618 <callback_extInt6>
}
 80057be:	e02d      	b.n	800581c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d6:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80057d8:	f7ff ff26 	bl	8005628 <callback_extInt7>
}
 80057dc:	e01e      	b.n	800581c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80057f6:	f7ff ff1f 	bl	8005638 <callback_extInt8>
}
 80057fa:	e00f      	b.n	800581c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <EXTI9_5_IRQHandler+0xa0>)
 800580e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005812:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8005814:	f7ff ff18 	bl	8005648 <callback_extInt9>
}
 8005818:	e000      	b.n	800581c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800581a:	bf00      	nop
}
 800581c:	bf00      	nop
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40013c00 	.word	0x40013c00

08005824 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8005828:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8005834:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 800583a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800583e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8005840:	f7ff ff0a 	bl	8005658 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8005844:	e049      	b.n	80058da <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8005846:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8005852:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800585c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800585e:	f7ff ff03 	bl	8005668 <callback_extInt11>
}
 8005862:	e03a      	b.n	80058da <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8005864:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005876:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800587a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800587c:	f7ff fefc 	bl	8005678 <callback_extInt12>
}
 8005880:	e02b      	b.n	80058da <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 8005894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005898:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800589a:	f7ff fef5 	bl	8005688 <callback_extInt13>
}
 800589e:	e01c      	b.n	80058da <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058b6:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80058b8:	f7ff feee 	bl	8005698 <callback_extInt14>
}
 80058bc:	e00d      	b.n	80058da <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <EXTI15_10_IRQHandler+0xbc>)
 80058d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d4:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80058d6:	f7ff fee7 	bl	80056a8 <callback_extInt15>
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40013c00 	.word	0x40013c00

080058e4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a88      	ldr	r2, [pc, #544]	; (8005b1c <GPIO_Config+0x238>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d106      	bne.n	800590c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80058fe:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <GPIO_Config+0x23c>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	4a87      	ldr	r2, [pc, #540]	; (8005b20 <GPIO_Config+0x23c>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6313      	str	r3, [r2, #48]	; 0x30
 800590a:	e03a      	b.n	8005982 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a84      	ldr	r2, [pc, #528]	; (8005b24 <GPIO_Config+0x240>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d106      	bne.n	8005924 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8005916:	4b82      	ldr	r3, [pc, #520]	; (8005b20 <GPIO_Config+0x23c>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4a81      	ldr	r2, [pc, #516]	; (8005b20 <GPIO_Config+0x23c>)
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	6313      	str	r3, [r2, #48]	; 0x30
 8005922:	e02e      	b.n	8005982 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7f      	ldr	r2, [pc, #508]	; (8005b28 <GPIO_Config+0x244>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d106      	bne.n	800593c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800592e:	4b7c      	ldr	r3, [pc, #496]	; (8005b20 <GPIO_Config+0x23c>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a7b      	ldr	r2, [pc, #492]	; (8005b20 <GPIO_Config+0x23c>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	e022      	b.n	8005982 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a7a      	ldr	r2, [pc, #488]	; (8005b2c <GPIO_Config+0x248>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d106      	bne.n	8005954 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8005946:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <GPIO_Config+0x23c>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	4a75      	ldr	r2, [pc, #468]	; (8005b20 <GPIO_Config+0x23c>)
 800594c:	f043 0308 	orr.w	r3, r3, #8
 8005950:	6313      	str	r3, [r2, #48]	; 0x30
 8005952:	e016      	b.n	8005982 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a75      	ldr	r2, [pc, #468]	; (8005b30 <GPIO_Config+0x24c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d106      	bne.n	800596c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800595e:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <GPIO_Config+0x23c>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	4a6f      	ldr	r2, [pc, #444]	; (8005b20 <GPIO_Config+0x23c>)
 8005964:	f043 0310 	orr.w	r3, r3, #16
 8005968:	6313      	str	r3, [r2, #48]	; 0x30
 800596a:	e00a      	b.n	8005982 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a70      	ldr	r2, [pc, #448]	; (8005b34 <GPIO_Config+0x250>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d105      	bne.n	8005982 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8005976:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <GPIO_Config+0x23c>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a69      	ldr	r2, [pc, #420]	; (8005b20 <GPIO_Config+0x23c>)
 800597c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005980:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	791b      	ldrb	r3, [r3, #4]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	2103      	movs	r1, #3
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	400a      	ands	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6819      	ldr	r1, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7a1b      	ldrb	r3, [r3, #8]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	791b      	ldrb	r3, [r3, #4]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	791b      	ldrb	r3, [r3, #4]
 80059dc:	4619      	mov	r1, r3
 80059de:	2301      	movs	r3, #1
 80059e0:	408b      	lsls	r3, r1
 80059e2:	43db      	mvns	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	400a      	ands	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	799b      	ldrb	r3, [r3, #6]
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	791b      	ldrb	r3, [r3, #4]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	4619      	mov	r1, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	79db      	ldrb	r3, [r3, #7]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	791b      	ldrb	r3, [r3, #4]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	791b      	ldrb	r3, [r3, #4]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68d9      	ldr	r1, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	795b      	ldrb	r3, [r3, #5]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d143      	bne.n	8005b0e <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	791b      	ldrb	r3, [r3, #4]
 8005a8a:	2b07      	cmp	r3, #7
 8005a8c:	d81f      	bhi.n	8005ace <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	791b      	ldrb	r3, [r3, #4]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	210f      	movs	r1, #15
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	400a      	ands	r2, r1
 8005aae:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7a5b      	ldrb	r3, [r3, #9]
 8005aba:	4619      	mov	r1, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8005acc:	e01f      	b.n	8005b0e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	791b      	ldrb	r3, [r3, #4]
 8005ad2:	3b08      	subs	r3, #8
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ade:	210f      	movs	r1, #15
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	400a      	ands	r2, r1
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7a5b      	ldrb	r3, [r3, #9]
 8005afc:	4619      	mov	r1, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40020000 	.word	0x40020000
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40020400 	.word	0x40020400
 8005b28:	40020800 	.word	0x40020800
 8005b2c:	40020c00 	.word	0x40020c00
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40021c00 	.word	0x40021c00

08005b38 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10d      	bne.n	8005b66 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	2301      	movs	r3, #1
 8005b58:	408b      	lsls	r3, r1
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8005b64:	e00d      	b.n	8005b82 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	3310      	adds	r3, #16
 8005b72:	2101      	movs	r1, #1
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	4619      	mov	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	619a      	str	r2, [r3, #24]
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4093      	lsls	r3, r2
 8005ba4:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8005bae:	897b      	ldrh	r3, [r7, #10]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	791b      	ldrb	r3, [r3, #4]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	40d3      	lsrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ffd8 	bl	8005b8e <GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d104      	bne.n	8005bf2 <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 8005be8:	2100      	movs	r1, #0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ffa4 	bl	8005b38 <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 8005bf0:	e003      	b.n	8005bfa <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ff9f 	bl	8005b38 <GPIO_WritePin>
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8005c08:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a32      	ldr	r2, [pc, #200]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c12:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005c14:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8005c1c:	4b2f      	ldr	r3, [pc, #188]	; (8005cdc <RCC_enableMaxFrequencies+0xd8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2e      	ldr	r2, [pc, #184]	; (8005cdc <RCC_enableMaxFrequencies+0xd8>)
 8005c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c26:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c38:	f043 0308 	orr.w	r3, r3, #8
 8005c3c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c44:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8005c48:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005c4a:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c54:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c60:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005c62:	e000      	b.n	8005c66 <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8005c64:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f8      	beq.n	8005c64 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c78:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005c7c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 8005c7e:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c88:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c94:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <RCC_enableMaxFrequencies+0xdc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <RCC_enableMaxFrequencies+0xdc>)
 8005c9c:	f023 030f 	bic.w	r3, r3, #15
 8005ca0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <RCC_enableMaxFrequencies+0xdc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <RCC_enableMaxFrequencies+0xdc>)
 8005ca8:	f043 0303 	orr.w	r3, r3, #3
 8005cac:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005cba:	e000      	b.n	8005cbe <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8005cbc:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <RCC_enableMaxFrequencies+0xd4>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f8      	beq.n	8005cbc <RCC_enableMaxFrequencies+0xb8>
	}



}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	40023c00 	.word	0x40023c00

08005ce4 <__libc_init_array>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	4d0d      	ldr	r5, [pc, #52]	; (8005d1c <__libc_init_array+0x38>)
 8005ce8:	4c0d      	ldr	r4, [pc, #52]	; (8005d20 <__libc_init_array+0x3c>)
 8005cea:	1b64      	subs	r4, r4, r5
 8005cec:	10a4      	asrs	r4, r4, #2
 8005cee:	2600      	movs	r6, #0
 8005cf0:	42a6      	cmp	r6, r4
 8005cf2:	d109      	bne.n	8005d08 <__libc_init_array+0x24>
 8005cf4:	4d0b      	ldr	r5, [pc, #44]	; (8005d24 <__libc_init_array+0x40>)
 8005cf6:	4c0c      	ldr	r4, [pc, #48]	; (8005d28 <__libc_init_array+0x44>)
 8005cf8:	f000 fd38 	bl	800676c <_init>
 8005cfc:	1b64      	subs	r4, r4, r5
 8005cfe:	10a4      	asrs	r4, r4, #2
 8005d00:	2600      	movs	r6, #0
 8005d02:	42a6      	cmp	r6, r4
 8005d04:	d105      	bne.n	8005d12 <__libc_init_array+0x2e>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0c:	4798      	blx	r3
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7ee      	b.n	8005cf0 <__libc_init_array+0xc>
 8005d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d16:	4798      	blx	r3
 8005d18:	3601      	adds	r6, #1
 8005d1a:	e7f2      	b.n	8005d02 <__libc_init_array+0x1e>
 8005d1c:	080068a8 	.word	0x080068a8
 8005d20:	080068a8 	.word	0x080068a8
 8005d24:	080068a8 	.word	0x080068a8
 8005d28:	080068ac 	.word	0x080068ac

08005d2c <memcmp>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	3901      	subs	r1, #1
 8005d30:	4402      	add	r2, r0
 8005d32:	4290      	cmp	r0, r2
 8005d34:	d101      	bne.n	8005d3a <memcmp+0xe>
 8005d36:	2000      	movs	r0, #0
 8005d38:	e005      	b.n	8005d46 <memcmp+0x1a>
 8005d3a:	7803      	ldrb	r3, [r0, #0]
 8005d3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d001      	beq.n	8005d48 <memcmp+0x1c>
 8005d44:	1b18      	subs	r0, r3, r4
 8005d46:	bd10      	pop	{r4, pc}
 8005d48:	3001      	adds	r0, #1
 8005d4a:	e7f2      	b.n	8005d32 <memcmp+0x6>

08005d4c <memcpy>:
 8005d4c:	440a      	add	r2, r1
 8005d4e:	4291      	cmp	r1, r2
 8005d50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d54:	d100      	bne.n	8005d58 <memcpy+0xc>
 8005d56:	4770      	bx	lr
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d62:	4291      	cmp	r1, r2
 8005d64:	d1f9      	bne.n	8005d5a <memcpy+0xe>
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <memset>:
 8005d68:	4402      	add	r2, r0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <memset+0xa>
 8005d70:	4770      	bx	lr
 8005d72:	f803 1b01 	strb.w	r1, [r3], #1
 8005d76:	e7f9      	b.n	8005d6c <memset+0x4>

08005d78 <_puts_r>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	b118      	cbz	r0, 8005d88 <_puts_r+0x10>
 8005d80:	6983      	ldr	r3, [r0, #24]
 8005d82:	b90b      	cbnz	r3, 8005d88 <_puts_r+0x10>
 8005d84:	f000 fa9c 	bl	80062c0 <__sinit>
 8005d88:	69ab      	ldr	r3, [r5, #24]
 8005d8a:	68ac      	ldr	r4, [r5, #8]
 8005d8c:	b913      	cbnz	r3, 8005d94 <_puts_r+0x1c>
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 fa96 	bl	80062c0 <__sinit>
 8005d94:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <_puts_r+0xd0>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d120      	bne.n	8005ddc <_puts_r+0x64>
 8005d9a:	686c      	ldr	r4, [r5, #4]
 8005d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9e:	07db      	lsls	r3, r3, #31
 8005da0:	d405      	bmi.n	8005dae <_puts_r+0x36>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	0598      	lsls	r0, r3, #22
 8005da6:	d402      	bmi.n	8005dae <_puts_r+0x36>
 8005da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005daa:	f000 fb27 	bl	80063fc <__retarget_lock_acquire_recursive>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	0719      	lsls	r1, r3, #28
 8005db2:	d51d      	bpl.n	8005df0 <_puts_r+0x78>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	b1db      	cbz	r3, 8005df0 <_puts_r+0x78>
 8005db8:	3e01      	subs	r6, #1
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	bb39      	cbnz	r1, 8005e16 <_puts_r+0x9e>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	da38      	bge.n	8005e3c <_puts_r+0xc4>
 8005dca:	4622      	mov	r2, r4
 8005dcc:	210a      	movs	r1, #10
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 f88c 	bl	8005eec <__swbuf_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d011      	beq.n	8005dfc <_puts_r+0x84>
 8005dd8:	250a      	movs	r5, #10
 8005dda:	e011      	b.n	8005e00 <_puts_r+0x88>
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <_puts_r+0xd4>)
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d101      	bne.n	8005de6 <_puts_r+0x6e>
 8005de2:	68ac      	ldr	r4, [r5, #8]
 8005de4:	e7da      	b.n	8005d9c <_puts_r+0x24>
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <_puts_r+0xd8>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	bf08      	it	eq
 8005dec:	68ec      	ldreq	r4, [r5, #12]
 8005dee:	e7d5      	b.n	8005d9c <_puts_r+0x24>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f8cc 	bl	8005f90 <__swsetup_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0dd      	beq.n	8005db8 <_puts_r+0x40>
 8005dfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e02:	07da      	lsls	r2, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <_puts_r+0x9a>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	059b      	lsls	r3, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_puts_r+0x9a>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f000 faf6 	bl	80063fe <__retarget_lock_release_recursive>
 8005e12:	4628      	mov	r0, r5
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da04      	bge.n	8005e24 <_puts_r+0xac>
 8005e1a:	69a2      	ldr	r2, [r4, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	dc06      	bgt.n	8005e2e <_puts_r+0xb6>
 8005e20:	290a      	cmp	r1, #10
 8005e22:	d004      	beq.n	8005e2e <_puts_r+0xb6>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	7019      	strb	r1, [r3, #0]
 8005e2c:	e7c5      	b.n	8005dba <_puts_r+0x42>
 8005e2e:	4622      	mov	r2, r4
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f85b 	bl	8005eec <__swbuf_r>
 8005e36:	3001      	adds	r0, #1
 8005e38:	d1bf      	bne.n	8005dba <_puts_r+0x42>
 8005e3a:	e7df      	b.n	8005dfc <_puts_r+0x84>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	250a      	movs	r5, #10
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	701d      	strb	r5, [r3, #0]
 8005e46:	e7db      	b.n	8005e00 <_puts_r+0x88>
 8005e48:	08006868 	.word	0x08006868
 8005e4c:	08006888 	.word	0x08006888
 8005e50:	08006848 	.word	0x08006848

08005e54 <puts>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <puts+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f7ff bf8d 	b.w	8005d78 <_puts_r>
 8005e5e:	bf00      	nop
 8005e60:	2000000c 	.word	0x2000000c

08005e64 <__sread>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	460c      	mov	r4, r1
 8005e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6c:	f000 fc20 	bl	80066b0 <_read_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	bfab      	itete	ge
 8005e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e76:	89a3      	ldrhlt	r3, [r4, #12]
 8005e78:	181b      	addge	r3, r3, r0
 8005e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e7e:	bfac      	ite	ge
 8005e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e82:	81a3      	strhlt	r3, [r4, #12]
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <__swrite>:
 8005e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	05db      	lsls	r3, r3, #23
 8005e90:	4605      	mov	r5, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	4616      	mov	r6, r2
 8005e96:	d505      	bpl.n	8005ea4 <__swrite+0x1e>
 8005e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f000 faae 	bl	8006400 <_lseek_r>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eae:	81a3      	strh	r3, [r4, #12]
 8005eb0:	4632      	mov	r2, r6
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	f7fe bbe5 	b.w	8004688 <_write_r>

08005ebe <__sseek>:
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec6:	f000 fa9b 	bl	8006400 <_lseek_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	bf15      	itete	ne
 8005ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eda:	81a3      	strheq	r3, [r4, #12]
 8005edc:	bf18      	it	ne
 8005ede:	81a3      	strhne	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__sclose>:
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 b8c1 	b.w	800606c <_close_r>
	...

08005eec <__swbuf_r>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	b118      	cbz	r0, 8005efe <__swbuf_r+0x12>
 8005ef6:	6983      	ldr	r3, [r0, #24]
 8005ef8:	b90b      	cbnz	r3, 8005efe <__swbuf_r+0x12>
 8005efa:	f000 f9e1 	bl	80062c0 <__sinit>
 8005efe:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <__swbuf_r+0x98>)
 8005f00:	429c      	cmp	r4, r3
 8005f02:	d12b      	bne.n	8005f5c <__swbuf_r+0x70>
 8005f04:	686c      	ldr	r4, [r5, #4]
 8005f06:	69a3      	ldr	r3, [r4, #24]
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	071a      	lsls	r2, r3, #28
 8005f0e:	d52f      	bpl.n	8005f70 <__swbuf_r+0x84>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	b36b      	cbz	r3, 8005f70 <__swbuf_r+0x84>
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	1ac0      	subs	r0, r0, r3
 8005f1a:	6963      	ldr	r3, [r4, #20]
 8005f1c:	b2f6      	uxtb	r6, r6
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	4637      	mov	r7, r6
 8005f22:	dc04      	bgt.n	8005f2e <__swbuf_r+0x42>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f936 	bl	8006198 <_fflush_r>
 8005f2c:	bb30      	cbnz	r0, 8005f7c <__swbuf_r+0x90>
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	60a3      	str	r3, [r4, #8]
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	701e      	strb	r6, [r3, #0]
 8005f3c:	6963      	ldr	r3, [r4, #20]
 8005f3e:	3001      	adds	r0, #1
 8005f40:	4283      	cmp	r3, r0
 8005f42:	d004      	beq.n	8005f4e <__swbuf_r+0x62>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	07db      	lsls	r3, r3, #31
 8005f48:	d506      	bpl.n	8005f58 <__swbuf_r+0x6c>
 8005f4a:	2e0a      	cmp	r6, #10
 8005f4c:	d104      	bne.n	8005f58 <__swbuf_r+0x6c>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f921 	bl	8006198 <_fflush_r>
 8005f56:	b988      	cbnz	r0, 8005f7c <__swbuf_r+0x90>
 8005f58:	4638      	mov	r0, r7
 8005f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <__swbuf_r+0x9c>)
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d101      	bne.n	8005f66 <__swbuf_r+0x7a>
 8005f62:	68ac      	ldr	r4, [r5, #8]
 8005f64:	e7cf      	b.n	8005f06 <__swbuf_r+0x1a>
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <__swbuf_r+0xa0>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	bf08      	it	eq
 8005f6c:	68ec      	ldreq	r4, [r5, #12]
 8005f6e:	e7ca      	b.n	8005f06 <__swbuf_r+0x1a>
 8005f70:	4621      	mov	r1, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f80c 	bl	8005f90 <__swsetup_r>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d0cb      	beq.n	8005f14 <__swbuf_r+0x28>
 8005f7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f80:	e7ea      	b.n	8005f58 <__swbuf_r+0x6c>
 8005f82:	bf00      	nop
 8005f84:	08006868 	.word	0x08006868
 8005f88:	08006888 	.word	0x08006888
 8005f8c:	08006848 	.word	0x08006848

08005f90 <__swsetup_r>:
 8005f90:	4b32      	ldr	r3, [pc, #200]	; (800605c <__swsetup_r+0xcc>)
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	4606      	mov	r6, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	b125      	cbz	r5, 8005fa6 <__swsetup_r+0x16>
 8005f9c:	69ab      	ldr	r3, [r5, #24]
 8005f9e:	b913      	cbnz	r3, 8005fa6 <__swsetup_r+0x16>
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f98d 	bl	80062c0 <__sinit>
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <__swsetup_r+0xd0>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d10f      	bne.n	8005fcc <__swsetup_r+0x3c>
 8005fac:	686c      	ldr	r4, [r5, #4]
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fb4:	0719      	lsls	r1, r3, #28
 8005fb6:	d42c      	bmi.n	8006012 <__swsetup_r+0x82>
 8005fb8:	06dd      	lsls	r5, r3, #27
 8005fba:	d411      	bmi.n	8005fe0 <__swsetup_r+0x50>
 8005fbc:	2309      	movs	r3, #9
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fca:	e03e      	b.n	800604a <__swsetup_r+0xba>
 8005fcc:	4b25      	ldr	r3, [pc, #148]	; (8006064 <__swsetup_r+0xd4>)
 8005fce:	429c      	cmp	r4, r3
 8005fd0:	d101      	bne.n	8005fd6 <__swsetup_r+0x46>
 8005fd2:	68ac      	ldr	r4, [r5, #8]
 8005fd4:	e7eb      	b.n	8005fae <__swsetup_r+0x1e>
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <__swsetup_r+0xd8>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	bf08      	it	eq
 8005fdc:	68ec      	ldreq	r4, [r5, #12]
 8005fde:	e7e6      	b.n	8005fae <__swsetup_r+0x1e>
 8005fe0:	0758      	lsls	r0, r3, #29
 8005fe2:	d512      	bpl.n	800600a <__swsetup_r+0x7a>
 8005fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fe6:	b141      	cbz	r1, 8005ffa <__swsetup_r+0x6a>
 8005fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fec:	4299      	cmp	r1, r3
 8005fee:	d002      	beq.n	8005ff6 <__swsetup_r+0x66>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 fa7d 	bl	80064f0 <_free_r>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	2300      	movs	r3, #0
 8006004:	6063      	str	r3, [r4, #4]
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f043 0308 	orr.w	r3, r3, #8
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	b94b      	cbnz	r3, 800602a <__swsetup_r+0x9a>
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800601c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006020:	d003      	beq.n	800602a <__swsetup_r+0x9a>
 8006022:	4621      	mov	r1, r4
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fa23 	bl	8006470 <__smakebuf_r>
 800602a:	89a0      	ldrh	r0, [r4, #12]
 800602c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006030:	f010 0301 	ands.w	r3, r0, #1
 8006034:	d00a      	beq.n	800604c <__swsetup_r+0xbc>
 8006036:	2300      	movs	r3, #0
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	6963      	ldr	r3, [r4, #20]
 800603c:	425b      	negs	r3, r3
 800603e:	61a3      	str	r3, [r4, #24]
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	b943      	cbnz	r3, 8006056 <__swsetup_r+0xc6>
 8006044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006048:	d1ba      	bne.n	8005fc0 <__swsetup_r+0x30>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	0781      	lsls	r1, r0, #30
 800604e:	bf58      	it	pl
 8006050:	6963      	ldrpl	r3, [r4, #20]
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	e7f4      	b.n	8006040 <__swsetup_r+0xb0>
 8006056:	2000      	movs	r0, #0
 8006058:	e7f7      	b.n	800604a <__swsetup_r+0xba>
 800605a:	bf00      	nop
 800605c:	2000000c 	.word	0x2000000c
 8006060:	08006868 	.word	0x08006868
 8006064:	08006888 	.word	0x08006888
 8006068:	08006848 	.word	0x08006848

0800606c <_close_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d06      	ldr	r5, [pc, #24]	; (8006088 <_close_r+0x1c>)
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	f7fa f9d0 	bl	800041c <_close>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_close_r+0x1a>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_close_r+0x1a>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	200134e0 	.word	0x200134e0

0800608c <__sflush_r>:
 800608c:	898a      	ldrh	r2, [r1, #12]
 800608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006092:	4605      	mov	r5, r0
 8006094:	0710      	lsls	r0, r2, #28
 8006096:	460c      	mov	r4, r1
 8006098:	d458      	bmi.n	800614c <__sflush_r+0xc0>
 800609a:	684b      	ldr	r3, [r1, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	dc05      	bgt.n	80060ac <__sflush_r+0x20>
 80060a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dc02      	bgt.n	80060ac <__sflush_r+0x20>
 80060a6:	2000      	movs	r0, #0
 80060a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	d0f9      	beq.n	80060a6 <__sflush_r+0x1a>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060b8:	682f      	ldr	r7, [r5, #0]
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	d032      	beq.n	8006124 <__sflush_r+0x98>
 80060be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	075a      	lsls	r2, r3, #29
 80060c4:	d505      	bpl.n	80060d2 <__sflush_r+0x46>
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	1ac0      	subs	r0, r0, r3
 80060ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060cc:	b10b      	cbz	r3, 80060d2 <__sflush_r+0x46>
 80060ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060d0:	1ac0      	subs	r0, r0, r3
 80060d2:	2300      	movs	r3, #0
 80060d4:	4602      	mov	r2, r0
 80060d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060d8:	6a21      	ldr	r1, [r4, #32]
 80060da:	4628      	mov	r0, r5
 80060dc:	47b0      	blx	r6
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	d106      	bne.n	80060f2 <__sflush_r+0x66>
 80060e4:	6829      	ldr	r1, [r5, #0]
 80060e6:	291d      	cmp	r1, #29
 80060e8:	d82c      	bhi.n	8006144 <__sflush_r+0xb8>
 80060ea:	4a2a      	ldr	r2, [pc, #168]	; (8006194 <__sflush_r+0x108>)
 80060ec:	40ca      	lsrs	r2, r1
 80060ee:	07d6      	lsls	r6, r2, #31
 80060f0:	d528      	bpl.n	8006144 <__sflush_r+0xb8>
 80060f2:	2200      	movs	r2, #0
 80060f4:	6062      	str	r2, [r4, #4]
 80060f6:	04d9      	lsls	r1, r3, #19
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	d504      	bpl.n	8006108 <__sflush_r+0x7c>
 80060fe:	1c42      	adds	r2, r0, #1
 8006100:	d101      	bne.n	8006106 <__sflush_r+0x7a>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	b903      	cbnz	r3, 8006108 <__sflush_r+0x7c>
 8006106:	6560      	str	r0, [r4, #84]	; 0x54
 8006108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800610a:	602f      	str	r7, [r5, #0]
 800610c:	2900      	cmp	r1, #0
 800610e:	d0ca      	beq.n	80060a6 <__sflush_r+0x1a>
 8006110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006114:	4299      	cmp	r1, r3
 8006116:	d002      	beq.n	800611e <__sflush_r+0x92>
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f9e9 	bl	80064f0 <_free_r>
 800611e:	2000      	movs	r0, #0
 8006120:	6360      	str	r0, [r4, #52]	; 0x34
 8006122:	e7c1      	b.n	80060a8 <__sflush_r+0x1c>
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	2301      	movs	r3, #1
 8006128:	4628      	mov	r0, r5
 800612a:	47b0      	blx	r6
 800612c:	1c41      	adds	r1, r0, #1
 800612e:	d1c7      	bne.n	80060c0 <__sflush_r+0x34>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0c4      	beq.n	80060c0 <__sflush_r+0x34>
 8006136:	2b1d      	cmp	r3, #29
 8006138:	d001      	beq.n	800613e <__sflush_r+0xb2>
 800613a:	2b16      	cmp	r3, #22
 800613c:	d101      	bne.n	8006142 <__sflush_r+0xb6>
 800613e:	602f      	str	r7, [r5, #0]
 8006140:	e7b1      	b.n	80060a6 <__sflush_r+0x1a>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	e7ad      	b.n	80060a8 <__sflush_r+0x1c>
 800614c:	690f      	ldr	r7, [r1, #16]
 800614e:	2f00      	cmp	r7, #0
 8006150:	d0a9      	beq.n	80060a6 <__sflush_r+0x1a>
 8006152:	0793      	lsls	r3, r2, #30
 8006154:	680e      	ldr	r6, [r1, #0]
 8006156:	bf08      	it	eq
 8006158:	694b      	ldreq	r3, [r1, #20]
 800615a:	600f      	str	r7, [r1, #0]
 800615c:	bf18      	it	ne
 800615e:	2300      	movne	r3, #0
 8006160:	eba6 0807 	sub.w	r8, r6, r7
 8006164:	608b      	str	r3, [r1, #8]
 8006166:	f1b8 0f00 	cmp.w	r8, #0
 800616a:	dd9c      	ble.n	80060a6 <__sflush_r+0x1a>
 800616c:	6a21      	ldr	r1, [r4, #32]
 800616e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006170:	4643      	mov	r3, r8
 8006172:	463a      	mov	r2, r7
 8006174:	4628      	mov	r0, r5
 8006176:	47b0      	blx	r6
 8006178:	2800      	cmp	r0, #0
 800617a:	dc06      	bgt.n	800618a <__sflush_r+0xfe>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006188:	e78e      	b.n	80060a8 <__sflush_r+0x1c>
 800618a:	4407      	add	r7, r0
 800618c:	eba8 0800 	sub.w	r8, r8, r0
 8006190:	e7e9      	b.n	8006166 <__sflush_r+0xda>
 8006192:	bf00      	nop
 8006194:	20400001 	.word	0x20400001

08006198 <_fflush_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	690b      	ldr	r3, [r1, #16]
 800619c:	4605      	mov	r5, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	b913      	cbnz	r3, 80061a8 <_fflush_r+0x10>
 80061a2:	2500      	movs	r5, #0
 80061a4:	4628      	mov	r0, r5
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	b118      	cbz	r0, 80061b2 <_fflush_r+0x1a>
 80061aa:	6983      	ldr	r3, [r0, #24]
 80061ac:	b90b      	cbnz	r3, 80061b2 <_fflush_r+0x1a>
 80061ae:	f000 f887 	bl	80062c0 <__sinit>
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <_fflush_r+0x6c>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	d11b      	bne.n	80061f0 <_fflush_r+0x58>
 80061b8:	686c      	ldr	r4, [r5, #4]
 80061ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0ef      	beq.n	80061a2 <_fflush_r+0xa>
 80061c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c4:	07d0      	lsls	r0, r2, #31
 80061c6:	d404      	bmi.n	80061d2 <_fflush_r+0x3a>
 80061c8:	0599      	lsls	r1, r3, #22
 80061ca:	d402      	bmi.n	80061d2 <_fflush_r+0x3a>
 80061cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ce:	f000 f915 	bl	80063fc <__retarget_lock_acquire_recursive>
 80061d2:	4628      	mov	r0, r5
 80061d4:	4621      	mov	r1, r4
 80061d6:	f7ff ff59 	bl	800608c <__sflush_r>
 80061da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061dc:	07da      	lsls	r2, r3, #31
 80061de:	4605      	mov	r5, r0
 80061e0:	d4e0      	bmi.n	80061a4 <_fflush_r+0xc>
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	059b      	lsls	r3, r3, #22
 80061e6:	d4dd      	bmi.n	80061a4 <_fflush_r+0xc>
 80061e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ea:	f000 f908 	bl	80063fe <__retarget_lock_release_recursive>
 80061ee:	e7d9      	b.n	80061a4 <_fflush_r+0xc>
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <_fflush_r+0x70>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <_fflush_r+0x62>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7df      	b.n	80061ba <_fflush_r+0x22>
 80061fa:	4b04      	ldr	r3, [pc, #16]	; (800620c <_fflush_r+0x74>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7da      	b.n	80061ba <_fflush_r+0x22>
 8006204:	08006868 	.word	0x08006868
 8006208:	08006888 	.word	0x08006888
 800620c:	08006848 	.word	0x08006848

08006210 <std>:
 8006210:	2300      	movs	r3, #0
 8006212:	b510      	push	{r4, lr}
 8006214:	4604      	mov	r4, r0
 8006216:	e9c0 3300 	strd	r3, r3, [r0]
 800621a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800621e:	6083      	str	r3, [r0, #8]
 8006220:	8181      	strh	r1, [r0, #12]
 8006222:	6643      	str	r3, [r0, #100]	; 0x64
 8006224:	81c2      	strh	r2, [r0, #14]
 8006226:	6183      	str	r3, [r0, #24]
 8006228:	4619      	mov	r1, r3
 800622a:	2208      	movs	r2, #8
 800622c:	305c      	adds	r0, #92	; 0x5c
 800622e:	f7ff fd9b 	bl	8005d68 <memset>
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <std+0x38>)
 8006234:	6263      	str	r3, [r4, #36]	; 0x24
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <std+0x3c>)
 8006238:	62a3      	str	r3, [r4, #40]	; 0x28
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <std+0x40>)
 800623c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <std+0x44>)
 8006240:	6224      	str	r4, [r4, #32]
 8006242:	6323      	str	r3, [r4, #48]	; 0x30
 8006244:	bd10      	pop	{r4, pc}
 8006246:	bf00      	nop
 8006248:	08005e65 	.word	0x08005e65
 800624c:	08005e87 	.word	0x08005e87
 8006250:	08005ebf 	.word	0x08005ebf
 8006254:	08005ee3 	.word	0x08005ee3

08006258 <_cleanup_r>:
 8006258:	4901      	ldr	r1, [pc, #4]	; (8006260 <_cleanup_r+0x8>)
 800625a:	f000 b8af 	b.w	80063bc <_fwalk_reent>
 800625e:	bf00      	nop
 8006260:	08006199 	.word	0x08006199

08006264 <__sfmoreglue>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	2268      	movs	r2, #104	; 0x68
 8006268:	1e4d      	subs	r5, r1, #1
 800626a:	4355      	muls	r5, r2
 800626c:	460e      	mov	r6, r1
 800626e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006272:	f000 f9a9 	bl	80065c8 <_malloc_r>
 8006276:	4604      	mov	r4, r0
 8006278:	b140      	cbz	r0, 800628c <__sfmoreglue+0x28>
 800627a:	2100      	movs	r1, #0
 800627c:	e9c0 1600 	strd	r1, r6, [r0]
 8006280:	300c      	adds	r0, #12
 8006282:	60a0      	str	r0, [r4, #8]
 8006284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006288:	f7ff fd6e 	bl	8005d68 <memset>
 800628c:	4620      	mov	r0, r4
 800628e:	bd70      	pop	{r4, r5, r6, pc}

08006290 <__sfp_lock_acquire>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__sfp_lock_acquire+0x8>)
 8006292:	f000 b8b3 	b.w	80063fc <__retarget_lock_acquire_recursive>
 8006296:	bf00      	nop
 8006298:	200134d4 	.word	0x200134d4

0800629c <__sfp_lock_release>:
 800629c:	4801      	ldr	r0, [pc, #4]	; (80062a4 <__sfp_lock_release+0x8>)
 800629e:	f000 b8ae 	b.w	80063fe <__retarget_lock_release_recursive>
 80062a2:	bf00      	nop
 80062a4:	200134d4 	.word	0x200134d4

080062a8 <__sinit_lock_acquire>:
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <__sinit_lock_acquire+0x8>)
 80062aa:	f000 b8a7 	b.w	80063fc <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	200134d5 	.word	0x200134d5

080062b4 <__sinit_lock_release>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__sinit_lock_release+0x8>)
 80062b6:	f000 b8a2 	b.w	80063fe <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	200134d5 	.word	0x200134d5

080062c0 <__sinit>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	f7ff fff0 	bl	80062a8 <__sinit_lock_acquire>
 80062c8:	69a3      	ldr	r3, [r4, #24]
 80062ca:	b11b      	cbz	r3, 80062d4 <__sinit+0x14>
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d0:	f7ff bff0 	b.w	80062b4 <__sinit_lock_release>
 80062d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062d8:	6523      	str	r3, [r4, #80]	; 0x50
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <__sinit+0x68>)
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <__sinit+0x6c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	bf04      	itt	eq
 80062e6:	2301      	moveq	r3, #1
 80062e8:	61a3      	streq	r3, [r4, #24]
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 f820 	bl	8006330 <__sfp>
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 f81c 	bl	8006330 <__sfp>
 80062f8:	60a0      	str	r0, [r4, #8]
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 f818 	bl	8006330 <__sfp>
 8006300:	2200      	movs	r2, #0
 8006302:	60e0      	str	r0, [r4, #12]
 8006304:	2104      	movs	r1, #4
 8006306:	6860      	ldr	r0, [r4, #4]
 8006308:	f7ff ff82 	bl	8006210 <std>
 800630c:	68a0      	ldr	r0, [r4, #8]
 800630e:	2201      	movs	r2, #1
 8006310:	2109      	movs	r1, #9
 8006312:	f7ff ff7d 	bl	8006210 <std>
 8006316:	68e0      	ldr	r0, [r4, #12]
 8006318:	2202      	movs	r2, #2
 800631a:	2112      	movs	r1, #18
 800631c:	f7ff ff78 	bl	8006210 <std>
 8006320:	2301      	movs	r3, #1
 8006322:	61a3      	str	r3, [r4, #24]
 8006324:	e7d2      	b.n	80062cc <__sinit+0xc>
 8006326:	bf00      	nop
 8006328:	08006844 	.word	0x08006844
 800632c:	08006259 	.word	0x08006259

08006330 <__sfp>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	4607      	mov	r7, r0
 8006334:	f7ff ffac 	bl	8006290 <__sfp_lock_acquire>
 8006338:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <__sfp+0x84>)
 800633a:	681e      	ldr	r6, [r3, #0]
 800633c:	69b3      	ldr	r3, [r6, #24]
 800633e:	b913      	cbnz	r3, 8006346 <__sfp+0x16>
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff ffbd 	bl	80062c0 <__sinit>
 8006346:	3648      	adds	r6, #72	; 0x48
 8006348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800634c:	3b01      	subs	r3, #1
 800634e:	d503      	bpl.n	8006358 <__sfp+0x28>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	b30b      	cbz	r3, 8006398 <__sfp+0x68>
 8006354:	6836      	ldr	r6, [r6, #0]
 8006356:	e7f7      	b.n	8006348 <__sfp+0x18>
 8006358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800635c:	b9d5      	cbnz	r5, 8006394 <__sfp+0x64>
 800635e:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <__sfp+0x88>)
 8006360:	60e3      	str	r3, [r4, #12]
 8006362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006366:	6665      	str	r5, [r4, #100]	; 0x64
 8006368:	f000 f847 	bl	80063fa <__retarget_lock_init_recursive>
 800636c:	f7ff ff96 	bl	800629c <__sfp_lock_release>
 8006370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006378:	6025      	str	r5, [r4, #0]
 800637a:	61a5      	str	r5, [r4, #24]
 800637c:	2208      	movs	r2, #8
 800637e:	4629      	mov	r1, r5
 8006380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006384:	f7ff fcf0 	bl	8005d68 <memset>
 8006388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800638c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006390:	4620      	mov	r0, r4
 8006392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006394:	3468      	adds	r4, #104	; 0x68
 8006396:	e7d9      	b.n	800634c <__sfp+0x1c>
 8006398:	2104      	movs	r1, #4
 800639a:	4638      	mov	r0, r7
 800639c:	f7ff ff62 	bl	8006264 <__sfmoreglue>
 80063a0:	4604      	mov	r4, r0
 80063a2:	6030      	str	r0, [r6, #0]
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d1d5      	bne.n	8006354 <__sfp+0x24>
 80063a8:	f7ff ff78 	bl	800629c <__sfp_lock_release>
 80063ac:	230c      	movs	r3, #12
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	e7ee      	b.n	8006390 <__sfp+0x60>
 80063b2:	bf00      	nop
 80063b4:	08006844 	.word	0x08006844
 80063b8:	ffff0001 	.word	0xffff0001

080063bc <_fwalk_reent>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	4606      	mov	r6, r0
 80063c2:	4688      	mov	r8, r1
 80063c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063c8:	2700      	movs	r7, #0
 80063ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063ce:	f1b9 0901 	subs.w	r9, r9, #1
 80063d2:	d505      	bpl.n	80063e0 <_fwalk_reent+0x24>
 80063d4:	6824      	ldr	r4, [r4, #0]
 80063d6:	2c00      	cmp	r4, #0
 80063d8:	d1f7      	bne.n	80063ca <_fwalk_reent+0xe>
 80063da:	4638      	mov	r0, r7
 80063dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e0:	89ab      	ldrh	r3, [r5, #12]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d907      	bls.n	80063f6 <_fwalk_reent+0x3a>
 80063e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ea:	3301      	adds	r3, #1
 80063ec:	d003      	beq.n	80063f6 <_fwalk_reent+0x3a>
 80063ee:	4629      	mov	r1, r5
 80063f0:	4630      	mov	r0, r6
 80063f2:	47c0      	blx	r8
 80063f4:	4307      	orrs	r7, r0
 80063f6:	3568      	adds	r5, #104	; 0x68
 80063f8:	e7e9      	b.n	80063ce <_fwalk_reent+0x12>

080063fa <__retarget_lock_init_recursive>:
 80063fa:	4770      	bx	lr

080063fc <__retarget_lock_acquire_recursive>:
 80063fc:	4770      	bx	lr

080063fe <__retarget_lock_release_recursive>:
 80063fe:	4770      	bx	lr

08006400 <_lseek_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	; (8006420 <_lseek_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fa f82b 	bl	800046a <_lseek>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_lseek_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_lseek_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200134e0 	.word	0x200134e0

08006424 <__swhatbuf_r>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	460e      	mov	r6, r1
 8006428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642c:	2900      	cmp	r1, #0
 800642e:	b096      	sub	sp, #88	; 0x58
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	da08      	bge.n	8006448 <__swhatbuf_r+0x24>
 8006436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	061a      	lsls	r2, r3, #24
 8006440:	d410      	bmi.n	8006464 <__swhatbuf_r+0x40>
 8006442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006446:	e00e      	b.n	8006466 <__swhatbuf_r+0x42>
 8006448:	466a      	mov	r2, sp
 800644a:	f000 f953 	bl	80066f4 <_fstat_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	dbf1      	blt.n	8006436 <__swhatbuf_r+0x12>
 8006452:	9a01      	ldr	r2, [sp, #4]
 8006454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800645c:	425a      	negs	r2, r3
 800645e:	415a      	adcs	r2, r3
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	e7ee      	b.n	8006442 <__swhatbuf_r+0x1e>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	2000      	movs	r0, #0
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	b016      	add	sp, #88	; 0x58
 800646c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006470 <__smakebuf_r>:
 8006470:	898b      	ldrh	r3, [r1, #12]
 8006472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006474:	079d      	lsls	r5, r3, #30
 8006476:	4606      	mov	r6, r0
 8006478:	460c      	mov	r4, r1
 800647a:	d507      	bpl.n	800648c <__smakebuf_r+0x1c>
 800647c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2301      	movs	r3, #1
 8006486:	6163      	str	r3, [r4, #20]
 8006488:	b002      	add	sp, #8
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	ab01      	add	r3, sp, #4
 800648e:	466a      	mov	r2, sp
 8006490:	f7ff ffc8 	bl	8006424 <__swhatbuf_r>
 8006494:	9900      	ldr	r1, [sp, #0]
 8006496:	4605      	mov	r5, r0
 8006498:	4630      	mov	r0, r6
 800649a:	f000 f895 	bl	80065c8 <_malloc_r>
 800649e:	b948      	cbnz	r0, 80064b4 <__smakebuf_r+0x44>
 80064a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a4:	059a      	lsls	r2, r3, #22
 80064a6:	d4ef      	bmi.n	8006488 <__smakebuf_r+0x18>
 80064a8:	f023 0303 	bic.w	r3, r3, #3
 80064ac:	f043 0302 	orr.w	r3, r3, #2
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	e7e3      	b.n	800647c <__smakebuf_r+0xc>
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <__smakebuf_r+0x7c>)
 80064b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	6020      	str	r0, [r4, #0]
 80064bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	9b00      	ldr	r3, [sp, #0]
 80064c4:	6163      	str	r3, [r4, #20]
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	6120      	str	r0, [r4, #16]
 80064ca:	b15b      	cbz	r3, 80064e4 <__smakebuf_r+0x74>
 80064cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f921 	bl	8006718 <_isatty_r>
 80064d6:	b128      	cbz	r0, 80064e4 <__smakebuf_r+0x74>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	89a0      	ldrh	r0, [r4, #12]
 80064e6:	4305      	orrs	r5, r0
 80064e8:	81a5      	strh	r5, [r4, #12]
 80064ea:	e7cd      	b.n	8006488 <__smakebuf_r+0x18>
 80064ec:	08006259 	.word	0x08006259

080064f0 <_free_r>:
 80064f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064f2:	2900      	cmp	r1, #0
 80064f4:	d044      	beq.n	8006580 <_free_r+0x90>
 80064f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fa:	9001      	str	r0, [sp, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006502:	bfb8      	it	lt
 8006504:	18e4      	addlt	r4, r4, r3
 8006506:	f000 f917 	bl	8006738 <__malloc_lock>
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <_free_r+0x94>)
 800650c:	9801      	ldr	r0, [sp, #4]
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	b933      	cbnz	r3, 8006520 <_free_r+0x30>
 8006512:	6063      	str	r3, [r4, #4]
 8006514:	6014      	str	r4, [r2, #0]
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800651c:	f000 b912 	b.w	8006744 <__malloc_unlock>
 8006520:	42a3      	cmp	r3, r4
 8006522:	d908      	bls.n	8006536 <_free_r+0x46>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf01      	itttt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	1949      	addeq	r1, r1, r5
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	e7ed      	b.n	8006512 <_free_r+0x22>
 8006536:	461a      	mov	r2, r3
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b10b      	cbz	r3, 8006540 <_free_r+0x50>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d9fa      	bls.n	8006536 <_free_r+0x46>
 8006540:	6811      	ldr	r1, [r2, #0]
 8006542:	1855      	adds	r5, r2, r1
 8006544:	42a5      	cmp	r5, r4
 8006546:	d10b      	bne.n	8006560 <_free_r+0x70>
 8006548:	6824      	ldr	r4, [r4, #0]
 800654a:	4421      	add	r1, r4
 800654c:	1854      	adds	r4, r2, r1
 800654e:	42a3      	cmp	r3, r4
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	d1e0      	bne.n	8006516 <_free_r+0x26>
 8006554:	681c      	ldr	r4, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	4421      	add	r1, r4
 800655c:	6011      	str	r1, [r2, #0]
 800655e:	e7da      	b.n	8006516 <_free_r+0x26>
 8006560:	d902      	bls.n	8006568 <_free_r+0x78>
 8006562:	230c      	movs	r3, #12
 8006564:	6003      	str	r3, [r0, #0]
 8006566:	e7d6      	b.n	8006516 <_free_r+0x26>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf04      	itt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	bf04      	itt	eq
 8006578:	1949      	addeq	r1, r1, r5
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6054      	str	r4, [r2, #4]
 800657e:	e7ca      	b.n	8006516 <_free_r+0x26>
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
 8006584:	200134d8 	.word	0x200134d8

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0e      	ldr	r6, [pc, #56]	; (80065c4 <sbrk_aligned+0x3c>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f89e 	bl	80066d4 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f899 	bl	80066d4 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <sbrk_aligned+0x34>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d007      	beq.n	80065c0 <sbrk_aligned+0x38>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f88e 	bl	80066d4 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d101      	bne.n	80065c0 <sbrk_aligned+0x38>
 80065bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	200134dc 	.word	0x200134dc

080065c8 <_malloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	1ccd      	adds	r5, r1, #3
 80065ce:	f025 0503 	bic.w	r5, r5, #3
 80065d2:	3508      	adds	r5, #8
 80065d4:	2d0c      	cmp	r5, #12
 80065d6:	bf38      	it	cc
 80065d8:	250c      	movcc	r5, #12
 80065da:	2d00      	cmp	r5, #0
 80065dc:	4607      	mov	r7, r0
 80065de:	db01      	blt.n	80065e4 <_malloc_r+0x1c>
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d905      	bls.n	80065f0 <_malloc_r+0x28>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	2600      	movs	r6, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	4e2e      	ldr	r6, [pc, #184]	; (80066ac <_malloc_r+0xe4>)
 80065f2:	f000 f8a1 	bl	8006738 <__malloc_lock>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	461c      	mov	r4, r3
 80065fa:	bb34      	cbnz	r4, 800664a <_malloc_r+0x82>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4638      	mov	r0, r7
 8006600:	f7ff ffc2 	bl	8006588 <sbrk_aligned>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	4604      	mov	r4, r0
 8006608:	d14d      	bne.n	80066a6 <_malloc_r+0xde>
 800660a:	6834      	ldr	r4, [r6, #0]
 800660c:	4626      	mov	r6, r4
 800660e:	2e00      	cmp	r6, #0
 8006610:	d140      	bne.n	8006694 <_malloc_r+0xcc>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	4631      	mov	r1, r6
 8006616:	4638      	mov	r0, r7
 8006618:	eb04 0803 	add.w	r8, r4, r3
 800661c:	f000 f85a 	bl	80066d4 <_sbrk_r>
 8006620:	4580      	cmp	r8, r0
 8006622:	d13a      	bne.n	800669a <_malloc_r+0xd2>
 8006624:	6821      	ldr	r1, [r4, #0]
 8006626:	3503      	adds	r5, #3
 8006628:	1a6d      	subs	r5, r5, r1
 800662a:	f025 0503 	bic.w	r5, r5, #3
 800662e:	3508      	adds	r5, #8
 8006630:	2d0c      	cmp	r5, #12
 8006632:	bf38      	it	cc
 8006634:	250c      	movcc	r5, #12
 8006636:	4629      	mov	r1, r5
 8006638:	4638      	mov	r0, r7
 800663a:	f7ff ffa5 	bl	8006588 <sbrk_aligned>
 800663e:	3001      	adds	r0, #1
 8006640:	d02b      	beq.n	800669a <_malloc_r+0xd2>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	442b      	add	r3, r5
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	e00e      	b.n	8006668 <_malloc_r+0xa0>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	1b52      	subs	r2, r2, r5
 800664e:	d41e      	bmi.n	800668e <_malloc_r+0xc6>
 8006650:	2a0b      	cmp	r2, #11
 8006652:	d916      	bls.n	8006682 <_malloc_r+0xba>
 8006654:	1961      	adds	r1, r4, r5
 8006656:	42a3      	cmp	r3, r4
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	bf18      	it	ne
 800665c:	6059      	strne	r1, [r3, #4]
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	bf08      	it	eq
 8006662:	6031      	streq	r1, [r6, #0]
 8006664:	5162      	str	r2, [r4, r5]
 8006666:	604b      	str	r3, [r1, #4]
 8006668:	4638      	mov	r0, r7
 800666a:	f104 060b 	add.w	r6, r4, #11
 800666e:	f000 f869 	bl	8006744 <__malloc_unlock>
 8006672:	f026 0607 	bic.w	r6, r6, #7
 8006676:	1d23      	adds	r3, r4, #4
 8006678:	1af2      	subs	r2, r6, r3
 800667a:	d0b6      	beq.n	80065ea <_malloc_r+0x22>
 800667c:	1b9b      	subs	r3, r3, r6
 800667e:	50a3      	str	r3, [r4, r2]
 8006680:	e7b3      	b.n	80065ea <_malloc_r+0x22>
 8006682:	6862      	ldr	r2, [r4, #4]
 8006684:	42a3      	cmp	r3, r4
 8006686:	bf0c      	ite	eq
 8006688:	6032      	streq	r2, [r6, #0]
 800668a:	605a      	strne	r2, [r3, #4]
 800668c:	e7ec      	b.n	8006668 <_malloc_r+0xa0>
 800668e:	4623      	mov	r3, r4
 8006690:	6864      	ldr	r4, [r4, #4]
 8006692:	e7b2      	b.n	80065fa <_malloc_r+0x32>
 8006694:	4634      	mov	r4, r6
 8006696:	6876      	ldr	r6, [r6, #4]
 8006698:	e7b9      	b.n	800660e <_malloc_r+0x46>
 800669a:	230c      	movs	r3, #12
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4638      	mov	r0, r7
 80066a0:	f000 f850 	bl	8006744 <__malloc_unlock>
 80066a4:	e7a1      	b.n	80065ea <_malloc_r+0x22>
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	e7de      	b.n	8006668 <_malloc_r+0xa0>
 80066aa:	bf00      	nop
 80066ac:	200134d8 	.word	0x200134d8

080066b0 <_read_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d07      	ldr	r5, [pc, #28]	; (80066d0 <_read_r+0x20>)
 80066b4:	4604      	mov	r4, r0
 80066b6:	4608      	mov	r0, r1
 80066b8:	4611      	mov	r1, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f7f9 fe8f 	bl	80003e2 <_read>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_read_r+0x1e>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_read_r+0x1e>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	200134e0 	.word	0x200134e0

080066d4 <_sbrk_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_sbrk_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f000 f836 	bl	8006750 <_sbrk>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_sbrk_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_sbrk_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200134e0 	.word	0x200134e0

080066f4 <_fstat_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	; (8006714 <_fstat_r+0x20>)
 80066f8:	2300      	movs	r3, #0
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f7f9 fe97 	bl	8000434 <_fstat>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d102      	bne.n	8006710 <_fstat_r+0x1c>
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	b103      	cbz	r3, 8006710 <_fstat_r+0x1c>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	bf00      	nop
 8006714:	200134e0 	.word	0x200134e0

08006718 <_isatty_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_isatty_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7f9 fe96 	bl	8000454 <_isatty>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_isatty_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_isatty_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200134e0 	.word	0x200134e0

08006738 <__malloc_lock>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__malloc_lock+0x8>)
 800673a:	f7ff be5f 	b.w	80063fc <__retarget_lock_acquire_recursive>
 800673e:	bf00      	nop
 8006740:	200134d3 	.word	0x200134d3

08006744 <__malloc_unlock>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__malloc_unlock+0x8>)
 8006746:	f7ff be5a 	b.w	80063fe <__retarget_lock_release_recursive>
 800674a:	bf00      	nop
 800674c:	200134d3 	.word	0x200134d3

08006750 <_sbrk>:
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <_sbrk+0x14>)
 8006752:	6811      	ldr	r1, [r2, #0]
 8006754:	4603      	mov	r3, r0
 8006756:	b909      	cbnz	r1, 800675c <_sbrk+0xc>
 8006758:	4903      	ldr	r1, [pc, #12]	; (8006768 <_sbrk+0x18>)
 800675a:	6011      	str	r1, [r2, #0]
 800675c:	6810      	ldr	r0, [r2, #0]
 800675e:	4403      	add	r3, r0
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4770      	bx	lr
 8006764:	200134e4 	.word	0x200134e4
 8006768:	200134e8 	.word	0x200134e8

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
