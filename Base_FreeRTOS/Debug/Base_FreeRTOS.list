
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005b08  08005b08  00015b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005be8  08005be8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be8  08005be8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ec4  20000070  08005c60  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20012f34  08005c60  00022f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000855e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  000285fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ea0  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bab  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e6ce  00000000  00000000  000447d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2ea1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002478  00000000  00000000  000a2ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005aec 	.word	0x08005aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005aec 	.word	0x08005aec

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
unsigned int secondParameter;
unsigned int thirdParameter;
char userMsg[64];

int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <main+0x130>)
 8000bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb4:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <main+0x130>)
 8000bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000bbe:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <main+0x134>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a46      	ldr	r2, [pc, #280]	; (8000cdc <main+0x134>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


	inSystem ();
 8000bca:	f000 f8a1 	bl	8000d10 <inSystem>

	xReturned = xTaskCreate(
 8000bce:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <main+0x138>)
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	22c8      	movs	r2, #200	; 0xc8
 8000bda:	4942      	ldr	r1, [pc, #264]	; (8000ce4 <main+0x13c>)
 8000bdc:	4842      	ldr	r0, [pc, #264]	; (8000ce8 <main+0x140>)
 8000bde:	f000 fff1 	bl	8001bc4 <xTaskCreate>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <main+0x144>)
 8000be6:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
						&xHandleTask_Menu );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000be8:	4b40      	ldr	r3, [pc, #256]	; (8000cec <main+0x144>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d00a      	beq.n	8000c06 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c02:	bf00      	nop
 8000c04:	e7fe      	b.n	8000c04 <main+0x5c>

	xReturned = xTaskCreate(
 8000c06:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <main+0x148>)
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	22c8      	movs	r2, #200	; 0xc8
 8000c12:	4938      	ldr	r1, [pc, #224]	; (8000cf4 <main+0x14c>)
 8000c14:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <main+0x150>)
 8000c16:	f000 ffd5 	bl	8001bc4 <xTaskCreate>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <main+0x144>)
 8000c1e:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
						&xHandleTask_Print );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000c20:	4b32      	ldr	r3, [pc, #200]	; (8000cec <main+0x144>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d00a      	beq.n	8000c3e <main+0x96>
        __asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	613b      	str	r3, [r7, #16]
    }
 8000c3a:	bf00      	nop
 8000c3c:	e7fe      	b.n	8000c3c <main+0x94>


	xReturned = xTaskCreate(
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <main+0x154>)
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	2303      	movs	r3, #3
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	22c8      	movs	r2, #200	; 0xc8
 8000c4a:	492d      	ldr	r1, [pc, #180]	; (8000d00 <main+0x158>)
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <main+0x15c>)
 8000c4e:	f000 ffb9 	bl	8001bc4 <xTaskCreate>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a25      	ldr	r2, [pc, #148]	; (8000cec <main+0x144>)
 8000c56:	6013      	str	r3, [r2, #0]
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
						&xHandleTask_Commands );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <main+0x144>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d00a      	beq.n	8000c76 <main+0xce>
        __asm volatile
 8000c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c64:	f383 8811 	msr	BASEPRI, r3
 8000c68:	f3bf 8f6f 	isb	sy
 8000c6c:	f3bf 8f4f 	dsb	sy
 8000c70:	60fb      	str	r3, [r7, #12]
    }
 8000c72:	bf00      	nop
 8000c74:	e7fe      	b.n	8000c74 <main+0xcc>
//	 	                    &xHandleTask_Button );      /* Used to pass out the created task's handle. */


	 //Creacion de colas

	 xQueue_InputData = xQueueCreate(10,sizeof(char));
 8000c76:	2200      	movs	r2, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f000 fa74 	bl	8001168 <xQueueGenericCreate>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <main+0x160>)
 8000c84:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <main+0x160>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <main+0xfc>
        __asm volatile
 8000c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c92:	f383 8811 	msr	BASEPRI, r3
 8000c96:	f3bf 8f6f 	isb	sy
 8000c9a:	f3bf 8f4f 	dsb	sy
 8000c9e:	60bb      	str	r3, [r7, #8]
    }
 8000ca0:	bf00      	nop
 8000ca2:	e7fe      	b.n	8000ca2 <main+0xfa>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f000 fa5d 	bl	8001168 <xQueueGenericCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <main+0x164>)
 8000cb2:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <main+0x164>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <main+0x12a>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	607b      	str	r3, [r7, #4]
    }
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x128>

	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */
	 vTaskStartScheduler();
 8000cd2:	f001 f8bd 	bl	8001e50 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x12e>
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	e0001000 	.word	0xe0001000
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	08005b08 	.word	0x08005b08
 8000ce8:	08000e49 	.word	0x08000e49
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	08005b14 	.word	0x08005b14
 8000cf8:	08000e53 	.word	0x08000e53
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	08005b20 	.word	0x08005b20
 8000d04:	08000e5d 	.word	0x08000e5d
 8000d08:	200000a0 	.word	0x200000a0
 8000d0c:	2000009c 	.word	0x2000009c

08000d10 <inSystem>:

	}
}


void inSystem (void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0


	//Descripcion de la configuracion

	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 8000d14:	f003 f9e6 	bl	80040e4 <RCC_enableMaxFrequencies>

	//BLINKY LED
	handlerPinA5.pGPIOx = GPIOA;
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <inSystem+0x114>)
 8000d1a:	4a43      	ldr	r2, [pc, #268]	; (8000e28 <inSystem+0x118>)
 8000d1c:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <inSystem+0x114>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <inSystem+0x114>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <inSystem+0x114>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000d30:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <inSystem+0x114>)
 8000d32:	2205      	movs	r2, #5
 8000d34:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d36:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <inSystem+0x114>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <inSystem+0x114>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000d42:	4838      	ldr	r0, [pc, #224]	; (8000e24 <inSystem+0x114>)
 8000d44:	f003 f83e 	bl	8003dc4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, RESET);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4836      	ldr	r0, [pc, #216]	; (8000e24 <inSystem+0x114>)
 8000d4c:	f003 f964 	bl	8004018 <GPIO_WritePin>

	//TIMER Blinky

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <inSystem+0x11c>)
 8000d52:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <inSystem+0x120>)
 8000d54:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <inSystem+0x11c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000d5c:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <inSystem+0x11c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000d62:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <inSystem+0x11c>)
 8000d64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d68:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 250;
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <inSystem+0x11c>)
 8000d6c:	22fa      	movs	r2, #250	; 0xfa
 8000d6e:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000d70:	482e      	ldr	r0, [pc, #184]	; (8000e2c <inSystem+0x11c>)
 8000d72:	f002 fce1 	bl	8003738 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000d76:	482d      	ldr	r0, [pc, #180]	; (8000e2c <inSystem+0x11c>)
 8000d78:	f003 f812 	bl	8003da0 <startTimer>


	//USART 2 Comunicacion serial
	handlerUSART_RX.pGPIOx = GPIOA;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <inSystem+0x124>)
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <inSystem+0x118>)
 8000d80:	601a      	str	r2, [r3, #0]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <inSystem+0x124>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	725a      	strb	r2, [r3, #9]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <inSystem+0x124>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	715a      	strb	r2, [r3, #5]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <inSystem+0x124>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <inSystem+0x124>)
 8000d96:	2203      	movs	r2, #3
 8000d98:	711a      	strb	r2, [r3, #4]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <inSystem+0x124>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
	handlerUSART_RX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <inSystem+0x124>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerUSART_RX);
 8000da6:	4823      	ldr	r0, [pc, #140]	; (8000e34 <inSystem+0x124>)
 8000da8:	f003 f80c 	bl	8003dc4 <GPIO_Config>


	handlerUSART_TX.pGPIOx = GPIOA;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <inSystem+0x128>)
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <inSystem+0x118>)
 8000db0:	601a      	str	r2, [r3, #0]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <inSystem+0x128>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	725a      	strb	r2, [r3, #9]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <inSystem+0x128>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	715a      	strb	r2, [r3, #5]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <inSystem+0x128>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	721a      	strb	r2, [r3, #8]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <inSystem+0x128>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	711a      	strb	r2, [r3, #4]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <inSystem+0x128>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	71da      	strb	r2, [r3, #7]
	handlerUSART_TX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <inSystem+0x128>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerUSART_TX);
 8000dd6:	4818      	ldr	r0, [pc, #96]	; (8000e38 <inSystem+0x128>)
 8000dd8:	f002 fff4 	bl	8003dc4 <GPIO_Config>

	handlerUSART2.ptrUSARTx                      = USART2;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <inSystem+0x12c>)
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <inSystem+0x130>)
 8000de0:	601a      	str	r2, [r3, #0]
	handlerUSART2.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <inSystem+0x12c>)
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <inSystem+0x134>)
 8000de6:	60da      	str	r2, [r3, #12]
	handlerUSART2.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <inSystem+0x12c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	71da      	strb	r2, [r3, #7]
	handlerUSART2.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <inSystem+0x12c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	715a      	strb	r2, [r3, #5]
	handlerUSART2.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <inSystem+0x12c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	711a      	strb	r2, [r3, #4]
	handlerUSART2.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <inSystem+0x12c>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	719a      	strb	r2, [r3, #6]
	handlerUSART2.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <inSystem+0x12c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	725a      	strb	r2, [r3, #9]
	handlerUSART2.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <inSystem+0x12c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	729a      	strb	r2, [r3, #10]
	handlerUSART2.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <inSystem+0x12c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART2);
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <inSystem+0x12c>)
 8000e14:	f003 fa1e 	bl	8004254 <USART_Config>
	usart_Set_Priority(&handlerUSART2, e_USART_PRIORITY_6);
 8000e18:	2106      	movs	r1, #6
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <inSystem+0x12c>)
 8000e1c:	f003 fe90 	bl	8004b40 <usart_Set_Priority>
//	extInt_Config(&handler_exti_userButon);




}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000a4 	.word	0x200000a4
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	2000015c 	.word	0x2000015c
 8000e30:	40000400 	.word	0x40000400
 8000e34:	200000b0 	.word	0x200000b0
 8000e38:	200000bc 	.word	0x200000bc
 8000e3c:	200000c8 	.word	0x200000c8
 8000e40:	40004400 	.word	0x40004400
 8000e44:	02faf080 	.word	0x02faf080

08000e48 <vTask_Menu>:



void vTask_Menu( void * pvParameters )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

   while(1){
 8000e50:	e7fe      	b.n	8000e50 <vTask_Menu+0x8>

08000e52 <vTask_Print>:
	   //taskYIELD();
   }
}

void vTask_Print( void * pvParameters )
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]

   while(1){
 8000e5a:	e7fe      	b.n	8000e5a <vTask_Print+0x8>

08000e5c <vTask_Commands>:
	   //taskYIELD();
   }
}

void vTask_Commands( void * pvParameters )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

   while(1){
 8000e64:	e7fe      	b.n	8000e64 <vTask_Commands+0x8>
	...

08000e68 <usart2Rx_Callback>:
//	   //GPIO_WritePin(&handlerPinA5, SET);
//	   //taskYIELD();
//   }
//}

void usart2Rx_Callback(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8000e6c:	f003 fdca 	bl	8004a04 <getRxData>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <usart2Rx_Callback+0x54>)
 8000e76:	701a      	strb	r2, [r3, #0]
//	BaseType_t xHigerPriorituTaskWoken;
//
//	xHigerPriorituTaskWoken = pdFALSE;

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <usart2Rx_Callback+0x58>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fe1c 	bl	8001aba <xQueueIsQueueFullFromISR>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <usart2Rx_Callback+0x5c>)
 8000e86:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <usart2Rx_Callback+0x5c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d007      	beq.n	8000ea0 <usart2Rx_Callback+0x38>

		xQueueSendToBackFromISR(xQueue_InputData, (void*) &rxData,NULL);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <usart2Rx_Callback+0x58>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	2200      	movs	r2, #0
 8000e98:	4908      	ldr	r1, [pc, #32]	; (8000ebc <usart2Rx_Callback+0x54>)
 8000e9a:	f000 fae5 	bl	8001468 <xQueueGenericSendFromISR>
		}

	}


}
 8000e9e:	e00a      	b.n	8000eb6 <usart2Rx_Callback+0x4e>
		if (rxData == '#'){
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <usart2Rx_Callback+0x54>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b23      	cmp	r3, #35	; 0x23
 8000ea6:	d106      	bne.n	8000eb6 <usart2Rx_Callback+0x4e>
			xQueueReceiveFromISR(xQueue_InputData, (void *) &rxData, NULL);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <usart2Rx_Callback+0x58>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	4903      	ldr	r1, [pc, #12]	; (8000ebc <usart2Rx_Callback+0x54>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fc63 	bl	800177c <xQueueReceiveFromISR>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000170 	.word	0x20000170
 8000ec0:	200000a0 	.word	0x200000a0
 8000ec4:	2000008c 	.word	0x2000008c

08000ec8 <BasicTimer3_Callback>:

void BasicTimer3_Callback(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <BasicTimer3_Callback+0x10>)
 8000ece:	f003 f8ef 	bl	80040b0 <GPIOxTooglePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000a4 	.word	0x200000a4

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f003 fe55 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fe4b 	bl	8000ba8 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f20:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8000f24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f28:	20012f34 	.word	0x20012f34

08000f2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>

08000f2e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f103 0208 	add.w	r2, r3, #8
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f46:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f103 0208 	add.w	r2, r3, #8
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f103 0208 	add.w	r2, r3, #8
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe6:	d103      	bne.n	8000ff0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e00c      	b.n	800100a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e002      	b.n	8000ffe <vListInsert+0x2e>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	429a      	cmp	r2, r3
 8001008:	d2f6      	bcs.n	8000ff8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6892      	ldr	r2, [r2, #8]
 8001058:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6852      	ldr	r2, [r2, #4]
 8001062:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d103      	bne.n	8001076 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10a      	bne.n	80010c2 <xQueueGenericReset+0x2a>
        __asm volatile
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	60bb      	str	r3, [r7, #8]
    }
 80010be:	bf00      	nop
 80010c0:	e7fe      	b.n	80010c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80010c2:	f002 f801 	bl	80030c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	441a      	add	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f2:	3b01      	subs	r3, #1
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	441a      	add	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d114      	bne.n	8001142 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01a      	beq.n	8001156 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3310      	adds	r3, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f8f5 	bl	8002314 <xTaskRemoveFromEventList>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <xQueueGenericReset+0xcc>)
 8001132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	f3bf 8f4f 	dsb	sy
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	e009      	b.n	8001156 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3310      	adds	r3, #16
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fef1 	bl	8000f2e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3324      	adds	r3, #36	; 0x24
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff feec 	bl	8000f2e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001156:	f001 ffe7 	bl	8003128 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	e000ed04 	.word	0xe000ed04

08001168 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af02      	add	r7, sp, #8
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <xQueueGenericCreate+0x2a>
        __asm volatile
 800117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001180:	f383 8811 	msr	BASEPRI, r3
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	61bb      	str	r3, [r7, #24]
    }
 800118e:	bf00      	nop
 8001190:	e7fe      	b.n	8001190 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <xQueueGenericCreate+0x48>
 80011a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d101      	bne.n	80011b4 <xQueueGenericCreate+0x4c>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <xQueueGenericCreate+0x4e>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10a      	bne.n	80011d0 <xQueueGenericCreate+0x68>
        __asm volatile
 80011ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	617b      	str	r3, [r7, #20]
    }
 80011cc:	bf00      	nop
 80011ce:	e7fe      	b.n	80011ce <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80011d6:	d90a      	bls.n	80011ee <xQueueGenericCreate+0x86>
        __asm volatile
 80011d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011dc:	f383 8811 	msr	BASEPRI, r3
 80011e0:	f3bf 8f6f 	isb	sy
 80011e4:	f3bf 8f4f 	dsb	sy
 80011e8:	613b      	str	r3, [r7, #16]
    }
 80011ea:	bf00      	nop
 80011ec:	e7fe      	b.n	80011ec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	3350      	adds	r3, #80	; 0x50
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f884 	bl	8003300 <pvPortMalloc>
 80011f8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00d      	beq.n	800121c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3350      	adds	r3, #80	; 0x50
 8001208:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f805 	bl	8001226 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800121c:	6a3b      	ldr	r3, [r7, #32]
    }
 800121e:	4618      	mov	r0, r3
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e002      	b.n	8001248 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001254:	2101      	movs	r1, #1
 8001256:	69b8      	ldr	r0, [r7, #24]
 8001258:	f7ff ff1e 	bl	8001098 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10a      	bne.n	800129e <xQueueGenericSend+0x32>
        __asm volatile
 8001288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128c:	f383 8811 	msr	BASEPRI, r3
 8001290:	f3bf 8f6f 	isb	sy
 8001294:	f3bf 8f4f 	dsb	sy
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800129a:	bf00      	nop
 800129c:	e7fe      	b.n	800129c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <xQueueGenericSend+0x40>
 80012a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <xQueueGenericSend+0x44>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <xQueueGenericSend+0x46>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <xQueueGenericSend+0x60>
        __asm volatile
 80012b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ba:	f383 8811 	msr	BASEPRI, r3
 80012be:	f3bf 8f6f 	isb	sy
 80012c2:	f3bf 8f4f 	dsb	sy
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80012c8:	bf00      	nop
 80012ca:	e7fe      	b.n	80012ca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d103      	bne.n	80012da <xQueueGenericSend+0x6e>
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <xQueueGenericSend+0x72>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <xQueueGenericSend+0x74>
 80012de:	2300      	movs	r3, #0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10a      	bne.n	80012fa <xQueueGenericSend+0x8e>
        __asm volatile
 80012e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e8:	f383 8811 	msr	BASEPRI, r3
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	623b      	str	r3, [r7, #32]
    }
 80012f6:	bf00      	nop
 80012f8:	e7fe      	b.n	80012f8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012fa:	f001 f9a7 	bl	800264c <xTaskGetSchedulerState>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <xQueueGenericSend+0x9e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <xQueueGenericSend+0xa2>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <xQueueGenericSend+0xa4>
 800130e:	2300      	movs	r3, #0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10a      	bne.n	800132a <xQueueGenericSend+0xbe>
        __asm volatile
 8001314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	61fb      	str	r3, [r7, #28]
    }
 8001326:	bf00      	nop
 8001328:	e7fe      	b.n	8001328 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800132a:	f001 fecd 	bl	80030c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001336:	429a      	cmp	r2, r3
 8001338:	d302      	bcc.n	8001340 <xQueueGenericSend+0xd4>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d129      	bne.n	8001394 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001346:	f000 faa8 	bl	800189a <prvCopyDataToQueue>
 800134a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d010      	beq.n	8001376 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	3324      	adds	r3, #36	; 0x24
 8001358:	4618      	mov	r0, r3
 800135a:	f000 ffdb 	bl	8002314 <xTaskRemoveFromEventList>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <xQueueGenericSend+0x1f8>)
 8001366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f3bf 8f4f 	dsb	sy
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	e00a      	b.n	800138c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <xQueueGenericSend+0x1f8>)
 800137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f3bf 8f4f 	dsb	sy
 8001388:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800138c:	f001 fecc 	bl	8003128 <vPortExitCritical>
                return pdPASS;
 8001390:	2301      	movs	r3, #1
 8001392:	e063      	b.n	800145c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800139a:	f001 fec5 	bl	8003128 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	e05c      	b.n	800145c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f813 	bl	80023d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013b6:	f001 feb7 	bl	8003128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013ba:	f000 fd9b 	bl	8001ef4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013be:	f001 fe83 	bl	80030c8 <vPortEnterCritical>
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ce:	d103      	bne.n	80013d8 <xQueueGenericSend+0x16c>
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e4:	d103      	bne.n	80013ee <xQueueGenericSend+0x182>
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013ee:	f001 fe9b 	bl	8003128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f802 	bl	8002404 <xTaskCheckForTimeOut>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d124      	bne.n	8001450 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001408:	f000 fb3f 	bl	8001a8a <prvIsQueueFull>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d018      	beq.n	8001444 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001414:	3310      	adds	r3, #16
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 ff2a 	bl	8002274 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001422:	f000 faca 	bl	80019ba <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001426:	f000 fd73 	bl	8001f10 <xTaskResumeAll>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f af7c 	bne.w	800132a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <xQueueGenericSend+0x1f8>)
 8001434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	f3bf 8f6f 	isb	sy
 8001442:	e772      	b.n	800132a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001446:	f000 fab8 	bl	80019ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800144a:	f000 fd61 	bl	8001f10 <xTaskResumeAll>
 800144e:	e76c      	b.n	800132a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001452:	f000 fab2 	bl	80019ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001456:	f000 fd5b 	bl	8001f10 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800145a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800145c:	4618      	mov	r0, r3
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	e000ed04 	.word	0xe000ed04

08001468 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b090      	sub	sp, #64	; 0x40
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10a      	bne.n	8001496 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001492:	bf00      	nop
 8001494:	e7fe      	b.n	8001494 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <xQueueGenericSendFromISR+0x3c>
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <xQueueGenericSendFromISR+0x40>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <xQueueGenericSendFromISR+0x42>
 80014a8:	2300      	movs	r3, #0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80014ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80014c0:	bf00      	nop
 80014c2:	e7fe      	b.n	80014c2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d103      	bne.n	80014d2 <xQueueGenericSendFromISR+0x6a>
 80014ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <xQueueGenericSendFromISR+0x6e>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <xQueueGenericSendFromISR+0x70>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	623b      	str	r3, [r7, #32]
    }
 80014ee:	bf00      	nop
 80014f0:	e7fe      	b.n	80014f0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014f2:	f001 fec5 	bl	8003280 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80014f6:	f3ef 8211 	mrs	r2, BASEPRI
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	61fa      	str	r2, [r7, #28]
 800150c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800150e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151a:	429a      	cmp	r2, r3
 800151c:	d302      	bcc.n	8001524 <xQueueGenericSendFromISR+0xbc>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d13e      	bne.n	80015a2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800152a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800153a:	f000 f9ae 	bl	800189a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800153e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001546:	d112      	bne.n	800156e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2b00      	cmp	r3, #0
 800154e:	d025      	beq.n	800159c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	3324      	adds	r3, #36	; 0x24
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fedd 	bl	8002314 <xTaskRemoveFromEventList>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01d      	beq.n	800159c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01a      	beq.n	800159c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e016      	b.n	800159c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800156e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001572:	2b7f      	cmp	r3, #127	; 0x7f
 8001574:	d10a      	bne.n	800158c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
 8001586:	617b      	str	r3, [r7, #20]
    }
 8001588:	bf00      	nop
 800158a:	e7fe      	b.n	800158a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800158c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b25a      	sxtb	r2, r3
 8001596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800159c:	2301      	movs	r3, #1
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80015a0:	e001      	b.n	80015a6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80015b0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3740      	adds	r7, #64	; 0x40
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10a      	bne.n	80015ec <xQueueReceive+0x30>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	623b      	str	r3, [r7, #32]
    }
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <xQueueReceive+0x3e>
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <xQueueReceive+0x42>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <xQueueReceive+0x44>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <xQueueReceive+0x5e>
        __asm volatile
 8001604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001608:	f383 8811 	msr	BASEPRI, r3
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	f3bf 8f4f 	dsb	sy
 8001614:	61fb      	str	r3, [r7, #28]
    }
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800161a:	f001 f817 	bl	800264c <xTaskGetSchedulerState>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <xQueueReceive+0x6e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <xQueueReceive+0x72>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <xQueueReceive+0x74>
 800162e:	2300      	movs	r3, #0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <xQueueReceive+0x8e>
        __asm volatile
 8001634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001638:	f383 8811 	msr	BASEPRI, r3
 800163c:	f3bf 8f6f 	isb	sy
 8001640:	f3bf 8f4f 	dsb	sy
 8001644:	61bb      	str	r3, [r7, #24]
    }
 8001646:	bf00      	nop
 8001648:	e7fe      	b.n	8001648 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800164a:	f001 fd3d 	bl	80030c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01f      	beq.n	800169a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800165e:	f000 f986 	bl	800196e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00f      	beq.n	8001692 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	3310      	adds	r3, #16
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fe4c 	bl	8002314 <xTaskRemoveFromEventList>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <xQueueReceive+0x1bc>)
 8001684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001692:	f001 fd49 	bl	8003128 <vPortExitCritical>
                return pdPASS;
 8001696:	2301      	movs	r3, #1
 8001698:	e069      	b.n	800176e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80016a0:	f001 fd42 	bl	8003128 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e062      	b.n	800176e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fe90 	bl	80023d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016bc:	f001 fd34 	bl	8003128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016c0:	f000 fc18 	bl	8001ef4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016c4:	f001 fd00 	bl	80030c8 <vPortEnterCritical>
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d4:	d103      	bne.n	80016de <xQueueReceive+0x122>
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ea:	d103      	bne.n	80016f4 <xQueueReceive+0x138>
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016f4:	f001 fd18 	bl	8003128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016f8:	1d3a      	adds	r2, r7, #4
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fe7f 	bl	8002404 <xTaskCheckForTimeOut>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d123      	bne.n	8001754 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800170c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800170e:	f000 f9a6 	bl	8001a5e <prvIsQueueEmpty>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	3324      	adds	r3, #36	; 0x24
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fda7 	bl	8002274 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001728:	f000 f947 	bl	80019ba <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800172c:	f000 fbf0 	bl	8001f10 <xTaskResumeAll>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d189      	bne.n	800164a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <xQueueReceive+0x1bc>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	e780      	b.n	800164a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800174a:	f000 f936 	bl	80019ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800174e:	f000 fbdf 	bl	8001f10 <xTaskResumeAll>
 8001752:	e77a      	b.n	800164a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001756:	f000 f930 	bl	80019ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800175a:	f000 fbd9 	bl	8001f10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800175e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001760:	f000 f97d 	bl	8001a5e <prvIsQueueEmpty>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f43f af6f 	beq.w	800164a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800176c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800176e:	4618      	mov	r0, r3
 8001770:	3730      	adds	r7, #48	; 0x30
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000ed04 	.word	0xe000ed04

0800177c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b090      	sub	sp, #64	; 0x40
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10a      	bne.n	80017a8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8001792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80017a4:	bf00      	nop
 80017a6:	e7fe      	b.n	80017a6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <xQueueReceiveFromISR+0x3a>
 80017ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <xQueueReceiveFromISR+0x3e>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <xQueueReceiveFromISR+0x40>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80017c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c4:	f383 8811 	msr	BASEPRI, r3
 80017c8:	f3bf 8f6f 	isb	sy
 80017cc:	f3bf 8f4f 	dsb	sy
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80017d2:	bf00      	nop
 80017d4:	e7fe      	b.n	80017d4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80017d6:	f001 fd53 	bl	8003280 <vPortValidateInterruptPriority>
        __asm volatile
 80017da:	f3ef 8211 	mrs	r2, BASEPRI
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	623a      	str	r2, [r7, #32]
 80017f0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80017f2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03e      	beq.n	8001880 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8001802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001810:	f000 f8ad 	bl	800196e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800181c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001824:	d112      	bne.n	800184c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d025      	beq.n	800187a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001830:	3310      	adds	r3, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd6e 	bl	8002314 <xTaskRemoveFromEventList>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01d      	beq.n	800187a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01a      	beq.n	800187a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e016      	b.n	800187a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800184c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001850:	2b7f      	cmp	r3, #127	; 0x7f
 8001852:	d10a      	bne.n	800186a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8001854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001858:	f383 8811 	msr	BASEPRI, r3
 800185c:	f3bf 8f6f 	isb	sy
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	61bb      	str	r3, [r7, #24]
    }
 8001866:	bf00      	nop
 8001868:	e7fe      	b.n	8001868 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800186a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800186e:	3301      	adds	r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	b25a      	sxtb	r2, r3
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800187a:	2301      	movs	r3, #1
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800187e:	e001      	b.n	8001884 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f383 8811 	msr	BASEPRI, r3
    }
 800188e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001892:	4618      	mov	r0, r3
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d14d      	bne.n	800195c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fedf 	bl	8002688 <xTaskPriorityDisinherit>
 80018ca:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	e043      	b.n	800195c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6858      	ldr	r0, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	461a      	mov	r2, r3
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	f003 f98b 	bl	8004c00 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	441a      	add	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	d32b      	bcc.n	800195c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	e026      	b.n	800195c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	68d8      	ldr	r0, [r3, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	461a      	mov	r2, r3
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	f003 f971 	bl	8004c00 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	425b      	negs	r3, r3
 8001928:	441a      	add	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d207      	bcs.n	800194a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	425b      	negs	r3, r3
 8001944:	441a      	add	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d105      	bne.n	800195c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3b01      	subs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001964:	697b      	ldr	r3, [r7, #20]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d018      	beq.n	80019b2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	441a      	add	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d303      	bcc.n	80019a2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68d9      	ldr	r1, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	461a      	mov	r2, r3
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f003 f927 	bl	8004c00 <memcpy>
    }
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80019c2:	f001 fb81 	bl	80030c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019cc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80019ce:	e011      	b.n	80019f4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3324      	adds	r3, #36	; 0x24
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fc99 	bl	8002314 <xTaskRemoveFromEventList>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80019e8:	f000 fd72 	bl	80024d0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dce9      	bgt.n	80019d0 <prvUnlockQueue+0x16>
 80019fc:	e000      	b.n	8001a00 <prvUnlockQueue+0x46>
                        break;
 80019fe:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001a08:	f001 fb8e 	bl	8003128 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001a0c:	f001 fb5c 	bl	80030c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a16:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a18:	e011      	b.n	8001a3e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3310      	adds	r3, #16
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fc74 	bl	8002314 <xTaskRemoveFromEventList>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001a32:	f000 fd4d 	bl	80024d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dce9      	bgt.n	8001a1a <prvUnlockQueue+0x60>
 8001a46:	e000      	b.n	8001a4a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001a48:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	22ff      	movs	r2, #255	; 0xff
 8001a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001a52:	f001 fb69 	bl	8003128 <vPortExitCritical>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001a66:	f001 fb2f 	bl	80030c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e001      	b.n	8001a7c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001a7c:	f001 fb54 	bl	8003128 <vPortExitCritical>

    return xReturn;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001a92:	f001 fb19 	bl	80030c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d102      	bne.n	8001aa8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e001      	b.n	8001aac <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001aac:	f001 fb3c 	bl	8003128 <vPortExitCritical>

    return xReturn;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	60fb      	str	r3, [r7, #12]
    }
 8001ade:	bf00      	nop
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d102      	bne.n	8001af4 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e001      	b.n	8001af8 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001af8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001afa:	4618      	mov	r0, r3
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e014      	b.n	8001b42 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <vQueueAddToRegistry+0x50>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <vQueueAddToRegistry+0x50>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <vQueueAddToRegistry+0x50>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001b3a:	e006      	b.n	8001b4a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	d9e7      	bls.n	8001b18 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000174 	.word	0x20000174

08001b5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001b6c:	f001 faac 	bl	80030c8 <vPortEnterCritical>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b7c:	d103      	bne.n	8001b86 <vQueueWaitForMessageRestricted+0x2a>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b92:	d103      	bne.n	8001b9c <vQueueWaitForMessageRestricted+0x40>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b9c:	f001 fac4 	bl	8003128 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3324      	adds	r3, #36	; 0x24
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fb83 	bl	80022bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff feff 	bl	80019ba <prvUnlockQueue>
    }
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fb91 	bl	8003300 <pvPortMalloc>
 8001bde:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00e      	beq.n	8001c04 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001be6:	2058      	movs	r0, #88	; 0x58
 8001be8:	f001 fb8a 	bl	8003300 <pvPortMalloc>
 8001bec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfa:	e005      	b.n	8001c08 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001bfc:	6978      	ldr	r0, [r7, #20]
 8001bfe:	f001 fc5f 	bl	80034c0 <vPortFree>
 8001c02:	e001      	b.n	8001c08 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d013      	beq.n	8001c36 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	2300      	movs	r3, #0
 8001c12:	9303      	str	r3, [sp, #12]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f80e 	bl	8001c46 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c2a:	69f8      	ldr	r0, [r7, #28]
 8001c2c:	f000 f8a2 	bl	8001d74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e002      	b.n	8001c3c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
    }
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	21a5      	movs	r1, #165	; 0xa5
 8001c60:	f002 ffdc 	bl	8004c1c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f023 0307 	bic.w	r3, r3, #7
 8001c7c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00a      	beq.n	8001c9e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	617b      	str	r3, [r7, #20]
    }
 8001c9a:	bf00      	nop
 8001c9c:	e7fe      	b.n	8001c9c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01f      	beq.n	8001ce4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	e012      	b.n	8001cd0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	4413      	add	r3, r2
 8001cb0:	7819      	ldrb	r1, [r3, #0]
 8001cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3334      	adds	r3, #52	; 0x34
 8001cba:	460a      	mov	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b09      	cmp	r3, #9
 8001cd4:	d9e9      	bls.n	8001caa <prvInitialiseNewTask+0x64>
 8001cd6:	e000      	b.n	8001cda <prvInitialiseNewTask+0x94>
            {
                break;
 8001cd8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001ce2:	e003      	b.n	8001cec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d901      	bls.n	8001cf6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d00:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2200      	movs	r2, #0
 8001d06:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f92e 	bl	8000f6e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	3318      	adds	r3, #24
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f929 	bl	8000f6e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d20:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	f1c3 0205 	rsb	r2, r3, #5
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	2204      	movs	r2, #4
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 ff6e 	bl	8004c1c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	3354      	adds	r3, #84	; 0x54
 8001d44:	2201      	movs	r2, #1
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 ff67 	bl	8004c1c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	69b8      	ldr	r0, [r7, #24]
 8001d54:	f001 f88a 	bl	8002e6c <pxPortInitialiseStack>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d6a:	bf00      	nop
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001d7c:	f001 f9a4 	bl	80030c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <prvAddNewTaskToReadyList+0xc0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <prvAddNewTaskToReadyList+0xc0>)
 8001d88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001d92:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <prvAddNewTaskToReadyList+0xc0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d110      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001da0:	f000 fbba 	bl	8002518 <prvInitialiseTaskLists>
 8001da4:	e00d      	b.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <prvAddNewTaskToReadyList+0xc8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d802      	bhi.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <prvAddNewTaskToReadyList+0xcc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <prvAddNewTaskToReadyList+0xcc>)
 8001dca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <prvAddNewTaskToReadyList+0xcc>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <prvAddNewTaskToReadyList+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <prvAddNewTaskToReadyList+0xd0>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <prvAddNewTaskToReadyList+0xd4>)
 8001df4:	441a      	add	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff f8c3 	bl	8000f88 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001e02:	f001 f991 	bl	8003128 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <prvAddNewTaskToReadyList+0xc8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00e      	beq.n	8001e2c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <prvAddNewTaskToReadyList+0xd8>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000028c 	.word	0x2000028c
 8001e38:	200001b4 	.word	0x200001b4
 8001e3c:	20000298 	.word	0x20000298
 8001e40:	200002a8 	.word	0x200002a8
 8001e44:	20000294 	.word	0x20000294
 8001e48:	200001b8 	.word	0x200001b8
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <vTaskStartScheduler+0x88>)
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2282      	movs	r2, #130	; 0x82
 8001e62:	491e      	ldr	r1, [pc, #120]	; (8001edc <vTaskStartScheduler+0x8c>)
 8001e64:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <vTaskStartScheduler+0x90>)
 8001e66:	f7ff fead 	bl	8001bc4 <xTaskCreate>
 8001e6a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001e72:	f000 fce9 	bl	8002848 <xTimerCreateTimerTask>
 8001e76:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d116      	bne.n	8001eac <vTaskStartScheduler+0x5c>
        __asm volatile
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	60bb      	str	r3, [r7, #8]
    }
 8001e90:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <vTaskStartScheduler+0x94>)
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <vTaskStartScheduler+0x98>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <vTaskStartScheduler+0x9c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001ea6:	f001 f86d 	bl	8002f84 <xPortStartScheduler>
 8001eaa:	e00e      	b.n	8001eca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb2:	d10a      	bne.n	8001eca <vTaskStartScheduler+0x7a>
        __asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	607b      	str	r3, [r7, #4]
    }
 8001ec6:	bf00      	nop
 8001ec8:	e7fe      	b.n	8001ec8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <vTaskStartScheduler+0xa0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002b0 	.word	0x200002b0
 8001edc:	08005b40 	.word	0x08005b40
 8001ee0:	080024e9 	.word	0x080024e9
 8001ee4:	200002ac 	.word	0x200002ac
 8001ee8:	20000298 	.word	0x20000298
 8001eec:	20000290 	.word	0x20000290
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <vTaskSuspendAll+0x18>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <vTaskSuspendAll+0x18>)
 8001f00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	200002b4 	.word	0x200002b4

08001f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <xTaskResumeAll+0x114>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <xTaskResumeAll+0x2c>
        __asm volatile
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	603b      	str	r3, [r7, #0]
    }
 8001f38:	bf00      	nop
 8001f3a:	e7fe      	b.n	8001f3a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001f3c:	f001 f8c4 	bl	80030c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <xTaskResumeAll+0x114>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	4a37      	ldr	r2, [pc, #220]	; (8002024 <xTaskResumeAll+0x114>)
 8001f48:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <xTaskResumeAll+0x114>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d161      	bne.n	8002016 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <xTaskResumeAll+0x118>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d05d      	beq.n	8002016 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f5a:	e02e      	b.n	8001fba <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5c:	4b33      	ldr	r3, [pc, #204]	; (800202c <xTaskResumeAll+0x11c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3318      	adds	r3, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f86a 	bl	8001042 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3304      	adds	r3, #4
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f865 	bl	8001042 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <xTaskResumeAll+0x120>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <xTaskResumeAll+0x120>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4a27      	ldr	r2, [pc, #156]	; (8002034 <xTaskResumeAll+0x124>)
 8001f98:	441a      	add	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7fe fff1 	bl	8000f88 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <xTaskResumeAll+0x128>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <xTaskResumeAll+0x12c>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <xTaskResumeAll+0x11c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1cc      	bne.n	8001f5c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001fc8:	f000 fb24 	bl	8002614 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <xTaskResumeAll+0x130>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001fd8:	f000 f846 	bl	8002068 <xTaskIncrementTick>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <xTaskResumeAll+0x12c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f1      	bne.n	8001fd8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <xTaskResumeAll+0x130>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <xTaskResumeAll+0x12c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002002:	2301      	movs	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <xTaskResumeAll+0x134>)
 8002008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002016:	f001 f887 	bl	8003128 <vPortExitCritical>

    return xAlreadyYielded;
 800201a:	68bb      	ldr	r3, [r7, #8]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200002b4 	.word	0x200002b4
 8002028:	2000028c 	.word	0x2000028c
 800202c:	2000024c 	.word	0x2000024c
 8002030:	20000294 	.word	0x20000294
 8002034:	200001b8 	.word	0x200001b8
 8002038:	200001b4 	.word	0x200001b4
 800203c:	200002a0 	.word	0x200002a0
 8002040:	2000029c 	.word	0x2000029c
 8002044:	e000ed04 	.word	0xe000ed04

08002048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <xTaskGetTickCount+0x1c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002054:	687b      	ldr	r3, [r7, #4]
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000290 	.word	0x20000290

08002068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <xTaskIncrementTick+0x128>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d17f      	bne.n	800217a <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <xTaskIncrementTick+0x12c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002082:	4a44      	ldr	r2, [pc, #272]	; (8002194 <xTaskIncrementTick+0x12c>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d120      	bne.n	80020d0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800208e:	4b42      	ldr	r3, [pc, #264]	; (8002198 <xTaskIncrementTick+0x130>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <xTaskIncrementTick+0x46>
        __asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	603b      	str	r3, [r7, #0]
    }
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <xTaskIncrementTick+0x44>
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <xTaskIncrementTick+0x130>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <xTaskIncrementTick+0x134>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a37      	ldr	r2, [pc, #220]	; (8002198 <xTaskIncrementTick+0x130>)
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4a37      	ldr	r2, [pc, #220]	; (800219c <xTaskIncrementTick+0x134>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <xTaskIncrementTick+0x138>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <xTaskIncrementTick+0x138>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	f000 faa2 	bl	8002614 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <xTaskIncrementTick+0x13c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d348      	bcc.n	800216c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <xTaskIncrementTick+0x130>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <xTaskIncrementTick+0x13c>)
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ea:	601a      	str	r2, [r3, #0]
                    break;
 80020ec:	e03e      	b.n	800216c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <xTaskIncrementTick+0x130>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d203      	bcs.n	800210e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002106:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <xTaskIncrementTick+0x13c>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800210c:	e02e      	b.n	800216c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3304      	adds	r3, #4
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ff95 	bl	8001042 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3318      	adds	r3, #24
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff8c 	bl	8001042 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	2201      	movs	r2, #1
 8002130:	409a      	lsls	r2, r3
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <xTaskIncrementTick+0x140>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <xTaskIncrementTick+0x140>)
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <xTaskIncrementTick+0x144>)
 800214a:	441a      	add	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3304      	adds	r3, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f7fe ff18 	bl	8000f88 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <xTaskIncrementTick+0x148>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	429a      	cmp	r2, r3
 8002164:	d3b9      	bcc.n	80020da <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216a:	e7b6      	b.n	80020da <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <xTaskIncrementTick+0x14c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8002174:	2301      	movs	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e004      	b.n	8002184 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <xTaskIncrementTick+0x150>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <xTaskIncrementTick+0x150>)
 8002182:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002184:	697b      	ldr	r3, [r7, #20]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200002b4 	.word	0x200002b4
 8002194:	20000290 	.word	0x20000290
 8002198:	20000244 	.word	0x20000244
 800219c:	20000248 	.word	0x20000248
 80021a0:	200002a4 	.word	0x200002a4
 80021a4:	200002ac 	.word	0x200002ac
 80021a8:	20000294 	.word	0x20000294
 80021ac:	200001b8 	.word	0x200001b8
 80021b0:	200001b4 	.word	0x200001b4
 80021b4:	200002a0 	.word	0x200002a0
 80021b8:	2000029c 	.word	0x2000029c

080021bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <vTaskSwitchContext+0xa4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <vTaskSwitchContext+0xa8>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80021d0:	e03f      	b.n	8002252 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <vTaskSwitchContext+0xa8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <vTaskSwitchContext+0xac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f1c3 031f 	rsb	r3, r3, #31
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	491f      	ldr	r1, [pc, #124]	; (800226c <vTaskSwitchContext+0xb0>)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	607b      	str	r3, [r7, #4]
    }
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <vTaskSwitchContext+0x5a>
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <vTaskSwitchContext+0xb0>)
 8002224:	4413      	add	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3308      	adds	r3, #8
 800223a:	429a      	cmp	r2, r3
 800223c:	d104      	bne.n	8002248 <vTaskSwitchContext+0x8c>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <vTaskSwitchContext+0xb4>)
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200002b4 	.word	0x200002b4
 8002264:	200002a0 	.word	0x200002a0
 8002268:	20000294 	.word	0x20000294
 800226c:	200001b8 	.word	0x200001b8
 8002270:	200001b4 	.word	0x200001b4

08002274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	60fb      	str	r3, [r7, #12]
    }
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <vTaskPlaceOnEventList+0x44>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3318      	adds	r3, #24
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fe94 	bl	8000fd0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022a8:	2101      	movs	r1, #1
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f000 fa66 	bl	800277c <prvAddCurrentTaskToDelayedList>
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200001b4 	.word	0x200001b4

080022bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	617b      	str	r3, [r7, #20]
    }
 80022e0:	bf00      	nop
 80022e2:	e7fe      	b.n	80022e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <vTaskPlaceOnEventListRestricted+0x54>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3318      	adds	r3, #24
 80022ea:	4619      	mov	r1, r3
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7fe fe4b 	bl	8000f88 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68b8      	ldr	r0, [r7, #8]
 8002302:	f000 fa3b 	bl	800277c <prvAddCurrentTaskToDelayedList>
    }
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200001b4 	.word	0x200001b4

08002314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	60fb      	str	r3, [r7, #12]
    }
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3318      	adds	r3, #24
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fe7c 	bl	8001042 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <xTaskRemoveFromEventList+0xac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11c      	bne.n	800238c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3304      	adds	r3, #4
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fe73 	bl	8001042 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <xTaskRemoveFromEventList+0xb0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <xTaskRemoveFromEventList+0xb0>)
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <xTaskRemoveFromEventList+0xb4>)
 800237c:	441a      	add	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3304      	adds	r3, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f7fe fdff 	bl	8000f88 <vListInsertEnd>
 800238a:	e005      	b.n	8002398 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3318      	adds	r3, #24
 8002390:	4619      	mov	r1, r3
 8002392:	480e      	ldr	r0, [pc, #56]	; (80023cc <xTaskRemoveFromEventList+0xb8>)
 8002394:	f7fe fdf8 	bl	8000f88 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <xTaskRemoveFromEventList+0xbc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d905      	bls.n	80023b2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <xTaskRemoveFromEventList+0xc0>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e001      	b.n	80023b6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80023b6:	697b      	ldr	r3, [r7, #20]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200002b4 	.word	0x200002b4
 80023c4:	20000294 	.word	0x20000294
 80023c8:	200001b8 	.word	0x200001b8
 80023cc:	2000024c 	.word	0x2000024c
 80023d0:	200001b4 	.word	0x200001b4
 80023d4:	200002a0 	.word	0x200002a0

080023d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <vTaskInternalSetTimeOutState+0x24>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <vTaskInternalSetTimeOutState+0x28>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	605a      	str	r2, [r3, #4]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	200002a4 	.word	0x200002a4
 8002400:	20000290 	.word	0x20000290

08002404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	613b      	str	r3, [r7, #16]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	60fb      	str	r3, [r7, #12]
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002446:	f000 fe3f 	bl	80030c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800244a:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <xTaskCheckForTimeOut+0xc4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002462:	d102      	bne.n	800246a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	e026      	b.n	80024b8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <xTaskCheckForTimeOut+0xc8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d00a      	beq.n	800248c <xTaskCheckForTimeOut+0x88>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d305      	bcc.n	800248c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002480:	2301      	movs	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e015      	b.n	80024b8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	429a      	cmp	r2, r3
 8002494:	d20b      	bcs.n	80024ae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad2      	subs	r2, r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff98 	bl	80023d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e004      	b.n	80024b8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80024b8:	f000 fe36 	bl	8003128 <vPortExitCritical>

    return xReturn;
 80024bc:	69fb      	ldr	r3, [r7, #28]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000290 	.word	0x20000290
 80024cc:	200002a4 	.word	0x200002a4

080024d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <vTaskMissedYield+0x14>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	200002a0 	.word	0x200002a0

080024e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80024f0:	f000 f852 	bl	8002598 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <prvIdleTask+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d9f9      	bls.n	80024f0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <prvIdleTask+0x2c>)
 80024fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800250c:	e7f0      	b.n	80024f0 <prvIdleTask+0x8>
 800250e:	bf00      	nop
 8002510:	200001b8 	.word	0x200001b8
 8002514:	e000ed04 	.word	0xe000ed04

08002518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e00c      	b.n	800253e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <prvInitialiseTaskLists+0x60>)
 8002530:	4413      	add	r3, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fcfb 	bl	8000f2e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d9ef      	bls.n	8002524 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <prvInitialiseTaskLists+0x64>)
 8002546:	f7fe fcf2 	bl	8000f2e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <prvInitialiseTaskLists+0x68>)
 800254c:	f7fe fcef 	bl	8000f2e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <prvInitialiseTaskLists+0x6c>)
 8002552:	f7fe fcec 	bl	8000f2e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <prvInitialiseTaskLists+0x70>)
 8002558:	f7fe fce9 	bl	8000f2e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <prvInitialiseTaskLists+0x74>)
 800255e:	f7fe fce6 	bl	8000f2e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <prvInitialiseTaskLists+0x78>)
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <prvInitialiseTaskLists+0x64>)
 8002566:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <prvInitialiseTaskLists+0x7c>)
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <prvInitialiseTaskLists+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001b8 	.word	0x200001b8
 800257c:	2000021c 	.word	0x2000021c
 8002580:	20000230 	.word	0x20000230
 8002584:	2000024c 	.word	0x2000024c
 8002588:	20000260 	.word	0x20000260
 800258c:	20000278 	.word	0x20000278
 8002590:	20000244 	.word	0x20000244
 8002594:	20000248 	.word	0x20000248

08002598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800259e:	e019      	b.n	80025d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80025a0:	f000 fd92 	bl	80030c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <prvCheckTasksWaitingTermination+0x50>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fd46 	bl	8001042 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <prvCheckTasksWaitingTermination+0x54>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <prvCheckTasksWaitingTermination+0x54>)
 80025be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <prvCheckTasksWaitingTermination+0x58>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <prvCheckTasksWaitingTermination+0x58>)
 80025c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80025ca:	f000 fdad 	bl	8003128 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f810 	bl	80025f4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <prvCheckTasksWaitingTermination+0x58>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e1      	bne.n	80025a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000260 	.word	0x20000260
 80025ec:	2000028c 	.word	0x2000028c
 80025f0:	20000274 	.word	0x20000274

080025f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4618      	mov	r0, r3
 8002602:	f000 ff5d 	bl	80034c0 <vPortFree>
                vPortFree( pxTCB );
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 ff5a 	bl	80034c0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <prvResetNextTaskUnblockTime+0x30>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <prvResetNextTaskUnblockTime+0x34>)
 8002624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002628:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800262a:	e005      	b.n	8002638 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <prvResetNextTaskUnblockTime+0x30>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <prvResetNextTaskUnblockTime+0x34>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000244 	.word	0x20000244
 8002648:	200002ac 	.word	0x200002ac

0800264c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <xTaskGetSchedulerState+0x34>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800265a:	2301      	movs	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	e008      	b.n	8002672 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <xTaskGetSchedulerState+0x38>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002668:	2302      	movs	r3, #2
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	e001      	b.n	8002672 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002672:	687b      	ldr	r3, [r7, #4]
    }
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	20000298 	.word	0x20000298
 8002684:	200002b4 	.word	0x200002b4

08002688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <xTaskPriorityDisinherit+0xe8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d00a      	beq.n	80026be <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	60fb      	str	r3, [r7, #12]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	60bb      	str	r3, [r7, #8]
    }
 80026d8:	bf00      	nop
 80026da:	e7fe      	b.n	80026da <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d039      	beq.n	8002766 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d135      	bne.n	8002766 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3304      	adds	r3, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fc9f 	bl	8001042 <uxListRemove>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43da      	mvns	r2, r3
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <xTaskPriorityDisinherit+0xec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4013      	ands	r3, r2
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <xTaskPriorityDisinherit+0xec>)
 800271e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f1c3 0205 	rsb	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	2201      	movs	r2, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <xTaskPriorityDisinherit+0xec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <xTaskPriorityDisinherit+0xec>)
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <xTaskPriorityDisinherit+0xf0>)
 8002754:	441a      	add	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3304      	adds	r3, #4
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7fe fc13 	bl	8000f88 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002762:	2301      	movs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002766:	697b      	ldr	r3, [r7, #20]
    }
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200001b4 	.word	0x200001b4
 8002774:	20000294 	.word	0x20000294
 8002778:	200001b8 	.word	0x200001b8

0800277c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc55 	bl	8001042 <uxListRemove>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4013      	ands	r3, r2
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027b4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027bc:	d10a      	bne.n	80027d4 <prvAddCurrentTaskToDelayedList+0x58>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3304      	adds	r3, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	481a      	ldr	r0, [pc, #104]	; (8002838 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027ce:	f7fe fbdb 	bl	8000f88 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80027d2:	e026      	b.n	8002822 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d209      	bcs.n	8002800 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <prvAddCurrentTaskToDelayedList+0xc0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7fe fbe9 	bl	8000fd0 <vListInsert>
}
 80027fe:	e010      	b.n	8002822 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3304      	adds	r3, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7fe fbdf 	bl	8000fd0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d202      	bcs.n	8002822 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <prvAddCurrentTaskToDelayedList+0xc8>)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6013      	str	r3, [r2, #0]
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000290 	.word	0x20000290
 8002830:	200001b4 	.word	0x200001b4
 8002834:	20000294 	.word	0x20000294
 8002838:	20000278 	.word	0x20000278
 800283c:	20000248 	.word	0x20000248
 8002840:	20000244 	.word	0x20000244
 8002844:	200002ac 	.word	0x200002ac

08002848 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002852:	f000 fad5 	bl	8002e00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <xTimerCreateTimerTask+0x54>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <xTimerCreateTimerTask+0x58>)
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	2302      	movs	r3, #2
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800286c:	490d      	ldr	r1, [pc, #52]	; (80028a4 <xTimerCreateTimerTask+0x5c>)
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <xTimerCreateTimerTask+0x60>)
 8002870:	f7ff f9a8 	bl	8001bc4 <xTaskCreate>
 8002874:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	603b      	str	r3, [r7, #0]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002892:	687b      	ldr	r3, [r7, #4]
    }
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200002e8 	.word	0x200002e8
 80028a0:	200002ec 	.word	0x200002ec
 80028a4:	08005b48 	.word	0x08005b48
 80028a8:	080029e1 	.word	0x080029e1

080028ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xTimerGenericCommand+0x2e>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	623b      	str	r3, [r7, #32]
    }
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <xTimerGenericCommand+0x98>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02a      	beq.n	8002938 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	dc18      	bgt.n	8002926 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028f4:	f7ff feaa 	bl	800264c <xTaskGetSchedulerState>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d109      	bne.n	8002912 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <xTimerGenericCommand+0x98>)
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	f107 0114 	add.w	r1, r7, #20
 8002906:	2300      	movs	r3, #0
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	f7fe fcaf 	bl	800126c <xQueueGenericSend>
 800290e:	6278      	str	r0, [r7, #36]	; 0x24
 8002910:	e012      	b.n	8002938 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <xTimerGenericCommand+0x98>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f107 0114 	add.w	r1, r7, #20
 800291a:	2300      	movs	r3, #0
 800291c:	2200      	movs	r2, #0
 800291e:	f7fe fca5 	bl	800126c <xQueueGenericSend>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24
 8002924:	e008      	b.n	8002938 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <xTimerGenericCommand+0x98>)
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f107 0114 	add.w	r1, r7, #20
 800292e:	2300      	movs	r3, #0
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	f7fe fd99 	bl	8001468 <xQueueGenericSendFromISR>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800293a:	4618      	mov	r0, r3
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200002e8 	.word	0x200002e8

08002948 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <prvProcessExpiredTimer+0x94>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3304      	adds	r3, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fb6e 	bl	8001042 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	18d1      	adds	r1, r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f000 f8d1 	bl	8002b28 <prvInsertTimerInActiveList>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01f      	beq.n	80029cc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800298c:	2300      	movs	r3, #0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2300      	movs	r3, #0
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	2100      	movs	r1, #0
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff88 	bl	80028ac <xTimerGenericCommand>
 800299c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <prvProcessExpiredTimer+0x84>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	60fb      	str	r3, [r7, #12]
    }
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	6978      	ldr	r0, [r7, #20]
 80029d2:	4798      	blx	r3
    }
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200002e0 	.word	0x200002e0

080029e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f857 	bl	8002aa0 <prvGetNextExpireTime>
 80029f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4619      	mov	r1, r3
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f803 	bl	8002a04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80029fe:	f000 f8d5 	bl	8002bac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a02:	e7f1      	b.n	80029e8 <prvTimerTask+0x8>

08002a04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a0e:	f7ff fa71 	bl	8001ef4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f866 	bl	8002ae8 <prvSampleTimeNow>
 8002a1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d130      	bne.n	8002a86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <prvProcessTimerOrBlockTask+0x3c>
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d806      	bhi.n	8002a40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a32:	f7ff fa6d 	bl	8001f10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff85 	bl	8002948 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a3e:	e024      	b.n	8002a8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <prvProcessTimerOrBlockTask+0x90>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <prvProcessTimerOrBlockTask+0x50>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <prvProcessTimerOrBlockTask+0x52>
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <prvProcessTimerOrBlockTask+0x94>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7ff f879 	bl	8001b5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a6a:	f7ff fa51 	bl	8001f10 <xTaskResumeAll>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <prvProcessTimerOrBlockTask+0x98>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
    }
 8002a84:	e001      	b.n	8002a8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002a86:	f7ff fa43 	bl	8001f10 <xTaskResumeAll>
    }
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200002e4 	.word	0x200002e4
 8002a98:	200002e8 	.word	0x200002e8
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <prvGetNextExpireTime+0x44>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <prvGetNextExpireTime+0x16>
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	e000      	b.n	8002ab8 <prvGetNextExpireTime+0x18>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <prvGetNextExpireTime+0x44>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e001      	b.n	8002ad4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    }
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200002e0 	.word	0x200002e0

08002ae8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002af0:	f7ff faaa 	bl	8002048 <xTaskGetTickCount>
 8002af4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <prvSampleTimeNow+0x3c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d205      	bcs.n	8002b0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b00:	f000 f91a 	bl	8002d38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e002      	b.n	8002b12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b12:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <prvSampleTimeNow+0x3c>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002b18:	68fb      	ldr	r3, [r7, #12]
    }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200002f0 	.word	0x200002f0

08002b28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d812      	bhi.n	8002b74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e01b      	b.n	8002b9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <prvInsertTimerInActiveList+0x7c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fe fa2f 	bl	8000fd0 <vListInsert>
 8002b72:	e012      	b.n	8002b9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d206      	bcs.n	8002b8a <prvInsertTimerInActiveList+0x62>
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002b84:	2301      	movs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e007      	b.n	8002b9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <prvInsertTimerInActiveList+0x80>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fe fa1b 	bl	8000fd0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002b9a:	697b      	ldr	r3, [r7, #20]
    }
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200002e4 	.word	0x200002e4
 8002ba8:	200002e0 	.word	0x200002e0

08002bac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bb2:	e0ae      	b.n	8002d12 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f2c0 80aa 	blt.w	8002d10 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fa38 	bl	8001042 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff87 	bl	8002ae8 <prvSampleTimeNow>
 8002bda:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	f200 8097 	bhi.w	8002d12 <prvProcessReceivedCommands+0x166>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <prvProcessReceivedCommands+0x40>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c89 	.word	0x08002c89
 8002bfc:	08002c9d 	.word	0x08002c9d
 8002c00:	08002ce7 	.word	0x08002ce7
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c15 	.word	0x08002c15
 8002c0c:	08002c89 	.word	0x08002c89
 8002c10:	08002c9d 	.word	0x08002c9d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	18d1      	adds	r1, r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c34:	f7ff ff78 	bl	8002b28 <prvInsertTimerInActiveList>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d069      	beq.n	8002d12 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c44:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05e      	beq.n	8002d12 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c66:	f7ff fe21 	bl	80028ac <xTimerGenericCommand>
 8002c6a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d14f      	bne.n	8002d12 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	61bb      	str	r3, [r7, #24]
    }
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002c9a:	e03a      	b.n	8002d12 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	617b      	str	r3, [r7, #20]
    }
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	18d1      	adds	r1, r2, r3
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce0:	f7ff ff22 	bl	8002b28 <prvInsertTimerInActiveList>
                        break;
 8002ce4:	e015      	b.n	8002d12 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf6:	f000 fbe3 	bl	80034c0 <vPortFree>
 8002cfa:	e00a      	b.n	8002d12 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d0e:	e000      	b.n	8002d12 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002d10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <prvProcessReceivedCommands+0x188>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f107 0108 	add.w	r1, r7, #8
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fc4d 	bl	80015bc <xQueueReceive>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f af45 	bne.w	8002bb4 <prvProcessReceivedCommands+0x8>
        }
    }
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002e8 	.word	0x200002e8

08002d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d3e:	e048      	b.n	8002dd2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f972 	bl	8001042 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02e      	beq.n	8002dd2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90e      	bls.n	8002da4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f7fe f917 	bl	8000fd0 <vListInsert>
 8002da2:	e016      	b.n	8002dd2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002da4:	2300      	movs	r3, #0
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	2100      	movs	r1, #0
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fd7c 	bl	80028ac <xTimerGenericCommand>
 8002db4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	603b      	str	r3, [r7, #0]
    }
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1b1      	bne.n	8002d40 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <prvSwitchTimerLists+0xc4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <prvSwitchTimerLists+0xc0>)
 8002de8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002dea:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <prvSwitchTimerLists+0xc4>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6013      	str	r3, [r2, #0]
    }
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200002e0 	.word	0x200002e0
 8002dfc:	200002e4 	.word	0x200002e4

08002e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002e04:	f000 f960 	bl	80030c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <prvCheckForValidListAndQueue+0x54>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11d      	bne.n	8002e4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e10:	4811      	ldr	r0, [pc, #68]	; (8002e58 <prvCheckForValidListAndQueue+0x58>)
 8002e12:	f7fe f88c 	bl	8000f2e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e16:	4811      	ldr	r0, [pc, #68]	; (8002e5c <prvCheckForValidListAndQueue+0x5c>)
 8002e18:	f7fe f889 	bl	8000f2e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <prvCheckForValidListAndQueue+0x60>)
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <prvCheckForValidListAndQueue+0x58>)
 8002e20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <prvCheckForValidListAndQueue+0x64>)
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <prvCheckForValidListAndQueue+0x5c>)
 8002e26:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e28:	2200      	movs	r2, #0
 8002e2a:	210c      	movs	r1, #12
 8002e2c:	200a      	movs	r0, #10
 8002e2e:	f7fe f99b 	bl	8001168 <xQueueGenericCreate>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <prvCheckForValidListAndQueue+0x54>)
 8002e36:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <prvCheckForValidListAndQueue+0x54>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <prvCheckForValidListAndQueue+0x54>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4908      	ldr	r1, [pc, #32]	; (8002e68 <prvCheckForValidListAndQueue+0x68>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fe5e 	bl	8001b08 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e4c:	f000 f96c 	bl	8003128 <vPortExitCritical>
    }
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200002e8 	.word	0x200002e8
 8002e58:	200002b8 	.word	0x200002b8
 8002e5c:	200002cc 	.word	0x200002cc
 8002e60:	200002e0 	.word	0x200002e0
 8002e64:	200002e4 	.word	0x200002e4
 8002e68:	08005b50 	.word	0x08005b50

08002e6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b04      	subs	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0201 	bic.w	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <pxPortInitialiseStack+0x64>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b14      	subs	r3, #20
 8002ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f06f 0202 	mvn.w	r2, #2
 8002eba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b20      	subs	r3, #32
 8002ec0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	08002ed5 	.word	0x08002ed5

08002ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <prvTaskExitError+0x54>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee6:	d00a      	beq.n	8002efe <prvTaskExitError+0x2a>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60fb      	str	r3, [r7, #12]
    }
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <prvTaskExitError+0x28>
        __asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60bb      	str	r3, [r7, #8]
    }
 8002f10:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f12:	bf00      	nop
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0fc      	beq.n	8002f14 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	00000000 	.word	0x00000000

08002f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <pxCurrentTCBConst2>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	6808      	ldr	r0, [r1, #0]
 8002f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	f380 8809 	msr	PSP, r0
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8811 	msr	BASEPRI, r0
 8002f4a:	4770      	bx	lr
 8002f4c:	f3af 8000 	nop.w

08002f50 <pxCurrentTCBConst2>:
 8002f50:	200001b4 	.word	0x200001b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop

08002f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f58:	4808      	ldr	r0, [pc, #32]	; (8002f7c <prvPortStartFirstTask+0x24>)
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	6800      	ldr	r0, [r0, #0]
 8002f5e:	f380 8808 	msr	MSP, r0
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f380 8814 	msr	CONTROL, r0
 8002f6a:	b662      	cpsie	i
 8002f6c:	b661      	cpsie	f
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	df00      	svc	0
 8002f78:	bf00      	nop
 8002f7a:	0000      	.short	0x0000
 8002f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop

08002f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <xPortStartScheduler+0x120>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <xPortStartScheduler+0x124>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10a      	bne.n	8002faa <xPortStartScheduler+0x26>
        __asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	613b      	str	r3, [r7, #16]
    }
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <xPortStartScheduler+0x120>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <xPortStartScheduler+0x128>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10a      	bne.n	8002fca <xPortStartScheduler+0x46>
        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	60fb      	str	r3, [r7, #12]
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <xPortStartScheduler+0x12c>)
 8002fcc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <xPortStartScheduler+0x130>)
 8002ff0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <xPortStartScheduler+0x134>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ff8:	e009      	b.n	800300e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ffa:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <xPortStartScheduler+0x134>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <xPortStartScheduler+0x134>)
 8003002:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d0ef      	beq.n	8002ffa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <xPortStartScheduler+0x134>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00a      	beq.n	800303c <xPortStartScheduler+0xb8>
        __asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60bb      	str	r3, [r7, #8]
    }
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <xPortStartScheduler+0x134>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <xPortStartScheduler+0x134>)
 8003044:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <xPortStartScheduler+0x134>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <xPortStartScheduler+0x134>)
 8003050:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <xPortStartScheduler+0x138>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <xPortStartScheduler+0x138>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003064:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <xPortStartScheduler+0x138>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a14      	ldr	r2, [pc, #80]	; (80030bc <xPortStartScheduler+0x138>)
 800306c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003070:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003072:	f000 f8db 	bl	800322c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <xPortStartScheduler+0x13c>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800307c:	f000 f8f4 	bl	8003268 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <xPortStartScheduler+0x140>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <xPortStartScheduler+0x140>)
 8003086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800308a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800308c:	f7ff ff64 	bl	8002f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003090:	f7ff f894 	bl	80021bc <vTaskSwitchContext>
    prvTaskExitError();
 8003094:	f7ff ff1e 	bl	8002ed4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	410fc271 	.word	0x410fc271
 80030ac:	410fc270 	.word	0x410fc270
 80030b0:	e000e400 	.word	0xe000e400
 80030b4:	200002f4 	.word	0x200002f4
 80030b8:	200002f8 	.word	0x200002f8
 80030bc:	e000ed20 	.word	0xe000ed20
 80030c0:	20000008 	.word	0x20000008
 80030c4:	e000ef34 	.word	0xe000ef34

080030c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
        __asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	607b      	str	r3, [r7, #4]
    }
 80030e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <vPortEnterCritical+0x58>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <vPortEnterCritical+0x58>)
 80030ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <vPortEnterCritical+0x58>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10f      	bne.n	8003114 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <vPortEnterCritical+0x5c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <vPortEnterCritical+0x4c>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	603b      	str	r3, [r7, #0]
    }
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <vPortEnterCritical+0x4a>
    }
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	20000008 	.word	0x20000008
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <vPortExitCritical+0x50>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <vPortExitCritical+0x24>
        __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	607b      	str	r3, [r7, #4]
    }
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <vPortExitCritical+0x50>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3b01      	subs	r3, #1
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <vPortExitCritical+0x50>)
 8003154:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <vPortExitCritical+0x50>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <vPortExitCritical+0x42>
 800315e:	2300      	movs	r3, #0
 8003160:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f383 8811 	msr	BASEPRI, r3
    }
 8003168:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000008 	.word	0x20000008
 800317c:	00000000 	.word	0x00000000

08003180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003180:	f3ef 8009 	mrs	r0, PSP
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <pxCurrentTCBConst>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f01e 0f10 	tst.w	lr, #16
 8003190:	bf08      	it	eq
 8003192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319a:	6010      	str	r0, [r2, #0]
 800319c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031a4:	f380 8811 	msr	BASEPRI, r0
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f7ff f804 	bl	80021bc <vTaskSwitchContext>
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f380 8811 	msr	BASEPRI, r0
 80031bc:	bc09      	pop	{r0, r3}
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	6808      	ldr	r0, [r1, #0]
 80031c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c6:	f01e 0f10 	tst.w	lr, #16
 80031ca:	bf08      	it	eq
 80031cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031d0:	f380 8809 	msr	PSP, r0
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w

080031e0 <pxCurrentTCBConst>:
 80031e0:	200001b4 	.word	0x200001b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop

080031e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
        __asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	607b      	str	r3, [r7, #4]
    }
 8003200:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003202:	f7fe ff31 	bl	8002068 <xTaskIncrementTick>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <SysTick_Handler+0x40>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f383 8811 	msr	BASEPRI, r3
    }
 800321e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <vPortSetupTimerInterrupt+0x2c>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <vPortSetupTimerInterrupt+0x30>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <vPortSetupTimerInterrupt+0x34>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <vPortSetupTimerInterrupt+0x38>)
 8003244:	3b01      	subs	r3, #1
 8003246:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <vPortSetupTimerInterrupt+0x2c>)
 800324a:	2207      	movs	r2, #7
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e010 	.word	0xe000e010
 800325c:	e000e018 	.word	0xe000e018
 8003260:	20000000 	.word	0x20000000
 8003264:	e000e014 	.word	0xe000e014

08003268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003278 <vPortEnableVFP+0x10>
 800326c:	6801      	ldr	r1, [r0, #0]
 800326e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003272:	6001      	str	r1, [r0, #0]
 8003274:	4770      	bx	lr
 8003276:	0000      	.short	0x0000
 8003278:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop

08003280 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003286:	f3ef 8305 	mrs	r3, IPSR
 800328a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d914      	bls.n	80032bc <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <vPortValidateInterruptPriority+0x70>)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <vPortValidateInterruptPriority+0x74>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	7afa      	ldrb	r2, [r7, #11]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20a      	bcs.n	80032bc <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	607b      	str	r3, [r7, #4]
    }
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <vPortValidateInterruptPriority+0x78>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <vPortValidateInterruptPriority+0x7c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d90a      	bls.n	80032e2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	603b      	str	r3, [r7, #0]
    }
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <vPortValidateInterruptPriority+0x60>
    }
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e3f0 	.word	0xe000e3f0
 80032f4:	200002f4 	.word	0x200002f4
 80032f8:	e000ed0c 	.word	0xe000ed0c
 80032fc:	200002f8 	.word	0x200002f8

08003300 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800330c:	f7fe fdf2 	bl	8001ef4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003310:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <pvPortMalloc+0x1a8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003318:	f000 f934 	bl	8003584 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800331c:	4b63      	ldr	r3, [pc, #396]	; (80034ac <pvPortMalloc+0x1ac>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 80a7 	bne.w	8003478 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02d      	beq.n	800338c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003330:	2208      	movs	r2, #8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d227      	bcs.n	800338c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800333c:	2208      	movs	r2, #8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	2b00      	cmp	r3, #0
 800334c:	d021      	beq.n	8003392 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f023 0307 	bic.w	r3, r3, #7
 8003354:	3308      	adds	r3, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d214      	bcs.n	8003386 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	3308      	adds	r3, #8
 8003364:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <pvPortMalloc+0x92>
        __asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	617b      	str	r3, [r7, #20]
    }
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800338a:	e002      	b.n	8003392 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	e000      	b.n	8003394 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003392:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06e      	beq.n	8003478 <pvPortMalloc+0x178>
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <pvPortMalloc+0x1b0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d869      	bhi.n	8003478 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033a4:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <pvPortMalloc+0x1b4>)
 80033a6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80033a8:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <pvPortMalloc+0x1b4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033ae:	e004      	b.n	80033ba <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d903      	bls.n	80033cc <pvPortMalloc+0xcc>
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f1      	bne.n	80033b0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <pvPortMalloc+0x1a8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d050      	beq.n	8003478 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2208      	movs	r2, #8
 80033dc:	4413      	add	r3, r2
 80033de:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	2308      	movs	r3, #8
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d91f      	bls.n	8003438 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <pvPortMalloc+0x120>
        __asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	613b      	str	r3, [r7, #16]
    }
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad2      	subs	r2, r2, r3
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003432:	69b8      	ldr	r0, [r7, #24]
 8003434:	f000 f908 	bl	8003648 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <pvPortMalloc+0x1b0>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <pvPortMalloc+0x1b0>)
 8003444:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <pvPortMalloc+0x1b0>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <pvPortMalloc+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d203      	bcs.n	800345a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <pvPortMalloc+0x1b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <pvPortMalloc+0x1b8>)
 8003458:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <pvPortMalloc+0x1ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	431a      	orrs	r2, r3
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <pvPortMalloc+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <pvPortMalloc+0x1bc>)
 8003476:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003478:	f7fe fd4a 	bl	8001f10 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <pvPortMalloc+0x19c>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60fb      	str	r3, [r7, #12]
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <pvPortMalloc+0x19a>
    return pvReturn;
 800349c:	69fb      	ldr	r3, [r7, #28]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3728      	adds	r7, #40	; 0x28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20012f04 	.word	0x20012f04
 80034ac:	20012f18 	.word	0x20012f18
 80034b0:	20012f08 	.word	0x20012f08
 80034b4:	20012efc 	.word	0x20012efc
 80034b8:	20012f0c 	.word	0x20012f0c
 80034bc:	20012f10 	.word	0x20012f10

080034c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d04d      	beq.n	800356e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80034d2:	2308      	movs	r3, #8
 80034d4:	425b      	negs	r3, r3
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4413      	add	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <vPortFree+0xb8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <vPortFree+0x44>
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60fb      	str	r3, [r7, #12]
    }
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <vPortFree+0x62>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60bb      	str	r3, [r7, #8]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4b14      	ldr	r3, [pc, #80]	; (8003578 <vPortFree+0xb8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01e      	beq.n	800356e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11a      	bne.n	800356e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <vPortFree+0xb8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003548:	f7fe fcd4 	bl	8001ef4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <vPortFree+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4413      	add	r3, r2
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <vPortFree+0xbc>)
 8003558:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800355a:	6938      	ldr	r0, [r7, #16]
 800355c:	f000 f874 	bl	8003648 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <vPortFree+0xc0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a06      	ldr	r2, [pc, #24]	; (8003580 <vPortFree+0xc0>)
 8003568:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800356a:	f7fe fcd1 	bl	8001f10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20012f18 	.word	0x20012f18
 800357c:	20012f08 	.word	0x20012f08
 8003580:	20012f14 	.word	0x20012f14

08003584 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800358a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800358e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <prvHeapInit+0xac>)
 8003592:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3307      	adds	r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0307 	bic.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <prvHeapInit+0xac>)
 80035b4:	4413      	add	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <prvHeapInit+0xb0>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <prvHeapInit+0xb0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80035d0:	2208      	movs	r2, #8
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <prvHeapInit+0xb4>)
 80035e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <prvHeapInit+0xb4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <prvHeapInit+0xb4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <prvHeapInit+0xb4>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <prvHeapInit+0xb8>)
 8003612:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a09      	ldr	r2, [pc, #36]	; (8003640 <prvHeapInit+0xbc>)
 800361a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <prvHeapInit+0xc0>)
 800361e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	200002fc 	.word	0x200002fc
 8003634:	20012efc 	.word	0x20012efc
 8003638:	20012f04 	.word	0x20012f04
 800363c:	20012f0c 	.word	0x20012f0c
 8003640:	20012f08 	.word	0x20012f08
 8003644:	20012f18 	.word	0x20012f18

08003648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <prvInsertBlockIntoFreeList+0xac>)
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e002      	b.n	800365c <prvInsertBlockIntoFreeList+0x14>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d8f7      	bhi.n	8003656 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d108      	bne.n	800368a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	441a      	add	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d118      	bne.n	80036d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <prvInsertBlockIntoFreeList+0xb0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d00d      	beq.n	80036c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e008      	b.n	80036d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <prvInsertBlockIntoFreeList+0xb0>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e003      	b.n	80036d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d002      	beq.n	80036e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20012efc 	.word	0x20012efc
 80036f8:	20012f04 	.word	0x20012f04

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db0b      	blt.n	8003726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <__NVIC_EnableIRQ+0x38>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2001      	movs	r0, #1
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003748:	b672      	cpsid	i
}
 800374a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <BasicTimer_Config+0x1c8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d106      	bne.n	8003764 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8003756:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <BasicTimer_Config+0x1cc>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	4a6a      	ldr	r2, [pc, #424]	; (8003904 <BasicTimer_Config+0x1cc>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
 8003762:	e030      	b.n	80037c6 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d106      	bne.n	800377c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <BasicTimer_Config+0x1cc>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a64      	ldr	r2, [pc, #400]	; (8003904 <BasicTimer_Config+0x1cc>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	e024      	b.n	80037c6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a61      	ldr	r2, [pc, #388]	; (8003908 <BasicTimer_Config+0x1d0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d106      	bne.n	8003794 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003786:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <BasicTimer_Config+0x1cc>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a5e      	ldr	r2, [pc, #376]	; (8003904 <BasicTimer_Config+0x1cc>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	e018      	b.n	80037c6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5c      	ldr	r2, [pc, #368]	; (800390c <BasicTimer_Config+0x1d4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d106      	bne.n	80037ac <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800379e:	4b59      	ldr	r3, [pc, #356]	; (8003904 <BasicTimer_Config+0x1cc>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a58      	ldr	r2, [pc, #352]	; (8003904 <BasicTimer_Config+0x1cc>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	e00c      	b.n	80037c6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a57      	ldr	r2, [pc, #348]	; (8003910 <BasicTimer_Config+0x1d8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d106      	bne.n	80037c4 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80037b6:	4b53      	ldr	r3, [pc, #332]	; (8003904 <BasicTimer_Config+0x1cc>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a52      	ldr	r2, [pc, #328]	; (8003904 <BasicTimer_Config+0x1cc>)
 80037bc:	f043 0308 	orr.w	r3, r3, #8
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	e000      	b.n	80037c6 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 80037c4:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037d4:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6892      	ldr	r2, [r2, #8]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d144      	bne.n	8003872 <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0210 	bic.w	r2, r2, #16
 80037f6:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2ba0      	cmp	r3, #160	; 0xa0
 8003802:	d003      	beq.n	800380c <BasicTimer_Config+0xd4>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380a:	d10b      	bne.n	8003824 <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2264      	movs	r2, #100	; 0x64
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	3a01      	subs	r2, #1
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
 8003822:	e021      	b.n	8003868 <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800382a:	d004      	beq.n	8003836 <BasicTimer_Config+0xfe>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	3a01      	subs	r2, #1
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
 800384e:	e00b      	b.n	8003868 <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003856:	d107      	bne.n	8003868 <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	3a01      	subs	r2, #1
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
 8003870:	e013      	b.n	800389a <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0210 	orr.w	r2, r2, #16
 8003880:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3a01      	subs	r2, #1
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3a01      	subs	r2, #1
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b2:	d103      	bne.n	80038bc <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80038b4:	201c      	movs	r0, #28
 80038b6:	f7ff ff21 	bl	80036fc <__NVIC_EnableIRQ>
 80038ba:	e01b      	b.n	80038f4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a11      	ldr	r2, [pc, #68]	; (8003908 <BasicTimer_Config+0x1d0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d103      	bne.n	80038ce <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 80038c6:	201d      	movs	r0, #29
 80038c8:	f7ff ff18 	bl	80036fc <__NVIC_EnableIRQ>
 80038cc:	e012      	b.n	80038f4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <BasicTimer_Config+0x1d4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 80038d8:	201e      	movs	r0, #30
 80038da:	f7ff ff0f 	bl	80036fc <__NVIC_EnableIRQ>
 80038de:	e009      	b.n	80038f4 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <BasicTimer_Config+0x1d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d103      	bne.n	80038f2 <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80038ea:	2032      	movs	r0, #50	; 0x32
 80038ec:	f7ff ff06 	bl	80036fc <__NVIC_EnableIRQ>
 80038f0:	e000      	b.n	80038f4 <BasicTimer_Config+0x1bc>
	}
	else{
		__NOP();
 80038f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80038f4:	b662      	cpsie	i
}
 80038f6:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40010000 	.word	0x40010000
 8003904:	40023800 	.word	0x40023800
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00

08003914 <BasicTimer2_Callback>:

__attribute__((weak)) void BasicTimer2_Callback(void){
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003918:	bf00      	nop
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003928:	bf00      	nop
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003938:	bf00      	nop
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003948:	bf00      	nop
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003958:	bf00      	nop
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003968:	bf00      	nop
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003978:	bf00      	nop
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003988:	bf00      	nop
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003998:	bf00      	nop
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039a8:	bf00      	nop
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039b8:	bf00      	nop
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039c8:	bf00      	nop
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039d8:	bf00      	nop
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039e8:	bf00      	nop
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80039f8:	bf00      	nop
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003a08:	bf00      	nop
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003a18:	bf00      	nop
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8003a28:	bf00      	nop
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8003a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8003a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8003a56:	f7ff ff5d 	bl	8003914 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8003a5a:	e066      	b.n	8003b2a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8003a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8003a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a74:	f023 0302 	bic.w	r3, r3, #2
 8003a78:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8003a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a88:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8003a8a:	f7ff ff5b 	bl	8003944 <Capture_TIM2_Ch1_Callback>
}
 8003a8e:	e04c      	b.n	8003b2a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8003a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8003a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8003aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003abc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8003abe:	f7ff ff49 	bl	8003954 <Capture_TIM2_Ch2_Callback>
}
 8003ac2:	e032      	b.n	8003b2a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8003ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8003ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003adc:	f023 0308 	bic.w	r3, r3, #8
 8003ae0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8003ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8003af2:	f7ff ff37 	bl	8003964 <Capture_TIM2_Ch3_Callback>
}
 8003af6:	e018      	b.n	8003b2a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8003af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8003b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8003b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b24:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8003b26:	f7ff ff25 	bl	8003974 <Capture_TIM2_Ch4_Callback>
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4a2d      	ldr	r2, [pc, #180]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8003b4c:	f7fd f9bc 	bl	8000ec8 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8003b50:	e052      	b.n	8003bf8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b64:	f023 0302 	bic.w	r3, r3, #2
 8003b68:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b74:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8003b76:	f7ff ff05 	bl	8003984 <Capture_TIM3_Ch1_Callback>
}
 8003b7a:	e03d      	b.n	8003bf8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00e      	beq.n	8003ba6 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b9e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8003ba0:	f7ff fef8 	bl	8003994 <Capture_TIM3_Ch2_Callback>
}
 8003ba4:	e028      	b.n	8003bf8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bb8:	f023 0308 	bic.w	r3, r3, #8
 8003bbc:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc8:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8003bca:	f7ff feeb 	bl	80039a4 <Capture_TIM3_Ch3_Callback>
}
 8003bce:	e013      	b.n	8003bf8 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003be2:	f023 0310 	bic.w	r3, r3, #16
 8003be6:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <TIM3_IRQHandler+0xcc>)
 8003bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf2:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8003bf4:	f7ff fede 	bl	80039b4 <Capture_TIM3_Ch4_Callback>
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40000400 	.word	0x40000400

08003c00 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8003c04:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8003c1c:	f7ff fe82 	bl	8003924 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8003c20:	e052      	b.n	8003cc8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8003c22:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c34:	f023 0302 	bic.w	r3, r3, #2
 8003c38:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c44:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8003c46:	f7ff febd 	bl	80039c4 <Capture_TIM4_Ch1_Callback>
}
 8003c4a:	e03d      	b.n	8003cc8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c6e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8003c70:	f7ff fec8 	bl	8003a04 <Capture_TIM5_Ch2_Callback>
}
 8003c74:	e028      	b.n	8003cc8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c88:	f023 0308 	bic.w	r3, r3, #8
 8003c8c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c98:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8003c9a:	f7ff fe9b 	bl	80039d4 <Capture_TIM4_Ch3_Callback>
}
 8003c9e:	e013      	b.n	8003cc8 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <TIM4_IRQHandler+0xcc>)
 8003cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc2:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8003cc4:	f7ff fe8e 	bl	80039e4 <Capture_TIM4_Ch4_Callback>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40000800 	.word	0x40000800

08003cd0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8003cec:	f7ff fe22 	bl	8003934 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8003cf0:	e052      	b.n	8003d98 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d04:	f023 0302 	bic.w	r3, r3, #2
 8003d08:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d14:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8003d16:	f7ff fe6d 	bl	80039f4 <Capture_TIM5_Ch1_Callback>
}
 8003d1a:	e03d      	b.n	8003d98 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d3e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8003d40:	f7ff fe60 	bl	8003a04 <Capture_TIM5_Ch2_Callback>
}
 8003d44:	e028      	b.n	8003d98 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00e      	beq.n	8003d70 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d58:	f023 0308 	bic.w	r3, r3, #8
 8003d5c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d68:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8003d6a:	f7ff fe53 	bl	8003a14 <Capture_TIM5_Ch3_Callback>
}
 8003d6e:	e013      	b.n	8003d98 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	4a06      	ldr	r2, [pc, #24]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <TIM5_IRQHandler+0xcc>)
 8003d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d92:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8003d94:	f7ff fe46 	bl	8003a24 <Capture_TIM5_Ch4_Callback>
}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40000c00 	.word	0x40000c00

08003da0 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a88      	ldr	r2, [pc, #544]	; (8003ffc <GPIO_Config+0x238>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d106      	bne.n	8003dec <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <GPIO_Config+0x23c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a87      	ldr	r2, [pc, #540]	; (8004000 <GPIO_Config+0x23c>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	e03a      	b.n	8003e62 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a84      	ldr	r2, [pc, #528]	; (8004004 <GPIO_Config+0x240>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d106      	bne.n	8003e04 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8003df6:	4b82      	ldr	r3, [pc, #520]	; (8004000 <GPIO_Config+0x23c>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a81      	ldr	r2, [pc, #516]	; (8004000 <GPIO_Config+0x23c>)
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	e02e      	b.n	8003e62 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7f      	ldr	r2, [pc, #508]	; (8004008 <GPIO_Config+0x244>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d106      	bne.n	8003e1c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8003e0e:	4b7c      	ldr	r3, [pc, #496]	; (8004000 <GPIO_Config+0x23c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a7b      	ldr	r2, [pc, #492]	; (8004000 <GPIO_Config+0x23c>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	e022      	b.n	8003e62 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <GPIO_Config+0x248>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d106      	bne.n	8003e34 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <GPIO_Config+0x23c>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <GPIO_Config+0x23c>)
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	e016      	b.n	8003e62 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a75      	ldr	r2, [pc, #468]	; (8004010 <GPIO_Config+0x24c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d106      	bne.n	8003e4c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <GPIO_Config+0x23c>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a6f      	ldr	r2, [pc, #444]	; (8004000 <GPIO_Config+0x23c>)
 8003e44:	f043 0310 	orr.w	r3, r3, #16
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	e00a      	b.n	8003e62 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a70      	ldr	r2, [pc, #448]	; (8004014 <GPIO_Config+0x250>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d105      	bne.n	8003e62 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <GPIO_Config+0x23c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a69      	ldr	r2, [pc, #420]	; (8004000 <GPIO_Config+0x23c>)
 8003e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	795b      	ldrb	r3, [r3, #5]
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	791b      	ldrb	r3, [r3, #4]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2103      	movs	r1, #3
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	400a      	ands	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7a1b      	ldrb	r3, [r3, #8]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	791b      	ldrb	r3, [r3, #4]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	408b      	lsls	r3, r1
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	400a      	ands	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	799b      	ldrb	r3, [r3, #6]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2103      	movs	r1, #3
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4619      	mov	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6899      	ldr	r1, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	79db      	ldrb	r3, [r3, #7]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	2103      	movs	r1, #3
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	795b      	ldrb	r3, [r3, #5]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d143      	bne.n	8003fee <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	791b      	ldrb	r3, [r3, #4]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d81f      	bhi.n	8003fae <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	791b      	ldrb	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	210f      	movs	r1, #15
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7a5b      	ldrb	r3, [r3, #9]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8003fac:	e01f      	b.n	8003fee <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	791b      	ldrb	r3, [r3, #4]
 8003fb2:	3b08      	subs	r3, #8
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	400a      	ands	r2, r1
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7a5b      	ldrb	r3, [r3, #9]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40020000 	.word	0x40020000
 8004000:	40023800 	.word	0x40023800
 8004004:	40020400 	.word	0x40020400
 8004008:	40020800 	.word	0x40020800
 800400c:	40020c00 	.word	0x40020c00
 8004010:	40021000 	.word	0x40021000
 8004014:	40021c00 	.word	0x40021c00

08004018 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10d      	bne.n	8004046 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	4619      	mov	r1, r3
 8004036:	2301      	movs	r3, #1
 8004038:	408b      	lsls	r3, r1
 800403a:	4619      	mov	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8004044:	e00d      	b.n	8004062 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	791b      	ldrb	r3, [r3, #4]
 8004050:	3310      	adds	r3, #16
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	4619      	mov	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	2301      	movs	r3, #1
 8004082:	4093      	lsls	r3, r2
 8004084:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	791b      	ldrb	r3, [r3, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	40d3      	lsrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ffd8 	bl	800406e <GPIO_ReadPin>
 80040be:	4603      	mov	r3, r0
 80040c0:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d104      	bne.n	80040d2 <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ffa4 	bl	8004018 <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 80040d0:	e003      	b.n	80040da <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 80040d2:	2101      	movs	r1, #1
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff9f 	bl	8004018 <GPIO_WritePin>
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <RCC_enableMaxFrequencies+0xd8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2e      	ldr	r2, [pc, #184]	; (80041bc <RCC_enableMaxFrequencies+0xd8>)
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004112:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004124:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8004128:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004130:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004134:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 800413c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004140:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004142:	e000      	b.n	8004146 <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8004144:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f8      	beq.n	8004144 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004158:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800415c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004168:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004174:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <RCC_enableMaxFrequencies+0xdc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <RCC_enableMaxFrequencies+0xdc>)
 800417c:	f023 030f 	bic.w	r3, r3, #15
 8004180:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <RCC_enableMaxFrequencies+0xdc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <RCC_enableMaxFrequencies+0xdc>)
 8004188:	f043 0303 	orr.w	r3, r3, #3
 800418c:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800419a:	e000      	b.n	800419e <RCC_enableMaxFrequencies+0xba>
		__NOP();
 800419c:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <RCC_enableMaxFrequencies+0xd4>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f8      	beq.n	800419c <RCC_enableMaxFrequencies+0xb8>
	}



}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000
 80041c0:	40023c00 	.word	0x40023c00

080041c4 <__NVIC_EnableIRQ>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db0b      	blt.n	80041ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <__NVIC_EnableIRQ+0x38>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000e100 	.word	0xe000e100

08004200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	2b00      	cmp	r3, #0
 8004212:	db0a      	blt.n	800422a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	490c      	ldr	r1, [pc, #48]	; (800424c <__NVIC_SetPriority+0x4c>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	0112      	lsls	r2, r2, #4
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	440b      	add	r3, r1
 8004224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004228:	e00a      	b.n	8004240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4908      	ldr	r1, [pc, #32]	; (8004250 <__NVIC_SetPriority+0x50>)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	3b04      	subs	r3, #4
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	440b      	add	r3, r1
 800423e:	761a      	strb	r2, [r3, #24]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000e100 	.word	0xe000e100
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800425c:	b672      	cpsid	i
}
 800425e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a8f      	ldr	r2, [pc, #572]	; (80044a4 <USART_Config+0x250>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d106      	bne.n	8004278 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800426a:	4b8f      	ldr	r3, [pc, #572]	; (80044a8 <USART_Config+0x254>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	4a8e      	ldr	r2, [pc, #568]	; (80044a8 <USART_Config+0x254>)
 8004270:	f043 0310 	orr.w	r3, r3, #16
 8004274:	6453      	str	r3, [r2, #68]	; 0x44
 8004276:	e018      	b.n	80042aa <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a8b      	ldr	r2, [pc, #556]	; (80044ac <USART_Config+0x258>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d106      	bne.n	8004290 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <USART_Config+0x254>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a88      	ldr	r2, [pc, #544]	; (80044a8 <USART_Config+0x254>)
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	e00c      	b.n	80042aa <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a86      	ldr	r2, [pc, #536]	; (80044b0 <USART_Config+0x25c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d106      	bne.n	80042a8 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800429a:	4b83      	ldr	r3, [pc, #524]	; (80044a8 <USART_Config+0x254>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4a82      	ldr	r2, [pc, #520]	; (80044a8 <USART_Config+0x254>)
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6453      	str	r3, [r2, #68]	; 0x44
 80042a6:	e000      	b.n	80042aa <USART_Config+0x56>
	}
	else{
		__NOP();
 80042a8:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7a5b      	ldrb	r3, [r3, #9]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d025      	beq.n	800430e <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7a5b      	ldrb	r3, [r3, #9]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d110      	bne.n	80042ec <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042d8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	e018      	b.n	800431e <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e007      	b.n	800431e <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7a1b      	ldrb	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e007      	b.n	8004348 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004346:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7a9b      	ldrb	r3, [r3, #10]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d82f      	bhi.n	80043b0 <USART_Config+0x15c>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <USART_Config+0x104>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800437b 	.word	0x0800437b
 8004360:	0800438d 	.word	0x0800438d
 8004364:	0800439f 	.word	0x0800439f
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004376:	611a      	str	r2, [r3, #16]
			break;
 8004378:	e023      	b.n	80043c2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004388:	611a      	str	r2, [r3, #16]
			break;
 800438a:	e01a      	b.n	80043c2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800439a:	611a      	str	r2, [r3, #16]
			break;
 800439c:	e011      	b.n	80043c2 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80043ac:	611a      	str	r2, [r3, #16]
			break;
 80043ae:	e008      	b.n	80043c2 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80043be:	611a      	str	r2, [r3, #16]
			break;
 80043c0:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681c      	ldr	r4, [r3, #0]
 80043ca:	4611      	mov	r1, r2
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8cb 	bl	8004568 <brrCalculus>
 80043d2:	4603      	mov	r3, r0
 80043d4:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	799b      	ldrb	r3, [r3, #6]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d82e      	bhi.n	800443c <USART_Config+0x1e8>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <USART_Config+0x190>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004407 	.word	0x08004407
 80043ec:	08004419 	.word	0x08004419
 80043f0:	0800442b 	.word	0x0800442b
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	60da      	str	r2, [r3, #12]
			break;
 8004404:	e023      	b.n	800444e <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0204 	orr.w	r2, r2, #4
 8004414:	60da      	str	r2, [r3, #12]
			break;
 8004416:	e01a      	b.n	800444e <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 020c 	orr.w	r2, r2, #12
 8004426:	60da      	str	r2, [r3, #12]
			break;
 8004428:	e011      	b.n	800444e <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 020c 	bic.w	r2, r2, #12
 8004438:	60da      	str	r2, [r3, #12]
			break;
 800443a:	e008      	b.n	800444e <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 020c 	bic.w	r2, r2, #12
 800444a:	60da      	str	r2, [r3, #12]
			break;
 800444c:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	799b      	ldrb	r3, [r3, #6]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d008      	beq.n	8004468 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e007      	b.n	8004478 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	795b      	ldrb	r3, [r3, #5]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d12d      	bne.n	80044dc <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0220 	orr.w	r2, r2, #32
 800448e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <USART_Config+0x250>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800449a:	2025      	movs	r0, #37	; 0x25
 800449c:	f7ff fe92 	bl	80041c4 <__NVIC_EnableIRQ>
 80044a0:	e024      	b.n	80044ec <USART_Config+0x298>
 80044a2:	bf00      	nop
 80044a4:	40011000 	.word	0x40011000
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40004400 	.word	0x40004400
 80044b0:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a28      	ldr	r2, [pc, #160]	; (800455c <USART_Config+0x308>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d103      	bne.n	80044c6 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80044be:	2026      	movs	r0, #38	; 0x26
 80044c0:	f7ff fe80 	bl	80041c4 <__NVIC_EnableIRQ>
 80044c4:	e012      	b.n	80044ec <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a25      	ldr	r2, [pc, #148]	; (8004560 <USART_Config+0x30c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80044d0:	2047      	movs	r0, #71	; 0x47
 80044d2:	f7ff fe77 	bl	80041c4 <__NVIC_EnableIRQ>
 80044d6:	e009      	b.n	80044ec <USART_Config+0x298>
		}
		else{
				__NOP();
 80044d8:	bf00      	nop
 80044da:	e007      	b.n	80044ec <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0220 	bic.w	r2, r2, #32
 80044ea:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d124      	bne.n	800453e <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004502:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <USART_Config+0x310>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d103      	bne.n	8004516 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800450e:	2025      	movs	r0, #37	; 0x25
 8004510:	f7ff fe58 	bl	80041c4 <__NVIC_EnableIRQ>
 8004514:	e01b      	b.n	800454e <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <USART_Config+0x308>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004520:	2026      	movs	r0, #38	; 0x26
 8004522:	f7ff fe4f 	bl	80041c4 <__NVIC_EnableIRQ>
 8004526:	e012      	b.n	800454e <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <USART_Config+0x30c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d103      	bne.n	800453a <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004532:	2047      	movs	r0, #71	; 0x47
 8004534:	f7ff fe46 	bl	80041c4 <__NVIC_EnableIRQ>
 8004538:	e009      	b.n	800454e <USART_Config+0x2fa>
		}
		else{
				__NOP();
 800453a:	bf00      	nop
 800453c:	e007      	b.n	800454e <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800454e:	b662      	cpsie	i
}
 8004550:	bf00      	nop
	}

	__enable_irq();
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	bf00      	nop
 800455c:	40004400 	.word	0x40004400
 8004560:	40011400 	.word	0x40011400
 8004564:	40011000 	.word	0x40011000

08004568 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	79db      	ldrb	r3, [r3, #7]
 8004576:	2b03      	cmp	r3, #3
 8004578:	f200 8217 	bhi.w	80049aa <brrCalculus+0x442>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <brrCalculus+0x1c>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	08004595 	.word	0x08004595
 8004588:	0800468f 	.word	0x0800468f
 800458c:	080047a9 	.word	0x080047a9
 8004590:	080048b1 	.word	0x080048b1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8004594:	4980      	ldr	r1, [pc, #512]	; (8004798 <brrCalculus+0x230>)
 8004596:	a37c      	add	r3, pc, #496	; (adr r3, 8004788 <brrCalculus+0x220>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	ee17 0a90 	vmov	r0, s15
 80045ae:	f7fb ff7b 	bl	80004a8 <__aeabi_f2d>
 80045b2:	4b79      	ldr	r3, [pc, #484]	; (8004798 <brrCalculus+0x230>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fb ffce 	bl	8000558 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4975      	ldr	r1, [pc, #468]	; (8004798 <brrCalculus+0x230>)
 80045c2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80045c6:	4b74      	ldr	r3, [pc, #464]	; (8004798 <brrCalculus+0x230>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	f7fc fa72 	bl	8000ab8 <__aeabi_d2iz>
 80045d4:	4603      	mov	r3, r0
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	4b70      	ldr	r3, [pc, #448]	; (800479c <brrCalculus+0x234>)
 80045da:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80045dc:	4b6e      	ldr	r3, [pc, #440]	; (8004798 <brrCalculus+0x230>)
 80045de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <brrCalculus+0x230>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fc fa64 	bl	8000ab8 <__aeabi_d2iz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fb ff46 	bl	8000484 <__aeabi_i2d>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fb fdf2 	bl	80001e8 <__aeabi_dsub>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	f7fc fa7c 	bl	8000b08 <__aeabi_d2f>
 8004610:	4603      	mov	r3, r0
 8004612:	4a63      	ldr	r2, [pc, #396]	; (80047a0 <brrCalculus+0x238>)
 8004614:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004616:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <brrCalculus+0x238>)
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	2004      	movs	r0, #4
 800461e:	eeb0 0a67 	vmov.f32	s0, s15
 8004622:	f000 fa3d 	bl	8004aa0 <roundToNDecimals>
 8004626:	eef0 7a40 	vmov.f32	s15, s0
 800462a:	4b5d      	ldr	r3, [pc, #372]	; (80047a0 <brrCalculus+0x238>)
 800462c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <brrCalculus+0x238>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800463a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463e:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <brrCalculus+0x238>)
 8004640:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004644:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <brrCalculus+0x238>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff2d 	bl	80004a8 <__aeabi_f2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	ec43 2b10 	vmov	d0, r2, r3
 8004656:	f000 fae9 	bl	8004c2c <round>
 800465a:	ec53 2b10 	vmov	r2, r3, d0
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	f7fc fa51 	bl	8000b08 <__aeabi_d2f>
 8004666:	4603      	mov	r3, r0
 8004668:	4a4d      	ldr	r2, [pc, #308]	; (80047a0 <brrCalculus+0x238>)
 800466a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <brrCalculus+0x234>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	b29a      	uxth	r2, r3
 8004674:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <brrCalculus+0x238>)
 8004676:	edd3 7a00 	vldr	s15, [r3]
 800467a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467e:	ee17 3a90 	vmov	r3, s15
 8004682:	b29b      	uxth	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	b29a      	uxth	r2, r3
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <brrCalculus+0x23c>)
 800468a:	801a      	strh	r2, [r3, #0]


		break;
 800468c:	e18f      	b.n	80049ae <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800468e:	4942      	ldr	r1, [pc, #264]	; (8004798 <brrCalculus+0x230>)
 8004690:	a33f      	add	r3, pc, #252	; (adr r3, 8004790 <brrCalculus+0x228>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	ee17 0a90 	vmov	r0, s15
 80046a8:	f7fb fefe 	bl	80004a8 <__aeabi_f2d>
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <brrCalculus+0x230>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb ff51 	bl	8000558 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4937      	ldr	r1, [pc, #220]	; (8004798 <brrCalculus+0x230>)
 80046bc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <brrCalculus+0x230>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fc f9f5 	bl	8000ab8 <__aeabi_d2iz>
 80046ce:	4603      	mov	r3, r0
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	4b32      	ldr	r3, [pc, #200]	; (800479c <brrCalculus+0x234>)
 80046d4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <brrCalculus+0x230>)
 80046d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046dc:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <brrCalculus+0x230>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7fc f9e7 	bl	8000ab8 <__aeabi_d2iz>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb fec9 	bl	8000484 <__aeabi_i2d>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fd75 	bl	80001e8 <__aeabi_dsub>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4610      	mov	r0, r2
 8004704:	4619      	mov	r1, r3
 8004706:	f7fc f9ff 	bl	8000b08 <__aeabi_d2f>
 800470a:	4603      	mov	r3, r0
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <brrCalculus+0x238>)
 800470e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <brrCalculus+0x238>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	2004      	movs	r0, #4
 8004718:	eeb0 0a67 	vmov.f32	s0, s15
 800471c:	f000 f9c0 	bl	8004aa0 <roundToNDecimals>
 8004720:	eef0 7a40 	vmov.f32	s15, s0
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <brrCalculus+0x238>)
 8004726:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <brrCalculus+0x238>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <brrCalculus+0x238>)
 800473a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <brrCalculus+0x238>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb feb0 	bl	80004a8 <__aeabi_f2d>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	ec43 2b10 	vmov	d0, r2, r3
 8004750:	f000 fa6c 	bl	8004c2c <round>
 8004754:	ec53 2b10 	vmov	r2, r3, d0
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fc f9d4 	bl	8000b08 <__aeabi_d2f>
 8004760:	4603      	mov	r3, r0
 8004762:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <brrCalculus+0x238>)
 8004764:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <brrCalculus+0x234>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	b29a      	uxth	r2, r3
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <brrCalculus+0x238>)
 8004770:	edd3 7a00 	vldr	s15, [r3]
 8004774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004778:	ee17 3a90 	vmov	r3, s15
 800477c:	b29b      	uxth	r3, r3
 800477e:	4313      	orrs	r3, r2
 8004780:	b29a      	uxth	r2, r3
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <brrCalculus+0x23c>)
 8004784:	801a      	strh	r2, [r3, #0]


		break;
 8004786:	e112      	b.n	80049ae <brrCalculus+0x446>
 8004788:	b4e81b4f 	.word	0xb4e81b4f
 800478c:	3edb4e81 	.word	0x3edb4e81
 8004790:	b4e81b4f 	.word	0xb4e81b4f
 8004794:	3ecb4e81 	.word	0x3ecb4e81
 8004798:	20012f28 	.word	0x20012f28
 800479c:	20012f1e 	.word	0x20012f1e
 80047a0:	20012f20 	.word	0x20012f20
 80047a4:	20012f1c 	.word	0x20012f1c
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80047a8:	4989      	ldr	r1, [pc, #548]	; (80049d0 <brrCalculus+0x468>)
 80047aa:	a385      	add	r3, pc, #532	; (adr r3, 80049c0 <brrCalculus+0x458>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	ee17 0a90 	vmov	r0, s15
 80047c2:	f7fb fe71 	bl	80004a8 <__aeabi_f2d>
 80047c6:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <brrCalculus+0x468>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb fec4 	bl	8000558 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	497e      	ldr	r1, [pc, #504]	; (80049d0 <brrCalculus+0x468>)
 80047d6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80047da:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <brrCalculus+0x468>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7fc f968 	bl	8000ab8 <__aeabi_d2iz>
 80047e8:	4603      	mov	r3, r0
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <brrCalculus+0x46c>)
 80047ee:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80047f0:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <brrCalculus+0x468>)
 80047f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047f6:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <brrCalculus+0x468>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f7fc f95a 	bl	8000ab8 <__aeabi_d2iz>
 8004804:	4603      	mov	r3, r0
 8004806:	4618      	mov	r0, r3
 8004808:	f7fb fe3c 	bl	8000484 <__aeabi_i2d>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fb fce8 	bl	80001e8 <__aeabi_dsub>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f972 	bl	8000b08 <__aeabi_d2f>
 8004824:	4603      	mov	r3, r0
 8004826:	4a6c      	ldr	r2, [pc, #432]	; (80049d8 <brrCalculus+0x470>)
 8004828:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800482a:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <brrCalculus+0x470>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	2004      	movs	r0, #4
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	f000 f933 	bl	8004aa0 <roundToNDecimals>
 800483a:	eef0 7a40 	vmov.f32	s15, s0
 800483e:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <brrCalculus+0x470>)
 8004840:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8004844:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <brrCalculus+0x470>)
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800484e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <brrCalculus+0x470>)
 8004854:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8004858:	4b5f      	ldr	r3, [pc, #380]	; (80049d8 <brrCalculus+0x470>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fe23 	bl	80004a8 <__aeabi_f2d>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	ec43 2b10 	vmov	d0, r2, r3
 800486a:	f000 f9df 	bl	8004c2c <round>
 800486e:	ec51 0b10 	vmov	r0, r1, d0
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	4b59      	ldr	r3, [pc, #356]	; (80049dc <brrCalculus+0x474>)
 8004878:	f7fb fcb8 	bl	80001ec <__adddf3>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	f7fc f940 	bl	8000b08 <__aeabi_d2f>
 8004888:	4603      	mov	r3, r0
 800488a:	4a53      	ldr	r2, [pc, #332]	; (80049d8 <brrCalculus+0x470>)
 800488c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <brrCalculus+0x46c>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	b29a      	uxth	r2, r3
 8004896:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <brrCalculus+0x470>)
 8004898:	edd3 7a00 	vldr	s15, [r3]
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 3a90 	vmov	r3, s15
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <brrCalculus+0x478>)
 80048ac:	801a      	strh	r2, [r3, #0]


		break;
 80048ae:	e07e      	b.n	80049ae <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80048b0:	4947      	ldr	r1, [pc, #284]	; (80049d0 <brrCalculus+0x468>)
 80048b2:	a345      	add	r3, pc, #276	; (adr r3, 80049c8 <brrCalculus+0x460>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	ee17 0a90 	vmov	r0, s15
 80048ca:	f7fb fded 	bl	80004a8 <__aeabi_f2d>
 80048ce:	4b40      	ldr	r3, [pc, #256]	; (80049d0 <brrCalculus+0x468>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fe40 	bl	8000558 <__aeabi_dmul>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	493c      	ldr	r1, [pc, #240]	; (80049d0 <brrCalculus+0x468>)
 80048de:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <brrCalculus+0x468>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	f7fc f8e4 	bl	8000ab8 <__aeabi_d2iz>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	4b37      	ldr	r3, [pc, #220]	; (80049d4 <brrCalculus+0x46c>)
 80048f6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <brrCalculus+0x468>)
 80048fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <brrCalculus+0x468>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f7fc f8d6 	bl	8000ab8 <__aeabi_d2iz>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fdb8 	bl	8000484 <__aeabi_i2d>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fb fc64 	bl	80001e8 <__aeabi_dsub>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7fc f8ee 	bl	8000b08 <__aeabi_d2f>
 800492c:	4603      	mov	r3, r0
 800492e:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <brrCalculus+0x470>)
 8004930:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <brrCalculus+0x470>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	2004      	movs	r0, #4
 800493a:	eeb0 0a67 	vmov.f32	s0, s15
 800493e:	f000 f8af 	bl	8004aa0 <roundToNDecimals>
 8004942:	eef0 7a40 	vmov.f32	s15, s0
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <brrCalculus+0x470>)
 8004948:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <brrCalculus+0x470>)
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <brrCalculus+0x470>)
 800495c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <brrCalculus+0x470>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fb fd9f 	bl	80004a8 <__aeabi_f2d>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	ec43 2b10 	vmov	d0, r2, r3
 8004972:	f000 f95b 	bl	8004c2c <round>
 8004976:	ec53 2b10 	vmov	r2, r3, d0
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f7fc f8c3 	bl	8000b08 <__aeabi_d2f>
 8004982:	4603      	mov	r3, r0
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <brrCalculus+0x470>)
 8004986:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8004988:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <brrCalculus+0x46c>)
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	b29a      	uxth	r2, r3
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <brrCalculus+0x470>)
 8004992:	edd3 7a00 	vldr	s15, [r3]
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 3a90 	vmov	r3, s15
 800499e:	b29b      	uxth	r3, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <brrCalculus+0x478>)
 80049a6:	801a      	strh	r2, [r3, #0]


		break;
 80049a8:	e001      	b.n	80049ae <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80049aa:	bf00      	nop
		break;
 80049ac:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <brrCalculus+0x478>)
 80049b0:	881b      	ldrh	r3, [r3, #0]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	789abcdf 	.word	0x789abcdf
 80049c4:	3ec23456 	.word	0x3ec23456
 80049c8:	789abcdf 	.word	0x789abcdf
 80049cc:	3ea23456 	.word	0x3ea23456
 80049d0:	20012f28 	.word	0x20012f28
 80049d4:	20012f1e 	.word	0x20012f1e
 80049d8:	20012f20 	.word	0x20012f20
 80049dc:	3ff00000 	.word	0x3ff00000
 80049e0:	20012f1c 	.word	0x20012f1c

080049e4 <usart1Rx_Callback>:
}

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
	__NOP();
 80049e8:	bf00      	nop
}
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
	__NOP();
 80049f8:	bf00      	nop
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	return auxRxData;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <getRxData+0x14>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20012f30 	.word	0x20012f30

08004a1c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <USART2_IRQHandler+0x24>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <USART2_IRQHandler+0x24>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <USART2_IRQHandler+0x28>)
 8004a34:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8004a36:	f7fc fa17 	bl	8000e68 <usart2Rx_Callback>
	}

}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40004400 	.word	0x40004400
 8004a44:	20012f30 	.word	0x20012f30

08004a48 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <USART1_IRQHandler+0x24>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <USART1_IRQHandler+0x24>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <USART1_IRQHandler+0x28>)
 8004a60:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8004a62:	f7ff ffbf 	bl	80049e4 <usart1Rx_Callback>
	}
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	20012f30 	.word	0x20012f30

08004a74 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <USART6_IRQHandler+0x24>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <USART6_IRQHandler+0x24>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <USART6_IRQHandler+0x28>)
 8004a8c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8004a8e:	f7ff ffb1 	bl	80049f4 <usart6Rx_Callback>
	}

}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40011400 	.word	0x40011400
 8004a9c:	20012f30 	.word	0x20012f30

08004aa0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8004aaa:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8004aac:	6838      	ldr	r0, [r7, #0]
 8004aae:	f7fb fce9 	bl	8000484 <__aeabi_i2d>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	ec43 2b11 	vmov	d1, r2, r3
 8004aba:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004b38 <roundToNDecimals+0x98>
 8004abe:	f000 f8fb 	bl	8004cb8 <pow>
 8004ac2:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fb fcee 	bl	80004a8 <__aeabi_f2d>
 8004acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad0:	f7fb fd42 	bl	8000558 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f814 	bl	8000b08 <__aeabi_d2f>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	607b      	str	r3, [r7, #4]

    number = round(number);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fb fcdf 	bl	80004a8 <__aeabi_f2d>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	ec43 2b10 	vmov	d0, r2, r3
 8004af2:	f000 f89b 	bl	8004c2c <round>
 8004af6:	ec53 2b10 	vmov	r2, r3, d0
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fc f803 	bl	8000b08 <__aeabi_d2f>
 8004b02:	4603      	mov	r3, r0
 8004b04:	607b      	str	r3, [r7, #4]

    number /= factor;
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fb fcce 	bl	80004a8 <__aeabi_f2d>
 8004b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b10:	f7fb fe4c 	bl	80007ac <__aeabi_ddiv>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f7fb fff4 	bl	8000b08 <__aeabi_d2f>
 8004b20:	4603      	mov	r3, r0
 8004b22:	607b      	str	r3, [r7, #4]

    return number;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	ee07 3a90 	vmov	s15, r3
}
 8004b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	f3af 8000 	nop.w
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	40240000 	.word	0x40240000

08004b40 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b4c:	b672      	cpsid	i
}
 8004b4e:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <usart_Set_Priority+0x60>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d105      	bne.n	8004b66 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	2025      	movs	r0, #37	; 0x25
 8004b60:	f7ff fb4e 	bl	8004200 <__NVIC_SetPriority>
 8004b64:	e016      	b.n	8004b94 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ba4 <usart_Set_Priority+0x64>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d105      	bne.n	8004b7c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	4619      	mov	r1, r3
 8004b74:	2026      	movs	r0, #38	; 0x26
 8004b76:	f7ff fb43 	bl	8004200 <__NVIC_SetPriority>
 8004b7a:	e00b      	b.n	8004b94 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <usart_Set_Priority+0x68>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d105      	bne.n	8004b92 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	2047      	movs	r0, #71	; 0x47
 8004b8c:	f7ff fb38 	bl	8004200 <__NVIC_SetPriority>
 8004b90:	e000      	b.n	8004b94 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 8004b92:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004b94:	b662      	cpsie	i
}
 8004b96:	bf00      	nop



	__enable_irq();

}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	40011400 	.word	0x40011400

08004bac <__errno>:
 8004bac:	4b01      	ldr	r3, [pc, #4]	; (8004bb4 <__errno+0x8>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 ff8e 	bl	8005aec <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	08005be8 	.word	0x08005be8
 8004bf4:	08005be8 	.word	0x08005be8
 8004bf8:	08005be8 	.word	0x08005be8
 8004bfc:	08005bec 	.word	0x08005bec

08004c00 <memcpy>:
 8004c00:	440a      	add	r2, r1
 8004c02:	4291      	cmp	r1, r2
 8004c04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c08:	d100      	bne.n	8004c0c <memcpy+0xc>
 8004c0a:	4770      	bx	lr
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c16:	4291      	cmp	r1, r2
 8004c18:	d1f9      	bne.n	8004c0e <memcpy+0xe>
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <memset>:
 8004c1c:	4402      	add	r2, r0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <round>:
 8004c2c:	ec51 0b10 	vmov	r0, r1, d0
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004c36:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004c3a:	2c13      	cmp	r4, #19
 8004c3c:	ee10 2a10 	vmov	r2, s0
 8004c40:	460b      	mov	r3, r1
 8004c42:	dc19      	bgt.n	8004c78 <round+0x4c>
 8004c44:	2c00      	cmp	r4, #0
 8004c46:	da09      	bge.n	8004c5c <round+0x30>
 8004c48:	3401      	adds	r4, #1
 8004c4a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004c4e:	d103      	bne.n	8004c58 <round+0x2c>
 8004c50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c58:	2200      	movs	r2, #0
 8004c5a:	e028      	b.n	8004cae <round+0x82>
 8004c5c:	4d15      	ldr	r5, [pc, #84]	; (8004cb4 <round+0x88>)
 8004c5e:	4125      	asrs	r5, r4
 8004c60:	ea01 0605 	and.w	r6, r1, r5
 8004c64:	4332      	orrs	r2, r6
 8004c66:	d00e      	beq.n	8004c86 <round+0x5a>
 8004c68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c6c:	fa42 f404 	asr.w	r4, r2, r4
 8004c70:	4423      	add	r3, r4
 8004c72:	ea23 0305 	bic.w	r3, r3, r5
 8004c76:	e7ef      	b.n	8004c58 <round+0x2c>
 8004c78:	2c33      	cmp	r4, #51	; 0x33
 8004c7a:	dd07      	ble.n	8004c8c <round+0x60>
 8004c7c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004c80:	d101      	bne.n	8004c86 <round+0x5a>
 8004c82:	f7fb fab3 	bl	80001ec <__adddf3>
 8004c86:	ec41 0b10 	vmov	d0, r0, r1
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8004c90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c94:	40f5      	lsrs	r5, r6
 8004c96:	4228      	tst	r0, r5
 8004c98:	d0f5      	beq.n	8004c86 <round+0x5a>
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004ca0:	fa01 f404 	lsl.w	r4, r1, r4
 8004ca4:	1912      	adds	r2, r2, r4
 8004ca6:	bf28      	it	cs
 8004ca8:	185b      	addcs	r3, r3, r1
 8004caa:	ea22 0205 	bic.w	r2, r2, r5
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	e7e8      	b.n	8004c86 <round+0x5a>
 8004cb4:	000fffff 	.word	0x000fffff

08004cb8 <pow>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	ed2d 8b02 	vpush	{d8}
 8004cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8004cc2:	eef0 8a60 	vmov.f32	s17, s1
 8004cc6:	ec55 4b11 	vmov	r4, r5, d1
 8004cca:	f000 f865 	bl	8004d98 <__ieee754_pow>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	ec57 6b10 	vmov	r6, r7, d0
 8004cda:	f7fb fed7 	bl	8000a8c <__aeabi_dcmpun>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d13b      	bne.n	8004d5a <pow+0xa2>
 8004ce2:	ec51 0b18 	vmov	r0, r1, d8
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f7fb fe9d 	bl	8000a28 <__aeabi_dcmpeq>
 8004cee:	b1b8      	cbz	r0, 8004d20 <pow+0x68>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fe96 	bl	8000a28 <__aeabi_dcmpeq>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d146      	bne.n	8004d8e <pow+0xd6>
 8004d00:	ec45 4b10 	vmov	d0, r4, r5
 8004d04:	f000 fe61 	bl	80059ca <finite>
 8004d08:	b338      	cbz	r0, 8004d5a <pow+0xa2>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7fb fe93 	bl	8000a3c <__aeabi_dcmplt>
 8004d16:	b300      	cbz	r0, 8004d5a <pow+0xa2>
 8004d18:	f7ff ff48 	bl	8004bac <__errno>
 8004d1c:	2322      	movs	r3, #34	; 0x22
 8004d1e:	e01b      	b.n	8004d58 <pow+0xa0>
 8004d20:	ec47 6b10 	vmov	d0, r6, r7
 8004d24:	f000 fe51 	bl	80059ca <finite>
 8004d28:	b9e0      	cbnz	r0, 8004d64 <pow+0xac>
 8004d2a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d2e:	eef0 0a68 	vmov.f32	s1, s17
 8004d32:	f000 fe4a 	bl	80059ca <finite>
 8004d36:	b1a8      	cbz	r0, 8004d64 <pow+0xac>
 8004d38:	ec45 4b10 	vmov	d0, r4, r5
 8004d3c:	f000 fe45 	bl	80059ca <finite>
 8004d40:	b180      	cbz	r0, 8004d64 <pow+0xac>
 8004d42:	4632      	mov	r2, r6
 8004d44:	463b      	mov	r3, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fe9f 	bl	8000a8c <__aeabi_dcmpun>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d0e2      	beq.n	8004d18 <pow+0x60>
 8004d52:	f7ff ff2b 	bl	8004bac <__errno>
 8004d56:	2321      	movs	r3, #33	; 0x21
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	ecbd 8b02 	vpop	{d8}
 8004d5e:	ec47 6b10 	vmov	d0, r6, r7
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d64:	2200      	movs	r2, #0
 8004d66:	2300      	movs	r3, #0
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fe5c 	bl	8000a28 <__aeabi_dcmpeq>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0f2      	beq.n	8004d5a <pow+0xa2>
 8004d74:	eeb0 0a48 	vmov.f32	s0, s16
 8004d78:	eef0 0a68 	vmov.f32	s1, s17
 8004d7c:	f000 fe25 	bl	80059ca <finite>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d0ea      	beq.n	8004d5a <pow+0xa2>
 8004d84:	ec45 4b10 	vmov	d0, r4, r5
 8004d88:	f000 fe1f 	bl	80059ca <finite>
 8004d8c:	e7c3      	b.n	8004d16 <pow+0x5e>
 8004d8e:	4f01      	ldr	r7, [pc, #4]	; (8004d94 <pow+0xdc>)
 8004d90:	2600      	movs	r6, #0
 8004d92:	e7e2      	b.n	8004d5a <pow+0xa2>
 8004d94:	3ff00000 	.word	0x3ff00000

08004d98 <__ieee754_pow>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	ed2d 8b06 	vpush	{d8-d10}
 8004da0:	b089      	sub	sp, #36	; 0x24
 8004da2:	ed8d 1b00 	vstr	d1, [sp]
 8004da6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004daa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004dae:	ea58 0102 	orrs.w	r1, r8, r2
 8004db2:	ec57 6b10 	vmov	r6, r7, d0
 8004db6:	d115      	bne.n	8004de4 <__ieee754_pow+0x4c>
 8004db8:	19b3      	adds	r3, r6, r6
 8004dba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004dbe:	4152      	adcs	r2, r2
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	4b89      	ldr	r3, [pc, #548]	; (8004fe8 <__ieee754_pow+0x250>)
 8004dc4:	4193      	sbcs	r3, r2
 8004dc6:	f080 84d2 	bcs.w	800576e <__ieee754_pow+0x9d6>
 8004dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7fb fa0b 	bl	80001ec <__adddf3>
 8004dd6:	ec41 0b10 	vmov	d0, r0, r1
 8004dda:	b009      	add	sp, #36	; 0x24
 8004ddc:	ecbd 8b06 	vpop	{d8-d10}
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	4b81      	ldr	r3, [pc, #516]	; (8004fec <__ieee754_pow+0x254>)
 8004de6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004dea:	429c      	cmp	r4, r3
 8004dec:	ee10 aa10 	vmov	sl, s0
 8004df0:	463d      	mov	r5, r7
 8004df2:	dc06      	bgt.n	8004e02 <__ieee754_pow+0x6a>
 8004df4:	d101      	bne.n	8004dfa <__ieee754_pow+0x62>
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d1e7      	bne.n	8004dca <__ieee754_pow+0x32>
 8004dfa:	4598      	cmp	r8, r3
 8004dfc:	dc01      	bgt.n	8004e02 <__ieee754_pow+0x6a>
 8004dfe:	d10f      	bne.n	8004e20 <__ieee754_pow+0x88>
 8004e00:	b172      	cbz	r2, 8004e20 <__ieee754_pow+0x88>
 8004e02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004e06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004e0a:	ea55 050a 	orrs.w	r5, r5, sl
 8004e0e:	d1dc      	bne.n	8004dca <__ieee754_pow+0x32>
 8004e10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004e14:	18db      	adds	r3, r3, r3
 8004e16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004e1a:	4152      	adcs	r2, r2
 8004e1c:	429d      	cmp	r5, r3
 8004e1e:	e7d0      	b.n	8004dc2 <__ieee754_pow+0x2a>
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	da3b      	bge.n	8004e9c <__ieee754_pow+0x104>
 8004e24:	4b72      	ldr	r3, [pc, #456]	; (8004ff0 <__ieee754_pow+0x258>)
 8004e26:	4598      	cmp	r8, r3
 8004e28:	dc51      	bgt.n	8004ece <__ieee754_pow+0x136>
 8004e2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e2e:	4598      	cmp	r8, r3
 8004e30:	f340 84ac 	ble.w	800578c <__ieee754_pow+0x9f4>
 8004e34:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e3c:	2b14      	cmp	r3, #20
 8004e3e:	dd0f      	ble.n	8004e60 <__ieee754_pow+0xc8>
 8004e40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e44:	fa22 f103 	lsr.w	r1, r2, r3
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	f040 849d 	bne.w	800578c <__ieee754_pow+0x9f4>
 8004e52:	f001 0101 	and.w	r1, r1, #1
 8004e56:	f1c1 0302 	rsb	r3, r1, #2
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	b182      	cbz	r2, 8004e80 <__ieee754_pow+0xe8>
 8004e5e:	e05f      	b.n	8004f20 <__ieee754_pow+0x188>
 8004e60:	2a00      	cmp	r2, #0
 8004e62:	d15b      	bne.n	8004f1c <__ieee754_pow+0x184>
 8004e64:	f1c3 0314 	rsb	r3, r3, #20
 8004e68:	fa48 f103 	asr.w	r1, r8, r3
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	4543      	cmp	r3, r8
 8004e72:	f040 8488 	bne.w	8005786 <__ieee754_pow+0x9ee>
 8004e76:	f001 0101 	and.w	r1, r1, #1
 8004e7a:	f1c1 0302 	rsb	r3, r1, #2
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <__ieee754_pow+0x25c>)
 8004e82:	4598      	cmp	r8, r3
 8004e84:	d132      	bne.n	8004eec <__ieee754_pow+0x154>
 8004e86:	f1b9 0f00 	cmp.w	r9, #0
 8004e8a:	f280 8478 	bge.w	800577e <__ieee754_pow+0x9e6>
 8004e8e:	4959      	ldr	r1, [pc, #356]	; (8004ff4 <__ieee754_pow+0x25c>)
 8004e90:	4632      	mov	r2, r6
 8004e92:	463b      	mov	r3, r7
 8004e94:	2000      	movs	r0, #0
 8004e96:	f7fb fc89 	bl	80007ac <__aeabi_ddiv>
 8004e9a:	e79c      	b.n	8004dd6 <__ieee754_pow+0x3e>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d13d      	bne.n	8004f20 <__ieee754_pow+0x188>
 8004ea4:	4b51      	ldr	r3, [pc, #324]	; (8004fec <__ieee754_pow+0x254>)
 8004ea6:	4598      	cmp	r8, r3
 8004ea8:	d1ea      	bne.n	8004e80 <__ieee754_pow+0xe8>
 8004eaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004eae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004eb2:	ea53 030a 	orrs.w	r3, r3, sl
 8004eb6:	f000 845a 	beq.w	800576e <__ieee754_pow+0x9d6>
 8004eba:	4b4f      	ldr	r3, [pc, #316]	; (8004ff8 <__ieee754_pow+0x260>)
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	dd08      	ble.n	8004ed2 <__ieee754_pow+0x13a>
 8004ec0:	f1b9 0f00 	cmp.w	r9, #0
 8004ec4:	f2c0 8457 	blt.w	8005776 <__ieee754_pow+0x9de>
 8004ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ecc:	e783      	b.n	8004dd6 <__ieee754_pow+0x3e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e7e5      	b.n	8004e9e <__ieee754_pow+0x106>
 8004ed2:	f1b9 0f00 	cmp.w	r9, #0
 8004ed6:	f04f 0000 	mov.w	r0, #0
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	f6bf af7a 	bge.w	8004dd6 <__ieee754_pow+0x3e>
 8004ee2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004ee6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eea:	e774      	b.n	8004dd6 <__ieee754_pow+0x3e>
 8004eec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004ef0:	d106      	bne.n	8004f00 <__ieee754_pow+0x168>
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	f7fb fb2d 	bl	8000558 <__aeabi_dmul>
 8004efe:	e76a      	b.n	8004dd6 <__ieee754_pow+0x3e>
 8004f00:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <__ieee754_pow+0x264>)
 8004f02:	4599      	cmp	r9, r3
 8004f04:	d10c      	bne.n	8004f20 <__ieee754_pow+0x188>
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	db0a      	blt.n	8004f20 <__ieee754_pow+0x188>
 8004f0a:	ec47 6b10 	vmov	d0, r6, r7
 8004f0e:	b009      	add	sp, #36	; 0x24
 8004f10:	ecbd 8b06 	vpop	{d8-d10}
 8004f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	f000 bc6c 	b.w	80057f4 <__ieee754_sqrt>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9304      	str	r3, [sp, #16]
 8004f20:	ec47 6b10 	vmov	d0, r6, r7
 8004f24:	f000 fd48 	bl	80059b8 <fabs>
 8004f28:	ec51 0b10 	vmov	r0, r1, d0
 8004f2c:	f1ba 0f00 	cmp.w	sl, #0
 8004f30:	d129      	bne.n	8004f86 <__ieee754_pow+0x1ee>
 8004f32:	b124      	cbz	r4, 8004f3e <__ieee754_pow+0x1a6>
 8004f34:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <__ieee754_pow+0x25c>)
 8004f36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d123      	bne.n	8004f86 <__ieee754_pow+0x1ee>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	da05      	bge.n	8004f50 <__ieee754_pow+0x1b8>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	2000      	movs	r0, #0
 8004f4a:	492a      	ldr	r1, [pc, #168]	; (8004ff4 <__ieee754_pow+0x25c>)
 8004f4c:	f7fb fc2e 	bl	80007ac <__aeabi_ddiv>
 8004f50:	2d00      	cmp	r5, #0
 8004f52:	f6bf af40 	bge.w	8004dd6 <__ieee754_pow+0x3e>
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f60:	4323      	orrs	r3, r4
 8004f62:	d108      	bne.n	8004f76 <__ieee754_pow+0x1de>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7fb f93c 	bl	80001e8 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	e78f      	b.n	8004e96 <__ieee754_pow+0xfe>
 8004f76:	9b04      	ldr	r3, [sp, #16]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f47f af2c 	bne.w	8004dd6 <__ieee754_pow+0x3e>
 8004f7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f82:	4619      	mov	r1, r3
 8004f84:	e727      	b.n	8004dd6 <__ieee754_pow+0x3e>
 8004f86:	0feb      	lsrs	r3, r5, #31
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	9306      	str	r3, [sp, #24]
 8004f8c:	9a06      	ldr	r2, [sp, #24]
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d102      	bne.n	8004f9a <__ieee754_pow+0x202>
 8004f94:	4632      	mov	r2, r6
 8004f96:	463b      	mov	r3, r7
 8004f98:	e7e6      	b.n	8004f68 <__ieee754_pow+0x1d0>
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <__ieee754_pow+0x268>)
 8004f9c:	4598      	cmp	r8, r3
 8004f9e:	f340 80fb 	ble.w	8005198 <__ieee754_pow+0x400>
 8004fa2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fa6:	4598      	cmp	r8, r3
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <__ieee754_pow+0x260>)
 8004faa:	dd0c      	ble.n	8004fc6 <__ieee754_pow+0x22e>
 8004fac:	429c      	cmp	r4, r3
 8004fae:	dc0f      	bgt.n	8004fd0 <__ieee754_pow+0x238>
 8004fb0:	f1b9 0f00 	cmp.w	r9, #0
 8004fb4:	da0f      	bge.n	8004fd6 <__ieee754_pow+0x23e>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	b009      	add	sp, #36	; 0x24
 8004fba:	ecbd 8b06 	vpop	{d8-d10}
 8004fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc2:	f000 bcf0 	b.w	80059a6 <__math_oflow>
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	dbf2      	blt.n	8004fb0 <__ieee754_pow+0x218>
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <__ieee754_pow+0x25c>)
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	dd19      	ble.n	8005004 <__ieee754_pow+0x26c>
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	dcef      	bgt.n	8004fb6 <__ieee754_pow+0x21e>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	b009      	add	sp, #36	; 0x24
 8004fda:	ecbd 8b06 	vpop	{d8-d10}
 8004fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe2:	f000 bcd7 	b.w	8005994 <__math_uflow>
 8004fe6:	bf00      	nop
 8004fe8:	fff00000 	.word	0xfff00000
 8004fec:	7ff00000 	.word	0x7ff00000
 8004ff0:	433fffff 	.word	0x433fffff
 8004ff4:	3ff00000 	.word	0x3ff00000
 8004ff8:	3fefffff 	.word	0x3fefffff
 8004ffc:	3fe00000 	.word	0x3fe00000
 8005000:	41e00000 	.word	0x41e00000
 8005004:	4b60      	ldr	r3, [pc, #384]	; (8005188 <__ieee754_pow+0x3f0>)
 8005006:	2200      	movs	r2, #0
 8005008:	f7fb f8ee 	bl	80001e8 <__aeabi_dsub>
 800500c:	a354      	add	r3, pc, #336	; (adr r3, 8005160 <__ieee754_pow+0x3c8>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	f7fb fa9f 	bl	8000558 <__aeabi_dmul>
 800501a:	a353      	add	r3, pc, #332	; (adr r3, 8005168 <__ieee754_pow+0x3d0>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb fa96 	bl	8000558 <__aeabi_dmul>
 800502c:	4b57      	ldr	r3, [pc, #348]	; (800518c <__ieee754_pow+0x3f4>)
 800502e:	4682      	mov	sl, r0
 8005030:	468b      	mov	fp, r1
 8005032:	2200      	movs	r2, #0
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f7fb fa8e 	bl	8000558 <__aeabi_dmul>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	a14b      	add	r1, pc, #300	; (adr r1, 8005170 <__ieee754_pow+0x3d8>)
 8005042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005046:	f7fb f8cf 	bl	80001e8 <__aeabi_dsub>
 800504a:	4622      	mov	r2, r4
 800504c:	462b      	mov	r3, r5
 800504e:	f7fb fa83 	bl	8000558 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	2000      	movs	r0, #0
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <__ieee754_pow+0x3f8>)
 800505a:	f7fb f8c5 	bl	80001e8 <__aeabi_dsub>
 800505e:	4622      	mov	r2, r4
 8005060:	4680      	mov	r8, r0
 8005062:	4689      	mov	r9, r1
 8005064:	462b      	mov	r3, r5
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb fa75 	bl	8000558 <__aeabi_dmul>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4640      	mov	r0, r8
 8005074:	4649      	mov	r1, r9
 8005076:	f7fb fa6f 	bl	8000558 <__aeabi_dmul>
 800507a:	a33f      	add	r3, pc, #252	; (adr r3, 8005178 <__ieee754_pow+0x3e0>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb fa6a 	bl	8000558 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4650      	mov	r0, sl
 800508a:	4659      	mov	r1, fp
 800508c:	f7fb f8ac 	bl	80001e8 <__aeabi_dsub>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4680      	mov	r8, r0
 8005096:	4689      	mov	r9, r1
 8005098:	4630      	mov	r0, r6
 800509a:	4639      	mov	r1, r7
 800509c:	f7fb f8a6 	bl	80001ec <__adddf3>
 80050a0:	2000      	movs	r0, #0
 80050a2:	4632      	mov	r2, r6
 80050a4:	463b      	mov	r3, r7
 80050a6:	4604      	mov	r4, r0
 80050a8:	460d      	mov	r5, r1
 80050aa:	f7fb f89d 	bl	80001e8 <__aeabi_dsub>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4640      	mov	r0, r8
 80050b4:	4649      	mov	r1, r9
 80050b6:	f7fb f897 	bl	80001e8 <__aeabi_dsub>
 80050ba:	9b04      	ldr	r3, [sp, #16]
 80050bc:	9a06      	ldr	r2, [sp, #24]
 80050be:	3b01      	subs	r3, #1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	4682      	mov	sl, r0
 80050c4:	468b      	mov	fp, r1
 80050c6:	f040 81e7 	bne.w	8005498 <__ieee754_pow+0x700>
 80050ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005180 <__ieee754_pow+0x3e8>
 80050ce:	eeb0 8a47 	vmov.f32	s16, s14
 80050d2:	eef0 8a67 	vmov.f32	s17, s15
 80050d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050da:	2600      	movs	r6, #0
 80050dc:	4632      	mov	r2, r6
 80050de:	463b      	mov	r3, r7
 80050e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e4:	f7fb f880 	bl	80001e8 <__aeabi_dsub>
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	f7fb fa34 	bl	8000558 <__aeabi_dmul>
 80050f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f4:	4680      	mov	r8, r0
 80050f6:	4689      	mov	r9, r1
 80050f8:	4650      	mov	r0, sl
 80050fa:	4659      	mov	r1, fp
 80050fc:	f7fb fa2c 	bl	8000558 <__aeabi_dmul>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb f870 	bl	80001ec <__adddf3>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	4680      	mov	r8, r0
 8005112:	4689      	mov	r9, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb fa1e 	bl	8000558 <__aeabi_dmul>
 800511c:	460b      	mov	r3, r1
 800511e:	4604      	mov	r4, r0
 8005120:	460d      	mov	r5, r1
 8005122:	4602      	mov	r2, r0
 8005124:	4649      	mov	r1, r9
 8005126:	4640      	mov	r0, r8
 8005128:	f7fb f860 	bl	80001ec <__adddf3>
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <__ieee754_pow+0x3fc>)
 800512e:	4299      	cmp	r1, r3
 8005130:	ec45 4b19 	vmov	d9, r4, r5
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	468b      	mov	fp, r1
 800513a:	f340 82f1 	ble.w	8005720 <__ieee754_pow+0x988>
 800513e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005142:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005146:	4303      	orrs	r3, r0
 8005148:	f000 81e4 	beq.w	8005514 <__ieee754_pow+0x77c>
 800514c:	ec51 0b18 	vmov	r0, r1, d8
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	f7fb fc72 	bl	8000a3c <__aeabi_dcmplt>
 8005158:	3800      	subs	r0, #0
 800515a:	bf18      	it	ne
 800515c:	2001      	movne	r0, #1
 800515e:	e72b      	b.n	8004fb8 <__ieee754_pow+0x220>
 8005160:	60000000 	.word	0x60000000
 8005164:	3ff71547 	.word	0x3ff71547
 8005168:	f85ddf44 	.word	0xf85ddf44
 800516c:	3e54ae0b 	.word	0x3e54ae0b
 8005170:	55555555 	.word	0x55555555
 8005174:	3fd55555 	.word	0x3fd55555
 8005178:	652b82fe 	.word	0x652b82fe
 800517c:	3ff71547 	.word	0x3ff71547
 8005180:	00000000 	.word	0x00000000
 8005184:	bff00000 	.word	0xbff00000
 8005188:	3ff00000 	.word	0x3ff00000
 800518c:	3fd00000 	.word	0x3fd00000
 8005190:	3fe00000 	.word	0x3fe00000
 8005194:	408fffff 	.word	0x408fffff
 8005198:	4bd5      	ldr	r3, [pc, #852]	; (80054f0 <__ieee754_pow+0x758>)
 800519a:	402b      	ands	r3, r5
 800519c:	2200      	movs	r2, #0
 800519e:	b92b      	cbnz	r3, 80051ac <__ieee754_pow+0x414>
 80051a0:	4bd4      	ldr	r3, [pc, #848]	; (80054f4 <__ieee754_pow+0x75c>)
 80051a2:	f7fb f9d9 	bl	8000558 <__aeabi_dmul>
 80051a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051aa:	460c      	mov	r4, r1
 80051ac:	1523      	asrs	r3, r4, #20
 80051ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051b2:	4413      	add	r3, r2
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4bd0      	ldr	r3, [pc, #832]	; (80054f8 <__ieee754_pow+0x760>)
 80051b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051c0:	429c      	cmp	r4, r3
 80051c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051c6:	dd08      	ble.n	80051da <__ieee754_pow+0x442>
 80051c8:	4bcc      	ldr	r3, [pc, #816]	; (80054fc <__ieee754_pow+0x764>)
 80051ca:	429c      	cmp	r4, r3
 80051cc:	f340 8162 	ble.w	8005494 <__ieee754_pow+0x6fc>
 80051d0:	9b05      	ldr	r3, [sp, #20]
 80051d2:	3301      	adds	r3, #1
 80051d4:	9305      	str	r3, [sp, #20]
 80051d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80051da:	2400      	movs	r4, #0
 80051dc:	00e3      	lsls	r3, r4, #3
 80051de:	9307      	str	r3, [sp, #28]
 80051e0:	4bc7      	ldr	r3, [pc, #796]	; (8005500 <__ieee754_pow+0x768>)
 80051e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051e6:	ed93 7b00 	vldr	d7, [r3]
 80051ea:	4629      	mov	r1, r5
 80051ec:	ec53 2b17 	vmov	r2, r3, d7
 80051f0:	eeb0 9a47 	vmov.f32	s18, s14
 80051f4:	eef0 9a67 	vmov.f32	s19, s15
 80051f8:	4682      	mov	sl, r0
 80051fa:	f7fa fff5 	bl	80001e8 <__aeabi_dsub>
 80051fe:	4652      	mov	r2, sl
 8005200:	4606      	mov	r6, r0
 8005202:	460f      	mov	r7, r1
 8005204:	462b      	mov	r3, r5
 8005206:	ec51 0b19 	vmov	r0, r1, d9
 800520a:	f7fa ffef 	bl	80001ec <__adddf3>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	2000      	movs	r0, #0
 8005214:	49bb      	ldr	r1, [pc, #748]	; (8005504 <__ieee754_pow+0x76c>)
 8005216:	f7fb fac9 	bl	80007ac <__aeabi_ddiv>
 800521a:	ec41 0b1a 	vmov	d10, r0, r1
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4630      	mov	r0, r6
 8005224:	4639      	mov	r1, r7
 8005226:	f7fb f997 	bl	8000558 <__aeabi_dmul>
 800522a:	2300      	movs	r3, #0
 800522c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005236:	46ab      	mov	fp, r5
 8005238:	106d      	asrs	r5, r5, #1
 800523a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800523e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005242:	ec41 0b18 	vmov	d8, r0, r1
 8005246:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800524a:	2200      	movs	r2, #0
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	f7fb f980 	bl	8000558 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4630      	mov	r0, r6
 800525e:	4639      	mov	r1, r7
 8005260:	f7fa ffc2 	bl	80001e8 <__aeabi_dsub>
 8005264:	ec53 2b19 	vmov	r2, r3, d9
 8005268:	4606      	mov	r6, r0
 800526a:	460f      	mov	r7, r1
 800526c:	4620      	mov	r0, r4
 800526e:	4629      	mov	r1, r5
 8005270:	f7fa ffba 	bl	80001e8 <__aeabi_dsub>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4650      	mov	r0, sl
 800527a:	4659      	mov	r1, fp
 800527c:	f7fa ffb4 	bl	80001e8 <__aeabi_dsub>
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	f7fb f968 	bl	8000558 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa ffaa 	bl	80001e8 <__aeabi_dsub>
 8005294:	ec53 2b1a 	vmov	r2, r3, d10
 8005298:	f7fb f95e 	bl	8000558 <__aeabi_dmul>
 800529c:	ec53 2b18 	vmov	r2, r3, d8
 80052a0:	ec41 0b19 	vmov	d9, r0, r1
 80052a4:	ec51 0b18 	vmov	r0, r1, d8
 80052a8:	f7fb f956 	bl	8000558 <__aeabi_dmul>
 80052ac:	a37c      	add	r3, pc, #496	; (adr r3, 80054a0 <__ieee754_pow+0x708>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	f7fb f94f 	bl	8000558 <__aeabi_dmul>
 80052ba:	a37b      	add	r3, pc, #492	; (adr r3, 80054a8 <__ieee754_pow+0x710>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fa ff94 	bl	80001ec <__adddf3>
 80052c4:	4622      	mov	r2, r4
 80052c6:	462b      	mov	r3, r5
 80052c8:	f7fb f946 	bl	8000558 <__aeabi_dmul>
 80052cc:	a378      	add	r3, pc, #480	; (adr r3, 80054b0 <__ieee754_pow+0x718>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa ff8b 	bl	80001ec <__adddf3>
 80052d6:	4622      	mov	r2, r4
 80052d8:	462b      	mov	r3, r5
 80052da:	f7fb f93d 	bl	8000558 <__aeabi_dmul>
 80052de:	a376      	add	r3, pc, #472	; (adr r3, 80054b8 <__ieee754_pow+0x720>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fa ff82 	bl	80001ec <__adddf3>
 80052e8:	4622      	mov	r2, r4
 80052ea:	462b      	mov	r3, r5
 80052ec:	f7fb f934 	bl	8000558 <__aeabi_dmul>
 80052f0:	a373      	add	r3, pc, #460	; (adr r3, 80054c0 <__ieee754_pow+0x728>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	f7fa ff79 	bl	80001ec <__adddf3>
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	f7fb f92b 	bl	8000558 <__aeabi_dmul>
 8005302:	a371      	add	r3, pc, #452	; (adr r3, 80054c8 <__ieee754_pow+0x730>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ff70 	bl	80001ec <__adddf3>
 800530c:	4622      	mov	r2, r4
 800530e:	4606      	mov	r6, r0
 8005310:	460f      	mov	r7, r1
 8005312:	462b      	mov	r3, r5
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fb f91e 	bl	8000558 <__aeabi_dmul>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb f918 	bl	8000558 <__aeabi_dmul>
 8005328:	4642      	mov	r2, r8
 800532a:	4604      	mov	r4, r0
 800532c:	460d      	mov	r5, r1
 800532e:	464b      	mov	r3, r9
 8005330:	ec51 0b18 	vmov	r0, r1, d8
 8005334:	f7fa ff5a 	bl	80001ec <__adddf3>
 8005338:	ec53 2b19 	vmov	r2, r3, d9
 800533c:	f7fb f90c 	bl	8000558 <__aeabi_dmul>
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	f7fa ff52 	bl	80001ec <__adddf3>
 8005348:	4642      	mov	r2, r8
 800534a:	4682      	mov	sl, r0
 800534c:	468b      	mov	fp, r1
 800534e:	464b      	mov	r3, r9
 8005350:	4640      	mov	r0, r8
 8005352:	4649      	mov	r1, r9
 8005354:	f7fb f900 	bl	8000558 <__aeabi_dmul>
 8005358:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <__ieee754_pow+0x770>)
 800535a:	2200      	movs	r2, #0
 800535c:	4606      	mov	r6, r0
 800535e:	460f      	mov	r7, r1
 8005360:	f7fa ff44 	bl	80001ec <__adddf3>
 8005364:	4652      	mov	r2, sl
 8005366:	465b      	mov	r3, fp
 8005368:	f7fa ff40 	bl	80001ec <__adddf3>
 800536c:	2000      	movs	r0, #0
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb f8ed 	bl	8000558 <__aeabi_dmul>
 800537e:	4b62      	ldr	r3, [pc, #392]	; (8005508 <__ieee754_pow+0x770>)
 8005380:	4680      	mov	r8, r0
 8005382:	4689      	mov	r9, r1
 8005384:	2200      	movs	r2, #0
 8005386:	4620      	mov	r0, r4
 8005388:	4629      	mov	r1, r5
 800538a:	f7fa ff2d 	bl	80001e8 <__aeabi_dsub>
 800538e:	4632      	mov	r2, r6
 8005390:	463b      	mov	r3, r7
 8005392:	f7fa ff29 	bl	80001e8 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4650      	mov	r0, sl
 800539c:	4659      	mov	r1, fp
 800539e:	f7fa ff23 	bl	80001e8 <__aeabi_dsub>
 80053a2:	ec53 2b18 	vmov	r2, r3, d8
 80053a6:	f7fb f8d7 	bl	8000558 <__aeabi_dmul>
 80053aa:	4622      	mov	r2, r4
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	462b      	mov	r3, r5
 80053b2:	ec51 0b19 	vmov	r0, r1, d9
 80053b6:	f7fb f8cf 	bl	8000558 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4630      	mov	r0, r6
 80053c0:	4639      	mov	r1, r7
 80053c2:	f7fa ff13 	bl	80001ec <__adddf3>
 80053c6:	4606      	mov	r6, r0
 80053c8:	460f      	mov	r7, r1
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fa ff0b 	bl	80001ec <__adddf3>
 80053d6:	a33e      	add	r3, pc, #248	; (adr r3, 80054d0 <__ieee754_pow+0x738>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	2000      	movs	r0, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	460d      	mov	r5, r1
 80053e2:	f7fb f8b9 	bl	8000558 <__aeabi_dmul>
 80053e6:	4642      	mov	r2, r8
 80053e8:	ec41 0b18 	vmov	d8, r0, r1
 80053ec:	464b      	mov	r3, r9
 80053ee:	4620      	mov	r0, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7fa fef9 	bl	80001e8 <__aeabi_dsub>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fa fef3 	bl	80001e8 <__aeabi_dsub>
 8005402:	a335      	add	r3, pc, #212	; (adr r3, 80054d8 <__ieee754_pow+0x740>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fb f8a6 	bl	8000558 <__aeabi_dmul>
 800540c:	a334      	add	r3, pc, #208	; (adr r3, 80054e0 <__ieee754_pow+0x748>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	4606      	mov	r6, r0
 8005414:	460f      	mov	r7, r1
 8005416:	4620      	mov	r0, r4
 8005418:	4629      	mov	r1, r5
 800541a:	f7fb f89d 	bl	8000558 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4630      	mov	r0, r6
 8005424:	4639      	mov	r1, r7
 8005426:	f7fa fee1 	bl	80001ec <__adddf3>
 800542a:	9a07      	ldr	r2, [sp, #28]
 800542c:	4b37      	ldr	r3, [pc, #220]	; (800550c <__ieee754_pow+0x774>)
 800542e:	4413      	add	r3, r2
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f7fa feda 	bl	80001ec <__adddf3>
 8005438:	4682      	mov	sl, r0
 800543a:	9805      	ldr	r0, [sp, #20]
 800543c:	468b      	mov	fp, r1
 800543e:	f7fb f821 	bl	8000484 <__aeabi_i2d>
 8005442:	9a07      	ldr	r2, [sp, #28]
 8005444:	4b32      	ldr	r3, [pc, #200]	; (8005510 <__ieee754_pow+0x778>)
 8005446:	4413      	add	r3, r2
 8005448:	e9d3 8900 	ldrd	r8, r9, [r3]
 800544c:	4606      	mov	r6, r0
 800544e:	460f      	mov	r7, r1
 8005450:	4652      	mov	r2, sl
 8005452:	465b      	mov	r3, fp
 8005454:	ec51 0b18 	vmov	r0, r1, d8
 8005458:	f7fa fec8 	bl	80001ec <__adddf3>
 800545c:	4642      	mov	r2, r8
 800545e:	464b      	mov	r3, r9
 8005460:	f7fa fec4 	bl	80001ec <__adddf3>
 8005464:	4632      	mov	r2, r6
 8005466:	463b      	mov	r3, r7
 8005468:	f7fa fec0 	bl	80001ec <__adddf3>
 800546c:	2000      	movs	r0, #0
 800546e:	4632      	mov	r2, r6
 8005470:	463b      	mov	r3, r7
 8005472:	4604      	mov	r4, r0
 8005474:	460d      	mov	r5, r1
 8005476:	f7fa feb7 	bl	80001e8 <__aeabi_dsub>
 800547a:	4642      	mov	r2, r8
 800547c:	464b      	mov	r3, r9
 800547e:	f7fa feb3 	bl	80001e8 <__aeabi_dsub>
 8005482:	ec53 2b18 	vmov	r2, r3, d8
 8005486:	f7fa feaf 	bl	80001e8 <__aeabi_dsub>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4650      	mov	r0, sl
 8005490:	4659      	mov	r1, fp
 8005492:	e610      	b.n	80050b6 <__ieee754_pow+0x31e>
 8005494:	2401      	movs	r4, #1
 8005496:	e6a1      	b.n	80051dc <__ieee754_pow+0x444>
 8005498:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80054e8 <__ieee754_pow+0x750>
 800549c:	e617      	b.n	80050ce <__ieee754_pow+0x336>
 800549e:	bf00      	nop
 80054a0:	4a454eef 	.word	0x4a454eef
 80054a4:	3fca7e28 	.word	0x3fca7e28
 80054a8:	93c9db65 	.word	0x93c9db65
 80054ac:	3fcd864a 	.word	0x3fcd864a
 80054b0:	a91d4101 	.word	0xa91d4101
 80054b4:	3fd17460 	.word	0x3fd17460
 80054b8:	518f264d 	.word	0x518f264d
 80054bc:	3fd55555 	.word	0x3fd55555
 80054c0:	db6fabff 	.word	0xdb6fabff
 80054c4:	3fdb6db6 	.word	0x3fdb6db6
 80054c8:	33333303 	.word	0x33333303
 80054cc:	3fe33333 	.word	0x3fe33333
 80054d0:	e0000000 	.word	0xe0000000
 80054d4:	3feec709 	.word	0x3feec709
 80054d8:	dc3a03fd 	.word	0xdc3a03fd
 80054dc:	3feec709 	.word	0x3feec709
 80054e0:	145b01f5 	.word	0x145b01f5
 80054e4:	be3e2fe0 	.word	0xbe3e2fe0
 80054e8:	00000000 	.word	0x00000000
 80054ec:	3ff00000 	.word	0x3ff00000
 80054f0:	7ff00000 	.word	0x7ff00000
 80054f4:	43400000 	.word	0x43400000
 80054f8:	0003988e 	.word	0x0003988e
 80054fc:	000bb679 	.word	0x000bb679
 8005500:	08005bb8 	.word	0x08005bb8
 8005504:	3ff00000 	.word	0x3ff00000
 8005508:	40080000 	.word	0x40080000
 800550c:	08005bd8 	.word	0x08005bd8
 8005510:	08005bc8 	.word	0x08005bc8
 8005514:	a3b5      	add	r3, pc, #724	; (adr r3, 80057ec <__ieee754_pow+0xa54>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4640      	mov	r0, r8
 800551c:	4649      	mov	r1, r9
 800551e:	f7fa fe65 	bl	80001ec <__adddf3>
 8005522:	4622      	mov	r2, r4
 8005524:	ec41 0b1a 	vmov	d10, r0, r1
 8005528:	462b      	mov	r3, r5
 800552a:	4630      	mov	r0, r6
 800552c:	4639      	mov	r1, r7
 800552e:	f7fa fe5b 	bl	80001e8 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	ec51 0b1a 	vmov	r0, r1, d10
 800553a:	f7fb fa9d 	bl	8000a78 <__aeabi_dcmpgt>
 800553e:	2800      	cmp	r0, #0
 8005540:	f47f ae04 	bne.w	800514c <__ieee754_pow+0x3b4>
 8005544:	4aa4      	ldr	r2, [pc, #656]	; (80057d8 <__ieee754_pow+0xa40>)
 8005546:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800554a:	4293      	cmp	r3, r2
 800554c:	f340 8108 	ble.w	8005760 <__ieee754_pow+0x9c8>
 8005550:	151b      	asrs	r3, r3, #20
 8005552:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005556:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800555a:	fa4a f303 	asr.w	r3, sl, r3
 800555e:	445b      	add	r3, fp
 8005560:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005564:	4e9d      	ldr	r6, [pc, #628]	; (80057dc <__ieee754_pow+0xa44>)
 8005566:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800556a:	4116      	asrs	r6, r2
 800556c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005570:	2000      	movs	r0, #0
 8005572:	ea23 0106 	bic.w	r1, r3, r6
 8005576:	f1c2 0214 	rsb	r2, r2, #20
 800557a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800557e:	fa4a fa02 	asr.w	sl, sl, r2
 8005582:	f1bb 0f00 	cmp.w	fp, #0
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	bfb8      	it	lt
 8005590:	f1ca 0a00 	rsblt	sl, sl, #0
 8005594:	f7fa fe28 	bl	80001e8 <__aeabi_dsub>
 8005598:	ec41 0b19 	vmov	d9, r0, r1
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	ec51 0b19 	vmov	r0, r1, d9
 80055a4:	f7fa fe22 	bl	80001ec <__adddf3>
 80055a8:	a37b      	add	r3, pc, #492	; (adr r3, 8005798 <__ieee754_pow+0xa00>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	2000      	movs	r0, #0
 80055b0:	4604      	mov	r4, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	f7fa ffd0 	bl	8000558 <__aeabi_dmul>
 80055b8:	ec53 2b19 	vmov	r2, r3, d9
 80055bc:	4606      	mov	r6, r0
 80055be:	460f      	mov	r7, r1
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fa fe10 	bl	80001e8 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4640      	mov	r0, r8
 80055ce:	4649      	mov	r1, r9
 80055d0:	f7fa fe0a 	bl	80001e8 <__aeabi_dsub>
 80055d4:	a372      	add	r3, pc, #456	; (adr r3, 80057a0 <__ieee754_pow+0xa08>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa ffbd 	bl	8000558 <__aeabi_dmul>
 80055de:	a372      	add	r3, pc, #456	; (adr r3, 80057a8 <__ieee754_pow+0xa10>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fa ffb4 	bl	8000558 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fa fdf8 	bl	80001ec <__adddf3>
 80055fc:	4604      	mov	r4, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fa fdf0 	bl	80001ec <__adddf3>
 800560c:	4632      	mov	r2, r6
 800560e:	463b      	mov	r3, r7
 8005610:	4680      	mov	r8, r0
 8005612:	4689      	mov	r9, r1
 8005614:	f7fa fde8 	bl	80001e8 <__aeabi_dsub>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa fde2 	bl	80001e8 <__aeabi_dsub>
 8005624:	4642      	mov	r2, r8
 8005626:	4606      	mov	r6, r0
 8005628:	460f      	mov	r7, r1
 800562a:	464b      	mov	r3, r9
 800562c:	4640      	mov	r0, r8
 800562e:	4649      	mov	r1, r9
 8005630:	f7fa ff92 	bl	8000558 <__aeabi_dmul>
 8005634:	a35e      	add	r3, pc, #376	; (adr r3, 80057b0 <__ieee754_pow+0xa18>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	f7fa ff8b 	bl	8000558 <__aeabi_dmul>
 8005642:	a35d      	add	r3, pc, #372	; (adr r3, 80057b8 <__ieee754_pow+0xa20>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fdce 	bl	80001e8 <__aeabi_dsub>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	f7fa ff82 	bl	8000558 <__aeabi_dmul>
 8005654:	a35a      	add	r3, pc, #360	; (adr r3, 80057c0 <__ieee754_pow+0xa28>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fdc7 	bl	80001ec <__adddf3>
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ff79 	bl	8000558 <__aeabi_dmul>
 8005666:	a358      	add	r3, pc, #352	; (adr r3, 80057c8 <__ieee754_pow+0xa30>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa fdbc 	bl	80001e8 <__aeabi_dsub>
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	f7fa ff70 	bl	8000558 <__aeabi_dmul>
 8005678:	a355      	add	r3, pc, #340	; (adr r3, 80057d0 <__ieee754_pow+0xa38>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa fdb5 	bl	80001ec <__adddf3>
 8005682:	4622      	mov	r2, r4
 8005684:	462b      	mov	r3, r5
 8005686:	f7fa ff67 	bl	8000558 <__aeabi_dmul>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fa fda9 	bl	80001e8 <__aeabi_dsub>
 8005696:	4604      	mov	r4, r0
 8005698:	460d      	mov	r5, r1
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fa ff59 	bl	8000558 <__aeabi_dmul>
 80056a6:	2200      	movs	r2, #0
 80056a8:	ec41 0b19 	vmov	d9, r0, r1
 80056ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fd98 	bl	80001e8 <__aeabi_dsub>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	ec51 0b19 	vmov	r0, r1, d9
 80056c0:	f7fb f874 	bl	80007ac <__aeabi_ddiv>
 80056c4:	4632      	mov	r2, r6
 80056c6:	4604      	mov	r4, r0
 80056c8:	460d      	mov	r5, r1
 80056ca:	463b      	mov	r3, r7
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fa ff42 	bl	8000558 <__aeabi_dmul>
 80056d4:	4632      	mov	r2, r6
 80056d6:	463b      	mov	r3, r7
 80056d8:	f7fa fd88 	bl	80001ec <__adddf3>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7fa fd80 	bl	80001e8 <__aeabi_dsub>
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	f7fa fd7c 	bl	80001e8 <__aeabi_dsub>
 80056f0:	460b      	mov	r3, r1
 80056f2:	4602      	mov	r2, r0
 80056f4:	493a      	ldr	r1, [pc, #232]	; (80057e0 <__ieee754_pow+0xa48>)
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7fa fd76 	bl	80001e8 <__aeabi_dsub>
 80056fc:	ec41 0b10 	vmov	d0, r0, r1
 8005700:	ee10 3a90 	vmov	r3, s1
 8005704:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570c:	da2b      	bge.n	8005766 <__ieee754_pow+0x9ce>
 800570e:	4650      	mov	r0, sl
 8005710:	f000 f966 	bl	80059e0 <scalbn>
 8005714:	ec51 0b10 	vmov	r0, r1, d0
 8005718:	ec53 2b18 	vmov	r2, r3, d8
 800571c:	f7ff bbed 	b.w	8004efa <__ieee754_pow+0x162>
 8005720:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <__ieee754_pow+0xa4c>)
 8005722:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005726:	429e      	cmp	r6, r3
 8005728:	f77f af0c 	ble.w	8005544 <__ieee754_pow+0x7ac>
 800572c:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <__ieee754_pow+0xa50>)
 800572e:	440b      	add	r3, r1
 8005730:	4303      	orrs	r3, r0
 8005732:	d009      	beq.n	8005748 <__ieee754_pow+0x9b0>
 8005734:	ec51 0b18 	vmov	r0, r1, d8
 8005738:	2200      	movs	r2, #0
 800573a:	2300      	movs	r3, #0
 800573c:	f7fb f97e 	bl	8000a3c <__aeabi_dcmplt>
 8005740:	3800      	subs	r0, #0
 8005742:	bf18      	it	ne
 8005744:	2001      	movne	r0, #1
 8005746:	e447      	b.n	8004fd8 <__ieee754_pow+0x240>
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	f7fa fd4c 	bl	80001e8 <__aeabi_dsub>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	f7fb f986 	bl	8000a64 <__aeabi_dcmpge>
 8005758:	2800      	cmp	r0, #0
 800575a:	f43f aef3 	beq.w	8005544 <__ieee754_pow+0x7ac>
 800575e:	e7e9      	b.n	8005734 <__ieee754_pow+0x99c>
 8005760:	f04f 0a00 	mov.w	sl, #0
 8005764:	e71a      	b.n	800559c <__ieee754_pow+0x804>
 8005766:	ec51 0b10 	vmov	r0, r1, d0
 800576a:	4619      	mov	r1, r3
 800576c:	e7d4      	b.n	8005718 <__ieee754_pow+0x980>
 800576e:	491c      	ldr	r1, [pc, #112]	; (80057e0 <__ieee754_pow+0xa48>)
 8005770:	2000      	movs	r0, #0
 8005772:	f7ff bb30 	b.w	8004dd6 <__ieee754_pow+0x3e>
 8005776:	2000      	movs	r0, #0
 8005778:	2100      	movs	r1, #0
 800577a:	f7ff bb2c 	b.w	8004dd6 <__ieee754_pow+0x3e>
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7ff bb28 	b.w	8004dd6 <__ieee754_pow+0x3e>
 8005786:	9204      	str	r2, [sp, #16]
 8005788:	f7ff bb7a 	b.w	8004e80 <__ieee754_pow+0xe8>
 800578c:	2300      	movs	r3, #0
 800578e:	f7ff bb64 	b.w	8004e5a <__ieee754_pow+0xc2>
 8005792:	bf00      	nop
 8005794:	f3af 8000 	nop.w
 8005798:	00000000 	.word	0x00000000
 800579c:	3fe62e43 	.word	0x3fe62e43
 80057a0:	fefa39ef 	.word	0xfefa39ef
 80057a4:	3fe62e42 	.word	0x3fe62e42
 80057a8:	0ca86c39 	.word	0x0ca86c39
 80057ac:	be205c61 	.word	0xbe205c61
 80057b0:	72bea4d0 	.word	0x72bea4d0
 80057b4:	3e663769 	.word	0x3e663769
 80057b8:	c5d26bf1 	.word	0xc5d26bf1
 80057bc:	3ebbbd41 	.word	0x3ebbbd41
 80057c0:	af25de2c 	.word	0xaf25de2c
 80057c4:	3f11566a 	.word	0x3f11566a
 80057c8:	16bebd93 	.word	0x16bebd93
 80057cc:	3f66c16c 	.word	0x3f66c16c
 80057d0:	5555553e 	.word	0x5555553e
 80057d4:	3fc55555 	.word	0x3fc55555
 80057d8:	3fe00000 	.word	0x3fe00000
 80057dc:	000fffff 	.word	0x000fffff
 80057e0:	3ff00000 	.word	0x3ff00000
 80057e4:	4090cbff 	.word	0x4090cbff
 80057e8:	3f6f3400 	.word	0x3f6f3400
 80057ec:	652b82fe 	.word	0x652b82fe
 80057f0:	3c971547 	.word	0x3c971547

080057f4 <__ieee754_sqrt>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	ec55 4b10 	vmov	r4, r5, d0
 80057fc:	4e55      	ldr	r6, [pc, #340]	; (8005954 <__ieee754_sqrt+0x160>)
 80057fe:	43ae      	bics	r6, r5
 8005800:	ee10 0a10 	vmov	r0, s0
 8005804:	ee10 3a10 	vmov	r3, s0
 8005808:	462a      	mov	r2, r5
 800580a:	4629      	mov	r1, r5
 800580c:	d110      	bne.n	8005830 <__ieee754_sqrt+0x3c>
 800580e:	ee10 2a10 	vmov	r2, s0
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa fea0 	bl	8000558 <__aeabi_dmul>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fce4 	bl	80001ec <__adddf3>
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	ec45 4b10 	vmov	d0, r4, r5
 800582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005830:	2d00      	cmp	r5, #0
 8005832:	dc10      	bgt.n	8005856 <__ieee754_sqrt+0x62>
 8005834:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005838:	4330      	orrs	r0, r6
 800583a:	d0f5      	beq.n	8005828 <__ieee754_sqrt+0x34>
 800583c:	b15d      	cbz	r5, 8005856 <__ieee754_sqrt+0x62>
 800583e:	ee10 2a10 	vmov	r2, s0
 8005842:	462b      	mov	r3, r5
 8005844:	ee10 0a10 	vmov	r0, s0
 8005848:	f7fa fcce 	bl	80001e8 <__aeabi_dsub>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	f7fa ffac 	bl	80007ac <__aeabi_ddiv>
 8005854:	e7e6      	b.n	8005824 <__ieee754_sqrt+0x30>
 8005856:	1512      	asrs	r2, r2, #20
 8005858:	d074      	beq.n	8005944 <__ieee754_sqrt+0x150>
 800585a:	07d4      	lsls	r4, r2, #31
 800585c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005860:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005868:	bf5e      	ittt	pl
 800586a:	0fda      	lsrpl	r2, r3, #31
 800586c:	005b      	lslpl	r3, r3, #1
 800586e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005872:	2400      	movs	r4, #0
 8005874:	0fda      	lsrs	r2, r3, #31
 8005876:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800587a:	107f      	asrs	r7, r7, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	2516      	movs	r5, #22
 8005880:	4620      	mov	r0, r4
 8005882:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005886:	1886      	adds	r6, r0, r2
 8005888:	428e      	cmp	r6, r1
 800588a:	bfde      	ittt	le
 800588c:	1b89      	suble	r1, r1, r6
 800588e:	18b0      	addle	r0, r6, r2
 8005890:	18a4      	addle	r4, r4, r2
 8005892:	0049      	lsls	r1, r1, #1
 8005894:	3d01      	subs	r5, #1
 8005896:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800589a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800589e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058a2:	d1f0      	bne.n	8005886 <__ieee754_sqrt+0x92>
 80058a4:	462a      	mov	r2, r5
 80058a6:	f04f 0e20 	mov.w	lr, #32
 80058aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80058ae:	4281      	cmp	r1, r0
 80058b0:	eb06 0c05 	add.w	ip, r6, r5
 80058b4:	dc02      	bgt.n	80058bc <__ieee754_sqrt+0xc8>
 80058b6:	d113      	bne.n	80058e0 <__ieee754_sqrt+0xec>
 80058b8:	459c      	cmp	ip, r3
 80058ba:	d811      	bhi.n	80058e0 <__ieee754_sqrt+0xec>
 80058bc:	f1bc 0f00 	cmp.w	ip, #0
 80058c0:	eb0c 0506 	add.w	r5, ip, r6
 80058c4:	da43      	bge.n	800594e <__ieee754_sqrt+0x15a>
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	db41      	blt.n	800594e <__ieee754_sqrt+0x15a>
 80058ca:	f100 0801 	add.w	r8, r0, #1
 80058ce:	1a09      	subs	r1, r1, r0
 80058d0:	459c      	cmp	ip, r3
 80058d2:	bf88      	it	hi
 80058d4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80058d8:	eba3 030c 	sub.w	r3, r3, ip
 80058dc:	4432      	add	r2, r6
 80058de:	4640      	mov	r0, r8
 80058e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80058e4:	f1be 0e01 	subs.w	lr, lr, #1
 80058e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80058ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80058f4:	d1db      	bne.n	80058ae <__ieee754_sqrt+0xba>
 80058f6:	430b      	orrs	r3, r1
 80058f8:	d006      	beq.n	8005908 <__ieee754_sqrt+0x114>
 80058fa:	1c50      	adds	r0, r2, #1
 80058fc:	bf13      	iteet	ne
 80058fe:	3201      	addne	r2, #1
 8005900:	3401      	addeq	r4, #1
 8005902:	4672      	moveq	r2, lr
 8005904:	f022 0201 	bicne.w	r2, r2, #1
 8005908:	1063      	asrs	r3, r4, #1
 800590a:	0852      	lsrs	r2, r2, #1
 800590c:	07e1      	lsls	r1, r4, #31
 800590e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005912:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005916:	bf48      	it	mi
 8005918:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800591c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005920:	4614      	mov	r4, r2
 8005922:	e781      	b.n	8005828 <__ieee754_sqrt+0x34>
 8005924:	0ad9      	lsrs	r1, r3, #11
 8005926:	3815      	subs	r0, #21
 8005928:	055b      	lsls	r3, r3, #21
 800592a:	2900      	cmp	r1, #0
 800592c:	d0fa      	beq.n	8005924 <__ieee754_sqrt+0x130>
 800592e:	02cd      	lsls	r5, r1, #11
 8005930:	d50a      	bpl.n	8005948 <__ieee754_sqrt+0x154>
 8005932:	f1c2 0420 	rsb	r4, r2, #32
 8005936:	fa23 f404 	lsr.w	r4, r3, r4
 800593a:	1e55      	subs	r5, r2, #1
 800593c:	4093      	lsls	r3, r2
 800593e:	4321      	orrs	r1, r4
 8005940:	1b42      	subs	r2, r0, r5
 8005942:	e78a      	b.n	800585a <__ieee754_sqrt+0x66>
 8005944:	4610      	mov	r0, r2
 8005946:	e7f0      	b.n	800592a <__ieee754_sqrt+0x136>
 8005948:	0049      	lsls	r1, r1, #1
 800594a:	3201      	adds	r2, #1
 800594c:	e7ef      	b.n	800592e <__ieee754_sqrt+0x13a>
 800594e:	4680      	mov	r8, r0
 8005950:	e7bd      	b.n	80058ce <__ieee754_sqrt+0xda>
 8005952:	bf00      	nop
 8005954:	7ff00000 	.word	0x7ff00000

08005958 <with_errno>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	460d      	mov	r5, r1
 800595e:	4616      	mov	r6, r2
 8005960:	f7ff f924 	bl	8004bac <__errno>
 8005964:	4629      	mov	r1, r5
 8005966:	6006      	str	r6, [r0, #0]
 8005968:	4620      	mov	r0, r4
 800596a:	bd70      	pop	{r4, r5, r6, pc}

0800596c <xflow>:
 800596c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800596e:	4614      	mov	r4, r2
 8005970:	461d      	mov	r5, r3
 8005972:	b108      	cbz	r0, 8005978 <xflow+0xc>
 8005974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005978:	e9cd 2300 	strd	r2, r3, [sp]
 800597c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005980:	4620      	mov	r0, r4
 8005982:	4629      	mov	r1, r5
 8005984:	f7fa fde8 	bl	8000558 <__aeabi_dmul>
 8005988:	2222      	movs	r2, #34	; 0x22
 800598a:	b003      	add	sp, #12
 800598c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005990:	f7ff bfe2 	b.w	8005958 <with_errno>

08005994 <__math_uflow>:
 8005994:	b508      	push	{r3, lr}
 8005996:	2200      	movs	r2, #0
 8005998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800599c:	f7ff ffe6 	bl	800596c <xflow>
 80059a0:	ec41 0b10 	vmov	d0, r0, r1
 80059a4:	bd08      	pop	{r3, pc}

080059a6 <__math_oflow>:
 80059a6:	b508      	push	{r3, lr}
 80059a8:	2200      	movs	r2, #0
 80059aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80059ae:	f7ff ffdd 	bl	800596c <xflow>
 80059b2:	ec41 0b10 	vmov	d0, r0, r1
 80059b6:	bd08      	pop	{r3, pc}

080059b8 <fabs>:
 80059b8:	ec51 0b10 	vmov	r0, r1, d0
 80059bc:	ee10 2a10 	vmov	r2, s0
 80059c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059c4:	ec43 2b10 	vmov	d0, r2, r3
 80059c8:	4770      	bx	lr

080059ca <finite>:
 80059ca:	b082      	sub	sp, #8
 80059cc:	ed8d 0b00 	vstr	d0, [sp]
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80059d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80059da:	0fc0      	lsrs	r0, r0, #31
 80059dc:	b002      	add	sp, #8
 80059de:	4770      	bx	lr

080059e0 <scalbn>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	ec55 4b10 	vmov	r4, r5, d0
 80059e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80059ea:	4606      	mov	r6, r0
 80059ec:	462b      	mov	r3, r5
 80059ee:	b99a      	cbnz	r2, 8005a18 <scalbn+0x38>
 80059f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80059f4:	4323      	orrs	r3, r4
 80059f6:	d036      	beq.n	8005a66 <scalbn+0x86>
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <scalbn+0x100>)
 80059fa:	4629      	mov	r1, r5
 80059fc:	ee10 0a10 	vmov	r0, s0
 8005a00:	2200      	movs	r2, #0
 8005a02:	f7fa fda9 	bl	8000558 <__aeabi_dmul>
 8005a06:	4b37      	ldr	r3, [pc, #220]	; (8005ae4 <scalbn+0x104>)
 8005a08:	429e      	cmp	r6, r3
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	460d      	mov	r5, r1
 8005a0e:	da10      	bge.n	8005a32 <scalbn+0x52>
 8005a10:	a32b      	add	r3, pc, #172	; (adr r3, 8005ac0 <scalbn+0xe0>)
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	e03a      	b.n	8005a8e <scalbn+0xae>
 8005a18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	d10c      	bne.n	8005a3a <scalbn+0x5a>
 8005a20:	ee10 2a10 	vmov	r2, s0
 8005a24:	4620      	mov	r0, r4
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7fa fbe0 	bl	80001ec <__adddf3>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	e019      	b.n	8005a66 <scalbn+0x86>
 8005a32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a36:	460b      	mov	r3, r1
 8005a38:	3a36      	subs	r2, #54	; 0x36
 8005a3a:	4432      	add	r2, r6
 8005a3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a40:	428a      	cmp	r2, r1
 8005a42:	dd08      	ble.n	8005a56 <scalbn+0x76>
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	a120      	add	r1, pc, #128	; (adr r1, 8005ac8 <scalbn+0xe8>)
 8005a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a4c:	da1c      	bge.n	8005a88 <scalbn+0xa8>
 8005a4e:	a120      	add	r1, pc, #128	; (adr r1, 8005ad0 <scalbn+0xf0>)
 8005a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a54:	e018      	b.n	8005a88 <scalbn+0xa8>
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	dd08      	ble.n	8005a6c <scalbn+0x8c>
 8005a5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a66:	ec45 4b10 	vmov	d0, r4, r5
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005a70:	da19      	bge.n	8005aa6 <scalbn+0xc6>
 8005a72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a76:	429e      	cmp	r6, r3
 8005a78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005a7c:	dd0a      	ble.n	8005a94 <scalbn+0xb4>
 8005a7e:	a112      	add	r1, pc, #72	; (adr r1, 8005ac8 <scalbn+0xe8>)
 8005a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e2      	bne.n	8005a4e <scalbn+0x6e>
 8005a88:	a30f      	add	r3, pc, #60	; (adr r3, 8005ac8 <scalbn+0xe8>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fd63 	bl	8000558 <__aeabi_dmul>
 8005a92:	e7cb      	b.n	8005a2c <scalbn+0x4c>
 8005a94:	a10a      	add	r1, pc, #40	; (adr r1, 8005ac0 <scalbn+0xe0>)
 8005a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0b8      	beq.n	8005a10 <scalbn+0x30>
 8005a9e:	a10e      	add	r1, pc, #56	; (adr r1, 8005ad8 <scalbn+0xf8>)
 8005aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa4:	e7b4      	b.n	8005a10 <scalbn+0x30>
 8005aa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005aaa:	3236      	adds	r2, #54	; 0x36
 8005aac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ab0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <scalbn+0x108>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	e7e8      	b.n	8005a8e <scalbn+0xae>
 8005abc:	f3af 8000 	nop.w
 8005ac0:	c2f8f359 	.word	0xc2f8f359
 8005ac4:	01a56e1f 	.word	0x01a56e1f
 8005ac8:	8800759c 	.word	0x8800759c
 8005acc:	7e37e43c 	.word	0x7e37e43c
 8005ad0:	8800759c 	.word	0x8800759c
 8005ad4:	fe37e43c 	.word	0xfe37e43c
 8005ad8:	c2f8f359 	.word	0xc2f8f359
 8005adc:	81a56e1f 	.word	0x81a56e1f
 8005ae0:	43500000 	.word	0x43500000
 8005ae4:	ffff3cb0 	.word	0xffff3cb0
 8005ae8:	3c900000 	.word	0x3c900000

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
